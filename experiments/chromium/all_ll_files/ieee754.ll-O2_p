; ModuleID = '../../third_party/fdlibm/ieee754.cc'
source_filename = "../../third_party/fdlibm/ieee754.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZZN6fdlibm4atanEdE6atanhi = internal unnamed_addr constant [4 x double] [double 0x3FDDAC670561BB4F, double 0x3FE921FB54442D18, double 0x3FEF730BD281F69B, double 0x3FF921FB54442D18], align 16
@_ZZN6fdlibm4atanEdE6atanlo = internal constant [4 x double] [double 0x3C7A2B7F222F65E2, double 0x3C81A62633145C07, double 0x3C7007887AF0CBBD, double 0x3C91A62633145C07], align 16
@_ZZN6fdlibm5atan2EddE4tiny = internal global double 1.000000e-300, align 8
@_ZZN6fdlibm5atan2EddE5pi_lo = internal global double 0x3CA1A62633145C07, align 8
@_ZZN6fdlibm3expEdE4halF = internal unnamed_addr constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 16
@_ZZN6fdlibm3expEdE5ln2HI = internal unnamed_addr constant [2 x double] [double 0x3FE62E42FEE00000, double 0xBFE62E42FEE00000], align 16
@_ZZN6fdlibm3expEdE5ln2LO = internal unnamed_addr constant [2 x double] [double 0x3DEA39EF35793C76, double 0xBDEA39EF35793C76], align 16
@_ZZN6fdlibm3expEdE4huge = internal global double 1.000000e+300, align 8
@_ZZN6fdlibm3expEdE8twom1000 = internal global double 0x170000000000000, align 8
@_ZZN6fdlibm3expEdE7two1023 = internal global double 0x7FE0000000000000, align 8
@_ZZN6fdlibm5expm1EdE4huge = internal global double 1.000000e+300, align 8
@_ZZN6fdlibm4coshEdE4huge = internal global double 1.000000e+300, align 8
@_ZZN6fdlibm3powEddE2bp = internal unnamed_addr constant [2 x double] [double 1.000000e+00, double 1.500000e+00], align 16
@_ZZN6fdlibm3powEddE4dp_h = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3FE2B80340000000], align 16
@_ZZN6fdlibm3powEddE4dp_l = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3E4CFDEB43CFD006], align 16
@_ZZN6fdlibm4tanhEdE4tiny = internal constant double 1.000000e-300, align 8
@_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi = internal unnamed_addr constant [66 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859], align 16
@_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE8npio2_hw = internal unnamed_addr constant [32 x i32] [i32 1073291771, i32 1074340347, i32 1074977148, i32 1075388923, i32 1075800698, i32 1076025724, i32 1076231611, i32 1076437499, i32 1076643386, i32 1076849274, i32 1076971356, i32 1077074300, i32 1077177244, i32 1077280187, i32 1077383131, i32 1077486075, i32 1077589019, i32 1077691962, i32 1077794906, i32 1077897850, i32 1077968460, i32 1078019932, i32 1078071404, i32 1078122876, i32 1078174348, i32 1078225820, i32 1078277292, i32 1078328763, i32 1078380235, i32 1078431707, i32 1078483179, i32 1078534651], align 16

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm4acosEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1072693247
  br i1 %6, label %7, label %15

7:                                                ; preds = %1
  %8 = trunc i64 %2 to i32
  %9 = add nsw i32 %5, -1072693248
  %10 = or i32 %9, %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %111

12:                                               ; preds = %7
  %13 = icmp sgt i32 %4, 0
  %14 = select i1 %13, double 0.000000e+00, double 0x400921FB54442D18
  br label %111

15:                                               ; preds = %1
  %16 = icmp ult i32 %5, 1071644672
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ult i32 %5, 1012924417
  br i1 %18, label %111, label %19

19:                                               ; preds = %17
  %20 = fmul double %0, %0
  %21 = fmul double %20, 0x3F023DE10DFDF709
  %22 = fadd double %21, 0x3F49EFE07501B288
  %23 = fmul double %20, %22
  %24 = fadd double %23, 0xBFA48228B5688F3B
  %25 = fmul double %20, %24
  %26 = fadd double %25, 0x3FC9C1550E884455
  %27 = fmul double %20, %26
  %28 = fadd double %27, 0xBFD4D61203EB6F7D
  %29 = fmul double %20, %28
  %30 = fadd double %29, 0x3FC5555555555555
  %31 = fmul double %20, %30
  %32 = fmul double %20, 0x3FB3B8C5B12E9282
  %33 = fadd double %32, 0xBFE6066C1B8D0159
  %34 = fmul double %20, %33
  %35 = fadd double %34, 0x40002AE59C598AC8
  %36 = fmul double %20, %35
  %37 = fadd double %36, 0xC0033A271C8A2D4B
  %38 = fmul double %20, %37
  %39 = fadd double %38, 1.000000e+00
  %40 = fdiv double %31, %39
  %41 = fmul double %40, %0
  %42 = fsub double 0x3C91A62633145C07, %41
  %43 = fsub double %42, %0
  %44 = fadd double %43, 0x3FF921FB54442D18
  br label %111

45:                                               ; preds = %15
  %46 = icmp slt i32 %4, 0
  br i1 %46, label %47, label %76

47:                                               ; preds = %45
  %48 = fadd double %0, 1.000000e+00
  %49 = fmul double %48, 5.000000e-01
  %50 = fmul double %49, 0x3F023DE10DFDF709
  %51 = fadd double %50, 0x3F49EFE07501B288
  %52 = fmul double %49, %51
  %53 = fadd double %52, 0xBFA48228B5688F3B
  %54 = fmul double %49, %53
  %55 = fadd double %54, 0x3FC9C1550E884455
  %56 = fmul double %49, %55
  %57 = fadd double %56, 0xBFD4D61203EB6F7D
  %58 = fmul double %49, %57
  %59 = fadd double %58, 0x3FC5555555555555
  %60 = fmul double %49, %59
  %61 = fmul double %49, 0x3FB3B8C5B12E9282
  %62 = fadd double %61, 0xBFE6066C1B8D0159
  %63 = fmul double %49, %62
  %64 = fadd double %63, 0x40002AE59C598AC8
  %65 = fmul double %49, %64
  %66 = fadd double %65, 0xC0033A271C8A2D4B
  %67 = fmul double %49, %66
  %68 = fadd double %67, 1.000000e+00
  %69 = tail call double @sqrt(double %49) #7
  %70 = fdiv double %60, %68
  %71 = fmul double %70, %69
  %72 = fadd double %71, 0xBC91A62633145C07
  %73 = fadd double %69, %72
  %74 = fmul double %73, 2.000000e+00
  %75 = fsub double 0x400921FB54442D18, %74
  br label %111

76:                                               ; preds = %45
  %77 = fsub double 1.000000e+00, %0
  %78 = fmul double %77, 5.000000e-01
  %79 = tail call double @sqrt(double %78) #7
  %80 = bitcast double %79 to i64
  %81 = and i64 %80, -4294967296
  %82 = bitcast i64 %81 to double
  %83 = fmul double %82, %82
  %84 = fsub double %78, %83
  %85 = fadd double %79, %82
  %86 = fdiv double %84, %85
  %87 = fmul double %78, 0x3F023DE10DFDF709
  %88 = fadd double %87, 0x3F49EFE07501B288
  %89 = fmul double %78, %88
  %90 = fadd double %89, 0xBFA48228B5688F3B
  %91 = fmul double %78, %90
  %92 = fadd double %91, 0x3FC9C1550E884455
  %93 = fmul double %78, %92
  %94 = fadd double %93, 0xBFD4D61203EB6F7D
  %95 = fmul double %78, %94
  %96 = fadd double %95, 0x3FC5555555555555
  %97 = fmul double %78, %96
  %98 = fmul double %78, 0x3FB3B8C5B12E9282
  %99 = fadd double %98, 0xBFE6066C1B8D0159
  %100 = fmul double %78, %99
  %101 = fadd double %100, 0x40002AE59C598AC8
  %102 = fmul double %78, %101
  %103 = fadd double %102, 0xC0033A271C8A2D4B
  %104 = fmul double %78, %103
  %105 = fadd double %104, 1.000000e+00
  %106 = fdiv double %97, %105
  %107 = fmul double %106, %79
  %108 = fadd double %107, %86
  %109 = fadd double %108, %82
  %110 = fmul double %109, 2.000000e+00
  br label %111

111:                                              ; preds = %7, %17, %12, %76, %47, %19
  %112 = phi double [ %44, %19 ], [ %75, %47 ], [ %110, %76 ], [ %14, %12 ], [ 0x3FF921FB54442D18, %17 ], [ 0x7FF4000000000000, %7 ]
  ret double %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN6fdlibm5acoshEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1072693248
  br i1 %6, label %39, label %7

7:                                                ; preds = %1
  %8 = icmp sgt i32 %4, 1102053375
  br i1 %8, label %9, label %16

9:                                                ; preds = %7
  %10 = icmp sgt i32 %4, 2146435071
  br i1 %10, label %11, label %13

11:                                               ; preds = %9
  %12 = fadd double %0, %0
  br label %39

13:                                               ; preds = %9
  %14 = tail call double @_ZN6fdlibm3logEd(double %0)
  %15 = fadd double %14, 0x3FE62E42FEFA39EF
  br label %39

16:                                               ; preds = %7
  %17 = add nsw i32 %4, -1072693248
  %18 = or i32 %17, %5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %39, label %20

20:                                               ; preds = %16
  %21 = icmp sgt i32 %4, 1073741824
  br i1 %21, label %22, label %31

22:                                               ; preds = %20
  %23 = fmul double %0, %0
  %24 = fmul double %0, 2.000000e+00
  %25 = fadd double %23, -1.000000e+00
  %26 = tail call double @sqrt(double %25) #7
  %27 = fadd double %26, %0
  %28 = fdiv double 1.000000e+00, %27
  %29 = fsub double %24, %28
  %30 = tail call double @_ZN6fdlibm3logEd(double %29)
  br label %39

31:                                               ; preds = %20
  %32 = fadd double %0, -1.000000e+00
  %33 = fmul double %32, 2.000000e+00
  %34 = fmul double %32, %32
  %35 = fadd double %33, %34
  %36 = tail call double @sqrt(double %35) #7
  %37 = fadd double %32, %36
  %38 = tail call double @_ZN6fdlibm5log1pEd(double %37)
  br label %39

39:                                               ; preds = %1, %16, %31, %22, %13, %11
  %40 = phi double [ %12, %11 ], [ %15, %13 ], [ %30, %22 ], [ %38, %31 ], [ 0.000000e+00, %16 ], [ 0x7FF4000000000000, %1 ]
  ret double %40
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm3logEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = icmp slt i32 %4, 1048576
  br i1 %5, label %6, label %18

6:                                                ; preds = %1
  %7 = trunc i64 %2 to i32
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %124, label %11

11:                                               ; preds = %6
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %124, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi double [ %14, %13 ], [ %0, %1 ]
  %20 = phi i64 [ %15, %13 ], [ %2, %1 ]
  %21 = phi i32 [ -1077, %13 ], [ -1023, %1 ]
  %22 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %23 = icmp sgt i32 %22, 2146435071
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = fadd double %19, %19
  br label %124

26:                                               ; preds = %18
  %27 = ashr i32 %22, 20
  %28 = and i32 %22, 1048575
  %29 = add nuw nsw i32 %28, 614244
  %30 = and i32 %29, 1048576
  %31 = and i64 %20, 4294967295
  %32 = or i32 %30, %28
  %33 = xor i32 %32, 1072693248
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = or i64 %35, %31
  %37 = bitcast i64 %36 to double
  %38 = lshr i32 %29, 20
  %39 = add nsw i32 %21, %27
  %40 = add nsw i32 %39, %38
  %41 = fadd double %37, -1.000000e+00
  %42 = add nsw i32 %22, 2
  %43 = and i32 %42, 1048575
  %44 = icmp ult i32 %43, 3
  br i1 %44, label %45, label %69

45:                                               ; preds = %26
  %46 = fcmp oeq double %41, 0.000000e+00
  br i1 %46, label %47, label %54

47:                                               ; preds = %45
  %48 = icmp eq i32 %40, 0
  br i1 %48, label %124, label %49

49:                                               ; preds = %47
  %50 = sitofp i32 %40 to double
  %51 = fmul double %50, 0x3FE62E42FEE00000
  %52 = fmul double %50, 0x3DEA39EF35793C76
  %53 = fadd double %51, %52
  br label %124

54:                                               ; preds = %45
  %55 = fmul double %41, %41
  %56 = fmul double %41, 0x3FD5555555555555
  %57 = fsub double 5.000000e-01, %56
  %58 = fmul double %55, %57
  %59 = icmp eq i32 %40, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = fsub double %41, %58
  br label %124

62:                                               ; preds = %54
  %63 = sitofp i32 %40 to double
  %64 = fmul double %63, 0x3FE62E42FEE00000
  %65 = fmul double %63, 0x3DEA39EF35793C76
  %66 = fsub double %58, %65
  %67 = fsub double %66, %41
  %68 = fsub double %64, %67
  br label %124

69:                                               ; preds = %26
  %70 = fadd double %41, 2.000000e+00
  %71 = fdiv double %41, %70
  %72 = sitofp i32 %40 to double
  %73 = fmul double %71, %71
  %74 = add nsw i32 %28, -398458
  %75 = fmul double %73, %73
  %76 = sub nsw i32 440401, %28
  %77 = fmul double %75, 0x3FC39A09D078C69F
  %78 = fadd double %77, 0x3FCC71C51D8E78AF
  %79 = fmul double %75, %78
  %80 = fadd double %79, 0x3FD999999997FA04
  %81 = fmul double %75, %80
  %82 = fmul double %75, 0x3FC2F112DF3E5244
  %83 = fadd double %82, 0x3FC7466496CB03DE
  %84 = fmul double %75, %83
  %85 = fadd double %84, 0x3FD2492494229359
  %86 = fmul double %75, %85
  %87 = fadd double %86, 0x3FE5555555555593
  %88 = fmul double %73, %87
  %89 = or i32 %74, %76
  %90 = fadd double %81, %88
  %91 = icmp sgt i32 %89, 0
  br i1 %91, label %92, label %110

92:                                               ; preds = %69
  %93 = fmul double %41, 5.000000e-01
  %94 = fmul double %41, %93
  %95 = icmp eq i32 %40, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %92
  %97 = fadd double %94, %90
  %98 = fmul double %71, %97
  %99 = fsub double %94, %98
  %100 = fsub double %41, %99
  br label %124

101:                                              ; preds = %92
  %102 = fmul double %72, 0x3FE62E42FEE00000
  %103 = fadd double %94, %90
  %104 = fmul double %71, %103
  %105 = fmul double %72, 0x3DEA39EF35793C76
  %106 = fadd double %105, %104
  %107 = fsub double %94, %106
  %108 = fsub double %107, %41
  %109 = fsub double %102, %108
  br label %124

110:                                              ; preds = %69
  %111 = icmp eq i32 %40, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %110
  %113 = fsub double %41, %90
  %114 = fmul double %71, %113
  %115 = fsub double %41, %114
  br label %124

116:                                              ; preds = %110
  %117 = fmul double %72, 0x3FE62E42FEE00000
  %118 = fsub double %41, %90
  %119 = fmul double %71, %118
  %120 = fmul double %72, 0x3DEA39EF35793C76
  %121 = fsub double %119, %120
  %122 = fsub double %121, %41
  %123 = fsub double %117, %122
  br label %124

124:                                              ; preds = %11, %6, %47, %116, %112, %101, %96, %62, %60, %49, %24
  %125 = phi double [ %25, %24 ], [ %53, %49 ], [ %61, %60 ], [ %68, %62 ], [ %100, %96 ], [ %109, %101 ], [ %115, %112 ], [ %123, %116 ], [ 0.000000e+00, %47 ], [ 0xFFF0000000000000, %6 ], [ 0x7FF4000000000000, %11 ]
  ret double %125
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm5log1pEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp slt i32 %4, 1071284858
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = icmp ugt i32 %5, 1072693247
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = fcmp oeq double %0, -1.000000e+00
  br i1 %10, label %148, label %11

11:                                               ; preds = %9
  br label %148

12:                                               ; preds = %7
  %13 = icmp ult i32 %5, 1042284544
  br i1 %13, label %14, label %27

14:                                               ; preds = %12
  %15 = fadd double %0, 0x4350000000000000
  %16 = fcmp ogt double %15, 0.000000e+00
  %17 = icmp ult i32 %5, 1016070144
  %18 = and i1 %16, %17
  br i1 %18, label %148, label %19

19:                                               ; preds = %14
  %20 = fmul double %0, %0
  %21 = fmul double %20, 5.000000e-01
  %22 = fsub double %0, %21
  br label %148

23:                                               ; preds = %1
  %24 = icmp sgt i32 %4, 2146435071
  br i1 %24, label %25, label %34

25:                                               ; preds = %23
  %26 = fadd double %0, %0
  br label %148

27:                                               ; preds = %12
  %28 = add i32 %4, 1076707643
  %29 = icmp ugt i32 %28, 1076707643
  %30 = select i1 %29, double %0, double 0xFFFFFFFFFFFFFFFF
  br i1 %29, label %31, label %36

31:                                               ; preds = %27
  %32 = fmul double %30, 5.000000e-01
  %33 = fmul double %30, %32
  br label %110

34:                                               ; preds = %23
  %35 = icmp slt i32 %4, 1128267776
  br i1 %35, label %36, label %50

36:                                               ; preds = %27, %34
  %37 = fadd double %0, 1.000000e+00
  %38 = bitcast double %37 to i64
  %39 = lshr i64 %38, 32
  %40 = trunc i64 %39 to i32
  %41 = ashr i32 %40, 20
  %42 = add nsw i32 %41, -1023
  %43 = icmp sgt i32 %42, 0
  %44 = fsub double %0, %37
  %45 = fadd double %44, 1.000000e+00
  %46 = fadd double %37, -1.000000e+00
  %47 = fsub double %0, %46
  %48 = select i1 %43, double %45, double %47
  %49 = fdiv double %48, %37
  br label %54

50:                                               ; preds = %34
  %51 = lshr i64 %2, 52
  %52 = trunc i64 %51 to i32
  %53 = add nsw i32 %52, -1023
  br label %54

54:                                               ; preds = %50, %36
  %55 = phi i64 [ %38, %36 ], [ %2, %50 ]
  %56 = phi double [ %49, %36 ], [ 0.000000e+00, %50 ]
  %57 = phi i32 [ %42, %36 ], [ %53, %50 ]
  %58 = phi i32 [ %40, %36 ], [ %4, %50 ]
  %59 = and i32 %58, 1048575
  %60 = icmp ult i32 %59, 434334
  br i1 %60, label %61, label %67

61:                                               ; preds = %54
  %62 = and i64 %55, 4294967295
  %63 = or i32 %59, 1072693248
  %64 = zext i32 %63 to i64
  %65 = shl nuw nsw i64 %64, 32
  %66 = or i64 %65, %62
  br label %76

67:                                               ; preds = %54
  %68 = add nsw i32 %57, 1
  %69 = and i64 %55, 4294967295
  %70 = or i32 %59, 1071644672
  %71 = zext i32 %70 to i64
  %72 = shl nuw nsw i64 %71, 32
  %73 = or i64 %72, %69
  %74 = sub nuw nsw i32 1048576, %59
  %75 = lshr i32 %74, 2
  br label %76

76:                                               ; preds = %61, %67
  %77 = phi i64 [ %66, %61 ], [ %73, %67 ]
  %78 = phi i32 [ %57, %61 ], [ %68, %67 ]
  %79 = phi i32 [ %59, %61 ], [ %75, %67 ]
  %80 = bitcast i64 %77 to double
  %81 = fadd double %80, -1.000000e+00
  %82 = fmul double %81, 5.000000e-01
  %83 = fmul double %81, %82
  %84 = icmp eq i32 %79, 0
  br i1 %84, label %85, label %110

85:                                               ; preds = %76
  %86 = fcmp oeq double %81, 0.000000e+00
  br i1 %86, label %87, label %95

87:                                               ; preds = %85
  %88 = icmp eq i32 %78, 0
  br i1 %88, label %148, label %89

89:                                               ; preds = %87
  %90 = sitofp i32 %78 to double
  %91 = fmul double %90, 0x3DEA39EF35793C76
  %92 = fadd double %56, %91
  %93 = fmul double %90, 0x3FE62E42FEE00000
  %94 = fadd double %93, %92
  br label %148

95:                                               ; preds = %85
  %96 = fmul double %81, 0x3FE5555555555555
  %97 = fsub double 1.000000e+00, %96
  %98 = fmul double %83, %97
  %99 = icmp eq i32 %78, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %95
  %101 = fsub double %81, %98
  br label %148

102:                                              ; preds = %95
  %103 = sitofp i32 %78 to double
  %104 = fmul double %103, 0x3FE62E42FEE00000
  %105 = fmul double %103, 0x3DEA39EF35793C76
  %106 = fadd double %56, %105
  %107 = fsub double %98, %106
  %108 = fsub double %107, %81
  %109 = fsub double %104, %108
  br label %148

110:                                              ; preds = %31, %76
  %111 = phi double [ %33, %31 ], [ %83, %76 ]
  %112 = phi double [ %0, %31 ], [ %81, %76 ]
  %113 = phi i32 [ 0, %31 ], [ %78, %76 ]
  %114 = phi double [ 0xFFFFFFFFFFFFFFFF, %31 ], [ %56, %76 ]
  %115 = fadd double %112, 2.000000e+00
  %116 = fdiv double %112, %115
  %117 = fmul double %116, %116
  %118 = fmul double %117, 0x3FC2F112DF3E5244
  %119 = fadd double %118, 0x3FC39A09D078C69F
  %120 = fmul double %117, %119
  %121 = fadd double %120, 0x3FC7466496CB03DE
  %122 = fmul double %117, %121
  %123 = fadd double %122, 0x3FCC71C51D8E78AF
  %124 = fmul double %117, %123
  %125 = fadd double %124, 0x3FD2492494229359
  %126 = fmul double %117, %125
  %127 = fadd double %126, 0x3FD999999997FA04
  %128 = fmul double %117, %127
  %129 = fadd double %128, 0x3FE5555555555593
  %130 = fmul double %117, %129
  %131 = icmp eq i32 %113, 0
  br i1 %131, label %132, label %137

132:                                              ; preds = %110
  %133 = fadd double %111, %130
  %134 = fmul double %116, %133
  %135 = fsub double %111, %134
  %136 = fsub double %112, %135
  br label %148

137:                                              ; preds = %110
  %138 = sitofp i32 %113 to double
  %139 = fmul double %138, 0x3FE62E42FEE00000
  %140 = fadd double %111, %130
  %141 = fmul double %116, %140
  %142 = fmul double %138, 0x3DEA39EF35793C76
  %143 = fadd double %114, %142
  %144 = fadd double %143, %141
  %145 = fsub double %111, %144
  %146 = fsub double %145, %112
  %147 = fsub double %139, %146
  br label %148

148:                                              ; preds = %9, %87, %14, %137, %132, %102, %100, %89, %25, %19, %11
  %149 = phi double [ 0x7FF4000000000000, %11 ], [ %22, %19 ], [ %26, %25 ], [ %94, %89 ], [ %101, %100 ], [ %109, %102 ], [ %136, %132 ], [ %147, %137 ], [ %0, %14 ], [ 0.000000e+00, %87 ], [ 0xFFF0000000000000, %9 ]
  ret double %149
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm4asinEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1072693247
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = trunc i64 %2 to i32
  %9 = add nsw i32 %5, -1072693248
  %10 = or i32 %9, %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %104

12:                                               ; preds = %7
  %13 = fmul double %0, 0x3FF921FB54442D18
  %14 = fmul double %0, 0x3C91A62633145C07
  %15 = fadd double %13, %14
  br label %104

16:                                               ; preds = %1
  %17 = icmp ult i32 %5, 1071644672
  br i1 %17, label %18, label %49

18:                                               ; preds = %16
  %19 = icmp ult i32 %5, 1044381696
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = fadd double %0, 1.000000e+300
  %22 = fcmp ogt double %21, 1.000000e+00
  br i1 %22, label %104, label %25

23:                                               ; preds = %18
  %24 = fmul double %0, %0
  br label %25

25:                                               ; preds = %20, %23
  %26 = phi double [ 0.000000e+00, %20 ], [ %24, %23 ]
  %27 = fmul double %26, 0x3F023DE10DFDF709
  %28 = fadd double %27, 0x3F49EFE07501B288
  %29 = fmul double %26, %28
  %30 = fadd double %29, 0xBFA48228B5688F3B
  %31 = fmul double %26, %30
  %32 = fadd double %31, 0x3FC9C1550E884455
  %33 = fmul double %26, %32
  %34 = fadd double %33, 0xBFD4D61203EB6F7D
  %35 = fmul double %26, %34
  %36 = fadd double %35, 0x3FC5555555555555
  %37 = fmul double %26, %36
  %38 = fmul double %26, 0x3FB3B8C5B12E9282
  %39 = fadd double %38, 0xBFE6066C1B8D0159
  %40 = fmul double %26, %39
  %41 = fadd double %40, 0x40002AE59C598AC8
  %42 = fmul double %26, %41
  %43 = fadd double %42, 0xC0033A271C8A2D4B
  %44 = fmul double %26, %43
  %45 = fadd double %44, 1.000000e+00
  %46 = fdiv double %37, %45
  %47 = fmul double %46, %0
  %48 = fadd double %47, %0
  br label %104

49:                                               ; preds = %16
  %50 = tail call double @llvm.fabs.f64(double %0)
  %51 = fsub double 1.000000e+00, %50
  %52 = fmul double %51, 5.000000e-01
  %53 = fmul double %52, 0x3F023DE10DFDF709
  %54 = fadd double %53, 0x3F49EFE07501B288
  %55 = fmul double %52, %54
  %56 = fadd double %55, 0xBFA48228B5688F3B
  %57 = fmul double %52, %56
  %58 = fadd double %57, 0x3FC9C1550E884455
  %59 = fmul double %52, %58
  %60 = fadd double %59, 0xBFD4D61203EB6F7D
  %61 = fmul double %52, %60
  %62 = fadd double %61, 0x3FC5555555555555
  %63 = fmul double %52, %62
  %64 = fmul double %52, 0x3FB3B8C5B12E9282
  %65 = fadd double %64, 0xBFE6066C1B8D0159
  %66 = fmul double %52, %65
  %67 = fadd double %66, 0x40002AE59C598AC8
  %68 = fmul double %52, %67
  %69 = fadd double %68, 0xC0033A271C8A2D4B
  %70 = fmul double %52, %69
  %71 = fadd double %70, 1.000000e+00
  %72 = tail call double @sqrt(double %52) #7
  %73 = icmp ugt i32 %5, 1072640818
  br i1 %73, label %74, label %81

74:                                               ; preds = %49
  %75 = fdiv double %63, %71
  %76 = fmul double %75, %72
  %77 = fadd double %72, %76
  %78 = fmul double %77, 2.000000e+00
  %79 = fadd double %78, 0xBC91A62633145C07
  %80 = fsub double 0x3FF921FB54442D18, %79
  br label %99

81:                                               ; preds = %49
  %82 = bitcast double %72 to i64
  %83 = and i64 %82, -4294967296
  %84 = bitcast i64 %83 to double
  %85 = fmul double %84, %84
  %86 = fsub double %52, %85
  %87 = fadd double %72, %84
  %88 = fdiv double %86, %87
  %89 = fdiv double %63, %71
  %90 = fmul double %72, 2.000000e+00
  %91 = fmul double %89, %90
  %92 = fmul double %88, 2.000000e+00
  %93 = fsub double 0x3C91A62633145C07, %92
  %94 = fsub double %91, %93
  %95 = fmul double %84, 2.000000e+00
  %96 = fsub double 0x3FE921FB54442D18, %95
  %97 = fsub double %96, %94
  %98 = fadd double %97, 0x3FE921FB54442D18
  br label %99

99:                                               ; preds = %81, %74
  %100 = phi double [ %80, %74 ], [ %98, %81 ]
  %101 = icmp sgt i32 %4, 0
  %102 = fsub double -0.000000e+00, %100
  %103 = select i1 %101, double %100, double %102
  br label %104

104:                                              ; preds = %7, %99, %20, %12, %25
  %105 = phi double [ %48, %25 ], [ %15, %12 ], [ %0, %20 ], [ %103, %99 ], [ 0x7FF4000000000000, %7 ]
  ret double %105
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN6fdlibm5asinhEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 2146435071
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = fadd double %0, %0
  br label %46

9:                                                ; preds = %1
  %10 = icmp ult i32 %5, 1043333120
  br i1 %10, label %11, label %14

11:                                               ; preds = %9
  %12 = fadd double %0, 1.000000e+300
  %13 = fcmp ogt double %12, 1.000000e+00
  br i1 %13, label %46, label %32

14:                                               ; preds = %9
  %15 = icmp ugt i32 %5, 1102053376
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = tail call double @llvm.fabs.f64(double %0)
  %18 = tail call double @_ZN6fdlibm3logEd(double %17)
  %19 = fadd double %18, 0x3FE62E42FEFA39EF
  br label %41

20:                                               ; preds = %14
  %21 = icmp ugt i32 %5, 1073741824
  br i1 %21, label %22, label %32

22:                                               ; preds = %20
  %23 = tail call double @llvm.fabs.f64(double %0)
  %24 = fmul double %23, 2.000000e+00
  %25 = fmul double %0, %0
  %26 = fadd double %25, 1.000000e+00
  %27 = tail call double @sqrt(double %26) #7
  %28 = fadd double %23, %27
  %29 = fdiv double 1.000000e+00, %28
  %30 = fadd double %24, %29
  %31 = tail call double @_ZN6fdlibm3logEd(double %30)
  br label %41

32:                                               ; preds = %11, %20
  %33 = fmul double %0, %0
  %34 = tail call double @llvm.fabs.f64(double %0)
  %35 = fadd double %33, 1.000000e+00
  %36 = tail call double @sqrt(double %35) #7
  %37 = fadd double %36, 1.000000e+00
  %38 = fdiv double %33, %37
  %39 = fadd double %34, %38
  %40 = tail call double @_ZN6fdlibm5log1pEd(double %39)
  br label %41

41:                                               ; preds = %22, %32, %16
  %42 = phi double [ %19, %16 ], [ %31, %22 ], [ %40, %32 ]
  %43 = icmp sgt i32 %4, 0
  %44 = fsub double -0.000000e+00, %42
  %45 = select i1 %43, double %42, double %44
  ret double %45

46:                                               ; preds = %11, %7
  %47 = phi double [ %8, %7 ], [ %0, %11 ]
  ret double %47
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN6fdlibm4atanEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1141899263
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = icmp ugt i32 %5, 2146435072
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = trunc i64 %2 to i32
  %11 = icmp eq i32 %5, 2146435072
  %12 = icmp ne i32 %10, 0
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %16

14:                                               ; preds = %9, %7
  %15 = fadd double %0, %0
  br label %97

16:                                               ; preds = %9
  %17 = icmp sgt i32 %4, 0
  %18 = load volatile double, double* getelementptr inbounds ([4 x double], [4 x double]* @_ZZN6fdlibm4atanEdE6atanlo, i64 0, i64 3), align 8
  br i1 %17, label %19, label %21

19:                                               ; preds = %16
  %20 = fadd double %18, 0x3FF921FB54442D18
  br label %97

21:                                               ; preds = %16
  %22 = fsub double 0xBFF921FB54442D18, %18
  br label %97

23:                                               ; preds = %1
  %24 = icmp ult i32 %5, 1071382528
  br i1 %24, label %25, label %30

25:                                               ; preds = %23
  %26 = icmp ult i32 %5, 1044381696
  %27 = fadd double %0, 1.000000e+300
  %28 = fcmp ogt double %27, 1.000000e+00
  %29 = and i1 %28, %26
  br i1 %29, label %97, label %53

30:                                               ; preds = %23
  %31 = tail call double @llvm.fabs.f64(double %0)
  %32 = icmp ult i32 %5, 1072889856
  br i1 %32, label %33, label %44

33:                                               ; preds = %30
  %34 = icmp ult i32 %5, 1072037888
  br i1 %34, label %35, label %40

35:                                               ; preds = %33
  %36 = fmul double %31, 2.000000e+00
  %37 = fadd double %36, -1.000000e+00
  %38 = fadd double %31, 2.000000e+00
  %39 = fdiv double %37, %38
  br label %53

40:                                               ; preds = %33
  %41 = fadd double %31, -1.000000e+00
  %42 = fadd double %31, 1.000000e+00
  %43 = fdiv double %41, %42
  br label %53

44:                                               ; preds = %30
  %45 = icmp ult i32 %5, 1073971200
  br i1 %45, label %46, label %51

46:                                               ; preds = %44
  %47 = fadd double %31, -1.500000e+00
  %48 = fmul double %31, 1.500000e+00
  %49 = fadd double %48, 1.000000e+00
  %50 = fdiv double %47, %49
  br label %53

51:                                               ; preds = %44
  %52 = fdiv double -1.000000e+00, %31
  br label %53

53:                                               ; preds = %25, %40, %35, %51, %46
  %54 = phi double [ %0, %25 ], [ %39, %35 ], [ %43, %40 ], [ %50, %46 ], [ %52, %51 ]
  %55 = phi i32 [ -1, %25 ], [ 0, %35 ], [ 1, %40 ], [ 2, %46 ], [ 3, %51 ]
  %56 = fmul double %54, %54
  %57 = fmul double %56, %56
  %58 = fmul double %57, 0x3F90AD3AE322DA11
  %59 = fadd double %58, 0x3FA97B4B24760DEB
  %60 = fmul double %57, %59
  %61 = fadd double %60, 0x3FB10D66A0D03D51
  %62 = fmul double %57, %61
  %63 = fadd double %62, 0x3FB745CDC54C206E
  %64 = fmul double %57, %63
  %65 = fadd double %64, 0x3FC24924920083FF
  %66 = fmul double %57, %65
  %67 = fadd double %66, 0x3FD555555555550D
  %68 = fmul double %56, %67
  %69 = fmul double %57, 0x3FA2B4442C6A6C2F
  %70 = fsub double 0xBFADDE2D52DEFD9A, %69
  %71 = fmul double %57, %70
  %72 = fadd double %71, 0xBFB3B0F2AF749A6D
  %73 = fmul double %57, %72
  %74 = fadd double %73, 0xBFBC71C6FE231671
  %75 = fmul double %57, %74
  %76 = fadd double %75, 0xBFC999999998EBC4
  %77 = fmul double %57, %76
  %78 = icmp slt i32 %55, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %53
  %80 = fadd double %77, %68
  %81 = fmul double %54, %80
  %82 = fsub double %54, %81
  br label %97

83:                                               ; preds = %53
  %84 = sext i32 %55 to i64
  %85 = getelementptr inbounds [4 x double], [4 x double]* @_ZZN6fdlibm4atanEdE6atanhi, i64 0, i64 %84
  %86 = load double, double* %85, align 8
  %87 = fadd double %77, %68
  %88 = fmul double %54, %87
  %89 = getelementptr inbounds [4 x double], [4 x double]* @_ZZN6fdlibm4atanEdE6atanlo, i64 0, i64 %84
  %90 = load double, double* %89, align 8
  %91 = fsub double %88, %90
  %92 = fsub double %91, %54
  %93 = fsub double %86, %92
  %94 = icmp slt i32 %4, 0
  %95 = fsub double -0.000000e+00, %93
  %96 = select i1 %94, double %95, double %93
  br label %97

97:                                               ; preds = %25, %14, %19, %21, %83, %79
  %98 = phi double [ %82, %79 ], [ %96, %83 ], [ %15, %14 ], [ %20, %19 ], [ %22, %21 ], [ %0, %25 ]
  ret double %98
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN6fdlibm5atan2Edd(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = lshr i64 %4, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %4 to i32
  %8 = and i32 %6, 2147483647
  %9 = lshr i64 %3, 32
  %10 = trunc i64 %9 to i32
  %11 = trunc i64 %3 to i32
  %12 = and i32 %10, 2147483647
  %13 = icmp eq i32 %7, -2147483648
  %14 = sub nsw i32 0, %7
  %15 = select i1 %13, i32 -2147483648, i32 %14
  %16 = or i32 %15, %7
  %17 = lshr i32 %16, 31
  %18 = or i32 %17, %8
  %19 = icmp ugt i32 %18, 2146435072
  br i1 %19, label %28, label %20

20:                                               ; preds = %2
  %21 = icmp eq i32 %11, -2147483648
  %22 = sub nsw i32 0, %11
  %23 = select i1 %21, i32 -2147483648, i32 %22
  %24 = or i32 %23, %11
  %25 = lshr i32 %24, 31
  %26 = or i32 %25, %12
  %27 = icmp ugt i32 %26, 2146435072
  br i1 %27, label %28, label %30

28:                                               ; preds = %20, %2
  %29 = fadd double %0, %1
  br label %124

30:                                               ; preds = %20
  %31 = add i32 %6, -1072693248
  %32 = or i32 %31, %7
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = tail call double @_ZN6fdlibm4atanEd(double %0)
  br label %124

36:                                               ; preds = %30
  %37 = lshr i64 %3, 63
  %38 = trunc i64 %37 to i32
  %39 = lshr i64 %4, 62
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 2
  %42 = or i32 %41, %38
  %43 = or i32 %12, %11
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %36
  switch i32 %42, label %52 [
    i32 0, label %124
    i32 1, label %124
    i32 2, label %46
    i32 3, label %49
  ]

46:                                               ; preds = %45
  %47 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %48 = fadd double %47, 0x400921FB54442D18
  br label %124

49:                                               ; preds = %45
  %50 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %51 = fsub double 0xC00921FB54442D18, %50
  br label %124

52:                                               ; preds = %45
  unreachable

53:                                               ; preds = %36
  %54 = or i32 %8, %7
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %53
  %57 = icmp slt i32 %10, 0
  %58 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %59 = fsub double 0xBFF921FB54442D18, %58
  %60 = fadd double %58, 0x3FF921FB54442D18
  %61 = select i1 %57, double %59, double %60
  br label %124

62:                                               ; preds = %53
  %63 = icmp eq i32 %8, 2146435072
  %64 = icmp eq i32 %12, 2146435072
  br i1 %63, label %65, label %89

65:                                               ; preds = %62
  br i1 %64, label %66, label %79

66:                                               ; preds = %65
  switch i32 %42, label %87 [
    i32 0, label %67
    i32 1, label %70
    i32 2, label %73
    i32 3, label %76
  ]

67:                                               ; preds = %66
  %68 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %69 = fadd double %68, 0x3FE921FB54442D18
  br label %124

70:                                               ; preds = %66
  %71 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %72 = fsub double 0xBFE921FB54442D18, %71
  br label %124

73:                                               ; preds = %66
  %74 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %75 = fadd double %74, 0x4002D97C7F3321D2
  br label %124

76:                                               ; preds = %66
  %77 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %78 = fsub double 0xC002D97C7F3321D2, %77
  br label %124

79:                                               ; preds = %65
  switch i32 %42, label %88 [
    i32 0, label %124
    i32 1, label %80
    i32 2, label %81
    i32 3, label %84
  ]

80:                                               ; preds = %79
  br label %124

81:                                               ; preds = %79
  %82 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %83 = fadd double %82, 0x400921FB54442D18
  br label %124

84:                                               ; preds = %79
  %85 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %86 = fsub double 0xC00921FB54442D18, %85
  br label %124

87:                                               ; preds = %66
  unreachable

88:                                               ; preds = %79
  unreachable

89:                                               ; preds = %62
  br i1 %64, label %90, label %96

90:                                               ; preds = %89
  %91 = icmp slt i32 %10, 0
  %92 = load volatile double, double* @_ZZN6fdlibm5atan2EddE4tiny, align 8
  %93 = fsub double 0xBFF921FB54442D18, %92
  %94 = fadd double %92, 0x3FF921FB54442D18
  %95 = select i1 %91, double %93, double %94
  br label %124

96:                                               ; preds = %89
  %97 = sub nsw i32 %12, %8
  %98 = icmp sgt i32 %97, 63963135
  br i1 %98, label %99, label %103

99:                                               ; preds = %96
  %100 = load volatile double, double* @_ZZN6fdlibm5atan2EddE5pi_lo, align 8
  %101 = fmul double %100, 5.000000e-01
  %102 = fadd double %101, 0x3FF921FB54442D18
  br label %111

103:                                              ; preds = %96
  %104 = icmp slt i32 %6, 0
  %105 = icmp slt i32 %97, -62914560
  %106 = and i1 %104, %105
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = fdiv double %0, %1
  %109 = tail call double @llvm.fabs.f64(double %108)
  %110 = tail call double @_ZN6fdlibm4atanEd(double %109)
  br label %111

111:                                              ; preds = %103, %107, %99
  %112 = phi i32 [ %38, %99 ], [ %42, %107 ], [ %42, %103 ]
  %113 = phi double [ %102, %99 ], [ %110, %107 ], [ 0.000000e+00, %103 ]
  switch i32 %112, label %120 [
    i32 0, label %124
    i32 1, label %114
    i32 2, label %116
  ]

114:                                              ; preds = %111
  %115 = fsub double -0.000000e+00, %113
  br label %124

116:                                              ; preds = %111
  %117 = load volatile double, double* @_ZZN6fdlibm5atan2EddE5pi_lo, align 8
  %118 = fsub double %117, %113
  %119 = fadd double %118, 0x400921FB54442D18
  br label %124

120:                                              ; preds = %111
  %121 = load volatile double, double* @_ZZN6fdlibm5atan2EddE5pi_lo, align 8
  %122 = fsub double %113, %121
  %123 = fadd double %122, 0xC00921FB54442D18
  br label %124

124:                                              ; preds = %45, %45, %111, %79, %120, %116, %114, %90, %84, %81, %80, %76, %73, %70, %67, %56, %49, %46, %34, %28
  %125 = phi double [ %29, %28 ], [ %35, %34 ], [ %61, %56 ], [ %95, %90 ], [ %123, %120 ], [ %119, %116 ], [ %115, %114 ], [ %78, %76 ], [ %75, %73 ], [ %72, %70 ], [ %69, %67 ], [ %86, %84 ], [ %83, %81 ], [ -0.000000e+00, %80 ], [ %51, %49 ], [ %48, %46 ], [ 0.000000e+00, %79 ], [ %113, %111 ], [ %0, %45 ], [ %0, %45 ]
  ret double %125
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %6 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp ult i32 %9, 1072243196
  %11 = bitcast [2 x double]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 16, i1 false)
  br i1 %10, label %12, label %55

12:                                               ; preds = %1
  %13 = icmp ult i32 %9, 1044381696
  %14 = fptosi double %0 to i32
  %15 = icmp eq i32 %14, 0
  %16 = and i1 %15, %13
  br i1 %16, label %222, label %17

17:                                               ; preds = %12
  %18 = fmul double %0, %0
  %19 = fmul double %18, 0x3DA8FAE9BE8838D4
  %20 = fsub double 0x3E21EE9EBDB4B1C4, %19
  %21 = fmul double %18, %20
  %22 = fadd double %21, 0xBE927E4F809C52AD
  %23 = fmul double %18, %22
  %24 = fadd double %23, 0x3EFA01A019CB1590
  %25 = fmul double %18, %24
  %26 = fadd double %25, 0xBF56C16C16C15177
  %27 = fmul double %18, %26
  %28 = fadd double %27, 0x3FA555555555554C
  %29 = fmul double %18, %28
  %30 = icmp ult i32 %9, 1070805811
  br i1 %30, label %31, label %38

31:                                               ; preds = %17
  %32 = fmul double %18, 5.000000e-01
  %33 = fmul double %18, %29
  %34 = fmul double %0, 0.000000e+00
  %35 = fsub double %33, %34
  %36 = fsub double %35, %32
  %37 = fadd double %36, 1.000000e+00
  br label %222

38:                                               ; preds = %17
  %39 = icmp ugt i32 %9, 1072234496
  br i1 %39, label %45, label %40

40:                                               ; preds = %38
  %41 = add nsw i32 %9, -2097152
  %42 = zext i32 %41 to i64
  %43 = shl nuw i64 %42, 32
  %44 = bitcast i64 %43 to double
  br label %45

45:                                               ; preds = %40, %38
  %46 = phi double [ %44, %40 ], [ 2.812500e-01, %38 ]
  %47 = fmul double %18, 5.000000e-01
  %48 = fsub double %47, %46
  %49 = fsub double 1.000000e+00, %46
  %50 = fmul double %18, %29
  %51 = fmul double %0, 0.000000e+00
  %52 = fsub double %50, %51
  %53 = fsub double %48, %52
  %54 = fsub double %49, %53
  br label %222

55:                                               ; preds = %1
  %56 = icmp ugt i32 %9, 2146435071
  br i1 %56, label %57, label %59

57:                                               ; preds = %55
  %58 = fsub double %0, %0
  br label %222

59:                                               ; preds = %55
  %60 = call fastcc i32 @_ZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %5)
  %61 = and i32 %60, 3
  switch i32 %61, label %194 [
    i32 0, label %62
    i32 1, label %111
    i32 2, label %142
  ]

62:                                               ; preds = %59
  %63 = load double, double* %5, align 16
  %64 = load double, double* %6, align 8
  %65 = bitcast double %63 to i64
  %66 = lshr i64 %65, 32
  %67 = trunc i64 %66 to i32
  %68 = and i32 %67, 2147483647
  %69 = icmp ult i32 %68, 1044381696
  %70 = fptosi double %63 to i32
  %71 = icmp eq i32 %70, 0
  %72 = and i1 %71, %69
  br i1 %72, label %222, label %73

73:                                               ; preds = %62
  %74 = fmul double %63, %63
  %75 = fmul double %74, 0x3DA8FAE9BE8838D4
  %76 = fsub double 0x3E21EE9EBDB4B1C4, %75
  %77 = fmul double %74, %76
  %78 = fadd double %77, 0xBE927E4F809C52AD
  %79 = fmul double %74, %78
  %80 = fadd double %79, 0x3EFA01A019CB1590
  %81 = fmul double %74, %80
  %82 = fadd double %81, 0xBF56C16C16C15177
  %83 = fmul double %74, %82
  %84 = fadd double %83, 0x3FA555555555554C
  %85 = fmul double %74, %84
  %86 = icmp ult i32 %68, 1070805811
  br i1 %86, label %87, label %94

87:                                               ; preds = %73
  %88 = fmul double %74, 5.000000e-01
  %89 = fmul double %74, %85
  %90 = fmul double %63, %64
  %91 = fsub double %89, %90
  %92 = fsub double %91, %88
  %93 = fadd double %92, 1.000000e+00
  br label %222

94:                                               ; preds = %73
  %95 = icmp ugt i32 %68, 1072234496
  br i1 %95, label %101, label %96

96:                                               ; preds = %94
  %97 = add nsw i32 %68, -2097152
  %98 = zext i32 %97 to i64
  %99 = shl nuw i64 %98, 32
  %100 = bitcast i64 %99 to double
  br label %101

101:                                              ; preds = %96, %94
  %102 = phi double [ %100, %96 ], [ 2.812500e-01, %94 ]
  %103 = fmul double %74, 5.000000e-01
  %104 = fsub double %103, %102
  %105 = fsub double 1.000000e+00, %102
  %106 = fmul double %74, %85
  %107 = fmul double %63, %64
  %108 = fsub double %106, %107
  %109 = fsub double %104, %108
  %110 = fsub double %105, %109
  br label %222

111:                                              ; preds = %59
  %112 = load double, double* %5, align 16
  %113 = load double, double* %6, align 8
  %114 = bitcast double %112 to i64
  %115 = and i64 %114, 9205357638345293824
  %116 = icmp ult i64 %115, 4485585228861014016
  %117 = fptosi double %112 to i32
  %118 = icmp eq i32 %117, 0
  %119 = and i1 %118, %116
  br i1 %119, label %139, label %120

120:                                              ; preds = %111
  %121 = fmul double %112, %112
  %122 = fmul double %112, %121
  %123 = fmul double %121, 0x3DE5D93A5ACFD57C
  %124 = fadd double %123, 0xBE5AE5E68A2B9CEB
  %125 = fmul double %121, %124
  %126 = fadd double %125, 0x3EC71DE357B1FE7D
  %127 = fmul double %121, %126
  %128 = fadd double %127, 0xBF2A01A019C161D5
  %129 = fmul double %121, %128
  %130 = fadd double %129, 0x3F8111111110F8A6
  %131 = fmul double %113, 5.000000e-01
  %132 = fmul double %122, %130
  %133 = fsub double %131, %132
  %134 = fmul double %121, %133
  %135 = fsub double %134, %113
  %136 = fmul double %122, 0x3FC5555555555549
  %137 = fadd double %136, %135
  %138 = fsub double %112, %137
  br label %139

139:                                              ; preds = %111, %120
  %140 = phi double [ %138, %120 ], [ %112, %111 ]
  %141 = fsub double -0.000000e+00, %140
  br label %222

142:                                              ; preds = %59
  %143 = load double, double* %5, align 16
  %144 = load double, double* %6, align 8
  %145 = bitcast double %143 to i64
  %146 = lshr i64 %145, 32
  %147 = trunc i64 %146 to i32
  %148 = and i32 %147, 2147483647
  %149 = icmp ult i32 %148, 1044381696
  %150 = fptosi double %143 to i32
  %151 = icmp eq i32 %150, 0
  %152 = and i1 %151, %149
  br i1 %152, label %191, label %153

153:                                              ; preds = %142
  %154 = fmul double %143, %143
  %155 = fmul double %154, 0x3DA8FAE9BE8838D4
  %156 = fsub double 0x3E21EE9EBDB4B1C4, %155
  %157 = fmul double %154, %156
  %158 = fadd double %157, 0xBE927E4F809C52AD
  %159 = fmul double %154, %158
  %160 = fadd double %159, 0x3EFA01A019CB1590
  %161 = fmul double %154, %160
  %162 = fadd double %161, 0xBF56C16C16C15177
  %163 = fmul double %154, %162
  %164 = fadd double %163, 0x3FA555555555554C
  %165 = fmul double %154, %164
  %166 = icmp ult i32 %148, 1070805811
  br i1 %166, label %167, label %174

167:                                              ; preds = %153
  %168 = fmul double %154, 5.000000e-01
  %169 = fmul double %154, %165
  %170 = fmul double %143, %144
  %171 = fsub double %169, %170
  %172 = fsub double %171, %168
  %173 = fadd double %172, 1.000000e+00
  br label %191

174:                                              ; preds = %153
  %175 = icmp ugt i32 %148, 1072234496
  br i1 %175, label %181, label %176

176:                                              ; preds = %174
  %177 = add nsw i32 %148, -2097152
  %178 = zext i32 %177 to i64
  %179 = shl nuw i64 %178, 32
  %180 = bitcast i64 %179 to double
  br label %181

181:                                              ; preds = %176, %174
  %182 = phi double [ %180, %176 ], [ 2.812500e-01, %174 ]
  %183 = fmul double %154, 5.000000e-01
  %184 = fsub double %183, %182
  %185 = fsub double 1.000000e+00, %182
  %186 = fmul double %154, %165
  %187 = fmul double %143, %144
  %188 = fsub double %186, %187
  %189 = fsub double %184, %188
  %190 = fsub double %185, %189
  br label %191

191:                                              ; preds = %142, %167, %181
  %192 = phi double [ %173, %167 ], [ %190, %181 ], [ 1.000000e+00, %142 ]
  %193 = fsub double -0.000000e+00, %192
  br label %222

194:                                              ; preds = %59
  %195 = load double, double* %5, align 16
  %196 = load double, double* %6, align 8
  %197 = bitcast double %195 to i64
  %198 = and i64 %197, 9205357638345293824
  %199 = icmp ult i64 %198, 4485585228861014016
  %200 = fptosi double %195 to i32
  %201 = icmp eq i32 %200, 0
  %202 = and i1 %201, %199
  br i1 %202, label %222, label %203

203:                                              ; preds = %194
  %204 = fmul double %195, %195
  %205 = fmul double %195, %204
  %206 = fmul double %204, 0x3DE5D93A5ACFD57C
  %207 = fadd double %206, 0xBE5AE5E68A2B9CEB
  %208 = fmul double %204, %207
  %209 = fadd double %208, 0x3EC71DE357B1FE7D
  %210 = fmul double %204, %209
  %211 = fadd double %210, 0xBF2A01A019C161D5
  %212 = fmul double %204, %211
  %213 = fadd double %212, 0x3F8111111110F8A6
  %214 = fmul double %196, 5.000000e-01
  %215 = fmul double %205, %213
  %216 = fsub double %214, %215
  %217 = fmul double %204, %216
  %218 = fsub double %217, %196
  %219 = fmul double %205, 0x3FC5555555555549
  %220 = fadd double %219, %218
  %221 = fsub double %195, %220
  br label %222

222:                                              ; preds = %203, %194, %101, %87, %62, %45, %31, %12, %191, %139, %57
  %223 = phi double [ %58, %57 ], [ %193, %191 ], [ %141, %139 ], [ %37, %31 ], [ %54, %45 ], [ 1.000000e+00, %12 ], [ %93, %87 ], [ %110, %101 ], [ 1.000000e+00, %62 ], [ %221, %203 ], [ %195, %194 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %223
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPd(double, double*) unnamed_addr #0 {
  %3 = alloca [20 x i32], align 16
  %4 = alloca [20 x double], align 16
  %5 = alloca [20 x double], align 16
  %6 = alloca [20 x double], align 16
  %7 = alloca [3 x double], align 16
  %8 = bitcast double %0 to i64
  %9 = bitcast [3 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 0
  %11 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 1
  %12 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 2
  %13 = lshr i64 %8, 32
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 2147483647
  %16 = icmp ult i32 %15, 1072243196
  %17 = bitcast [3 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 24, i1 false)
  br i1 %16, label %18, label %20

18:                                               ; preds = %2
  store double %0, double* %1, align 8
  %19 = getelementptr inbounds double, double* %1, i64 1
  store double 0.000000e+00, double* %19, align 8
  br label %1057

20:                                               ; preds = %2
  %21 = icmp ult i32 %15, 1073928572
  br i1 %21, label %22, label %52

22:                                               ; preds = %20
  %23 = icmp sgt i32 %14, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %22
  %25 = fadd double %0, 0xBFF921FB54400000
  %26 = icmp eq i32 %15, 1073291771
  br i1 %26, label %32, label %27

27:                                               ; preds = %24
  %28 = fadd double %25, 0xBDD0B4611A626331
  store double %28, double* %1, align 8
  %29 = fsub double %25, %28
  %30 = fadd double %29, 0xBDD0B4611A626331
  %31 = getelementptr inbounds double, double* %1, i64 1
  store double %30, double* %31, align 8
  br label %1057

32:                                               ; preds = %24
  %33 = fadd double %25, 0xBDD0B4611A600000
  %34 = fadd double %33, 0xBBA3198A2E037073
  store double %34, double* %1, align 8
  %35 = fsub double %33, %34
  %36 = fadd double %35, 0xBBA3198A2E037073
  %37 = getelementptr inbounds double, double* %1, i64 1
  store double %36, double* %37, align 8
  br label %1057

38:                                               ; preds = %22
  %39 = fadd double %0, 0x3FF921FB54400000
  %40 = icmp eq i32 %15, 1073291771
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = fadd double %39, 0x3DD0B4611A626331
  store double %42, double* %1, align 8
  %43 = fsub double %39, %42
  %44 = fadd double %43, 0x3DD0B4611A626331
  %45 = getelementptr inbounds double, double* %1, i64 1
  store double %44, double* %45, align 8
  br label %1057

46:                                               ; preds = %38
  %47 = fadd double %39, 0x3DD0B4611A600000
  %48 = fadd double %47, 0x3BA3198A2E037073
  store double %48, double* %1, align 8
  %49 = fsub double %47, %48
  %50 = fadd double %49, 0x3BA3198A2E037073
  %51 = getelementptr inbounds double, double* %1, i64 1
  store double %50, double* %51, align 8
  br label %1057

52:                                               ; preds = %20
  %53 = icmp ult i32 %15, 1094263292
  br i1 %53, label %54, label %117

54:                                               ; preds = %52
  %55 = tail call double @llvm.fabs.f64(double %0)
  %56 = fmul double %55, 0x3FE45F306DC9C883
  %57 = fadd double %56, 5.000000e-01
  %58 = fptosi double %57 to i32
  %59 = sitofp i32 %58 to double
  %60 = fmul double %59, 0x3FF921FB54400000
  %61 = fsub double %55, %60
  %62 = fmul double %59, 0x3DD0B4611A626331
  %63 = icmp slt i32 %58, 32
  br i1 %63, label %64, label %72

64:                                               ; preds = %54
  %65 = add nsw i32 %58, -1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [32 x i32], [32 x i32]* @_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE8npio2_hw, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %15, %68
  br i1 %69, label %72, label %70

70:                                               ; preds = %64
  %71 = fsub double %61, %62
  store double %71, double* %1, align 8
  br label %103

72:                                               ; preds = %64, %54
  %73 = lshr i32 %15, 20
  %74 = fsub double %61, %62
  store double %74, double* %1, align 8
  %75 = bitcast double %74 to i64
  %76 = lshr i64 %75, 52
  %77 = trunc i64 %76 to i32
  %78 = and i32 %77, 2047
  %79 = sub nsw i32 %73, %78
  %80 = icmp sgt i32 %79, 16
  br i1 %80, label %81, label %103

81:                                               ; preds = %72
  %82 = fmul double %59, 0x3DD0B4611A600000
  %83 = fsub double %61, %82
  %84 = fmul double %59, 0x3BA3198A2E037073
  %85 = fsub double %61, %83
  %86 = fsub double %85, %82
  %87 = fsub double %84, %86
  %88 = fsub double %83, %87
  store double %88, double* %1, align 8
  %89 = bitcast double %88 to i64
  %90 = lshr i64 %89, 52
  %91 = trunc i64 %90 to i32
  %92 = and i32 %91, 2047
  %93 = sub nsw i32 %73, %92
  %94 = icmp sgt i32 %93, 49
  br i1 %94, label %95, label %103

95:                                               ; preds = %81
  %96 = fmul double %59, 0x3BA3198A2E000000
  %97 = fsub double %83, %96
  %98 = fmul double %59, 0x397B839A252049C1
  %99 = fsub double %83, %97
  %100 = fsub double %99, %96
  %101 = fsub double %98, %100
  %102 = fsub double %97, %101
  store double %102, double* %1, align 8
  br label %103

103:                                              ; preds = %72, %95, %81, %70
  %104 = phi double [ %71, %70 ], [ %102, %95 ], [ %88, %81 ], [ %74, %72 ]
  %105 = phi double [ %61, %70 ], [ %97, %95 ], [ %83, %81 ], [ %61, %72 ]
  %106 = phi double [ %62, %70 ], [ %101, %95 ], [ %87, %81 ], [ %62, %72 ]
  %107 = fsub double %105, %104
  %108 = fsub double %107, %106
  %109 = getelementptr inbounds double, double* %1, i64 1
  store double %108, double* %109, align 8
  %110 = icmp slt i32 %14, 0
  br i1 %110, label %111, label %1057

111:                                              ; preds = %103
  %112 = insertelement <2 x double> undef, double %104, i32 0
  %113 = insertelement <2 x double> %112, double %108, i32 1
  %114 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %113
  %115 = bitcast double* %1 to <2 x double>*
  store <2 x double> %114, <2 x double>* %115, align 8
  %116 = sub nsw i32 0, %58
  br label %1057

117:                                              ; preds = %52
  %118 = icmp ugt i32 %15, 2146435071
  br i1 %118, label %119, label %122

119:                                              ; preds = %117
  %120 = fsub double %0, %0
  %121 = getelementptr inbounds double, double* %1, i64 1
  store double %120, double* %121, align 8
  store double %120, double* %1, align 8
  br label %1057

122:                                              ; preds = %117
  %123 = and i64 %8, 4294967295
  %124 = lshr i32 %15, 20
  %125 = add nsw i32 %124, -1046
  %126 = shl i32 %125, 20
  %127 = sub nsw i32 %15, %126
  %128 = zext i32 %127 to i64
  %129 = shl nuw i64 %128, 32
  %130 = or i64 %129, %123
  %131 = bitcast i64 %130 to double
  %132 = fptosi double %131 to i32
  %133 = sitofp i32 %132 to double
  store double %133, double* %10, align 16
  %134 = fsub double %131, %133
  %135 = fmul double %134, 0x4170000000000000
  %136 = fptosi double %135 to i32
  %137 = sitofp i32 %136 to double
  store double %137, double* %11, align 8
  %138 = fsub double %135, %137
  %139 = fmul double %138, 0x4170000000000000
  store double %139, double* %12, align 16
  br label %140

140:                                              ; preds = %140, %122
  %141 = phi i64 [ 3, %122 ], [ %142, %140 ]
  %142 = add nsw i64 %141, -1
  %143 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %142
  %144 = load double, double* %143, align 8
  %145 = fcmp oeq double %144, 0.000000e+00
  br i1 %145, label %140, label %146

146:                                              ; preds = %140
  %147 = trunc i64 %141 to i32
  %148 = bitcast [20 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %148) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %148, i8 -86, i64 80, i1 false) #7
  %149 = bitcast [20 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %149) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %149, i8 -1, i64 160, i1 false) #7
  %150 = bitcast [20 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %150) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %150, i8 -1, i64 160, i1 false) #7
  %151 = bitcast [20 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %151) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %151, i8 -1, i64 160, i1 false) #7
  %152 = add nsw i32 %124, -1049
  %153 = sdiv i32 %152, 24
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = mul nsw i32 %155, -24
  %157 = add nsw i32 %124, -1070
  %158 = add nsw i32 %157, %156
  %159 = icmp slt i32 %147, -3
  br i1 %159, label %816, label %160

160:                                              ; preds = %146
  %161 = add nuw nsw i32 %155, 1
  %162 = sub nsw i32 %161, %147
  %163 = sext i32 %162 to i64
  %164 = add i64 %141, 4
  %165 = and i64 %164, 4294967295
  %166 = and i64 %164, 1
  %167 = icmp eq i64 %165, 1
  br i1 %167, label %170, label %168

168:                                              ; preds = %160
  %169 = sub nsw i64 %165, %166
  br label %185

170:                                              ; preds = %1080, %160
  %171 = phi i64 [ 0, %160 ], [ %1083, %1080 ]
  %172 = phi i64 [ %163, %160 ], [ %1084, %1080 ]
  %173 = icmp eq i64 %166, 0
  br i1 %173, label %183, label %174

174:                                              ; preds = %170
  %175 = icmp slt i64 %172, 0
  br i1 %175, label %180, label %176

176:                                              ; preds = %174
  %177 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %172
  %178 = load i32, i32* %177, align 4
  %179 = sitofp i32 %178 to double
  br label %180

180:                                              ; preds = %176, %174
  %181 = phi double [ %179, %176 ], [ 0.000000e+00, %174 ]
  %182 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %171
  store double %181, double* %182, align 8
  br label %183

183:                                              ; preds = %170, %180
  %184 = icmp sgt i32 %147, 0
  br i1 %184, label %200, label %816

185:                                              ; preds = %1080, %168
  %186 = phi i64 [ 0, %168 ], [ %1083, %1080 ]
  %187 = phi i64 [ %163, %168 ], [ %1084, %1080 ]
  %188 = phi i64 [ %169, %168 ], [ %1085, %1080 ]
  %189 = icmp slt i64 %187, 0
  br i1 %189, label %194, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %187
  %192 = load i32, i32* %191, align 4
  %193 = sitofp i32 %192 to double
  br label %194

194:                                              ; preds = %190, %185
  %195 = phi double [ %193, %190 ], [ 0.000000e+00, %185 ]
  %196 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %186
  store double %195, double* %196, align 16
  %197 = or i64 %186, 1
  %198 = add nsw i64 %187, 1
  %199 = icmp slt i64 %198, 0
  br i1 %199, label %1080, label %1076

200:                                              ; preds = %183
  %201 = and i64 %141, 4294967295
  %202 = shl i64 %141, 32
  %203 = add i64 %202, -4294967296
  %204 = ashr exact i64 %203, 32
  %205 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %204
  %206 = load double, double* %205, align 8
  %207 = fmul double %206, %133
  %208 = fadd double %207, 0.000000e+00
  %209 = icmp eq i64 %201, 1
  br i1 %209, label %774, label %210

210:                                              ; preds = %200
  %211 = add nsw i64 %201, -1
  %212 = and i64 %211, 1
  %213 = icmp eq i64 %201, 2
  br i1 %213, label %758, label %214

214:                                              ; preds = %210
  %215 = sub nsw i64 %211, %212
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 1, %214 ], [ %241, %216 ]
  %218 = phi double [ %208, %214 ], [ %240, %216 ]
  %219 = phi i64 [ %215, %214 ], [ %242, %216 ]
  %220 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %217
  %221 = load double, double* %220, align 8
  %222 = xor i64 %217, 4294967295
  %223 = add i64 %141, %222
  %224 = shl i64 %223, 32
  %225 = ashr exact i64 %224, 32
  %226 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %225
  %227 = load double, double* %226, align 8
  %228 = fmul double %221, %227
  %229 = fadd double %218, %228
  %230 = add nuw nsw i64 %217, 1
  %231 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %230
  %232 = load double, double* %231, align 8
  %233 = xor i64 %230, 4294967295
  %234 = add i64 %141, %233
  %235 = shl i64 %234, 32
  %236 = ashr exact i64 %235, 32
  %237 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %236
  %238 = load double, double* %237, align 8
  %239 = fmul double %232, %238
  %240 = fadd double %229, %239
  %241 = add nuw nsw i64 %217, 2
  %242 = add i64 %219, -2
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %758, label %216

244:                                              ; preds = %567
  %245 = zext i32 %512 to i64
  %246 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %245
  %247 = load double, double* %246, align 8
  br label %248

248:                                              ; preds = %1010, %244
  %249 = phi double [ %1013, %1010 ], [ %247, %244 ]
  %250 = phi i32 [ 4, %1010 ], [ %512, %244 ]
  %251 = zext i32 %250 to i64
  %252 = add nsw i64 %251, -1
  %253 = and i64 %251, 1
  %254 = icmp eq i64 %252, 0
  br i1 %254, label %288, label %255

255:                                              ; preds = %248
  %256 = sub nsw i64 %251, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %285, %257 ]
  %259 = phi i64 [ %251, %255 ], [ %281, %257 ]
  %260 = phi double [ %249, %255 ], [ %284, %257 ]
  %261 = phi i64 [ %256, %255 ], [ %286, %257 ]
  %262 = fmul double %260, 0x3E70000000000000
  %263 = fptosi double %262 to i32
  %264 = sitofp i32 %263 to double
  %265 = fmul double %264, 0x4170000000000000
  %266 = fsub double %260, %265
  %267 = fptosi double %266 to i32
  %268 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %258
  store i32 %267, i32* %268, align 8
  %269 = add nsw i64 %259, -1
  %270 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %269
  %271 = load double, double* %270, align 8
  %272 = fadd double %271, %264
  %273 = or i64 %258, 1
  %274 = fmul double %272, 0x3E70000000000000
  %275 = fptosi double %274 to i32
  %276 = sitofp i32 %275 to double
  %277 = fmul double %276, 0x4170000000000000
  %278 = fsub double %272, %277
  %279 = fptosi double %278 to i32
  %280 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %273
  store i32 %279, i32* %280, align 4
  %281 = add nsw i64 %259, -2
  %282 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %281
  %283 = load double, double* %282, align 8
  %284 = fadd double %283, %276
  %285 = add nuw nsw i64 %258, 2
  %286 = add i64 %261, -2
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %288, label %257

288:                                              ; preds = %257, %248
  %289 = phi double [ undef, %248 ], [ %284, %257 ]
  %290 = phi i64 [ 0, %248 ], [ %285, %257 ]
  %291 = phi i64 [ %251, %248 ], [ %281, %257 ]
  %292 = phi double [ %249, %248 ], [ %284, %257 ]
  %293 = icmp eq i64 %253, 0
  br i1 %293, label %306, label %294

294:                                              ; preds = %288
  %295 = fmul double %292, 0x3E70000000000000
  %296 = fptosi double %295 to i32
  %297 = sitofp i32 %296 to double
  %298 = fmul double %297, 0x4170000000000000
  %299 = fsub double %292, %298
  %300 = fptosi double %299 to i32
  %301 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %290
  store i32 %300, i32* %301, align 4
  %302 = add nsw i64 %291, -1
  %303 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %302
  %304 = load double, double* %303, align 8
  %305 = fadd double %304, %297
  br label %306

306:                                              ; preds = %288, %294
  %307 = phi double [ %289, %288 ], [ %305, %294 ]
  %308 = tail call double @scalbn(double %307, i32 %158) #7
  %309 = fmul double %308, 1.250000e-01
  %310 = tail call double @llvm.floor.f64(double %309) #7
  %311 = fmul double %310, 8.000000e+00
  %312 = fsub double %308, %311
  %313 = fptosi double %312 to i32
  %314 = sitofp i32 %313 to double
  %315 = fsub double %312, %314
  br i1 %1015, label %316, label %326

316:                                              ; preds = %306
  %317 = add nsw i32 %250, -1
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = ashr i32 %320, %1017
  %322 = add nsw i32 %321, %313
  %323 = shl i32 %321, %1017
  %324 = sub nsw i32 %320, %323
  store i32 %324, i32* %319, align 4
  %325 = ashr i32 %324, %1018
  br label %335

326:                                              ; preds = %306
  br i1 %1016, label %327, label %333

327:                                              ; preds = %326
  %328 = add nsw i32 %250, -1
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = ashr i32 %331, 23
  br label %335

333:                                              ; preds = %326
  %334 = fcmp ult double %315, 5.000000e-01
  br i1 %334, label %404, label %339

335:                                              ; preds = %327, %316
  %336 = phi i32 [ %322, %316 ], [ %313, %327 ]
  %337 = phi i32 [ %325, %316 ], [ %332, %327 ]
  %338 = icmp sgt i32 %337, 0
  br i1 %338, label %339, label %404

339:                                              ; preds = %335, %333
  %340 = phi i32 [ %337, %335 ], [ 2, %333 ]
  %341 = phi i32 [ %336, %335 ], [ %313, %333 ]
  %342 = and i64 %251, 1
  %343 = icmp eq i64 %252, 0
  br i1 %343, label %365, label %344

344:                                              ; preds = %339
  %345 = sub nsw i64 %251, %342
  br label %346

346:                                              ; preds = %1071, %344
  %347 = phi i64 [ 0, %344 ], [ %1073, %1071 ]
  %348 = phi i32 [ 0, %344 ], [ %1072, %1071 ]
  %349 = phi i64 [ %345, %344 ], [ %1074, %1071 ]
  %350 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %347
  %351 = load i32, i32* %350, align 8
  %352 = icmp eq i32 %348, 0
  br i1 %352, label %353, label %355

353:                                              ; preds = %346
  %354 = icmp eq i32 %351, 0
  br i1 %354, label %359, label %355

355:                                              ; preds = %346, %353
  %356 = phi i32 [ 16777216, %353 ], [ 16777215, %346 ]
  %357 = phi i32 [ 1, %353 ], [ %348, %346 ]
  %358 = sub nsw i32 %356, %351
  store i32 %358, i32* %350, align 8
  br label %359

359:                                              ; preds = %355, %353
  %360 = phi i32 [ 0, %353 ], [ %357, %355 ]
  %361 = or i64 %347, 1
  %362 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = icmp eq i32 %360, 0
  br i1 %364, label %1065, label %1067

365:                                              ; preds = %1071, %339
  %366 = phi i32 [ undef, %339 ], [ %1072, %1071 ]
  %367 = phi i64 [ 0, %339 ], [ %1073, %1071 ]
  %368 = phi i32 [ 0, %339 ], [ %1072, %1071 ]
  %369 = icmp eq i64 %342, 0
  br i1 %369, label %380, label %370

370:                                              ; preds = %365
  %371 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %367
  %372 = load i32, i32* %371, align 4
  %373 = icmp eq i32 %368, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %370
  %375 = icmp eq i32 %372, 0
  br i1 %375, label %380, label %376

376:                                              ; preds = %374, %370
  %377 = phi i32 [ 16777216, %374 ], [ 16777215, %370 ]
  %378 = phi i32 [ 1, %374 ], [ %368, %370 ]
  %379 = sub nsw i32 %377, %372
  store i32 %379, i32* %371, align 4
  br label %380

380:                                              ; preds = %376, %374, %365
  %381 = phi i32 [ %366, %365 ], [ 0, %374 ], [ %378, %376 ]
  %382 = add nsw i32 %341, 1
  br i1 %1015, label %383, label %396

383:                                              ; preds = %380
  switch i32 %158, label %396 [
    i32 1, label %384
    i32 2, label %390
  ]

384:                                              ; preds = %383
  %385 = add nsw i32 %250, -1
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = and i32 %388, 8388607
  store i32 %389, i32* %387, align 4
  br label %396

390:                                              ; preds = %383
  %391 = add nsw i32 %250, -1
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %392
  %394 = load i32, i32* %393, align 4
  %395 = and i32 %394, 4194303
  store i32 %395, i32* %393, align 4
  br label %396

396:                                              ; preds = %390, %384, %383, %380
  %397 = icmp eq i32 %340, 2
  br i1 %397, label %398, label %404

398:                                              ; preds = %396
  %399 = fsub double 1.000000e+00, %315
  %400 = icmp eq i32 %381, 0
  br i1 %400, label %404, label %401

401:                                              ; preds = %398
  %402 = tail call double @scalbn(double 1.000000e+00, i32 %158) #7
  %403 = fsub double %399, %402
  br label %404

404:                                              ; preds = %401, %398, %396, %335, %333
  %405 = phi i32 [ 2, %401 ], [ 2, %398 ], [ %340, %396 ], [ %337, %335 ], [ 0, %333 ]
  %406 = phi i32 [ %382, %401 ], [ %382, %398 ], [ %382, %396 ], [ %336, %335 ], [ %313, %333 ]
  %407 = phi double [ %403, %401 ], [ %399, %398 ], [ %315, %396 ], [ %315, %335 ], [ %315, %333 ]
  %408 = fcmp oeq double %407, 0.000000e+00
  br i1 %408, label %409, label %579

409:                                              ; preds = %404
  %410 = icmp ugt i32 %250, 4
  br i1 %410, label %411, label %504

411:                                              ; preds = %409
  %412 = add nsw i64 %251, -1
  %413 = add nsw i64 %251, -4
  %414 = icmp ult i64 %413, 8
  br i1 %414, label %488, label %415

415:                                              ; preds = %411
  %416 = and i64 %413, -8
  %417 = sub nsw i64 %412, %416
  %418 = add nsw i64 %416, -8
  %419 = lshr exact i64 %418, 3
  %420 = add nuw nsw i64 %419, 1
  %421 = and i64 %420, 1
  %422 = icmp eq i64 %418, 0
  br i1 %422, label %458, label %423

423:                                              ; preds = %415
  %424 = sub nuw nsw i64 %420, %421
  br label %425

425:                                              ; preds = %425, %423
  %426 = phi i64 [ 0, %423 ], [ %455, %425 ]
  %427 = phi <4 x i32> [ zeroinitializer, %423 ], [ %453, %425 ]
  %428 = phi <4 x i32> [ zeroinitializer, %423 ], [ %454, %425 ]
  %429 = phi i64 [ %424, %423 ], [ %456, %425 ]
  %430 = sub i64 %412, %426
  %431 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %430
  %432 = getelementptr inbounds i32, i32* %431, i64 -3
  %433 = bitcast i32* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 4
  %435 = shufflevector <4 x i32> %434, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %436 = getelementptr inbounds i32, i32* %431, i64 -7
  %437 = bitcast i32* %436 to <4 x i32>*
  %438 = load <4 x i32>, <4 x i32>* %437, align 4
  %439 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %440 = or <4 x i32> %435, %427
  %441 = or <4 x i32> %439, %428
  %442 = or i64 %426, 8
  %443 = sub i64 %412, %442
  %444 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %443
  %445 = getelementptr inbounds i32, i32* %444, i64 -3
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4
  %448 = shufflevector <4 x i32> %447, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %449 = getelementptr inbounds i32, i32* %444, i64 -7
  %450 = bitcast i32* %449 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 4
  %452 = shufflevector <4 x i32> %451, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %453 = or <4 x i32> %448, %440
  %454 = or <4 x i32> %452, %441
  %455 = add i64 %426, 16
  %456 = add i64 %429, -2
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %425, !llvm.loop !2

458:                                              ; preds = %425, %415
  %459 = phi <4 x i32> [ undef, %415 ], [ %453, %425 ]
  %460 = phi <4 x i32> [ undef, %415 ], [ %454, %425 ]
  %461 = phi i64 [ 0, %415 ], [ %455, %425 ]
  %462 = phi <4 x i32> [ zeroinitializer, %415 ], [ %453, %425 ]
  %463 = phi <4 x i32> [ zeroinitializer, %415 ], [ %454, %425 ]
  %464 = icmp eq i64 %421, 0
  br i1 %464, label %478, label %465

465:                                              ; preds = %458
  %466 = sub i64 %412, %461
  %467 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %466
  %468 = getelementptr inbounds i32, i32* %467, i64 -7
  %469 = bitcast i32* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 4
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %472 = or <4 x i32> %471, %463
  %473 = getelementptr inbounds i32, i32* %467, i64 -3
  %474 = bitcast i32* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 4
  %476 = shufflevector <4 x i32> %475, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %477 = or <4 x i32> %476, %462
  br label %478

478:                                              ; preds = %458, %465
  %479 = phi <4 x i32> [ %459, %458 ], [ %477, %465 ]
  %480 = phi <4 x i32> [ %460, %458 ], [ %472, %465 ]
  %481 = or <4 x i32> %480, %479
  %482 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %483 = or <4 x i32> %481, %482
  %484 = shufflevector <4 x i32> %483, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %485 = or <4 x i32> %483, %484
  %486 = extractelement <4 x i32> %485, i32 0
  %487 = icmp eq i64 %413, %416
  br i1 %487, label %499, label %488

488:                                              ; preds = %478, %411
  %489 = phi i64 [ %412, %411 ], [ %417, %478 ]
  %490 = phi i32 [ 0, %411 ], [ %486, %478 ]
  br label %491

491:                                              ; preds = %488, %491
  %492 = phi i64 [ %497, %491 ], [ %489, %488 ]
  %493 = phi i32 [ %496, %491 ], [ %490, %488 ]
  %494 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %492
  %495 = load i32, i32* %494, align 4
  %496 = or i32 %495, %493
  %497 = add nsw i64 %492, -1
  %498 = icmp sgt i64 %497, 3
  br i1 %498, label %491, label %499, !llvm.loop !4

499:                                              ; preds = %491, %478
  %500 = phi i32 [ %486, %478 ], [ %496, %491 ]
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %504, label %502

502:                                              ; preds = %499
  %503 = zext i32 %250 to i64
  br label %571

504:                                              ; preds = %499, %409
  %505 = load i32, i32* %1019, align 4
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %507, label %510

507:                                              ; preds = %504
  %508 = load i32, i32* %1020, align 8
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %751, label %510

510:                                              ; preds = %754, %751, %507, %504
  %511 = phi i32 [ 1, %504 ], [ 2, %507 ], [ 3, %751 ], [ %757, %754 ]
  %512 = add nuw nsw i32 %511, %250
  br label %513

513:                                              ; preds = %567, %510
  %514 = phi i64 [ %251, %510 ], [ %515, %567 ]
  %515 = add nuw nsw i64 %514, 1
  %516 = trunc i64 %515 to i32
  %517 = add i32 %155, %516
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %518
  %520 = load i32, i32* %519, align 4
  %521 = sitofp i32 %520 to double
  %522 = trunc i64 %514 to i32
  %523 = add i32 %147, %522
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %524
  store double %521, double* %525, align 8
  br i1 %1012, label %526, label %567

526:                                              ; preds = %513
  br i1 %1024, label %553, label %527

527:                                              ; preds = %526, %527
  %528 = phi i64 [ %550, %527 ], [ 0, %526 ]
  %529 = phi double [ %549, %527 ], [ 0.000000e+00, %526 ]
  %530 = phi i64 [ %551, %527 ], [ %1025, %526 ]
  %531 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %528
  %532 = load double, double* %531, align 16
  %533 = trunc i64 %528 to i32
  %534 = sub nsw i32 %523, %533
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %535
  %537 = load double, double* %536, align 8
  %538 = fmul double %532, %537
  %539 = fadd double %529, %538
  %540 = or i64 %528, 1
  %541 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %540
  %542 = load double, double* %541, align 8
  %543 = trunc i64 %540 to i32
  %544 = sub nsw i32 %523, %543
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %545
  %547 = load double, double* %546, align 8
  %548 = fmul double %542, %547
  %549 = fadd double %539, %548
  %550 = add nuw nsw i64 %528, 2
  %551 = add i64 %530, -2
  %552 = icmp eq i64 %551, 0
  br i1 %552, label %553, label %527

553:                                              ; preds = %527, %526
  %554 = phi double [ undef, %526 ], [ %549, %527 ]
  %555 = phi i64 [ 0, %526 ], [ %550, %527 ]
  %556 = phi double [ 0.000000e+00, %526 ], [ %549, %527 ]
  br i1 %1026, label %567, label %557

557:                                              ; preds = %553
  %558 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %555
  %559 = load double, double* %558, align 8
  %560 = trunc i64 %555 to i32
  %561 = sub nsw i32 %523, %560
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %562
  %564 = load double, double* %563, align 8
  %565 = fmul double %559, %564
  %566 = fadd double %556, %565
  br label %567

567:                                              ; preds = %557, %553, %513
  %568 = phi double [ 0.000000e+00, %513 ], [ %554, %553 ], [ %566, %557 ]
  %569 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %515
  store double %568, double* %569, align 8
  %570 = icmp ugt i32 %512, %516
  br i1 %570, label %513, label %244

571:                                              ; preds = %502, %571
  %572 = phi i64 [ %575, %571 ], [ %503, %502 ]
  %573 = phi i32 [ %574, %571 ], [ %158, %502 ]
  %574 = add nsw i32 %573, -24
  %575 = add nsw i64 %572, -1
  %576 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %575
  %577 = load i32, i32* %576, align 4
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %571, label %599

579:                                              ; preds = %404
  %580 = zext i32 %250 to i64
  %581 = sub nsw i32 0, %158
  %582 = tail call double @scalbn(double %407, i32 %581) #7
  %583 = fcmp ult double %582, 0x4170000000000000
  br i1 %583, label %596, label %584

584:                                              ; preds = %579
  %585 = fmul double %582, 0x3E70000000000000
  %586 = fptosi double %585 to i32
  %587 = sitofp i32 %586 to double
  %588 = fmul double %587, 0x4170000000000000
  %589 = fsub double %582, %588
  %590 = fptosi double %589 to i32
  %591 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %580
  store i32 %590, i32* %591, align 4
  %592 = add nuw nsw i32 %250, 1
  %593 = add nsw i32 %156, %125
  %594 = zext i32 %592 to i64
  %595 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %594
  store i32 %586, i32* %595, align 4
  br label %601

596:                                              ; preds = %579
  %597 = fptosi double %582 to i32
  %598 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %580
  store i32 %597, i32* %598, align 4
  br label %601

599:                                              ; preds = %571
  %600 = trunc i64 %575 to i32
  br label %601

601:                                              ; preds = %599, %596, %584
  %602 = phi i32 [ %592, %584 ], [ %250, %596 ], [ %600, %599 ]
  %603 = phi i32 [ %593, %584 ], [ %158, %596 ], [ %574, %599 ]
  %604 = tail call double @scalbn(double 1.000000e+00, i32 %603) #7
  %605 = icmp sgt i32 %602, -1
  br i1 %605, label %609, label %606

606:                                              ; preds = %601
  %607 = icmp eq i32 %405, 0
  %608 = select i1 %607, double 0.000000e+00, double -0.000000e+00
  store double %608, double* %1, align 8
  br label %1042

609:                                              ; preds = %601
  %610 = sext i32 %602 to i64
  br label %611

611:                                              ; preds = %611, %609
  %612 = phi i64 [ %610, %609 ], [ %620, %611 ]
  %613 = phi double [ %604, %609 ], [ %619, %611 ]
  %614 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %612
  %615 = load i32, i32* %614, align 4
  %616 = sitofp i32 %615 to double
  %617 = fmul double %613, %616
  %618 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %612
  store double %617, double* %618, align 8
  %619 = fmul double %613, 0x3E70000000000000
  %620 = add nsw i64 %612, -1
  %621 = icmp sgt i64 %612, 0
  br i1 %621, label %611, label %622

622:                                              ; preds = %611
  %623 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %610
  %624 = load double, double* %623, align 8
  %625 = fmul double %624, 0x3FF921FB40000000
  %626 = fadd double %625, 0.000000e+00
  %627 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 0
  store double %626, double* %627, align 16
  %628 = add nsw i64 %610, -1
  %629 = icmp sgt i32 %602, 0
  br i1 %629, label %630, label %687

630:                                              ; preds = %622
  %631 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %628
  %632 = load double, double* %631, align 8
  %633 = fmul double %632, 0x3FF921FB40000000
  %634 = fadd double %633, 0.000000e+00
  %635 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %610
  %636 = load double, double* %635, align 8
  %637 = fmul double %636, 0x3E74442D00000000
  %638 = fadd double %634, %637
  %639 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 1
  store double %638, double* %639, align 8
  %640 = add nsw i64 %610, -2
  %641 = icmp sgt i64 %628, 0
  br i1 %641, label %642, label %687

642:                                              ; preds = %630
  %643 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %640
  %644 = load double, double* %643, align 8
  %645 = fmul double %644, 0x3FF921FB40000000
  %646 = fadd double %645, 0.000000e+00
  %647 = add nsw i64 %610, -1
  %648 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %647
  %649 = load double, double* %648, align 8
  %650 = fmul double %649, 0x3E74442D00000000
  %651 = fadd double %646, %650
  %652 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %610
  %653 = load double, double* %652, align 8
  %654 = fmul double %653, 0x3CF8469880000000
  %655 = fadd double %651, %654
  %656 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 2
  store double %655, double* %656, align 16
  %657 = add nsw i64 %610, -3
  %658 = icmp sgt i64 %640, 0
  br i1 %658, label %659, label %687

659:                                              ; preds = %642, %682
  %660 = phi i64 [ %685, %682 ], [ %657, %642 ]
  %661 = sub nuw nsw i64 %610, %660
  %662 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %660
  %663 = load double, double* %662, align 8
  %664 = fmul double %663, 0x3FF921FB40000000
  %665 = fadd double %664, 0.000000e+00
  %666 = add nsw i64 %660, 1
  %667 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %666
  %668 = load double, double* %667, align 8
  %669 = fmul double %668, 0x3E74442D00000000
  %670 = fadd double %665, %669
  %671 = add nsw i64 %660, 2
  %672 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %671
  %673 = load double, double* %672, align 8
  %674 = fmul double %673, 0x3CF8469880000000
  %675 = fadd double %670, %674
  %676 = add nsw i64 %660, 3
  %677 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %676
  %678 = load double, double* %677, align 8
  %679 = fmul double %678, 0x3B78CC5160000000
  %680 = fadd double %675, %679
  %681 = icmp ult i64 %661, 4
  br i1 %681, label %682, label %1059

682:                                              ; preds = %1059, %659
  %683 = phi double [ %680, %659 ], [ %1064, %1059 ]
  %684 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %661
  store double %683, double* %684, align 8
  %685 = add nsw i64 %660, -1
  %686 = icmp sgt i64 %660, 0
  br i1 %686, label %659, label %687, !llvm.loop !6

687:                                              ; preds = %682, %642, %630, %622
  br label %688

688:                                              ; preds = %687, %688
  %689 = phi i64 [ %694, %688 ], [ %610, %687 ]
  %690 = phi double [ %693, %688 ], [ 0.000000e+00, %687 ]
  %691 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %689
  %692 = load double, double* %691, align 8
  %693 = fadd double %690, %692
  %694 = add nsw i64 %689, -1
  %695 = icmp sgt i64 %689, 0
  br i1 %695, label %688, label %696

696:                                              ; preds = %688
  %697 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 0
  %698 = load double, double* %697, align 16
  %699 = icmp eq i32 %405, 0
  %700 = fsub double -0.000000e+00, %693
  %701 = select i1 %699, double %693, double %700
  store double %701, double* %1, align 8
  %702 = fsub double %698, %693
  %703 = icmp slt i32 %602, 1
  br i1 %703, label %1042, label %704

704:                                              ; preds = %696
  %705 = add nuw i32 %602, 1
  %706 = zext i32 %705 to i64
  %707 = add nsw i64 %706, -1
  %708 = add nsw i64 %706, -2
  %709 = and i64 %707, 7
  %710 = icmp ult i64 %708, 7
  br i1 %710, label %1027, label %711

711:                                              ; preds = %704
  %712 = sub nsw i64 %707, %709
  br label %713

713:                                              ; preds = %713, %711
  %714 = phi i64 [ 1, %711 ], [ %748, %713 ]
  %715 = phi double [ %702, %711 ], [ %747, %713 ]
  %716 = phi i64 [ %712, %711 ], [ %749, %713 ]
  %717 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %714
  %718 = load double, double* %717, align 8
  %719 = fadd double %715, %718
  %720 = add nuw nsw i64 %714, 1
  %721 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %720
  %722 = load double, double* %721, align 8
  %723 = fadd double %719, %722
  %724 = add nuw nsw i64 %714, 2
  %725 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %724
  %726 = load double, double* %725, align 8
  %727 = fadd double %723, %726
  %728 = add nuw nsw i64 %714, 3
  %729 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %728
  %730 = load double, double* %729, align 8
  %731 = fadd double %727, %730
  %732 = add nuw nsw i64 %714, 4
  %733 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %732
  %734 = load double, double* %733, align 8
  %735 = fadd double %731, %734
  %736 = add nuw nsw i64 %714, 5
  %737 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %736
  %738 = load double, double* %737, align 8
  %739 = fadd double %735, %738
  %740 = add nuw nsw i64 %714, 6
  %741 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %740
  %742 = load double, double* %741, align 8
  %743 = fadd double %739, %742
  %744 = add nuw nsw i64 %714, 7
  %745 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %744
  %746 = load double, double* %745, align 8
  %747 = fadd double %743, %746
  %748 = add nuw nsw i64 %714, 8
  %749 = add i64 %716, -8
  %750 = icmp eq i64 %749, 0
  br i1 %750, label %1027, label %713

751:                                              ; preds = %507
  %752 = load i32, i32* %1021, align 4
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %754, label %510

754:                                              ; preds = %751
  %755 = load i32, i32* %1022, align 16
  %756 = icmp eq i32 %755, 0
  %757 = select i1 %756, i32 5, i32 4
  br label %510

758:                                              ; preds = %216, %210
  %759 = phi double [ undef, %210 ], [ %240, %216 ]
  %760 = phi i64 [ 1, %210 ], [ %241, %216 ]
  %761 = phi double [ %208, %210 ], [ %240, %216 ]
  %762 = icmp eq i64 %212, 0
  br i1 %762, label %774, label %763

763:                                              ; preds = %758
  %764 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %760
  %765 = load double, double* %764, align 8
  %766 = xor i64 %760, 4294967295
  %767 = add i64 %141, %766
  %768 = shl i64 %767, 32
  %769 = ashr exact i64 %768, 32
  %770 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %769
  %771 = load double, double* %770, align 8
  %772 = fmul double %765, %771
  %773 = fadd double %761, %772
  br label %774

774:                                              ; preds = %763, %758, %200
  %775 = phi double [ %208, %200 ], [ %759, %758 ], [ %773, %763 ]
  %776 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 0
  store double %775, double* %776, align 16
  %777 = shl i64 %141, 32
  %778 = ashr exact i64 %777, 32
  %779 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %778
  %780 = load double, double* %779, align 8
  %781 = fmul double %780, %133
  %782 = fadd double %781, 0.000000e+00
  %783 = icmp eq i64 %201, 1
  br i1 %783, label %836, label %784

784:                                              ; preds = %774
  %785 = add nsw i64 %201, -1
  %786 = and i64 %785, 1
  %787 = icmp eq i64 %201, 2
  br i1 %787, label %821, label %788

788:                                              ; preds = %784
  %789 = sub nsw i64 %785, %786
  br label %790

790:                                              ; preds = %790, %788
  %791 = phi i64 [ 1, %788 ], [ %813, %790 ]
  %792 = phi double [ %782, %788 ], [ %812, %790 ]
  %793 = phi i64 [ %789, %788 ], [ %814, %790 ]
  %794 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %791
  %795 = load double, double* %794, align 8
  %796 = sub i64 %141, %791
  %797 = shl i64 %796, 32
  %798 = ashr exact i64 %797, 32
  %799 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %798
  %800 = load double, double* %799, align 8
  %801 = fmul double %795, %800
  %802 = fadd double %792, %801
  %803 = add nuw nsw i64 %791, 1
  %804 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %803
  %805 = load double, double* %804, align 8
  %806 = sub i64 %141, %803
  %807 = shl i64 %806, 32
  %808 = ashr exact i64 %807, 32
  %809 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %808
  %810 = load double, double* %809, align 8
  %811 = fmul double %805, %810
  %812 = fadd double %802, %811
  %813 = add nuw nsw i64 %791, 2
  %814 = add i64 %793, -2
  %815 = icmp eq i64 %814, 0
  br i1 %815, label %821, label %790

816:                                              ; preds = %183, %146
  %817 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 0
  store double 0.000000e+00, double* %817, align 16
  %818 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 1
  %819 = and i64 %141, 4294967295
  %820 = bitcast double* %818 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %820, i8 0, i64 24, i1 false)
  br label %1010

821:                                              ; preds = %790, %784
  %822 = phi double [ undef, %784 ], [ %812, %790 ]
  %823 = phi i64 [ 1, %784 ], [ %813, %790 ]
  %824 = phi double [ %782, %784 ], [ %812, %790 ]
  %825 = icmp eq i64 %786, 0
  br i1 %825, label %836, label %826

826:                                              ; preds = %821
  %827 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %823
  %828 = load double, double* %827, align 8
  %829 = sub i64 %141, %823
  %830 = shl i64 %829, 32
  %831 = ashr exact i64 %830, 32
  %832 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %831
  %833 = load double, double* %832, align 8
  %834 = fmul double %828, %833
  %835 = fadd double %824, %834
  br label %836

836:                                              ; preds = %826, %821, %774
  %837 = phi double [ %782, %774 ], [ %822, %821 ], [ %835, %826 ]
  %838 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 1
  store double %837, double* %838, align 8
  %839 = add i64 %141, 1
  %840 = shl i64 %839, 32
  %841 = ashr exact i64 %840, 32
  %842 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %841
  %843 = load double, double* %842, align 8
  %844 = fmul double %843, %133
  %845 = fadd double %844, 0.000000e+00
  %846 = icmp eq i64 %201, 1
  br i1 %846, label %894, label %847

847:                                              ; preds = %836
  %848 = add nsw i64 %201, -1
  %849 = and i64 %848, 1
  %850 = icmp eq i64 %201, 2
  br i1 %850, label %879, label %851

851:                                              ; preds = %847
  %852 = sub nsw i64 %848, %849
  br label %853

853:                                              ; preds = %853, %851
  %854 = phi i64 [ 1, %851 ], [ %876, %853 ]
  %855 = phi double [ %845, %851 ], [ %875, %853 ]
  %856 = phi i64 [ %852, %851 ], [ %877, %853 ]
  %857 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %854
  %858 = load double, double* %857, align 8
  %859 = sub i64 %839, %854
  %860 = shl i64 %859, 32
  %861 = ashr exact i64 %860, 32
  %862 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %861
  %863 = load double, double* %862, align 8
  %864 = fmul double %858, %863
  %865 = fadd double %855, %864
  %866 = add nuw nsw i64 %854, 1
  %867 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %866
  %868 = load double, double* %867, align 8
  %869 = sub i64 %839, %866
  %870 = shl i64 %869, 32
  %871 = ashr exact i64 %870, 32
  %872 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %871
  %873 = load double, double* %872, align 8
  %874 = fmul double %868, %873
  %875 = fadd double %865, %874
  %876 = add nuw nsw i64 %854, 2
  %877 = add i64 %856, -2
  %878 = icmp eq i64 %877, 0
  br i1 %878, label %879, label %853

879:                                              ; preds = %853, %847
  %880 = phi double [ undef, %847 ], [ %875, %853 ]
  %881 = phi i64 [ 1, %847 ], [ %876, %853 ]
  %882 = phi double [ %845, %847 ], [ %875, %853 ]
  %883 = icmp eq i64 %849, 0
  br i1 %883, label %894, label %884

884:                                              ; preds = %879
  %885 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %881
  %886 = load double, double* %885, align 8
  %887 = sub i64 %839, %881
  %888 = shl i64 %887, 32
  %889 = ashr exact i64 %888, 32
  %890 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %889
  %891 = load double, double* %890, align 8
  %892 = fmul double %886, %891
  %893 = fadd double %882, %892
  br label %894

894:                                              ; preds = %884, %879, %836
  %895 = phi double [ %845, %836 ], [ %880, %879 ], [ %893, %884 ]
  %896 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 2
  store double %895, double* %896, align 16
  %897 = add i64 %141, 2
  %898 = shl i64 %897, 32
  %899 = ashr exact i64 %898, 32
  %900 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %899
  %901 = load double, double* %900, align 8
  %902 = fmul double %901, %133
  %903 = fadd double %902, 0.000000e+00
  %904 = icmp eq i64 %201, 1
  br i1 %904, label %952, label %905

905:                                              ; preds = %894
  %906 = add nsw i64 %201, -1
  %907 = and i64 %906, 1
  %908 = icmp eq i64 %201, 2
  br i1 %908, label %937, label %909

909:                                              ; preds = %905
  %910 = sub nsw i64 %906, %907
  br label %911

911:                                              ; preds = %911, %909
  %912 = phi i64 [ 1, %909 ], [ %934, %911 ]
  %913 = phi double [ %903, %909 ], [ %933, %911 ]
  %914 = phi i64 [ %910, %909 ], [ %935, %911 ]
  %915 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %912
  %916 = load double, double* %915, align 8
  %917 = sub i64 %897, %912
  %918 = shl i64 %917, 32
  %919 = ashr exact i64 %918, 32
  %920 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %919
  %921 = load double, double* %920, align 8
  %922 = fmul double %916, %921
  %923 = fadd double %913, %922
  %924 = add nuw nsw i64 %912, 1
  %925 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %924
  %926 = load double, double* %925, align 8
  %927 = sub i64 %897, %924
  %928 = shl i64 %927, 32
  %929 = ashr exact i64 %928, 32
  %930 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %929
  %931 = load double, double* %930, align 8
  %932 = fmul double %926, %931
  %933 = fadd double %923, %932
  %934 = add nuw nsw i64 %912, 2
  %935 = add i64 %914, -2
  %936 = icmp eq i64 %935, 0
  br i1 %936, label %937, label %911

937:                                              ; preds = %911, %905
  %938 = phi double [ undef, %905 ], [ %933, %911 ]
  %939 = phi i64 [ 1, %905 ], [ %934, %911 ]
  %940 = phi double [ %903, %905 ], [ %933, %911 ]
  %941 = icmp eq i64 %907, 0
  br i1 %941, label %952, label %942

942:                                              ; preds = %937
  %943 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %939
  %944 = load double, double* %943, align 8
  %945 = sub i64 %897, %939
  %946 = shl i64 %945, 32
  %947 = ashr exact i64 %946, 32
  %948 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %947
  %949 = load double, double* %948, align 8
  %950 = fmul double %944, %949
  %951 = fadd double %940, %950
  br label %952

952:                                              ; preds = %942, %937, %894
  %953 = phi double [ %903, %894 ], [ %938, %937 ], [ %951, %942 ]
  %954 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 3
  store double %953, double* %954, align 8
  %955 = add i64 %141, 3
  %956 = shl i64 %955, 32
  %957 = ashr exact i64 %956, 32
  %958 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %957
  %959 = load double, double* %958, align 8
  %960 = fmul double %959, %133
  %961 = fadd double %960, 0.000000e+00
  %962 = icmp eq i64 %201, 1
  br i1 %962, label %1010, label %963

963:                                              ; preds = %952
  %964 = add nsw i64 %201, -1
  %965 = and i64 %964, 1
  %966 = icmp eq i64 %201, 2
  br i1 %966, label %995, label %967

967:                                              ; preds = %963
  %968 = sub nsw i64 %964, %965
  br label %969

969:                                              ; preds = %969, %967
  %970 = phi i64 [ 1, %967 ], [ %992, %969 ]
  %971 = phi double [ %961, %967 ], [ %991, %969 ]
  %972 = phi i64 [ %968, %967 ], [ %993, %969 ]
  %973 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %970
  %974 = load double, double* %973, align 8
  %975 = sub i64 %955, %970
  %976 = shl i64 %975, 32
  %977 = ashr exact i64 %976, 32
  %978 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %977
  %979 = load double, double* %978, align 8
  %980 = fmul double %974, %979
  %981 = fadd double %971, %980
  %982 = add nuw nsw i64 %970, 1
  %983 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %982
  %984 = load double, double* %983, align 8
  %985 = sub i64 %955, %982
  %986 = shl i64 %985, 32
  %987 = ashr exact i64 %986, 32
  %988 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %987
  %989 = load double, double* %988, align 8
  %990 = fmul double %984, %989
  %991 = fadd double %981, %990
  %992 = add nuw nsw i64 %970, 2
  %993 = add i64 %972, -2
  %994 = icmp eq i64 %993, 0
  br i1 %994, label %995, label %969

995:                                              ; preds = %969, %963
  %996 = phi double [ undef, %963 ], [ %991, %969 ]
  %997 = phi i64 [ 1, %963 ], [ %992, %969 ]
  %998 = phi double [ %961, %963 ], [ %991, %969 ]
  %999 = icmp eq i64 %965, 0
  br i1 %999, label %1010, label %1000

1000:                                             ; preds = %995
  %1001 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %997
  %1002 = load double, double* %1001, align 8
  %1003 = sub i64 %955, %997
  %1004 = shl i64 %1003, 32
  %1005 = ashr exact i64 %1004, 32
  %1006 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1005
  %1007 = load double, double* %1006, align 8
  %1008 = fmul double %1002, %1007
  %1009 = fadd double %998, %1008
  br label %1010

1010:                                             ; preds = %1000, %995, %952, %816
  %1011 = phi i64 [ %819, %816 ], [ %201, %952 ], [ %201, %995 ], [ %201, %1000 ]
  %1012 = phi i1 [ false, %816 ], [ true, %952 ], [ true, %995 ], [ true, %1000 ]
  %1013 = phi double [ 0.000000e+00, %816 ], [ %961, %952 ], [ %996, %995 ], [ %1009, %1000 ]
  %1014 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 4
  store double %1013, double* %1014, align 16
  %1015 = icmp sgt i32 %158, 0
  %1016 = icmp eq i32 %158, 0
  %1017 = sub nsw i32 24, %158
  %1018 = sub nsw i32 23, %158
  %1019 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 3
  %1020 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 2
  %1021 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 1
  %1022 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 0
  %1023 = and i64 %1011, 1
  %1024 = icmp eq i64 %1011, 1
  %1025 = sub nsw i64 %1011, %1023
  %1026 = icmp eq i64 %1023, 0
  br label %248

1027:                                             ; preds = %713, %704
  %1028 = phi double [ undef, %704 ], [ %747, %713 ]
  %1029 = phi i64 [ 1, %704 ], [ %748, %713 ]
  %1030 = phi double [ %702, %704 ], [ %747, %713 ]
  %1031 = icmp eq i64 %709, 0
  br i1 %1031, label %1042, label %1032

1032:                                             ; preds = %1027, %1032
  %1033 = phi i64 [ %1039, %1032 ], [ %1029, %1027 ]
  %1034 = phi double [ %1038, %1032 ], [ %1030, %1027 ]
  %1035 = phi i64 [ %1040, %1032 ], [ %709, %1027 ]
  %1036 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %1033
  %1037 = load double, double* %1036, align 8
  %1038 = fadd double %1034, %1037
  %1039 = add nuw nsw i64 %1033, 1
  %1040 = add i64 %1035, -1
  %1041 = icmp eq i64 %1040, 0
  br i1 %1041, label %1042, label %1032, !llvm.loop !8

1042:                                             ; preds = %1027, %1032, %606, %696
  %1043 = phi double [ %701, %696 ], [ %608, %606 ], [ %701, %1032 ], [ %701, %1027 ]
  %1044 = phi i1 [ %699, %696 ], [ %607, %606 ], [ %699, %1032 ], [ %699, %1027 ]
  %1045 = phi double [ %702, %696 ], [ 0xFFFFFFFFFFFFFFFF, %606 ], [ %1028, %1027 ], [ %1038, %1032 ]
  %1046 = fsub double -0.000000e+00, %1045
  %1047 = select i1 %1044, double %1045, double %1046
  %1048 = getelementptr inbounds double, double* %1, i64 1
  store double %1047, double* %1048, align 8
  %1049 = and i32 %406, 7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %151) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %150) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %149) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %148) #7
  %1050 = icmp slt i32 %14, 0
  br i1 %1050, label %1051, label %1057

1051:                                             ; preds = %1042
  %1052 = insertelement <2 x double> undef, double %1043, i32 0
  %1053 = insertelement <2 x double> %1052, double %1047, i32 1
  %1054 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %1053
  %1055 = bitcast double* %1 to <2 x double>*
  store <2 x double> %1054, <2 x double>* %1055, align 8
  %1056 = sub nsw i32 0, %1049
  br label %1057

1057:                                             ; preds = %1042, %103, %41, %46, %27, %32, %1051, %119, %111, %18
  %1058 = phi i32 [ 0, %18 ], [ %116, %111 ], [ 0, %119 ], [ %1056, %1051 ], [ 1, %32 ], [ 1, %27 ], [ -1, %46 ], [ -1, %41 ], [ %58, %103 ], [ %1049, %1042 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  ret i32 %1058

1059:                                             ; preds = %659
  %1060 = add nsw i64 %660, 4
  %1061 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %1060
  %1062 = load double, double* %1061, align 8
  %1063 = fmul double %1062, 0x39F01B8380000000
  %1064 = fadd double %680, %1063
  br label %682

1065:                                             ; preds = %359
  %1066 = icmp eq i32 %363, 0
  br i1 %1066, label %1071, label %1067

1067:                                             ; preds = %1065, %359
  %1068 = phi i32 [ 16777216, %1065 ], [ 16777215, %359 ]
  %1069 = phi i32 [ 1, %1065 ], [ %360, %359 ]
  %1070 = sub nsw i32 %1068, %363
  store i32 %1070, i32* %362, align 4
  br label %1071

1071:                                             ; preds = %1067, %1065
  %1072 = phi i32 [ 0, %1065 ], [ %1069, %1067 ]
  %1073 = add nuw nsw i64 %347, 2
  %1074 = add i64 %349, -2
  %1075 = icmp eq i64 %1074, 0
  br i1 %1075, label %365, label %346

1076:                                             ; preds = %194
  %1077 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %198
  %1078 = load i32, i32* %1077, align 4
  %1079 = sitofp i32 %1078 to double
  br label %1080

1080:                                             ; preds = %1076, %194
  %1081 = phi double [ %1079, %1076 ], [ 0.000000e+00, %194 ]
  %1082 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %197
  store double %1081, double* %1082, align 8
  %1083 = add nuw nsw i64 %186, 2
  %1084 = add nsw i64 %187, 2
  %1085 = add i64 %188, -2
  %1086 = icmp eq i64 %1085, 0
  br i1 %1086, label %170, label %185
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm3expEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = lshr i64 %2, 63
  %6 = trunc i64 %5 to i32
  %7 = and i32 %4, 2147483647
  %8 = icmp ugt i32 %7, 1082535489
  br i1 %8, label %9, label %33

9:                                                ; preds = %1
  %10 = icmp ugt i32 %7, 2146435071
  br i1 %10, label %11, label %21

11:                                               ; preds = %9
  %12 = trunc i64 %2 to i32
  %13 = and i32 %4, 1048575
  %14 = or i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = fadd double %0, %0
  br label %122

18:                                               ; preds = %11
  %19 = icmp eq i32 %6, 0
  %20 = select i1 %19, double %0, double 0.000000e+00
  br label %122

21:                                               ; preds = %9
  %22 = fcmp ogt double %0, 0x40862E42FEFA39EF
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = load volatile double, double* @_ZZN6fdlibm3expEdE4huge, align 8
  %25 = load volatile double, double* @_ZZN6fdlibm3expEdE4huge, align 8
  %26 = fmul double %24, %25
  br label %122

27:                                               ; preds = %21
  %28 = fcmp olt double %0, 0xC0874910D52D3051
  br i1 %28, label %29, label %46

29:                                               ; preds = %27
  %30 = load volatile double, double* @_ZZN6fdlibm3expEdE8twom1000, align 8
  %31 = load volatile double, double* @_ZZN6fdlibm3expEdE8twom1000, align 8
  %32 = fmul double %30, %31
  br label %122

33:                                               ; preds = %1
  %34 = icmp ugt i32 %7, 1071001154
  br i1 %34, label %35, label %55

35:                                               ; preds = %33
  %36 = icmp ult i32 %7, 1072734898
  br i1 %36, label %37, label %46

37:                                               ; preds = %35
  %38 = fcmp oeq double %0, 1.000000e+00
  br i1 %38, label %122, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3expEdE5ln2HI, i64 0, i64 %5
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3expEdE5ln2LO, i64 0, i64 %5
  %43 = load double, double* %42, align 8
  %44 = xor i32 %6, 1
  %45 = sub nsw i32 %44, %6
  br label %65

46:                                               ; preds = %27, %35
  %47 = fmul double %0, 0x3FF71547652B82FE
  %48 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3expEdE4halF, i64 0, i64 %5
  %49 = load double, double* %48, align 8
  %50 = fadd double %47, %49
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = fmul double %52, 0x3FE62E42FEE00000
  %54 = fmul double %52, 0x3DEA39EF35793C76
  br label %65

55:                                               ; preds = %33
  %56 = icmp ult i32 %7, 1043333120
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = load volatile double, double* @_ZZN6fdlibm3expEdE4huge, align 8
  %59 = fadd double %58, %0
  %60 = fcmp ogt double %59, 1.000000e+00
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = fadd double %0, 1.000000e+00
  br label %122

63:                                               ; preds = %57, %55
  %64 = fmul double %0, %0
  br label %74

65:                                               ; preds = %39, %46
  %66 = phi double [ %43, %39 ], [ %54, %46 ]
  %67 = phi i32 [ %45, %39 ], [ %51, %46 ]
  %68 = phi double [ %41, %39 ], [ %53, %46 ]
  %69 = fsub double %0, %68
  %70 = fsub double %69, %66
  %71 = fmul double %70, %70
  %72 = icmp sgt i32 %67, -1022
  %73 = select i1 %72, i32 1072693248, i32 2121269248
  br label %74

74:                                               ; preds = %65, %63
  %75 = phi i32 [ 0, %63 ], [ %67, %65 ]
  %76 = phi i32 [ 1072693248, %63 ], [ %73, %65 ]
  %77 = phi i1 [ true, %63 ], [ %72, %65 ]
  %78 = phi double [ %64, %63 ], [ %71, %65 ]
  %79 = phi double [ %0, %63 ], [ %70, %65 ]
  %80 = phi double [ 0.000000e+00, %63 ], [ %69, %65 ]
  %81 = phi double [ 0.000000e+00, %63 ], [ %66, %65 ]
  %82 = shl i32 %75, 20
  %83 = add i32 %82, %76
  %84 = zext i32 %83 to i64
  %85 = shl nuw i64 %84, 32
  %86 = bitcast i64 %85 to double
  %87 = fmul double %78, 0x3E66376972BEA4D0
  %88 = fadd double %87, 0xBEBBBD41C5D26BF1
  %89 = fmul double %78, %88
  %90 = fadd double %89, 0x3F11566AAF25DE2C
  %91 = fmul double %78, %90
  %92 = fadd double %91, 0xBF66C16C16BEBD93
  %93 = fmul double %78, %92
  %94 = fadd double %93, 0x3FC555555555553E
  %95 = fmul double %78, %94
  %96 = fsub double %79, %95
  %97 = icmp eq i32 %75, 0
  %98 = fmul double %79, %96
  br i1 %97, label %99, label %104

99:                                               ; preds = %74
  %100 = fadd double %96, -2.000000e+00
  %101 = fdiv double %98, %100
  %102 = fsub double %79, %101
  %103 = fadd double %102, 1.000000e+00
  br label %122

104:                                              ; preds = %74
  %105 = fsub double 2.000000e+00, %96
  %106 = fdiv double %98, %105
  %107 = fsub double %81, %106
  %108 = fsub double %80, %107
  %109 = fadd double %108, 1.000000e+00
  br i1 %77, label %110, label %118

110:                                              ; preds = %104
  %111 = icmp eq i32 %75, 1024
  br i1 %111, label %112, label %116

112:                                              ; preds = %110
  %113 = fmul double %109, 2.000000e+00
  %114 = load volatile double, double* @_ZZN6fdlibm3expEdE7two1023, align 8
  %115 = fmul double %113, %114
  br label %122

116:                                              ; preds = %110
  %117 = fmul double %109, %86
  br label %122

118:                                              ; preds = %104
  %119 = fmul double %109, %86
  %120 = load volatile double, double* @_ZZN6fdlibm3expEdE8twom1000, align 8
  %121 = fmul double %119, %120
  br label %122

122:                                              ; preds = %37, %16, %18, %118, %116, %112, %99, %61, %29, %23
  %123 = phi double [ %26, %23 ], [ %32, %29 ], [ %103, %99 ], [ %115, %112 ], [ %117, %116 ], [ %121, %118 ], [ %62, %61 ], [ %17, %16 ], [ %20, %18 ], [ 0x4005BF0A8B145769, %37 ]
  ret double %123
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm5atanhEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = and i32 %4, 2147483647
  %7 = icmp eq i32 %5, -2147483648
  %8 = sub nsw i32 0, %5
  %9 = select i1 %7, i32 -2147483648, i32 %8
  %10 = or i32 %9, %5
  %11 = lshr i32 %10, 31
  %12 = or i32 %11, %6
  %13 = icmp ugt i32 %12, 1072693248
  br i1 %13, label %47, label %14

14:                                               ; preds = %1
  %15 = icmp eq i32 %6, 1072693248
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = fcmp ogt double %0, 0.000000e+00
  %18 = select i1 %17, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %47

19:                                               ; preds = %14
  %20 = icmp ult i32 %6, 1043333120
  %21 = fadd double %0, 1.000000e+300
  %22 = fcmp ogt double %21, 0.000000e+00
  %23 = and i1 %22, %20
  br i1 %23, label %47, label %24

24:                                               ; preds = %19
  %25 = and i64 %2, 4294967295
  %26 = zext i32 %6 to i64
  %27 = shl nuw nsw i64 %26, 32
  %28 = or i64 %27, %25
  %29 = bitcast i64 %28 to double
  %30 = icmp ult i32 %6, 1071644672
  %31 = fadd double %29, %29
  br i1 %30, label %32, label %37

32:                                               ; preds = %24
  %33 = fmul double %31, %29
  %34 = fsub double 1.000000e+00, %29
  %35 = fdiv double %33, %34
  %36 = fadd double %31, %35
  br label %40

37:                                               ; preds = %24
  %38 = fsub double 1.000000e+00, %29
  %39 = fdiv double %31, %38
  br label %40

40:                                               ; preds = %37, %32
  %41 = phi double [ %39, %37 ], [ %36, %32 ]
  %42 = tail call double @_ZN6fdlibm5log1pEd(double %41)
  %43 = fmul double %42, 5.000000e-01
  %44 = icmp sgt i32 %4, -1
  %45 = fsub double -0.000000e+00, %43
  %46 = select i1 %44, double %43, double %45
  ret double %46

47:                                               ; preds = %19, %1, %16
  %48 = phi double [ %18, %16 ], [ 0x7FF4000000000000, %1 ], [ %0, %19 ]
  ret double %48
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm4log2Ed(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1048576
  br i1 %6, label %7, label %18

7:                                                ; preds = %1
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %85, label %11

11:                                               ; preds = %7
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %85, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi double [ %14, %13 ], [ %0, %1 ]
  %20 = phi i64 [ %15, %13 ], [ %2, %1 ]
  %21 = phi i32 [ -1077, %13 ], [ -1023, %1 ]
  %22 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %23 = icmp sgt i32 %22, 2146435071
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = fadd double %19, %19
  br label %85

26:                                               ; preds = %18
  %27 = icmp eq i32 %22, 1072693248
  %28 = icmp eq i32 %5, 0
  %29 = and i1 %28, %27
  br i1 %29, label %85, label %30

30:                                               ; preds = %26
  %31 = ashr i32 %22, 20
  %32 = and i32 %22, 1048575
  %33 = add nuw nsw i32 %32, 614244
  %34 = and i32 %33, 1048576
  %35 = and i64 %20, 4294967295
  %36 = or i32 %34, %32
  %37 = xor i32 %36, 1072693248
  %38 = zext i32 %37 to i64
  %39 = shl nuw nsw i64 %38, 32
  %40 = or i64 %39, %35
  %41 = bitcast i64 %40 to double
  %42 = lshr i32 %33, 20
  %43 = add nsw i32 %21, %31
  %44 = add nsw i32 %43, %42
  %45 = sitofp i32 %44 to double
  %46 = fadd double %41, -1.000000e+00
  %47 = fmul double %46, 5.000000e-01
  %48 = fmul double %46, %47
  %49 = fadd double %46, 2.000000e+00
  %50 = fdiv double %46, %49
  %51 = fmul double %50, %50
  %52 = fmul double %51, %51
  %53 = fmul double %52, 0x3FC39A09D078C69F
  %54 = fadd double %53, 0x3FCC71C51D8E78AF
  %55 = fmul double %52, %54
  %56 = fadd double %55, 0x3FD999999997FA04
  %57 = fmul double %52, %56
  %58 = fmul double %52, 0x3FC2F112DF3E5244
  %59 = fadd double %58, 0x3FC7466496CB03DE
  %60 = fmul double %52, %59
  %61 = fadd double %60, 0x3FD2492494229359
  %62 = fmul double %52, %61
  %63 = fadd double %62, 0x3FE5555555555593
  %64 = fmul double %51, %63
  %65 = fadd double %57, %64
  %66 = fadd double %48, %65
  %67 = fmul double %50, %66
  %68 = fsub double %46, %48
  %69 = bitcast double %68 to i64
  %70 = and i64 %69, -4294967296
  %71 = bitcast i64 %70 to double
  %72 = fsub double %46, %71
  %73 = fsub double %72, %48
  %74 = fadd double %73, %67
  %75 = fmul double %71, 0x3FF7154765200000
  %76 = fadd double %74, %71
  %77 = fmul double %76, 0x3DE705FC2EEFA200
  %78 = fmul double %74, 0x3FF7154765200000
  %79 = fadd double %78, %77
  %80 = fadd double %75, %45
  %81 = fsub double %45, %80
  %82 = fadd double %75, %81
  %83 = fadd double %82, %79
  %84 = fadd double %80, %83
  br label %85

85:                                               ; preds = %11, %7, %26, %30, %24
  %86 = phi double [ %25, %24 ], [ %84, %30 ], [ 0.000000e+00, %26 ], [ 0xFFF0000000000000, %7 ], [ 0x7FF4000000000000, %11 ]
  ret double %86
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm5log10Ed(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1048576
  br i1 %6, label %7, label %19

7:                                                ; preds = %1
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %53, label %11

11:                                               ; preds = %7
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %53, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  %18 = trunc i64 %15 to i32
  br label %19

19:                                               ; preds = %13, %1
  %20 = phi double [ %14, %13 ], [ %0, %1 ]
  %21 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %22 = phi i32 [ %18, %13 ], [ %5, %1 ]
  %23 = phi i32 [ -54, %13 ], [ 0, %1 ]
  %24 = icmp sgt i32 %21, 2146435071
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = fadd double %20, %20
  br label %53

27:                                               ; preds = %19
  %28 = icmp eq i32 %21, 1072693248
  %29 = icmp eq i32 %22, 0
  %30 = and i1 %28, %29
  br i1 %30, label %53, label %31

31:                                               ; preds = %27
  %32 = ashr i32 %21, 20
  %33 = add nsw i32 %32, -1023
  %34 = add nsw i32 %33, %23
  %35 = lshr i32 %34, 31
  %36 = and i32 %21, 1048575
  %37 = shl nuw nsw i32 %35, 20
  %38 = or i32 %37, %36
  %39 = xor i32 %38, 1072693248
  %40 = add nsw i32 %35, %34
  %41 = sitofp i32 %40 to double
  %42 = zext i32 %39 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i32 %22 to i64
  %45 = or i64 %43, %44
  %46 = bitcast i64 %45 to double
  %47 = fmul double %41, 0x3D59FEF311F12B36
  %48 = tail call double @_ZN6fdlibm3logEd(double %46)
  %49 = fmul double %48, 0x3FDBCB7B1526E50E
  %50 = fadd double %47, %49
  %51 = fmul double %41, 0x3FD34413509F6000
  %52 = fadd double %51, %50
  br label %53

53:                                               ; preds = %11, %7, %27, %31, %25
  %54 = phi double [ %26, %25 ], [ %52, %31 ], [ 0.000000e+00, %27 ], [ 0xFFF0000000000000, %7 ], [ 0x7FF8000000000000, %11 ]
  ret double %54
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm5expm1Ed(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, -2147483648
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %6, 1078159481
  br i1 %7, label %8, label %33

8:                                                ; preds = %1
  %9 = icmp ugt i32 %6, 1082535489
  br i1 %9, label %10, label %28

10:                                               ; preds = %8
  %11 = icmp ugt i32 %6, 2146435071
  br i1 %11, label %12, label %22

12:                                               ; preds = %10
  %13 = trunc i64 %2 to i32
  %14 = and i32 %4, 1048575
  %15 = or i32 %14, %13
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = fadd double %0, %0
  br label %153

19:                                               ; preds = %12
  %20 = icmp eq i32 %5, 0
  %21 = select i1 %20, double %0, double -1.000000e+00
  br label %153

22:                                               ; preds = %10
  %23 = fcmp ogt double %0, 0x40862E42FEFA39EF
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = load volatile double, double* @_ZZN6fdlibm5expm1EdE4huge, align 8
  %26 = load volatile double, double* @_ZZN6fdlibm5expm1EdE4huge, align 8
  %27 = fmul double %25, %26
  br label %153

28:                                               ; preds = %22, %8
  %29 = icmp ne i32 %5, 0
  %30 = fadd double %0, 1.000000e-300
  %31 = fcmp olt double %30, 0.000000e+00
  %32 = and i1 %31, %29
  br i1 %32, label %153, label %43

33:                                               ; preds = %1
  %34 = icmp ugt i32 %6, 1071001154
  br i1 %34, label %35, label %60

35:                                               ; preds = %33
  %36 = icmp ult i32 %6, 1072734898
  br i1 %36, label %37, label %43

37:                                               ; preds = %35
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = fadd double %0, 0xBFE62E42FEE00000
  br label %53

41:                                               ; preds = %37
  %42 = fadd double %0, 0x3FE62E42FEE00000
  br label %53

43:                                               ; preds = %28, %35
  %44 = fmul double %0, 0x3FF71547652B82FE
  %45 = icmp eq i32 %5, 0
  %46 = select i1 %45, double 5.000000e-01, double -5.000000e-01
  %47 = fadd double %44, %46
  %48 = fptosi double %47 to i32
  %49 = sitofp i32 %48 to double
  %50 = fmul double %49, 0x3FE62E42FEE00000
  %51 = fsub double %0, %50
  %52 = fmul double %49, 0x3DEA39EF35793C76
  br label %53

53:                                               ; preds = %39, %41, %43
  %54 = phi double [ 0x3DEA39EF35793C76, %39 ], [ 0xBDEA39EF35793C76, %41 ], [ %52, %43 ]
  %55 = phi i32 [ 1, %39 ], [ -1, %41 ], [ %48, %43 ]
  %56 = phi double [ %40, %39 ], [ %42, %41 ], [ %51, %43 ]
  %57 = fsub double %56, %54
  %58 = fsub double %56, %57
  %59 = fsub double %58, %54
  br label %69

60:                                               ; preds = %33
  %61 = icmp ult i32 %6, 1016070144
  br i1 %61, label %62, label %69

62:                                               ; preds = %60
  %63 = load volatile double, double* @_ZZN6fdlibm5expm1EdE4huge, align 8
  %64 = fadd double %63, %0
  %65 = load volatile double, double* @_ZZN6fdlibm5expm1EdE4huge, align 8
  %66 = fadd double %65, %0
  %67 = fsub double %64, %66
  %68 = fsub double %0, %67
  br label %153

69:                                               ; preds = %60, %53
  %70 = phi double [ %57, %53 ], [ %0, %60 ]
  %71 = phi double [ %59, %53 ], [ 0xFFFFFFFFFFFFFFFF, %60 ]
  %72 = phi i32 [ %55, %53 ], [ 0, %60 ]
  %73 = fmul double %70, 5.000000e-01
  %74 = fmul double %70, %73
  %75 = fmul double %74, 0x3E8AFDB76E09C32D
  %76 = fsub double 0x3ED0CFCA86E65239, %75
  %77 = fmul double %74, %76
  %78 = fadd double %77, 0xBF14CE199EAADBB7
  %79 = fmul double %74, %78
  %80 = fadd double %79, 0x3F5A01A019FE5585
  %81 = fmul double %74, %80
  %82 = fadd double %81, 0xBFA11111111110F4
  %83 = fmul double %74, %82
  %84 = fadd double %83, 1.000000e+00
  %85 = fmul double %73, %84
  %86 = fsub double 3.000000e+00, %85
  %87 = fsub double %84, %86
  %88 = fmul double %70, %86
  %89 = fsub double 6.000000e+00, %88
  %90 = fdiv double %87, %89
  %91 = fmul double %74, %90
  %92 = icmp eq i32 %72, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %69
  %94 = fmul double %70, %91
  %95 = fsub double %94, %74
  %96 = fsub double %70, %95
  br label %153

97:                                               ; preds = %69
  %98 = shl i32 %72, 20
  %99 = add nsw i32 %98, 1072693248
  %100 = zext i32 %99 to i64
  %101 = shl nuw i64 %100, 32
  %102 = bitcast i64 %101 to double
  %103 = fsub double %91, %71
  %104 = fmul double %70, %103
  %105 = fsub double %104, %71
  %106 = fsub double %105, %74
  switch i32 %72, label %121 [
    i32 -1, label %107
    i32 1, label %111
  ]

107:                                              ; preds = %97
  %108 = fsub double %70, %106
  %109 = fmul double %108, 5.000000e-01
  %110 = fadd double %109, -5.000000e-01
  br label %153

111:                                              ; preds = %97
  %112 = fcmp olt double %70, -2.500000e-01
  br i1 %112, label %113, label %117

113:                                              ; preds = %111
  %114 = fadd double %70, 5.000000e-01
  %115 = fsub double %106, %114
  %116 = fmul double %115, -2.000000e+00
  br label %153

117:                                              ; preds = %111
  %118 = fsub double %70, %106
  %119 = fmul double %118, 2.000000e+00
  %120 = fadd double %119, 1.000000e+00
  br label %153

121:                                              ; preds = %97
  %122 = icmp ugt i32 %72, 56
  br i1 %122, label %123, label %132

123:                                              ; preds = %121
  %124 = fsub double %70, %106
  %125 = fadd double %124, 1.000000e+00
  %126 = icmp eq i32 %72, 1024
  %127 = fmul double %125, 2.000000e+00
  %128 = fmul double %127, 0x7FE0000000000000
  %129 = fmul double %125, %102
  %130 = select i1 %126, double %128, double %129
  %131 = fadd double %130, -1.000000e+00
  br label %153

132:                                              ; preds = %121
  %133 = icmp slt i32 %72, 20
  br i1 %133, label %134, label %142

134:                                              ; preds = %132
  %135 = lshr i32 2097152, %72
  %136 = sub nuw nsw i32 1072693248, %135
  %137 = zext i32 %136 to i64
  %138 = shl nuw i64 %137, 32
  %139 = bitcast i64 %138 to double
  %140 = fsub double %106, %70
  %141 = fsub double %139, %140
  br label %150

142:                                              ; preds = %132
  %143 = sub i32 1072693248, %98
  %144 = zext i32 %143 to i64
  %145 = shl nuw i64 %144, 32
  %146 = bitcast i64 %145 to double
  %147 = fadd double %106, %146
  %148 = fsub double %70, %147
  %149 = fadd double %148, 1.000000e+00
  br label %150

150:                                              ; preds = %134, %142
  %151 = phi double [ %141, %134 ], [ %149, %142 ]
  %152 = fmul double %151, %102
  br label %153

153:                                              ; preds = %28, %17, %19, %150, %123, %117, %113, %107, %93, %62, %24
  %154 = phi double [ %27, %24 ], [ %96, %93 ], [ %110, %107 ], [ %116, %113 ], [ %120, %117 ], [ %131, %123 ], [ %152, %150 ], [ %68, %62 ], [ %18, %17 ], [ %21, %19 ], [ -1.000000e+00, %28 ]
  ret double %154
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN6fdlibm4cbrtEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = and i32 %4, -2147483648
  %7 = and i32 %4, 2147483647
  %8 = icmp ugt i32 %7, 2146435071
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = fadd double %0, %0
  br label %57

11:                                               ; preds = %1
  %12 = icmp ult i32 %7, 1048576
  br i1 %12, label %13, label %22

13:                                               ; preds = %11
  %14 = or i32 %7, %5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %57, label %16

16:                                               ; preds = %13
  %17 = fmul double %0, 0x4350000000000000
  %18 = bitcast double %17 to i64
  %19 = lshr i64 %18, 32
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 2147483647
  br label %22

22:                                               ; preds = %11, %16
  %23 = phi i32 [ %21, %16 ], [ %7, %11 ]
  %24 = phi i32 [ 696219795, %16 ], [ 715094163, %11 ]
  %25 = udiv i32 %23, 3
  %26 = add nuw nsw i32 %25, %24
  %27 = or i32 %26, %6
  %28 = zext i32 %27 to i64
  %29 = shl nuw i64 %28, 32
  %30 = bitcast i64 %29 to double
  %31 = fmul double %30, %30
  %32 = fdiv double %30, %0
  %33 = fmul double %31, %32
  %34 = fmul double %33, 0x3FF9F1604A49D6C2
  %35 = fadd double %34, 0xBFFE28E092F02420
  %36 = fmul double %33, %35
  %37 = fadd double %36, 0x3FFE03E60F61E692
  %38 = fmul double %33, %33
  %39 = fmul double %33, %38
  %40 = fmul double %33, 0x3FC2B000D4E4EDD7
  %41 = fadd double %40, 0xBFE844CBBEE751D9
  %42 = fmul double %39, %41
  %43 = fadd double %42, %37
  %44 = fmul double %43, %30
  %45 = bitcast double %44 to i64
  %46 = add i64 %45, 2147483648
  %47 = and i64 %46, -1073741824
  %48 = bitcast i64 %47 to double
  %49 = fmul double %48, %48
  %50 = fdiv double %0, %49
  %51 = fadd double %48, %48
  %52 = fsub double %50, %48
  %53 = fadd double %51, %50
  %54 = fdiv double %52, %53
  %55 = fmul double %54, %48
  %56 = fadd double %55, %48
  br label %57

57:                                               ; preds = %13, %22, %9
  %58 = phi double [ %10, %9 ], [ %56, %22 ], [ %0, %13 ]
  ret double %58
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %6 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp ult i32 %9, 1072243196
  %11 = bitcast [2 x double]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 16, i1 false)
  br i1 %10, label %12, label %33

12:                                               ; preds = %1
  %13 = and i64 %3, 9205357638345293824
  %14 = icmp ult i64 %13, 4485585228861014016
  %15 = fptosi double %0 to i32
  %16 = icmp eq i32 %15, 0
  %17 = and i1 %16, %14
  br i1 %17, label %200, label %18

18:                                               ; preds = %12
  %19 = fmul double %0, %0
  %20 = fmul double %19, %0
  %21 = fmul double %19, 0x3DE5D93A5ACFD57C
  %22 = fadd double %21, 0xBE5AE5E68A2B9CEB
  %23 = fmul double %19, %22
  %24 = fadd double %23, 0x3EC71DE357B1FE7D
  %25 = fmul double %19, %24
  %26 = fadd double %25, 0xBF2A01A019C161D5
  %27 = fmul double %19, %26
  %28 = fadd double %27, 0x3F8111111110F8A6
  %29 = fmul double %19, %28
  %30 = fadd double %29, 0xBFC5555555555549
  %31 = fmul double %20, %30
  %32 = fadd double %31, %0
  br label %200

33:                                               ; preds = %1
  %34 = icmp ugt i32 %9, 2146435071
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = fsub double %0, %0
  br label %200

37:                                               ; preds = %33
  %38 = call fastcc i32 @_ZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %5)
  %39 = and i32 %38, 3
  switch i32 %39, label %148 [
    i32 0, label %40
    i32 1, label %68
    i32 2, label %117
  ]

40:                                               ; preds = %37
  %41 = load double, double* %5, align 16
  %42 = load double, double* %6, align 8
  %43 = bitcast double %41 to i64
  %44 = and i64 %43, 9205357638345293824
  %45 = icmp ult i64 %44, 4485585228861014016
  %46 = fptosi double %41 to i32
  %47 = icmp eq i32 %46, 0
  %48 = and i1 %47, %45
  br i1 %48, label %200, label %49

49:                                               ; preds = %40
  %50 = fmul double %41, %41
  %51 = fmul double %41, %50
  %52 = fmul double %50, 0x3DE5D93A5ACFD57C
  %53 = fadd double %52, 0xBE5AE5E68A2B9CEB
  %54 = fmul double %50, %53
  %55 = fadd double %54, 0x3EC71DE357B1FE7D
  %56 = fmul double %50, %55
  %57 = fadd double %56, 0xBF2A01A019C161D5
  %58 = fmul double %50, %57
  %59 = fadd double %58, 0x3F8111111110F8A6
  %60 = fmul double %42, 5.000000e-01
  %61 = fmul double %51, %59
  %62 = fsub double %60, %61
  %63 = fmul double %50, %62
  %64 = fsub double %63, %42
  %65 = fmul double %51, 0x3FC5555555555549
  %66 = fadd double %65, %64
  %67 = fsub double %41, %66
  br label %200

68:                                               ; preds = %37
  %69 = load double, double* %5, align 16
  %70 = load double, double* %6, align 8
  %71 = bitcast double %69 to i64
  %72 = lshr i64 %71, 32
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 2147483647
  %75 = icmp ult i32 %74, 1044381696
  %76 = fptosi double %69 to i32
  %77 = icmp eq i32 %76, 0
  %78 = and i1 %77, %75
  br i1 %78, label %200, label %79

79:                                               ; preds = %68
  %80 = fmul double %69, %69
  %81 = fmul double %80, 0x3DA8FAE9BE8838D4
  %82 = fsub double 0x3E21EE9EBDB4B1C4, %81
  %83 = fmul double %80, %82
  %84 = fadd double %83, 0xBE927E4F809C52AD
  %85 = fmul double %80, %84
  %86 = fadd double %85, 0x3EFA01A019CB1590
  %87 = fmul double %80, %86
  %88 = fadd double %87, 0xBF56C16C16C15177
  %89 = fmul double %80, %88
  %90 = fadd double %89, 0x3FA555555555554C
  %91 = fmul double %80, %90
  %92 = icmp ult i32 %74, 1070805811
  br i1 %92, label %93, label %100

93:                                               ; preds = %79
  %94 = fmul double %80, 5.000000e-01
  %95 = fmul double %80, %91
  %96 = fmul double %69, %70
  %97 = fsub double %95, %96
  %98 = fsub double %97, %94
  %99 = fadd double %98, 1.000000e+00
  br label %200

100:                                              ; preds = %79
  %101 = icmp ugt i32 %74, 1072234496
  br i1 %101, label %107, label %102

102:                                              ; preds = %100
  %103 = add nsw i32 %74, -2097152
  %104 = zext i32 %103 to i64
  %105 = shl nuw i64 %104, 32
  %106 = bitcast i64 %105 to double
  br label %107

107:                                              ; preds = %102, %100
  %108 = phi double [ %106, %102 ], [ 2.812500e-01, %100 ]
  %109 = fmul double %80, 5.000000e-01
  %110 = fsub double %109, %108
  %111 = fsub double 1.000000e+00, %108
  %112 = fmul double %80, %91
  %113 = fmul double %69, %70
  %114 = fsub double %112, %113
  %115 = fsub double %110, %114
  %116 = fsub double %111, %115
  br label %200

117:                                              ; preds = %37
  %118 = load double, double* %5, align 16
  %119 = load double, double* %6, align 8
  %120 = bitcast double %118 to i64
  %121 = and i64 %120, 9205357638345293824
  %122 = icmp ult i64 %121, 4485585228861014016
  %123 = fptosi double %118 to i32
  %124 = icmp eq i32 %123, 0
  %125 = and i1 %124, %122
  br i1 %125, label %145, label %126

126:                                              ; preds = %117
  %127 = fmul double %118, %118
  %128 = fmul double %118, %127
  %129 = fmul double %127, 0x3DE5D93A5ACFD57C
  %130 = fadd double %129, 0xBE5AE5E68A2B9CEB
  %131 = fmul double %127, %130
  %132 = fadd double %131, 0x3EC71DE357B1FE7D
  %133 = fmul double %127, %132
  %134 = fadd double %133, 0xBF2A01A019C161D5
  %135 = fmul double %127, %134
  %136 = fadd double %135, 0x3F8111111110F8A6
  %137 = fmul double %119, 5.000000e-01
  %138 = fmul double %128, %136
  %139 = fsub double %137, %138
  %140 = fmul double %127, %139
  %141 = fsub double %140, %119
  %142 = fmul double %128, 0x3FC5555555555549
  %143 = fadd double %142, %141
  %144 = fsub double %118, %143
  br label %145

145:                                              ; preds = %117, %126
  %146 = phi double [ %144, %126 ], [ %118, %117 ]
  %147 = fsub double -0.000000e+00, %146
  br label %200

148:                                              ; preds = %37
  %149 = load double, double* %5, align 16
  %150 = load double, double* %6, align 8
  %151 = bitcast double %149 to i64
  %152 = lshr i64 %151, 32
  %153 = trunc i64 %152 to i32
  %154 = and i32 %153, 2147483647
  %155 = icmp ult i32 %154, 1044381696
  %156 = fptosi double %149 to i32
  %157 = icmp eq i32 %156, 0
  %158 = and i1 %157, %155
  br i1 %158, label %197, label %159

159:                                              ; preds = %148
  %160 = fmul double %149, %149
  %161 = fmul double %160, 0x3DA8FAE9BE8838D4
  %162 = fsub double 0x3E21EE9EBDB4B1C4, %161
  %163 = fmul double %160, %162
  %164 = fadd double %163, 0xBE927E4F809C52AD
  %165 = fmul double %160, %164
  %166 = fadd double %165, 0x3EFA01A019CB1590
  %167 = fmul double %160, %166
  %168 = fadd double %167, 0xBF56C16C16C15177
  %169 = fmul double %160, %168
  %170 = fadd double %169, 0x3FA555555555554C
  %171 = fmul double %160, %170
  %172 = icmp ult i32 %154, 1070805811
  br i1 %172, label %173, label %180

173:                                              ; preds = %159
  %174 = fmul double %160, 5.000000e-01
  %175 = fmul double %160, %171
  %176 = fmul double %149, %150
  %177 = fsub double %175, %176
  %178 = fsub double %177, %174
  %179 = fadd double %178, 1.000000e+00
  br label %197

180:                                              ; preds = %159
  %181 = icmp ugt i32 %154, 1072234496
  br i1 %181, label %187, label %182

182:                                              ; preds = %180
  %183 = add nsw i32 %154, -2097152
  %184 = zext i32 %183 to i64
  %185 = shl nuw i64 %184, 32
  %186 = bitcast i64 %185 to double
  br label %187

187:                                              ; preds = %182, %180
  %188 = phi double [ %186, %182 ], [ 2.812500e-01, %180 ]
  %189 = fmul double %160, 5.000000e-01
  %190 = fsub double %189, %188
  %191 = fsub double 1.000000e+00, %188
  %192 = fmul double %160, %171
  %193 = fmul double %149, %150
  %194 = fsub double %192, %193
  %195 = fsub double %190, %194
  %196 = fsub double %191, %195
  br label %197

197:                                              ; preds = %148, %173, %187
  %198 = phi double [ %179, %173 ], [ %196, %187 ], [ 1.000000e+00, %148 ]
  %199 = fsub double -0.000000e+00, %198
  br label %200

200:                                              ; preds = %107, %93, %68, %49, %40, %18, %12, %197, %145, %35
  %201 = phi double [ %36, %35 ], [ %199, %197 ], [ %147, %145 ], [ %32, %18 ], [ %0, %12 ], [ %67, %49 ], [ %41, %40 ], [ %99, %93 ], [ %116, %107 ], [ 1.000000e+00, %68 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %201
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm3tanEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %6 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp ult i32 %9, 1072243196
  %11 = bitcast [2 x double]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 16, i1 false)
  br i1 %10, label %12, label %14

12:                                               ; preds = %1
  %13 = tail call fastcc double @_ZN6fdlibm12_GLOBAL__N_112__kernel_tanEddi(double %0, double 0.000000e+00, i32 1)
  br label %26

14:                                               ; preds = %1
  %15 = icmp ugt i32 %9, 2146435071
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = fsub double %0, %0
  br label %26

18:                                               ; preds = %14
  %19 = call fastcc i32 @_ZN6fdlibm12_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %5)
  %20 = load double, double* %5, align 16
  %21 = load double, double* %6, align 8
  %22 = shl i32 %19, 1
  %23 = and i32 %22, 2
  %24 = sub nsw i32 1, %23
  %25 = call fastcc double @_ZN6fdlibm12_GLOBAL__N_112__kernel_tanEddi(double %20, double %21, i32 %24)
  br label %26

26:                                               ; preds = %18, %16, %12
  %27 = phi double [ %13, %12 ], [ %17, %16 ], [ %25, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %27
}

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc double @_ZN6fdlibm12_GLOBAL__N_112__kernel_tanEddi(double, double, i32) unnamed_addr #4 {
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 32
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp ult i32 %7, 1043333120
  br i1 %8, label %9, label %40

9:                                                ; preds = %3
  %10 = fptosi double %0 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %51

12:                                               ; preds = %9
  %13 = trunc i64 %4 to i32
  %14 = add nsw i32 %2, 1
  %15 = or i32 %14, %13
  %16 = or i32 %15, %7
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %12
  %19 = tail call double @llvm.fabs.f64(double %0)
  %20 = fdiv double 1.000000e+00, %19
  br label %120

21:                                               ; preds = %12
  %22 = icmp eq i32 %2, 1
  br i1 %22, label %120, label %23

23:                                               ; preds = %21
  %24 = fadd double %0, %1
  %25 = bitcast double %24 to i64
  %26 = and i64 %25, -4294967296
  %27 = bitcast i64 %26 to double
  %28 = fsub double %27, %0
  %29 = fsub double %1, %28
  %30 = fdiv double -1.000000e+00, %24
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -4294967296
  %33 = bitcast i64 %32 to double
  %34 = fmul double %27, %33
  %35 = fadd double %34, 1.000000e+00
  %36 = fmul double %29, %33
  %37 = fadd double %35, %36
  %38 = fmul double %30, %37
  %39 = fadd double %38, %33
  br label %120

40:                                               ; preds = %3
  %41 = icmp ugt i32 %7, 1072010279
  br i1 %41, label %42, label %51

42:                                               ; preds = %40
  %43 = icmp slt i32 %6, 0
  %44 = fsub double -0.000000e+00, %0
  %45 = fsub double -0.000000e+00, %1
  %46 = select i1 %43, double %44, double %0
  %47 = select i1 %43, double %45, double %1
  %48 = fsub double 0x3FE921FB54442D18, %46
  %49 = fsub double 0x3C81A62633145C07, %47
  %50 = fadd double %48, %49
  br label %51

51:                                               ; preds = %9, %42, %40
  %52 = phi i1 [ true, %42 ], [ false, %40 ], [ false, %9 ]
  %53 = phi double [ %50, %42 ], [ %0, %40 ], [ %0, %9 ]
  %54 = phi double [ 0.000000e+00, %42 ], [ %1, %40 ], [ %1, %9 ]
  %55 = fmul double %53, %53
  %56 = fmul double %55, %55
  %57 = fmul double %56, 0x3EF375CBDB605373
  %58 = fsub double 0x3F147E88A03792A6, %57
  %59 = fmul double %56, %58
  %60 = fadd double %59, 0x3F4344D8F2F26501
  %61 = fmul double %56, %60
  %62 = fadd double %61, 0x3F6D6D22C9560328
  %63 = fmul double %56, %62
  %64 = fadd double %63, 0x3F9664F48406D637
  %65 = fmul double %56, %64
  %66 = fadd double %65, 0x3FC111111110FE7A
  %67 = fmul double %56, 0x3EFB2A7074BF7AD4
  %68 = fadd double %67, 0x3F12B80F32F0A7E9
  %69 = fmul double %56, %68
  %70 = fadd double %69, 0x3F3026F71A8D1068
  %71 = fmul double %56, %70
  %72 = fadd double %71, 0x3F57DBC8FEE08315
  %73 = fmul double %56, %72
  %74 = fadd double %73, 0x3F8226E3E96E8493
  %75 = fmul double %56, %74
  %76 = fadd double %75, 0x3FABA1BA1BB341FE
  %77 = fmul double %55, %76
  %78 = fmul double %53, %55
  %79 = fadd double %66, %77
  %80 = fmul double %78, %79
  %81 = fadd double %54, %80
  %82 = fmul double %55, %81
  %83 = fadd double %54, %82
  %84 = fmul double %78, 0x3FD5555555555563
  %85 = fadd double %84, %83
  %86 = fadd double %53, %85
  br i1 %52, label %87, label %102

87:                                               ; preds = %51
  %88 = sitofp i32 %2 to double
  %89 = lshr i64 %4, 62
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 2
  %92 = sub nsw i32 1, %91
  %93 = sitofp i32 %92 to double
  %94 = fmul double %86, %86
  %95 = fadd double %86, %88
  %96 = fdiv double %94, %95
  %97 = fsub double %96, %85
  %98 = fsub double %53, %97
  %99 = fmul double %98, 2.000000e+00
  %100 = fsub double %88, %99
  %101 = fmul double %100, %93
  br label %120

102:                                              ; preds = %51
  %103 = icmp eq i32 %2, 1
  br i1 %103, label %120, label %104

104:                                              ; preds = %102
  %105 = bitcast double %86 to i64
  %106 = and i64 %105, -4294967296
  %107 = bitcast i64 %106 to double
  %108 = fsub double %107, %53
  %109 = fsub double %85, %108
  %110 = fdiv double -1.000000e+00, %86
  %111 = bitcast double %110 to i64
  %112 = and i64 %111, -4294967296
  %113 = bitcast i64 %112 to double
  %114 = fmul double %107, %113
  %115 = fadd double %114, 1.000000e+00
  %116 = fmul double %109, %113
  %117 = fadd double %115, %116
  %118 = fmul double %110, %117
  %119 = fadd double %118, %113
  br label %120

120:                                              ; preds = %21, %102, %18, %23, %104, %87
  %121 = phi double [ %101, %87 ], [ %119, %104 ], [ %20, %18 ], [ %39, %23 ], [ %86, %102 ], [ %0, %21 ]
  ret double %121
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm4coshEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ult i32 %5, 1071001155
  br i1 %6, label %7, label %17

7:                                                ; preds = %1
  %8 = tail call double @llvm.fabs.f64(double %0)
  %9 = tail call double @_ZN6fdlibm5expm1Ed(double %8)
  %10 = fadd double %9, 1.000000e+00
  %11 = icmp ult i32 %5, 1015021568
  br i1 %11, label %46, label %12

12:                                               ; preds = %7
  %13 = fmul double %9, %9
  %14 = fadd double %10, %10
  %15 = fdiv double %13, %14
  %16 = fadd double %15, 1.000000e+00
  br label %46

17:                                               ; preds = %1
  %18 = icmp ult i32 %5, 1077280768
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = tail call double @llvm.fabs.f64(double %0)
  %21 = tail call double @_ZN6fdlibm3expEd(double %20)
  %22 = fmul double %21, 5.000000e-01
  %23 = fdiv double 5.000000e-01, %21
  %24 = fadd double %22, %23
  br label %46

25:                                               ; preds = %17
  %26 = icmp ult i32 %5, 1082535490
  %27 = tail call double @llvm.fabs.f64(double %0)
  br i1 %26, label %28, label %31

28:                                               ; preds = %25
  %29 = tail call double @_ZN6fdlibm3expEd(double %27)
  %30 = fmul double %29, 5.000000e-01
  br label %46

31:                                               ; preds = %25
  %32 = fcmp ugt double %27, 0x408633CE8FB9F87D
  br i1 %32, label %38, label %33

33:                                               ; preds = %31
  %34 = fmul double %27, 5.000000e-01
  %35 = tail call double @_ZN6fdlibm3expEd(double %34)
  %36 = fmul double %35, 5.000000e-01
  %37 = fmul double %35, %36
  br label %46

38:                                               ; preds = %31
  %39 = icmp ugt i32 %5, 2146435071
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = fmul double %0, %0
  br label %46

42:                                               ; preds = %38
  %43 = load volatile double, double* @_ZZN6fdlibm4coshEdE4huge, align 8
  %44 = load volatile double, double* @_ZZN6fdlibm4coshEdE4huge, align 8
  %45 = fmul double %43, %44
  br label %46

46:                                               ; preds = %12, %7, %42, %40, %33, %28, %19
  %47 = phi double [ %24, %19 ], [ %30, %28 ], [ %37, %33 ], [ %41, %40 ], [ %45, %42 ], [ %16, %12 ], [ %10, %7 ]
  ret double %47
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm3powEdd(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = lshr i64 %3, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %3 to i32
  %8 = lshr i64 %4, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %4 to i32
  %11 = and i32 %6, 2147483647
  %12 = and i32 %9, 2147483647
  %13 = or i32 %12, %10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %436, label %15

15:                                               ; preds = %2
  %16 = icmp ugt i32 %11, 2146435072
  br i1 %16, label %27, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %11, 2146435072
  %19 = icmp ne i32 %7, 0
  %20 = and i1 %19, %18
  %21 = icmp ugt i32 %12, 2146435072
  %22 = or i1 %20, %21
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = icmp eq i32 %12, 2146435072
  %25 = icmp ne i32 %10, 0
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17, %15
  %28 = fadd double %0, %1
  br label %436

29:                                               ; preds = %23
  %30 = icmp slt i32 %6, 0
  br i1 %30, label %31, label %56

31:                                               ; preds = %29
  %32 = icmp ugt i32 %12, 1128267775
  br i1 %32, label %56, label %33

33:                                               ; preds = %31
  %34 = icmp ugt i32 %12, 1072693247
  br i1 %34, label %35, label %56

35:                                               ; preds = %33
  %36 = lshr i32 %12, 20
  %37 = icmp ugt i32 %12, 1094713343
  br i1 %37, label %38, label %46

38:                                               ; preds = %35
  %39 = sub nuw nsw i32 1075, %36
  %40 = lshr i32 %10, %39
  %41 = shl i32 %40, %39
  %42 = icmp eq i32 %41, %10
  br i1 %42, label %43, label %56

43:                                               ; preds = %38
  %44 = and i32 %40, 1
  %45 = sub nuw nsw i32 2, %44
  br label %56

46:                                               ; preds = %35
  %47 = icmp eq i32 %10, 0
  br i1 %47, label %48, label %97

48:                                               ; preds = %46
  %49 = sub nsw i32 1043, %36
  %50 = lshr i32 %12, %49
  %51 = shl i32 %50, %49
  %52 = icmp eq i32 %51, %12
  br i1 %52, label %53, label %59

53:                                               ; preds = %48
  %54 = and i32 %50, 1
  %55 = sub nuw nsw i32 2, %54
  br label %59

56:                                               ; preds = %31, %43, %38, %33, %29
  %57 = phi i32 [ %45, %43 ], [ 0, %38 ], [ 0, %33 ], [ 0, %29 ], [ 2, %31 ]
  %58 = icmp eq i32 %10, 0
  br i1 %58, label %59, label %97

59:                                               ; preds = %53, %48, %56
  %60 = phi i32 [ %57, %56 ], [ 0, %48 ], [ %55, %53 ]
  br i1 %24, label %61, label %76

61:                                               ; preds = %59
  %62 = add nsw i32 %11, -1072693248
  %63 = or i32 %62, %7
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = fsub double %1, %1
  br label %436

67:                                               ; preds = %61
  %68 = icmp ugt i32 %11, 1072693247
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = icmp sgt i32 %9, -1
  %71 = select i1 %70, double %1, double 0.000000e+00
  br label %436

72:                                               ; preds = %67
  %73 = icmp slt i32 %9, 0
  %74 = fsub double -0.000000e+00, %1
  %75 = select i1 %73, double %74, double 0.000000e+00
  br label %436

76:                                               ; preds = %59
  %77 = icmp eq i32 %12, 1072693248
  br i1 %77, label %78, label %87

78:                                               ; preds = %76
  %79 = icmp slt i32 %9, 0
  br i1 %79, label %80, label %436

80:                                               ; preds = %78
  %81 = fcmp une double %0, 0.000000e+00
  br i1 %81, label %82, label %84

82:                                               ; preds = %80
  %83 = fdiv double 1.000000e+00, %0
  br label %436

84:                                               ; preds = %80
  %85 = icmp sgt i64 %3, -1
  %86 = select i1 %85, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %436

87:                                               ; preds = %76
  %88 = icmp eq i32 %9, 1073741824
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = fmul double %0, %0
  br label %436

91:                                               ; preds = %87
  %92 = icmp eq i32 %9, 1071644672
  %93 = icmp sgt i32 %6, -1
  %94 = and i1 %93, %92
  br i1 %94, label %95, label %97

95:                                               ; preds = %91
  %96 = tail call double @sqrt(double %0) #7
  br label %436

97:                                               ; preds = %46, %91, %56
  %98 = phi i32 [ %60, %91 ], [ %57, %56 ], [ 0, %46 ]
  %99 = tail call double @llvm.fabs.f64(double %0)
  %100 = bitcast double %99 to i64
  %101 = icmp eq i32 %7, 0
  br i1 %101, label %102, label %125

102:                                              ; preds = %97
  %103 = icmp eq i32 %11, 0
  %104 = or i32 %11, 1073741824
  %105 = icmp eq i32 %104, 2146435072
  %106 = or i1 %103, %105
  br i1 %106, label %107, label %125

107:                                              ; preds = %102
  %108 = icmp slt i32 %9, 0
  br i1 %108, label %109, label %115

109:                                              ; preds = %107
  %110 = fcmp une double %0, 0.000000e+00
  %111 = fdiv double 1.000000e+00, %99
  %112 = icmp sgt i64 %100, -1
  %113 = select i1 %112, double 0x7FF0000000000000, double 0xFFF0000000000000
  %114 = select i1 %110, double %111, double %113
  br label %115

115:                                              ; preds = %109, %107
  %116 = phi double [ %99, %107 ], [ %114, %109 ]
  br i1 %30, label %117, label %436

117:                                              ; preds = %115
  %118 = add nsw i32 %11, -1072693248
  %119 = or i32 %98, %118
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %436, label %121

121:                                              ; preds = %117
  %122 = icmp eq i32 %98, 1
  %123 = fsub double -0.000000e+00, %116
  %124 = select i1 %122, double %123, double %116
  ret double %124

125:                                              ; preds = %102, %97
  %126 = ashr i32 %6, 31
  %127 = add nsw i32 %126, 1
  %128 = or i32 %98, %127
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %436, label %130

130:                                              ; preds = %125
  %131 = add nsw i32 %98, -1
  %132 = or i32 %131, %127
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, double -1.000000e+00, double 1.000000e+00
  %135 = icmp ugt i32 %12, 1105199104
  br i1 %135, label %136, label %181

136:                                              ; preds = %130
  %137 = icmp ugt i32 %12, 1139802112
  br i1 %137, label %138, label %146

138:                                              ; preds = %136
  %139 = icmp ult i32 %11, 1072693248
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  %141 = icmp slt i32 %9, 0
  %142 = select i1 %141, double 0x7FF0000000000000, double 0.000000e+00
  br label %436

143:                                              ; preds = %138
  %144 = icmp sgt i32 %9, 0
  %145 = select i1 %144, double 0x7FF0000000000000, double 0.000000e+00
  br label %436

146:                                              ; preds = %136
  %147 = icmp ult i32 %11, 1072693247
  br i1 %147, label %148, label %155

148:                                              ; preds = %146
  %149 = icmp slt i32 %9, 0
  %150 = fmul double %134, 1.000000e+300
  %151 = fmul double %150, 1.000000e+300
  %152 = fmul double %134, 1.000000e-300
  %153 = fmul double %152, 1.000000e-300
  %154 = select i1 %149, double %151, double %153
  br label %436

155:                                              ; preds = %146
  %156 = icmp ugt i32 %11, 1072693248
  br i1 %156, label %157, label %164

157:                                              ; preds = %155
  %158 = icmp sgt i32 %9, 0
  %159 = fmul double %134, 1.000000e+300
  %160 = fmul double %159, 1.000000e+300
  %161 = fmul double %134, 1.000000e-300
  %162 = fmul double %161, 1.000000e-300
  %163 = select i1 %158, double %160, double %162
  br label %436

164:                                              ; preds = %155
  %165 = fadd double %99, -1.000000e+00
  %166 = fmul double %165, %165
  %167 = fmul double %165, 2.500000e-01
  %168 = fsub double 0x3FD5555555555555, %167
  %169 = fmul double %165, %168
  %170 = fsub double 5.000000e-01, %169
  %171 = fmul double %166, %170
  %172 = fmul double %165, 0x3FF7154760000000
  %173 = fmul double %165, 0x3E54AE0BF85DDF44
  %174 = fmul double %171, 0x3FF71547652B82FE
  %175 = fsub double %173, %174
  %176 = fadd double %172, %175
  %177 = bitcast double %176 to i64
  %178 = and i64 %177, -4294967296
  %179 = bitcast i64 %178 to double
  %180 = fsub double %179, %172
  br label %298

181:                                              ; preds = %130
  %182 = icmp ult i32 %11, 1048576
  br i1 %182, label %183, label %188

183:                                              ; preds = %181
  %184 = fmul double %99, 0x4340000000000000
  %185 = bitcast double %184 to i64
  %186 = lshr i64 %185, 32
  %187 = trunc i64 %186 to i32
  br label %188

188:                                              ; preds = %183, %181
  %189 = phi i64 [ %185, %183 ], [ %100, %181 ]
  %190 = phi i32 [ -1076, %183 ], [ -1023, %181 ]
  %191 = phi i32 [ %187, %183 ], [ %11, %181 ]
  %192 = ashr i32 %191, 20
  %193 = add nsw i32 %190, %192
  %194 = and i32 %191, 1048575
  %195 = or i32 %194, 1072693248
  %196 = icmp ult i32 %194, 235663
  br i1 %196, label %202, label %197

197:                                              ; preds = %188
  %198 = icmp ult i32 %194, 767610
  br i1 %198, label %202, label %199

199:                                              ; preds = %197
  %200 = add nsw i32 %193, 1
  %201 = add nsw i32 %195, -1048576
  br label %202

202:                                              ; preds = %197, %188, %199
  %203 = phi i32 [ 0, %199 ], [ 0, %188 ], [ 1, %197 ]
  %204 = phi i32 [ %200, %199 ], [ %193, %188 ], [ %193, %197 ]
  %205 = phi i32 [ %201, %199 ], [ %195, %188 ], [ %195, %197 ]
  %206 = and i64 %189, 4294967295
  %207 = zext i32 %205 to i64
  %208 = shl nuw i64 %207, 32
  %209 = or i64 %208, %206
  %210 = bitcast i64 %209 to double
  %211 = zext i32 %203 to i64
  %212 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3powEddE2bp, i64 0, i64 %211
  %213 = load double, double* %212, align 8
  %214 = fsub double %210, %213
  %215 = fadd double %213, %210
  %216 = fcmp une double %215, 0.000000e+00
  br i1 %216, label %217, label %219

217:                                              ; preds = %202
  %218 = fdiv double 1.000000e+00, %215
  br label %223

219:                                              ; preds = %202
  %220 = bitcast double %215 to i64
  %221 = icmp sgt i64 %220, -1
  %222 = select i1 %221, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %223

223:                                              ; preds = %219, %217
  %224 = phi double [ %218, %217 ], [ %222, %219 ]
  %225 = fmul double %214, %224
  %226 = bitcast double %225 to i64
  %227 = and i64 %226, -4294967296
  %228 = bitcast i64 %227 to double
  %229 = ashr i32 %205, 1
  %230 = or i32 %229, 536870912
  %231 = shl nuw nsw i32 %203, 18
  %232 = or i32 %231, 524288
  %233 = add nsw i32 %232, %230
  %234 = zext i32 %233 to i64
  %235 = shl nuw i64 %234, 32
  %236 = bitcast i64 %235 to double
  %237 = fsub double %236, %213
  %238 = fsub double %210, %237
  %239 = fmul double %236, %228
  %240 = fsub double %214, %239
  %241 = fmul double %238, %228
  %242 = fsub double %240, %241
  %243 = fmul double %224, %242
  %244 = fmul double %225, %225
  %245 = fmul double %244, %244
  %246 = fmul double %244, 0x3FCA7E284A454EEF
  %247 = fadd double %246, 0x3FCD864A93C9DB65
  %248 = fmul double %244, %247
  %249 = fadd double %248, 0x3FD17460A91D4101
  %250 = fmul double %244, %249
  %251 = fadd double %250, 0x3FD55555518F264D
  %252 = fmul double %244, %251
  %253 = fadd double %252, 0x3FDB6DB6DB6FABFF
  %254 = fmul double %244, %253
  %255 = fadd double %254, 0x3FE3333333333303
  %256 = fmul double %245, %255
  %257 = fadd double %225, %228
  %258 = fmul double %257, %243
  %259 = fadd double %258, %256
  %260 = fmul double %228, %228
  %261 = fadd double %260, 3.000000e+00
  %262 = fadd double %261, %259
  %263 = bitcast double %262 to i64
  %264 = and i64 %263, -4294967296
  %265 = bitcast i64 %264 to double
  %266 = fadd double %265, -3.000000e+00
  %267 = fsub double %266, %260
  %268 = fsub double %259, %267
  %269 = fmul double %228, %265
  %270 = fmul double %243, %265
  %271 = fmul double %225, %268
  %272 = fadd double %270, %271
  %273 = fadd double %269, %272
  %274 = bitcast double %273 to i64
  %275 = and i64 %274, -4294967296
  %276 = bitcast i64 %275 to double
  %277 = fsub double %276, %269
  %278 = fsub double %272, %277
  %279 = fmul double %276, 0x3FEEC709E0000000
  %280 = fmul double %276, 0x3E3E2FE0145B01F5
  %281 = fmul double %278, 0x3FEEC709DC3A03FD
  %282 = fsub double %281, %280
  %283 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3powEddE4dp_l, i64 0, i64 %211
  %284 = load double, double* %283, align 8
  %285 = fadd double %284, %282
  %286 = sitofp i32 %204 to double
  %287 = fadd double %279, %285
  %288 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN6fdlibm3powEddE4dp_h, i64 0, i64 %211
  %289 = load double, double* %288, align 8
  %290 = fadd double %289, %287
  %291 = fadd double %290, %286
  %292 = bitcast double %291 to i64
  %293 = and i64 %292, -4294967296
  %294 = bitcast i64 %293 to double
  %295 = fsub double %294, %286
  %296 = fsub double %295, %289
  %297 = fsub double %296, %279
  br label %298

298:                                              ; preds = %223, %164
  %299 = phi double [ %297, %223 ], [ %180, %164 ]
  %300 = phi double [ %285, %223 ], [ %175, %164 ]
  %301 = phi double [ %294, %223 ], [ %179, %164 ]
  %302 = fsub double %300, %299
  %303 = and i64 %4, -4294967296
  %304 = bitcast i64 %303 to double
  %305 = fsub double %1, %304
  %306 = fmul double %305, %301
  %307 = fmul double %302, %1
  %308 = fadd double %306, %307
  %309 = fmul double %301, %304
  %310 = fadd double %309, %308
  %311 = bitcast double %310 to i64
  %312 = lshr i64 %311, 32
  %313 = trunc i64 %312 to i32
  %314 = trunc i64 %311 to i32
  %315 = icmp sgt i32 %313, 1083179007
  br i1 %315, label %316, label %330

316:                                              ; preds = %298
  %317 = add nsw i32 %313, -1083179008
  %318 = or i32 %317, %314
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %323, label %320

320:                                              ; preds = %316
  %321 = fmul double %134, 1.000000e+300
  %322 = fmul double %321, 1.000000e+300
  br label %436

323:                                              ; preds = %316
  %324 = fadd double %308, 0x3C971547652B82FE
  %325 = fsub double %310, %309
  %326 = fcmp ogt double %324, %325
  br i1 %326, label %327, label %346

327:                                              ; preds = %323
  %328 = fmul double %134, 1.000000e+300
  %329 = fmul double %328, 1.000000e+300
  br label %436

330:                                              ; preds = %298
  %331 = and i32 %313, 2147482624
  %332 = icmp ugt i32 %331, 1083231231
  br i1 %332, label %333, label %346

333:                                              ; preds = %330
  %334 = add nsw i32 %313, 1064252416
  %335 = or i32 %334, %314
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %340, label %337

337:                                              ; preds = %333
  %338 = fmul double %134, 1.000000e-300
  %339 = fmul double %338, 1.000000e-300
  br label %436

340:                                              ; preds = %333
  %341 = fsub double %310, %309
  %342 = fcmp ugt double %308, %341
  br i1 %342, label %346, label %343

343:                                              ; preds = %340
  %344 = fmul double %134, 1.000000e-300
  %345 = fmul double %344, 1.000000e-300
  br label %436

346:                                              ; preds = %340, %330, %323
  %347 = and i32 %313, 2147483647
  %348 = icmp ugt i32 %347, 1071644672
  br i1 %348, label %349, label %372

349:                                              ; preds = %346
  %350 = lshr i32 %347, 20
  %351 = add nsw i32 %350, -1022
  %352 = lshr i32 1048576, %351
  %353 = add nsw i32 %352, %313
  %354 = lshr i32 %353, 20
  %355 = and i32 %354, 2047
  %356 = add nsw i32 %355, -1023
  %357 = ashr i32 -1048576, %356
  %358 = and i32 %357, %353
  %359 = zext i32 %358 to i64
  %360 = shl nuw i64 %359, 32
  %361 = bitcast i64 %360 to double
  %362 = and i32 %353, 1048575
  %363 = or i32 %362, 1048576
  %364 = sub nsw i32 1043, %355
  %365 = lshr i32 %363, %364
  %366 = icmp slt i32 %313, 0
  %367 = sub nsw i32 0, %365
  %368 = select i1 %366, i32 %367, i32 %365
  %369 = fsub double %309, %361
  %370 = fadd double %308, %369
  %371 = bitcast double %370 to i64
  br label %372

372:                                              ; preds = %349, %346
  %373 = phi i64 [ %371, %349 ], [ %311, %346 ]
  %374 = phi double [ %369, %349 ], [ %309, %346 ]
  %375 = phi i32 [ %368, %349 ], [ 0, %346 ]
  %376 = and i64 %373, -4294967296
  %377 = bitcast i64 %376 to double
  %378 = fmul double %377, 0x3FE62E4300000000
  %379 = fsub double %377, %374
  %380 = fsub double %308, %379
  %381 = fmul double %380, 0x3FE62E42FEFA39EF
  %382 = fmul double %377, 0x3E205C610CA86C39
  %383 = fsub double %381, %382
  %384 = fadd double %378, %383
  %385 = fsub double %384, %378
  %386 = fsub double %383, %385
  %387 = fmul double %384, %384
  %388 = fmul double %387, 0x3E66376972BEA4D0
  %389 = fadd double %388, 0xBEBBBD41C5D26BF1
  %390 = fmul double %387, %389
  %391 = fadd double %390, 0x3F11566AAF25DE2C
  %392 = fmul double %387, %391
  %393 = fadd double %392, 0xBF66C16C16BEBD93
  %394 = fmul double %387, %393
  %395 = fadd double %394, 0x3FC555555555553E
  %396 = fmul double %387, %395
  %397 = fsub double %384, %396
  %398 = fmul double %384, %397
  %399 = fadd double %397, -2.000000e+00
  %400 = fmul double %384, %386
  %401 = fadd double %386, %400
  %402 = fsub double %399, %401
  %403 = fcmp une double %402, 0.000000e+00
  br i1 %403, label %404, label %406

404:                                              ; preds = %372
  %405 = fdiv double %398, %402
  br label %414

406:                                              ; preds = %372
  %407 = fcmp ueq double %398, 0.000000e+00
  br i1 %407, label %414, label %408

408:                                              ; preds = %406
  %409 = fcmp oge double %398, 0.000000e+00
  %410 = bitcast double %402 to i64
  %411 = icmp slt i64 %410, 0
  %412 = xor i1 %409, %411
  %413 = select i1 %412, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %414

414:                                              ; preds = %404, %406, %408
  %415 = phi double [ %413, %408 ], [ %405, %404 ], [ 0x7FF8000000000000, %406 ]
  %416 = fsub double %384, %415
  %417 = fadd double %416, 1.000000e+00
  %418 = bitcast double %417 to i64
  %419 = lshr i64 %418, 32
  %420 = trunc i64 %419 to i32
  %421 = shl i32 %375, 20
  %422 = add nsw i32 %421, %420
  %423 = icmp slt i32 %422, 1048576
  br i1 %423, label %424, label %427

424:                                              ; preds = %414
  %425 = tail call double @scalbn(double %417, i32 %375) #7
  %426 = bitcast double %425 to i64
  br label %432

427:                                              ; preds = %414
  %428 = and i64 %418, 4294967295
  %429 = zext i32 %422 to i64
  %430 = shl nuw i64 %429, 32
  %431 = or i64 %430, %428
  br label %432

432:                                              ; preds = %427, %424
  %433 = phi i64 [ %426, %424 ], [ %431, %427 ]
  %434 = bitcast i64 %433 to double
  %435 = fmul double %134, %434
  br label %436

436:                                              ; preds = %115, %117, %125, %82, %84, %78, %2, %432, %343, %337, %327, %320, %157, %148, %143, %140, %95, %89, %72, %69, %65, %27
  %437 = phi double [ %28, %27 ], [ %66, %65 ], [ %71, %69 ], [ %75, %72 ], [ %90, %89 ], [ %96, %95 ], [ %142, %140 ], [ %145, %143 ], [ %154, %148 ], [ %163, %157 ], [ %322, %320 ], [ %329, %327 ], [ %435, %432 ], [ %339, %337 ], [ %345, %343 ], [ 1.000000e+00, %2 ], [ %0, %78 ], [ %83, %82 ], [ %86, %84 ], [ 0x7FF4000000000000, %125 ], [ %116, %115 ], [ 0x7FF4000000000000, %117 ]
  ret double %437
}

; Function Attrs: nounwind
declare double @scalbn(double, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm4sinhEd(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double -5.000000e-01, double 5.000000e-01
  %4 = tail call double @llvm.fabs.f64(double %0)
  %5 = fcmp olt double %4, 2.200000e+01
  br i1 %5, label %6, label %24

6:                                                ; preds = %1
  %7 = fcmp olt double %4, 0x3E30000000000000
  br i1 %7, label %38, label %8

8:                                                ; preds = %6
  %9 = tail call double @_ZN6fdlibm5expm1Ed(double %4)
  %10 = fcmp olt double %4, 1.000000e+00
  br i1 %10, label %11, label %17

11:                                               ; preds = %8
  %12 = fmul double %9, 2.000000e+00
  %13 = fmul double %9, %9
  %14 = fadd double %9, 1.000000e+00
  %15 = fdiv double %13, %14
  %16 = fsub double %12, %15
  br label %21

17:                                               ; preds = %8
  %18 = fadd double %9, 1.000000e+00
  %19 = fdiv double %9, %18
  %20 = fadd double %9, %19
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi double [ %16, %11 ], [ %20, %17 ]
  %23 = fmul double %3, %22
  br label %38

24:                                               ; preds = %1
  %25 = fcmp olt double %4, 0x40862E4200000000
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = tail call double @_ZN6fdlibm3expEd(double %4)
  %28 = fmul double %3, %27
  br label %38

29:                                               ; preds = %24
  %30 = fcmp ugt double %4, 0x408633CE8FB9F87D
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = fmul double %4, 5.000000e-01
  %33 = tail call double @_ZN6fdlibm3expEd(double %32)
  %34 = fmul double %3, %33
  %35 = fmul double %33, %34
  br label %38

36:                                               ; preds = %29
  %37 = fmul double %0, 0x7FAC7B1F3CAC7433
  br label %38

38:                                               ; preds = %6, %36, %31, %26, %21
  %39 = phi double [ %23, %21 ], [ %28, %26 ], [ %35, %31 ], [ %37, %36 ], [ %0, %6 ]
  ret double %39
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6fdlibm4tanhEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 2146435071
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = icmp sgt i32 %4, -1
  %9 = fdiv double 1.000000e+00, %0
  br i1 %8, label %10, label %12

10:                                               ; preds = %7
  %11 = fadd double %9, 1.000000e+00
  br label %47

12:                                               ; preds = %7
  %13 = fadd double %9, -1.000000e+00
  br label %47

14:                                               ; preds = %1
  %15 = icmp ult i32 %5, 1077280768
  br i1 %15, label %16, label %39

16:                                               ; preds = %14
  %17 = icmp ult i32 %5, 1043333120
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = fadd double %0, 1.000000e+300
  %20 = fcmp ogt double %19, 1.000000e+00
  br i1 %20, label %47, label %21

21:                                               ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %0)
  br label %32

23:                                               ; preds = %16
  %24 = icmp ugt i32 %5, 1072693247
  %25 = tail call double @llvm.fabs.f64(double %0)
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = fmul double %25, 2.000000e+00
  %28 = tail call double @_ZN6fdlibm5expm1Ed(double %27)
  %29 = fadd double %28, 2.000000e+00
  %30 = fdiv double 2.000000e+00, %29
  %31 = fsub double 1.000000e+00, %30
  br label %42

32:                                               ; preds = %21, %23
  %33 = phi double [ %22, %21 ], [ %25, %23 ]
  %34 = fmul double %33, -2.000000e+00
  %35 = tail call double @_ZN6fdlibm5expm1Ed(double %34)
  %36 = fsub double -0.000000e+00, %35
  %37 = fadd double %35, 2.000000e+00
  %38 = fdiv double %36, %37
  br label %42

39:                                               ; preds = %14
  %40 = load volatile double, double* @_ZZN6fdlibm4tanhEdE4tiny, align 8
  %41 = fsub double 1.000000e+00, %40
  br label %42

42:                                               ; preds = %26, %32, %39
  %43 = phi double [ %31, %26 ], [ %38, %32 ], [ %41, %39 ]
  %44 = icmp sgt i32 %4, -1
  %45 = fsub double -0.000000e+00, %43
  %46 = select i1 %44, double %43, double %45
  br label %47

47:                                               ; preds = %18, %42, %12, %10
  %48 = phi double [ %11, %10 ], [ %13, %12 ], [ %46, %42 ], [ %0, %18 ]
  ret double %48
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6fdlibm4powfEff(float, float) local_unnamed_addr #0 {
  %3 = fpext float %0 to double
  %4 = fpext float %1 to double
  %5 = tail call double @_ZN6fdlibm3powEdd(double %3, double %4)
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6fdlibm4expfEf(float) local_unnamed_addr #0 {
  %2 = fpext float %0 to double
  %3 = tail call double @_ZN6fdlibm3expEd(double %2)
  %4 = fptrunc double %3 to float
  ret float %4
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden float @_ZN6fdlibm6log10fEf(float) local_unnamed_addr #4 {
  %2 = fpext float %0 to double
  %3 = bitcast double %2 to i64
  %4 = lshr i64 %3, 32
  %5 = trunc i64 %4 to i32
  %6 = trunc i64 %3 to i32
  %7 = icmp slt i32 %5, 1048576
  br i1 %7, label %8, label %20

8:                                                ; preds = %1
  %9 = and i32 %5, 2147483647
  %10 = or i32 %9, %6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %54, label %12

12:                                               ; preds = %8
  %13 = icmp slt i32 %5, 0
  br i1 %13, label %54, label %14

14:                                               ; preds = %12
  %15 = fmul double %2, 0x4350000000000000
  %16 = bitcast double %15 to i64
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %16 to i32
  br label %20

20:                                               ; preds = %14, %1
  %21 = phi double [ %15, %14 ], [ %2, %1 ]
  %22 = phi i32 [ %18, %14 ], [ %5, %1 ]
  %23 = phi i32 [ %19, %14 ], [ %6, %1 ]
  %24 = phi i32 [ -54, %14 ], [ 0, %1 ]
  %25 = icmp sgt i32 %22, 2146435071
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = fadd double %21, %21
  br label %54

28:                                               ; preds = %20
  %29 = icmp eq i32 %22, 1072693248
  %30 = icmp eq i32 %23, 0
  %31 = and i1 %29, %30
  br i1 %31, label %54, label %32

32:                                               ; preds = %28
  %33 = ashr i32 %22, 20
  %34 = add nsw i32 %33, -1023
  %35 = add nsw i32 %34, %24
  %36 = lshr i32 %35, 31
  %37 = and i32 %22, 1048575
  %38 = shl nuw nsw i32 %36, 20
  %39 = or i32 %38, %37
  %40 = xor i32 %39, 1072693248
  %41 = add nsw i32 %36, %35
  %42 = sitofp i32 %41 to double
  %43 = zext i32 %40 to i64
  %44 = shl nuw nsw i64 %43, 32
  %45 = zext i32 %23 to i64
  %46 = or i64 %44, %45
  %47 = bitcast i64 %46 to double
  %48 = fmul double %42, 0x3D59FEF311F12B36
  %49 = tail call double @_ZN6fdlibm3logEd(double %47) #7
  %50 = fmul double %49, 0x3FDBCB7B1526E50E
  %51 = fadd double %48, %50
  %52 = fmul double %42, 0x3FD34413509F6000
  %53 = fadd double %52, %51
  br label %54

54:                                               ; preds = %8, %12, %26, %28, %32
  %55 = phi double [ %27, %26 ], [ %53, %32 ], [ 0.000000e+00, %28 ], [ 0xFFF0000000000000, %8 ], [ 0x7FF8000000000000, %12 ]
  %56 = fptrunc double %55 to float
  ret float %56
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6fdlibm4sinfEd(double) local_unnamed_addr #0 {
  %2 = tail call double @_ZN6fdlibm3sinEd(double %0)
  %3 = fptrunc double %2 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6fdlibm5asinfEd(double) local_unnamed_addr #0 {
  %2 = tail call double @_ZN6fdlibm4asinEd(double %0)
  %3 = fptrunc double %2 to float
  ret float %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
