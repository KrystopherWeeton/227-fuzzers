; ModuleID = '../../third_party/skia/src/core/SkImageFilterTypes.cpp'
source_filename = "../../third_party/skia/src/core/SkImageFilterTypes.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skif::Mapping" = type { %class.SkMatrix, %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.skif::ParameterSpace" = type { %struct.SkPoint }
%struct.SkPoint = type { float, float }
%struct.SkSize = type { float, float }
%class.SkImageFilter_Base = type <{ %class.SkImageFilter.base, [4 x i8], %class.SkAutoSTArray, i8, [3 x i8], %"class.SkImageFilter_Base::CropRect", i32, [4 x i8] }>
%class.SkImageFilter.base = type { %class.SkFlattenable.base }
%class.SkAutoSTArray = type { i32, %class.sk_sp*, [16 x i8] }
%class.sk_sp = type { %class.SkImageFilter* }
%"class.SkImageFilter_Base::CropRect" = type { %struct.SkRect, i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkIPoint = type { i32, i32 }
%"struct.skif::IVector" = type { i32, i32 }
%"struct.skif::Vector" = type { float, float }
%struct.SkISize = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skif7Mapping12DecomposeCTMERK8SkMatrixPK13SkImageFilterRKNS_14ParameterSpaceI7SkPointEE(%"class.skif::Mapping"* noalias nocapture sret, %class.SkMatrix* dereferenceable(40), %class.SkImageFilter*, %"class.skif::ParameterSpace"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %struct.SkSize, align 4
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.SkPoint*
  %10 = alloca %class.SkMatrix, align 16
  %11 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #6
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %13 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 16
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %15, align 16
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %16, align 16
  store i32 16, i32* %12, align 4
  %17 = bitcast %struct.SkSize* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  %18 = getelementptr inbounds %struct.SkSize, %struct.SkSize* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %18, align 4
  %19 = getelementptr inbounds %struct.SkSize, %struct.SkSize* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = trunc i32 %21 to i8
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %4
  %25 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #6
  %26 = zext i8 %25 to i32
  store i32 %26, i32* %20, align 4
  br label %27

27:                                               ; preds = %4, %24
  %28 = phi i32 [ %26, %24 ], [ %21, %4 ]
  %29 = and i32 %28, 12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = bitcast %class.SkImageFilter* %2 to %class.SkImageFilter_Base*
  %33 = tail call zeroext i1 @_ZNK18SkImageFilter_Base19canHandleComplexCTMEv(%class.SkImageFilter_Base* %32) #6
  br i1 %33, label %34, label %45

34:                                               ; preds = %31, %27
  %35 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #6
  %36 = bitcast %class.SkMatrix* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %11, i8* align 4 %36, i64 40, i1 false)
  %37 = bitcast %class.SkMatrix* %1 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %43 = load float, float* %42, align 4
  %44 = load i32, i32* %20, align 4
  br label %91

45:                                               ; preds = %31
  %46 = call zeroext i1 @_ZNK8SkMatrix14decomposeScaleEP6SkSizePS_(%class.SkMatrix* %1, %struct.SkSize* nonnull %6, %class.SkMatrix* nonnull %5) #6
  br i1 %46, label %47, label %63

47:                                               ; preds = %45
  %48 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %48) #6
  %49 = load float, float* %18, align 4
  %50 = load float, float* %19, align 4
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %52 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %52, align 16, !alias.scope !2
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %54, align 16, !alias.scope !2
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %55, align 16, !alias.scope !2
  store i32 16, i32* %51, align 4, !alias.scope !2
  %56 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %7, float %49, float %50) #6
  %57 = bitcast %class.SkMatrix* %7 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = bitcast float* %53 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 16
  %61 = load float, float* %55, align 16
  %62 = load i32, i32* %51, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %48) #6
  br label %91

63:                                               ; preds = %45
  %64 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #6
  %65 = bitcast %"class.skif::ParameterSpace"* %3 to i64*
  %66 = load i64, i64* %65, align 4
  store i64 %66, i64* %8, align 8
  %67 = call float @_ZN12SkMatrixPriv21DifferentialAreaScaleERK8SkMatrixRK7SkPoint(%class.SkMatrix* dereferenceable(40) %1, %struct.SkPoint* nonnull dereferenceable(8) %9) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #6
  %68 = bitcast float %67 to i32
  %69 = and i32 %68, 2139095040
  %70 = icmp eq i32 %69, 2139095040
  br i1 %70, label %73, label %71

71:                                               ; preds = %63
  %72 = call float @sqrtf(float %67) #6
  br label %73

73:                                               ; preds = %63, %71
  %74 = phi float [ %72, %71 ], [ 1.000000e+00, %63 ]
  %75 = bitcast %class.SkMatrix* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %11, i8* align 4 %75, i64 40, i1 false)
  %76 = fdiv float 1.000000e+00, %74
  %77 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix* nonnull %5, float %76, float %76) #6
  %78 = bitcast %class.SkMatrix* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %78) #6
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 1
  %80 = bitcast %class.SkMatrix* %10 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %80, align 16, !alias.scope !5
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 4
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %82, align 16, !alias.scope !5
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %83, align 16, !alias.scope !5
  store i32 16, i32* %79, align 4, !alias.scope !5
  %84 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %10, float %74, float %74) #6
  %85 = bitcast %class.SkMatrix* %10 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 16
  %87 = bitcast float* %81 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 16
  %89 = load float, float* %83, align 16
  %90 = load i32, i32* %79, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %78) #6
  br label %91

91:                                               ; preds = %47, %73, %34
  %92 = phi float [ %43, %34 ], [ %61, %47 ], [ %89, %73 ]
  %93 = phi i32 [ %44, %34 ], [ %62, %47 ], [ %90, %73 ]
  %94 = phi <4 x float> [ %38, %34 ], [ %58, %47 ], [ %86, %73 ]
  %95 = phi <4 x float> [ %41, %34 ], [ %60, %47 ], [ %88, %73 ]
  %96 = bitcast %"class.skif::Mapping"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* nonnull align 16 %11, i64 40, i1 false) #6
  %97 = getelementptr inbounds %"class.skif::Mapping", %"class.skif::Mapping"* %0, i64 0, i32 1, i32 0, i64 0
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %94, <4 x float>* %98, align 4
  %99 = getelementptr inbounds %"class.skif::Mapping", %"class.skif::Mapping"* %0, i64 0, i32 1, i32 0, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %95, <4 x float>* %100, align 4
  %101 = getelementptr inbounds %"class.skif::Mapping", %"class.skif::Mapping"* %0, i64 0, i32 1, i32 0, i64 8
  store float %92, float* %101, align 4
  %102 = getelementptr inbounds %"class.skif::Mapping", %"class.skif::Mapping"* %0, i64 0, i32 1, i32 1
  store i32 %93, i32* %102, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK18SkImageFilter_Base19canHandleComplexCTMEv(%class.SkImageFilter_Base*) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZNK8SkMatrix14decomposeScaleEP6SkSizePS_(%class.SkMatrix*, %struct.SkSize*, %class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare float @_ZN12SkMatrixPriv21DifferentialAreaScaleERK8SkMatrixRK7SkPoint(%class.SkMatrix* dereferenceable(40), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN4skif7Mapping3mapI7SkIRectEET_RKS3_RK8SkMatrix(%struct.SkIRect* nocapture readonly dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %struct.SkRect*
  %6 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = sitofp i32 %8 to float
  %10 = insertelement <2 x float> undef, float %9, i32 0
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = insertelement <2 x float> %10, float %13, i32 1
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = sitofp i32 %16 to float
  %18 = insertelement <2 x float> undef, float %17, i32 0
  %19 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %0, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = sitofp i32 %20 to float
  %22 = insertelement <2 x float> %18, float %21, i32 1
  %23 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  store <2 x float> %14, <2 x float>* %23, align 8
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  store <2 x float> %22, <2 x float>* %24, align 8
  %25 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25)
  %26 = bitcast { <2 x float>, <2 x float> }* %3 to %struct.SkRect*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -1, i64 16, i1 false) #6
  %27 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %1, %struct.SkRect* nonnull %26, %struct.SkRect* nonnull dereferenceable(16) %5, i32 1) #6
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %29 = load <2 x float>, <2 x float>* %28, align 8
  %30 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %31 = load <2 x float>, <2 x float>* %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25)
  %32 = extractelement <2 x float> %29, i32 0
  %33 = call float @llvm.floor.f32(float %32) #6
  %34 = fcmp olt float %33, 0x41DFFFFFE0000000
  %35 = select i1 %34, float %33, float 0x41DFFFFFE0000000
  %36 = fcmp ogt float %35, 0xC1DFFFFFE0000000
  %37 = select i1 %36, float %35, float 0xC1DFFFFFE0000000
  %38 = fptosi float %37 to i32
  %39 = extractelement <2 x float> %29, i32 1
  %40 = call float @llvm.floor.f32(float %39) #6
  %41 = fcmp olt float %40, 0x41DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x41DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC1DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC1DFFFFFE0000000
  %45 = fptosi float %44 to i32
  %46 = extractelement <2 x float> %31, i32 0
  %47 = call float @llvm.ceil.f32(float %46) #6
  %48 = fcmp olt float %47, 0x41DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x41DFFFFFE0000000
  %50 = fcmp ogt float %49, 0xC1DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0xC1DFFFFFE0000000
  %52 = fptosi float %51 to i32
  %53 = extractelement <2 x float> %31, i32 1
  %54 = call float @llvm.ceil.f32(float %53) #6
  %55 = fcmp olt float %54, 0x41DFFFFFE0000000
  %56 = select i1 %55, float %54, float 0x41DFFFFFE0000000
  %57 = fcmp ogt float %56, 0xC1DFFFFFE0000000
  %58 = select i1 %57, float %56, float 0xC1DFFFFFE0000000
  %59 = fptosi float %58 to i32
  %60 = zext i32 %45 to i64
  %61 = shl nuw i64 %60, 32
  %62 = zext i32 %38 to i64
  %63 = or i64 %61, %62
  %64 = insertvalue { i64, i64 } undef, i64 %63, 0
  %65 = zext i32 %59 to i64
  %66 = shl nuw i64 %65, 32
  %67 = zext i32 %52 to i64
  %68 = or i64 %66, %67
  %69 = insertvalue { i64, i64 } %64, i64 %68, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  ret { i64, i64 } %69
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4skif7Mapping3mapI6SkRectEET_RKS3_RK8SkMatrix(%struct.SkRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4)
  %5 = bitcast { <2 x float>, <2 x float> }* %3 to %struct.SkRect*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -1, i64 16, i1 false) #6
  %6 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %1, %struct.SkRect* nonnull %5, %struct.SkRect* dereferenceable(16) %0, i32 1) #6
  %7 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %8 = load <2 x float>, <2 x float>* %7, align 8
  %9 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %8, 0
  %10 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %11 = load <2 x float>, <2 x float>* %10, align 8
  %12 = insertvalue { <2 x float>, <2 x float> } %9, <2 x float> %11, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4)
  ret { <2 x float>, <2 x float> } %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4skif7Mapping3mapI8SkIPointEET_RKS3_RK8SkMatrix(%struct.SkIPoint* nocapture readonly dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %5 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 1
  %8 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = insertelement <2 x float> undef, float %10, i32 0
  %15 = insertelement <2 x float> %14, float %13, i32 1
  store <2 x float> %15, <2 x float>* %3, align 8
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %4, %struct.SkPoint* nonnull %4, i32 1) #6
  %16 = load float, float* %6, align 8
  %17 = fadd float %16, 5.000000e-01
  %18 = call float @llvm.floor.f32(float %17)
  %19 = fcmp olt float %18, 0x41DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0x41DFFFFFE0000000
  %21 = fcmp ogt float %20, 0xC1DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0xC1DFFFFFE0000000
  %23 = fptosi float %22 to i32
  %24 = load float, float* %7, align 4
  %25 = fadd float %24, 5.000000e-01
  %26 = call float @llvm.floor.f32(float %25)
  %27 = fcmp olt float %26, 0x41DFFFFFE0000000
  %28 = select i1 %27, float %26, float 0x41DFFFFFE0000000
  %29 = fcmp ogt float %28, 0xC1DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0xC1DFFFFFE0000000
  %31 = fptosi float %30 to i32
  %32 = zext i32 %31 to i64
  %33 = shl nuw i64 %32, 32
  %34 = zext i32 %23 to i64
  %35 = or i64 %33, %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  ret i64 %35
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN4skif7Mapping3mapI7SkPointEET_RKS3_RK8SkMatrix(%struct.SkPoint* dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %5 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %5, align 8
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %4, %struct.SkPoint* %0, i32 1) #6
  %7 = load <2 x float>, <2 x float>* %3, align 8
  ret <2 x float> %7
}

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4skif7Mapping3mapINS_7IVectorEEET_RKS3_RK8SkMatrix(%"struct.skif::IVector"* nocapture readonly dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = getelementptr inbounds %"struct.skif::IVector", %"struct.skif::IVector"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"struct.skif::IVector", %"struct.skif::IVector"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %9 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %8, i64 0, i32 1
  %12 = sitofp i32 %5 to float
  %13 = sitofp i32 %7 to float
  %14 = insertelement <2 x float> undef, float %12, i32 0
  %15 = insertelement <2 x float> %14, float %13, i32 1
  store <2 x float> %15, <2 x float>* %3, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %8, %struct.SkPoint* nonnull %8, i32 1) #6
  %16 = load float, float* %10, align 8
  %17 = fadd float %16, 5.000000e-01
  %18 = call float @llvm.floor.f32(float %17) #6
  %19 = fcmp olt float %18, 0x41DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0x41DFFFFFE0000000
  %21 = fcmp ogt float %20, 0xC1DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0xC1DFFFFFE0000000
  %23 = fptosi float %22 to i32
  %24 = load float, float* %11, align 4
  %25 = fadd float %24, 5.000000e-01
  %26 = call float @llvm.floor.f32(float %25) #6
  %27 = fcmp olt float %26, 0x41DFFFFFE0000000
  %28 = select i1 %27, float %26, float 0x41DFFFFFE0000000
  %29 = fcmp ogt float %28, 0xC1DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0xC1DFFFFFE0000000
  %31 = fptosi float %30 to i32
  %32 = zext i32 %31 to i64
  %33 = shl nuw i64 %32, 32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  %34 = zext i32 %23 to i64
  %35 = or i64 %33, %34
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN4skif7Mapping3mapINS_6VectorEEET_RKS3_RK8SkMatrix(%"struct.skif::Vector"* nocapture readonly dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast %"struct.skif::Vector"* %0 to i64*
  %5 = load i64, i64* %4, align 4
  %6 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %8 = bitcast <2 x float>* %3 to i64*
  store i64 %5, i64* %8, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %7, %struct.SkPoint* nonnull %7, i32 1) #6
  %9 = load <2 x float>, <2 x float>* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  ret <2 x float> %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4skif7Mapping3mapI7SkISizeEET_RKS3_RK8SkMatrix(%struct.SkISize* nocapture readonly dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %9 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %8, i64 0, i32 1
  %12 = sitofp i32 %5 to float
  %13 = sitofp i32 %7 to float
  %14 = insertelement <2 x float> undef, float %12, i32 0
  %15 = insertelement <2 x float> %14, float %13, i32 1
  store <2 x float> %15, <2 x float>* %3, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %8, %struct.SkPoint* nonnull %8, i32 1) #6
  %16 = load float, float* %10, align 8
  %17 = fadd float %16, 5.000000e-01
  %18 = call float @llvm.floor.f32(float %17) #6
  %19 = fcmp olt float %18, 0x41DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0x41DFFFFFE0000000
  %21 = fcmp ogt float %20, 0xC1DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0xC1DFFFFFE0000000
  %23 = fptosi float %22 to i32
  %24 = load float, float* %11, align 4
  %25 = fadd float %24, 5.000000e-01
  %26 = call float @llvm.floor.f32(float %25) #6
  %27 = fcmp olt float %26, 0x41DFFFFFE0000000
  %28 = select i1 %27, float %26, float 0x41DFFFFFE0000000
  %29 = fcmp ogt float %28, 0xC1DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0xC1DFFFFFE0000000
  %31 = fptosi float %30 to i32
  %32 = zext i32 %31 to i64
  %33 = shl nuw i64 %32, 32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  %34 = zext i32 %23 to i64
  %35 = or i64 %33, %34
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN4skif7Mapping3mapI6SkSizeEET_RKS3_RK8SkMatrix(%struct.SkSize* nocapture readonly dereferenceable(8), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast %struct.SkSize* %0 to i64*
  %5 = load i64, i64* %4, align 4
  %6 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %8 = bitcast <2 x float>* %3 to i64*
  store i64 %5, i64* %8, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %7, %struct.SkPoint* nonnull %7, i32 1) #6
  %9 = load <2 x float>, <2 x float>* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  ret <2 x float> %9
}

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!4 = distinct !{!4, !"_ZN8SkMatrix5ScaleEff"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!7 = distinct !{!7, !"_ZN8SkMatrix5ScaleEff"}
