; ModuleID = '../../third_party/blink/renderer/core/svg/svg_number.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_number.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.128", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.144", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.162", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.169", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.69", %"class.std::__1::unique_ptr.69", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.90", %"class.std::__1::unique_ptr.113", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i64 }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.blink::Worklist.44"* }
%"class.blink::Worklist.44" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.blink::Worklist.51"* }
%"class.blink::Worklist.51" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::Worklist.58"* }
%"class.blink::Worklist.58" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::Worklist.65"* }
%"class.blink::Worklist.65" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.blink::Worklist.72"* }
%"class.blink::Worklist.72" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::Worklist.79"* }
%"class.blink::Worklist.79" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::Worklist.86"* }
%"class.blink::Worklist.86" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.33" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.93", %"class.std::__1::__compressed_pair.100", %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.107", [4 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95", %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { i64 }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { float }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.116", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.136" }
%"class.WTF::VectorBuffer.136" = type { %"class.WTF::VectorBufferBase.137" }
%"class.WTF::VectorBufferBase.137" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.150" }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.44"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.51"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.58"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.65"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.72"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.173" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.168 }
%class.scoped_refptr.168 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.169" = type { %"struct.std::__1::__atomic_base.170" }
%"struct.std::__1::__atomic_base.170" = type { %"struct.std::__1::__cxx_atomic_impl.171" }
%"struct.std::__1::__cxx_atomic_impl.171" = type { %"struct.std::__1::__cxx_atomic_base_impl.172" }
%"struct.std::__1::__cxx_atomic_base_impl.172" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SVGNumber" = type <{ %"class.blink::SVGListablePropertyBase", float, [4 x i8] }>
%"class.blink::SVGListablePropertyBase" = type { %"class.blink::SVGPropertyBase", %"class.blink::UntracedMember" }
%"class.blink::SVGPropertyBase" = type { i32 (...)** }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::SVGListPropertyBase"* }
%"class.blink::SVGListPropertyBase" = type opaque
%"class.blink::SVGNumberAcceptPercentage" = type { %"class.blink::SVGNumber.base", [4 x i8] }
%"class.blink::SVGNumber.base" = type <{ %"class.blink::SVGListablePropertyBase", float }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SVGElement" = type opaque
%"struct.blink::SMILAnimationEffectParameters" = type { i8, i8, i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink15SVGPropertyBaseD2Ev = comdat any

$_ZN5blink9SVGNumberD0Ev = comdat any

$_ZNK5blink9SVGNumber7GetTypeEv = comdat any

$_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE = comdat any

$_ZN5blink25SVGNumberAcceptPercentageD0Ev = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink9SVGNumberE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGPropertyBase"*)* @_ZN5blink15SVGPropertyBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGNumber"*)* @_ZN5blink9SVGNumberD0Ev to i8*), i8* bitcast (%"class.blink::SVGPropertyBase"* (%"class.blink::SVGNumber"*, %"class.WTF::String"*)* @_ZNK5blink9SVGNumber17CloneForAnimationERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGNumber"*)* @_ZNK5blink9SVGNumber13ValueAsStringEv to i8*), i8* bitcast (void (%"class.blink::SVGNumber"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink9SVGNumber3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (void (%"class.blink::SVGNumber"*, %"struct.blink::SMILAnimationEffectParameters"*, float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink9SVGNumber22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE to i8*), i8* bitcast (float (%"class.blink::SVGNumber"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZNK5blink9SVGNumber17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (i32 (%"class.blink::SVGNumber"*)* @_ZNK5blink9SVGNumber7GetTypeEv to i8*), i8* bitcast (void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)* @_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"class.blink::SVGNumber"* (%"class.blink::SVGNumber"*)* @_ZNK5blink9SVGNumber5CloneEv to i8*), i8* bitcast (i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)* @_ZN5blink9SVGNumber16SetValueAsStringERKN3WTF6StringE to i8*)] }, align 8
@_ZTVN5blink25SVGNumberAcceptPercentageE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGPropertyBase"*)* @_ZN5blink15SVGPropertyBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGNumberAcceptPercentage"*)* @_ZN5blink25SVGNumberAcceptPercentageD0Ev to i8*), i8* bitcast (%"class.blink::SVGPropertyBase"* (%"class.blink::SVGNumber"*, %"class.WTF::String"*)* @_ZNK5blink9SVGNumber17CloneForAnimationERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGNumber"*)* @_ZNK5blink9SVGNumber13ValueAsStringEv to i8*), i8* bitcast (void (%"class.blink::SVGNumber"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink9SVGNumber3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (void (%"class.blink::SVGNumber"*, %"struct.blink::SMILAnimationEffectParameters"*, float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink9SVGNumber22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE to i8*), i8* bitcast (float (%"class.blink::SVGNumber"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZNK5blink9SVGNumber17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (i32 (%"class.blink::SVGNumber"*)* @_ZNK5blink9SVGNumber7GetTypeEv to i8*), i8* bitcast (void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)* @_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"class.blink::SVGNumber"* (%"class.blink::SVGNumberAcceptPercentage"*)* @_ZNK5blink25SVGNumberAcceptPercentage5CloneEv to i8*), i8* bitcast (i32 (%"class.blink::SVGNumberAcceptPercentage"*, %"class.WTF::String"*)* @_ZN5blink25SVGNumberAcceptPercentage16SetValueAsStringERKN3WTF6StringE to i8*)] }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink9SVGNumberC1Ef = hidden unnamed_addr alias void (%"class.blink::SVGNumber"*, float), void (%"class.blink::SVGNumber"*, float)* @_ZN5blink9SVGNumberC2Ef
@_ZN5blink25SVGNumberAcceptPercentageC1Ef = hidden unnamed_addr alias void (%"class.blink::SVGNumberAcceptPercentage"*, float), void (%"class.blink::SVGNumberAcceptPercentage"*, float)* @_ZN5blink25SVGNumberAcceptPercentageC2Ef

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink9SVGNumberC2Ef(%"class.blink::SVGNumber"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::SVGListPropertyBase"* null, %"class.blink::SVGListPropertyBase"** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5blink9SVGNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  store float %1, float* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGNumber"* @_ZNK5blink9SVGNumber5CloneEv(%"class.blink::SVGNumber"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  %3 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 24) #9
  %4 = bitcast i8* %3 to %"class.blink::SVGNumber"*
  %5 = bitcast float* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = bitcast i8* %3 to i32 (...)***
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to %"class.blink::SVGListPropertyBase"**
  store %"class.blink::SVGListPropertyBase"* null, %"class.blink::SVGListPropertyBase"** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5blink9SVGNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 16
  %11 = bitcast i8* %10 to i32*
  store i32 %6, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %3, i64 -4
  %13 = bitcast i8* %12 to i16*
  %14 = load atomic i16, i16* %13 monotonic, align 2
  %15 = or i16 %14, 1
  store atomic i16 %15, i16* %13 release, align 2
  ret %"class.blink::SVGNumber"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGPropertyBase"* @_ZNK5blink9SVGNumber17CloneForAnimationERKN3WTF6StringE(%"class.blink::SVGNumber"* nocapture readnone, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 24) #9
  %4 = bitcast i8* %3 to %"class.blink::SVGNumber"*
  %5 = bitcast i8* %3 to i32 (...)***
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %"class.blink::SVGListPropertyBase"**
  store %"class.blink::SVGListPropertyBase"* null, %"class.blink::SVGListPropertyBase"** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5blink9SVGNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 16
  %9 = bitcast i8* %8 to float*
  store float 0.000000e+00, float* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 -4
  %11 = bitcast i8* %10 to i16*
  %12 = load atomic i16, i16* %11 monotonic, align 2
  %13 = or i16 %12, 1
  store atomic i16 %13, i16* %11 release, align 2
  %14 = bitcast i8* %3 to i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)***
  %15 = load i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)**, i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)*, i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)** %15, i64 10
  %17 = load i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)*, i32 (%"class.blink::SVGNumber"*, %"class.WTF::String"*)** %16, align 8
  %18 = tail call i32 %17(%"class.blink::SVGNumber"* %4, %"class.WTF::String"* dereferenceable(8) %1) #9
  %19 = bitcast i8* %3 to %"class.blink::SVGPropertyBase"*
  ret %"class.blink::SVGPropertyBase"* %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink9SVGNumber13ValueAsStringEv(%"class.blink::SVGNumber"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  %3 = load float, float* %2, align 8
  %4 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %3) #9
  ret %"class.WTF::StringImpl"* %4
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink9SVGNumber16SetValueAsStringERKN3WTF6StringE(%"class.blink::SVGNumber"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca float, align 4
  %5 = alloca i16*, align 8
  %6 = alloca float, align 4
  %7 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %93, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %93, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %19, label %56, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %13 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  %26 = bitcast i8** %3 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %26, align 8
  %27 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #9
  store float 0.000000e+00, float* %4, align 4
  %28 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %24, float* nonnull dereferenceable(4) %4, i32 3) #9
  %29 = load i8*, i8** %3, align 8
  br i1 %28, label %39, label %30

30:                                               ; preds = %21
  %31 = ptrtoint i8* %29 to i64
  %32 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %33 = sub i64 %31, %32
  %34 = icmp ult i64 %33, 16777215
  %35 = select i1 %34, i64 %33, i64 16777215
  %36 = trunc i64 %35 to i32
  %37 = shl nuw i32 %36, 8
  %38 = or i32 %37, 10
  br label %54

39:                                               ; preds = %21
  %40 = icmp eq i8* %29, %24
  br i1 %40, label %50, label %41

41:                                               ; preds = %39
  %42 = ptrtoint i8* %29 to i64
  %43 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %44 = sub i64 %42, %43
  %45 = icmp ult i64 %44, 16777215
  %46 = select i1 %45, i64 %44, i64 16777215
  %47 = trunc i64 %46 to i32
  %48 = shl nuw i32 %47, 8
  %49 = or i32 %48, 1
  br label %54

50:                                               ; preds = %39
  %51 = bitcast float* %4 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = bitcast float* %7 to i32*
  store i32 %52, i32* %53, align 8
  br label %54

54:                                               ; preds = %50, %41, %30
  %55 = phi i32 [ 0, %50 ], [ %49, %41 ], [ %38, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #9
  br label %93

56:                                               ; preds = %15
  %57 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %58 = zext i32 %13 to i64
  %59 = getelementptr inbounds i16, i16* %57, i64 %58
  %60 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #9
  %61 = bitcast i16** %5 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %61, align 8
  %62 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #9
  store float 0.000000e+00, float* %6, align 4
  %63 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %5, i16* %59, float* nonnull dereferenceable(4) %6, i32 3) #9
  %64 = load i16*, i16** %5, align 8
  br i1 %63, label %75, label %65

65:                                               ; preds = %56
  %66 = ptrtoint i16* %64 to i64
  %67 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %68 = sub i64 %66, %67
  %69 = ashr exact i64 %68, 1
  %70 = icmp ult i64 %69, 16777215
  %71 = select i1 %70, i64 %69, i64 16777215
  %72 = trunc i64 %71 to i32
  %73 = shl nuw i32 %72, 8
  %74 = or i32 %73, 10
  br label %91

75:                                               ; preds = %56
  %76 = icmp eq i16* %64, %59
  br i1 %76, label %87, label %77

77:                                               ; preds = %75
  %78 = ptrtoint i16* %64 to i64
  %79 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %80 = sub i64 %78, %79
  %81 = ashr exact i64 %80, 1
  %82 = icmp ult i64 %81, 16777215
  %83 = select i1 %82, i64 %81, i64 16777215
  %84 = trunc i64 %83 to i32
  %85 = shl nuw i32 %84, 8
  %86 = or i32 %85, 1
  br label %91

87:                                               ; preds = %75
  %88 = bitcast float* %6 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = bitcast float* %7 to i32*
  store i32 %89, i32* %90, align 8
  br label %91

91:                                               ; preds = %87, %77, %65
  %92 = phi i32 [ 0, %87 ], [ %86, %77 ], [ %74, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #9
  br label %93

93:                                               ; preds = %2, %91, %54, %11
  %94 = phi i32 [ 0, %11 ], [ %55, %54 ], [ %92, %91 ], [ 0, %2 ]
  ret i32 %94
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink9SVGNumber3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGNumber"* nocapture, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  %5 = load float, float* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %1, i64 2
  %7 = bitcast %"class.blink::SVGPropertyBase"* %6 to float*
  %8 = load float, float* %7, align 8
  %9 = fadd float %5, %8
  store float %9, float* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink9SVGNumber22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE(%"class.blink::SVGNumber"* nocapture, %"struct.blink::SMILAnimationEffectParameters"* nocapture readonly dereferenceable(3), float, i32, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #4 align 2 {
  %9 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %4, i64 2
  %10 = bitcast %"class.blink::SVGPropertyBase"* %9 to float*
  %11 = load float, float* %10, align 8
  %12 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %5, i64 2
  %13 = bitcast %"class.blink::SVGPropertyBase"* %12 to float*
  %14 = load float, float* %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %6, i64 2
  %16 = bitcast %"class.blink::SVGPropertyBase"* %15 to float*
  %17 = load float, float* %16, align 8
  %18 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 0
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %8
  %22 = fcmp olt float %2, 5.000000e-01
  %23 = select i1 %22, float %11, float %14
  br label %28

24:                                               ; preds = %8
  %25 = fsub float %14, %11
  %26 = fmul float %25, %2
  %27 = fadd float %11, %26
  br label %28

28:                                               ; preds = %24, %21
  %29 = phi float [ %23, %21 ], [ %27, %24 ]
  %30 = icmp eq i32 %3, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 2
  %33 = load i8, i8* %32, align 1, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = uitofp i32 %3 to float
  %37 = fmul float %17, %36
  %38 = fadd float %37, %29
  br label %39

39:                                               ; preds = %28, %31, %35
  %40 = phi float [ %38, %35 ], [ %29, %31 ], [ %29, %28 ]
  %41 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 1
  %42 = load i8, i8* %41, align 1, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  %46 = load float, float* %45, align 8
  %47 = fadd float %40, %46
  br label %48

48:                                               ; preds = %39, %44
  %49 = phi float [ %47, %44 ], [ %40, %39 ]
  %50 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  store float %49, float* %50, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZNK5blink9SVGNumber17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGNumber"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGNumber", %"class.blink::SVGNumber"* %0, i64 0, i32 1
  %5 = load float, float* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %1, i64 2
  %7 = bitcast %"class.blink::SVGPropertyBase"* %6 to float*
  %8 = load float, float* %7, align 8
  %9 = fsub float %5, %8
  %10 = tail call float @llvm.fabs.f32(float %9)
  ret float %10
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGNumber"* @_ZNK5blink25SVGNumberAcceptPercentage5CloneEv(%"class.blink::SVGNumberAcceptPercentage"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGNumberAcceptPercentage", %"class.blink::SVGNumberAcceptPercentage"* %0, i64 0, i32 0, i32 1
  %3 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 24) #9
  %4 = bitcast float* %2 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i8* %3 to i32 (...)***
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to %"class.blink::SVGListPropertyBase"**
  store %"class.blink::SVGListPropertyBase"* null, %"class.blink::SVGListPropertyBase"** %8, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 16
  %10 = bitcast i8* %9 to i32*
  store i32 %5, i32* %10, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5blink25SVGNumberAcceptPercentageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 -4
  %12 = bitcast i8* %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = or i16 %13, 1
  store atomic i16 %14, i16* %12 release, align 2
  %15 = bitcast i8* %3 to %"class.blink::SVGNumber"*
  ret %"class.blink::SVGNumber"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink25SVGNumberAcceptPercentage16SetValueAsStringERKN3WTF6StringE(%"class.blink::SVGNumberAcceptPercentage"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca float, align 4
  %6 = getelementptr inbounds %"class.blink::SVGNumberAcceptPercentage", %"class.blink::SVGNumberAcceptPercentage"* %0, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %150, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %150, label %14

14:                                               ; preds = %10
  %15 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store float 0.000000e+00, float* %5, align 4
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %19, label %82, label %21

21:                                               ; preds = %14
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %12 to i64
  %24 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  %25 = bitcast i8** %3 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %25, align 8
  %26 = getelementptr inbounds i8, i8* %22, i64 %23
  %27 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %26, float* nonnull dereferenceable(4) %5, i32 1) #9
  %28 = load i8*, i8** %3, align 8
  %29 = ptrtoint i8* %28 to i64
  br i1 %27, label %38, label %30

30:                                               ; preds = %21
  %31 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %32 = sub i64 %29, %31
  %33 = icmp ult i64 %32, 16777215
  %34 = select i1 %33, i64 %32, i64 16777215
  %35 = trunc i64 %34 to i32
  %36 = shl nuw i32 %35, 8
  %37 = or i32 %36, 11
  br label %140

38:                                               ; preds = %21
  %39 = icmp ult i8* %28, %26
  br i1 %39, label %40, label %48

40:                                               ; preds = %38
  %41 = load i8, i8* %28, align 1
  %42 = icmp eq i8 %41, 37
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = load float, float* %5, align 4
  %45 = fdiv float %44, 1.000000e+02
  store float %45, float* %5, align 4
  %46 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %46, i8** %3, align 8
  %47 = ptrtoint i8* %46 to i64
  br label %48

48:                                               ; preds = %43, %40, %38
  %49 = phi i64 [ %47, %43 ], [ %29, %40 ], [ %29, %38 ]
  %50 = phi i8* [ %46, %43 ], [ %28, %40 ], [ %28, %38 ]
  %51 = icmp ult i8* %50, %26
  br i1 %51, label %52, label %140

52:                                               ; preds = %48
  %53 = load i8, i8* %50, align 1
  %54 = icmp ult i8 %53, 33
  br i1 %54, label %59, label %73

55:                                               ; preds = %64
  %56 = ptrtoint i8* %65 to i64
  %57 = load i8, i8* %65, align 1
  %58 = icmp ult i8 %57, 33
  br i1 %58, label %59, label %68

59:                                               ; preds = %52, %55
  %60 = phi i64 [ %56, %55 ], [ %49, %52 ]
  %61 = phi i8 [ %57, %55 ], [ %53, %52 ]
  %62 = phi i8* [ %65, %55 ], [ %50, %52 ]
  %63 = phi i1 [ %66, %55 ], [ true, %52 ]
  switch i8 %61, label %70 [
    i8 32, label %64
    i8 10, label %64
    i8 9, label %64
    i8 13, label %64
    i8 12, label %64
  ]

64:                                               ; preds = %59, %59, %59, %59, %59
  %65 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %65, i8** %3, align 8
  %66 = icmp ult i8* %65, %26
  %67 = icmp eq i8* %65, %26
  br i1 %67, label %140, label %55

68:                                               ; preds = %55
  %69 = ptrtoint i8* %65 to i64
  br label %70

70:                                               ; preds = %59, %68
  %71 = phi i64 [ %69, %68 ], [ %60, %59 ]
  %72 = phi i1 [ %66, %68 ], [ %63, %59 ]
  br i1 %72, label %73, label %140

73:                                               ; preds = %70, %52
  %74 = phi i64 [ %49, %52 ], [ %71, %70 ]
  %75 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %76 = sub i64 %74, %75
  %77 = icmp ult i64 %76, 16777215
  %78 = select i1 %77, i64 %76, i64 16777215
  %79 = trunc i64 %78 to i32
  %80 = shl nuw i32 %79, 8
  %81 = or i32 %80, 1
  br label %140

82:                                               ; preds = %14
  %83 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %84 = zext i32 %12 to i64
  %85 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #9
  %86 = bitcast i16** %4 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %86, align 8
  %87 = getelementptr inbounds i16, i16* %83, i64 %84
  %88 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %4, i16* %87, float* nonnull dereferenceable(4) %5, i32 1) #9
  %89 = load i16*, i16** %4, align 8
  %90 = ptrtoint i16* %89 to i64
  br i1 %88, label %100, label %91

91:                                               ; preds = %82
  %92 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %93 = sub i64 %90, %92
  %94 = ashr exact i64 %93, 1
  %95 = icmp ult i64 %94, 16777215
  %96 = select i1 %95, i64 %94, i64 16777215
  %97 = trunc i64 %96 to i32
  %98 = shl nuw i32 %97, 8
  %99 = or i32 %98, 11
  br label %140

100:                                              ; preds = %82
  %101 = icmp ult i16* %89, %87
  br i1 %101, label %102, label %110

102:                                              ; preds = %100
  %103 = load i16, i16* %89, align 2
  %104 = icmp eq i16 %103, 37
  br i1 %104, label %105, label %110

105:                                              ; preds = %102
  %106 = load float, float* %5, align 4
  %107 = fdiv float %106, 1.000000e+02
  store float %107, float* %5, align 4
  %108 = getelementptr inbounds i16, i16* %89, i64 1
  store i16* %108, i16** %4, align 8
  %109 = ptrtoint i16* %108 to i64
  br label %110

110:                                              ; preds = %105, %102, %100
  %111 = phi i64 [ %109, %105 ], [ %90, %102 ], [ %90, %100 ]
  %112 = phi i16* [ %108, %105 ], [ %89, %102 ], [ %89, %100 ]
  %113 = icmp ult i16* %112, %87
  br i1 %113, label %114, label %140

114:                                              ; preds = %110
  %115 = load i16, i16* %112, align 2
  %116 = icmp ult i16 %115, 33
  br i1 %116, label %121, label %130

117:                                              ; preds = %125
  %118 = ptrtoint i16* %126 to i64
  %119 = load i16, i16* %126, align 2
  %120 = icmp ult i16 %119, 33
  br i1 %120, label %121, label %128

121:                                              ; preds = %114, %117
  %122 = phi i16 [ %119, %117 ], [ %115, %114 ]
  %123 = phi i16* [ %126, %117 ], [ %112, %114 ]
  %124 = phi i64 [ %118, %117 ], [ %111, %114 ]
  switch i16 %122, label %130 [
    i16 32, label %125
    i16 10, label %125
    i16 9, label %125
    i16 13, label %125
    i16 12, label %125
  ]

125:                                              ; preds = %121, %121, %121, %121, %121
  %126 = getelementptr inbounds i16, i16* %123, i64 1
  store i16* %126, i16** %4, align 8
  %127 = icmp ult i16* %126, %87
  br i1 %127, label %117, label %140

128:                                              ; preds = %117
  %129 = ptrtoint i16* %126 to i64
  br label %130

130:                                              ; preds = %121, %128, %114
  %131 = phi i64 [ %111, %114 ], [ %129, %128 ], [ %124, %121 ]
  %132 = ptrtoint %"class.WTF::StringImpl"* %20 to i64
  %133 = sub i64 %131, %132
  %134 = ashr exact i64 %133, 1
  %135 = icmp ult i64 %134, 16777215
  %136 = select i1 %135, i64 %134, i64 16777215
  %137 = trunc i64 %136 to i32
  %138 = shl nuw i32 %137, 8
  %139 = or i32 %138, 1
  br label %140

140:                                              ; preds = %64, %125, %91, %110, %130, %30, %48, %70, %73
  %141 = phi i8* [ %24, %73 ], [ %24, %70 ], [ %24, %48 ], [ %24, %30 ], [ %85, %130 ], [ %85, %110 ], [ %85, %91 ], [ %85, %125 ], [ %24, %64 ]
  %142 = phi i32 [ %81, %73 ], [ 0, %70 ], [ 0, %48 ], [ %37, %30 ], [ %139, %130 ], [ 0, %110 ], [ %99, %91 ], [ 0, %125 ], [ 0, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %141) #9
  %143 = and i32 %142, 255
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %149

145:                                              ; preds = %140
  %146 = bitcast float* %5 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = bitcast float* %6 to i32*
  store i32 %147, i32* %148, align 8
  br label %149

149:                                              ; preds = %145, %140
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  br label %150

150:                                              ; preds = %2, %10, %149
  %151 = phi i32 [ %142, %149 ], [ 11, %10 ], [ 11, %2 ]
  ret i32 %151
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink25SVGNumberAcceptPercentageC2Ef(%"class.blink::SVGNumberAcceptPercentage"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGNumberAcceptPercentage", %"class.blink::SVGNumberAcceptPercentage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::SVGNumberAcceptPercentage", %"class.blink::SVGNumberAcceptPercentage"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::SVGListPropertyBase"* null, %"class.blink::SVGListPropertyBase"** %4, align 8
  %5 = getelementptr inbounds %"class.blink::SVGNumberAcceptPercentage", %"class.blink::SVGNumberAcceptPercentage"* %0, i64 0, i32 0, i32 1
  store float %1, float* %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5blink25SVGNumberAcceptPercentageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15SVGPropertyBaseD2Ev(%"class.blink::SVGPropertyBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9SVGNumberD0Ev(%"class.blink::SVGNumber"*) unnamed_addr #7 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink9SVGNumber7GetTypeEv(%"class.blink::SVGNumber"*) unnamed_addr #1 comdat align 2 {
  ret i32 9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE(%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink25SVGNumberAcceptPercentageD0Ev(%"class.blink::SVGNumberAcceptPercentage"*) unnamed_addr #7 comdat align 2 {
  ret void
}

declare zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** dereferenceable(8), i8*, float* dereferenceable(4), i32) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** dereferenceable(8), i16*, float* dereferenceable(4), i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #9
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #9
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #9
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %40, i8* %41) #9
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #9
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #9
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #9
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #3

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #3

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SVGPropertyBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %5, i64 8
  %7 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SVGPropertyBase"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv(i8*) #1 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::SVGPropertyBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::SVGPropertyBase"*)***
  %4 = load void (%"class.blink::SVGPropertyBase"*)**, void (%"class.blink::SVGPropertyBase"*)*** %3, align 8
  %5 = load void (%"class.blink::SVGPropertyBase"*)*, void (%"class.blink::SVGPropertyBase"*)** %4, align 8
  tail call void %5(%"class.blink::SVGPropertyBase"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv(i8*) #1 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
