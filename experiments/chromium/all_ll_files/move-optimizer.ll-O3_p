; ModuleID = '../../v8/src/compiler/backend/move-optimizer.cc'
source_filename = "../../v8/src/compiler/backend/move-optimizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::MoveOptimizer" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.615", %"class.v8::internal::ZoneVector.615" }
%"class.v8::internal::ZoneVector.608" = type { %"class.std::__1::vector.609" }
%"class.std::__1::vector.609" = type { %"class.std::__1::__vector_base.610" }
%"class.std::__1::__vector_base.610" = type { %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, %"class.std::__1::__compressed_pair.611" }
%"class.v8::internal::compiler::MoveOperands" = type { %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand" }
%"class.v8::internal::compiler::InstructionOperand" = type { i64 }
%"class.std::__1::__compressed_pair.611" = type { %"struct.std::__1::__compressed_pair_elem.612", %"struct.std::__1::__compressed_pair_elem.613" }
%"struct.std::__1::__compressed_pair_elem.612" = type { %"class.v8::internal::compiler::MoveOperands"** }
%"struct.std::__1::__compressed_pair_elem.613" = type { %"class.v8::internal::ZoneAllocator.614" }
%"class.v8::internal::ZoneAllocator.614" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.615" = type { %"class.std::__1::vector.616" }
%"class.std::__1::vector.616" = type { %"class.std::__1::__vector_base.617" }
%"class.std::__1::__vector_base.617" = type { %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.std::__1::__compressed_pair.618" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.619", %"struct.std::__1::__compressed_pair_elem.620" }
%"struct.std::__1::__compressed_pair_elem.619" = type { %"class.v8::internal::compiler::InstructionOperand"* }
%"struct.std::__1::__compressed_pair_elem.620" = type { %"class.v8::internal::ZoneAllocator.621" }
%"class.v8::internal::ZoneAllocator.621" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::InstructionSequence" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneMap", %"class.std::__1::map.589", %"class.v8::internal::ZoneVector.598", %"class.v8::internal::ZoneVector.559", %"class.v8::internal::ZoneDeque", i32, %"class.v8::internal::ZoneDeque.630", %"class.v8::internal::ZoneVector.643", i32, %"class.v8::internal::ZoneVector.650", %"class.v8::internal::compiler::InstructionBlock"* }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.13", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.332", %"class.std::__1::unique_ptr.333", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.339", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.354", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.361", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.371", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.381", %"struct.std::__1::atomic.56", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.415", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.432"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.433", i32, i8, i8, i32, i32, %"class.std::__1::vector.439", %"class.std::__1::vector.439", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.446", i64, %"class.std::__1::unordered_map.447", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.205", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.64", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.506", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.512", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.546", %"class.std::__1::vector.550", %"class.std::__1::vector.550", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.8", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.41", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.65", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.69", %"class.std::__1::vector.69", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.82", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.160", %"class.std::__1::shared_ptr.166", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.167", %"class.std::__1::unique_ptr.193", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.199", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.212", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set", i8, [7 x i8], %"class.std::__1::unordered_map.241", %"class.std::__1::unordered_map.267", %"class.std::__1::unordered_map.241", %"class.std::__1::unordered_map.291", %"class.std::__1::vector.319", i8, %"class.std::__1::unique_ptr.326", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.19", %"class.std::__1::__compressed_pair.26", %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.33", [4 x i8] }>
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21", %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.36", %"struct.std::__1::atomic.36", %"struct.std::__1::atomic.36" }
%"struct.std::__1::atomic.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__cxx_atomic_impl.39" }
%"struct.std::__1::__cxx_atomic_impl.39" = type { %"struct.std::__1::__cxx_atomic_base_impl.40" }
%"struct.std::__1::__cxx_atomic_base_impl.40" = type { i64 }
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__cxx_atomic_impl.43" }
%"struct.std::__1::__cxx_atomic_impl.43" = type { %"struct.std::__1::__cxx_atomic_base_impl.44" }
%"struct.std::__1::__cxx_atomic_base_impl.44" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.45" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type opaque
%"class.v8::internal::CodeSpace" = type opaque
%"class.v8::internal::OldLargeObjectSpace" = type opaque
%"class.v8::internal::CodeLargeObjectSpace" = type opaque
%"class.v8::internal::NewLargeObjectSpace" = type opaque
%"class.v8::internal::ReadOnlySpace" = type opaque
%"class.v8::internal::OldSpace" = type opaque
%"class.v8::internal::MapSpace" = type opaque
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type opaque
%"class.v8::internal::Space" = type opaque
%"class.v8::internal::LocalHeap" = type opaque
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.56", %"struct.std::__1::atomic.60", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.60" = type { %"struct.std::__1::__atomic_base.61" }
%"struct.std::__1::__atomic_base.61" = type { %"struct.std::__1::__cxx_atomic_impl.62" }
%"struct.std::__1::__cxx_atomic_impl.62" = type { %"struct.std::__1::__cxx_atomic_base_impl.63" }
%"struct.std::__1::__cxx_atomic_base_impl.63" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.64" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__cxx_atomic_impl.67" }
%"struct.std::__1::__cxx_atomic_impl.67" = type { %"struct.std::__1::__cxx_atomic_base_impl.68" }
%"struct.std::__1::__cxx_atomic_base_impl.68" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.71" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type opaque
%"class.v8::internal::MinorMarkCompactCollector" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type opaque
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type opaque
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type opaque
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type opaque
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.166" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type opaque
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.167" = type { %"class.std::__1::__hash_table.168" }
%"class.std::__1::__hash_table.168" = type <{ %"class.std::__1::unique_ptr.169", %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.187", [4 x i8] }>
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171", %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"struct.std::__1::__hash_node_base.172"** }
%"struct.std::__1::__hash_node_base.172" = type { %"struct.std::__1::__hash_node_base.172"* }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.std::__1::__bucket_list_deallocator.174" }
%"class.std::__1::__bucket_list_deallocator.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base.172" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.205", %"class.std::__1::vector.205" }
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.218" }
%"class.std::__1::__hash_table.218" = type <{ %"class.std::__1::unique_ptr.219", %"class.std::__1::__compressed_pair.229", %"class.std::__1::__compressed_pair.234", %"class.std::__1::__compressed_pair.236", [4 x i8] }>
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221", %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.std::__1::__hash_node_base.222"** }
%"struct.std::__1::__hash_node_base.222" = type { %"struct.std::__1::__hash_node_base.222"* }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.std::__1::__bucket_list_deallocator.224" }
%"class.std::__1::__bucket_list_deallocator.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.std::__1::__hash_node_base.222" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::unordered_map.267" = type { %"class.std::__1::__hash_table.268" }
%"class.std::__1::__hash_table.268" = type <{ %"class.std::__1::unique_ptr.269", %"class.std::__1::__compressed_pair.279", %"class.std::__1::__compressed_pair.284", %"class.std::__1::__compressed_pair.287", [4 x i8] }>
%"class.std::__1::unique_ptr.269" = type { %"class.std::__1::__compressed_pair.270" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271", %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.std::__1::__hash_node_base.272"** }
%"struct.std::__1::__hash_node_base.272" = type { %"struct.std::__1::__hash_node_base.272"* }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.std::__1::__bucket_list_deallocator.274" }
%"class.std::__1::__bucket_list_deallocator.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"struct.std::__1::__hash_node_base.272" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::unordered_map.241" = type { %"class.std::__1::__hash_table.242" }
%"class.std::__1::__hash_table.242" = type <{ %"class.std::__1::unique_ptr.243", %"class.std::__1::__compressed_pair.253", %"class.std::__1::__compressed_pair.258", %"class.std::__1::__compressed_pair.261", [4 x i8] }>
%"class.std::__1::unique_ptr.243" = type { %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245", %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"struct.std::__1::__hash_node_base.246"** }
%"struct.std::__1::__hash_node_base.246" = type { %"struct.std::__1::__hash_node_base.246"* }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"class.std::__1::__bucket_list_deallocator.248" }
%"class.std::__1::__bucket_list_deallocator.248" = type { %"class.std::__1::__compressed_pair.249" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.std::__1::__hash_node_base.246" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::unordered_map.291" = type { %"class.std::__1::__hash_table.292" }
%"class.std::__1::__hash_table.292" = type <{ %"class.std::__1::unique_ptr.293", %"class.std::__1::__compressed_pair.303", %"class.std::__1::__compressed_pair.308", %"class.std::__1::__compressed_pair.313", [4 x i8] }>
%"class.std::__1::unique_ptr.293" = type { %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295", %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"struct.std::__1::__hash_node_base.296"** }
%"struct.std::__1::__hash_node_base.296" = type { %"struct.std::__1::__hash_node_base.296"* }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.std::__1::__bucket_list_deallocator.298" }
%"class.std::__1::__bucket_list_deallocator.298" = type { %"class.std::__1::__compressed_pair.299" }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.303" = type { %"struct.std::__1::__compressed_pair_elem.304" }
%"struct.std::__1::__compressed_pair_elem.304" = type { %"struct.std::__1::__hash_node_base.296" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::vector.319" = type { %"class.std::__1::__vector_base.320" }
%"class.std::__1::__vector_base.320" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.321" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type opaque
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.205" }
%"class.std::__1::shared_ptr.332" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type opaque
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type opaque
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.339" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type opaque
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type opaque
%"class.v8::internal::StubCache" = type opaque
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type opaque
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.340", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.346", %"class.v8::internal::DetachableVector.347", %"class.v8::internal::DetachableVector.346", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.347" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.346" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type opaque
%"class.v8::internal::EternalHandles" = type opaque
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.348" }
%"class.std::__1::unique_ptr.348" = type { %"class.std::__1::__compressed_pair.349" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.354" = type { %"class.std::__1::__vector_base.355" }
%"class.std::__1::__vector_base.355" = type { i32*, i32*, %"class.std::__1::__compressed_pair.356" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357" }
%"struct.std::__1::__compressed_pair_elem.357" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type opaque
%"struct.std::__1::atomic.361" = type { %"struct.std::__1::__atomic_base.362" }
%"struct.std::__1::__atomic_base.362" = type { %"struct.std::__1::__cxx_atomic_impl.363" }
%"struct.std::__1::__cxx_atomic_impl.363" = type { %"struct.std::__1::__cxx_atomic_base_impl.364" }
%"struct.std::__1::__cxx_atomic_base_impl.364" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.371" = type { %"struct.std::__1::__atomic_base.372" }
%"struct.std::__1::__atomic_base.372" = type { %"struct.std::__1::__cxx_atomic_impl.373" }
%"struct.std::__1::__cxx_atomic_impl.373" = type { %"struct.std::__1::__cxx_atomic_base_impl.374" }
%"struct.std::__1::__cxx_atomic_base_impl.374" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.381" = type { %"class.std::__1::__hash_table.382" }
%"class.std::__1::__hash_table.382" = type <{ %"class.std::__1::unique_ptr.383", %"class.std::__1::__compressed_pair.393", %"class.std::__1::__compressed_pair.398", %"class.std::__1::__compressed_pair.401", [4 x i8] }>
%"class.std::__1::unique_ptr.383" = type { %"class.std::__1::__compressed_pair.384" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385", %"struct.std::__1::__compressed_pair_elem.387" }
%"struct.std::__1::__compressed_pair_elem.385" = type { %"struct.std::__1::__hash_node_base.386"** }
%"struct.std::__1::__hash_node_base.386" = type { %"struct.std::__1::__hash_node_base.386"* }
%"struct.std::__1::__compressed_pair_elem.387" = type { %"class.std::__1::__bucket_list_deallocator.388" }
%"class.std::__1::__bucket_list_deallocator.388" = type { %"class.std::__1::__compressed_pair.389" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.394" }
%"struct.std::__1::__compressed_pair_elem.394" = type { %"struct.std::__1::__hash_node_base.386" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::atomic.56" = type { %"struct.std::__1::__atomic_base.57" }
%"struct.std::__1::__atomic_base.57" = type { %"struct.std::__1::__cxx_atomic_impl.58" }
%"struct.std::__1::__cxx_atomic_impl.58" = type { %"struct.std::__1::__cxx_atomic_base_impl.59" }
%"struct.std::__1::__cxx_atomic_base_impl.59" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.407", %"class.v8::internal::Handle.413", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.414", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.407" = type { %"class.std::__1::__compressed_pair.408" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.413" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.414" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type opaque
%"class.std::__1::unique_ptr.415" = type { %"class.std::__1::__compressed_pair.416" }
%"class.std::__1::__compressed_pair.416" = type { %"struct.std::__1::__compressed_pair_elem.417" }
%"struct.std::__1::__compressed_pair_elem.417" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type opaque
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.427" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.421"**, %"struct.std::__1::pair.421"**, %"struct.std::__1::pair.421"**, %"class.std::__1::__compressed_pair.422" }
%"struct.std::__1::pair.421" = type opaque
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"struct.std::__1::pair.421"** }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.432" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.366", i32, %"class.v8::Local.12" }
%"class.v8::Local.366" = type { %"class.v8::Promise"* }
%"class.v8::Local.12" = type { %"class.v8::Value"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.433" = type { %"class.std::__1::__compressed_pair.434" }
%"class.std::__1::__compressed_pair.434" = type { %"struct.std::__1::__compressed_pair_elem.435" }
%"struct.std::__1::__compressed_pair_elem.435" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type opaque
%"class.std::__1::vector.439" = type { %"class.std::__1::__vector_base.440" }
%"class.std::__1::__vector_base.440" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.441" }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.442" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.446" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.447" = type { %"class.std::__1::__hash_table.448" }
%"class.std::__1::__hash_table.448" = type <{ %"class.std::__1::unique_ptr.449", %"class.std::__1::__compressed_pair.459", %"class.std::__1::__compressed_pair.464", %"class.std::__1::__compressed_pair.469", [4 x i8] }>
%"class.std::__1::unique_ptr.449" = type { %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.451", %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.451" = type { %"struct.std::__1::__hash_node_base.452"** }
%"struct.std::__1::__hash_node_base.452" = type { %"struct.std::__1::__hash_node_base.452"* }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.std::__1::__bucket_list_deallocator.454" }
%"class.std::__1::__bucket_list_deallocator.454" = type { %"class.std::__1::__compressed_pair.455" }
%"class.std::__1::__compressed_pair.455" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"struct.std::__1::__hash_node_base.452" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.64" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.475", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.504", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.475" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.500, %union.anon.502, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.500 = type { i64 }
%union.anon.502 = type { i64 }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.504" = type { %"class.v8::PersistentBase.505" }
%"class.v8::PersistentBase.505" = type { %"class.v8::Context"* }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.476", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.476" = type { %"class.std::__1::__hash_table.477" }
%"class.std::__1::__hash_table.477" = type <{ %"class.std::__1::unique_ptr.478", %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.493", %"class.std::__1::__compressed_pair.496", [4 x i8] }>
%"class.std::__1::unique_ptr.478" = type { %"class.std::__1::__compressed_pair.479" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.480", %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.480" = type { %"struct.std::__1::__hash_node_base.481"** }
%"struct.std::__1::__hash_node_base.481" = type { %"struct.std::__1::__hash_node_base.481"* }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"class.std::__1::__bucket_list_deallocator.483" }
%"class.std::__1::__bucket_list_deallocator.483" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.489" }
%"struct.std::__1::__compressed_pair_elem.489" = type { %"struct.std::__1::__hash_node_base.481" }
%"class.std::__1::__compressed_pair.493" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type opaque
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.512" = type { %"class.std::__1::__compressed_pair.513" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.514" }
%"struct.std::__1::__compressed_pair_elem.514" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.367", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.367" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.520" }
%"class.std::__1::unordered_map.520" = type { %"class.std::__1::__hash_table.521" }
%"class.std::__1::__hash_table.521" = type <{ %"class.std::__1::unique_ptr.522", %"class.std::__1::__compressed_pair.532", %"class.std::__1::__compressed_pair.537", %"class.std::__1::__compressed_pair.540", [4 x i8] }>
%"class.std::__1::unique_ptr.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524", %"struct.std::__1::__compressed_pair_elem.526" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"struct.std::__1::__hash_node_base.525"** }
%"struct.std::__1::__hash_node_base.525" = type { %"struct.std::__1::__hash_node_base.525"* }
%"struct.std::__1::__compressed_pair_elem.526" = type { %"class.std::__1::__bucket_list_deallocator.527" }
%"class.std::__1::__bucket_list_deallocator.527" = type { %"class.std::__1::__compressed_pair.528" }
%"class.std::__1::__compressed_pair.528" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.533" }
%"struct.std::__1::__compressed_pair_elem.533" = type { %"struct.std::__1::__hash_node_base.525" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.546" = type { %"struct.std::__1::__atomic_base.547" }
%"struct.std::__1::__atomic_base.547" = type { %"struct.std::__1::__cxx_atomic_impl.548" }
%"struct.std::__1::__cxx_atomic_impl.548" = type { %"struct.std::__1::__cxx_atomic_base_impl.549" }
%"struct.std::__1::__cxx_atomic_base_impl.549" = type { %"class.std::__1::vector.550"* }
%"class.std::__1::vector.550" = type { %"class.std::__1::__vector_base.551" }
%"class.std::__1::__vector_base.551" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.552" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.552" = type { %"struct.std::__1::__compressed_pair_elem.553" }
%"struct.std::__1::__compressed_pair_elem.553" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector.557" }
%"class.std::__1::vector.557" = type { %"class.std::__1::__vector_base.558" }
%"class.std::__1::__vector_base.558" = type { %"class.v8::internal::compiler::InstructionBlock"**, %"class.v8::internal::compiler::InstructionBlock"**, %"class.std::__1::__compressed_pair.578" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.579", %"struct.std::__1::__compressed_pair_elem.580" }
%"struct.std::__1::__compressed_pair_elem.579" = type { %"class.v8::internal::compiler::InstructionBlock"** }
%"struct.std::__1::__compressed_pair_elem.580" = type { %"class.v8::internal::ZoneAllocator.581" }
%"class.v8::internal::ZoneAllocator.581" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.582", %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.582" = type { %"struct.std::__1::__compressed_pair_elem.583", %"struct.std::__1::__compressed_pair_elem.584" }
%"struct.std::__1::__compressed_pair_elem.583" = type { %"class.std::__1::__tree_end_node" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"class.v8::internal::ZoneAllocator.585" }
%"class.v8::internal::ZoneAllocator.585" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::map.589" = type { %"class.std::__1::__tree.590" }
%"class.std::__1::__tree.590" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.591", %"class.std::__1::__compressed_pair.594" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.583", %"struct.std::__1::__compressed_pair_elem.592" }
%"struct.std::__1::__compressed_pair_elem.592" = type { %"class.v8::internal::ZoneAllocator.593" }
%"class.v8::internal::ZoneAllocator.593" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.v8::internal::ZoneVector.598" = type { %"class.std::__1::vector.599" }
%"class.std::__1::vector.599" = type { %"class.std::__1::__vector_base.600" }
%"class.std::__1::__vector_base.600" = type { %"class.v8::internal::compiler::Constant"*, %"class.v8::internal::compiler::Constant"*, %"class.std::__1::__compressed_pair.601" }
%"class.v8::internal::compiler::Constant" = type { i32, i8, i64 }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.602", %"struct.std::__1::__compressed_pair_elem.603" }
%"struct.std::__1::__compressed_pair_elem.602" = type { %"class.v8::internal::compiler::Constant"* }
%"struct.std::__1::__compressed_pair_elem.603" = type { %"class.v8::internal::ZoneAllocator.604" }
%"class.v8::internal::ZoneAllocator.604" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.559" = type { %"class.std::__1::vector.560" }
%"class.std::__1::vector.560" = type { %"class.std::__1::__vector_base.561" }
%"class.std::__1::__vector_base.561" = type { %"class.v8::internal::compiler::RpoNumber"*, %"class.v8::internal::compiler::RpoNumber"*, %"class.std::__1::__compressed_pair.562" }
%"class.v8::internal::compiler::RpoNumber" = type { i32 }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.563", %"struct.std::__1::__compressed_pair_elem.564" }
%"struct.std::__1::__compressed_pair_elem.563" = type { %"class.v8::internal::compiler::RpoNumber"* }
%"struct.std::__1::__compressed_pair_elem.564" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneDeque" = type { %"class.std::__1::deque.605" }
%"class.std::__1::deque.605" = type { %"class.std::__1::__deque_base.606" }
%"class.std::__1::__deque_base.606" = type { %"struct.std::__1::__split_buffer.607", i64, %"class.std::__1::__compressed_pair.626" }
%"struct.std::__1::__split_buffer.607" = type { %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"***, %"class.std::__1::__compressed_pair.622" }
%"class.v8::internal::compiler::Instruction" = type { i32, i32, [2 x %"class.v8::internal::compiler::ParallelMove"*], %"class.v8::internal::compiler::ReferenceMap"*, %"class.v8::internal::compiler::InstructionBlock"*, [1 x %"class.v8::internal::compiler::InstructionOperand"] }
%"class.v8::internal::compiler::ParallelMove" = type { %"class.v8::internal::ZoneVector.608" }
%"class.v8::internal::compiler::ReferenceMap" = type <{ %"class.v8::internal::ZoneVector.615", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.623", %"struct.std::__1::__compressed_pair_elem.624" }
%"struct.std::__1::__compressed_pair_elem.623" = type { %"class.v8::internal::compiler::Instruction"*** }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"class.v8::internal::RecyclingZoneAllocator" }
%"class.v8::internal::RecyclingZoneAllocator" = type { %"class.v8::internal::ZoneAllocator.625", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Instruction **>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.625" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Instruction **>::FreeBlock" = type opaque
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.24", %"struct.std::__1::__compressed_pair_elem.627" }
%"struct.std::__1::__compressed_pair_elem.627" = type { %"class.v8::internal::RecyclingZoneAllocator.628" }
%"class.v8::internal::RecyclingZoneAllocator.628" = type { %"class.v8::internal::ZoneAllocator.629", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Instruction *>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.629" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Instruction *>::FreeBlock" = type opaque
%"class.v8::internal::ZoneDeque.630" = type { %"class.std::__1::deque.631" }
%"class.std::__1::deque.631" = type { %"class.std::__1::__deque_base.632" }
%"class.std::__1::__deque_base.632" = type { %"struct.std::__1::__split_buffer.633", i64, %"class.std::__1::__compressed_pair.639" }
%"struct.std::__1::__split_buffer.633" = type { %"class.v8::internal::compiler::ReferenceMap"***, %"class.v8::internal::compiler::ReferenceMap"***, %"class.v8::internal::compiler::ReferenceMap"***, %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635", %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::compiler::ReferenceMap"*** }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"class.v8::internal::RecyclingZoneAllocator.637" }
%"class.v8::internal::RecyclingZoneAllocator.637" = type { %"class.v8::internal::ZoneAllocator.638", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::ReferenceMap **>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.638" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::ReferenceMap **>::FreeBlock" = type opaque
%"class.std::__1::__compressed_pair.639" = type { %"struct.std::__1::__compressed_pair_elem.24", %"struct.std::__1::__compressed_pair_elem.640" }
%"struct.std::__1::__compressed_pair_elem.640" = type { %"class.v8::internal::RecyclingZoneAllocator.641" }
%"class.v8::internal::RecyclingZoneAllocator.641" = type { %"class.v8::internal::ZoneAllocator.642", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::ReferenceMap *>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.642" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::ReferenceMap *>::FreeBlock" = type opaque
%"class.v8::internal::ZoneVector.643" = type { %"class.std::__1::vector.644" }
%"class.std::__1::vector.644" = type { %"class.std::__1::__vector_base.645" }
%"class.std::__1::__vector_base.645" = type { i8*, i8*, %"class.std::__1::__compressed_pair.646" }
%"class.std::__1::__compressed_pair.646" = type { %"struct.std::__1::__compressed_pair_elem.647", %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.647" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::ZoneAllocator.649" }
%"class.v8::internal::ZoneAllocator.649" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.650" = type { %"class.std::__1::vector.651" }
%"class.std::__1::vector.651" = type { %"class.std::__1::__vector_base.652" }
%"class.std::__1::__vector_base.652" = type { %"class.v8::internal::compiler::DeoptimizationEntry"*, %"class.v8::internal::compiler::DeoptimizationEntry"*, %"class.std::__1::__compressed_pair.669" }
%"class.v8::internal::compiler::DeoptimizationEntry" = type { %"class.v8::internal::compiler::FrameStateDescriptor"*, i8, i8, [6 x i8], %"struct.v8::internal::compiler::FeedbackSource" }
%"class.v8::internal::compiler::FrameStateDescriptor" = type { i32, %"class.v8::internal::BytecodeOffset", %"class.v8::internal::compiler::OutputFrameStateCombine", i64, i64, i64, i64, %"class.v8::internal::compiler::StateValueList", %"class.v8::internal::MaybeHandle", %"class.v8::internal::compiler::FrameStateDescriptor"* }
%"class.v8::internal::BytecodeOffset" = type { i32 }
%"class.v8::internal::compiler::OutputFrameStateCombine" = type { i64 }
%"class.v8::internal::compiler::StateValueList" = type { %"class.v8::internal::ZoneVector.653", %"class.v8::internal::ZoneVector.661" }
%"class.v8::internal::ZoneVector.653" = type { %"class.std::__1::vector.654" }
%"class.std::__1::vector.654" = type { %"class.std::__1::__vector_base.655" }
%"class.std::__1::__vector_base.655" = type { %"class.v8::internal::compiler::StateValueDescriptor"*, %"class.v8::internal::compiler::StateValueDescriptor"*, %"class.std::__1::__compressed_pair.657" }
%"class.v8::internal::compiler::StateValueDescriptor" = type { i8, %"class.v8::internal::MachineType", %union.anon.656 }
%"class.v8::internal::MachineType" = type { i8, i8 }
%union.anon.656 = type { i64 }
%"class.std::__1::__compressed_pair.657" = type { %"struct.std::__1::__compressed_pair_elem.658", %"struct.std::__1::__compressed_pair_elem.659" }
%"struct.std::__1::__compressed_pair_elem.658" = type { %"class.v8::internal::compiler::StateValueDescriptor"* }
%"struct.std::__1::__compressed_pair_elem.659" = type { %"class.v8::internal::ZoneAllocator.660" }
%"class.v8::internal::ZoneAllocator.660" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.661" = type { %"class.std::__1::vector.662" }
%"class.std::__1::vector.662" = type { %"class.std::__1::__vector_base.663" }
%"class.std::__1::__vector_base.663" = type { %"class.v8::internal::compiler::StateValueList"**, %"class.v8::internal::compiler::StateValueList"**, %"class.std::__1::__compressed_pair.664" }
%"class.std::__1::__compressed_pair.664" = type { %"struct.std::__1::__compressed_pair_elem.665", %"struct.std::__1::__compressed_pair_elem.666" }
%"struct.std::__1::__compressed_pair_elem.665" = type { %"class.v8::internal::compiler::StateValueList"** }
%"struct.std::__1::__compressed_pair_elem.666" = type { %"class.v8::internal::ZoneAllocator.667" }
%"class.v8::internal::ZoneAllocator.667" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::MaybeHandle" = type { i64* }
%"struct.v8::internal::compiler::FeedbackSource" = type <{ %"class.v8::internal::Handle.668", %"class.v8::internal::FeedbackSlot", [4 x i8] }>
%"class.v8::internal::Handle.668" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FeedbackSlot" = type { i32 }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670", %"struct.std::__1::__compressed_pair_elem.671" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"class.v8::internal::compiler::DeoptimizationEntry"* }
%"struct.std::__1::__compressed_pair_elem.671" = type { %"class.v8::internal::ZoneAllocator.672" }
%"class.v8::internal::ZoneAllocator.672" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::InstructionBlock" = type <{ %"class.v8::internal::ZoneVector.559", %"class.v8::internal::ZoneVector.559", %"class.v8::internal::ZoneVector.565", %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber", i32, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::ZoneVector.565" = type { %"class.std::__1::vector.566" }
%"class.std::__1::vector.566" = type { %"class.std::__1::__vector_base.567" }
%"class.std::__1::__vector_base.567" = type { %"class.v8::internal::compiler::PhiInstruction"**, %"class.v8::internal::compiler::PhiInstruction"**, %"class.std::__1::__compressed_pair.574" }
%"class.v8::internal::compiler::PhiInstruction" = type { i32, %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::ZoneVector.568" }
%"class.v8::internal::ZoneVector.568" = type { %"class.std::__1::vector.569" }
%"class.std::__1::vector.569" = type { %"class.std::__1::__vector_base.570" }
%"class.std::__1::__vector_base.570" = type { i32*, i32*, %"class.std::__1::__compressed_pair.571" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.357", %"struct.std::__1::__compressed_pair_elem.572" }
%"struct.std::__1::__compressed_pair_elem.572" = type { %"class.v8::internal::ZoneAllocator.573" }
%"class.v8::internal::ZoneAllocator.573" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.575", %"struct.std::__1::__compressed_pair_elem.576" }
%"struct.std::__1::__compressed_pair_elem.575" = type { %"class.v8::internal::compiler::PhiInstruction"** }
%"struct.std::__1::__compressed_pair_elem.576" = type { %"class.v8::internal::ZoneAllocator.577" }
%"class.v8::internal::ZoneAllocator.577" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::ZoneMap.682" = type { %"class.std::__1::map.683" }
%"class.std::__1::map.683" = type { %"class.std::__1::__tree.684" }
%"class.std::__1::__tree.684" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.685", %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.685" = type { %"struct.std::__1::__compressed_pair_elem.583", %"struct.std::__1::__compressed_pair_elem.686" }
%"struct.std::__1::__compressed_pair_elem.686" = type { %"class.v8::internal::ZoneAllocator.687" }
%"class.v8::internal::ZoneAllocator.687" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::pair.693" = type <{ %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", i32, [4 x i8] }>
%"struct.v8::internal::compiler::(anonymous namespace)::MoveKey" = type { %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand" }
%"class.v8::internal::compiler::(anonymous namespace)::OperandSet" = type <{ %"class.v8::internal::ZoneVector.615"*, i32, [4 x i8] }>
%"class.std::__1::__tree_node.704" = type { %"class.std::__1::__tree_node_base.base", [7 x i8], %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.695" }
%"struct.std::__1::pair.695" = type <{ %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", i32, [4 x i8] }>
%"class.v8::internal::ZoneSet" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.675" }
%"class.std::__1::__tree.675" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.676", %"class.std::__1::__compressed_pair.679" }
%"class.std::__1::__compressed_pair.676" = type { %"struct.std::__1::__compressed_pair_elem.583", %"struct.std::__1::__compressed_pair_elem.677" }
%"struct.std::__1::__compressed_pair_elem.677" = type { %"class.v8::internal::ZoneAllocator.678" }
%"class.v8::internal::ZoneAllocator.678" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey" }

$_ZN2v88internal8compiler12ParallelMove7AddMoveERKNS1_18InstructionOperandES5_PNS0_4ZoneE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__sortIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_ = comdat any

$_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEbT0_SC_T_ = comdat any

@_ZN2v88internal8compiler13MoveOptimizerC1EPNS0_4ZoneEPNS1_19InstructionSequenceE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::InstructionSequence"*), void (%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::InstructionSequence"*)* @_ZN2v88internal8compiler13MoveOptimizerC2EPNS0_4ZoneEPNS1_19InstructionSequenceE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizerC2EPNS0_4ZoneEPNS1_19InstructionSequenceE(%"class.v8::internal::compiler::MoveOptimizer"* nocapture, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::InstructionSequence"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  store %"class.v8::internal::compiler::InstructionSequence"* %2, %"class.v8::internal::compiler::InstructionSequence"** %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2
  %7 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 1
  %9 = bitcast %"struct.std::__1::__compressed_pair_elem.613"* %8 to i64*
  %10 = bitcast %"class.v8::internal::ZoneVector.608"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #5
  store i64 %7, i64* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 1
  %13 = bitcast %"struct.std::__1::__compressed_pair_elem.620"* %12 to i64*
  %14 = bitcast %"class.v8::internal::ZoneVector.615"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #5
  store i64 %7, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1
  %17 = bitcast %"struct.std::__1::__compressed_pair_elem.620"* %16 to i64*
  %18 = bitcast %"class.v8::internal::ZoneVector.615"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #5
  store i64 %7, i64* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer3RunEv(%"class.v8::internal::compiler::MoveOptimizer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %3 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %3, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %3, i64 0, i32 8, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 9
  %9 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %5, i64 %8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %3, i64 0, i32 8, i32 0, i32 0, i32 0, i32 2
  %11 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %10, align 8
  %12 = icmp eq %"class.v8::internal::compiler::Instruction"*** %11, %5
  br i1 %12, label %28, label %13

13:                                               ; preds = %1
  %14 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %9, align 8
  %15 = and i64 %7, 511
  %16 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %14, i64 %15
  %17 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %3, i64 0, i32 8, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %7
  %20 = lshr i64 %19, 9
  %21 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %5, i64 %20
  %22 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %21, align 8
  %23 = and i64 %19, 511
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %22, i64 %23
  %25 = icmp eq %"class.v8::internal::compiler::Instruction"** %24, %16
  br i1 %25, label %28, label %37

26:                                               ; preds = %51
  %27 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  br label %28

28:                                               ; preds = %1, %26, %13
  %29 = phi %"class.v8::internal::compiler::InstructionSequence"* [ %27, %26 ], [ %3, %13 ], [ %3, %1 ]
  %30 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %29, i64 0, i32 2
  %31 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.v8::internal::compiler::InstructionBlock"**, %"class.v8::internal::compiler::InstructionBlock"*** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %31, i64 0, i32 0, i32 0, i32 1
  %35 = load %"class.v8::internal::compiler::InstructionBlock"**, %"class.v8::internal::compiler::InstructionBlock"*** %34, align 8
  %36 = icmp eq %"class.v8::internal::compiler::InstructionBlock"** %33, %35
  br i1 %36, label %111, label %64

37:                                               ; preds = %13, %51
  %38 = phi %"class.v8::internal::compiler::Instruction"** [ %54, %51 ], [ %16, %13 ]
  %39 = phi %"class.v8::internal::compiler::Instruction"*** [ %52, %51 ], [ %9, %13 ]
  %40 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %38, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer12CompressGapsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %40)
  %41 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %38, i64 1
  %42 = ptrtoint %"class.v8::internal::compiler::Instruction"** %41 to i64
  %43 = bitcast %"class.v8::internal::compiler::Instruction"*** %39 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = icmp eq i64 %45, 4096
  br i1 %46, label %47, label %51

47:                                               ; preds = %37
  %48 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %39, i64 1
  %49 = bitcast %"class.v8::internal::compiler::Instruction"*** %48 to i64*
  %50 = load i64, i64* %49, align 8
  br label %51

51:                                               ; preds = %37, %47
  %52 = phi %"class.v8::internal::compiler::Instruction"*** [ %48, %47 ], [ %39, %37 ]
  %53 = phi i64 [ %50, %47 ], [ %42, %37 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::compiler::Instruction"**
  %55 = icmp eq %"class.v8::internal::compiler::Instruction"** %24, %54
  br i1 %55, label %26, label %37

56:                                               ; preds = %105
  %57 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %108, i64 0, i32 2
  %58 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::compiler::InstructionBlock"**, %"class.v8::internal::compiler::InstructionBlock"*** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %58, i64 0, i32 0, i32 0, i32 1
  %62 = load %"class.v8::internal::compiler::InstructionBlock"**, %"class.v8::internal::compiler::InstructionBlock"*** %61, align 8
  %63 = icmp eq %"class.v8::internal::compiler::InstructionBlock"** %60, %62
  br i1 %63, label %111, label %135

64:                                               ; preds = %28, %105
  %65 = phi %"class.v8::internal::compiler::InstructionSequence"* [ %108, %105 ], [ %29, %28 ]
  %66 = phi %"class.v8::internal::compiler::InstructionBlock"** [ %106, %105 ], [ %33, %28 ]
  %67 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %67, i64 0, i32 8
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %67, i64 0, i32 9
  %71 = load i32, i32* %70, align 8
  %72 = add i32 %71, -1
  %73 = sext i32 %69 to i64
  %74 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %65, i64 0, i32 8, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %73
  %77 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %65, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %78 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %77, align 8
  %79 = lshr i64 %76, 9
  %80 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %78, i64 %79
  %81 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %80, align 8
  %82 = and i64 %76, 511
  %83 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %81, i64 %82
  %84 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %83, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %84) #5
  %85 = icmp slt i32 %69, %72
  br i1 %85, label %86, label %105

86:                                               ; preds = %64
  %87 = sext i32 %72 to i64
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ %73, %86 ], [ %91, %88 ]
  %90 = phi %"class.v8::internal::compiler::Instruction"* [ %84, %86 ], [ %103, %88 ]
  %91 = add nsw i64 %89, 1
  %92 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  %93 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %92, i64 0, i32 8, i32 0, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, %91
  %96 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %92, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %97 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %96, align 8
  %98 = lshr i64 %95, 9
  %99 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %97, i64 %98
  %100 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %99, align 8
  %101 = and i64 %95, 511
  %102 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %100, i64 %101
  %103 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %102, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer12MigrateMovesEPNS1_11InstructionES4_(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %103, %"class.v8::internal::compiler::Instruction"* %90) #5
  tail call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %103) #5
  %104 = icmp eq i64 %91, %87
  br i1 %104, label %105, label %88

105:                                              ; preds = %88, %64
  %106 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %66, i64 1
  %107 = icmp eq %"class.v8::internal::compiler::InstructionBlock"** %106, %35
  %108 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  br i1 %107, label %56, label %64

109:                                              ; preds = %186
  %110 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  br label %111

111:                                              ; preds = %28, %109, %56
  %112 = phi %"class.v8::internal::compiler::InstructionSequence"* [ %110, %109 ], [ %108, %56 ], [ %29, %28 ]
  %113 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %112, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %114 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %113, align 8
  %115 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %112, i64 0, i32 8, i32 0, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = lshr i64 %116, 9
  %118 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %114, i64 %117
  %119 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %112, i64 0, i32 8, i32 0, i32 0, i32 0, i32 2
  %120 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %119, align 8
  %121 = icmp eq %"class.v8::internal::compiler::Instruction"*** %120, %114
  br i1 %121, label %189, label %122

122:                                              ; preds = %111
  %123 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %118, align 8
  %124 = and i64 %116, 511
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %123, i64 %124
  %126 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %112, i64 0, i32 8, i32 0, i32 0, i32 2, i32 0, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, %116
  %129 = lshr i64 %128, 9
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %114, i64 %129
  %131 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %130, align 8
  %132 = and i64 %128, 511
  %133 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %131, i64 %132
  %134 = icmp eq %"class.v8::internal::compiler::Instruction"** %133, %125
  br i1 %134, label %189, label %190

135:                                              ; preds = %56, %186
  %136 = phi %"class.v8::internal::compiler::InstructionBlock"** [ %187, %186 ], [ %60, %56 ]
  %137 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %137, i64 0, i32 1, i32 0
  %139 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %137, i64 0, i32 1, i32 0, i32 0, i32 1
  %140 = bitcast %"class.v8::internal::compiler::RpoNumber"** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.std::__1::vector.560"* %138 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = sub i64 %141, %143
  %145 = ashr exact i64 %144, 2
  %146 = icmp ult i64 %145, 2
  %147 = inttoptr i64 %143 to %"class.v8::internal::compiler::RpoNumber"*
  %148 = inttoptr i64 %141 to %"class.v8::internal::compiler::RpoNumber"*
  br i1 %146, label %186, label %149

149:                                              ; preds = %135
  %150 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %137, i64 0, i32 10
  %151 = load i8, i8* %150, align 4, !range !2
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %153, label %185

153:                                              ; preds = %149
  %154 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %147, %148
  br i1 %154, label %186, label %155

155:                                              ; preds = %153
  %156 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %2, align 8
  %157 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %156, i64 0, i32 2
  %158 = bitcast %"class.v8::internal::ZoneVector"** %157 to %"class.std::__1::vector.557"**
  %159 = load %"class.std::__1::vector.557"*, %"class.std::__1::vector.557"** %158, align 8
  %160 = getelementptr inbounds %"class.std::__1::vector.557", %"class.std::__1::vector.557"* %159, i64 0, i32 0, i32 1
  %161 = bitcast %"class.v8::internal::compiler::InstructionBlock"*** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.std::__1::vector.557"* %159 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sub i64 %162, %164
  %166 = ashr exact i64 %165, 3
  %167 = inttoptr i64 %164 to %"class.v8::internal::compiler::InstructionBlock"**
  br label %170

168:                                              ; preds = %178
  %169 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %184, %148
  br i1 %169, label %186, label %170

170:                                              ; preds = %155, %168
  %171 = phi %"class.v8::internal::compiler::RpoNumber"* [ %147, %155 ], [ %184, %168 ]
  %172 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %171, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  %174 = sext i32 %173 to i64
  %175 = icmp ugt i64 %166, %174
  br i1 %175, label %178, label %176

176:                                              ; preds = %170
  %177 = bitcast %"class.std::__1::vector.557"* %159 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %177) #6
  unreachable

178:                                              ; preds = %170
  %179 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %167, i64 %174
  %180 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %179, align 8
  %181 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %180, i64 0, i32 10
  %182 = load i8, i8* %181, align 4, !range !2
  %183 = icmp eq i8 %182, 0
  %184 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %171, i64 1
  br i1 %183, label %185, label %168

185:                                              ; preds = %178, %149
  tail call void @_ZN2v88internal8compiler13MoveOptimizer13OptimizeMergeEPNS1_16InstructionBlockE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::InstructionBlock"* %137)
  br label %186

186:                                              ; preds = %168, %153, %135, %185
  %187 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %136, i64 1
  %188 = icmp eq %"class.v8::internal::compiler::InstructionBlock"** %187, %62
  br i1 %188, label %109, label %135

189:                                              ; preds = %204, %111, %122
  ret void

190:                                              ; preds = %122, %204
  %191 = phi %"class.v8::internal::compiler::Instruction"** [ %207, %204 ], [ %125, %122 ]
  %192 = phi %"class.v8::internal::compiler::Instruction"*** [ %206, %204 ], [ %118, %122 ]
  %193 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %191, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer13FinalizeMovesEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %193)
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %191, i64 1
  %195 = ptrtoint %"class.v8::internal::compiler::Instruction"** %194 to i64
  %196 = bitcast %"class.v8::internal::compiler::Instruction"*** %192 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %195, %197
  %199 = icmp eq i64 %198, 4096
  br i1 %199, label %200, label %204

200:                                              ; preds = %190
  %201 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %192, i64 1
  %202 = bitcast %"class.v8::internal::compiler::Instruction"*** %201 to i64*
  %203 = load i64, i64* %202, align 8
  br label %204

204:                                              ; preds = %190, %200
  %205 = phi i64 [ %203, %200 ], [ %195, %190 ]
  %206 = phi %"class.v8::internal::compiler::Instruction"*** [ %201, %200 ], [ %192, %190 ]
  %207 = inttoptr i64 %205 to %"class.v8::internal::compiler::Instruction"**
  %208 = icmp eq %"class.v8::internal::compiler::Instruction"** %133, %207
  br i1 %208, label %189, label %190
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer12CompressGapsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::Instruction"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 0
  %4 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %4, null
  br i1 %5, label %67, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %9, align 8
  %11 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %8, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %6
  %13 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %8 to i64
  br label %64

14:                                               ; preds = %6, %57
  %15 = phi %"class.v8::internal::compiler::MoveOperands"** [ %59, %57 ], [ %8, %6 ]
  %16 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %16, i64 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 7
  switch i64 %19, label %20 [
    i64 0, label %57
    i64 4, label %137
  ]

20:                                               ; preds = %14
  %21 = icmp ugt i64 %19, 4
  br i1 %21, label %22, label %35

22:                                               ; preds = %20
  %23 = and i64 %18, 24
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = lshr i64 %18, 5
  %27 = trunc i64 %26 to i8
  %28 = icmp ugt i8 %27, 11
  %29 = select i1 %28, i64 416, i64 0
  br label %30

30:                                               ; preds = %25, %22
  %31 = phi i64 [ 0, %22 ], [ %29, %25 ]
  %32 = and i64 %18, -8168
  %33 = or i64 %32, %31
  %34 = or i64 %33, 5
  br label %35

35:                                               ; preds = %30, %20
  %36 = phi i64 [ %34, %30 ], [ %18, %20 ]
  %37 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %16, i64 0, i32 1, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 7
  %40 = icmp ugt i64 %39, 4
  br i1 %40, label %41, label %54

41:                                               ; preds = %35
  %42 = and i64 %38, 24
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %41
  %45 = lshr i64 %38, 5
  %46 = trunc i64 %45 to i8
  %47 = icmp ugt i8 %46, 11
  %48 = select i1 %47, i64 416, i64 0
  br label %49

49:                                               ; preds = %44, %41
  %50 = phi i64 [ 0, %41 ], [ %48, %44 ]
  %51 = and i64 %38, -8168
  %52 = or i64 %51, %50
  %53 = or i64 %52, 5
  br label %54

54:                                               ; preds = %49, %35
  %55 = phi i64 [ %53, %49 ], [ %38, %35 ]
  %56 = icmp eq i64 %36, %55
  br i1 %56, label %57, label %137

57:                                               ; preds = %54, %14
  %58 = bitcast %"class.v8::internal::compiler::MoveOperands"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #5
  %59 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %15, i64 1
  %60 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %59, %10
  br i1 %60, label %61, label %14

61:                                               ; preds = %57
  %62 = bitcast %"class.v8::internal::compiler::ParallelMove"* %4 to i64*
  %63 = load i64, i64* %62, align 8
  br label %64

64:                                               ; preds = %61, %12
  %65 = phi i64 [ %63, %61 ], [ %13, %12 ]
  %66 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %9 to i64*
  store i64 %65, i64* %66, align 8
  br label %67

67:                                               ; preds = %64, %2
  %68 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 1
  %69 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %68, align 8
  %70 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %69, null
  br i1 %70, label %142, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %69, i64 0, i32 0, i32 0, i32 0, i32 0
  %73 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %69, i64 0, i32 0, i32 0, i32 0, i32 1
  %75 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %74, align 8
  %76 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %73, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %71
  %78 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %73 to i64
  br label %129

79:                                               ; preds = %71, %122
  %80 = phi %"class.v8::internal::compiler::MoveOperands"** [ %124, %122 ], [ %73, %71 ]
  %81 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %81, i64 0, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, 7
  switch i64 %84, label %85 [
    i64 0, label %122
    i64 4, label %132
  ]

85:                                               ; preds = %79
  %86 = icmp ugt i64 %84, 4
  br i1 %86, label %87, label %100

87:                                               ; preds = %85
  %88 = and i64 %83, 24
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %95

90:                                               ; preds = %87
  %91 = lshr i64 %83, 5
  %92 = trunc i64 %91 to i8
  %93 = icmp ugt i8 %92, 11
  %94 = select i1 %93, i64 416, i64 0
  br label %95

95:                                               ; preds = %90, %87
  %96 = phi i64 [ 0, %87 ], [ %94, %90 ]
  %97 = and i64 %83, -8168
  %98 = or i64 %97, %96
  %99 = or i64 %98, 5
  br label %100

100:                                              ; preds = %95, %85
  %101 = phi i64 [ %99, %95 ], [ %83, %85 ]
  %102 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %81, i64 0, i32 1, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = and i64 %103, 7
  %105 = icmp ugt i64 %104, 4
  br i1 %105, label %106, label %119

106:                                              ; preds = %100
  %107 = and i64 %103, 24
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = lshr i64 %103, 5
  %111 = trunc i64 %110 to i8
  %112 = icmp ugt i8 %111, 11
  %113 = select i1 %112, i64 416, i64 0
  br label %114

114:                                              ; preds = %109, %106
  %115 = phi i64 [ 0, %106 ], [ %113, %109 ]
  %116 = and i64 %103, -8168
  %117 = or i64 %116, %115
  %118 = or i64 %117, 5
  br label %119

119:                                              ; preds = %114, %100
  %120 = phi i64 [ %118, %114 ], [ %103, %100 ]
  %121 = icmp eq i64 %101, %120
  br i1 %121, label %122, label %132

122:                                              ; preds = %119, %79
  %123 = bitcast %"class.v8::internal::compiler::MoveOperands"* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 16, i1 false) #5
  %124 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %80, i64 1
  %125 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %124, %75
  br i1 %125, label %126, label %79

126:                                              ; preds = %122
  %127 = bitcast %"class.v8::internal::compiler::ParallelMove"* %69 to i64*
  %128 = load i64, i64* %127, align 8
  br label %129

129:                                              ; preds = %126, %77
  %130 = phi i64 [ %128, %126 ], [ %78, %77 ]
  %131 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %74 to i64*
  store i64 %130, i64* %131, align 8
  br label %142

132:                                              ; preds = %119, %79
  %133 = bitcast %"class.v8::internal::compiler::ParallelMove"** %3 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 8
  %135 = shufflevector <2 x i64> %134, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %136 = bitcast %"class.v8::internal::compiler::ParallelMove"** %3 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %136, align 8
  br label %142

137:                                              ; preds = %54, %14
  %138 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %3, align 8
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 1
  %140 = bitcast %"class.v8::internal::compiler::ParallelMove"** %139 to %"class.v8::internal::ZoneVector.608"**
  %141 = load %"class.v8::internal::ZoneVector.608"*, %"class.v8::internal::ZoneVector.608"** %140, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer13CompressMovesEPNS1_12ParallelMoveEPNS0_10ZoneVectorIPNS1_12MoveOperandsEEE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::ParallelMove"* %138, %"class.v8::internal::ZoneVector.608"* %141)
  br label %142

142:                                              ; preds = %67, %129, %137, %132
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer13CompressBlockEPNS1_16InstructionBlockE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::InstructionBlock"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 8
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %9 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %8, align 8
  %10 = sext i32 %4 to i64
  %11 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %9, i64 0, i32 8, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %9, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %15 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %14, align 8
  %16 = lshr i64 %13, 9
  %17 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %15, i64 %16
  %18 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %17, align 8
  %19 = and i64 %13, 511
  %20 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %18, i64 %19
  %21 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %20, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %21)
  %22 = icmp slt i32 %4, %7
  br i1 %22, label %23, label %25

23:                                               ; preds = %2
  %24 = sext i32 %7 to i64
  br label %26

25:                                               ; preds = %26, %2
  ret void

26:                                               ; preds = %26, %23
  %27 = phi i64 [ %10, %23 ], [ %29, %26 ]
  %28 = phi %"class.v8::internal::compiler::Instruction"* [ %21, %23 ], [ %41, %26 ]
  %29 = add nsw i64 %27, 1
  %30 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %8, align 8
  %31 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %30, i64 0, i32 8, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %29
  %34 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %30, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %35 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %34, align 8
  %36 = lshr i64 %33, 9
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %35, i64 %36
  %38 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %37, align 8
  %39 = and i64 %33, 511
  %40 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %38, i64 %39
  %41 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %40, align 8
  tail call void @_ZN2v88internal8compiler13MoveOptimizer12MigrateMovesEPNS1_11InstructionES4_(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %41, %"class.v8::internal::compiler::Instruction"* %28)
  tail call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %41)
  %42 = icmp eq i64 %29, %24
  br i1 %42, label %25, label %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer13OptimizeMergeEPNS1_16InstructionBlockE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::InstructionBlock"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::ZoneMap.682", align 8
  %4 = alloca %"struct.std::__1::pair.693", align 8
  %5 = alloca %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", align 8
  %6 = alloca %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.v8::internal::compiler::RpoNumber"*, %"class.v8::internal::compiler::RpoNumber"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load %"class.v8::internal::compiler::RpoNumber"*, %"class.v8::internal::compiler::RpoNumber"** %9, align 8
  %11 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %8, %10
  br i1 %11, label %87, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %14 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %14, i64 0, i32 2
  %16 = bitcast %"class.v8::internal::ZoneVector"** %15 to %"class.std::__1::vector.557"**
  %17 = load %"class.std::__1::vector.557"*, %"class.std::__1::vector.557"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.557", %"class.std::__1::vector.557"* %17, i64 0, i32 0, i32 1
  %19 = bitcast %"class.v8::internal::compiler::InstructionBlock"*** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector.557"* %17 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 3
  %25 = inttoptr i64 %22 to %"class.v8::internal::compiler::InstructionBlock"**
  %26 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %14, i64 0, i32 8, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %14, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  br label %28

28:                                               ; preds = %12, %84
  %29 = phi %"class.v8::internal::compiler::RpoNumber"* [ %8, %12 ], [ %85, %84 ]
  %30 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = icmp ugt i64 %24, %32
  br i1 %33, label %36, label %34

34:                                               ; preds = %28
  %35 = bitcast %"class.std::__1::vector.557"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %35) #6
  unreachable

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %25, i64 %32
  %38 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %38, i64 0, i32 0, i32 0, i32 0, i32 1
  %40 = bitcast %"class.v8::internal::compiler::RpoNumber"** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.v8::internal::compiler::InstructionBlock"* %38 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp ugt i64 %45, 1
  br i1 %46, label %1394, label %47

47:                                               ; preds = %36
  %48 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %38, i64 0, i32 9
  %49 = load i32, i32* %48, align 8
  %50 = add nsw i32 %49, -1
  %51 = sext i32 %50 to i64
  %52 = load i64, i64* %26, align 8
  %53 = add i64 %52, %51
  %54 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %27, align 8
  %55 = lshr i64 %53, 9
  %56 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %54, i64 %55
  %57 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %56, align 8
  %58 = and i64 %53, 511
  %59 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %57, i64 %58
  %60 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %60, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 2130706432
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %1394

65:                                               ; preds = %47
  %66 = and i32 %62, 255
  %67 = zext i32 %66 to i64
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %69, label %1394

69:                                               ; preds = %65
  %70 = lshr i32 %62, 8
  %71 = and i32 %70, 65535
  %72 = zext i32 %71 to i64
  %73 = icmp eq i32 %71, 0
  br i1 %73, label %84, label %76

74:                                               ; preds = %76
  %75 = icmp eq i64 %83, %72
  br i1 %75, label %84, label %76

76:                                               ; preds = %69, %74
  %77 = phi i64 [ %83, %74 ], [ 0, %69 ]
  %78 = add nuw nsw i64 %77, %67
  %79 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %60, i64 0, i32 5, i64 %78, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = and i64 %80, 6
  %82 = icmp eq i64 %81, 2
  %83 = add nuw nsw i64 %77, 1
  br i1 %82, label %74, label %1394

84:                                               ; preds = %74, %69
  %85 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %29, i64 1
  %86 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %85, %10
  br i1 %86, label %87, label %28

87:                                               ; preds = %84, %2
  %88 = bitcast %"class.v8::internal::ZoneMap.682"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %88) #5
  %89 = bitcast %"class.v8::internal::compiler::MoveOptimizer"* %0 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 1
  %93 = bitcast %"struct.std::__1::__compressed_pair_elem.686"* %92 to i64*
  %94 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1
  %95 = bitcast %"class.std::__1::__compressed_pair.685"* %94 to i64*
  store i64 0, i64* %95, align 8
  store i64 %90, i64* %93, align 8
  %96 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %97, %"class.std::__1::__tree_end_node"** %91, align 8
  br i1 %11, label %1393, label %98

98:                                               ; preds = %87
  %99 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %100 = bitcast %"struct.std::__1::pair.693"* %4 to i8*
  %101 = getelementptr inbounds %"struct.std::__1::pair.693", %"struct.std::__1::pair.693"* %4, i64 0, i32 0, i32 0, i32 0
  %102 = getelementptr inbounds %"struct.std::__1::pair.693", %"struct.std::__1::pair.693"* %4, i64 0, i32 0, i32 1, i32 0
  %103 = getelementptr inbounds %"struct.std::__1::pair.693", %"struct.std::__1::pair.693"* %4, i64 0, i32 1
  %104 = getelementptr inbounds %"struct.std::__1::pair.693", %"struct.std::__1::pair.693"* %4, i64 0, i32 0
  %105 = bitcast %"class.std::__1::__tree_end_node"* %97 to %"class.std::__1::__tree_node.704"**
  %106 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %97, i64 0, i32 0
  %108 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %109 = bitcast %"class.v8::internal::ZoneMap.682"* %3 to i64*
  %110 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 1, i32 0
  %111 = bitcast %"class.v8::internal::compiler::RpoNumber"** %9 to i64*
  %112 = bitcast %"class.std::__1::vector.560"* %110 to i64*
  br label %113

113:                                              ; preds = %98, %455
  %114 = phi i64 [ 0, %98 ], [ %451, %455 ]
  %115 = phi i64 [ 0, %98 ], [ %452, %455 ]
  %116 = phi %"class.v8::internal::compiler::RpoNumber"* [ %8, %98 ], [ %456, %455 ]
  %117 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %99, align 8
  %118 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %116, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %117, i64 0, i32 2
  %121 = bitcast %"class.v8::internal::ZoneVector"** %120 to %"class.std::__1::vector.557"**
  %122 = load %"class.std::__1::vector.557"*, %"class.std::__1::vector.557"** %121, align 8
  %123 = sext i32 %119 to i64
  %124 = getelementptr inbounds %"class.std::__1::vector.557", %"class.std::__1::vector.557"* %122, i64 0, i32 0, i32 1
  %125 = bitcast %"class.v8::internal::compiler::InstructionBlock"*** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.std::__1::vector.557"* %122 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %126, %128
  %130 = ashr exact i64 %129, 3
  %131 = icmp ugt i64 %130, %123
  br i1 %131, label %134, label %132

132:                                              ; preds = %113
  %133 = bitcast %"class.std::__1::vector.557"* %122 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %133) #6
  unreachable

134:                                              ; preds = %113
  %135 = inttoptr i64 %128 to %"class.v8::internal::compiler::InstructionBlock"**
  %136 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %135, i64 %123
  %137 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %137, i64 0, i32 9
  %139 = load i32, i32* %138, align 8
  %140 = add nsw i32 %139, -1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %117, i64 0, i32 8, i32 0, i32 0, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = add i64 %143, %141
  %145 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %117, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %146 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %145, align 8
  %147 = lshr i64 %144, 9
  %148 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %146, i64 %147
  %149 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %148, align 8
  %150 = and i64 %144, 511
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %149, i64 %150
  %152 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %151, align 8
  %153 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %152, i64 0, i32 2, i64 0
  %154 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %153, align 8
  %155 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %154, null
  br i1 %155, label %1393, label %156

156:                                              ; preds = %134
  %157 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %154, i64 0, i32 0, i32 0, i32 0, i32 0
  %158 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %157, align 8
  %159 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %154, i64 0, i32 0, i32 0, i32 0, i32 1
  %160 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %159, align 8
  %161 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %158, %160
  br i1 %161, label %1393, label %162

162:                                              ; preds = %156, %450
  %163 = phi i64 [ %451, %450 ], [ %114, %156 ]
  %164 = phi i64 [ %452, %450 ], [ %115, %156 ]
  %165 = phi %"class.v8::internal::compiler::MoveOperands"** [ %453, %450 ], [ %158, %156 ]
  %166 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %165, align 8
  %167 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %166, i64 0, i32 0, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = and i64 %168, 7
  switch i64 %169, label %173 [
    i64 0, label %450
    i64 4, label %170
  ]

170:                                              ; preds = %162
  %171 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %166, i64 0, i32 1, i32 0
  %172 = load i64, i64* %171, align 8
  br label %210

173:                                              ; preds = %162
  %174 = icmp ugt i64 %169, 4
  br i1 %174, label %175, label %188

175:                                              ; preds = %173
  %176 = and i64 %168, 24
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %183

178:                                              ; preds = %175
  %179 = lshr i64 %168, 5
  %180 = trunc i64 %179 to i8
  %181 = icmp ugt i8 %180, 11
  %182 = select i1 %181, i64 416, i64 0
  br label %183

183:                                              ; preds = %178, %175
  %184 = phi i64 [ 0, %175 ], [ %182, %178 ]
  %185 = and i64 %168, -8168
  %186 = or i64 %185, %184
  %187 = or i64 %186, 5
  br label %188

188:                                              ; preds = %183, %173
  %189 = phi i64 [ %187, %183 ], [ %168, %173 ]
  %190 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %166, i64 0, i32 1, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = and i64 %191, 7
  %193 = icmp ugt i64 %192, 4
  br i1 %193, label %194, label %207

194:                                              ; preds = %188
  %195 = and i64 %191, 24
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %202

197:                                              ; preds = %194
  %198 = lshr i64 %191, 5
  %199 = trunc i64 %198 to i8
  %200 = icmp ugt i8 %199, 11
  %201 = select i1 %200, i64 416, i64 0
  br label %202

202:                                              ; preds = %197, %194
  %203 = phi i64 [ 0, %194 ], [ %201, %197 ]
  %204 = and i64 %191, -8168
  %205 = or i64 %204, %203
  %206 = or i64 %205, 5
  br label %207

207:                                              ; preds = %188, %202
  %208 = phi i64 [ %206, %202 ], [ %191, %188 ]
  %209 = icmp eq i64 %189, %208
  br i1 %209, label %450, label %210

210:                                              ; preds = %170, %207
  %211 = phi i64 [ %172, %170 ], [ %191, %207 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %100) #5
  store i64 %168, i64* %101, align 8
  store i64 %211, i64* %102, align 8
  store i32 1, i32* %103, align 8, !alias.scope !3
  %212 = load %"class.std::__1::__tree_node.704"*, %"class.std::__1::__tree_node.704"** %105, align 8
  %213 = icmp eq %"class.std::__1::__tree_node.704"* %212, null
  br i1 %213, label %398, label %214

214:                                              ; preds = %210
  %215 = icmp eq i64 %169, 4
  %216 = icmp ugt i64 %169, 4
  %217 = and i64 %168, 24
  %218 = icmp eq i64 %217, 0
  %219 = lshr i64 %168, 5
  %220 = trunc i64 %219 to i8
  %221 = icmp ugt i8 %220, 11
  %222 = and i64 %168, -8168
  %223 = and i64 %211, 7
  %224 = icmp ugt i64 %223, 4
  %225 = and i64 %211, 24
  %226 = icmp eq i64 %225, 0
  %227 = lshr i64 %211, 5
  %228 = trunc i64 %227 to i8
  %229 = icmp ugt i8 %228, 11
  %230 = and i64 %211, -8168
  %231 = and i1 %218, %221
  %232 = select i1 %231, i64 416, i64 0
  %233 = or i64 %222, %232
  %234 = or i64 %233, 5
  %235 = select i1 %216, i64 %234, i64 %168
  %236 = and i1 %226, %229
  %237 = select i1 %236, i64 416, i64 0
  %238 = or i64 %230, %237
  %239 = or i64 %238, 5
  %240 = select i1 %224, i64 %239, i64 %211
  br label %241

241:                                              ; preds = %394, %214
  %242 = phi %"class.std::__1::__tree_node.704"* [ %397, %394 ], [ %212, %214 ]
  %243 = phi %"class.std::__1::__tree_node_base"** [ %396, %394 ], [ %106, %214 ]
  %244 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 2
  br i1 %215, label %245, label %252

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %244, i64 0, i32 0, i32 0
  %247 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %246, %104
  br i1 %247, label %273, label %248

248:                                              ; preds = %245
  %249 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %244, i64 0, i32 0, i32 0, i32 0, i32 0
  %250 = load i64, i64* %249, align 8
  %251 = and i64 %250, 7
  br label %297

252:                                              ; preds = %241
  %253 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %244, i64 0, i32 0, i32 0, i32 0, i32 0
  %254 = load i64, i64* %253, align 8
  %255 = and i64 %254, 7
  %256 = icmp ugt i64 %255, 4
  br i1 %256, label %257, label %270

257:                                              ; preds = %252
  %258 = and i64 %254, 24
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %265

260:                                              ; preds = %257
  %261 = lshr i64 %254, 5
  %262 = trunc i64 %261 to i8
  %263 = icmp ugt i8 %262, 11
  %264 = select i1 %263, i64 416, i64 0
  br label %265

265:                                              ; preds = %260, %257
  %266 = phi i64 [ 0, %257 ], [ %264, %260 ]
  %267 = and i64 %254, -8168
  %268 = or i64 %267, %266
  %269 = or i64 %268, 5
  br label %270

270:                                              ; preds = %265, %252
  %271 = phi i64 [ %269, %265 ], [ %254, %252 ]
  %272 = icmp eq i64 %235, %271
  br i1 %272, label %273, label %297

273:                                              ; preds = %270, %245
  %274 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %275 = load i64, i64* %274, align 8
  %276 = and i64 %275, 7
  %277 = icmp ugt i64 %276, 4
  br i1 %277, label %278, label %291

278:                                              ; preds = %273
  %279 = and i64 %275, 24
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %286

281:                                              ; preds = %278
  %282 = lshr i64 %275, 5
  %283 = trunc i64 %282 to i8
  %284 = icmp ugt i8 %283, 11
  %285 = select i1 %284, i64 416, i64 0
  br label %286

286:                                              ; preds = %281, %278
  %287 = phi i64 [ 0, %278 ], [ %285, %281 ]
  %288 = and i64 %275, -8168
  %289 = or i64 %288, %287
  %290 = or i64 %289, 5
  br label %291

291:                                              ; preds = %286, %273
  %292 = phi i64 [ %290, %286 ], [ %275, %273 ]
  %293 = icmp ult i64 %240, %292
  br i1 %293, label %317, label %294

294:                                              ; preds = %291
  %295 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %244, i64 0, i32 0, i32 0, i32 0, i32 0
  %296 = load i64, i64* %295, align 8
  br label %323

297:                                              ; preds = %270, %248
  %298 = phi i64 [ %251, %248 ], [ %255, %270 ]
  %299 = phi i64 [ %250, %248 ], [ %254, %270 ]
  %300 = icmp ugt i64 %298, 4
  br i1 %300, label %301, label %314

301:                                              ; preds = %297
  %302 = and i64 %299, 24
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %309

304:                                              ; preds = %301
  %305 = lshr i64 %299, 5
  %306 = trunc i64 %305 to i8
  %307 = icmp ugt i8 %306, 11
  %308 = select i1 %307, i64 416, i64 0
  br label %309

309:                                              ; preds = %304, %301
  %310 = phi i64 [ 0, %301 ], [ %308, %304 ]
  %311 = and i64 %299, -8168
  %312 = or i64 %311, %310
  %313 = or i64 %312, 5
  br label %314

314:                                              ; preds = %309, %297
  %315 = phi i64 [ %313, %309 ], [ %299, %297 ]
  %316 = icmp ult i64 %235, %315
  br i1 %316, label %317, label %323

317:                                              ; preds = %314, %291
  %318 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 0, i32 0, i32 0
  %319 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %318, align 8
  %320 = icmp eq %"class.std::__1::__tree_node_base"* %319, null
  br i1 %320, label %321, label %394

321:                                              ; preds = %317
  %322 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 0, i32 0
  br label %398

323:                                              ; preds = %314, %294
  %324 = phi i64 [ %296, %294 ], [ %299, %314 ]
  %325 = and i64 %324, 7
  %326 = icmp eq i64 %325, 4
  br i1 %326, label %327, label %330

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %244, i64 0, i32 0, i32 0
  %329 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %328, %104
  br i1 %329, label %348, label %383

330:                                              ; preds = %323
  %331 = icmp ugt i64 %325, 4
  br i1 %331, label %332, label %345

332:                                              ; preds = %330
  %333 = and i64 %324, 24
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %340

335:                                              ; preds = %332
  %336 = lshr i64 %324, 5
  %337 = trunc i64 %336 to i8
  %338 = icmp ugt i8 %337, 11
  %339 = select i1 %338, i64 416, i64 0
  br label %340

340:                                              ; preds = %335, %332
  %341 = phi i64 [ 0, %332 ], [ %339, %335 ]
  %342 = and i64 %324, -8168
  %343 = or i64 %342, %341
  %344 = or i64 %343, 5
  br label %345

345:                                              ; preds = %340, %330
  %346 = phi i64 [ %344, %340 ], [ %324, %330 ]
  %347 = icmp eq i64 %346, %235
  br i1 %347, label %348, label %369

348:                                              ; preds = %345, %327
  %349 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %350 = load i64, i64* %349, align 8
  %351 = and i64 %350, 7
  %352 = icmp ugt i64 %351, 4
  br i1 %352, label %353, label %366

353:                                              ; preds = %348
  %354 = and i64 %350, 24
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %361

356:                                              ; preds = %353
  %357 = lshr i64 %350, 5
  %358 = trunc i64 %357 to i8
  %359 = icmp ugt i8 %358, 11
  %360 = select i1 %359, i64 416, i64 0
  br label %361

361:                                              ; preds = %356, %353
  %362 = phi i64 [ 0, %353 ], [ %360, %356 ]
  %363 = and i64 %350, -8168
  %364 = or i64 %363, %362
  %365 = or i64 %364, 5
  br label %366

366:                                              ; preds = %361, %348
  %367 = phi i64 [ %365, %361 ], [ %350, %348 ]
  %368 = icmp ult i64 %367, %240
  br i1 %368, label %386, label %392

369:                                              ; preds = %345
  br i1 %331, label %370, label %383

370:                                              ; preds = %369
  %371 = and i64 %324, 24
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %378

373:                                              ; preds = %370
  %374 = lshr i64 %324, 5
  %375 = trunc i64 %374 to i8
  %376 = icmp ugt i8 %375, 11
  %377 = select i1 %376, i64 416, i64 0
  br label %378

378:                                              ; preds = %373, %370
  %379 = phi i64 [ 0, %370 ], [ %377, %373 ]
  %380 = and i64 %324, -8168
  %381 = or i64 %380, %379
  %382 = or i64 %381, 5
  br label %383

383:                                              ; preds = %378, %369, %327
  %384 = phi i64 [ %382, %378 ], [ %324, %369 ], [ %324, %327 ]
  %385 = icmp ult i64 %384, %235
  br i1 %385, label %386, label %392

386:                                              ; preds = %383, %366
  %387 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 0, i32 1
  %388 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %387, align 8
  %389 = icmp eq %"class.std::__1::__tree_node_base"* %388, null
  br i1 %389, label %390, label %394

390:                                              ; preds = %386
  %391 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 0, i32 0
  br label %398

392:                                              ; preds = %383, %366
  %393 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %242, i64 0, i32 0, i32 0
  br label %398

394:                                              ; preds = %386, %317
  %395 = phi %"class.std::__1::__tree_node_base"* [ %319, %317 ], [ %388, %386 ]
  %396 = phi %"class.std::__1::__tree_node_base"** [ %318, %317 ], [ %387, %386 ]
  %397 = bitcast %"class.std::__1::__tree_node_base"* %395 to %"class.std::__1::__tree_node.704"*
  br label %241

398:                                              ; preds = %210, %392, %390, %321
  %399 = phi %"class.std::__1::__tree_end_node"* [ %322, %321 ], [ %391, %390 ], [ %393, %392 ], [ %97, %210 ]
  %400 = phi %"class.std::__1::__tree_node_base"** [ %318, %321 ], [ %387, %390 ], [ %243, %392 ], [ %107, %210 ]
  %401 = bitcast %"class.std::__1::__tree_node_base"** %400 to %"class.std::__1::__tree_node.704"**
  %402 = load %"class.std::__1::__tree_node.704"*, %"class.std::__1::__tree_node.704"** %401, align 8
  %403 = icmp eq %"class.std::__1::__tree_node.704"* %402, null
  br i1 %403, label %404, label %438

404:                                              ; preds = %398
  %405 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %108, align 8, !noalias !6
  %406 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %405, i64 0, i32 2
  %407 = load i64, i64* %406, align 8, !noalias !6
  %408 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %405, i64 0, i32 3
  %409 = load i64, i64* %408, align 8, !noalias !6
  %410 = sub i64 %409, %407
  %411 = icmp ult i64 %410, 56
  br i1 %411, label %412, label %414, !prof !9

412:                                              ; preds = %404
  %413 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %405, i64 56) #5, !noalias !6
  br label %416

414:                                              ; preds = %404
  %415 = add i64 %407, 56
  store i64 %415, i64* %406, align 8, !noalias !6
  br label %416

416:                                              ; preds = %414, %412
  %417 = phi i64 [ %413, %412 ], [ %407, %414 ]
  %418 = inttoptr i64 %417 to %"class.std::__1::__tree_node.704"*
  %419 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %418, i64 0, i32 2, i32 0
  %420 = bitcast %"struct.std::__1::pair.695"* %419 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %420, i8* nonnull align 8 %100, i64 16, i1 false) #5, !noalias !6
  %421 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %418, i64 0, i32 2, i32 0, i32 1
  %422 = load i32, i32* %103, align 8, !noalias !6
  store i32 %422, i32* %421, align 8, !noalias !6
  %423 = inttoptr i64 %417 to %"class.std::__1::__tree_node_base"*
  %424 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %423, i64 0, i32 2
  %425 = inttoptr i64 %417 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %425, i8 0, i64 16, i1 false) #5
  store %"class.std::__1::__tree_end_node"* %399, %"class.std::__1::__tree_end_node"** %424, align 8
  store %"class.std::__1::__tree_node_base"* %423, %"class.std::__1::__tree_node_base"** %400, align 8
  %426 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %91, align 8
  %427 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %426, i64 0, i32 0
  %428 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %427, align 8
  %429 = icmp eq %"class.std::__1::__tree_node_base"* %428, null
  br i1 %429, label %433, label %430

430:                                              ; preds = %416
  %431 = ptrtoint %"class.std::__1::__tree_node_base"* %428 to i64
  store i64 %431, i64* %109, align 8
  %432 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %400, align 8
  br label %433

433:                                              ; preds = %416, %430
  %434 = phi %"class.std::__1::__tree_node_base"* [ %423, %416 ], [ %432, %430 ]
  %435 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %106, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %435, %"class.std::__1::__tree_node_base"* %434) #5
  %436 = load i64, i64* %96, align 8
  %437 = add i64 %436, 1
  store i64 %437, i64* %96, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %100) #5
  br label %450

438:                                              ; preds = %398
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %100) #5
  %439 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %402, i64 0, i32 2, i32 0, i32 1
  %440 = load i32, i32* %439, align 8
  %441 = add i32 %440, 1
  store i32 %441, i32* %439, align 8
  %442 = zext i32 %441 to i64
  %443 = load i64, i64* %111, align 8
  %444 = load i64, i64* %112, align 8
  %445 = sub i64 %443, %444
  %446 = ashr exact i64 %445, 2
  %447 = icmp eq i64 %446, %442
  %448 = zext i1 %447 to i64
  %449 = add i64 %164, %448
  br label %450

450:                                              ; preds = %433, %162, %438, %207
  %451 = phi i64 [ %163, %207 ], [ %437, %433 ], [ %163, %438 ], [ %163, %162 ]
  %452 = phi i64 [ %164, %207 ], [ %164, %433 ], [ %449, %438 ], [ %164, %162 ]
  %453 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %165, i64 1
  %454 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %453, %160
  br i1 %454, label %455, label %162

455:                                              ; preds = %450
  %456 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %116, i64 1
  %457 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %456, %10
  br i1 %457, label %458, label %113

458:                                              ; preds = %455
  %459 = icmp eq i64 %451, 0
  %460 = icmp eq i64 %452, 0
  %461 = or i1 %460, %459
  br i1 %461, label %1393, label %462

462:                                              ; preds = %458
  %463 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %464 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %463, align 8
  %465 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 8
  %466 = load i32, i32* %465, align 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %464, i64 0, i32 8, i32 0, i32 0, i32 1
  %469 = load i64, i64* %468, align 8
  %470 = add i64 %469, %467
  %471 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %464, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %472 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %471, align 8
  %473 = lshr i64 %470, 9
  %474 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %472, i64 %473
  %475 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %474, align 8
  %476 = and i64 %470, 511
  %477 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %475, i64 %476
  %478 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %477, align 8
  %479 = icmp eq i64 %452, %451
  br i1 %479, label %892, label %480

480:                                              ; preds = %462
  %481 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %481) #5
  %482 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3
  %483 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5, i64 0, i32 0
  store %"class.v8::internal::ZoneVector.615"* %482, %"class.v8::internal::ZoneVector.615"** %483, align 8
  %484 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5, i64 0, i32 1
  store i32 0, i32* %484, align 8
  %485 = bitcast %"class.v8::internal::ZoneVector.615"* %482 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %488 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %487 to i64*
  store i64 %486, i64* %488, align 8
  %489 = bitcast %"class.v8::internal::ZoneMap.682"* %3 to i64*
  %490 = load i64, i64* %489, align 8
  %491 = inttoptr i64 %490 to %"class.std::__1::__tree_end_node"*
  %492 = icmp eq %"class.std::__1::__tree_end_node"* %97, %491
  br i1 %492, label %499, label %493

493:                                              ; preds = %480
  %494 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 1, i32 0
  %495 = bitcast %"class.v8::internal::compiler::RpoNumber"** %9 to i64*
  %496 = bitcast %"class.std::__1::vector.560"* %494 to i64*
  %497 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5 to %"class.std::__1::vector.616"**
  %498 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %501

499:                                              ; preds = %803, %480
  %500 = getelementptr inbounds %"class.v8::internal::ZoneMap.682", %"class.v8::internal::ZoneMap.682"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %805

501:                                              ; preds = %493, %803
  %502 = phi %"class.std::__1::__tree_end_node"* [ %491, %493 ], [ %531, %803 ]
  %503 = phi i64 [ %490, %493 ], [ %532, %803 ]
  %504 = inttoptr i64 %503 to %"class.std::__1::__tree_node_base"*
  %505 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %504, i64 0, i32 1
  %506 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %505, align 8
  %507 = icmp eq %"class.std::__1::__tree_node_base"* %506, null
  br i1 %507, label %508, label %514

508:                                              ; preds = %501
  %509 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %504, i64 0, i32 2
  %510 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %509, align 8
  %511 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %510, i64 0, i32 0
  %512 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %511, align 8
  %513 = icmp eq %"class.std::__1::__tree_node_base"* %512, %504
  br i1 %513, label %530, label %521

514:                                              ; preds = %501, %514
  %515 = phi %"class.std::__1::__tree_node_base"* [ %517, %514 ], [ %506, %501 ]
  %516 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %515, i64 0, i32 0, i32 0
  %517 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %516, align 8
  %518 = icmp eq %"class.std::__1::__tree_node_base"* %517, null
  br i1 %518, label %519, label %514

519:                                              ; preds = %514
  %520 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %515, i64 0, i32 0
  br label %530

521:                                              ; preds = %508, %521
  %522 = phi %"class.std::__1::__tree_end_node"** [ %525, %521 ], [ %509, %508 ]
  %523 = bitcast %"class.std::__1::__tree_end_node"** %522 to %"class.std::__1::__tree_node_base"**
  %524 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %523, align 8
  %525 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %524, i64 0, i32 2
  %526 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %525, align 8
  %527 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %526, i64 0, i32 0
  %528 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %527, align 8
  %529 = icmp eq %"class.std::__1::__tree_node_base"* %528, %524
  br i1 %529, label %530, label %521

530:                                              ; preds = %521, %508, %519
  %531 = phi %"class.std::__1::__tree_end_node"* [ %520, %519 ], [ %510, %508 ], [ %526, %521 ]
  %532 = ptrtoint %"class.std::__1::__tree_end_node"* %531 to i64
  %533 = inttoptr i64 %503 to %"class.std::__1::__tree_node.704"*
  %534 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %533, i64 0, i32 2, i32 0, i32 1
  %535 = load i32, i32* %534, align 8
  %536 = zext i32 %535 to i64
  %537 = load i64, i64* %495, align 8
  %538 = load i64, i64* %496, align 8
  %539 = sub i64 %537, %538
  %540 = ashr exact i64 %539, 2
  %541 = icmp eq i64 %540, %536
  br i1 %541, label %803, label %542

542:                                              ; preds = %530
  %543 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %533, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %544 = load i64, i64* %543, align 8
  %545 = load %"class.std::__1::vector.616"*, %"class.std::__1::vector.616"** %497, align 8
  %546 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %545, i64 0, i32 0, i32 1
  %547 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %546, align 8
  %548 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %545, i64 0, i32 0, i32 2, i32 0, i32 0
  %549 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %548, align 8
  %550 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %547, %549
  %551 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %549 to i64
  br i1 %550, label %557, label %552

552:                                              ; preds = %542
  %553 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %547, i64 0, i32 0
  store i64 %544, i64* %553, align 8
  %554 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %547, i64 1
  %555 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %554 to i64
  %556 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %546 to i64*
  store i64 %555, i64* %556, align 8
  br label %766

557:                                              ; preds = %542
  %558 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %547 to i64
  %559 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %546 to i64*
  %560 = bitcast %"class.std::__1::vector.616"* %545 to i64*
  %561 = load i64, i64* %560, align 8
  %562 = sub i64 %558, %561
  %563 = ashr exact i64 %562, 3
  %564 = add nsw i64 %563, 1
  %565 = icmp ugt i64 %564, 268435455
  br i1 %565, label %566, label %568

566:                                              ; preds = %557
  %567 = bitcast %"class.std::__1::vector.616"* %545 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %567) #6
  unreachable

568:                                              ; preds = %557
  %569 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %548 to i64*
  %570 = sub i64 %551, %561
  %571 = ashr exact i64 %570, 3
  %572 = icmp ult i64 %571, 134217727
  br i1 %572, label %573, label %578

573:                                              ; preds = %568
  %574 = ashr exact i64 %570, 2
  %575 = icmp ult i64 %574, %564
  %576 = select i1 %575, i64 %564, i64 %574
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %596, label %578

578:                                              ; preds = %573, %568
  %579 = phi i64 [ %576, %573 ], [ 268435455, %568 ]
  %580 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %545, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %581 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %580, align 8
  %582 = shl i64 %579, 3
  %583 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %581, i64 0, i32 2
  %584 = load i64, i64* %583, align 8
  %585 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %581, i64 0, i32 3
  %586 = load i64, i64* %585, align 8
  %587 = sub i64 %586, %584
  %588 = icmp ugt i64 %582, %587
  br i1 %588, label %589, label %591, !prof !9

589:                                              ; preds = %578
  %590 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %581, i64 %582) #5
  br label %593

591:                                              ; preds = %578
  %592 = add i64 %584, %582
  store i64 %592, i64* %583, align 8
  br label %593

593:                                              ; preds = %591, %589
  %594 = phi i64 [ %590, %589 ], [ %584, %591 ]
  %595 = inttoptr i64 %594 to %"class.v8::internal::compiler::InstructionOperand"*
  br label %596

596:                                              ; preds = %593, %573
  %597 = phi i64 [ %579, %593 ], [ 0, %573 ]
  %598 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %595, %593 ], [ null, %573 ]
  %599 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %598, i64 %563
  %600 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %598, i64 %597
  %601 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %600 to i64
  %602 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 0, i32 0
  store i64 %544, i64* %602, align 8
  %603 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 1
  %604 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %603 to i64
  %605 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %545, i64 0, i32 0, i32 0
  %606 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %605, align 8
  %607 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %606 to i64
  %608 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %546, align 8
  %609 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %608, %606
  br i1 %609, label %763, label %610

610:                                              ; preds = %596
  %611 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  %612 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %611 to i64
  %613 = sub i64 %612, %607
  %614 = lshr i64 %613, 3
  %615 = add nuw nsw i64 %614, 1
  %616 = icmp ult i64 %615, 4
  br i1 %616, label %707, label %617

617:                                              ; preds = %610
  %618 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %598, i64 -1
  %619 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  %620 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %619 to i64
  %621 = sub i64 %620, %607
  %622 = lshr i64 %621, 3
  %623 = sub nsw i64 %563, %622
  %624 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %618, i64 %623
  %625 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  %626 = sub nsw i64 0, %622
  %627 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %625, i64 %626
  %628 = icmp ult %"class.v8::internal::compiler::InstructionOperand"* %624, %608
  %629 = icmp ult %"class.v8::internal::compiler::InstructionOperand"* %627, %599
  %630 = and i1 %628, %629
  br i1 %630, label %707, label %631

631:                                              ; preds = %617
  %632 = and i64 %615, 4611686018427387900
  %633 = sub nsw i64 0, %632
  %634 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 %633
  %635 = sub nsw i64 0, %632
  %636 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 %635
  %637 = add nsw i64 %632, -4
  %638 = lshr exact i64 %637, 2
  %639 = add nuw nsw i64 %638, 1
  %640 = and i64 %639, 1
  %641 = icmp eq i64 %637, 0
  br i1 %641, label %684, label %642

642:                                              ; preds = %631
  %643 = sub nuw nsw i64 %639, %640
  %644 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  %645 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  br label %646

646:                                              ; preds = %646, %642
  %647 = phi i64 [ 0, %642 ], [ %681, %646 ]
  %648 = phi i64 [ %643, %642 ], [ %682, %646 ]
  %649 = sub i64 0, %647
  %650 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 %649
  %651 = sub i64 0, %647
  %652 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %644, i64 %651
  %653 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %652, i64 0, i32 0
  %654 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %650, i64 -1, i32 0
  %655 = getelementptr inbounds i64, i64* %653, i64 -1
  %656 = bitcast i64* %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 8, !alias.scope !10
  %658 = getelementptr inbounds i64, i64* %653, i64 -3
  %659 = bitcast i64* %658 to <2 x i64>*
  %660 = load <2 x i64>, <2 x i64>* %659, align 8, !alias.scope !10
  %661 = getelementptr inbounds i64, i64* %654, i64 -1
  %662 = bitcast i64* %661 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %662, align 8, !alias.scope !13, !noalias !10
  %663 = getelementptr inbounds i64, i64* %654, i64 -3
  %664 = bitcast i64* %663 to <2 x i64>*
  store <2 x i64> %660, <2 x i64>* %664, align 8, !alias.scope !13, !noalias !10
  %665 = sub nuw nsw i64 -4, %647
  %666 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 %665
  %667 = sub nuw nsw i64 -4, %647
  %668 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %645, i64 %667
  %669 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %668, i64 0, i32 0
  %670 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %666, i64 -1, i32 0
  %671 = getelementptr inbounds i64, i64* %669, i64 -1
  %672 = bitcast i64* %671 to <2 x i64>*
  %673 = load <2 x i64>, <2 x i64>* %672, align 8, !alias.scope !10
  %674 = getelementptr inbounds i64, i64* %669, i64 -3
  %675 = bitcast i64* %674 to <2 x i64>*
  %676 = load <2 x i64>, <2 x i64>* %675, align 8, !alias.scope !10
  %677 = getelementptr inbounds i64, i64* %670, i64 -1
  %678 = bitcast i64* %677 to <2 x i64>*
  store <2 x i64> %673, <2 x i64>* %678, align 8, !alias.scope !13, !noalias !10
  %679 = getelementptr inbounds i64, i64* %670, i64 -3
  %680 = bitcast i64* %679 to <2 x i64>*
  store <2 x i64> %676, <2 x i64>* %680, align 8, !alias.scope !13, !noalias !10
  %681 = add i64 %647, 8
  %682 = add i64 %648, -2
  %683 = icmp eq i64 %682, 0
  br i1 %683, label %684, label %646, !llvm.loop !15

684:                                              ; preds = %646, %631
  %685 = phi i64 [ 0, %631 ], [ %681, %646 ]
  %686 = icmp eq i64 %640, 0
  br i1 %686, label %705, label %687

687:                                              ; preds = %684
  %688 = sub i64 0, %685
  %689 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %599, i64 %688
  %690 = sub i64 0, %685
  %691 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %608, i64 -1
  %692 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %691, i64 %690
  %693 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %692, i64 0, i32 0
  %694 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %689, i64 -1, i32 0
  %695 = getelementptr inbounds i64, i64* %693, i64 -1
  %696 = bitcast i64* %695 to <2 x i64>*
  %697 = load <2 x i64>, <2 x i64>* %696, align 8, !alias.scope !10
  %698 = getelementptr inbounds i64, i64* %693, i64 -3
  %699 = bitcast i64* %698 to <2 x i64>*
  %700 = load <2 x i64>, <2 x i64>* %699, align 8, !alias.scope !10
  %701 = getelementptr inbounds i64, i64* %694, i64 -1
  %702 = bitcast i64* %701 to <2 x i64>*
  store <2 x i64> %697, <2 x i64>* %702, align 8, !alias.scope !13, !noalias !10
  %703 = getelementptr inbounds i64, i64* %694, i64 -3
  %704 = bitcast i64* %703 to <2 x i64>*
  store <2 x i64> %700, <2 x i64>* %704, align 8, !alias.scope !13, !noalias !10
  br label %705

705:                                              ; preds = %684, %687
  %706 = icmp eq i64 %615, %632
  br i1 %706, label %763, label %707

707:                                              ; preds = %705, %617, %610
  %708 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %599, %617 ], [ %599, %610 ], [ %634, %705 ]
  %709 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %608, %617 ], [ %608, %610 ], [ %636, %705 ]
  %710 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %709, i64 -1
  %711 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %710 to i64
  %712 = sub i64 %711, %607
  %713 = lshr i64 %712, 3
  %714 = add nuw nsw i64 %713, 1
  %715 = and i64 %714, 7
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %728, label %717

717:                                              ; preds = %707, %717
  %718 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %725, %717 ], [ %708, %707 ]
  %719 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %721, %717 ], [ %709, %707 ]
  %720 = phi i64 [ %726, %717 ], [ %715, %707 ]
  %721 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %719, i64 -1
  %722 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %721, i64 0, i32 0
  %723 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %718, i64 -1, i32 0
  %724 = load i64, i64* %722, align 8
  store i64 %724, i64* %723, align 8
  %725 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %718, i64 -1
  %726 = add i64 %720, -1
  %727 = icmp eq i64 %726, 0
  br i1 %727, label %728, label %717, !llvm.loop !17

728:                                              ; preds = %717, %707
  %729 = phi %"class.v8::internal::compiler::InstructionOperand"* [ undef, %707 ], [ %725, %717 ]
  %730 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %708, %707 ], [ %725, %717 ]
  %731 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %709, %707 ], [ %721, %717 ]
  %732 = icmp ult i64 %712, 56
  br i1 %732, label %763, label %733

733:                                              ; preds = %728, %733
  %734 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %761, %733 ], [ %730, %728 ]
  %735 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %757, %733 ], [ %731, %728 ]
  %736 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -1, i32 0
  %737 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -1, i32 0
  %738 = load i64, i64* %736, align 8
  store i64 %738, i64* %737, align 8
  %739 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -2, i32 0
  %740 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -2, i32 0
  %741 = load i64, i64* %739, align 8
  store i64 %741, i64* %740, align 8
  %742 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -3, i32 0
  %743 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -3, i32 0
  %744 = load i64, i64* %742, align 8
  store i64 %744, i64* %743, align 8
  %745 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -4, i32 0
  %746 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -4, i32 0
  %747 = load i64, i64* %745, align 8
  store i64 %747, i64* %746, align 8
  %748 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -5, i32 0
  %749 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -5, i32 0
  %750 = load i64, i64* %748, align 8
  store i64 %750, i64* %749, align 8
  %751 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -6, i32 0
  %752 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -6, i32 0
  %753 = load i64, i64* %751, align 8
  store i64 %753, i64* %752, align 8
  %754 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -7, i32 0
  %755 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -7, i32 0
  %756 = load i64, i64* %754, align 8
  store i64 %756, i64* %755, align 8
  %757 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %735, i64 -8
  %758 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %757, i64 0, i32 0
  %759 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -8, i32 0
  %760 = load i64, i64* %758, align 8
  store i64 %760, i64* %759, align 8
  %761 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %734, i64 -8
  %762 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %757, %606
  br i1 %762, label %763, label %733, !llvm.loop !19

763:                                              ; preds = %728, %733, %705, %596
  %764 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %599, %596 ], [ %634, %705 ], [ %729, %728 ], [ %761, %733 ]
  %765 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %764 to i64
  store i64 %765, i64* %560, align 8
  store i64 %604, i64* %559, align 8
  store i64 %601, i64* %569, align 8
  br label %766

766:                                              ; preds = %552, %763
  %767 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %502, i64 1, i32 0
  %768 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %767, align 8
  %769 = icmp eq %"class.std::__1::__tree_node_base"* %768, null
  br i1 %769, label %770, label %777

770:                                              ; preds = %766
  %771 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %502, i64 2
  %772 = bitcast %"class.std::__1::__tree_end_node"* %771 to %"class.std::__1::__tree_end_node"**
  %773 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %772, align 8
  %774 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %773, i64 0, i32 0
  %775 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %774, align 8
  %776 = icmp eq %"class.std::__1::__tree_node_base"* %775, %504
  br i1 %776, label %793, label %784

777:                                              ; preds = %766, %777
  %778 = phi %"class.std::__1::__tree_node_base"* [ %780, %777 ], [ %768, %766 ]
  %779 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %778, i64 0, i32 0, i32 0
  %780 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %779, align 8
  %781 = icmp eq %"class.std::__1::__tree_node_base"* %780, null
  br i1 %781, label %782, label %777

782:                                              ; preds = %777
  %783 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %778, i64 0, i32 0
  br label %793

784:                                              ; preds = %770, %784
  %785 = phi %"class.std::__1::__tree_end_node"** [ %788, %784 ], [ %772, %770 ]
  %786 = bitcast %"class.std::__1::__tree_end_node"** %785 to %"class.std::__1::__tree_node_base"**
  %787 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %786, align 8
  %788 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %787, i64 0, i32 2
  %789 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %788, align 8
  %790 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %789, i64 0, i32 0
  %791 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %790, align 8
  %792 = icmp eq %"class.std::__1::__tree_node_base"* %791, %787
  br i1 %792, label %793, label %784

793:                                              ; preds = %784, %782, %770
  %794 = phi %"class.std::__1::__tree_end_node"* [ %783, %782 ], [ %773, %770 ], [ %789, %784 ]
  %795 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %91, align 8
  %796 = icmp eq %"class.std::__1::__tree_end_node"* %795, %502
  br i1 %796, label %797, label %799

797:                                              ; preds = %793
  %798 = ptrtoint %"class.std::__1::__tree_end_node"* %794 to i64
  store i64 %798, i64* %489, align 8
  br label %799

799:                                              ; preds = %793, %797
  %800 = load i64, i64* %96, align 8
  %801 = add i64 %800, -1
  store i64 %801, i64* %96, align 8
  %802 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %498, align 8
  call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %802, %"class.std::__1::__tree_node_base"* %504) #5
  br label %803

803:                                              ; preds = %530, %799
  %804 = icmp eq %"class.std::__1::__tree_end_node"* %97, %531
  br i1 %804, label %499, label %501

805:                                              ; preds = %499, %809
  %806 = load i64, i64* %489, align 8
  %807 = inttoptr i64 %806 to %"class.std::__1::__tree_end_node"*
  %808 = icmp eq %"class.std::__1::__tree_end_node"* %97, %807
  br i1 %808, label %889, label %812

809:                                              ; preds = %886
  %810 = and i8 %887, 1
  %811 = icmp eq i8 %810, 0
  br i1 %811, label %889, label %805

812:                                              ; preds = %805, %886
  %813 = phi %"class.std::__1::__tree_end_node"* [ %843, %886 ], [ %807, %805 ]
  %814 = phi i8 [ %887, %886 ], [ 0, %805 ]
  %815 = phi i64 [ %844, %886 ], [ %806, %805 ]
  %816 = inttoptr i64 %815 to %"class.std::__1::__tree_node_base"*
  %817 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %816, i64 0, i32 1
  %818 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %817, align 8
  %819 = icmp eq %"class.std::__1::__tree_node_base"* %818, null
  br i1 %819, label %820, label %826

820:                                              ; preds = %812
  %821 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %816, i64 0, i32 2
  %822 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %821, align 8
  %823 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %822, i64 0, i32 0
  %824 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %823, align 8
  %825 = icmp eq %"class.std::__1::__tree_node_base"* %824, %816
  br i1 %825, label %842, label %833

826:                                              ; preds = %812, %826
  %827 = phi %"class.std::__1::__tree_node_base"* [ %829, %826 ], [ %818, %812 ]
  %828 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %827, i64 0, i32 0, i32 0
  %829 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %828, align 8
  %830 = icmp eq %"class.std::__1::__tree_node_base"* %829, null
  br i1 %830, label %831, label %826

831:                                              ; preds = %826
  %832 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %827, i64 0, i32 0
  br label %842

833:                                              ; preds = %820, %833
  %834 = phi %"class.std::__1::__tree_end_node"** [ %837, %833 ], [ %821, %820 ]
  %835 = bitcast %"class.std::__1::__tree_end_node"** %834 to %"class.std::__1::__tree_node_base"**
  %836 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %835, align 8
  %837 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %836, i64 0, i32 2
  %838 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %837, align 8
  %839 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %838, i64 0, i32 0
  %840 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %839, align 8
  %841 = icmp eq %"class.std::__1::__tree_node_base"* %840, %836
  br i1 %841, label %842, label %833

842:                                              ; preds = %833, %820, %831
  %843 = phi %"class.std::__1::__tree_end_node"* [ %832, %831 ], [ %822, %820 ], [ %838, %833 ]
  %844 = ptrtoint %"class.std::__1::__tree_end_node"* %843 to i64
  %845 = inttoptr i64 %815 to %"class.std::__1::__tree_node.704"*
  %846 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %845, i64 0, i32 2, i32 0, i32 0, i32 0
  %847 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %846)
  br i1 %847, label %848, label %886

848:                                              ; preds = %842
  %849 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %845, i64 0, i32 2, i32 0, i32 0, i32 1
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %849)
  %850 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %813, i64 1, i32 0
  %851 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %850, align 8
  %852 = icmp eq %"class.std::__1::__tree_node_base"* %851, null
  br i1 %852, label %853, label %860

853:                                              ; preds = %848
  %854 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %813, i64 2
  %855 = bitcast %"class.std::__1::__tree_end_node"* %854 to %"class.std::__1::__tree_end_node"**
  %856 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %855, align 8
  %857 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %856, i64 0, i32 0
  %858 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %857, align 8
  %859 = icmp eq %"class.std::__1::__tree_node_base"* %858, %816
  br i1 %859, label %876, label %867

860:                                              ; preds = %848, %860
  %861 = phi %"class.std::__1::__tree_node_base"* [ %863, %860 ], [ %851, %848 ]
  %862 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %861, i64 0, i32 0, i32 0
  %863 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %862, align 8
  %864 = icmp eq %"class.std::__1::__tree_node_base"* %863, null
  br i1 %864, label %865, label %860

865:                                              ; preds = %860
  %866 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %861, i64 0, i32 0
  br label %876

867:                                              ; preds = %853, %867
  %868 = phi %"class.std::__1::__tree_end_node"** [ %871, %867 ], [ %855, %853 ]
  %869 = bitcast %"class.std::__1::__tree_end_node"** %868 to %"class.std::__1::__tree_node_base"**
  %870 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %869, align 8
  %871 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %870, i64 0, i32 2
  %872 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %871, align 8
  %873 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %872, i64 0, i32 0
  %874 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %873, align 8
  %875 = icmp eq %"class.std::__1::__tree_node_base"* %874, %870
  br i1 %875, label %876, label %867

876:                                              ; preds = %867, %865, %853
  %877 = phi %"class.std::__1::__tree_end_node"* [ %866, %865 ], [ %856, %853 ], [ %872, %867 ]
  %878 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %91, align 8
  %879 = icmp eq %"class.std::__1::__tree_end_node"* %878, %813
  br i1 %879, label %880, label %882

880:                                              ; preds = %876
  %881 = ptrtoint %"class.std::__1::__tree_end_node"* %877 to i64
  store i64 %881, i64* %489, align 8
  br label %882

882:                                              ; preds = %876, %880
  %883 = load i64, i64* %96, align 8
  %884 = add i64 %883, -1
  store i64 %884, i64* %96, align 8
  %885 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %500, align 8
  call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %885, %"class.std::__1::__tree_node_base"* %816) #5
  br label %886

886:                                              ; preds = %882, %842
  %887 = phi i8 [ 1, %882 ], [ %814, %842 ]
  %888 = icmp eq %"class.std::__1::__tree_end_node"* %97, %843
  br i1 %888, label %809, label %812

889:                                              ; preds = %805, %809
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %481) #5
  %890 = load i64, i64* %96, align 8
  %891 = icmp eq i64 %890, 0
  br i1 %891, label %1393, label %892

892:                                              ; preds = %462, %889
  %893 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %478, i64 0, i32 2, i64 0
  %894 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %893, align 8
  %895 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %894, null
  %896 = ptrtoint %"class.v8::internal::compiler::ParallelMove"* %894 to i64
  br i1 %895, label %910, label %897

897:                                              ; preds = %892
  %898 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %894, i64 0, i32 0, i32 0, i32 0, i32 0
  %899 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %898, align 8
  %900 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %894, i64 0, i32 0, i32 0, i32 0, i32 1
  %901 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %900, align 8
  %902 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %899, %901
  br i1 %902, label %932, label %903

903:                                              ; preds = %897
  %904 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %478, i64 0, i32 2, i64 1
  %905 = bitcast %"class.v8::internal::compiler::ParallelMove"** %893 to i64*
  %906 = bitcast %"class.v8::internal::compiler::ParallelMove"** %904 to i64*
  %907 = load i64, i64* %906, align 8
  store i64 %907, i64* %905, align 8
  store i64 %896, i64* %906, align 8
  %908 = inttoptr i64 %907 to %"class.v8::internal::compiler::ParallelMove"*
  %909 = icmp eq i64 %907, 0
  br i1 %909, label %910, label %932

910:                                              ; preds = %892, %903
  %911 = phi i1 [ false, %903 ], [ true, %892 ]
  %912 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %463, align 8
  %913 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %912, i64 0, i32 1
  %914 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %913, align 8
  %915 = ptrtoint %"class.v8::internal::Zone"* %914 to i64
  %916 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %914, i64 0, i32 2
  %917 = load i64, i64* %916, align 8
  %918 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %914, i64 0, i32 3
  %919 = load i64, i64* %918, align 8
  %920 = sub i64 %919, %917
  %921 = icmp ult i64 %920, 32
  br i1 %921, label %922, label %924, !prof !9

922:                                              ; preds = %910
  %923 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %914, i64 32) #5
  br label %926

924:                                              ; preds = %910
  %925 = add i64 %917, 32
  store i64 %925, i64* %916, align 8
  br label %926

926:                                              ; preds = %924, %922
  %927 = phi i64 [ %923, %922 ], [ %917, %924 ]
  %928 = inttoptr i64 %927 to i8*
  %929 = inttoptr i64 %927 to %"class.v8::internal::compiler::ParallelMove"*
  %930 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %929, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %931 = bitcast %"struct.std::__1::__compressed_pair_elem.613"* %930 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %928, i8 0, i64 24, i1 false) #5
  store i64 %915, i64* %931, align 8
  store %"class.v8::internal::compiler::ParallelMove"* %929, %"class.v8::internal::compiler::ParallelMove"** %893, align 8
  br label %932

932:                                              ; preds = %897, %903, %926
  %933 = phi i1 [ %911, %926 ], [ false, %903 ], [ true, %897 ]
  %934 = phi %"class.v8::internal::compiler::ParallelMove"* [ %929, %926 ], [ %908, %903 ], [ %894, %897 ]
  %935 = load %"class.v8::internal::compiler::RpoNumber"*, %"class.v8::internal::compiler::RpoNumber"** %7, align 8
  %936 = load %"class.v8::internal::compiler::RpoNumber"*, %"class.v8::internal::compiler::RpoNumber"** %9, align 8
  %937 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %935, %936
  br i1 %937, label %944, label %938

938:                                              ; preds = %932
  %939 = bitcast %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %6 to i8*
  %940 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %6, i64 0, i32 0, i32 0
  %941 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %6, i64 0, i32 1, i32 0
  %942 = bitcast %"class.std::__1::__tree_end_node"* %97 to %"class.std::__1::__tree_node.704"**
  %943 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %934, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  br label %945

944:                                              ; preds = %992, %932
  br i1 %933, label %1355, label %1350

945:                                              ; preds = %938, %992
  %946 = phi i1 [ true, %938 ], [ false, %992 ]
  %947 = phi %"class.v8::internal::compiler::RpoNumber"* [ %935, %938 ], [ %993, %992 ]
  %948 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %463, align 8
  %949 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %947, i64 0, i32 0
  %950 = load i32, i32* %949, align 4
  %951 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %948, i64 0, i32 2
  %952 = bitcast %"class.v8::internal::ZoneVector"** %951 to %"class.std::__1::vector.557"**
  %953 = load %"class.std::__1::vector.557"*, %"class.std::__1::vector.557"** %952, align 8
  %954 = sext i32 %950 to i64
  %955 = getelementptr inbounds %"class.std::__1::vector.557", %"class.std::__1::vector.557"* %953, i64 0, i32 0, i32 1
  %956 = bitcast %"class.v8::internal::compiler::InstructionBlock"*** %955 to i64*
  %957 = load i64, i64* %956, align 8
  %958 = bitcast %"class.std::__1::vector.557"* %953 to i64*
  %959 = load i64, i64* %958, align 8
  %960 = sub i64 %957, %959
  %961 = ashr exact i64 %960, 3
  %962 = icmp ugt i64 %961, %954
  br i1 %962, label %965, label %963

963:                                              ; preds = %945
  %964 = bitcast %"class.std::__1::vector.557"* %953 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %964) #6
  unreachable

965:                                              ; preds = %945
  %966 = inttoptr i64 %959 to %"class.v8::internal::compiler::InstructionBlock"**
  %967 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %966, i64 %954
  %968 = load %"class.v8::internal::compiler::InstructionBlock"*, %"class.v8::internal::compiler::InstructionBlock"** %967, align 8
  %969 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %968, i64 0, i32 9
  %970 = load i32, i32* %969, align 8
  %971 = add nsw i32 %970, -1
  %972 = sext i32 %971 to i64
  %973 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %948, i64 0, i32 8, i32 0, i32 0, i32 1
  %974 = load i64, i64* %973, align 8
  %975 = add i64 %974, %972
  %976 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %948, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %977 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %976, align 8
  %978 = lshr i64 %975, 9
  %979 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %977, i64 %978
  %980 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %979, align 8
  %981 = and i64 %975, 511
  %982 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %980, i64 %981
  %983 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %982, align 8
  %984 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %983, i64 0, i32 2, i64 0
  %985 = bitcast %"class.v8::internal::compiler::ParallelMove"** %984 to %"class.std::__1::vector.609"**
  %986 = load %"class.std::__1::vector.609"*, %"class.std::__1::vector.609"** %985, align 8
  %987 = getelementptr inbounds %"class.std::__1::vector.609", %"class.std::__1::vector.609"* %986, i64 0, i32 0, i32 0
  %988 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %987, align 8
  %989 = getelementptr inbounds %"class.std::__1::vector.609", %"class.std::__1::vector.609"* %986, i64 0, i32 0, i32 1
  %990 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %989, align 8
  %991 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %988, %990
  br i1 %991, label %992, label %995

992:                                              ; preds = %1347, %965
  %993 = getelementptr inbounds %"class.v8::internal::compiler::RpoNumber", %"class.v8::internal::compiler::RpoNumber"* %947, i64 1
  %994 = icmp eq %"class.v8::internal::compiler::RpoNumber"* %993, %936
  br i1 %994, label %944, label %945

995:                                              ; preds = %965, %1347
  %996 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1348, %1347 ], [ %988, %965 ]
  %997 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %996, align 8
  %998 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %997, i64 0, i32 0, i32 0
  %999 = load i64, i64* %998, align 8
  %1000 = and i64 %999, 7
  switch i64 %1000, label %1004 [
    i64 0, label %1347
    i64 4, label %1001
  ]

1001:                                             ; preds = %995
  %1002 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %997, i64 0, i32 1, i32 0
  %1003 = load i64, i64* %1002, align 8
  br label %1041

1004:                                             ; preds = %995
  %1005 = icmp ugt i64 %1000, 4
  br i1 %1005, label %1006, label %1019

1006:                                             ; preds = %1004
  %1007 = and i64 %999, 24
  %1008 = icmp eq i64 %1007, 0
  br i1 %1008, label %1009, label %1014

1009:                                             ; preds = %1006
  %1010 = lshr i64 %999, 5
  %1011 = trunc i64 %1010 to i8
  %1012 = icmp ugt i8 %1011, 11
  %1013 = select i1 %1012, i64 416, i64 0
  br label %1014

1014:                                             ; preds = %1009, %1006
  %1015 = phi i64 [ 0, %1006 ], [ %1013, %1009 ]
  %1016 = and i64 %999, -8168
  %1017 = or i64 %1016, %1015
  %1018 = or i64 %1017, 5
  br label %1019

1019:                                             ; preds = %1014, %1004
  %1020 = phi i64 [ %1018, %1014 ], [ %999, %1004 ]
  %1021 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %997, i64 0, i32 1, i32 0
  %1022 = load i64, i64* %1021, align 8
  %1023 = and i64 %1022, 7
  %1024 = icmp ugt i64 %1023, 4
  br i1 %1024, label %1025, label %1038

1025:                                             ; preds = %1019
  %1026 = and i64 %1022, 24
  %1027 = icmp eq i64 %1026, 0
  br i1 %1027, label %1028, label %1033

1028:                                             ; preds = %1025
  %1029 = lshr i64 %1022, 5
  %1030 = trunc i64 %1029 to i8
  %1031 = icmp ugt i8 %1030, 11
  %1032 = select i1 %1031, i64 416, i64 0
  br label %1033

1033:                                             ; preds = %1028, %1025
  %1034 = phi i64 [ 0, %1025 ], [ %1032, %1028 ]
  %1035 = and i64 %1022, -8168
  %1036 = or i64 %1035, %1034
  %1037 = or i64 %1036, 5
  br label %1038

1038:                                             ; preds = %1019, %1033
  %1039 = phi i64 [ %1037, %1033 ], [ %1022, %1019 ]
  %1040 = icmp eq i64 %1020, %1039
  br i1 %1040, label %1347, label %1041

1041:                                             ; preds = %1001, %1038
  %1042 = phi i64 [ %1003, %1001 ], [ %1022, %1038 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %939) #5
  %1043 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %997, i64 0, i32 0
  store i64 %999, i64* %940, align 8
  %1044 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %997, i64 0, i32 1
  store i64 %1042, i64* %941, align 8
  %1045 = load %"class.std::__1::__tree_node.704"*, %"class.std::__1::__tree_node.704"** %942, align 8
  %1046 = icmp eq %"class.std::__1::__tree_node.704"* %1045, null
  br i1 %1046, label %1346, label %1047

1047:                                             ; preds = %1041
  %1048 = icmp ugt i64 %1000, 4
  %1049 = and i64 %1042, 7
  %1050 = icmp ugt i64 %1049, 4
  %1051 = and i64 %1042, 24
  %1052 = icmp eq i64 %1051, 0
  %1053 = lshr i64 %1042, 5
  %1054 = trunc i64 %1053 to i8
  %1055 = icmp ugt i8 %1054, 11
  %1056 = select i1 %1055, i64 416, i64 0
  %1057 = and i64 %1042, -8168
  %1058 = or i64 %1057, 5
  br i1 %1048, label %1063, label %1059

1059:                                             ; preds = %1047
  %1060 = select i1 %1052, i64 %1056, i64 0
  %1061 = or i64 %1060, %1058
  %1062 = select i1 %1050, i64 %1061, i64 %1042
  br label %1154

1063:                                             ; preds = %1047
  %1064 = and i64 %999, -8168
  %1065 = lshr i64 %999, 5
  %1066 = trunc i64 %1065 to i8
  %1067 = icmp ugt i8 %1066, 11
  %1068 = and i64 %999, 24
  %1069 = icmp eq i64 %1068, 0
  %1070 = and i1 %1069, %1067
  %1071 = select i1 %1070, i64 416, i64 0
  %1072 = or i64 %1064, %1071
  %1073 = or i64 %1072, 5
  %1074 = select i1 %1052, i64 %1056, i64 0
  %1075 = or i64 %1074, %1058
  %1076 = select i1 %1050, i64 %1075, i64 %1042
  br label %1077

1077:                                             ; preds = %1144, %1063
  %1078 = phi %"class.std::__1::__tree_end_node"* [ %1151, %1144 ], [ %97, %1063 ]
  %1079 = phi %"class.std::__1::__tree_node.704"* [ %1152, %1144 ], [ %1045, %1063 ]
  %1080 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1079, i64 0, i32 2
  %1081 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %1080, i64 0, i32 0, i32 0, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8
  %1083 = and i64 %1082, 7
  %1084 = icmp eq i64 %1083, 4
  br i1 %1084, label %1103, label %1085

1085:                                             ; preds = %1077
  %1086 = icmp ugt i64 %1083, 4
  br i1 %1086, label %1087, label %1100

1087:                                             ; preds = %1085
  %1088 = and i64 %1082, 24
  %1089 = icmp eq i64 %1088, 0
  br i1 %1089, label %1090, label %1095

1090:                                             ; preds = %1087
  %1091 = lshr i64 %1082, 5
  %1092 = trunc i64 %1091 to i8
  %1093 = icmp ugt i8 %1092, 11
  %1094 = select i1 %1093, i64 416, i64 0
  br label %1095

1095:                                             ; preds = %1090, %1087
  %1096 = phi i64 [ 0, %1087 ], [ %1094, %1090 ]
  %1097 = and i64 %1082, -8168
  %1098 = or i64 %1097, %1096
  %1099 = or i64 %1098, 5
  br label %1100

1100:                                             ; preds = %1095, %1085
  %1101 = phi i64 [ %1099, %1095 ], [ %1082, %1085 ]
  %1102 = icmp eq i64 %1101, %1073
  br i1 %1102, label %1123, label %1106

1103:                                             ; preds = %1077
  %1104 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %1080, i64 0, i32 0, i32 0
  %1105 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %1104, %6
  br i1 %1105, label %1123, label %1120

1106:                                             ; preds = %1100
  br i1 %1086, label %1107, label %1120

1107:                                             ; preds = %1106
  %1108 = and i64 %1082, 24
  %1109 = icmp eq i64 %1108, 0
  br i1 %1109, label %1110, label %1115

1110:                                             ; preds = %1107
  %1111 = lshr i64 %1082, 5
  %1112 = trunc i64 %1111 to i8
  %1113 = icmp ugt i8 %1112, 11
  %1114 = select i1 %1113, i64 416, i64 0
  br label %1115

1115:                                             ; preds = %1110, %1107
  %1116 = phi i64 [ 0, %1107 ], [ %1114, %1110 ]
  %1117 = and i64 %1082, -8168
  %1118 = or i64 %1117, %1116
  %1119 = or i64 %1118, 5
  br label %1120

1120:                                             ; preds = %1115, %1106, %1103
  %1121 = phi i64 [ %1119, %1115 ], [ %1082, %1106 ], [ %1082, %1103 ]
  %1122 = icmp ult i64 %1121, %1073
  br label %1144

1123:                                             ; preds = %1103, %1100
  %1124 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1079, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %1125 = load i64, i64* %1124, align 8
  %1126 = and i64 %1125, 7
  %1127 = icmp ugt i64 %1126, 4
  br i1 %1127, label %1128, label %1141

1128:                                             ; preds = %1123
  %1129 = and i64 %1125, 24
  %1130 = icmp eq i64 %1129, 0
  br i1 %1130, label %1131, label %1136

1131:                                             ; preds = %1128
  %1132 = lshr i64 %1125, 5
  %1133 = trunc i64 %1132 to i8
  %1134 = icmp ugt i8 %1133, 11
  %1135 = select i1 %1134, i64 416, i64 0
  br label %1136

1136:                                             ; preds = %1131, %1128
  %1137 = phi i64 [ 0, %1128 ], [ %1135, %1131 ]
  %1138 = and i64 %1125, -8168
  %1139 = or i64 %1138, %1137
  %1140 = or i64 %1139, 5
  br label %1141

1141:                                             ; preds = %1136, %1123
  %1142 = phi i64 [ %1140, %1136 ], [ %1125, %1123 ]
  %1143 = icmp ult i64 %1142, %1076
  br label %1144

1144:                                             ; preds = %1141, %1120
  %1145 = phi i1 [ %1143, %1141 ], [ %1122, %1120 ]
  %1146 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1079, i64 0, i32 0, i32 1
  %1147 = bitcast %"class.std::__1::__tree_node_base"** %1146 to %"class.std::__1::__tree_node.704"**
  %1148 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1079, i64 0, i32 0, i32 0
  %1149 = bitcast %"class.std::__1::__tree_node.704"* %1079 to %"class.std::__1::__tree_node.704"**
  %1150 = select i1 %1145, %"class.std::__1::__tree_node.704"** %1147, %"class.std::__1::__tree_node.704"** %1149
  %1151 = select i1 %1145, %"class.std::__1::__tree_end_node"* %1078, %"class.std::__1::__tree_end_node"* %1148
  %1152 = load %"class.std::__1::__tree_node.704"*, %"class.std::__1::__tree_node.704"** %1150, align 8
  %1153 = icmp eq %"class.std::__1::__tree_node.704"* %1152, null
  br i1 %1153, label %1231, label %1077

1154:                                             ; preds = %1221, %1059
  %1155 = phi %"class.std::__1::__tree_end_node"* [ %1228, %1221 ], [ %97, %1059 ]
  %1156 = phi %"class.std::__1::__tree_node.704"* [ %1229, %1221 ], [ %1045, %1059 ]
  %1157 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1156, i64 0, i32 2
  %1158 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %1157, i64 0, i32 0, i32 0, i32 0, i32 0
  %1159 = load i64, i64* %1158, align 8
  %1160 = and i64 %1159, 7
  %1161 = icmp eq i64 %1160, 4
  br i1 %1161, label %1162, label %1165

1162:                                             ; preds = %1154
  %1163 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %1157, i64 0, i32 0, i32 0
  %1164 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %1163, %6
  br i1 %1164, label %1183, label %1218

1165:                                             ; preds = %1154
  %1166 = icmp ugt i64 %1160, 4
  br i1 %1166, label %1167, label %1180

1167:                                             ; preds = %1165
  %1168 = and i64 %1159, 24
  %1169 = icmp eq i64 %1168, 0
  br i1 %1169, label %1170, label %1175

1170:                                             ; preds = %1167
  %1171 = lshr i64 %1159, 5
  %1172 = trunc i64 %1171 to i8
  %1173 = icmp ugt i8 %1172, 11
  %1174 = select i1 %1173, i64 416, i64 0
  br label %1175

1175:                                             ; preds = %1170, %1167
  %1176 = phi i64 [ 0, %1167 ], [ %1174, %1170 ]
  %1177 = and i64 %1159, -8168
  %1178 = or i64 %1177, %1176
  %1179 = or i64 %1178, 5
  br label %1180

1180:                                             ; preds = %1175, %1165
  %1181 = phi i64 [ %1179, %1175 ], [ %1159, %1165 ]
  %1182 = icmp eq i64 %1181, %999
  br i1 %1182, label %1183, label %1204

1183:                                             ; preds = %1180, %1162
  %1184 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1156, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %1185 = load i64, i64* %1184, align 8
  %1186 = and i64 %1185, 7
  %1187 = icmp ugt i64 %1186, 4
  br i1 %1187, label %1188, label %1201

1188:                                             ; preds = %1183
  %1189 = and i64 %1185, 24
  %1190 = icmp eq i64 %1189, 0
  br i1 %1190, label %1191, label %1196

1191:                                             ; preds = %1188
  %1192 = lshr i64 %1185, 5
  %1193 = trunc i64 %1192 to i8
  %1194 = icmp ugt i8 %1193, 11
  %1195 = select i1 %1194, i64 416, i64 0
  br label %1196

1196:                                             ; preds = %1191, %1188
  %1197 = phi i64 [ 0, %1188 ], [ %1195, %1191 ]
  %1198 = and i64 %1185, -8168
  %1199 = or i64 %1198, %1197
  %1200 = or i64 %1199, 5
  br label %1201

1201:                                             ; preds = %1196, %1183
  %1202 = phi i64 [ %1200, %1196 ], [ %1185, %1183 ]
  %1203 = icmp ult i64 %1202, %1062
  br label %1221

1204:                                             ; preds = %1180
  br i1 %1166, label %1205, label %1218

1205:                                             ; preds = %1204
  %1206 = and i64 %1159, 24
  %1207 = icmp eq i64 %1206, 0
  br i1 %1207, label %1208, label %1213

1208:                                             ; preds = %1205
  %1209 = lshr i64 %1159, 5
  %1210 = trunc i64 %1209 to i8
  %1211 = icmp ugt i8 %1210, 11
  %1212 = select i1 %1211, i64 416, i64 0
  br label %1213

1213:                                             ; preds = %1208, %1205
  %1214 = phi i64 [ 0, %1205 ], [ %1212, %1208 ]
  %1215 = and i64 %1159, -8168
  %1216 = or i64 %1215, %1214
  %1217 = or i64 %1216, 5
  br label %1218

1218:                                             ; preds = %1213, %1204, %1162
  %1219 = phi i64 [ %1217, %1213 ], [ %1159, %1204 ], [ %1159, %1162 ]
  %1220 = icmp ult i64 %1219, %999
  br label %1221

1221:                                             ; preds = %1218, %1201
  %1222 = phi i1 [ %1203, %1201 ], [ %1220, %1218 ]
  %1223 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1156, i64 0, i32 0, i32 1
  %1224 = bitcast %"class.std::__1::__tree_node_base"** %1223 to %"class.std::__1::__tree_node.704"**
  %1225 = getelementptr inbounds %"class.std::__1::__tree_node.704", %"class.std::__1::__tree_node.704"* %1156, i64 0, i32 0, i32 0
  %1226 = bitcast %"class.std::__1::__tree_node.704"* %1156 to %"class.std::__1::__tree_node.704"**
  %1227 = select i1 %1222, %"class.std::__1::__tree_node.704"** %1224, %"class.std::__1::__tree_node.704"** %1226
  %1228 = select i1 %1222, %"class.std::__1::__tree_end_node"* %1155, %"class.std::__1::__tree_end_node"* %1225
  %1229 = load %"class.std::__1::__tree_node.704"*, %"class.std::__1::__tree_node.704"** %1227, align 8
  %1230 = icmp eq %"class.std::__1::__tree_node.704"* %1229, null
  br i1 %1230, label %1231, label %1154

1231:                                             ; preds = %1221, %1144
  %1232 = phi %"class.std::__1::__tree_end_node"* [ %1151, %1144 ], [ %1228, %1221 ]
  %1233 = icmp eq %"class.std::__1::__tree_end_node"* %1232, %97
  br i1 %1233, label %1346, label %1234

1234:                                             ; preds = %1231
  %1235 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1232, i64 4
  %1236 = icmp eq i64 %1000, 4
  br i1 %1236, label %1237, label %1240

1237:                                             ; preds = %1234
  %1238 = bitcast %"class.std::__1::__tree_end_node"* %1235 to %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"*
  %1239 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %6, %1238
  br i1 %1239, label %1276, label %1304

1240:                                             ; preds = %1234
  br i1 %1048, label %1241, label %1254

1241:                                             ; preds = %1240
  %1242 = and i64 %999, 24
  %1243 = icmp eq i64 %1242, 0
  br i1 %1243, label %1244, label %1249

1244:                                             ; preds = %1241
  %1245 = lshr i64 %999, 5
  %1246 = trunc i64 %1245 to i8
  %1247 = icmp ugt i8 %1246, 11
  %1248 = select i1 %1247, i64 416, i64 0
  br label %1249

1249:                                             ; preds = %1244, %1241
  %1250 = phi i64 [ 0, %1241 ], [ %1248, %1244 ]
  %1251 = and i64 %999, -8168
  %1252 = or i64 %1251, %1250
  %1253 = or i64 %1252, 5
  br label %1254

1254:                                             ; preds = %1249, %1240
  %1255 = phi i64 [ %1253, %1249 ], [ %999, %1240 ]
  %1256 = bitcast %"class.std::__1::__tree_end_node"* %1235 to i64*
  %1257 = load i64, i64* %1256, align 8
  %1258 = and i64 %1257, 7
  %1259 = icmp ugt i64 %1258, 4
  br i1 %1259, label %1260, label %1273

1260:                                             ; preds = %1254
  %1261 = and i64 %1257, 24
  %1262 = icmp eq i64 %1261, 0
  br i1 %1262, label %1263, label %1268

1263:                                             ; preds = %1260
  %1264 = lshr i64 %1257, 5
  %1265 = trunc i64 %1264 to i8
  %1266 = icmp ugt i8 %1265, 11
  %1267 = select i1 %1266, i64 416, i64 0
  br label %1268

1268:                                             ; preds = %1263, %1260
  %1269 = phi i64 [ 0, %1260 ], [ %1267, %1263 ]
  %1270 = and i64 %1257, -8168
  %1271 = or i64 %1270, %1269
  %1272 = or i64 %1271, 5
  br label %1273

1273:                                             ; preds = %1268, %1254
  %1274 = phi i64 [ %1272, %1268 ], [ %1257, %1254 ]
  %1275 = icmp eq i64 %1255, %1274
  br i1 %1275, label %1276, label %1304

1276:                                             ; preds = %1273, %1237
  %1277 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1232, i64 5
  br i1 %1050, label %1278, label %1282

1278:                                             ; preds = %1276
  %1279 = select i1 %1052, i64 %1056, i64 0
  %1280 = or i64 %1057, %1279
  %1281 = or i64 %1280, 5
  br label %1282

1282:                                             ; preds = %1278, %1276
  %1283 = phi i64 [ %1281, %1278 ], [ %1042, %1276 ]
  %1284 = bitcast %"class.std::__1::__tree_end_node"* %1277 to i64*
  %1285 = load i64, i64* %1284, align 8
  %1286 = and i64 %1285, 7
  %1287 = icmp ugt i64 %1286, 4
  br i1 %1287, label %1288, label %1301

1288:                                             ; preds = %1282
  %1289 = and i64 %1285, 24
  %1290 = icmp eq i64 %1289, 0
  br i1 %1290, label %1291, label %1296

1291:                                             ; preds = %1288
  %1292 = lshr i64 %1285, 5
  %1293 = trunc i64 %1292 to i8
  %1294 = icmp ugt i8 %1293, 11
  %1295 = select i1 %1294, i64 416, i64 0
  br label %1296

1296:                                             ; preds = %1291, %1288
  %1297 = phi i64 [ 0, %1288 ], [ %1295, %1291 ]
  %1298 = and i64 %1285, -8168
  %1299 = or i64 %1298, %1297
  %1300 = or i64 %1299, 5
  br label %1301

1301:                                             ; preds = %1296, %1282
  %1302 = phi i64 [ %1300, %1296 ], [ %1285, %1282 ]
  %1303 = icmp ult i64 %1283, %1302
  br i1 %1303, label %1346, label %1340

1304:                                             ; preds = %1273, %1237
  br i1 %1048, label %1305, label %1318

1305:                                             ; preds = %1304
  %1306 = and i64 %999, 24
  %1307 = icmp eq i64 %1306, 0
  br i1 %1307, label %1308, label %1313

1308:                                             ; preds = %1305
  %1309 = lshr i64 %999, 5
  %1310 = trunc i64 %1309 to i8
  %1311 = icmp ugt i8 %1310, 11
  %1312 = select i1 %1311, i64 416, i64 0
  br label %1313

1313:                                             ; preds = %1308, %1305
  %1314 = phi i64 [ 0, %1305 ], [ %1312, %1308 ]
  %1315 = and i64 %999, -8168
  %1316 = or i64 %1315, %1314
  %1317 = or i64 %1316, 5
  br label %1318

1318:                                             ; preds = %1313, %1304
  %1319 = phi i64 [ %1317, %1313 ], [ %999, %1304 ]
  %1320 = bitcast %"class.std::__1::__tree_end_node"* %1235 to i64*
  %1321 = load i64, i64* %1320, align 8
  %1322 = and i64 %1321, 7
  %1323 = icmp ugt i64 %1322, 4
  br i1 %1323, label %1324, label %1337

1324:                                             ; preds = %1318
  %1325 = and i64 %1321, 24
  %1326 = icmp eq i64 %1325, 0
  br i1 %1326, label %1327, label %1332

1327:                                             ; preds = %1324
  %1328 = lshr i64 %1321, 5
  %1329 = trunc i64 %1328 to i8
  %1330 = icmp ugt i8 %1329, 11
  %1331 = select i1 %1330, i64 416, i64 0
  br label %1332

1332:                                             ; preds = %1327, %1324
  %1333 = phi i64 [ 0, %1324 ], [ %1331, %1327 ]
  %1334 = and i64 %1321, -8168
  %1335 = or i64 %1334, %1333
  %1336 = or i64 %1335, 5
  br label %1337

1337:                                             ; preds = %1332, %1318
  %1338 = phi i64 [ %1336, %1332 ], [ %1321, %1318 ]
  %1339 = icmp ult i64 %1319, %1338
  br i1 %1339, label %1346, label %1340

1340:                                             ; preds = %1301, %1337
  br i1 %946, label %1341, label %1344

1341:                                             ; preds = %1340
  %1342 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %943, align 8
  %1343 = call %"class.v8::internal::compiler::MoveOperands"* @_ZN2v88internal8compiler12ParallelMove7AddMoveERKNS1_18InstructionOperandES5_PNS0_4ZoneE(%"class.v8::internal::compiler::ParallelMove"* %934, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %1043, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %1044, %"class.v8::internal::Zone"* %1342) #5
  br label %1344

1344:                                             ; preds = %1341, %1340
  %1345 = bitcast %"class.v8::internal::compiler::MoveOperands"* %997 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1345, i8 0, i64 16, i1 false) #5
  br label %1346

1346:                                             ; preds = %1301, %1337, %1231, %1041, %1344
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %939) #5
  br label %1347

1347:                                             ; preds = %995, %1038, %1346
  %1348 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %996, i64 1
  %1349 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %1348, %990
  br i1 %1349, label %992, label %995

1350:                                             ; preds = %944
  %1351 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %893, align 8
  %1352 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %478, i64 0, i32 2, i64 1
  %1353 = bitcast %"class.v8::internal::compiler::ParallelMove"** %1352 to %"class.v8::internal::ZoneVector.608"**
  %1354 = load %"class.v8::internal::ZoneVector.608"*, %"class.v8::internal::ZoneVector.608"** %1353, align 8
  call void @_ZN2v88internal8compiler13MoveOptimizer13CompressMovesEPNS1_12ParallelMoveEPNS0_10ZoneVectorIPNS1_12MoveOperandsEEE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::ParallelMove"* %1351, %"class.v8::internal::ZoneVector.608"* %1354)
  br label %1355

1355:                                             ; preds = %1350, %944
  %1356 = load i32, i32* %465, align 4
  %1357 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 9
  %1358 = load i32, i32* %1357, align 8
  %1359 = add i32 %1358, -1
  %1360 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %463, align 8
  %1361 = sext i32 %1356 to i64
  %1362 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %1360, i64 0, i32 8, i32 0, i32 0, i32 1
  %1363 = load i64, i64* %1362, align 8
  %1364 = add i64 %1363, %1361
  %1365 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %1360, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %1366 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %1365, align 8
  %1367 = lshr i64 %1364, 9
  %1368 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %1366, i64 %1367
  %1369 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %1368, align 8
  %1370 = and i64 %1364, 511
  %1371 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %1369, i64 %1370
  %1372 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %1371, align 8
  call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %1372) #5
  %1373 = icmp slt i32 %1356, %1359
  br i1 %1373, label %1374, label %1393

1374:                                             ; preds = %1355
  %1375 = sext i32 %1359 to i64
  br label %1376

1376:                                             ; preds = %1376, %1374
  %1377 = phi i64 [ %1361, %1374 ], [ %1379, %1376 ]
  %1378 = phi %"class.v8::internal::compiler::Instruction"* [ %1372, %1374 ], [ %1391, %1376 ]
  %1379 = add nsw i64 %1377, 1
  %1380 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %463, align 8
  %1381 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %1380, i64 0, i32 8, i32 0, i32 0, i32 1
  %1382 = load i64, i64* %1381, align 8
  %1383 = add i64 %1382, %1379
  %1384 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %1380, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %1385 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %1384, align 8
  %1386 = lshr i64 %1383, 9
  %1387 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %1385, i64 %1386
  %1388 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %1387, align 8
  %1389 = and i64 %1383, 511
  %1390 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %1388, i64 %1389
  %1391 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %1390, align 8
  call void @_ZN2v88internal8compiler13MoveOptimizer12MigrateMovesEPNS1_11InstructionES4_(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %1391, %"class.v8::internal::compiler::Instruction"* %1378) #5
  call void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::Instruction"* %1391) #5
  %1392 = icmp eq i64 %1379, %1375
  br i1 %1392, label %1393, label %1376

1393:                                             ; preds = %134, %156, %1376, %87, %1355, %889, %458
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %88) #5
  br label %1394

1394:                                             ; preds = %47, %65, %36, %76, %1393
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer13FinalizeMovesEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::Instruction"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 0
  %6 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %6, null
  br i1 %7, label %421, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %11, align 8
  %13 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %10, %12
  br i1 %13, label %22, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %15 to i64*
  %18 = bitcast %"class.v8::internal::ZoneVector.608"* %4 to i64*
  %19 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %16 to i64*
  %20 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %21 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %4, i64 0, i32 0, i32 0, i32 0
  br label %28

22:                                               ; preds = %309, %8
  %23 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %4, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %26 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %25, align 8
  %27 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %24, %26
  br i1 %27, label %421, label %312

28:                                               ; preds = %14, %309
  %29 = phi %"class.v8::internal::compiler::MoveOperands"** [ %10, %14 ], [ %310, %309 ]
  %30 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %29, align 8
  %31 = ptrtoint %"class.v8::internal::compiler::MoveOperands"* %30 to i64
  %32 = getelementptr %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %30, i64 0, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 7
  switch i64 %34, label %35 [
    i64 0, label %309
    i64 4, label %309
  ]

35:                                               ; preds = %28
  %36 = icmp ugt i64 %34, 4
  br i1 %36, label %37, label %50

37:                                               ; preds = %35
  %38 = and i64 %33, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = lshr i64 %33, 5
  %42 = trunc i64 %41 to i8
  %43 = icmp ugt i8 %42, 11
  %44 = select i1 %43, i64 416, i64 0
  br label %45

45:                                               ; preds = %40, %37
  %46 = phi i64 [ 0, %37 ], [ %44, %40 ]
  %47 = and i64 %33, -8168
  %48 = or i64 %47, %46
  %49 = or i64 %48, 5
  br label %50

50:                                               ; preds = %45, %35
  %51 = phi i64 [ %49, %45 ], [ %33, %35 ]
  %52 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %30, i64 0, i32 1, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = and i64 %53, 7
  %55 = icmp ugt i64 %54, 4
  br i1 %55, label %56, label %69

56:                                               ; preds = %50
  %57 = and i64 %53, 24
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %56
  %60 = lshr i64 %53, 5
  %61 = trunc i64 %60 to i8
  %62 = icmp ugt i8 %61, 11
  %63 = select i1 %62, i64 416, i64 0
  br label %64

64:                                               ; preds = %59, %56
  %65 = phi i64 [ 0, %56 ], [ %63, %59 ]
  %66 = and i64 %53, -8168
  %67 = or i64 %66, %65
  %68 = or i64 %67, 5
  br label %69

69:                                               ; preds = %50, %64
  %70 = phi i64 [ %68, %64 ], [ %53, %50 ]
  %71 = icmp eq i64 %51, %70
  br i1 %71, label %309, label %72

72:                                               ; preds = %69
  %73 = icmp eq i64 %34, 2
  br i1 %73, label %79, label %74

74:                                               ; preds = %72
  %75 = icmp ugt i64 %34, 4
  %76 = and i64 %33, 24
  %77 = icmp eq i64 %76, 8
  %78 = and i1 %75, %77
  br i1 %78, label %79, label %309

79:                                               ; preds = %74, %72
  %80 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %15, align 8
  %81 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %16, align 8
  %82 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %80, %81
  %83 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %81 to i64
  br i1 %82, label %88, label %84

84:                                               ; preds = %79
  %85 = bitcast %"class.v8::internal::compiler::MoveOperands"** %80 to i64*
  store i64 %31, i64* %85, align 8
  %86 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %80, i64 1
  %87 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %86 to i64
  store i64 %87, i64* %17, align 8
  br label %309

88:                                               ; preds = %79
  %89 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %80 to i64
  %90 = load i64, i64* %18, align 8
  %91 = sub i64 %89, %90
  %92 = ashr exact i64 %91, 3
  %93 = add nsw i64 %92, 1
  %94 = icmp ugt i64 %93, 268435455
  br i1 %94, label %95, label %97

95:                                               ; preds = %88
  %96 = bitcast %"class.v8::internal::ZoneVector.608"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %96) #6
  unreachable

97:                                               ; preds = %88
  %98 = sub i64 %83, %90
  %99 = ashr exact i64 %98, 3
  %100 = icmp ult i64 %99, 134217727
  br i1 %100, label %101, label %106

101:                                              ; preds = %97
  %102 = ashr exact i64 %98, 2
  %103 = icmp ult i64 %102, %93
  %104 = select i1 %103, i64 %93, i64 %102
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %123, label %106

106:                                              ; preds = %101, %97
  %107 = phi i64 [ %104, %101 ], [ 268435455, %97 ]
  %108 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %109 = shl i64 %107, 3
  %110 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 2
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 3
  %113 = load i64, i64* %112, align 8
  %114 = sub i64 %113, %111
  %115 = icmp ugt i64 %109, %114
  br i1 %115, label %116, label %118, !prof !9

116:                                              ; preds = %106
  %117 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %108, i64 %109) #5
  br label %120

118:                                              ; preds = %106
  %119 = add i64 %111, %109
  store i64 %119, i64* %110, align 8
  br label %120

120:                                              ; preds = %118, %116
  %121 = phi i64 [ %117, %116 ], [ %111, %118 ]
  %122 = inttoptr i64 %121 to %"class.v8::internal::compiler::MoveOperands"**
  br label %123

123:                                              ; preds = %120, %101
  %124 = phi i64 [ %107, %120 ], [ 0, %101 ]
  %125 = phi %"class.v8::internal::compiler::MoveOperands"** [ %122, %120 ], [ null, %101 ]
  %126 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %125, i64 %92
  %127 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %125, i64 %124
  %128 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %127 to i64
  %129 = bitcast %"class.v8::internal::compiler::MoveOperands"** %126 to i64*
  store i64 %31, i64* %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %126, i64 1
  %131 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %130 to i64
  %132 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %21, align 8
  %133 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %132 to i64
  %134 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %15, align 8
  %135 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %134, %132
  br i1 %135, label %306, label %136

136:                                              ; preds = %123
  %137 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  %138 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %137 to i64
  %139 = sub i64 %138, %133
  %140 = lshr i64 %139, 3
  %141 = add nuw nsw i64 %140, 1
  %142 = icmp ult i64 %141, 4
  br i1 %142, label %236, label %143

143:                                              ; preds = %136
  %144 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %125, i64 -1
  %145 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  %146 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %145 to i64
  %147 = sub i64 %146, %133
  %148 = lshr i64 %147, 3
  %149 = sub nsw i64 %92, %148
  %150 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %144, i64 %149
  %151 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  %152 = sub nsw i64 0, %148
  %153 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %151, i64 %152
  %154 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %150, %134
  %155 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %153, %126
  %156 = and i1 %154, %155
  br i1 %156, label %236, label %157

157:                                              ; preds = %143
  %158 = and i64 %141, 4611686018427387900
  %159 = sub nsw i64 0, %158
  %160 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %126, i64 %159
  %161 = sub nsw i64 0, %158
  %162 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 %161
  %163 = add nsw i64 %158, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 1
  %167 = icmp eq i64 %163, 0
  br i1 %167, label %212, label %168

168:                                              ; preds = %157
  %169 = sub nuw nsw i64 %165, %166
  %170 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %126, i64 -1
  %171 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  %172 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %126, i64 -1
  %173 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  br label %174

174:                                              ; preds = %174, %168
  %175 = phi i64 [ 0, %168 ], [ %209, %174 ]
  %176 = phi i64 [ %169, %168 ], [ %210, %174 ]
  %177 = sub i64 0, %175
  %178 = sub i64 0, %175
  %179 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %170, i64 %177
  %180 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %171, i64 %178
  %181 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %180, i64 -1
  %182 = bitcast %"class.v8::internal::compiler::MoveOperands"** %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !20
  %184 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %180, i64 -2
  %185 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %184, i64 -1
  %186 = bitcast %"class.v8::internal::compiler::MoveOperands"** %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8, !alias.scope !20
  %188 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %179, i64 -1
  %189 = bitcast %"class.v8::internal::compiler::MoveOperands"** %188 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %189, align 8, !alias.scope !23, !noalias !20
  %190 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %179, i64 -2
  %191 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %190, i64 -1
  %192 = bitcast %"class.v8::internal::compiler::MoveOperands"** %191 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %192, align 8, !alias.scope !23, !noalias !20
  %193 = sub nuw nsw i64 -4, %175
  %194 = sub nuw nsw i64 -4, %175
  %195 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %172, i64 %193
  %196 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %173, i64 %194
  %197 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %196, i64 -1
  %198 = bitcast %"class.v8::internal::compiler::MoveOperands"** %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8, !alias.scope !20
  %200 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %196, i64 -2
  %201 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %200, i64 -1
  %202 = bitcast %"class.v8::internal::compiler::MoveOperands"** %201 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 8, !alias.scope !20
  %204 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %195, i64 -1
  %205 = bitcast %"class.v8::internal::compiler::MoveOperands"** %204 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %205, align 8, !alias.scope !23, !noalias !20
  %206 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %195, i64 -2
  %207 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -1
  %208 = bitcast %"class.v8::internal::compiler::MoveOperands"** %207 to <2 x i64>*
  store <2 x i64> %203, <2 x i64>* %208, align 8, !alias.scope !23, !noalias !20
  %209 = add i64 %175, 8
  %210 = add i64 %176, -2
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %174, !llvm.loop !25

212:                                              ; preds = %174, %157
  %213 = phi i64 [ 0, %157 ], [ %209, %174 ]
  %214 = icmp eq i64 %166, 0
  br i1 %214, label %234, label %215

215:                                              ; preds = %212
  %216 = sub i64 0, %213
  %217 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %126, i64 -1
  %218 = sub i64 0, %213
  %219 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %134, i64 -1
  %220 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %217, i64 %216
  %221 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %219, i64 %218
  %222 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %221, i64 -1
  %223 = bitcast %"class.v8::internal::compiler::MoveOperands"** %222 to <2 x i64>*
  %224 = load <2 x i64>, <2 x i64>* %223, align 8, !alias.scope !20
  %225 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %221, i64 -2
  %226 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %225, i64 -1
  %227 = bitcast %"class.v8::internal::compiler::MoveOperands"** %226 to <2 x i64>*
  %228 = load <2 x i64>, <2 x i64>* %227, align 8, !alias.scope !20
  %229 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %220, i64 -1
  %230 = bitcast %"class.v8::internal::compiler::MoveOperands"** %229 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %230, align 8, !alias.scope !23, !noalias !20
  %231 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %220, i64 -2
  %232 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %231, i64 -1
  %233 = bitcast %"class.v8::internal::compiler::MoveOperands"** %232 to <2 x i64>*
  store <2 x i64> %228, <2 x i64>* %233, align 8, !alias.scope !23, !noalias !20
  br label %234

234:                                              ; preds = %212, %215
  %235 = icmp eq i64 %141, %158
  br i1 %235, label %306, label %236

236:                                              ; preds = %234, %143, %136
  %237 = phi %"class.v8::internal::compiler::MoveOperands"** [ %126, %143 ], [ %126, %136 ], [ %160, %234 ]
  %238 = phi %"class.v8::internal::compiler::MoveOperands"** [ %134, %143 ], [ %134, %136 ], [ %162, %234 ]
  %239 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -1
  %240 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %239 to i64
  %241 = sub i64 %240, %133
  %242 = lshr i64 %241, 3
  %243 = add nuw nsw i64 %242, 1
  %244 = and i64 %243, 7
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %257, label %246

246:                                              ; preds = %236, %246
  %247 = phi %"class.v8::internal::compiler::MoveOperands"** [ %250, %246 ], [ %237, %236 ]
  %248 = phi %"class.v8::internal::compiler::MoveOperands"** [ %251, %246 ], [ %238, %236 ]
  %249 = phi i64 [ %255, %246 ], [ %244, %236 ]
  %250 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %247, i64 -1
  %251 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %248, i64 -1
  %252 = bitcast %"class.v8::internal::compiler::MoveOperands"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.v8::internal::compiler::MoveOperands"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = add i64 %249, -1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %246, !llvm.loop !26

257:                                              ; preds = %246, %236
  %258 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %236 ], [ %250, %246 ]
  %259 = phi %"class.v8::internal::compiler::MoveOperands"** [ %237, %236 ], [ %250, %246 ]
  %260 = phi %"class.v8::internal::compiler::MoveOperands"** [ %238, %236 ], [ %251, %246 ]
  %261 = icmp ult i64 %241, 56
  br i1 %261, label %306, label %262

262:                                              ; preds = %257, %262
  %263 = phi %"class.v8::internal::compiler::MoveOperands"** [ %300, %262 ], [ %259, %257 ]
  %264 = phi %"class.v8::internal::compiler::MoveOperands"** [ %301, %262 ], [ %260, %257 ]
  %265 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -1
  %266 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -1
  %267 = bitcast %"class.v8::internal::compiler::MoveOperands"** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.v8::internal::compiler::MoveOperands"** %265 to i64*
  store i64 %268, i64* %269, align 8
  %270 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -2
  %271 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -2
  %272 = bitcast %"class.v8::internal::compiler::MoveOperands"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.v8::internal::compiler::MoveOperands"** %270 to i64*
  store i64 %273, i64* %274, align 8
  %275 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -3
  %276 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -3
  %277 = bitcast %"class.v8::internal::compiler::MoveOperands"** %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.v8::internal::compiler::MoveOperands"** %275 to i64*
  store i64 %278, i64* %279, align 8
  %280 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -4
  %281 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -4
  %282 = bitcast %"class.v8::internal::compiler::MoveOperands"** %281 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = bitcast %"class.v8::internal::compiler::MoveOperands"** %280 to i64*
  store i64 %283, i64* %284, align 8
  %285 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -5
  %286 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -5
  %287 = bitcast %"class.v8::internal::compiler::MoveOperands"** %286 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = bitcast %"class.v8::internal::compiler::MoveOperands"** %285 to i64*
  store i64 %288, i64* %289, align 8
  %290 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -6
  %291 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -6
  %292 = bitcast %"class.v8::internal::compiler::MoveOperands"** %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = bitcast %"class.v8::internal::compiler::MoveOperands"** %290 to i64*
  store i64 %293, i64* %294, align 8
  %295 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -7
  %296 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -7
  %297 = bitcast %"class.v8::internal::compiler::MoveOperands"** %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast %"class.v8::internal::compiler::MoveOperands"** %295 to i64*
  store i64 %298, i64* %299, align 8
  %300 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %263, i64 -8
  %301 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %264, i64 -8
  %302 = bitcast %"class.v8::internal::compiler::MoveOperands"** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = bitcast %"class.v8::internal::compiler::MoveOperands"** %300 to i64*
  store i64 %303, i64* %304, align 8
  %305 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %301, %132
  br i1 %305, label %306, label %262, !llvm.loop !27

306:                                              ; preds = %257, %262, %234, %123
  %307 = phi %"class.v8::internal::compiler::MoveOperands"** [ %126, %123 ], [ %160, %234 ], [ %258, %257 ], [ %300, %262 ]
  %308 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %307 to i64
  store i64 %308, i64* %18, align 8
  store i64 %131, i64* %17, align 8
  store i64 %128, i64* %19, align 8
  br label %309

309:                                              ; preds = %28, %28, %306, %84, %74, %69
  %310 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %29, i64 1
  %311 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %310, %12
  br i1 %311, label %22, label %28

312:                                              ; preds = %22
  %313 = bitcast i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %313)
  store i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)* @_ZN2v88internal8compiler12_GLOBAL__N_111LoadCompareEPKNS1_12MoveOperandsES5_, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %3, align 8
  call void @_ZNSt3__16__sortIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %24, %"class.v8::internal::compiler::MoveOperands"** %26, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** nonnull dereferenceable(8) %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %313)
  %314 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %23, align 8
  %315 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %25, align 8
  %316 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %314, %315
  br i1 %316, label %317, label %319

317:                                              ; preds = %312
  %318 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %314 to i64
  br label %325

319:                                              ; preds = %312
  %320 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %321 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 1
  br label %328

322:                                              ; preds = %417
  %323 = bitcast %"class.v8::internal::ZoneVector.608"* %4 to i64*
  %324 = load i64, i64* %323, align 8
  br label %325

325:                                              ; preds = %317, %322
  %326 = phi i64 [ %324, %322 ], [ %318, %317 ]
  %327 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %25 to i64*
  store i64 %326, i64* %327, align 8
  br label %421

328:                                              ; preds = %319, %417
  %329 = phi %"class.v8::internal::compiler::MoveOperands"* [ null, %319 ], [ %418, %417 ]
  %330 = phi %"class.v8::internal::compiler::MoveOperands"** [ %314, %319 ], [ %419, %417 ]
  %331 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %330, align 8
  %332 = icmp eq %"class.v8::internal::compiler::MoveOperands"* %329, null
  br i1 %332, label %417, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %331, i64 0, i32 0, i32 0
  %335 = load i64, i64* %334, align 8
  %336 = and i64 %335, 7
  %337 = icmp eq i64 %336, 4
  br i1 %337, label %338, label %340

338:                                              ; preds = %333
  %339 = icmp eq %"class.v8::internal::compiler::MoveOperands"* %331, %329
  br i1 %339, label %377, label %417

340:                                              ; preds = %333
  %341 = icmp ugt i64 %336, 4
  br i1 %341, label %342, label %355

342:                                              ; preds = %340
  %343 = and i64 %335, 24
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %350

345:                                              ; preds = %342
  %346 = lshr i64 %335, 5
  %347 = trunc i64 %346 to i8
  %348 = icmp ugt i8 %347, 11
  %349 = select i1 %348, i64 416, i64 0
  br label %350

350:                                              ; preds = %345, %342
  %351 = phi i64 [ 0, %342 ], [ %349, %345 ]
  %352 = and i64 %335, -8168
  %353 = or i64 %352, %351
  %354 = or i64 %353, 5
  br label %355

355:                                              ; preds = %350, %340
  %356 = phi i64 [ %354, %350 ], [ %335, %340 ]
  %357 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %329, i64 0, i32 0, i32 0
  %358 = load i64, i64* %357, align 8
  %359 = and i64 %358, 7
  %360 = icmp ugt i64 %359, 4
  br i1 %360, label %361, label %374

361:                                              ; preds = %355
  %362 = and i64 %358, 24
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %369

364:                                              ; preds = %361
  %365 = lshr i64 %358, 5
  %366 = trunc i64 %365 to i8
  %367 = icmp ugt i8 %366, 11
  %368 = select i1 %367, i64 416, i64 0
  br label %369

369:                                              ; preds = %364, %361
  %370 = phi i64 [ 0, %361 ], [ %368, %364 ]
  %371 = and i64 %358, -8168
  %372 = or i64 %371, %370
  %373 = or i64 %372, 5
  br label %374

374:                                              ; preds = %355, %369
  %375 = phi i64 [ %373, %369 ], [ %358, %355 ]
  %376 = icmp eq i64 %356, %375
  br i1 %376, label %377, label %417

377:                                              ; preds = %338, %374
  %378 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %329, i64 0, i32 1
  %379 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %378, i64 0, i32 0
  %380 = load i64, i64* %379, align 8
  %381 = and i64 %380, 7
  %382 = icmp ugt i64 %381, 4
  %383 = and i64 %380, 24
  %384 = icmp eq i64 %383, 8
  %385 = and i1 %382, %384
  br i1 %385, label %417, label %386

386:                                              ; preds = %377
  %387 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %320, align 8
  %388 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %387, i64 0, i32 1
  %389 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %388, align 8
  %390 = ptrtoint %"class.v8::internal::Zone"* %389 to i64
  %391 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %321, align 8
  %392 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %391, null
  br i1 %392, label %393, label %410

393:                                              ; preds = %386
  %394 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %389, i64 0, i32 2
  %395 = load i64, i64* %394, align 8
  %396 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %389, i64 0, i32 3
  %397 = load i64, i64* %396, align 8
  %398 = sub i64 %397, %395
  %399 = icmp ult i64 %398, 32
  br i1 %399, label %400, label %402, !prof !9

400:                                              ; preds = %393
  %401 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %389, i64 32) #5
  br label %404

402:                                              ; preds = %393
  %403 = add i64 %395, 32
  store i64 %403, i64* %394, align 8
  br label %404

404:                                              ; preds = %402, %400
  %405 = phi i64 [ %401, %400 ], [ %395, %402 ]
  %406 = inttoptr i64 %405 to i8*
  %407 = inttoptr i64 %405 to %"class.v8::internal::compiler::ParallelMove"*
  %408 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %407, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %409 = bitcast %"struct.std::__1::__compressed_pair_elem.613"* %408 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %406, i8 0, i64 24, i1 false) #5
  store i64 %390, i64* %409, align 8
  store %"class.v8::internal::compiler::ParallelMove"* %407, %"class.v8::internal::compiler::ParallelMove"** %321, align 8
  br label %410

410:                                              ; preds = %386, %404
  %411 = phi %"class.v8::internal::compiler::ParallelMove"* [ %407, %404 ], [ %391, %386 ]
  %412 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %331, i64 0, i32 1
  %413 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %411, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %414 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %413, align 8
  %415 = call %"class.v8::internal::compiler::MoveOperands"* @_ZN2v88internal8compiler12ParallelMove7AddMoveERKNS1_18InstructionOperandES5_PNS0_4ZoneE(%"class.v8::internal::compiler::ParallelMove"* %411, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %378, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %412, %"class.v8::internal::Zone"* %414) #5
  %416 = bitcast %"class.v8::internal::compiler::MoveOperands"* %331 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %416, i8 0, i64 16, i1 false) #5
  br label %417

417:                                              ; preds = %338, %377, %328, %374, %410
  %418 = phi %"class.v8::internal::compiler::MoveOperands"* [ %329, %410 ], [ %331, %374 ], [ %331, %328 ], [ %329, %377 ], [ %331, %338 ]
  %419 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %330, i64 1
  %420 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %419, %315
  br i1 %420, label %322, label %328

421:                                              ; preds = %22, %2, %325
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer27RemoveClobberedDestinationsEPNS1_11InstructionE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::Instruction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", align 8
  %4 = alloca %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %115

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 0
  %11 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %10, align 8
  %12 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %11, null
  br i1 %12, label %115, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3
  %16 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %3, i64 0, i32 0
  store %"class.v8::internal::ZoneVector.615"* %15, %"class.v8::internal::ZoneVector.615"** %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %3, i64 0, i32 1
  store i32 0, i32* %17, align 8
  %18 = bitcast %"class.v8::internal::ZoneVector.615"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %21 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #5
  %23 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4, i64 0, i32 0
  store %"class.v8::internal::ZoneVector.615"* %23, %"class.v8::internal::ZoneVector.615"** %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4, i64 0, i32 1
  store i32 0, i32* %25, align 8
  %26 = bitcast %"class.v8::internal::ZoneVector.615"* %23 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %29 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = load i32, i32* %5, align 4
  %31 = and i32 %30, 255
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %37, %13
  %34 = phi i32 [ %30, %13 ], [ %41, %37 ]
  %35 = and i32 %34, 1056964608
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %45, label %49

37:                                               ; preds = %13, %37
  %38 = phi i64 [ %40, %37 ], [ 0, %13 ]
  %39 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 5, i64 %38
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %3, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %39)
  %40 = add nuw nsw i64 %38, 1
  %41 = load i32, i32* %5, align 4
  %42 = and i32 %41, 255
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %40, %43
  br i1 %44, label %37, label %33

45:                                               ; preds = %49, %33
  %46 = phi i32 [ %34, %33 ], [ %60, %49 ]
  %47 = and i32 %46, 16776960
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %65, label %71

49:                                               ; preds = %33, %49
  %50 = phi i32 [ %60, %49 ], [ %34, %33 ]
  %51 = phi i64 [ %59, %49 ], [ 0, %33 ]
  %52 = and i32 %50, 255
  %53 = lshr i32 %50, 8
  %54 = and i32 %53, 65535
  %55 = add nuw nsw i32 %54, %52
  %56 = zext i32 %55 to i64
  %57 = add nuw i64 %51, %56
  %58 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 5, i64 %57
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %3, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %58)
  %59 = add nuw nsw i64 %51, 1
  %60 = load i32, i32* %5, align 4
  %61 = lshr i32 %60, 24
  %62 = and i32 %61, 63
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %59, %63
  br i1 %64, label %49, label %45

65:                                               ; preds = %71, %45
  %66 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %11, i64 0, i32 0, i32 0, i32 0, i32 1
  %69 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %68, align 8
  %70 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %67, %69
  br i1 %70, label %84, label %88

71:                                               ; preds = %45, %71
  %72 = phi i32 [ %79, %71 ], [ %46, %45 ]
  %73 = phi i64 [ %78, %71 ], [ 0, %45 ]
  %74 = and i32 %72, 255
  %75 = zext i32 %74 to i64
  %76 = add nuw i64 %73, %75
  %77 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 5, i64 %76
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %77)
  %78 = add nuw nsw i64 %73, 1
  %79 = load i32, i32* %5, align 4
  %80 = lshr i32 %79, 8
  %81 = and i32 %80, 65535
  %82 = zext i32 %81 to i64
  %83 = icmp ult i64 %78, %82
  br i1 %83, label %71, label %65

84:                                               ; preds = %97, %65
  %85 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 511
  switch i32 %87, label %114 [
    i32 21, label %100
    i32 2, label %100
    i32 1, label %100
    i32 0, label %100
  ]

88:                                               ; preds = %65, %97
  %89 = phi %"class.v8::internal::compiler::MoveOperands"** [ %98, %97 ], [ %67, %65 ]
  %90 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %90, i64 0, i32 1
  %92 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %3, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %91)
  br i1 %92, label %93, label %97

93:                                               ; preds = %88
  %94 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %91)
  br i1 %94, label %97, label %95

95:                                               ; preds = %93
  %96 = bitcast %"class.v8::internal::compiler::MoveOperands"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #5
  br label %97

97:                                               ; preds = %95, %93, %88
  %98 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %89, i64 1
  %99 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %98, %69
  br i1 %99, label %84, label %88

100:                                              ; preds = %84, %84, %84, %84
  %101 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %66, align 8
  %102 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %68, align 8
  %103 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %101, %102
  br i1 %103, label %114, label %104

104:                                              ; preds = %100, %111
  %105 = phi %"class.v8::internal::compiler::MoveOperands"** [ %112, %111 ], [ %101, %100 ]
  %106 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %105, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %106, i64 0, i32 1
  %108 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %107)
  br i1 %108, label %111, label %109

109:                                              ; preds = %104
  %110 = bitcast %"class.v8::internal::compiler::MoveOperands"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 16, i1 false) #5
  br label %111

111:                                              ; preds = %109, %104
  %112 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %105, i64 1
  %113 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %112, %102
  br i1 %113, label %114, label %104

114:                                              ; preds = %111, %100, %84
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  br label %115

115:                                              ; preds = %2, %114, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nocapture readonly, %"class.v8::internal::compiler::InstructionOperand"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %0 to %"class.std::__1::vector.616"**
  %4 = load %"class.std::__1::vector.616"*, %"class.std::__1::vector.616"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 1
  %6 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %7, align 8
  %9 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %6, %8
  %10 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %8 to i64
  br i1 %9, label %18, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %1, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %6, i64 0, i32 0
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %6, i64 1
  %16 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %15 to i64
  %17 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %5 to i64*
  store i64 %16, i64* %17, align 8
  br label %228

18:                                               ; preds = %2
  %19 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %6 to i64
  %20 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %5 to i64*
  %21 = bitcast %"class.std::__1::vector.616"* %4 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = ashr exact i64 %23, 3
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 268435455
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %"class.std::__1::vector.616"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #6
  unreachable

29:                                               ; preds = %18
  %30 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %7 to i64*
  %31 = sub i64 %10, %22
  %32 = ashr exact i64 %31, 3
  %33 = icmp ult i64 %32, 134217727
  br i1 %33, label %34, label %39

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 2
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %57, label %39

39:                                               ; preds = %34, %29
  %40 = phi i64 [ %37, %34 ], [ 268435455, %29 ]
  %41 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %41, align 8
  %43 = shl i64 %40, 3
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !9

50:                                               ; preds = %39
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %42, i64 %43) #5
  br label %54

52:                                               ; preds = %39
  %53 = add i64 %45, %43
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to %"class.v8::internal::compiler::InstructionOperand"*
  br label %57

57:                                               ; preds = %54, %34
  %58 = phi i64 [ %40, %54 ], [ 0, %34 ]
  %59 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %56, %54 ], [ null, %34 ]
  %60 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %59, i64 %24
  %61 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %59, i64 %58
  %62 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %61 to i64
  %63 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %1, i64 0, i32 0
  %64 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 0, i32 0
  %65 = load i64, i64* %63, align 8
  store i64 %65, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 1
  %67 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %66 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 0
  %69 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %68, align 8
  %70 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %69 to i64
  %71 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %5, align 8
  %72 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %71, %69
  br i1 %72, label %225, label %73

73:                                               ; preds = %57
  %74 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 -1, i32 0
  %75 = ptrtoint i64* %74 to i64
  %76 = sub i64 %75, %70
  %77 = lshr i64 %76, 3
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i64 %78, 4
  br i1 %79, label %169, label %80

80:                                               ; preds = %73
  %81 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 -1, i32 0
  %82 = ptrtoint i64* %81 to i64
  %83 = sub i64 %82, %70
  %84 = lshr i64 %83, 3
  %85 = xor i64 %84, -1
  %86 = add nsw i64 %24, %85
  %87 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %59, i64 %86
  %88 = xor i64 %84, -1
  %89 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 %88
  %90 = icmp ult %"class.v8::internal::compiler::InstructionOperand"* %87, %71
  %91 = icmp ult %"class.v8::internal::compiler::InstructionOperand"* %89, %60
  %92 = and i1 %90, %91
  br i1 %92, label %169, label %93

93:                                               ; preds = %80
  %94 = and i64 %78, 4611686018427387900
  %95 = sub nsw i64 0, %94
  %96 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 %95
  %97 = sub nsw i64 0, %94
  %98 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 %97
  %99 = add nsw i64 %94, -4
  %100 = lshr exact i64 %99, 2
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 1
  %103 = icmp eq i64 %99, 0
  br i1 %103, label %148, label %104

104:                                              ; preds = %93
  %105 = sub nuw nsw i64 %101, %102
  %106 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 -1
  %107 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 -1
  br label %108

108:                                              ; preds = %108, %104
  %109 = phi i64 [ 0, %104 ], [ %143, %108 ]
  %110 = phi i64 [ %105, %104 ], [ %144, %108 ]
  %111 = sub i64 0, %109
  %112 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 %111
  %113 = sub i64 0, %109
  %114 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %106, i64 %113
  %115 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %114, i64 0, i32 0
  %116 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %112, i64 -1, i32 0
  %117 = getelementptr inbounds i64, i64* %115, i64 -1
  %118 = bitcast i64* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !28
  %120 = getelementptr inbounds i64, i64* %115, i64 -3
  %121 = bitcast i64* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !28
  %123 = getelementptr inbounds i64, i64* %116, i64 -1
  %124 = bitcast i64* %123 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %124, align 8, !alias.scope !31, !noalias !28
  %125 = getelementptr inbounds i64, i64* %116, i64 -3
  %126 = bitcast i64* %125 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !31, !noalias !28
  %127 = sub nuw nsw i64 -4, %109
  %128 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 %127
  %129 = sub nuw nsw i64 -4, %109
  %130 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %107, i64 %129
  %131 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %130, i64 0, i32 0
  %132 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %128, i64 -1, i32 0
  %133 = getelementptr inbounds i64, i64* %131, i64 -1
  %134 = bitcast i64* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8, !alias.scope !28
  %136 = getelementptr inbounds i64, i64* %131, i64 -3
  %137 = bitcast i64* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 8, !alias.scope !28
  %139 = getelementptr inbounds i64, i64* %132, i64 -1
  %140 = bitcast i64* %139 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %140, align 8, !alias.scope !31, !noalias !28
  %141 = getelementptr inbounds i64, i64* %132, i64 -3
  %142 = bitcast i64* %141 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %142, align 8, !alias.scope !31, !noalias !28
  %143 = add i64 %109, 8
  %144 = add i64 %110, -2
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %108, !llvm.loop !33

146:                                              ; preds = %108
  %147 = sub nuw nsw i64 -8, %109
  br label %148

148:                                              ; preds = %146, %93
  %149 = phi i64 [ 0, %93 ], [ %147, %146 ]
  %150 = icmp eq i64 %102, 0
  br i1 %150, label %167, label %151

151:                                              ; preds = %148
  %152 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %60, i64 %149
  %153 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %71, i64 -1
  %154 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %153, i64 %149
  %155 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %154, i64 0, i32 0
  %156 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %152, i64 -1, i32 0
  %157 = getelementptr inbounds i64, i64* %155, i64 -1
  %158 = bitcast i64* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !28
  %160 = getelementptr inbounds i64, i64* %155, i64 -3
  %161 = bitcast i64* %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 8, !alias.scope !28
  %163 = getelementptr inbounds i64, i64* %156, i64 -1
  %164 = bitcast i64* %163 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %164, align 8, !alias.scope !31, !noalias !28
  %165 = getelementptr inbounds i64, i64* %156, i64 -3
  %166 = bitcast i64* %165 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %166, align 8, !alias.scope !31, !noalias !28
  br label %167

167:                                              ; preds = %148, %151
  %168 = icmp eq i64 %78, %94
  br i1 %168, label %225, label %169

169:                                              ; preds = %167, %80, %73
  %170 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %60, %80 ], [ %60, %73 ], [ %96, %167 ]
  %171 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %71, %80 ], [ %71, %73 ], [ %98, %167 ]
  %172 = getelementptr %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %171, i64 -1, i32 0
  %173 = ptrtoint i64* %172 to i64
  %174 = sub i64 %173, %70
  %175 = lshr i64 %174, 3
  %176 = add nuw nsw i64 %175, 1
  %177 = and i64 %176, 7
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %190, label %179

179:                                              ; preds = %169, %179
  %180 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %187, %179 ], [ %170, %169 ]
  %181 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %183, %179 ], [ %171, %169 ]
  %182 = phi i64 [ %188, %179 ], [ %177, %169 ]
  %183 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %181, i64 -1
  %184 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %183, i64 0, i32 0
  %185 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %180, i64 -1, i32 0
  %186 = load i64, i64* %184, align 8
  store i64 %186, i64* %185, align 8
  %187 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %180, i64 -1
  %188 = add i64 %182, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %179, !llvm.loop !34

190:                                              ; preds = %179, %169
  %191 = phi %"class.v8::internal::compiler::InstructionOperand"* [ undef, %169 ], [ %187, %179 ]
  %192 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %170, %169 ], [ %187, %179 ]
  %193 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %171, %169 ], [ %183, %179 ]
  %194 = icmp ult i64 %174, 56
  br i1 %194, label %225, label %195

195:                                              ; preds = %190, %195
  %196 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %223, %195 ], [ %192, %190 ]
  %197 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %219, %195 ], [ %193, %190 ]
  %198 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -1, i32 0
  %199 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -1, i32 0
  %200 = load i64, i64* %198, align 8
  store i64 %200, i64* %199, align 8
  %201 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -2, i32 0
  %202 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -2, i32 0
  %203 = load i64, i64* %201, align 8
  store i64 %203, i64* %202, align 8
  %204 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -3, i32 0
  %205 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -3, i32 0
  %206 = load i64, i64* %204, align 8
  store i64 %206, i64* %205, align 8
  %207 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -4, i32 0
  %208 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -4, i32 0
  %209 = load i64, i64* %207, align 8
  store i64 %209, i64* %208, align 8
  %210 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -5, i32 0
  %211 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -5, i32 0
  %212 = load i64, i64* %210, align 8
  store i64 %212, i64* %211, align 8
  %213 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -6, i32 0
  %214 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -6, i32 0
  %215 = load i64, i64* %213, align 8
  store i64 %215, i64* %214, align 8
  %216 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -7, i32 0
  %217 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -7, i32 0
  %218 = load i64, i64* %216, align 8
  store i64 %218, i64* %217, align 8
  %219 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %197, i64 -8
  %220 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %219, i64 0, i32 0
  %221 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -8, i32 0
  %222 = load i64, i64* %220, align 8
  store i64 %222, i64* %221, align 8
  %223 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %196, i64 -8
  %224 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %219, %69
  br i1 %224, label %225, label %195, !llvm.loop !35

225:                                              ; preds = %190, %195, %167, %57
  %226 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %60, %57 ], [ %96, %167 ], [ %191, %190 ], [ %223, %195 ]
  %227 = ptrtoint %"class.v8::internal::compiler::InstructionOperand"* %226 to i64
  store i64 %227, i64* %21, align 8
  store i64 %67, i64* %20, align 8
  store i64 %62, i64* %30, align 8
  br label %228

228:                                              ; preds = %11, %225
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nocapture readonly, %"class.v8::internal::compiler::InstructionOperand"* readonly dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %0 to %"class.std::__1::vector.616"**
  %4 = load %"class.std::__1::vector.616"*, %"class.std::__1::vector.616"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.616", %"class.std::__1::vector.616"* %4, i64 0, i32 0, i32 1
  %8 = load %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"** %7, align 8
  %9 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %6, %8
  br i1 %9, label %113, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %1, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 7
  %14 = icmp ugt i64 %13, 4
  %15 = lshr i64 %12, 5
  %16 = trunc i64 %15 to i8
  %17 = icmp ugt i8 %16, 11
  %18 = select i1 %17, i64 416, i64 0
  %19 = and i64 %12, -8168
  %20 = or i64 %19, 5
  br i1 %14, label %21, label %87

21:                                               ; preds = %10
  %22 = and i64 %12, 24
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %55

24:                                               ; preds = %21
  %25 = or i64 %18, %20
  br label %26

26:                                               ; preds = %32, %24
  %27 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %33, %32 ], [ %6, %24 ]
  %28 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %27, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 7
  %31 = icmp eq i64 %30, 4
  br i1 %31, label %50, label %35

32:                                               ; preds = %52, %50
  %33 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %27, i64 1
  %34 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %33, %8
  br i1 %34, label %113, label %26

35:                                               ; preds = %26
  %36 = icmp ugt i64 %30, 4
  br i1 %36, label %37, label %52

37:                                               ; preds = %35
  %38 = and i64 %29, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = lshr i64 %29, 5
  %42 = trunc i64 %41 to i8
  %43 = icmp ugt i8 %42, 11
  %44 = select i1 %43, i64 416, i64 0
  br label %45

45:                                               ; preds = %40, %37
  %46 = phi i64 [ 0, %37 ], [ %44, %40 ]
  %47 = and i64 %29, -8168
  %48 = or i64 %47, %46
  %49 = or i64 %48, 5
  br label %52

50:                                               ; preds = %26
  %51 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %27, %1
  br i1 %51, label %113, label %32

52:                                               ; preds = %45, %35
  %53 = phi i64 [ %49, %45 ], [ %29, %35 ]
  %54 = icmp eq i64 %53, %25
  br i1 %54, label %113, label %32

55:                                               ; preds = %21, %61
  %56 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %62, %61 ], [ %6, %21 ]
  %57 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %56, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 7
  %60 = icmp eq i64 %59, 4
  br i1 %60, label %79, label %64

61:                                               ; preds = %81, %79
  %62 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %56, i64 1
  %63 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %62, %8
  br i1 %63, label %113, label %55

64:                                               ; preds = %55
  %65 = icmp ugt i64 %59, 4
  br i1 %65, label %66, label %81

66:                                               ; preds = %64
  %67 = and i64 %58, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  %70 = lshr i64 %58, 5
  %71 = trunc i64 %70 to i8
  %72 = icmp ugt i8 %71, 11
  %73 = select i1 %72, i64 416, i64 0
  br label %74

74:                                               ; preds = %69, %66
  %75 = phi i64 [ 0, %66 ], [ %73, %69 ]
  %76 = and i64 %58, -8168
  %77 = or i64 %76, %75
  %78 = or i64 %77, 5
  br label %81

79:                                               ; preds = %55
  %80 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %56, %1
  br i1 %80, label %113, label %61

81:                                               ; preds = %74, %64
  %82 = phi i64 [ %78, %74 ], [ %58, %64 ]
  %83 = icmp eq i64 %82, %20
  br i1 %83, label %113, label %61

84:                                               ; preds = %110, %93
  %85 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %88, i64 1
  %86 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %85, %8
  br i1 %86, label %113, label %87

87:                                               ; preds = %10, %84
  %88 = phi %"class.v8::internal::compiler::InstructionOperand"* [ %85, %84 ], [ %6, %10 ]
  %89 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %88, i64 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, 7
  %92 = icmp eq i64 %91, 4
  br i1 %92, label %93, label %95

93:                                               ; preds = %87
  %94 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %88, %1
  br i1 %94, label %113, label %84

95:                                               ; preds = %87
  %96 = icmp ugt i64 %91, 4
  br i1 %96, label %97, label %110

97:                                               ; preds = %95
  %98 = and i64 %90, 24
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %105

100:                                              ; preds = %97
  %101 = lshr i64 %90, 5
  %102 = trunc i64 %101 to i8
  %103 = icmp ugt i8 %102, 11
  %104 = select i1 %103, i64 416, i64 0
  br label %105

105:                                              ; preds = %100, %97
  %106 = phi i64 [ 0, %97 ], [ %104, %100 ]
  %107 = and i64 %90, -8168
  %108 = or i64 %107, %106
  %109 = or i64 %108, 5
  br label %110

110:                                              ; preds = %105, %95
  %111 = phi i64 [ %109, %105 ], [ %90, %95 ]
  %112 = icmp eq i64 %111, %12
  br i1 %112, label %113, label %84

113:                                              ; preds = %110, %93, %84, %81, %79, %61, %52, %50, %32, %2
  %114 = phi i1 [ false, %2 ], [ true, %52 ], [ true, %50 ], [ false, %32 ], [ true, %81 ], [ true, %79 ], [ false, %61 ], [ true, %110 ], [ true, %93 ], [ false, %84 ]
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer12MigrateMovesEPNS1_11InstructionES4_(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::Instruction"* nocapture, %"class.v8::internal::compiler::Instruction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", align 8
  %5 = alloca %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", align 8
  %6 = alloca %"class.v8::internal::ZoneSet", align 8
  %7 = alloca %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", align 8
  %8 = alloca %"class.v8::internal::compiler::InstructionOperand", align 8
  %9 = alloca %"class.v8::internal::compiler::ParallelMove", align 8
  %10 = alloca %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 1073741824
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %1195

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %2, i64 0, i32 2, i64 0
  %17 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %16, align 8
  %18 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %17, null
  br i1 %18, label %1195, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %17, i64 0, i32 0, i32 0, i32 0, i32 1
  %23 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %22, align 8
  %24 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %21, %23
  br i1 %24, label %1195, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #5
  %27 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3
  %28 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4, i64 0, i32 0
  store %"class.v8::internal::ZoneVector.615"* %27, %"class.v8::internal::ZoneVector.615"** %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %4, i64 0, i32 1
  store i32 0, i32* %29, align 8
  %30 = bitcast %"class.v8::internal::ZoneVector.615"* %27 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %33 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #5
  %35 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4
  %36 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5, i64 0, i32 0
  store %"class.v8::internal::ZoneVector.615"* %35, %"class.v8::internal::ZoneVector.615"** %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::(anonymous namespace)::OperandSet", %"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* %5, i64 0, i32 1
  store i32 0, i32* %37, align 8
  %38 = bitcast %"class.v8::internal::ZoneVector.615"* %35 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %41 = bitcast %"class.v8::internal::compiler::InstructionOperand"** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i32, i32* %11, align 4
  %43 = and i32 %42, 16776960
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %49, %25
  %46 = phi i32 [ %42, %25 ], [ %57, %49 ]
  %47 = and i32 %46, 255
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %62, label %66

49:                                               ; preds = %25, %49
  %50 = phi i32 [ %57, %49 ], [ %42, %25 ]
  %51 = phi i64 [ %56, %49 ], [ 0, %25 ]
  %52 = and i32 %50, 255
  %53 = zext i32 %52 to i64
  %54 = add nuw i64 %51, %53
  %55 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %2, i64 0, i32 5, i64 %54
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %55)
  %56 = add nuw nsw i64 %51, 1
  %57 = load i32, i32* %11, align 4
  %58 = lshr i32 %57, 8
  %59 = and i32 %58, 65535
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %56, %60
  br i1 %61, label %49, label %45

62:                                               ; preds = %66, %45
  %63 = phi i32 [ %46, %45 ], [ %70, %66 ]
  %64 = and i32 %63, 1056964608
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %74, label %78

66:                                               ; preds = %45, %66
  %67 = phi i64 [ %69, %66 ], [ 0, %45 ]
  %68 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %2, i64 0, i32 5, i64 %67
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %68)
  %69 = add nuw nsw i64 %67, 1
  %70 = load i32, i32* %11, align 4
  %71 = and i32 %70, 255
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %69, %72
  br i1 %73, label %66, label %62

74:                                               ; preds = %78, %62
  %75 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %20, align 8
  %76 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %22, align 8
  %77 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %75, %76
  br i1 %77, label %94, label %117

78:                                               ; preds = %62, %78
  %79 = phi i32 [ %89, %78 ], [ %63, %62 ]
  %80 = phi i64 [ %88, %78 ], [ 0, %62 ]
  %81 = and i32 %79, 255
  %82 = lshr i32 %79, 8
  %83 = and i32 %82, 65535
  %84 = add nuw nsw i32 %83, %81
  %85 = zext i32 %84 to i64
  %86 = add nuw i64 %80, %85
  %87 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %2, i64 0, i32 5, i64 %86
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %87)
  %88 = add nuw nsw i64 %80, 1
  %89 = load i32, i32* %11, align 4
  %90 = lshr i32 %89, 24
  %91 = and i32 %90, 63
  %92 = zext i32 %91 to i64
  %93 = icmp ult i64 %88, %92
  br i1 %93, label %78, label %74

94:                                               ; preds = %162, %74
  %95 = bitcast %"class.v8::internal::ZoneSet"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %95) #5
  %96 = bitcast %"class.v8::internal::compiler::MoveOptimizer"* %0 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 0
  %99 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 1
  %100 = bitcast %"struct.std::__1::__compressed_pair_elem.677"* %99 to i64*
  %101 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1
  %102 = bitcast %"class.std::__1::__compressed_pair.676"* %101 to i64*
  store i64 0, i64* %102, align 8
  store i64 %97, i64* %100, align 8
  %103 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %103, align 8
  %104 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %104, %"class.std::__1::__tree_end_node"** %98, align 8
  %105 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %20, align 8
  %106 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %22, align 8
  %107 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %105, %106
  br i1 %107, label %1194, label %108

108:                                              ; preds = %94
  %109 = bitcast %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %7 to i8*
  %110 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %7, i64 0, i32 0, i32 0
  %111 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %7, i64 0, i32 1, i32 0
  %112 = bitcast %"class.std::__1::__tree_end_node"* %104 to %"class.std::__1::__tree_node"**
  %113 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %104, i64 0, i32 0
  %115 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %116 = bitcast %"class.v8::internal::ZoneSet"* %6 to i64*
  br label %172

117:                                              ; preds = %74, %162
  %118 = phi %"class.v8::internal::compiler::MoveOperands"** [ %163, %162 ], [ %75, %74 ]
  %119 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %118, align 8
  %120 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %119, i64 0, i32 0, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = and i64 %121, 7
  switch i64 %122, label %123 [
    i64 0, label %162
    i64 4, label %160
  ]

123:                                              ; preds = %117
  %124 = icmp ugt i64 %122, 4
  br i1 %124, label %125, label %138

125:                                              ; preds = %123
  %126 = and i64 %121, 24
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %133

128:                                              ; preds = %125
  %129 = lshr i64 %121, 5
  %130 = trunc i64 %129 to i8
  %131 = icmp ugt i8 %130, 11
  %132 = select i1 %131, i64 416, i64 0
  br label %133

133:                                              ; preds = %128, %125
  %134 = phi i64 [ 0, %125 ], [ %132, %128 ]
  %135 = and i64 %121, -8168
  %136 = or i64 %135, %134
  %137 = or i64 %136, 5
  br label %138

138:                                              ; preds = %133, %123
  %139 = phi i64 [ %137, %133 ], [ %121, %123 ]
  %140 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %119, i64 0, i32 1, i32 0
  %141 = load i64, i64* %140, align 8
  %142 = and i64 %141, 7
  %143 = icmp ugt i64 %142, 4
  br i1 %143, label %144, label %157

144:                                              ; preds = %138
  %145 = and i64 %141, 24
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %152

147:                                              ; preds = %144
  %148 = lshr i64 %141, 5
  %149 = trunc i64 %148 to i8
  %150 = icmp ugt i8 %149, 11
  %151 = select i1 %150, i64 416, i64 0
  br label %152

152:                                              ; preds = %147, %144
  %153 = phi i64 [ 0, %144 ], [ %151, %147 ]
  %154 = and i64 %141, -8168
  %155 = or i64 %154, %153
  %156 = or i64 %155, 5
  br label %157

157:                                              ; preds = %138, %152
  %158 = phi i64 [ %156, %152 ], [ %141, %138 ]
  %159 = icmp eq i64 %139, %158
  br i1 %159, label %162, label %160

160:                                              ; preds = %117, %157
  %161 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %119, i64 0, i32 1
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %161)
  br label %162

162:                                              ; preds = %117, %157, %160
  %163 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %118, i64 1
  %164 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %163, %76
  br i1 %164, label %94, label %117

165:                                              ; preds = %446
  %166 = icmp eq i64 %447, 0
  br i1 %166, label %1194, label %167

167:                                              ; preds = %165
  %168 = bitcast %"class.v8::internal::ZoneSet"* %6 to i64*
  %169 = bitcast %"class.v8::internal::compiler::InstructionOperand"* %8 to i8*
  %170 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %8, i64 0, i32 0
  %171 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %450

172:                                              ; preds = %108, %446
  %173 = phi i64 [ 0, %108 ], [ %447, %446 ]
  %174 = phi %"class.v8::internal::compiler::MoveOperands"** [ %105, %108 ], [ %448, %446 ]
  %175 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %174, align 8
  %176 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %175, i64 0, i32 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = and i64 %177, 7
  switch i64 %178, label %179 [
    i64 0, label %446
    i64 4, label %216
  ]

179:                                              ; preds = %172
  %180 = icmp ugt i64 %178, 4
  br i1 %180, label %181, label %194

181:                                              ; preds = %179
  %182 = and i64 %177, 24
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %189

184:                                              ; preds = %181
  %185 = lshr i64 %177, 5
  %186 = trunc i64 %185 to i8
  %187 = icmp ugt i8 %186, 11
  %188 = select i1 %187, i64 416, i64 0
  br label %189

189:                                              ; preds = %184, %181
  %190 = phi i64 [ 0, %181 ], [ %188, %184 ]
  %191 = and i64 %177, -8168
  %192 = or i64 %191, %190
  %193 = or i64 %192, 5
  br label %194

194:                                              ; preds = %189, %179
  %195 = phi i64 [ %193, %189 ], [ %177, %179 ]
  %196 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %175, i64 0, i32 1, i32 0
  %197 = load i64, i64* %196, align 8
  %198 = and i64 %197, 7
  %199 = icmp ugt i64 %198, 4
  br i1 %199, label %200, label %213

200:                                              ; preds = %194
  %201 = and i64 %197, 24
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %208

203:                                              ; preds = %200
  %204 = lshr i64 %197, 5
  %205 = trunc i64 %204 to i8
  %206 = icmp ugt i8 %205, 11
  %207 = select i1 %206, i64 416, i64 0
  br label %208

208:                                              ; preds = %203, %200
  %209 = phi i64 [ 0, %200 ], [ %207, %203 ]
  %210 = and i64 %197, -8168
  %211 = or i64 %210, %209
  %212 = or i64 %211, 5
  br label %213

213:                                              ; preds = %194, %208
  %214 = phi i64 [ %212, %208 ], [ %197, %194 ]
  %215 = icmp eq i64 %195, %214
  br i1 %215, label %446, label %216

216:                                              ; preds = %172, %213
  %217 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %175, i64 0, i32 1
  %218 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %217)
  br i1 %218, label %446, label %219

219:                                              ; preds = %216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #5
  store i64 %177, i64* %110, align 8
  %220 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %217, i64 0, i32 0
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %111, align 8
  %222 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %112, align 8
  %223 = icmp eq %"class.std::__1::__tree_node"* %222, null
  br i1 %223, label %406, label %224

224:                                              ; preds = %219
  %225 = icmp eq i64 %178, 4
  %226 = icmp ugt i64 %178, 4
  %227 = and i64 %177, 24
  %228 = icmp eq i64 %227, 0
  %229 = lshr i64 %177, 5
  %230 = trunc i64 %229 to i8
  %231 = icmp ugt i8 %230, 11
  %232 = and i64 %177, -8168
  %233 = and i64 %221, 7
  %234 = icmp ugt i64 %233, 4
  %235 = and i64 %221, 24
  %236 = icmp eq i64 %235, 0
  %237 = lshr i64 %221, 5
  %238 = trunc i64 %237 to i8
  %239 = icmp ugt i8 %238, 11
  %240 = and i64 %221, -8168
  %241 = and i1 %228, %231
  %242 = select i1 %241, i64 416, i64 0
  %243 = or i64 %232, %242
  %244 = or i64 %243, 5
  %245 = select i1 %226, i64 %244, i64 %177
  %246 = and i1 %236, %239
  %247 = select i1 %246, i64 416, i64 0
  %248 = or i64 %240, %247
  %249 = or i64 %248, 5
  %250 = select i1 %234, i64 %249, i64 %221
  br label %251

251:                                              ; preds = %402, %224
  %252 = phi %"class.std::__1::__tree_node"* [ %405, %402 ], [ %222, %224 ]
  %253 = phi %"class.std::__1::__tree_node_base"** [ %404, %402 ], [ %113, %224 ]
  %254 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 1
  br i1 %225, label %255, label %261

255:                                              ; preds = %251
  %256 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %254, %7
  br i1 %256, label %282, label %257

257:                                              ; preds = %255
  %258 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %254, i64 0, i32 0, i32 0
  %259 = load i64, i64* %258, align 8
  %260 = and i64 %259, 7
  br label %306

261:                                              ; preds = %251
  %262 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %254, i64 0, i32 0, i32 0
  %263 = load i64, i64* %262, align 8
  %264 = and i64 %263, 7
  %265 = icmp ugt i64 %264, 4
  br i1 %265, label %266, label %279

266:                                              ; preds = %261
  %267 = and i64 %263, 24
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %269, label %274

269:                                              ; preds = %266
  %270 = lshr i64 %263, 5
  %271 = trunc i64 %270 to i8
  %272 = icmp ugt i8 %271, 11
  %273 = select i1 %272, i64 416, i64 0
  br label %274

274:                                              ; preds = %269, %266
  %275 = phi i64 [ 0, %266 ], [ %273, %269 ]
  %276 = and i64 %263, -8168
  %277 = or i64 %276, %275
  %278 = or i64 %277, 5
  br label %279

279:                                              ; preds = %274, %261
  %280 = phi i64 [ %278, %274 ], [ %263, %261 ]
  %281 = icmp eq i64 %245, %280
  br i1 %281, label %282, label %306

282:                                              ; preds = %279, %255
  %283 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 1, i32 1, i32 0
  %284 = load i64, i64* %283, align 8
  %285 = and i64 %284, 7
  %286 = icmp ugt i64 %285, 4
  br i1 %286, label %287, label %300

287:                                              ; preds = %282
  %288 = and i64 %284, 24
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %290, label %295

290:                                              ; preds = %287
  %291 = lshr i64 %284, 5
  %292 = trunc i64 %291 to i8
  %293 = icmp ugt i8 %292, 11
  %294 = select i1 %293, i64 416, i64 0
  br label %295

295:                                              ; preds = %290, %287
  %296 = phi i64 [ 0, %287 ], [ %294, %290 ]
  %297 = and i64 %284, -8168
  %298 = or i64 %297, %296
  %299 = or i64 %298, 5
  br label %300

300:                                              ; preds = %295, %282
  %301 = phi i64 [ %299, %295 ], [ %284, %282 ]
  %302 = icmp ult i64 %250, %301
  br i1 %302, label %326, label %303

303:                                              ; preds = %300
  %304 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %254, i64 0, i32 0, i32 0
  %305 = load i64, i64* %304, align 8
  br label %332

306:                                              ; preds = %279, %257
  %307 = phi i64 [ %260, %257 ], [ %264, %279 ]
  %308 = phi i64 [ %259, %257 ], [ %263, %279 ]
  %309 = icmp ugt i64 %307, 4
  br i1 %309, label %310, label %323

310:                                              ; preds = %306
  %311 = and i64 %308, 24
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %318

313:                                              ; preds = %310
  %314 = lshr i64 %308, 5
  %315 = trunc i64 %314 to i8
  %316 = icmp ugt i8 %315, 11
  %317 = select i1 %316, i64 416, i64 0
  br label %318

318:                                              ; preds = %313, %310
  %319 = phi i64 [ 0, %310 ], [ %317, %313 ]
  %320 = and i64 %308, -8168
  %321 = or i64 %320, %319
  %322 = or i64 %321, 5
  br label %323

323:                                              ; preds = %318, %306
  %324 = phi i64 [ %322, %318 ], [ %308, %306 ]
  %325 = icmp ult i64 %245, %324
  br i1 %325, label %326, label %332

326:                                              ; preds = %323, %300
  %327 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 0, i32 0, i32 0
  %328 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %327, align 8
  %329 = icmp eq %"class.std::__1::__tree_node_base"* %328, null
  br i1 %329, label %330, label %402

330:                                              ; preds = %326
  %331 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 0, i32 0
  br label %406

332:                                              ; preds = %323, %303
  %333 = phi i64 [ %305, %303 ], [ %308, %323 ]
  %334 = and i64 %333, 7
  %335 = icmp eq i64 %334, 4
  br i1 %335, label %336, label %338

336:                                              ; preds = %332
  %337 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %254, %7
  br i1 %337, label %356, label %391

338:                                              ; preds = %332
  %339 = icmp ugt i64 %334, 4
  br i1 %339, label %340, label %353

340:                                              ; preds = %338
  %341 = and i64 %333, 24
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %348

343:                                              ; preds = %340
  %344 = lshr i64 %333, 5
  %345 = trunc i64 %344 to i8
  %346 = icmp ugt i8 %345, 11
  %347 = select i1 %346, i64 416, i64 0
  br label %348

348:                                              ; preds = %343, %340
  %349 = phi i64 [ 0, %340 ], [ %347, %343 ]
  %350 = and i64 %333, -8168
  %351 = or i64 %350, %349
  %352 = or i64 %351, 5
  br label %353

353:                                              ; preds = %348, %338
  %354 = phi i64 [ %352, %348 ], [ %333, %338 ]
  %355 = icmp eq i64 %354, %245
  br i1 %355, label %356, label %377

356:                                              ; preds = %353, %336
  %357 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 1, i32 1, i32 0
  %358 = load i64, i64* %357, align 8
  %359 = and i64 %358, 7
  %360 = icmp ugt i64 %359, 4
  br i1 %360, label %361, label %374

361:                                              ; preds = %356
  %362 = and i64 %358, 24
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %369

364:                                              ; preds = %361
  %365 = lshr i64 %358, 5
  %366 = trunc i64 %365 to i8
  %367 = icmp ugt i8 %366, 11
  %368 = select i1 %367, i64 416, i64 0
  br label %369

369:                                              ; preds = %364, %361
  %370 = phi i64 [ 0, %361 ], [ %368, %364 ]
  %371 = and i64 %358, -8168
  %372 = or i64 %371, %370
  %373 = or i64 %372, 5
  br label %374

374:                                              ; preds = %369, %356
  %375 = phi i64 [ %373, %369 ], [ %358, %356 ]
  %376 = icmp ult i64 %375, %250
  br i1 %376, label %394, label %400

377:                                              ; preds = %353
  br i1 %339, label %378, label %391

378:                                              ; preds = %377
  %379 = and i64 %333, 24
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %386

381:                                              ; preds = %378
  %382 = lshr i64 %333, 5
  %383 = trunc i64 %382 to i8
  %384 = icmp ugt i8 %383, 11
  %385 = select i1 %384, i64 416, i64 0
  br label %386

386:                                              ; preds = %381, %378
  %387 = phi i64 [ 0, %378 ], [ %385, %381 ]
  %388 = and i64 %333, -8168
  %389 = or i64 %388, %387
  %390 = or i64 %389, 5
  br label %391

391:                                              ; preds = %386, %377, %336
  %392 = phi i64 [ %390, %386 ], [ %333, %377 ], [ %333, %336 ]
  %393 = icmp ult i64 %392, %245
  br i1 %393, label %394, label %400

394:                                              ; preds = %391, %374
  %395 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 0, i32 1
  %396 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %395, align 8
  %397 = icmp eq %"class.std::__1::__tree_node_base"* %396, null
  br i1 %397, label %398, label %402

398:                                              ; preds = %394
  %399 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 0, i32 0
  br label %406

400:                                              ; preds = %391, %374
  %401 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %252, i64 0, i32 0, i32 0
  br label %406

402:                                              ; preds = %394, %326
  %403 = phi %"class.std::__1::__tree_node_base"* [ %328, %326 ], [ %396, %394 ]
  %404 = phi %"class.std::__1::__tree_node_base"** [ %327, %326 ], [ %395, %394 ]
  %405 = bitcast %"class.std::__1::__tree_node_base"* %403 to %"class.std::__1::__tree_node"*
  br label %251

406:                                              ; preds = %219, %400, %398, %330
  %407 = phi %"class.std::__1::__tree_end_node"* [ %331, %330 ], [ %399, %398 ], [ %401, %400 ], [ %104, %219 ]
  %408 = phi %"class.std::__1::__tree_node_base"** [ %327, %330 ], [ %395, %398 ], [ %253, %400 ], [ %114, %219 ]
  %409 = bitcast %"class.std::__1::__tree_node_base"** %408 to %"class.std::__1::__tree_node"**
  %410 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %409, align 8
  %411 = icmp eq %"class.std::__1::__tree_node"* %410, null
  br i1 %411, label %412, label %444

412:                                              ; preds = %406
  %413 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %115, align 8, !noalias !36
  %414 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %413, i64 0, i32 2
  %415 = load i64, i64* %414, align 8, !noalias !36
  %416 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %413, i64 0, i32 3
  %417 = load i64, i64* %416, align 8, !noalias !36
  %418 = sub i64 %417, %415
  %419 = icmp ult i64 %418, 48
  br i1 %419, label %420, label %422, !prof !9

420:                                              ; preds = %412
  %421 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %413, i64 48) #5, !noalias !36
  br label %424

422:                                              ; preds = %412
  %423 = add i64 %415, 48
  store i64 %423, i64* %414, align 8, !noalias !36
  br label %424

424:                                              ; preds = %422, %420
  %425 = phi i64 [ %421, %420 ], [ %415, %422 ]
  %426 = inttoptr i64 %425 to %"class.std::__1::__tree_node"*
  %427 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %426, i64 0, i32 1
  %428 = bitcast %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %427 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %428, i8* nonnull align 8 %109, i64 16, i1 false) #5, !noalias !36
  %429 = inttoptr i64 %425 to %"class.std::__1::__tree_node_base"*
  %430 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %429, i64 0, i32 2
  %431 = inttoptr i64 %425 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %431, i8 0, i64 16, i1 false) #5
  store %"class.std::__1::__tree_end_node"* %407, %"class.std::__1::__tree_end_node"** %430, align 8
  store %"class.std::__1::__tree_node_base"* %429, %"class.std::__1::__tree_node_base"** %408, align 8
  %432 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %98, align 8
  %433 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %432, i64 0, i32 0
  %434 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %433, align 8
  %435 = icmp eq %"class.std::__1::__tree_node_base"* %434, null
  br i1 %435, label %439, label %436

436:                                              ; preds = %424
  %437 = ptrtoint %"class.std::__1::__tree_node_base"* %434 to i64
  store i64 %437, i64* %116, align 8
  %438 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %408, align 8
  br label %439

439:                                              ; preds = %436, %424
  %440 = phi %"class.std::__1::__tree_node_base"* [ %429, %424 ], [ %438, %436 ]
  %441 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %113, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %441, %"class.std::__1::__tree_node_base"* %440) #5
  %442 = load i64, i64* %103, align 8
  %443 = add i64 %442, 1
  store i64 %443, i64* %103, align 8
  br label %444

444:                                              ; preds = %406, %439
  %445 = phi i64 [ %173, %406 ], [ %443, %439 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #5
  br label %446

446:                                              ; preds = %172, %216, %444, %213
  %447 = phi i64 [ %173, %172 ], [ %173, %216 ], [ %445, %444 ], [ %173, %213 ]
  %448 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %174, i64 1
  %449 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %448, %106
  br i1 %449, label %165, label %172

450:                                              ; preds = %167, %454
  %451 = load i64, i64* %168, align 8
  %452 = inttoptr i64 %451 to %"class.std::__1::__tree_end_node"*
  %453 = icmp eq %"class.std::__1::__tree_end_node"* %104, %452
  br i1 %453, label %535, label %457

454:                                              ; preds = %532
  %455 = and i8 %533, 1
  %456 = icmp eq i8 %455, 0
  br i1 %456, label %535, label %450

457:                                              ; preds = %450, %532
  %458 = phi %"class.std::__1::__tree_end_node"* [ %488, %532 ], [ %452, %450 ]
  %459 = phi i8 [ %533, %532 ], [ 0, %450 ]
  %460 = phi i64 [ %489, %532 ], [ %451, %450 ]
  %461 = inttoptr i64 %460 to %"class.std::__1::__tree_node_base"*
  %462 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %461, i64 0, i32 1
  %463 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %462, align 8
  %464 = icmp eq %"class.std::__1::__tree_node_base"* %463, null
  br i1 %464, label %465, label %471

465:                                              ; preds = %457
  %466 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %461, i64 0, i32 2
  %467 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %466, align 8
  %468 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %467, i64 0, i32 0
  %469 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %468, align 8
  %470 = icmp eq %"class.std::__1::__tree_node_base"* %469, %461
  br i1 %470, label %487, label %478

471:                                              ; preds = %457, %471
  %472 = phi %"class.std::__1::__tree_node_base"* [ %474, %471 ], [ %463, %457 ]
  %473 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %472, i64 0, i32 0, i32 0
  %474 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %473, align 8
  %475 = icmp eq %"class.std::__1::__tree_node_base"* %474, null
  br i1 %475, label %476, label %471

476:                                              ; preds = %471
  %477 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %472, i64 0, i32 0
  br label %487

478:                                              ; preds = %465, %478
  %479 = phi %"class.std::__1::__tree_end_node"** [ %482, %478 ], [ %466, %465 ]
  %480 = bitcast %"class.std::__1::__tree_end_node"** %479 to %"class.std::__1::__tree_node_base"**
  %481 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %480, align 8
  %482 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %481, i64 0, i32 2
  %483 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %482, align 8
  %484 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %483, i64 0, i32 0
  %485 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %484, align 8
  %486 = icmp eq %"class.std::__1::__tree_node_base"* %485, %481
  br i1 %486, label %487, label %478

487:                                              ; preds = %478, %465, %476
  %488 = phi %"class.std::__1::__tree_end_node"* [ %477, %476 ], [ %467, %465 ], [ %483, %478 ]
  %489 = ptrtoint %"class.std::__1::__tree_end_node"* %488 to i64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #5
  %490 = inttoptr i64 %460 to %"class.std::__1::__tree_node"*
  %491 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %490, i64 0, i32 1, i32 0, i32 0
  %492 = load i64, i64* %491, align 8
  store i64 %492, i64* %170, align 8
  %493 = call fastcc zeroext i1 @_ZNK2v88internal8compiler12_GLOBAL__N_110OperandSet17ContainsOpOrAliasERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* nonnull dereferenceable(8) %8)
  br i1 %493, label %494, label %532

494:                                              ; preds = %487
  %495 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %490, i64 0, i32 1, i32 1
  call fastcc void @_ZN2v88internal8compiler12_GLOBAL__N_110OperandSet8InsertOpERKNS1_18InstructionOperandE(%"class.v8::internal::compiler::(anonymous namespace)::OperandSet"* nonnull %5, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %495)
  %496 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %458, i64 1, i32 0
  %497 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %496, align 8
  %498 = icmp eq %"class.std::__1::__tree_node_base"* %497, null
  br i1 %498, label %499, label %506

499:                                              ; preds = %494
  %500 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %458, i64 2
  %501 = bitcast %"class.std::__1::__tree_end_node"* %500 to %"class.std::__1::__tree_end_node"**
  %502 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %501, align 8
  %503 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %502, i64 0, i32 0
  %504 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %503, align 8
  %505 = icmp eq %"class.std::__1::__tree_node_base"* %504, %461
  br i1 %505, label %522, label %513

506:                                              ; preds = %494, %506
  %507 = phi %"class.std::__1::__tree_node_base"* [ %509, %506 ], [ %497, %494 ]
  %508 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %507, i64 0, i32 0, i32 0
  %509 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %508, align 8
  %510 = icmp eq %"class.std::__1::__tree_node_base"* %509, null
  br i1 %510, label %511, label %506

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %507, i64 0, i32 0
  br label %522

513:                                              ; preds = %499, %513
  %514 = phi %"class.std::__1::__tree_end_node"** [ %517, %513 ], [ %501, %499 ]
  %515 = bitcast %"class.std::__1::__tree_end_node"** %514 to %"class.std::__1::__tree_node_base"**
  %516 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %515, align 8
  %517 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %516, i64 0, i32 2
  %518 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %517, align 8
  %519 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %518, i64 0, i32 0
  %520 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %519, align 8
  %521 = icmp eq %"class.std::__1::__tree_node_base"* %520, %516
  br i1 %521, label %522, label %513

522:                                              ; preds = %513, %511, %499
  %523 = phi %"class.std::__1::__tree_end_node"* [ %512, %511 ], [ %502, %499 ], [ %518, %513 ]
  %524 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %98, align 8
  %525 = icmp eq %"class.std::__1::__tree_end_node"* %524, %458
  br i1 %525, label %526, label %528

526:                                              ; preds = %522
  %527 = ptrtoint %"class.std::__1::__tree_end_node"* %523 to i64
  store i64 %527, i64* %168, align 8
  br label %528

528:                                              ; preds = %522, %526
  %529 = load i64, i64* %103, align 8
  %530 = add i64 %529, -1
  store i64 %530, i64* %103, align 8
  %531 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %171, align 8
  call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %531, %"class.std::__1::__tree_node_base"* %461) #5
  br label %532

532:                                              ; preds = %528, %487
  %533 = phi i8 [ 1, %528 ], [ %459, %487 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #5
  %534 = icmp eq %"class.std::__1::__tree_end_node"* %104, %488
  br i1 %534, label %454, label %457

535:                                              ; preds = %450, %454
  %536 = bitcast %"class.v8::internal::compiler::ParallelMove"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %536) #5
  %537 = load i64, i64* %96, align 8
  %538 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %9, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %539 = bitcast %"struct.std::__1::__compressed_pair_elem.613"* %538 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %536, i8 0, i64 24, i1 false) #5
  store i64 %537, i64* %539, align 8
  %540 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %20, align 8
  %541 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %22, align 8
  %542 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %540, %541
  br i1 %542, label %1193, label %543

543:                                              ; preds = %535
  %544 = bitcast %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %10 to i8*
  %545 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %10, i64 0, i32 0, i32 0
  %546 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %10, i64 0, i32 1, i32 0
  %547 = bitcast %"class.std::__1::__tree_end_node"* %104 to %"class.std::__1::__tree_node"**
  %548 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  br label %557

549:                                              ; preds = %907
  %550 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %551 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %550, align 8
  %552 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %553 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %552, align 8
  %554 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %555 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %556 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %551, %553
  br i1 %556, label %1187, label %910

557:                                              ; preds = %543, %907
  %558 = phi %"class.v8::internal::compiler::MoveOperands"** [ %540, %543 ], [ %908, %907 ]
  %559 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %558, align 8
  %560 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %559, i64 0, i32 0, i32 0
  %561 = load i64, i64* %560, align 8
  %562 = and i64 %561, 7
  switch i64 %562, label %566 [
    i64 0, label %907
    i64 4, label %563
  ]

563:                                              ; preds = %557
  %564 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %559, i64 0, i32 1, i32 0
  %565 = load i64, i64* %564, align 8
  br label %603

566:                                              ; preds = %557
  %567 = icmp ugt i64 %562, 4
  br i1 %567, label %568, label %581

568:                                              ; preds = %566
  %569 = and i64 %561, 24
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %571, label %576

571:                                              ; preds = %568
  %572 = lshr i64 %561, 5
  %573 = trunc i64 %572 to i8
  %574 = icmp ugt i8 %573, 11
  %575 = select i1 %574, i64 416, i64 0
  br label %576

576:                                              ; preds = %571, %568
  %577 = phi i64 [ 0, %568 ], [ %575, %571 ]
  %578 = and i64 %561, -8168
  %579 = or i64 %578, %577
  %580 = or i64 %579, 5
  br label %581

581:                                              ; preds = %576, %566
  %582 = phi i64 [ %580, %576 ], [ %561, %566 ]
  %583 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %559, i64 0, i32 1, i32 0
  %584 = load i64, i64* %583, align 8
  %585 = and i64 %584, 7
  %586 = icmp ugt i64 %585, 4
  br i1 %586, label %587, label %600

587:                                              ; preds = %581
  %588 = and i64 %584, 24
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %595

590:                                              ; preds = %587
  %591 = lshr i64 %584, 5
  %592 = trunc i64 %591 to i8
  %593 = icmp ugt i8 %592, 11
  %594 = select i1 %593, i64 416, i64 0
  br label %595

595:                                              ; preds = %590, %587
  %596 = phi i64 [ 0, %587 ], [ %594, %590 ]
  %597 = and i64 %584, -8168
  %598 = or i64 %597, %596
  %599 = or i64 %598, 5
  br label %600

600:                                              ; preds = %581, %595
  %601 = phi i64 [ %599, %595 ], [ %584, %581 ]
  %602 = icmp eq i64 %582, %601
  br i1 %602, label %907, label %603

603:                                              ; preds = %563, %600
  %604 = phi i64 [ %565, %563 ], [ %584, %600 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %544) #5
  %605 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %559, i64 0, i32 0
  store i64 %561, i64* %545, align 8
  %606 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %559, i64 0, i32 1
  store i64 %604, i64* %546, align 8
  %607 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %547, align 8
  %608 = icmp eq %"class.std::__1::__tree_node"* %607, null
  br i1 %608, label %906, label %609

609:                                              ; preds = %603
  %610 = icmp ugt i64 %562, 4
  %611 = and i64 %604, 7
  %612 = icmp ugt i64 %611, 4
  %613 = and i64 %604, 24
  %614 = icmp eq i64 %613, 0
  %615 = lshr i64 %604, 5
  %616 = trunc i64 %615 to i8
  %617 = icmp ugt i8 %616, 11
  %618 = select i1 %617, i64 416, i64 0
  %619 = and i64 %604, -8168
  %620 = or i64 %619, 5
  br i1 %610, label %625, label %621

621:                                              ; preds = %609
  %622 = select i1 %614, i64 %618, i64 0
  %623 = or i64 %622, %620
  %624 = select i1 %612, i64 %623, i64 %604
  br label %715

625:                                              ; preds = %609
  %626 = and i64 %561, -8168
  %627 = lshr i64 %561, 5
  %628 = trunc i64 %627 to i8
  %629 = icmp ugt i8 %628, 11
  %630 = and i64 %561, 24
  %631 = icmp eq i64 %630, 0
  %632 = and i1 %631, %629
  %633 = select i1 %632, i64 416, i64 0
  %634 = or i64 %626, %633
  %635 = or i64 %634, 5
  %636 = select i1 %614, i64 %618, i64 0
  %637 = or i64 %636, %620
  %638 = select i1 %612, i64 %637, i64 %604
  br label %639

639:                                              ; preds = %705, %625
  %640 = phi %"class.std::__1::__tree_end_node"* [ %712, %705 ], [ %104, %625 ]
  %641 = phi %"class.std::__1::__tree_node"* [ %713, %705 ], [ %607, %625 ]
  %642 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %641, i64 0, i32 1
  %643 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %642, i64 0, i32 0, i32 0
  %644 = load i64, i64* %643, align 8
  %645 = and i64 %644, 7
  %646 = icmp eq i64 %645, 4
  br i1 %646, label %665, label %647

647:                                              ; preds = %639
  %648 = icmp ugt i64 %645, 4
  br i1 %648, label %649, label %662

649:                                              ; preds = %647
  %650 = and i64 %644, 24
  %651 = icmp eq i64 %650, 0
  br i1 %651, label %652, label %657

652:                                              ; preds = %649
  %653 = lshr i64 %644, 5
  %654 = trunc i64 %653 to i8
  %655 = icmp ugt i8 %654, 11
  %656 = select i1 %655, i64 416, i64 0
  br label %657

657:                                              ; preds = %652, %649
  %658 = phi i64 [ 0, %649 ], [ %656, %652 ]
  %659 = and i64 %644, -8168
  %660 = or i64 %659, %658
  %661 = or i64 %660, 5
  br label %662

662:                                              ; preds = %657, %647
  %663 = phi i64 [ %661, %657 ], [ %644, %647 ]
  %664 = icmp eq i64 %663, %635
  br i1 %664, label %684, label %667

665:                                              ; preds = %639
  %666 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %642, %10
  br i1 %666, label %684, label %681

667:                                              ; preds = %662
  br i1 %648, label %668, label %681

668:                                              ; preds = %667
  %669 = and i64 %644, 24
  %670 = icmp eq i64 %669, 0
  br i1 %670, label %671, label %676

671:                                              ; preds = %668
  %672 = lshr i64 %644, 5
  %673 = trunc i64 %672 to i8
  %674 = icmp ugt i8 %673, 11
  %675 = select i1 %674, i64 416, i64 0
  br label %676

676:                                              ; preds = %671, %668
  %677 = phi i64 [ 0, %668 ], [ %675, %671 ]
  %678 = and i64 %644, -8168
  %679 = or i64 %678, %677
  %680 = or i64 %679, 5
  br label %681

681:                                              ; preds = %676, %667, %665
  %682 = phi i64 [ %680, %676 ], [ %644, %667 ], [ %644, %665 ]
  %683 = icmp ult i64 %682, %635
  br label %705

684:                                              ; preds = %665, %662
  %685 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %641, i64 0, i32 1, i32 1, i32 0
  %686 = load i64, i64* %685, align 8
  %687 = and i64 %686, 7
  %688 = icmp ugt i64 %687, 4
  br i1 %688, label %689, label %702

689:                                              ; preds = %684
  %690 = and i64 %686, 24
  %691 = icmp eq i64 %690, 0
  br i1 %691, label %692, label %697

692:                                              ; preds = %689
  %693 = lshr i64 %686, 5
  %694 = trunc i64 %693 to i8
  %695 = icmp ugt i8 %694, 11
  %696 = select i1 %695, i64 416, i64 0
  br label %697

697:                                              ; preds = %692, %689
  %698 = phi i64 [ 0, %689 ], [ %696, %692 ]
  %699 = and i64 %686, -8168
  %700 = or i64 %699, %698
  %701 = or i64 %700, 5
  br label %702

702:                                              ; preds = %697, %684
  %703 = phi i64 [ %701, %697 ], [ %686, %684 ]
  %704 = icmp ult i64 %703, %638
  br label %705

705:                                              ; preds = %702, %681
  %706 = phi i1 [ %704, %702 ], [ %683, %681 ]
  %707 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %641, i64 0, i32 0, i32 1
  %708 = bitcast %"class.std::__1::__tree_node_base"** %707 to %"class.std::__1::__tree_node"**
  %709 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %641, i64 0, i32 0, i32 0
  %710 = bitcast %"class.std::__1::__tree_node"* %641 to %"class.std::__1::__tree_node"**
  %711 = select i1 %706, %"class.std::__1::__tree_node"** %708, %"class.std::__1::__tree_node"** %710
  %712 = select i1 %706, %"class.std::__1::__tree_end_node"* %640, %"class.std::__1::__tree_end_node"* %709
  %713 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %711, align 8
  %714 = icmp eq %"class.std::__1::__tree_node"* %713, null
  br i1 %714, label %791, label %639

715:                                              ; preds = %781, %621
  %716 = phi %"class.std::__1::__tree_end_node"* [ %788, %781 ], [ %104, %621 ]
  %717 = phi %"class.std::__1::__tree_node"* [ %789, %781 ], [ %607, %621 ]
  %718 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %717, i64 0, i32 1
  %719 = getelementptr inbounds %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey", %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %718, i64 0, i32 0, i32 0
  %720 = load i64, i64* %719, align 8
  %721 = and i64 %720, 7
  %722 = icmp eq i64 %721, 4
  br i1 %722, label %723, label %725

723:                                              ; preds = %715
  %724 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %718, %10
  br i1 %724, label %743, label %778

725:                                              ; preds = %715
  %726 = icmp ugt i64 %721, 4
  br i1 %726, label %727, label %740

727:                                              ; preds = %725
  %728 = and i64 %720, 24
  %729 = icmp eq i64 %728, 0
  br i1 %729, label %730, label %735

730:                                              ; preds = %727
  %731 = lshr i64 %720, 5
  %732 = trunc i64 %731 to i8
  %733 = icmp ugt i8 %732, 11
  %734 = select i1 %733, i64 416, i64 0
  br label %735

735:                                              ; preds = %730, %727
  %736 = phi i64 [ 0, %727 ], [ %734, %730 ]
  %737 = and i64 %720, -8168
  %738 = or i64 %737, %736
  %739 = or i64 %738, 5
  br label %740

740:                                              ; preds = %735, %725
  %741 = phi i64 [ %739, %735 ], [ %720, %725 ]
  %742 = icmp eq i64 %741, %561
  br i1 %742, label %743, label %764

743:                                              ; preds = %740, %723
  %744 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %717, i64 0, i32 1, i32 1, i32 0
  %745 = load i64, i64* %744, align 8
  %746 = and i64 %745, 7
  %747 = icmp ugt i64 %746, 4
  br i1 %747, label %748, label %761

748:                                              ; preds = %743
  %749 = and i64 %745, 24
  %750 = icmp eq i64 %749, 0
  br i1 %750, label %751, label %756

751:                                              ; preds = %748
  %752 = lshr i64 %745, 5
  %753 = trunc i64 %752 to i8
  %754 = icmp ugt i8 %753, 11
  %755 = select i1 %754, i64 416, i64 0
  br label %756

756:                                              ; preds = %751, %748
  %757 = phi i64 [ 0, %748 ], [ %755, %751 ]
  %758 = and i64 %745, -8168
  %759 = or i64 %758, %757
  %760 = or i64 %759, 5
  br label %761

761:                                              ; preds = %756, %743
  %762 = phi i64 [ %760, %756 ], [ %745, %743 ]
  %763 = icmp ult i64 %762, %624
  br label %781

764:                                              ; preds = %740
  br i1 %726, label %765, label %778

765:                                              ; preds = %764
  %766 = and i64 %720, 24
  %767 = icmp eq i64 %766, 0
  br i1 %767, label %768, label %773

768:                                              ; preds = %765
  %769 = lshr i64 %720, 5
  %770 = trunc i64 %769 to i8
  %771 = icmp ugt i8 %770, 11
  %772 = select i1 %771, i64 416, i64 0
  br label %773

773:                                              ; preds = %768, %765
  %774 = phi i64 [ 0, %765 ], [ %772, %768 ]
  %775 = and i64 %720, -8168
  %776 = or i64 %775, %774
  %777 = or i64 %776, 5
  br label %778

778:                                              ; preds = %773, %764, %723
  %779 = phi i64 [ %777, %773 ], [ %720, %764 ], [ %720, %723 ]
  %780 = icmp ult i64 %779, %561
  br label %781

781:                                              ; preds = %778, %761
  %782 = phi i1 [ %763, %761 ], [ %780, %778 ]
  %783 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %717, i64 0, i32 0, i32 1
  %784 = bitcast %"class.std::__1::__tree_node_base"** %783 to %"class.std::__1::__tree_node"**
  %785 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %717, i64 0, i32 0, i32 0
  %786 = bitcast %"class.std::__1::__tree_node"* %717 to %"class.std::__1::__tree_node"**
  %787 = select i1 %782, %"class.std::__1::__tree_node"** %784, %"class.std::__1::__tree_node"** %786
  %788 = select i1 %782, %"class.std::__1::__tree_end_node"* %716, %"class.std::__1::__tree_end_node"* %785
  %789 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %787, align 8
  %790 = icmp eq %"class.std::__1::__tree_node"* %789, null
  br i1 %790, label %791, label %715

791:                                              ; preds = %781, %705
  %792 = phi %"class.std::__1::__tree_end_node"* [ %712, %705 ], [ %788, %781 ]
  %793 = icmp eq %"class.std::__1::__tree_end_node"* %792, %104
  br i1 %793, label %906, label %794

794:                                              ; preds = %791
  %795 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %792, i64 4
  %796 = icmp eq i64 %562, 4
  br i1 %796, label %797, label %800

797:                                              ; preds = %794
  %798 = bitcast %"class.std::__1::__tree_end_node"* %795 to %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"*
  %799 = icmp eq %"struct.v8::internal::compiler::(anonymous namespace)::MoveKey"* %10, %798
  br i1 %799, label %836, label %864

800:                                              ; preds = %794
  br i1 %610, label %801, label %814

801:                                              ; preds = %800
  %802 = and i64 %561, 24
  %803 = icmp eq i64 %802, 0
  br i1 %803, label %804, label %809

804:                                              ; preds = %801
  %805 = lshr i64 %561, 5
  %806 = trunc i64 %805 to i8
  %807 = icmp ugt i8 %806, 11
  %808 = select i1 %807, i64 416, i64 0
  br label %809

809:                                              ; preds = %804, %801
  %810 = phi i64 [ 0, %801 ], [ %808, %804 ]
  %811 = and i64 %561, -8168
  %812 = or i64 %811, %810
  %813 = or i64 %812, 5
  br label %814

814:                                              ; preds = %809, %800
  %815 = phi i64 [ %813, %809 ], [ %561, %800 ]
  %816 = bitcast %"class.std::__1::__tree_end_node"* %795 to i64*
  %817 = load i64, i64* %816, align 8
  %818 = and i64 %817, 7
  %819 = icmp ugt i64 %818, 4
  br i1 %819, label %820, label %833

820:                                              ; preds = %814
  %821 = and i64 %817, 24
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %823, label %828

823:                                              ; preds = %820
  %824 = lshr i64 %817, 5
  %825 = trunc i64 %824 to i8
  %826 = icmp ugt i8 %825, 11
  %827 = select i1 %826, i64 416, i64 0
  br label %828

828:                                              ; preds = %823, %820
  %829 = phi i64 [ 0, %820 ], [ %827, %823 ]
  %830 = and i64 %817, -8168
  %831 = or i64 %830, %829
  %832 = or i64 %831, 5
  br label %833

833:                                              ; preds = %828, %814
  %834 = phi i64 [ %832, %828 ], [ %817, %814 ]
  %835 = icmp eq i64 %815, %834
  br i1 %835, label %836, label %864

836:                                              ; preds = %833, %797
  %837 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %792, i64 5
  br i1 %612, label %838, label %842

838:                                              ; preds = %836
  %839 = select i1 %614, i64 %618, i64 0
  %840 = or i64 %619, %839
  %841 = or i64 %840, 5
  br label %842

842:                                              ; preds = %838, %836
  %843 = phi i64 [ %841, %838 ], [ %604, %836 ]
  %844 = bitcast %"class.std::__1::__tree_end_node"* %837 to i64*
  %845 = load i64, i64* %844, align 8
  %846 = and i64 %845, 7
  %847 = icmp ugt i64 %846, 4
  br i1 %847, label %848, label %861

848:                                              ; preds = %842
  %849 = and i64 %845, 24
  %850 = icmp eq i64 %849, 0
  br i1 %850, label %851, label %856

851:                                              ; preds = %848
  %852 = lshr i64 %845, 5
  %853 = trunc i64 %852 to i8
  %854 = icmp ugt i8 %853, 11
  %855 = select i1 %854, i64 416, i64 0
  br label %856

856:                                              ; preds = %851, %848
  %857 = phi i64 [ 0, %848 ], [ %855, %851 ]
  %858 = and i64 %845, -8168
  %859 = or i64 %858, %857
  %860 = or i64 %859, 5
  br label %861

861:                                              ; preds = %856, %842
  %862 = phi i64 [ %860, %856 ], [ %845, %842 ]
  %863 = icmp ult i64 %843, %862
  br i1 %863, label %906, label %900

864:                                              ; preds = %833, %797
  br i1 %610, label %865, label %878

865:                                              ; preds = %864
  %866 = and i64 %561, 24
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %873

868:                                              ; preds = %865
  %869 = lshr i64 %561, 5
  %870 = trunc i64 %869 to i8
  %871 = icmp ugt i8 %870, 11
  %872 = select i1 %871, i64 416, i64 0
  br label %873

873:                                              ; preds = %868, %865
  %874 = phi i64 [ 0, %865 ], [ %872, %868 ]
  %875 = and i64 %561, -8168
  %876 = or i64 %875, %874
  %877 = or i64 %876, 5
  br label %878

878:                                              ; preds = %873, %864
  %879 = phi i64 [ %877, %873 ], [ %561, %864 ]
  %880 = bitcast %"class.std::__1::__tree_end_node"* %795 to i64*
  %881 = load i64, i64* %880, align 8
  %882 = and i64 %881, 7
  %883 = icmp ugt i64 %882, 4
  br i1 %883, label %884, label %897

884:                                              ; preds = %878
  %885 = and i64 %881, 24
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %887, label %892

887:                                              ; preds = %884
  %888 = lshr i64 %881, 5
  %889 = trunc i64 %888 to i8
  %890 = icmp ugt i8 %889, 11
  %891 = select i1 %890, i64 416, i64 0
  br label %892

892:                                              ; preds = %887, %884
  %893 = phi i64 [ 0, %884 ], [ %891, %887 ]
  %894 = and i64 %881, -8168
  %895 = or i64 %894, %893
  %896 = or i64 %895, 5
  br label %897

897:                                              ; preds = %892, %878
  %898 = phi i64 [ %896, %892 ], [ %881, %878 ]
  %899 = icmp ult i64 %879, %898
  br i1 %899, label %906, label %900

900:                                              ; preds = %861, %897
  %901 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %548, align 8
  %902 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %901, i64 0, i32 1
  %903 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %902, align 8
  %904 = call %"class.v8::internal::compiler::MoveOperands"* @_ZN2v88internal8compiler12ParallelMove7AddMoveERKNS1_18InstructionOperandES5_PNS0_4ZoneE(%"class.v8::internal::compiler::ParallelMove"* nonnull %9, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %605, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8) %606, %"class.v8::internal::Zone"* %903)
  %905 = bitcast %"class.v8::internal::compiler::MoveOperands"* %559 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %905, i8 0, i64 16, i1 false) #5
  br label %906

906:                                              ; preds = %861, %897, %791, %603, %900
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %544) #5
  br label %907

907:                                              ; preds = %557, %600, %906
  %908 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %558, i64 1
  %909 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %908, %541
  br i1 %909, label %549, label %557

910:                                              ; preds = %549
  %911 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %912 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %911, align 8
  %913 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %912, i64 0, i32 1
  %914 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %913, align 8
  %915 = ptrtoint %"class.v8::internal::Zone"* %914 to i64
  %916 = getelementptr inbounds %"class.v8::internal::compiler::Instruction", %"class.v8::internal::compiler::Instruction"* %1, i64 0, i32 2, i64 0
  %917 = load %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::ParallelMove"** %916, align 8
  %918 = icmp eq %"class.v8::internal::compiler::ParallelMove"* %917, null
  br i1 %918, label %919, label %936

919:                                              ; preds = %910
  %920 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %914, i64 0, i32 2
  %921 = load i64, i64* %920, align 8
  %922 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %914, i64 0, i32 3
  %923 = load i64, i64* %922, align 8
  %924 = sub i64 %923, %921
  %925 = icmp ult i64 %924, 32
  br i1 %925, label %926, label %928, !prof !9

926:                                              ; preds = %919
  %927 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %914, i64 32) #5
  br label %930

928:                                              ; preds = %919
  %929 = add i64 %921, 32
  store i64 %929, i64* %920, align 8
  br label %930

930:                                              ; preds = %928, %926
  %931 = phi i64 [ %927, %926 ], [ %921, %928 ]
  %932 = inttoptr i64 %931 to i8*
  %933 = inttoptr i64 %931 to %"class.v8::internal::compiler::ParallelMove"*
  %934 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %933, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %935 = bitcast %"struct.std::__1::__compressed_pair_elem.613"* %934 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %932, i8 0, i64 24, i1 false) #5
  store i64 %915, i64* %935, align 8
  store %"class.v8::internal::compiler::ParallelMove"* %933, %"class.v8::internal::compiler::ParallelMove"** %916, align 8
  br label %936

936:                                              ; preds = %910, %930
  %937 = phi %"class.v8::internal::compiler::ParallelMove"* [ %933, %930 ], [ %917, %910 ]
  %938 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %937, i64 0, i32 0
  call void @_ZN2v88internal8compiler13MoveOptimizer13CompressMovesEPNS1_12ParallelMoveEPNS0_10ZoneVectorIPNS1_12MoveOperandsEEE(%"class.v8::internal::compiler::MoveOptimizer"* %0, %"class.v8::internal::compiler::ParallelMove"* nonnull %9, %"class.v8::internal::ZoneVector.608"* %938)
  %939 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %554, align 8
  %940 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %555, align 8
  %941 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %939, %940
  br i1 %941, label %1187, label %942

942:                                              ; preds = %936
  %943 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %937, i64 0, i32 0, i32 0, i32 0, i32 1
  %944 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %937, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %945 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %943 to i64*
  %946 = bitcast %"class.v8::internal::compiler::ParallelMove"* %937 to i64*
  %947 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %944 to i64*
  %948 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %937, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %949 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %937, i64 0, i32 0, i32 0, i32 0, i32 0
  %950 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %943, align 8
  br label %951

951:                                              ; preds = %942, %1181
  %952 = phi %"class.v8::internal::compiler::MoveOperands"** [ %950, %942 ], [ %1182, %1181 ]
  %953 = phi %"class.v8::internal::compiler::MoveOperands"** [ %939, %942 ], [ %1183, %1181 ]
  %954 = bitcast %"class.v8::internal::compiler::MoveOperands"** %953 to i64*
  %955 = load i64, i64* %954, align 8
  %956 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %944, align 8
  %957 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %952, %956
  br i1 %957, label %962, label %958

958:                                              ; preds = %951
  %959 = bitcast %"class.v8::internal::compiler::MoveOperands"** %952 to i64*
  store i64 %955, i64* %959, align 8
  %960 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %952, i64 1
  %961 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %960 to i64
  store i64 %961, i64* %945, align 8
  br label %1181

962:                                              ; preds = %951
  %963 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %956 to i64
  %964 = load i64, i64* %946, align 8
  %965 = sub i64 %963, %964
  %966 = ashr exact i64 %965, 3
  %967 = add nsw i64 %966, 1
  %968 = icmp ugt i64 %967, 268435455
  br i1 %968, label %969, label %971

969:                                              ; preds = %962
  %970 = bitcast %"class.v8::internal::compiler::ParallelMove"* %937 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %970) #6
  unreachable

971:                                              ; preds = %962
  %972 = icmp ult i64 %966, 134217727
  br i1 %972, label %973, label %978

973:                                              ; preds = %971
  %974 = ashr exact i64 %965, 2
  %975 = icmp ult i64 %974, %967
  %976 = select i1 %975, i64 %967, i64 %974
  %977 = icmp eq i64 %976, 0
  br i1 %977, label %995, label %978

978:                                              ; preds = %973, %971
  %979 = phi i64 [ %976, %973 ], [ 268435455, %971 ]
  %980 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %948, align 8
  %981 = shl i64 %979, 3
  %982 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %980, i64 0, i32 2
  %983 = load i64, i64* %982, align 8
  %984 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %980, i64 0, i32 3
  %985 = load i64, i64* %984, align 8
  %986 = sub i64 %985, %983
  %987 = icmp ugt i64 %981, %986
  br i1 %987, label %988, label %990, !prof !9

988:                                              ; preds = %978
  %989 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %980, i64 %981) #5
  br label %992

990:                                              ; preds = %978
  %991 = add i64 %983, %981
  store i64 %991, i64* %982, align 8
  br label %992

992:                                              ; preds = %990, %988
  %993 = phi i64 [ %989, %988 ], [ %983, %990 ]
  %994 = inttoptr i64 %993 to %"class.v8::internal::compiler::MoveOperands"**
  br label %995

995:                                              ; preds = %992, %973
  %996 = phi i64 [ %979, %992 ], [ 0, %973 ]
  %997 = phi %"class.v8::internal::compiler::MoveOperands"** [ %994, %992 ], [ null, %973 ]
  %998 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %997, i64 %966
  %999 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %997, i64 %996
  %1000 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %999 to i64
  %1001 = bitcast %"class.v8::internal::compiler::MoveOperands"** %998 to i64*
  store i64 %955, i64* %1001, align 8
  %1002 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %998, i64 1
  %1003 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1002 to i64
  %1004 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %949, align 8
  %1005 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1004 to i64
  %1006 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %943, align 8
  %1007 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %1006, %1004
  br i1 %1007, label %1178, label %1008

1008:                                             ; preds = %995
  %1009 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  %1010 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1009 to i64
  %1011 = sub i64 %1010, %1005
  %1012 = lshr i64 %1011, 3
  %1013 = add nuw nsw i64 %1012, 1
  %1014 = icmp ult i64 %1013, 4
  br i1 %1014, label %1108, label %1015

1015:                                             ; preds = %1008
  %1016 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %997, i64 -1
  %1017 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  %1018 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1017 to i64
  %1019 = sub i64 %1018, %1005
  %1020 = lshr i64 %1019, 3
  %1021 = sub nsw i64 %966, %1020
  %1022 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1016, i64 %1021
  %1023 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  %1024 = sub nsw i64 0, %1020
  %1025 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1023, i64 %1024
  %1026 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %1022, %1006
  %1027 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %1025, %998
  %1028 = and i1 %1026, %1027
  br i1 %1028, label %1108, label %1029

1029:                                             ; preds = %1015
  %1030 = and i64 %1013, 4611686018427387900
  %1031 = sub nsw i64 0, %1030
  %1032 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %998, i64 %1031
  %1033 = sub nsw i64 0, %1030
  %1034 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 %1033
  %1035 = add nsw i64 %1030, -4
  %1036 = lshr exact i64 %1035, 2
  %1037 = add nuw nsw i64 %1036, 1
  %1038 = and i64 %1037, 1
  %1039 = icmp eq i64 %1035, 0
  br i1 %1039, label %1084, label %1040

1040:                                             ; preds = %1029
  %1041 = sub nuw nsw i64 %1037, %1038
  %1042 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %998, i64 -1
  %1043 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  %1044 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %998, i64 -1
  %1045 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  br label %1046

1046:                                             ; preds = %1046, %1040
  %1047 = phi i64 [ 0, %1040 ], [ %1081, %1046 ]
  %1048 = phi i64 [ %1041, %1040 ], [ %1082, %1046 ]
  %1049 = sub i64 0, %1047
  %1050 = sub i64 0, %1047
  %1051 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1042, i64 %1049
  %1052 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1043, i64 %1050
  %1053 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1052, i64 -1
  %1054 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1053 to <2 x i64>*
  %1055 = load <2 x i64>, <2 x i64>* %1054, align 8, !alias.scope !39
  %1056 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1052, i64 -2
  %1057 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1056, i64 -1
  %1058 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1057 to <2 x i64>*
  %1059 = load <2 x i64>, <2 x i64>* %1058, align 8, !alias.scope !39
  %1060 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1051, i64 -1
  %1061 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1060 to <2 x i64>*
  store <2 x i64> %1055, <2 x i64>* %1061, align 8, !alias.scope !42, !noalias !39
  %1062 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1051, i64 -2
  %1063 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1062, i64 -1
  %1064 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1063 to <2 x i64>*
  store <2 x i64> %1059, <2 x i64>* %1064, align 8, !alias.scope !42, !noalias !39
  %1065 = sub nuw nsw i64 -4, %1047
  %1066 = sub nuw nsw i64 -4, %1047
  %1067 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1044, i64 %1065
  %1068 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1045, i64 %1066
  %1069 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1068, i64 -1
  %1070 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1069 to <2 x i64>*
  %1071 = load <2 x i64>, <2 x i64>* %1070, align 8, !alias.scope !39
  %1072 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1068, i64 -2
  %1073 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1072, i64 -1
  %1074 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1073 to <2 x i64>*
  %1075 = load <2 x i64>, <2 x i64>* %1074, align 8, !alias.scope !39
  %1076 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1067, i64 -1
  %1077 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1076 to <2 x i64>*
  store <2 x i64> %1071, <2 x i64>* %1077, align 8, !alias.scope !42, !noalias !39
  %1078 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1067, i64 -2
  %1079 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1078, i64 -1
  %1080 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1079 to <2 x i64>*
  store <2 x i64> %1075, <2 x i64>* %1080, align 8, !alias.scope !42, !noalias !39
  %1081 = add i64 %1047, 8
  %1082 = add i64 %1048, -2
  %1083 = icmp eq i64 %1082, 0
  br i1 %1083, label %1084, label %1046, !llvm.loop !44

1084:                                             ; preds = %1046, %1029
  %1085 = phi i64 [ 0, %1029 ], [ %1081, %1046 ]
  %1086 = icmp eq i64 %1038, 0
  br i1 %1086, label %1106, label %1087

1087:                                             ; preds = %1084
  %1088 = sub i64 0, %1085
  %1089 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %998, i64 -1
  %1090 = sub i64 0, %1085
  %1091 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1006, i64 -1
  %1092 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1089, i64 %1088
  %1093 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1091, i64 %1090
  %1094 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1093, i64 -1
  %1095 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1094 to <2 x i64>*
  %1096 = load <2 x i64>, <2 x i64>* %1095, align 8, !alias.scope !39
  %1097 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1093, i64 -2
  %1098 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1097, i64 -1
  %1099 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1098 to <2 x i64>*
  %1100 = load <2 x i64>, <2 x i64>* %1099, align 8, !alias.scope !39
  %1101 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1092, i64 -1
  %1102 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1101 to <2 x i64>*
  store <2 x i64> %1096, <2 x i64>* %1102, align 8, !alias.scope !42, !noalias !39
  %1103 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1092, i64 -2
  %1104 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1103, i64 -1
  %1105 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1104 to <2 x i64>*
  store <2 x i64> %1100, <2 x i64>* %1105, align 8, !alias.scope !42, !noalias !39
  br label %1106

1106:                                             ; preds = %1084, %1087
  %1107 = icmp eq i64 %1013, %1030
  br i1 %1107, label %1178, label %1108

1108:                                             ; preds = %1106, %1015, %1008
  %1109 = phi %"class.v8::internal::compiler::MoveOperands"** [ %998, %1015 ], [ %998, %1008 ], [ %1032, %1106 ]
  %1110 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1006, %1015 ], [ %1006, %1008 ], [ %1034, %1106 ]
  %1111 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1110, i64 -1
  %1112 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1111 to i64
  %1113 = sub i64 %1112, %1005
  %1114 = lshr i64 %1113, 3
  %1115 = add nuw nsw i64 %1114, 1
  %1116 = and i64 %1115, 7
  %1117 = icmp eq i64 %1116, 0
  br i1 %1117, label %1129, label %1118

1118:                                             ; preds = %1108, %1118
  %1119 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1122, %1118 ], [ %1109, %1108 ]
  %1120 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1123, %1118 ], [ %1110, %1108 ]
  %1121 = phi i64 [ %1127, %1118 ], [ %1116, %1108 ]
  %1122 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1119, i64 -1
  %1123 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1120, i64 -1
  %1124 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1123 to i64*
  %1125 = load i64, i64* %1124, align 8
  %1126 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1122 to i64*
  store i64 %1125, i64* %1126, align 8
  %1127 = add i64 %1121, -1
  %1128 = icmp eq i64 %1127, 0
  br i1 %1128, label %1129, label %1118, !llvm.loop !45

1129:                                             ; preds = %1118, %1108
  %1130 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %1108 ], [ %1122, %1118 ]
  %1131 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1109, %1108 ], [ %1122, %1118 ]
  %1132 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1110, %1108 ], [ %1123, %1118 ]
  %1133 = icmp ult i64 %1113, 56
  br i1 %1133, label %1178, label %1134

1134:                                             ; preds = %1129, %1134
  %1135 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1172, %1134 ], [ %1131, %1129 ]
  %1136 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1173, %1134 ], [ %1132, %1129 ]
  %1137 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -1
  %1138 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -1
  %1139 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1138 to i64*
  %1140 = load i64, i64* %1139, align 8
  %1141 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1137 to i64*
  store i64 %1140, i64* %1141, align 8
  %1142 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -2
  %1143 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -2
  %1144 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1143 to i64*
  %1145 = load i64, i64* %1144, align 8
  %1146 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1142 to i64*
  store i64 %1145, i64* %1146, align 8
  %1147 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -3
  %1148 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -3
  %1149 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1148 to i64*
  %1150 = load i64, i64* %1149, align 8
  %1151 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1147 to i64*
  store i64 %1150, i64* %1151, align 8
  %1152 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -4
  %1153 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -4
  %1154 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1153 to i64*
  %1155 = load i64, i64* %1154, align 8
  %1156 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1152 to i64*
  store i64 %1155, i64* %1156, align 8
  %1157 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -5
  %1158 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -5
  %1159 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1158 to i64*
  %1160 = load i64, i64* %1159, align 8
  %1161 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1157 to i64*
  store i64 %1160, i64* %1161, align 8
  %1162 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -6
  %1163 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -6
  %1164 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1163 to i64*
  %1165 = load i64, i64* %1164, align 8
  %1166 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1162 to i64*
  store i64 %1165, i64* %1166, align 8
  %1167 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -7
  %1168 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -7
  %1169 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1168 to i64*
  %1170 = load i64, i64* %1169, align 8
  %1171 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1167 to i64*
  store i64 %1170, i64* %1171, align 8
  %1172 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1135, i64 -8
  %1173 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1136, i64 -8
  %1174 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1173 to i64*
  %1175 = load i64, i64* %1174, align 8
  %1176 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1172 to i64*
  store i64 %1175, i64* %1176, align 8
  %1177 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %1173, %1004
  br i1 %1177, label %1178, label %1134, !llvm.loop !46

1178:                                             ; preds = %1129, %1134, %1106, %995
  %1179 = phi %"class.v8::internal::compiler::MoveOperands"** [ %998, %995 ], [ %1032, %1106 ], [ %1130, %1129 ], [ %1172, %1134 ]
  %1180 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1179 to i64
  store i64 %1180, i64* %946, align 8
  store i64 %1003, i64* %945, align 8
  store i64 %1000, i64* %947, align 8
  br label %1181

1181:                                             ; preds = %958, %1178
  %1182 = phi %"class.v8::internal::compiler::MoveOperands"** [ %960, %958 ], [ %1002, %1178 ]
  %1183 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %953, i64 1
  %1184 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %1183, %940
  br i1 %1184, label %1185, label %951

1185:                                             ; preds = %1181
  %1186 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %554, align 8
  br label %1187

1187:                                             ; preds = %936, %1185, %549
  %1188 = phi %"class.v8::internal::compiler::MoveOperands"** [ %553, %549 ], [ %1186, %1185 ], [ %939, %936 ]
  %1189 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %1188, null
  br i1 %1189, label %1193, label %1190

1190:                                             ; preds = %1187
  %1191 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1188 to i64
  %1192 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %555 to i64*
  store i64 %1191, i64* %1192, align 8
  br label %1193

1193:                                             ; preds = %535, %1187, %1190
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %536) #5
  br label %1194

1194:                                             ; preds = %94, %165, %1193
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %95) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #5
  br label %1195

1195:                                             ; preds = %3, %1194, %19, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::compiler::MoveOperands"* @_ZN2v88internal8compiler12ParallelMove7AddMoveERKNS1_18InstructionOperandES5_PNS0_4ZoneE(%"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8), %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8), %"class.v8::internal::Zone"*) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 7
  %8 = icmp eq i64 %7, 4
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %1, %2
  br i1 %10, label %518, label %48

11:                                               ; preds = %4
  %12 = icmp ugt i64 %7, 4
  br i1 %12, label %13, label %26

13:                                               ; preds = %11
  %14 = and i64 %6, 24
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = lshr i64 %6, 5
  %18 = trunc i64 %17 to i8
  %19 = icmp ugt i8 %18, 11
  %20 = select i1 %19, i64 416, i64 0
  br label %21

21:                                               ; preds = %16, %13
  %22 = phi i64 [ 0, %13 ], [ %20, %16 ]
  %23 = and i64 %6, -8168
  %24 = or i64 %23, %22
  %25 = or i64 %24, 5
  br label %26

26:                                               ; preds = %21, %11
  %27 = phi i64 [ %25, %21 ], [ %6, %11 ]
  %28 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %2, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 7
  %31 = icmp ugt i64 %30, 4
  br i1 %31, label %32, label %45

32:                                               ; preds = %26
  %33 = and i64 %29, 24
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = lshr i64 %29, 5
  %37 = trunc i64 %36 to i8
  %38 = icmp ugt i8 %37, 11
  %39 = select i1 %38, i64 416, i64 0
  br label %40

40:                                               ; preds = %35, %32
  %41 = phi i64 [ 0, %32 ], [ %39, %35 ]
  %42 = and i64 %29, -8168
  %43 = or i64 %42, %41
  %44 = or i64 %43, 5
  br label %45

45:                                               ; preds = %26, %40
  %46 = phi i64 [ %44, %40 ], [ %29, %26 ]
  %47 = icmp eq i64 %27, %46
  br i1 %47, label %518, label %48

48:                                               ; preds = %9, %45
  %49 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 3
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %52, %50
  %54 = icmp ult i64 %53, 16
  br i1 %54, label %55, label %57, !prof !9

55:                                               ; preds = %48
  %56 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #5
  br label %59

57:                                               ; preds = %48
  %58 = add i64 %50, 16
  store i64 %58, i64* %49, align 8
  br label %59

59:                                               ; preds = %55, %57
  %60 = phi i64 [ %56, %55 ], [ %50, %57 ]
  %61 = inttoptr i64 %60 to %"class.v8::internal::compiler::MoveOperands"*
  %62 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %61, i64 0, i32 0, i32 0
  %63 = load i64, i64* %5, align 8
  store i64 %63, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %2, i64 0, i32 0
  %65 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %61, i64 0, i32 1, i32 0
  %66 = load i64, i64* %64, align 8
  store i64 %66, i64* %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %68 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %70 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %69, align 8
  %71 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %68, %70
  %72 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %68 to i64
  %73 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %70 to i64
  %74 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br i1 %71, label %77, label %75

75:                                               ; preds = %59
  %76 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %74, align 8
  br label %286

77:                                               ; preds = %59
  %78 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %74 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.v8::internal::compiler::ParallelMove"* %0 to i64*
  %81 = sub i64 %79, %72
  %82 = ashr exact i64 %81, 3
  %83 = icmp ult i64 %82, 4
  %84 = inttoptr i64 %79 to %"class.v8::internal::compiler::MoveOperands"**
  br i1 %83, label %85, label %286

85:                                               ; preds = %77
  %86 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %69 to i64*
  %87 = sub i64 %73, %72
  %88 = ashr exact i64 %87, 3
  %89 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %90 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 3
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %94, %92
  %96 = icmp ult i64 %95, 32
  br i1 %96, label %97, label %99, !prof !9

97:                                               ; preds = %85
  %98 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %90, i64 32) #5
  br label %101

99:                                               ; preds = %85
  %100 = add i64 %92, 32
  store i64 %100, i64* %91, align 8
  br label %101

101:                                              ; preds = %99, %97
  %102 = phi i64 [ %98, %97 ], [ %92, %99 ]
  %103 = inttoptr i64 %102 to %"class.v8::internal::compiler::MoveOperands"**
  %104 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %103, i64 %88
  %105 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %104 to i64
  %106 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %103, i64 4
  %107 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %106 to i64
  %108 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %67, align 8
  %109 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %108 to i64
  %110 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %69, align 8
  %111 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %110, %108
  br i1 %111, label %284, label %112

112:                                              ; preds = %101
  %113 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 -1
  %114 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %113 to i64
  %115 = sub i64 %114, %109
  %116 = lshr i64 %115, 3
  %117 = add nuw nsw i64 %116, 1
  %118 = icmp ult i64 %117, 4
  br i1 %118, label %211, label %119

119:                                              ; preds = %112
  %120 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 -1
  %121 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %120 to i64
  %122 = sub i64 %121, %109
  %123 = lshr i64 %122, 3
  %124 = xor i64 %123, -1
  %125 = add nsw i64 %88, %124
  %126 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %103, i64 %125
  %127 = xor i64 %123, -1
  %128 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 %127
  %129 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %126, %110
  %130 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %128, %104
  %131 = and i1 %129, %130
  br i1 %131, label %211, label %132

132:                                              ; preds = %119
  %133 = and i64 %117, 4611686018427387900
  %134 = sub nsw i64 0, %133
  %135 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %104, i64 %134
  %136 = sub nsw i64 0, %133
  %137 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 %136
  %138 = add nsw i64 %133, -4
  %139 = lshr exact i64 %138, 2
  %140 = add nuw nsw i64 %139, 1
  %141 = and i64 %140, 1
  %142 = icmp eq i64 %138, 0
  br i1 %142, label %187, label %143

143:                                              ; preds = %132
  %144 = sub nuw nsw i64 %140, %141
  %145 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %104, i64 -1
  %146 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 -1
  %147 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %104, i64 -1
  %148 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 -1
  br label %149

149:                                              ; preds = %149, %143
  %150 = phi i64 [ 0, %143 ], [ %184, %149 ]
  %151 = phi i64 [ %144, %143 ], [ %185, %149 ]
  %152 = sub i64 0, %150
  %153 = sub i64 0, %150
  %154 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %145, i64 %152
  %155 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %146, i64 %153
  %156 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %155, i64 -1
  %157 = bitcast %"class.v8::internal::compiler::MoveOperands"** %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !47
  %159 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %155, i64 -2
  %160 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %159, i64 -1
  %161 = bitcast %"class.v8::internal::compiler::MoveOperands"** %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 8, !alias.scope !47
  %163 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %154, i64 -1
  %164 = bitcast %"class.v8::internal::compiler::MoveOperands"** %163 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %164, align 8, !alias.scope !50, !noalias !47
  %165 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %154, i64 -2
  %166 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %165, i64 -1
  %167 = bitcast %"class.v8::internal::compiler::MoveOperands"** %166 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %167, align 8, !alias.scope !50, !noalias !47
  %168 = sub nuw nsw i64 -4, %150
  %169 = sub nuw nsw i64 -4, %150
  %170 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %147, i64 %168
  %171 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %148, i64 %169
  %172 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %171, i64 -1
  %173 = bitcast %"class.v8::internal::compiler::MoveOperands"** %172 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !47
  %175 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %171, i64 -2
  %176 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %175, i64 -1
  %177 = bitcast %"class.v8::internal::compiler::MoveOperands"** %176 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 8, !alias.scope !47
  %179 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %170, i64 -1
  %180 = bitcast %"class.v8::internal::compiler::MoveOperands"** %179 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %180, align 8, !alias.scope !50, !noalias !47
  %181 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %170, i64 -2
  %182 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %181, i64 -1
  %183 = bitcast %"class.v8::internal::compiler::MoveOperands"** %182 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %183, align 8, !alias.scope !50, !noalias !47
  %184 = add i64 %150, 8
  %185 = add i64 %151, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %149, !llvm.loop !52

187:                                              ; preds = %149, %132
  %188 = phi i64 [ 0, %132 ], [ %184, %149 ]
  %189 = icmp eq i64 %141, 0
  br i1 %189, label %209, label %190

190:                                              ; preds = %187
  %191 = sub i64 0, %188
  %192 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %104, i64 -1
  %193 = sub i64 0, %188
  %194 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %110, i64 -1
  %195 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %192, i64 %191
  %196 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %194, i64 %193
  %197 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %196, i64 -1
  %198 = bitcast %"class.v8::internal::compiler::MoveOperands"** %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8, !alias.scope !47
  %200 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %196, i64 -2
  %201 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %200, i64 -1
  %202 = bitcast %"class.v8::internal::compiler::MoveOperands"** %201 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 8, !alias.scope !47
  %204 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %195, i64 -1
  %205 = bitcast %"class.v8::internal::compiler::MoveOperands"** %204 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %205, align 8, !alias.scope !50, !noalias !47
  %206 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %195, i64 -2
  %207 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -1
  %208 = bitcast %"class.v8::internal::compiler::MoveOperands"** %207 to <2 x i64>*
  store <2 x i64> %203, <2 x i64>* %208, align 8, !alias.scope !50, !noalias !47
  br label %209

209:                                              ; preds = %187, %190
  %210 = icmp eq i64 %117, %133
  br i1 %210, label %281, label %211

211:                                              ; preds = %209, %119, %112
  %212 = phi %"class.v8::internal::compiler::MoveOperands"** [ %104, %119 ], [ %104, %112 ], [ %135, %209 ]
  %213 = phi %"class.v8::internal::compiler::MoveOperands"** [ %110, %119 ], [ %110, %112 ], [ %137, %209 ]
  %214 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %213, i64 -1
  %215 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %214 to i64
  %216 = sub i64 %215, %109
  %217 = lshr i64 %216, 3
  %218 = add nuw nsw i64 %217, 1
  %219 = and i64 %218, 7
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %232, label %221

221:                                              ; preds = %211, %221
  %222 = phi %"class.v8::internal::compiler::MoveOperands"** [ %225, %221 ], [ %212, %211 ]
  %223 = phi %"class.v8::internal::compiler::MoveOperands"** [ %226, %221 ], [ %213, %211 ]
  %224 = phi i64 [ %230, %221 ], [ %219, %211 ]
  %225 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %222, i64 -1
  %226 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %223, i64 -1
  %227 = bitcast %"class.v8::internal::compiler::MoveOperands"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.v8::internal::compiler::MoveOperands"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = add i64 %224, -1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %221, !llvm.loop !53

232:                                              ; preds = %221, %211
  %233 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %211 ], [ %225, %221 ]
  %234 = phi %"class.v8::internal::compiler::MoveOperands"** [ %212, %211 ], [ %225, %221 ]
  %235 = phi %"class.v8::internal::compiler::MoveOperands"** [ %213, %211 ], [ %226, %221 ]
  %236 = icmp ult i64 %216, 56
  br i1 %236, label %281, label %237

237:                                              ; preds = %232, %237
  %238 = phi %"class.v8::internal::compiler::MoveOperands"** [ %275, %237 ], [ %234, %232 ]
  %239 = phi %"class.v8::internal::compiler::MoveOperands"** [ %276, %237 ], [ %235, %232 ]
  %240 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -1
  %241 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -1
  %242 = bitcast %"class.v8::internal::compiler::MoveOperands"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.v8::internal::compiler::MoveOperands"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -2
  %246 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -2
  %247 = bitcast %"class.v8::internal::compiler::MoveOperands"** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast %"class.v8::internal::compiler::MoveOperands"** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -3
  %251 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -3
  %252 = bitcast %"class.v8::internal::compiler::MoveOperands"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.v8::internal::compiler::MoveOperands"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -4
  %256 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -4
  %257 = bitcast %"class.v8::internal::compiler::MoveOperands"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.v8::internal::compiler::MoveOperands"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -5
  %261 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -5
  %262 = bitcast %"class.v8::internal::compiler::MoveOperands"** %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast %"class.v8::internal::compiler::MoveOperands"** %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -6
  %266 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -6
  %267 = bitcast %"class.v8::internal::compiler::MoveOperands"** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.v8::internal::compiler::MoveOperands"** %265 to i64*
  store i64 %268, i64* %269, align 8
  %270 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -7
  %271 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -7
  %272 = bitcast %"class.v8::internal::compiler::MoveOperands"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.v8::internal::compiler::MoveOperands"** %270 to i64*
  store i64 %273, i64* %274, align 8
  %275 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %238, i64 -8
  %276 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %239, i64 -8
  %277 = bitcast %"class.v8::internal::compiler::MoveOperands"** %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.v8::internal::compiler::MoveOperands"** %275 to i64*
  store i64 %278, i64* %279, align 8
  %280 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %276, %108
  br i1 %280, label %281, label %237, !llvm.loop !54

281:                                              ; preds = %232, %237, %209
  %282 = phi %"class.v8::internal::compiler::MoveOperands"** [ %135, %209 ], [ %233, %232 ], [ %275, %237 ]
  %283 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %282 to i64
  br label %284

284:                                              ; preds = %281, %101
  %285 = phi i64 [ %283, %281 ], [ %105, %101 ]
  store i64 %285, i64* %80, align 8
  store i64 %105, i64* %86, align 8
  store i64 %107, i64* %78, align 8
  br label %286

286:                                              ; preds = %75, %284, %77
  %287 = phi i64 [ %285, %284 ], [ %72, %77 ], [ %72, %75 ]
  %288 = phi %"class.v8::internal::compiler::MoveOperands"** [ %106, %284 ], [ %84, %77 ], [ %76, %75 ]
  %289 = phi %"class.v8::internal::compiler::MoveOperands"** [ %104, %284 ], [ %68, %77 ], [ %70, %75 ]
  %290 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %291 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %289, %288
  br i1 %291, label %297, label %292

292:                                              ; preds = %286
  %293 = bitcast %"class.v8::internal::compiler::MoveOperands"** %289 to i64*
  store i64 %60, i64* %293, align 8
  %294 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %289, i64 1
  %295 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %294 to i64
  %296 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %69 to i64*
  store i64 %295, i64* %296, align 8
  br label %518

297:                                              ; preds = %286
  %298 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %288 to i64
  %299 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %69 to i64*
  %300 = bitcast %"class.v8::internal::compiler::ParallelMove"* %0 to i64*
  %301 = sub i64 %298, %287
  %302 = ashr exact i64 %301, 3
  %303 = add nsw i64 %302, 1
  %304 = icmp ugt i64 %303, 268435455
  br i1 %304, label %305, label %307

305:                                              ; preds = %297
  %306 = bitcast %"class.v8::internal::compiler::ParallelMove"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %306) #6
  unreachable

307:                                              ; preds = %297
  %308 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %290 to i64*
  %309 = icmp ult i64 %302, 134217727
  br i1 %309, label %310, label %315

310:                                              ; preds = %307
  %311 = ashr exact i64 %301, 2
  %312 = icmp ult i64 %311, %303
  %313 = select i1 %312, i64 %303, i64 %311
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %333, label %315

315:                                              ; preds = %310, %307
  %316 = phi i64 [ %313, %310 ], [ 268435455, %307 ]
  %317 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %318 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %317, align 8
  %319 = shl i64 %316, 3
  %320 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %318, i64 0, i32 2
  %321 = load i64, i64* %320, align 8
  %322 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %318, i64 0, i32 3
  %323 = load i64, i64* %322, align 8
  %324 = sub i64 %323, %321
  %325 = icmp ugt i64 %319, %324
  br i1 %325, label %326, label %328, !prof !9

326:                                              ; preds = %315
  %327 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %318, i64 %319) #5
  br label %330

328:                                              ; preds = %315
  %329 = add i64 %321, %319
  store i64 %329, i64* %320, align 8
  br label %330

330:                                              ; preds = %328, %326
  %331 = phi i64 [ %327, %326 ], [ %321, %328 ]
  %332 = inttoptr i64 %331 to %"class.v8::internal::compiler::MoveOperands"**
  br label %333

333:                                              ; preds = %330, %310
  %334 = phi i64 [ %316, %330 ], [ 0, %310 ]
  %335 = phi %"class.v8::internal::compiler::MoveOperands"** [ %332, %330 ], [ null, %310 ]
  %336 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %335, i64 %302
  %337 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %335, i64 %334
  %338 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %337 to i64
  %339 = bitcast %"class.v8::internal::compiler::MoveOperands"** %336 to i64*
  store i64 %60, i64* %339, align 8
  %340 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %336, i64 1
  %341 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %340 to i64
  %342 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %67, align 8
  %343 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %342 to i64
  %344 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %69, align 8
  %345 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %344, %342
  br i1 %345, label %515, label %346

346:                                              ; preds = %333
  %347 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 -1
  %348 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %347 to i64
  %349 = sub i64 %348, %343
  %350 = lshr i64 %349, 3
  %351 = add nuw nsw i64 %350, 1
  %352 = icmp ult i64 %351, 4
  br i1 %352, label %445, label %353

353:                                              ; preds = %346
  %354 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 -1
  %355 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %354 to i64
  %356 = sub i64 %355, %343
  %357 = lshr i64 %356, 3
  %358 = xor i64 %357, -1
  %359 = add nsw i64 %302, %358
  %360 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %335, i64 %359
  %361 = xor i64 %357, -1
  %362 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 %361
  %363 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %360, %344
  %364 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %362, %336
  %365 = and i1 %363, %364
  br i1 %365, label %445, label %366

366:                                              ; preds = %353
  %367 = and i64 %351, 4611686018427387900
  %368 = sub nsw i64 0, %367
  %369 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %336, i64 %368
  %370 = sub nsw i64 0, %367
  %371 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 %370
  %372 = add nsw i64 %367, -4
  %373 = lshr exact i64 %372, 2
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 1
  %376 = icmp eq i64 %372, 0
  br i1 %376, label %423, label %377

377:                                              ; preds = %366
  %378 = sub nuw nsw i64 %374, %375
  %379 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %336, i64 -1
  %380 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 -1
  %381 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %336, i64 -1
  %382 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 -1
  br label %383

383:                                              ; preds = %383, %377
  %384 = phi i64 [ 0, %377 ], [ %418, %383 ]
  %385 = phi i64 [ %378, %377 ], [ %419, %383 ]
  %386 = sub i64 0, %384
  %387 = sub i64 0, %384
  %388 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %379, i64 %386
  %389 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %380, i64 %387
  %390 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %389, i64 -1
  %391 = bitcast %"class.v8::internal::compiler::MoveOperands"** %390 to <2 x i64>*
  %392 = load <2 x i64>, <2 x i64>* %391, align 8, !alias.scope !55
  %393 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %389, i64 -2
  %394 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %393, i64 -1
  %395 = bitcast %"class.v8::internal::compiler::MoveOperands"** %394 to <2 x i64>*
  %396 = load <2 x i64>, <2 x i64>* %395, align 8, !alias.scope !55
  %397 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %388, i64 -1
  %398 = bitcast %"class.v8::internal::compiler::MoveOperands"** %397 to <2 x i64>*
  store <2 x i64> %392, <2 x i64>* %398, align 8, !alias.scope !58, !noalias !55
  %399 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %388, i64 -2
  %400 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %399, i64 -1
  %401 = bitcast %"class.v8::internal::compiler::MoveOperands"** %400 to <2 x i64>*
  store <2 x i64> %396, <2 x i64>* %401, align 8, !alias.scope !58, !noalias !55
  %402 = sub nuw nsw i64 -4, %384
  %403 = sub nuw nsw i64 -4, %384
  %404 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %381, i64 %402
  %405 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %382, i64 %403
  %406 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %405, i64 -1
  %407 = bitcast %"class.v8::internal::compiler::MoveOperands"** %406 to <2 x i64>*
  %408 = load <2 x i64>, <2 x i64>* %407, align 8, !alias.scope !55
  %409 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %405, i64 -2
  %410 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %409, i64 -1
  %411 = bitcast %"class.v8::internal::compiler::MoveOperands"** %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 8, !alias.scope !55
  %413 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %404, i64 -1
  %414 = bitcast %"class.v8::internal::compiler::MoveOperands"** %413 to <2 x i64>*
  store <2 x i64> %408, <2 x i64>* %414, align 8, !alias.scope !58, !noalias !55
  %415 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %404, i64 -2
  %416 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %415, i64 -1
  %417 = bitcast %"class.v8::internal::compiler::MoveOperands"** %416 to <2 x i64>*
  store <2 x i64> %412, <2 x i64>* %417, align 8, !alias.scope !58, !noalias !55
  %418 = add i64 %384, 8
  %419 = add i64 %385, -2
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %421, label %383, !llvm.loop !60

421:                                              ; preds = %383
  %422 = sub nuw nsw i64 -8, %384
  br label %423

423:                                              ; preds = %421, %366
  %424 = phi i64 [ 0, %366 ], [ %422, %421 ]
  %425 = icmp eq i64 %375, 0
  br i1 %425, label %443, label %426

426:                                              ; preds = %423
  %427 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %336, i64 -1
  %428 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %344, i64 -1
  %429 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %427, i64 %424
  %430 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %428, i64 %424
  %431 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %430, i64 -1
  %432 = bitcast %"class.v8::internal::compiler::MoveOperands"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !55
  %434 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %430, i64 -2
  %435 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %434, i64 -1
  %436 = bitcast %"class.v8::internal::compiler::MoveOperands"** %435 to <2 x i64>*
  %437 = load <2 x i64>, <2 x i64>* %436, align 8, !alias.scope !55
  %438 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %429, i64 -1
  %439 = bitcast %"class.v8::internal::compiler::MoveOperands"** %438 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %439, align 8, !alias.scope !58, !noalias !55
  %440 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %429, i64 -2
  %441 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %440, i64 -1
  %442 = bitcast %"class.v8::internal::compiler::MoveOperands"** %441 to <2 x i64>*
  store <2 x i64> %437, <2 x i64>* %442, align 8, !alias.scope !58, !noalias !55
  br label %443

443:                                              ; preds = %423, %426
  %444 = icmp eq i64 %351, %367
  br i1 %444, label %515, label %445

445:                                              ; preds = %443, %353, %346
  %446 = phi %"class.v8::internal::compiler::MoveOperands"** [ %336, %353 ], [ %336, %346 ], [ %369, %443 ]
  %447 = phi %"class.v8::internal::compiler::MoveOperands"** [ %344, %353 ], [ %344, %346 ], [ %371, %443 ]
  %448 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %447, i64 -1
  %449 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %448 to i64
  %450 = sub i64 %449, %343
  %451 = lshr i64 %450, 3
  %452 = add nuw nsw i64 %451, 1
  %453 = and i64 %452, 7
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %466, label %455

455:                                              ; preds = %445, %455
  %456 = phi %"class.v8::internal::compiler::MoveOperands"** [ %459, %455 ], [ %446, %445 ]
  %457 = phi %"class.v8::internal::compiler::MoveOperands"** [ %460, %455 ], [ %447, %445 ]
  %458 = phi i64 [ %464, %455 ], [ %453, %445 ]
  %459 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %456, i64 -1
  %460 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %457, i64 -1
  %461 = bitcast %"class.v8::internal::compiler::MoveOperands"** %460 to i64*
  %462 = load i64, i64* %461, align 8
  %463 = bitcast %"class.v8::internal::compiler::MoveOperands"** %459 to i64*
  store i64 %462, i64* %463, align 8
  %464 = add i64 %458, -1
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %455, !llvm.loop !61

466:                                              ; preds = %455, %445
  %467 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %445 ], [ %459, %455 ]
  %468 = phi %"class.v8::internal::compiler::MoveOperands"** [ %446, %445 ], [ %459, %455 ]
  %469 = phi %"class.v8::internal::compiler::MoveOperands"** [ %447, %445 ], [ %460, %455 ]
  %470 = icmp ult i64 %450, 56
  br i1 %470, label %515, label %471

471:                                              ; preds = %466, %471
  %472 = phi %"class.v8::internal::compiler::MoveOperands"** [ %509, %471 ], [ %468, %466 ]
  %473 = phi %"class.v8::internal::compiler::MoveOperands"** [ %510, %471 ], [ %469, %466 ]
  %474 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -1
  %475 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -1
  %476 = bitcast %"class.v8::internal::compiler::MoveOperands"** %475 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = bitcast %"class.v8::internal::compiler::MoveOperands"** %474 to i64*
  store i64 %477, i64* %478, align 8
  %479 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -2
  %480 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -2
  %481 = bitcast %"class.v8::internal::compiler::MoveOperands"** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"class.v8::internal::compiler::MoveOperands"** %479 to i64*
  store i64 %482, i64* %483, align 8
  %484 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -3
  %485 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -3
  %486 = bitcast %"class.v8::internal::compiler::MoveOperands"** %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %"class.v8::internal::compiler::MoveOperands"** %484 to i64*
  store i64 %487, i64* %488, align 8
  %489 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -4
  %490 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -4
  %491 = bitcast %"class.v8::internal::compiler::MoveOperands"** %490 to i64*
  %492 = load i64, i64* %491, align 8
  %493 = bitcast %"class.v8::internal::compiler::MoveOperands"** %489 to i64*
  store i64 %492, i64* %493, align 8
  %494 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -5
  %495 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -5
  %496 = bitcast %"class.v8::internal::compiler::MoveOperands"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.v8::internal::compiler::MoveOperands"** %494 to i64*
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -6
  %500 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -6
  %501 = bitcast %"class.v8::internal::compiler::MoveOperands"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.v8::internal::compiler::MoveOperands"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -7
  %505 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -7
  %506 = bitcast %"class.v8::internal::compiler::MoveOperands"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.v8::internal::compiler::MoveOperands"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %472, i64 -8
  %510 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %473, i64 -8
  %511 = bitcast %"class.v8::internal::compiler::MoveOperands"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.v8::internal::compiler::MoveOperands"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %510, %342
  br i1 %514, label %515, label %471, !llvm.loop !62

515:                                              ; preds = %466, %471, %443, %333
  %516 = phi %"class.v8::internal::compiler::MoveOperands"** [ %336, %333 ], [ %369, %443 ], [ %467, %466 ], [ %509, %471 ]
  %517 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %516 to i64
  store i64 %517, i64* %300, align 8
  store i64 %341, i64* %299, align 8
  store i64 %338, i64* %308, align 8
  br label %518

518:                                              ; preds = %515, %292, %9, %45
  %519 = phi %"class.v8::internal::compiler::MoveOperands"* [ null, %45 ], [ null, %9 ], [ %61, %292 ], [ %61, %515 ]
  ret %"class.v8::internal::compiler::MoveOperands"* %519
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler13MoveOptimizer13CompressMovesEPNS1_12ParallelMoveEPNS0_10ZoneVectorIPNS1_12MoveOperandsEEE(%"class.v8::internal::compiler::MoveOptimizer"*, %"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::ZoneVector.608"*) local_unnamed_addr #0 align 2 {
  %4 = icmp eq %"class.v8::internal::ZoneVector.608"* %2, null
  br i1 %4, label %421, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %9, align 8
  %11 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %8, %10
  br i1 %11, label %124, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %2, i64 0, i32 0, i32 0, i32 1
  %16 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %14, %16
  br i1 %17, label %18, label %44

18:                                               ; preds = %88, %12
  %19 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %6, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %19, align 8
  %21 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %20 to i64
  %22 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %23 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %22, align 8
  %24 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %20, %23
  br i1 %24, label %94, label %25

25:                                               ; preds = %18
  %26 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %23, i64 -1
  %27 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %26 to i64
  %28 = sub i64 %27, %21
  %29 = lshr i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 7
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %25, %33
  %34 = phi %"class.v8::internal::compiler::MoveOperands"** [ %38, %33 ], [ %20, %25 ]
  %35 = phi i64 [ %39, %33 ], [ %31, %25 ]
  %36 = bitcast %"class.v8::internal::compiler::MoveOperands"** %34 to i8**
  %37 = load i8*, i8** %36, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #5
  %38 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %34, i64 1
  %39 = add i64 %35, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %33, !llvm.loop !63

41:                                               ; preds = %33, %25
  %42 = phi %"class.v8::internal::compiler::MoveOperands"** [ %20, %25 ], [ %38, %33 ]
  %43 = icmp ult i64 %28, 56
  br i1 %43, label %91, label %97

44:                                               ; preds = %12, %88
  %45 = phi %"class.v8::internal::compiler::MoveOperands"** [ %89, %88 ], [ %14, %12 ]
  %46 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %46, i64 0, i32 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = and i64 %48, 7
  switch i64 %49, label %50 [
    i64 0, label %88
    i64 4, label %87
  ]

50:                                               ; preds = %44
  %51 = icmp ugt i64 %49, 4
  br i1 %51, label %52, label %65

52:                                               ; preds = %50
  %53 = and i64 %48, 24
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %52
  %56 = lshr i64 %48, 5
  %57 = trunc i64 %56 to i8
  %58 = icmp ugt i8 %57, 11
  %59 = select i1 %58, i64 416, i64 0
  br label %60

60:                                               ; preds = %55, %52
  %61 = phi i64 [ 0, %52 ], [ %59, %55 ]
  %62 = and i64 %48, -8168
  %63 = or i64 %62, %61
  %64 = or i64 %63, 5
  br label %65

65:                                               ; preds = %60, %50
  %66 = phi i64 [ %64, %60 ], [ %48, %50 ]
  %67 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %46, i64 0, i32 1, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, 7
  %70 = icmp ugt i64 %69, 4
  br i1 %70, label %71, label %84

71:                                               ; preds = %65
  %72 = and i64 %68, 24
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %71
  %75 = lshr i64 %68, 5
  %76 = trunc i64 %75 to i8
  %77 = icmp ugt i8 %76, 11
  %78 = select i1 %77, i64 416, i64 0
  br label %79

79:                                               ; preds = %74, %71
  %80 = phi i64 [ 0, %71 ], [ %78, %74 ]
  %81 = and i64 %68, -8168
  %82 = or i64 %81, %80
  %83 = or i64 %82, 5
  br label %84

84:                                               ; preds = %65, %79
  %85 = phi i64 [ %83, %79 ], [ %68, %65 ]
  %86 = icmp eq i64 %66, %85
  br i1 %86, label %88, label %87

87:                                               ; preds = %44, %84
  tail call void @_ZNK2v88internal8compiler12ParallelMove18PrepareInsertAfterEPNS1_12MoveOperandsEPNS0_10ZoneVectorIS4_EE(%"class.v8::internal::compiler::ParallelMove"* %1, %"class.v8::internal::compiler::MoveOperands"* %46, %"class.v8::internal::ZoneVector.608"* %6) #5
  br label %88

88:                                               ; preds = %44, %84, %87
  %89 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %45, i64 1
  %90 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %89, %16
  br i1 %90, label %18, label %44

91:                                               ; preds = %97, %41
  %92 = bitcast %"class.v8::internal::ZoneVector.608"* %6 to i64*
  %93 = load i64, i64* %92, align 8
  br label %94

94:                                               ; preds = %18, %91
  %95 = phi i64 [ %93, %91 ], [ %21, %18 ]
  %96 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %22 to i64*
  store i64 %95, i64* %96, align 8
  br label %124

97:                                               ; preds = %41, %97
  %98 = phi %"class.v8::internal::compiler::MoveOperands"** [ %122, %97 ], [ %42, %41 ]
  %99 = bitcast %"class.v8::internal::compiler::MoveOperands"** %98 to i8**
  %100 = load i8*, i8** %99, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 16, i1 false) #5
  %101 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 1
  %102 = bitcast %"class.v8::internal::compiler::MoveOperands"** %101 to i8**
  %103 = load i8*, i8** %102, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 16, i1 false) #5
  %104 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 2
  %105 = bitcast %"class.v8::internal::compiler::MoveOperands"** %104 to i8**
  %106 = load i8*, i8** %105, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 16, i1 false) #5
  %107 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 3
  %108 = bitcast %"class.v8::internal::compiler::MoveOperands"** %107 to i8**
  %109 = load i8*, i8** %108, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 16, i1 false) #5
  %110 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 4
  %111 = bitcast %"class.v8::internal::compiler::MoveOperands"** %110 to i8**
  %112 = load i8*, i8** %111, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 16, i1 false) #5
  %113 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 5
  %114 = bitcast %"class.v8::internal::compiler::MoveOperands"** %113 to i8**
  %115 = load i8*, i8** %114, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 16, i1 false) #5
  %116 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 6
  %117 = bitcast %"class.v8::internal::compiler::MoveOperands"** %116 to i8**
  %118 = load i8*, i8** %117, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 16, i1 false) #5
  %119 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 7
  %120 = bitcast %"class.v8::internal::compiler::MoveOperands"** %119 to i8**
  %121 = load i8*, i8** %120, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 16, i1 false) #5
  %122 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %98, i64 8
  %123 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %122, %23
  br i1 %123, label %91, label %97

124:                                              ; preds = %94, %5
  %125 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %2, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %125, align 8
  %127 = getelementptr inbounds %"class.v8::internal::ZoneVector.608", %"class.v8::internal::ZoneVector.608"* %2, i64 0, i32 0, i32 0, i32 1
  %128 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %127, align 8
  %129 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %126, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %124
  %131 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %126 to i64
  br label %141

132:                                              ; preds = %124
  %133 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %134 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %9 to i64*
  %135 = bitcast %"class.v8::internal::compiler::ParallelMove"* %1 to i64*
  %136 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %133 to i64*
  %137 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  br label %144

138:                                              ; preds = %418
  %139 = bitcast %"class.v8::internal::ZoneVector.608"* %2 to i64*
  %140 = load i64, i64* %139, align 8
  br label %141

141:                                              ; preds = %130, %138
  %142 = phi i64 [ %140, %138 ], [ %131, %130 ]
  %143 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %127 to i64*
  store i64 %142, i64* %143, align 8
  br label %421

144:                                              ; preds = %132, %418
  %145 = phi %"class.v8::internal::compiler::MoveOperands"** [ %126, %132 ], [ %419, %418 ]
  %146 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %145, align 8
  %147 = ptrtoint %"class.v8::internal::compiler::MoveOperands"* %146 to i64
  %148 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %146, i64 0, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = and i64 %149, 7
  switch i64 %150, label %151 [
    i64 0, label %418
    i64 4, label %188
  ]

151:                                              ; preds = %144
  %152 = icmp ugt i64 %150, 4
  br i1 %152, label %153, label %166

153:                                              ; preds = %151
  %154 = and i64 %149, 24
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %153
  %157 = lshr i64 %149, 5
  %158 = trunc i64 %157 to i8
  %159 = icmp ugt i8 %158, 11
  %160 = select i1 %159, i64 416, i64 0
  br label %161

161:                                              ; preds = %156, %153
  %162 = phi i64 [ 0, %153 ], [ %160, %156 ]
  %163 = and i64 %149, -8168
  %164 = or i64 %163, %162
  %165 = or i64 %164, 5
  br label %166

166:                                              ; preds = %161, %151
  %167 = phi i64 [ %165, %161 ], [ %149, %151 ]
  %168 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %146, i64 0, i32 1, i32 0
  %169 = load i64, i64* %168, align 8
  %170 = and i64 %169, 7
  %171 = icmp ugt i64 %170, 4
  br i1 %171, label %172, label %185

172:                                              ; preds = %166
  %173 = and i64 %169, 24
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %180

175:                                              ; preds = %172
  %176 = lshr i64 %169, 5
  %177 = trunc i64 %176 to i8
  %178 = icmp ugt i8 %177, 11
  %179 = select i1 %178, i64 416, i64 0
  br label %180

180:                                              ; preds = %175, %172
  %181 = phi i64 [ 0, %172 ], [ %179, %175 ]
  %182 = and i64 %169, -8168
  %183 = or i64 %182, %181
  %184 = or i64 %183, 5
  br label %185

185:                                              ; preds = %166, %180
  %186 = phi i64 [ %184, %180 ], [ %169, %166 ]
  %187 = icmp eq i64 %167, %186
  br i1 %187, label %418, label %188

188:                                              ; preds = %144, %185
  %189 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %9, align 8
  %190 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %133, align 8
  %191 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %189, %190
  %192 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %190 to i64
  br i1 %191, label %197, label %193

193:                                              ; preds = %188
  %194 = bitcast %"class.v8::internal::compiler::MoveOperands"** %189 to i64*
  store i64 %147, i64* %194, align 8
  %195 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %189, i64 1
  %196 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %195 to i64
  store i64 %196, i64* %134, align 8
  br label %418

197:                                              ; preds = %188
  %198 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %189 to i64
  %199 = load i64, i64* %135, align 8
  %200 = sub i64 %198, %199
  %201 = ashr exact i64 %200, 3
  %202 = add nsw i64 %201, 1
  %203 = icmp ugt i64 %202, 268435455
  br i1 %203, label %204, label %206

204:                                              ; preds = %197
  %205 = bitcast %"class.v8::internal::compiler::ParallelMove"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %205) #6
  unreachable

206:                                              ; preds = %197
  %207 = sub i64 %192, %199
  %208 = ashr exact i64 %207, 3
  %209 = icmp ult i64 %208, 134217727
  br i1 %209, label %210, label %215

210:                                              ; preds = %206
  %211 = ashr exact i64 %207, 2
  %212 = icmp ult i64 %211, %202
  %213 = select i1 %212, i64 %202, i64 %211
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %232, label %215

215:                                              ; preds = %210, %206
  %216 = phi i64 [ %213, %210 ], [ 268435455, %206 ]
  %217 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %137, align 8
  %218 = shl i64 %216, 3
  %219 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %217, i64 0, i32 2
  %220 = load i64, i64* %219, align 8
  %221 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %217, i64 0, i32 3
  %222 = load i64, i64* %221, align 8
  %223 = sub i64 %222, %220
  %224 = icmp ugt i64 %218, %223
  br i1 %224, label %225, label %227, !prof !9

225:                                              ; preds = %215
  %226 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %217, i64 %218) #5
  br label %229

227:                                              ; preds = %215
  %228 = add i64 %220, %218
  store i64 %228, i64* %219, align 8
  br label %229

229:                                              ; preds = %227, %225
  %230 = phi i64 [ %226, %225 ], [ %220, %227 ]
  %231 = inttoptr i64 %230 to %"class.v8::internal::compiler::MoveOperands"**
  br label %232

232:                                              ; preds = %229, %210
  %233 = phi i64 [ %216, %229 ], [ 0, %210 ]
  %234 = phi %"class.v8::internal::compiler::MoveOperands"** [ %231, %229 ], [ null, %210 ]
  %235 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %234, i64 %201
  %236 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %234, i64 %233
  %237 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %236 to i64
  %238 = bitcast %"class.v8::internal::compiler::MoveOperands"** %235 to i64*
  store i64 %147, i64* %238, align 8
  %239 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %235, i64 1
  %240 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %239 to i64
  %241 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %7, align 8
  %242 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %241 to i64
  %243 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %9, align 8
  %244 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %243, %241
  br i1 %244, label %415, label %245

245:                                              ; preds = %232
  %246 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  %247 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %246 to i64
  %248 = sub i64 %247, %242
  %249 = lshr i64 %248, 3
  %250 = add nuw nsw i64 %249, 1
  %251 = icmp ult i64 %250, 4
  br i1 %251, label %345, label %252

252:                                              ; preds = %245
  %253 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %234, i64 -1
  %254 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  %255 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %254 to i64
  %256 = sub i64 %255, %242
  %257 = lshr i64 %256, 3
  %258 = sub nsw i64 %201, %257
  %259 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %253, i64 %258
  %260 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  %261 = sub nsw i64 0, %257
  %262 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %260, i64 %261
  %263 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %259, %243
  %264 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %262, %235
  %265 = and i1 %263, %264
  br i1 %265, label %345, label %266

266:                                              ; preds = %252
  %267 = and i64 %250, 4611686018427387900
  %268 = sub nsw i64 0, %267
  %269 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %235, i64 %268
  %270 = sub nsw i64 0, %267
  %271 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 %270
  %272 = add nsw i64 %267, -4
  %273 = lshr exact i64 %272, 2
  %274 = add nuw nsw i64 %273, 1
  %275 = and i64 %274, 1
  %276 = icmp eq i64 %272, 0
  br i1 %276, label %321, label %277

277:                                              ; preds = %266
  %278 = sub nuw nsw i64 %274, %275
  %279 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %235, i64 -1
  %280 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  %281 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %235, i64 -1
  %282 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  br label %283

283:                                              ; preds = %283, %277
  %284 = phi i64 [ 0, %277 ], [ %318, %283 ]
  %285 = phi i64 [ %278, %277 ], [ %319, %283 ]
  %286 = sub i64 0, %284
  %287 = sub i64 0, %284
  %288 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %279, i64 %286
  %289 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %280, i64 %287
  %290 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %289, i64 -1
  %291 = bitcast %"class.v8::internal::compiler::MoveOperands"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !64
  %293 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %289, i64 -2
  %294 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %293, i64 -1
  %295 = bitcast %"class.v8::internal::compiler::MoveOperands"** %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !alias.scope !64
  %297 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %288, i64 -1
  %298 = bitcast %"class.v8::internal::compiler::MoveOperands"** %297 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %298, align 8, !alias.scope !67, !noalias !64
  %299 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %288, i64 -2
  %300 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %299, i64 -1
  %301 = bitcast %"class.v8::internal::compiler::MoveOperands"** %300 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %301, align 8, !alias.scope !67, !noalias !64
  %302 = sub nuw nsw i64 -4, %284
  %303 = sub nuw nsw i64 -4, %284
  %304 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %281, i64 %302
  %305 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %282, i64 %303
  %306 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %305, i64 -1
  %307 = bitcast %"class.v8::internal::compiler::MoveOperands"** %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 8, !alias.scope !64
  %309 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %305, i64 -2
  %310 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %309, i64 -1
  %311 = bitcast %"class.v8::internal::compiler::MoveOperands"** %310 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %311, align 8, !alias.scope !64
  %313 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %304, i64 -1
  %314 = bitcast %"class.v8::internal::compiler::MoveOperands"** %313 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %314, align 8, !alias.scope !67, !noalias !64
  %315 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %304, i64 -2
  %316 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %315, i64 -1
  %317 = bitcast %"class.v8::internal::compiler::MoveOperands"** %316 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %317, align 8, !alias.scope !67, !noalias !64
  %318 = add i64 %284, 8
  %319 = add i64 %285, -2
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %283, !llvm.loop !69

321:                                              ; preds = %283, %266
  %322 = phi i64 [ 0, %266 ], [ %318, %283 ]
  %323 = icmp eq i64 %275, 0
  br i1 %323, label %343, label %324

324:                                              ; preds = %321
  %325 = sub i64 0, %322
  %326 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %235, i64 -1
  %327 = sub i64 0, %322
  %328 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %243, i64 -1
  %329 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %326, i64 %325
  %330 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %328, i64 %327
  %331 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %330, i64 -1
  %332 = bitcast %"class.v8::internal::compiler::MoveOperands"** %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 8, !alias.scope !64
  %334 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %330, i64 -2
  %335 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %334, i64 -1
  %336 = bitcast %"class.v8::internal::compiler::MoveOperands"** %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 8, !alias.scope !64
  %338 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %329, i64 -1
  %339 = bitcast %"class.v8::internal::compiler::MoveOperands"** %338 to <2 x i64>*
  store <2 x i64> %333, <2 x i64>* %339, align 8, !alias.scope !67, !noalias !64
  %340 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %329, i64 -2
  %341 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %340, i64 -1
  %342 = bitcast %"class.v8::internal::compiler::MoveOperands"** %341 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %342, align 8, !alias.scope !67, !noalias !64
  br label %343

343:                                              ; preds = %321, %324
  %344 = icmp eq i64 %250, %267
  br i1 %344, label %415, label %345

345:                                              ; preds = %343, %252, %245
  %346 = phi %"class.v8::internal::compiler::MoveOperands"** [ %235, %252 ], [ %235, %245 ], [ %269, %343 ]
  %347 = phi %"class.v8::internal::compiler::MoveOperands"** [ %243, %252 ], [ %243, %245 ], [ %271, %343 ]
  %348 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %347, i64 -1
  %349 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %348 to i64
  %350 = sub i64 %349, %242
  %351 = lshr i64 %350, 3
  %352 = add nuw nsw i64 %351, 1
  %353 = and i64 %352, 7
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %366, label %355

355:                                              ; preds = %345, %355
  %356 = phi %"class.v8::internal::compiler::MoveOperands"** [ %359, %355 ], [ %346, %345 ]
  %357 = phi %"class.v8::internal::compiler::MoveOperands"** [ %360, %355 ], [ %347, %345 ]
  %358 = phi i64 [ %364, %355 ], [ %353, %345 ]
  %359 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %356, i64 -1
  %360 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %357, i64 -1
  %361 = bitcast %"class.v8::internal::compiler::MoveOperands"** %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = bitcast %"class.v8::internal::compiler::MoveOperands"** %359 to i64*
  store i64 %362, i64* %363, align 8
  %364 = add i64 %358, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %355, !llvm.loop !70

366:                                              ; preds = %355, %345
  %367 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %345 ], [ %359, %355 ]
  %368 = phi %"class.v8::internal::compiler::MoveOperands"** [ %346, %345 ], [ %359, %355 ]
  %369 = phi %"class.v8::internal::compiler::MoveOperands"** [ %347, %345 ], [ %360, %355 ]
  %370 = icmp ult i64 %350, 56
  br i1 %370, label %415, label %371

371:                                              ; preds = %366, %371
  %372 = phi %"class.v8::internal::compiler::MoveOperands"** [ %409, %371 ], [ %368, %366 ]
  %373 = phi %"class.v8::internal::compiler::MoveOperands"** [ %410, %371 ], [ %369, %366 ]
  %374 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -1
  %375 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -1
  %376 = bitcast %"class.v8::internal::compiler::MoveOperands"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.v8::internal::compiler::MoveOperands"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -2
  %380 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -2
  %381 = bitcast %"class.v8::internal::compiler::MoveOperands"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.v8::internal::compiler::MoveOperands"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -3
  %385 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -3
  %386 = bitcast %"class.v8::internal::compiler::MoveOperands"** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.v8::internal::compiler::MoveOperands"** %384 to i64*
  store i64 %387, i64* %388, align 8
  %389 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -4
  %390 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -4
  %391 = bitcast %"class.v8::internal::compiler::MoveOperands"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.v8::internal::compiler::MoveOperands"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -5
  %395 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -5
  %396 = bitcast %"class.v8::internal::compiler::MoveOperands"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.v8::internal::compiler::MoveOperands"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -6
  %400 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -6
  %401 = bitcast %"class.v8::internal::compiler::MoveOperands"** %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.v8::internal::compiler::MoveOperands"** %399 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -7
  %405 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -7
  %406 = bitcast %"class.v8::internal::compiler::MoveOperands"** %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.v8::internal::compiler::MoveOperands"** %404 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %372, i64 -8
  %410 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %373, i64 -8
  %411 = bitcast %"class.v8::internal::compiler::MoveOperands"** %410 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.v8::internal::compiler::MoveOperands"** %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %410, %241
  br i1 %414, label %415, label %371, !llvm.loop !71

415:                                              ; preds = %366, %371, %343, %232
  %416 = phi %"class.v8::internal::compiler::MoveOperands"** [ %235, %232 ], [ %269, %343 ], [ %367, %366 ], [ %409, %371 ]
  %417 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %416 to i64
  store i64 %417, i64* %135, align 8
  store i64 %240, i64* %134, align 8
  store i64 %237, i64* %136, align 8
  br label %418

418:                                              ; preds = %144, %415, %193, %185
  %419 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %145, i64 1
  %420 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %419, %128
  br i1 %420, label %138, label %144

421:                                              ; preds = %3, %141
  ret void
}

declare void @_ZNK2v88internal8compiler12ParallelMove18PrepareInsertAfterEPNS1_12MoveOperandsEPNS0_10ZoneVectorIS4_EE(%"class.v8::internal::compiler::ParallelMove"*, %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::ZoneVector.608"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::compiler::Instruction"* @_ZNK2v88internal8compiler13MoveOptimizer15LastInstructionEPKNS1_16InstructionBlockE(%"class.v8::internal::compiler::MoveOptimizer"* nocapture readonly, %"class.v8::internal::compiler::InstructionBlock"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::MoveOptimizer", %"class.v8::internal::compiler::MoveOptimizer"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::compiler::InstructionSequence"*, %"class.v8::internal::compiler::InstructionSequence"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::InstructionBlock", %"class.v8::internal::compiler::InstructionBlock"* %1, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, -1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %4, i64 0, i32 8, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %8
  %12 = getelementptr inbounds %"class.v8::internal::compiler::InstructionSequence", %"class.v8::internal::compiler::InstructionSequence"* %4, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1
  %13 = load %"class.v8::internal::compiler::Instruction"***, %"class.v8::internal::compiler::Instruction"**** %12, align 8
  %14 = lshr i64 %11, 9
  %15 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %13, i64 %14
  %16 = load %"class.v8::internal::compiler::Instruction"**, %"class.v8::internal::compiler::Instruction"*** %15, align 8
  %17 = and i64 %11, 511
  %18 = getelementptr inbounds %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %16, i64 %17
  %19 = load %"class.v8::internal::compiler::Instruction"*, %"class.v8::internal::compiler::Instruction"** %18, align 8
  ret %"class.v8::internal::compiler::Instruction"* %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZN2v88internal8compiler12_GLOBAL__N_111LoadCompareEPKNS1_12MoveOperandsES5_(%"class.v8::internal::compiler::MoveOperands"* readonly, %"class.v8::internal::compiler::MoveOperands"* readonly) #2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %0, i64 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 4
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = icmp eq %"class.v8::internal::compiler::MoveOperands"* %0, %1
  br i1 %8, label %85, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %1, i64 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 7
  br label %64

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 4
  br i1 %14, label %15, label %28

15:                                               ; preds = %13
  %16 = and i64 %4, 24
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %15
  %19 = lshr i64 %4, 5
  %20 = trunc i64 %19 to i8
  %21 = icmp ugt i8 %20, 11
  %22 = select i1 %21, i64 416, i64 0
  br label %23

23:                                               ; preds = %18, %15
  %24 = phi i64 [ 0, %15 ], [ %22, %18 ]
  %25 = and i64 %4, -8168
  %26 = or i64 %25, %24
  %27 = or i64 %26, 5
  br label %28

28:                                               ; preds = %23, %13
  %29 = phi i64 [ %27, %23 ], [ %4, %13 ]
  %30 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %1, i64 0, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 7
  %33 = icmp ugt i64 %32, 4
  br i1 %33, label %34, label %47

34:                                               ; preds = %28
  %35 = and i64 %31, 24
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = lshr i64 %31, 5
  %39 = trunc i64 %38 to i8
  %40 = icmp ugt i8 %39, 11
  %41 = select i1 %40, i64 416, i64 0
  br label %42

42:                                               ; preds = %37, %34
  %43 = phi i64 [ 0, %34 ], [ %41, %37 ]
  %44 = and i64 %31, -8168
  %45 = or i64 %44, %43
  %46 = or i64 %45, 5
  br label %47

47:                                               ; preds = %28, %42
  %48 = phi i64 [ %46, %42 ], [ %31, %28 ]
  %49 = icmp eq i64 %29, %48
  br i1 %49, label %85, label %50

50:                                               ; preds = %47
  br i1 %14, label %51, label %64

51:                                               ; preds = %50
  %52 = and i64 %4, 24
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = lshr i64 %4, 5
  %56 = trunc i64 %55 to i8
  %57 = icmp ugt i8 %56, 11
  %58 = select i1 %57, i64 416, i64 0
  br label %59

59:                                               ; preds = %54, %51
  %60 = phi i64 [ 0, %51 ], [ %58, %54 ]
  %61 = and i64 %4, -8168
  %62 = or i64 %61, %60
  %63 = or i64 %62, 5
  br label %64

64:                                               ; preds = %9, %59, %50
  %65 = phi i64 [ %12, %9 ], [ %32, %59 ], [ %32, %50 ]
  %66 = phi i64 [ %11, %9 ], [ %31, %59 ], [ %31, %50 ]
  %67 = phi i64 [ %4, %9 ], [ %63, %59 ], [ %4, %50 ]
  %68 = icmp ugt i64 %65, 4
  br i1 %68, label %69, label %82

69:                                               ; preds = %64
  %70 = and i64 %66, 24
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %77

72:                                               ; preds = %69
  %73 = lshr i64 %66, 5
  %74 = trunc i64 %73 to i8
  %75 = icmp ugt i8 %74, 11
  %76 = select i1 %75, i64 416, i64 0
  br label %77

77:                                               ; preds = %72, %69
  %78 = phi i64 [ 0, %69 ], [ %76, %72 ]
  %79 = and i64 %66, -8168
  %80 = or i64 %79, %78
  %81 = or i64 %80, 5
  br label %82

82:                                               ; preds = %64, %77
  %83 = phi i64 [ %81, %77 ], [ %66, %64 ]
  %84 = icmp ult i64 %67, %83
  br label %132

85:                                               ; preds = %7, %47
  %86 = getelementptr %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %0, i64 0, i32 1, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, 7
  %89 = icmp ugt i64 %88, 4
  %90 = and i64 %87, 24
  %91 = icmp eq i64 %90, 8
  %92 = and i1 %89, %91
  %93 = getelementptr %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %1, i64 0, i32 1, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 7
  %96 = icmp ugt i64 %95, 4
  %97 = and i64 %94, 24
  %98 = icmp eq i64 %97, 8
  %99 = and i1 %96, %98
  br i1 %92, label %100, label %101

100:                                              ; preds = %85
  br i1 %99, label %102, label %132

101:                                              ; preds = %85
  br i1 %99, label %132, label %102

102:                                              ; preds = %100, %101
  br i1 %89, label %103, label %115

103:                                              ; preds = %102
  %104 = icmp eq i64 %90, 0
  br i1 %104, label %105, label %110

105:                                              ; preds = %103
  %106 = lshr i64 %87, 5
  %107 = trunc i64 %106 to i8
  %108 = icmp ugt i8 %107, 11
  %109 = select i1 %108, i64 416, i64 0
  br label %110

110:                                              ; preds = %105, %103
  %111 = phi i64 [ 0, %103 ], [ %109, %105 ]
  %112 = and i64 %87, -8168
  %113 = or i64 %112, %111
  %114 = or i64 %113, 5
  br label %115

115:                                              ; preds = %110, %102
  %116 = phi i64 [ %114, %110 ], [ %87, %102 ]
  br i1 %96, label %117, label %129

117:                                              ; preds = %115
  %118 = icmp eq i64 %97, 0
  br i1 %118, label %119, label %124

119:                                              ; preds = %117
  %120 = lshr i64 %94, 5
  %121 = trunc i64 %120 to i8
  %122 = icmp ugt i8 %121, 11
  %123 = select i1 %122, i64 416, i64 0
  br label %124

124:                                              ; preds = %119, %117
  %125 = phi i64 [ 0, %117 ], [ %123, %119 ]
  %126 = and i64 %94, -8168
  %127 = or i64 %126, %125
  %128 = or i64 %127, 5
  br label %129

129:                                              ; preds = %115, %124
  %130 = phi i64 [ %128, %124 ], [ %94, %115 ]
  %131 = icmp ult i64 %116, %130
  br label %132

132:                                              ; preds = %101, %100, %129, %82
  %133 = phi i1 [ %131, %129 ], [ %84, %82 ], [ false, %100 ], [ true, %101 ]
  ret i1 %133
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !2
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !2
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %57, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %57
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %57, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %56, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %98
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !2
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %99, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %98, %"class.std::__1::__tree_node_base"* %99
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %140, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %138, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !2
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !2
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %143
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !2
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %143, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !2
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %142
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %142, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %142, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !2
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %99, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %98, %"class.std::__1::__tree_node_base"* %99
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %274, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %272, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !2
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !2
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !2
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %277
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !2
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %276
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %276, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %276, %306 ], [ %276, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !2
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %143, %165 ], [ %277, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %335, %3
  %5 = phi %"class.v8::internal::compiler::MoveOperands"** [ %1, %3 ], [ %314, %335 ]
  %6 = phi %"class.v8::internal::compiler::MoveOperands"** [ %0, %3 ], [ %18, %335 ]
  %7 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %5 to i64
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, i64 -1
  %9 = bitcast %"class.v8::internal::compiler::MoveOperands"** %8 to i64*
  %10 = bitcast %"class.v8::internal::compiler::MoveOperands"** %8 to i64*
  %11 = bitcast %"class.v8::internal::compiler::MoveOperands"** %8 to i64*
  %12 = bitcast %"class.v8::internal::compiler::MoveOperands"** %8 to i64*
  %13 = bitcast %"class.v8::internal::compiler::MoveOperands"** %8 to i64*
  %14 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %5 to i64
  br label %15

15:                                               ; preds = %344, %4
  %16 = phi %"class.v8::internal::compiler::MoveOperands"** [ %6, %4 ], [ %345, %344 ]
  br label %17

17:                                               ; preds = %258, %15
  %18 = phi %"class.v8::internal::compiler::MoveOperands"** [ %16, %15 ], [ %245, %258 ]
  %19 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 3
  switch i64 %21, label %121 [
    i64 0, label %348
    i64 1, label %348
    i64 2, label %22
    i64 3, label %33
    i64 4, label %76
    i64 5, label %81
  ]

22:                                               ; preds = %17
  %23 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, i64 -1
  %25 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %24, align 8
  %26 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %27 = tail call zeroext i1 %23(%"class.v8::internal::compiler::MoveOperands"* %25, %"class.v8::internal::compiler::MoveOperands"* %26) #5
  br i1 %27, label %28, label %348

28:                                               ; preds = %22
  %29 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.v8::internal::compiler::MoveOperands"** %24 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %29, align 8
  store i64 %30, i64* %31, align 8
  br label %348

33:                                               ; preds = %17
  %34 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 1
  %35 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, i64 -1
  %36 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %37 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %34, align 8
  %38 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %39 = tail call zeroext i1 %36(%"class.v8::internal::compiler::MoveOperands"* %37, %"class.v8::internal::compiler::MoveOperands"* %38) #5
  %40 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %41 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %35, align 8
  %42 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %34, align 8
  %43 = tail call zeroext i1 %40(%"class.v8::internal::compiler::MoveOperands"* %41, %"class.v8::internal::compiler::MoveOperands"* %42) #5
  br i1 %39, label %59, label %44

44:                                               ; preds = %33
  br i1 %43, label %45, label %348

45:                                               ; preds = %44
  %46 = bitcast %"class.v8::internal::compiler::MoveOperands"** %34 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.v8::internal::compiler::MoveOperands"** %35 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %46, align 8
  store i64 %47, i64* %48, align 8
  %50 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %51 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %34, align 8
  %52 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %53 = tail call zeroext i1 %50(%"class.v8::internal::compiler::MoveOperands"* %51, %"class.v8::internal::compiler::MoveOperands"* %52) #5
  br i1 %53, label %54, label %348

54:                                               ; preds = %45
  %55 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %58 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to <2 x i64>*
  store <2 x i64> %57, <2 x i64>* %58, align 8
  br label %348

59:                                               ; preds = %33
  %60 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %61 = load i64, i64* %60, align 8
  br i1 %43, label %62, label %65

62:                                               ; preds = %59
  %63 = bitcast %"class.v8::internal::compiler::MoveOperands"** %35 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %60, align 8
  store i64 %61, i64* %63, align 8
  br label %348

65:                                               ; preds = %59
  %66 = bitcast %"class.v8::internal::compiler::MoveOperands"** %34 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %60, align 8
  store i64 %61, i64* %66, align 8
  %68 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %69 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %35, align 8
  %70 = inttoptr i64 %61 to %"class.v8::internal::compiler::MoveOperands"*
  %71 = tail call zeroext i1 %68(%"class.v8::internal::compiler::MoveOperands"* %69, %"class.v8::internal::compiler::MoveOperands"* %70) #5
  br i1 %71, label %72, label %348

72:                                               ; preds = %65
  %73 = load i64, i64* %66, align 8
  %74 = bitcast %"class.v8::internal::compiler::MoveOperands"** %35 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %66, align 8
  store i64 %73, i64* %74, align 8
  br label %348

76:                                               ; preds = %17
  %77 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 1
  %78 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 2
  %79 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, i64 -1
  %80 = tail call i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %77, %"class.v8::internal::compiler::MoveOperands"** %78, %"class.v8::internal::compiler::MoveOperands"** %79, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  br label %348

81:                                               ; preds = %17
  %82 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 1
  %83 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 2
  %84 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 3
  %85 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, i64 -1
  %86 = tail call i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %82, %"class.v8::internal::compiler::MoveOperands"** %83, %"class.v8::internal::compiler::MoveOperands"** %84, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2) #5
  %87 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %88 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %85, align 8
  %89 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %84, align 8
  %90 = tail call zeroext i1 %87(%"class.v8::internal::compiler::MoveOperands"* %88, %"class.v8::internal::compiler::MoveOperands"* %89) #5
  br i1 %90, label %91, label %348

91:                                               ; preds = %81
  %92 = bitcast %"class.v8::internal::compiler::MoveOperands"** %84 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.v8::internal::compiler::MoveOperands"** %85 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %92, align 8
  store i64 %93, i64* %94, align 8
  %96 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %97 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %84, align 8
  %98 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %83, align 8
  %99 = tail call zeroext i1 %96(%"class.v8::internal::compiler::MoveOperands"* %97, %"class.v8::internal::compiler::MoveOperands"* %98) #5
  br i1 %99, label %100, label %348

100:                                              ; preds = %91
  %101 = bitcast %"class.v8::internal::compiler::MoveOperands"** %83 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = load i64, i64* %92, align 8
  store i64 %103, i64* %101, align 8
  store i64 %102, i64* %92, align 8
  %104 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %105 = inttoptr i64 %103 to %"class.v8::internal::compiler::MoveOperands"*
  %106 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %82, align 8
  %107 = tail call zeroext i1 %104(%"class.v8::internal::compiler::MoveOperands"* %105, %"class.v8::internal::compiler::MoveOperands"* %106) #5
  br i1 %107, label %108, label %348

108:                                              ; preds = %100
  %109 = bitcast %"class.v8::internal::compiler::MoveOperands"** %82 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = load i64, i64* %101, align 8
  store i64 %111, i64* %109, align 8
  store i64 %110, i64* %101, align 8
  %112 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %113 = inttoptr i64 %111 to %"class.v8::internal::compiler::MoveOperands"*
  %114 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %115 = tail call zeroext i1 %112(%"class.v8::internal::compiler::MoveOperands"* %113, %"class.v8::internal::compiler::MoveOperands"* %114) #5
  br i1 %115, label %116, label %348

116:                                              ; preds = %108
  %117 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8
  %119 = shufflevector <2 x i64> %118, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %120 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %120, align 8
  br label %348

121:                                              ; preds = %17
  %122 = icmp slt i64 %20, 248
  br i1 %122, label %123, label %124

123:                                              ; preds = %121
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %5, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  br label %348

124:                                              ; preds = %121
  %125 = icmp sgt i64 %20, 7992
  %126 = sdiv i64 %21, 2
  %127 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 %126
  br i1 %125, label %128, label %169

128:                                              ; preds = %124
  %129 = sdiv i64 %21, 4
  %130 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 %129
  %131 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, i64 %129
  %132 = tail call i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %130, %"class.v8::internal::compiler::MoveOperands"** %127, %"class.v8::internal::compiler::MoveOperands"** %131, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2) #5
  %133 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %134 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %8, align 8
  %135 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %131, align 8
  %136 = tail call zeroext i1 %133(%"class.v8::internal::compiler::MoveOperands"* %134, %"class.v8::internal::compiler::MoveOperands"* %135) #5
  br i1 %136, label %137, label %206

137:                                              ; preds = %128
  %138 = bitcast %"class.v8::internal::compiler::MoveOperands"** %131 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = load i64, i64* %12, align 8
  store i64 %140, i64* %138, align 8
  store i64 %139, i64* %12, align 8
  %141 = add i32 %132, 1
  %142 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %143 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %131, align 8
  %144 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %145 = tail call zeroext i1 %142(%"class.v8::internal::compiler::MoveOperands"* %143, %"class.v8::internal::compiler::MoveOperands"* %144) #5
  br i1 %145, label %146, label %206

146:                                              ; preds = %137
  %147 = bitcast %"class.v8::internal::compiler::MoveOperands"** %127 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = load i64, i64* %138, align 8
  store i64 %149, i64* %147, align 8
  store i64 %148, i64* %138, align 8
  %150 = add i32 %132, 2
  %151 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %152 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %153 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %130, align 8
  %154 = tail call zeroext i1 %151(%"class.v8::internal::compiler::MoveOperands"* %152, %"class.v8::internal::compiler::MoveOperands"* %153) #5
  br i1 %154, label %155, label %206

155:                                              ; preds = %146
  %156 = bitcast %"class.v8::internal::compiler::MoveOperands"** %130 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = load i64, i64* %147, align 8
  store i64 %158, i64* %156, align 8
  store i64 %157, i64* %147, align 8
  %159 = add i32 %132, 3
  %160 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %161 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %130, align 8
  %162 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %163 = tail call zeroext i1 %160(%"class.v8::internal::compiler::MoveOperands"* %161, %"class.v8::internal::compiler::MoveOperands"* %162) #5
  br i1 %163, label %164, label %206

164:                                              ; preds = %155
  %165 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = load i64, i64* %156, align 8
  store i64 %167, i64* %165, align 8
  store i64 %166, i64* %156, align 8
  %168 = add i32 %132, 4
  br label %206

169:                                              ; preds = %124
  %170 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %171 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %172 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %173 = tail call zeroext i1 %170(%"class.v8::internal::compiler::MoveOperands"* %171, %"class.v8::internal::compiler::MoveOperands"* %172) #5
  %174 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %175 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %8, align 8
  %176 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %177 = tail call zeroext i1 %174(%"class.v8::internal::compiler::MoveOperands"* %175, %"class.v8::internal::compiler::MoveOperands"* %176) #5
  br i1 %173, label %191, label %178

178:                                              ; preds = %169
  br i1 %177, label %179, label %206

179:                                              ; preds = %178
  %180 = bitcast %"class.v8::internal::compiler::MoveOperands"** %127 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = load i64, i64* %9, align 8
  store i64 %182, i64* %180, align 8
  store i64 %181, i64* %9, align 8
  %183 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %184 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %185 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %186 = tail call zeroext i1 %183(%"class.v8::internal::compiler::MoveOperands"* %184, %"class.v8::internal::compiler::MoveOperands"* %185) #5
  br i1 %186, label %187, label %206

187:                                              ; preds = %179
  %188 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = load i64, i64* %180, align 8
  store i64 %190, i64* %188, align 8
  store i64 %189, i64* %180, align 8
  br label %206

191:                                              ; preds = %169
  %192 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %193 = load i64, i64* %192, align 8
  br i1 %177, label %194, label %196

194:                                              ; preds = %191
  %195 = load i64, i64* %11, align 8
  store i64 %195, i64* %192, align 8
  store i64 %193, i64* %11, align 8
  br label %206

196:                                              ; preds = %191
  %197 = bitcast %"class.v8::internal::compiler::MoveOperands"** %127 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %192, align 8
  store i64 %193, i64* %197, align 8
  %199 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %200 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %8, align 8
  %201 = inttoptr i64 %193 to %"class.v8::internal::compiler::MoveOperands"*
  %202 = tail call zeroext i1 %199(%"class.v8::internal::compiler::MoveOperands"* %200, %"class.v8::internal::compiler::MoveOperands"* %201) #5
  br i1 %202, label %203, label %206

203:                                              ; preds = %196
  %204 = load i64, i64* %197, align 8
  %205 = load i64, i64* %10, align 8
  store i64 %205, i64* %197, align 8
  store i64 %204, i64* %10, align 8
  br label %206

206:                                              ; preds = %203, %196, %194, %187, %179, %178, %164, %155, %146, %137, %128
  %207 = phi i32 [ %168, %164 ], [ %159, %155 ], [ %150, %146 ], [ %141, %137 ], [ %132, %128 ], [ 1, %194 ], [ 0, %178 ], [ 2, %187 ], [ 1, %179 ], [ 2, %203 ], [ 1, %196 ]
  %208 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %209 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %210 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %211 = tail call zeroext i1 %208(%"class.v8::internal::compiler::MoveOperands"* %209, %"class.v8::internal::compiler::MoveOperands"* %210) #5
  br i1 %211, label %276, label %212

212:                                              ; preds = %206, %265
  %213 = phi %"class.v8::internal::compiler::MoveOperands"** [ %214, %265 ], [ %8, %206 ]
  %214 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %213, i64 -1
  %215 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %18, %214
  br i1 %215, label %216, label %265

216:                                              ; preds = %212
  %217 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 1
  %218 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %219 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %220 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %8, align 8
  %221 = tail call zeroext i1 %218(%"class.v8::internal::compiler::MoveOperands"* %219, %"class.v8::internal::compiler::MoveOperands"* %220) #5
  br i1 %221, label %238, label %222

222:                                              ; preds = %216
  %223 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %217, %8
  br i1 %223, label %348, label %224

224:                                              ; preds = %222, %235
  %225 = phi %"class.v8::internal::compiler::MoveOperands"** [ %236, %235 ], [ %217, %222 ]
  %226 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %227 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %228 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %225, align 8
  %229 = tail call zeroext i1 %226(%"class.v8::internal::compiler::MoveOperands"* %227, %"class.v8::internal::compiler::MoveOperands"* %228) #5
  br i1 %229, label %230, label %235

230:                                              ; preds = %224
  %231 = bitcast %"class.v8::internal::compiler::MoveOperands"** %225 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = load i64, i64* %13, align 8
  store i64 %233, i64* %231, align 8
  store i64 %232, i64* %13, align 8
  %234 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %225, i64 1
  br label %238

235:                                              ; preds = %224
  %236 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %225, i64 1
  %237 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %236, %8
  br i1 %237, label %348, label %224

238:                                              ; preds = %230, %216
  %239 = phi %"class.v8::internal::compiler::MoveOperands"** [ %217, %216 ], [ %234, %230 ]
  %240 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %239, %8
  br i1 %240, label %348, label %241

241:                                              ; preds = %238, %260
  %242 = phi %"class.v8::internal::compiler::MoveOperands"** [ %250, %260 ], [ %239, %238 ]
  %243 = phi %"class.v8::internal::compiler::MoveOperands"** [ %255, %260 ], [ %8, %238 ]
  br label %244

244:                                              ; preds = %244, %241
  %245 = phi %"class.v8::internal::compiler::MoveOperands"** [ %242, %241 ], [ %250, %244 ]
  %246 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %247 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %248 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %245, align 8
  %249 = tail call zeroext i1 %246(%"class.v8::internal::compiler::MoveOperands"* %247, %"class.v8::internal::compiler::MoveOperands"* %248) #5
  %250 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %245, i64 1
  br i1 %249, label %251, label %244

251:                                              ; preds = %244, %251
  %252 = phi %"class.v8::internal::compiler::MoveOperands"** [ %255, %251 ], [ %243, %244 ]
  %253 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %254 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, align 8
  %255 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %252, i64 -1
  %256 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %255, align 8
  %257 = tail call zeroext i1 %253(%"class.v8::internal::compiler::MoveOperands"* %254, %"class.v8::internal::compiler::MoveOperands"* %256) #5
  br i1 %257, label %251, label %258

258:                                              ; preds = %251
  %259 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %245, %255
  br i1 %259, label %260, label %17

260:                                              ; preds = %258
  %261 = bitcast %"class.v8::internal::compiler::MoveOperands"** %245 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = bitcast %"class.v8::internal::compiler::MoveOperands"** %255 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %261, align 8
  store i64 %262, i64* %263, align 8
  br label %241

265:                                              ; preds = %212
  %266 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %267 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %214, align 8
  %268 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, align 8
  %269 = tail call zeroext i1 %266(%"class.v8::internal::compiler::MoveOperands"* %267, %"class.v8::internal::compiler::MoveOperands"* %268) #5
  br i1 %269, label %270, label %212

270:                                              ; preds = %265
  %271 = bitcast %"class.v8::internal::compiler::MoveOperands"** %18 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = bitcast %"class.v8::internal::compiler::MoveOperands"** %214 to i64*
  %274 = load i64, i64* %273, align 8
  store i64 %274, i64* %271, align 8
  store i64 %272, i64* %273, align 8
  %275 = add i32 %207, 1
  br label %276

276:                                              ; preds = %206, %270
  %277 = phi i32 [ %275, %270 ], [ %207, %206 ]
  %278 = phi %"class.v8::internal::compiler::MoveOperands"** [ %214, %270 ], [ %8, %206 ]
  %279 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %18 to i64
  %280 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %18, i64 1
  %281 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %280, %278
  br i1 %281, label %282, label %311

282:                                              ; preds = %276, %303
  %283 = phi %"class.v8::internal::compiler::MoveOperands"** [ %310, %303 ], [ %127, %276 ]
  %284 = phi i32 [ %308, %303 ], [ %277, %276 ]
  %285 = phi %"class.v8::internal::compiler::MoveOperands"** [ %293, %303 ], [ %280, %276 ]
  %286 = phi %"class.v8::internal::compiler::MoveOperands"** [ %297, %303 ], [ %278, %276 ]
  br label %287

287:                                              ; preds = %287, %282
  %288 = phi %"class.v8::internal::compiler::MoveOperands"** [ %285, %282 ], [ %293, %287 ]
  %289 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %290 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %288, align 8
  %291 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %283, align 8
  %292 = tail call zeroext i1 %289(%"class.v8::internal::compiler::MoveOperands"* %290, %"class.v8::internal::compiler::MoveOperands"* %291) #5
  %293 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %288, i64 1
  br i1 %292, label %287, label %294

294:                                              ; preds = %287, %294
  %295 = phi %"class.v8::internal::compiler::MoveOperands"** [ %297, %294 ], [ %286, %287 ]
  %296 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %297 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %295, i64 -1
  %298 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %297, align 8
  %299 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %283, align 8
  %300 = tail call zeroext i1 %296(%"class.v8::internal::compiler::MoveOperands"* %298, %"class.v8::internal::compiler::MoveOperands"* %299) #5
  br i1 %300, label %301, label %294

301:                                              ; preds = %294
  %302 = icmp ugt %"class.v8::internal::compiler::MoveOperands"** %288, %297
  br i1 %302, label %311, label %303

303:                                              ; preds = %301
  %304 = bitcast %"class.v8::internal::compiler::MoveOperands"** %288 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.v8::internal::compiler::MoveOperands"** %297 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %304, align 8
  store i64 %305, i64* %306, align 8
  %308 = add i32 %284, 1
  %309 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %283, %288
  %310 = select i1 %309, %"class.v8::internal::compiler::MoveOperands"** %297, %"class.v8::internal::compiler::MoveOperands"** %283
  br label %282

311:                                              ; preds = %301, %276
  %312 = phi %"class.v8::internal::compiler::MoveOperands"** [ %127, %276 ], [ %283, %301 ]
  %313 = phi i32 [ %277, %276 ], [ %284, %301 ]
  %314 = phi %"class.v8::internal::compiler::MoveOperands"** [ %280, %276 ], [ %288, %301 ]
  %315 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %314, %312
  br i1 %315, label %327, label %316

316:                                              ; preds = %311
  %317 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %318 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %312, align 8
  %319 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %314, align 8
  %320 = tail call zeroext i1 %317(%"class.v8::internal::compiler::MoveOperands"* %318, %"class.v8::internal::compiler::MoveOperands"* %319) #5
  br i1 %320, label %321, label %327

321:                                              ; preds = %316
  %322 = bitcast %"class.v8::internal::compiler::MoveOperands"** %314 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = bitcast %"class.v8::internal::compiler::MoveOperands"** %312 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %322, align 8
  store i64 %323, i64* %324, align 8
  %326 = add i32 %313, 1
  br label %327

327:                                              ; preds = %311, %321, %316
  %328 = phi i32 [ %326, %321 ], [ %313, %316 ], [ %313, %311 ]
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %337

330:                                              ; preds = %327
  %331 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEbT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %314, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  %332 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %314, i64 1
  %333 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEbT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %332, %"class.v8::internal::compiler::MoveOperands"** %5, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  br i1 %333, label %334, label %336

334:                                              ; preds = %330
  br i1 %331, label %348, label %335

335:                                              ; preds = %334, %346
  br label %4

336:                                              ; preds = %330
  br i1 %331, label %344, label %337

337:                                              ; preds = %336, %327
  %338 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %314 to i64
  %339 = sub i64 %338, %279
  %340 = sub i64 %14, %338
  %341 = icmp slt i64 %339, %340
  br i1 %341, label %342, label %346

342:                                              ; preds = %337
  tail call void @_ZNSt3__16__sortIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %18, %"class.v8::internal::compiler::MoveOperands"** %314, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  %343 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %314, i64 1
  br label %344

344:                                              ; preds = %342, %336
  %345 = phi %"class.v8::internal::compiler::MoveOperands"** [ %332, %336 ], [ %343, %342 ]
  br label %15

346:                                              ; preds = %337
  %347 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %314, i64 1
  tail call void @_ZNSt3__16__sortIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %347, %"class.v8::internal::compiler::MoveOperands"** %5, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  br label %335

348:                                              ; preds = %334, %238, %17, %17, %222, %235, %116, %108, %100, %91, %81, %72, %65, %62, %54, %45, %44, %22, %28, %76, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %7 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, align 8
  %8 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %9 = tail call zeroext i1 %6(%"class.v8::internal::compiler::MoveOperands"* %7, %"class.v8::internal::compiler::MoveOperands"* %8) #5
  %10 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %11 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %2, align 8
  %12 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, align 8
  %13 = tail call zeroext i1 %10(%"class.v8::internal::compiler::MoveOperands"* %11, %"class.v8::internal::compiler::MoveOperands"* %12) #5
  br i1 %9, label %28, label %14

14:                                               ; preds = %5
  br i1 %13, label %15, label %45

15:                                               ; preds = %14
  %16 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.v8::internal::compiler::MoveOperands"** %2 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 8
  store i64 %17, i64* %18, align 8
  %20 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %21 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, align 8
  %22 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %23 = tail call zeroext i1 %20(%"class.v8::internal::compiler::MoveOperands"* %21, %"class.v8::internal::compiler::MoveOperands"* %22) #5
  br i1 %23, label %24, label %45

24:                                               ; preds = %15
  %25 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = load i64, i64* %16, align 8
  store i64 %27, i64* %25, align 8
  store i64 %26, i64* %16, align 8
  br label %45

28:                                               ; preds = %5
  %29 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %30 = load i64, i64* %29, align 8
  br i1 %13, label %31, label %34

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::internal::compiler::MoveOperands"** %2 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %29, align 8
  store i64 %30, i64* %32, align 8
  br label %45

34:                                               ; preds = %28
  %35 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %29, align 8
  store i64 %30, i64* %35, align 8
  %37 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %38 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %2, align 8
  %39 = inttoptr i64 %30 to %"class.v8::internal::compiler::MoveOperands"*
  %40 = tail call zeroext i1 %37(%"class.v8::internal::compiler::MoveOperands"* %38, %"class.v8::internal::compiler::MoveOperands"* %39) #5
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = load i64, i64* %35, align 8
  %43 = bitcast %"class.v8::internal::compiler::MoveOperands"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %35, align 8
  store i64 %42, i64* %43, align 8
  br label %45

45:                                               ; preds = %14, %15, %24, %31, %34, %41
  %46 = phi i32 [ 1, %31 ], [ 0, %14 ], [ 2, %24 ], [ 1, %15 ], [ 2, %41 ], [ 1, %34 ]
  %47 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %48 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %3, align 8
  %49 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %2, align 8
  %50 = tail call zeroext i1 %47(%"class.v8::internal::compiler::MoveOperands"* %48, %"class.v8::internal::compiler::MoveOperands"* %49) #5
  br i1 %50, label %51, label %75

51:                                               ; preds = %45
  %52 = bitcast %"class.v8::internal::compiler::MoveOperands"** %2 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.v8::internal::compiler::MoveOperands"** %3 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %52, align 8
  store i64 %53, i64* %54, align 8
  %56 = add nuw nsw i32 %46, 1
  %57 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %58 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %2, align 8
  %59 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, align 8
  %60 = tail call zeroext i1 %57(%"class.v8::internal::compiler::MoveOperands"* %58, %"class.v8::internal::compiler::MoveOperands"* %59) #5
  br i1 %60, label %61, label %75

61:                                               ; preds = %51
  %62 = bitcast %"class.v8::internal::compiler::MoveOperands"** %1 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = load i64, i64* %52, align 8
  store i64 %64, i64* %62, align 8
  store i64 %63, i64* %52, align 8
  %65 = add nuw nsw i32 %46, 2
  %66 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %4, align 8
  %67 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, align 8
  %68 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %69 = tail call zeroext i1 %66(%"class.v8::internal::compiler::MoveOperands"* %67, %"class.v8::internal::compiler::MoveOperands"* %68) #5
  br i1 %69, label %70, label %75

70:                                               ; preds = %61
  %71 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* %62, align 8
  store i64 %73, i64* %71, align 8
  store i64 %72, i64* %62, align 8
  %74 = add nuw nsw i32 %46, 3
  br label %75

75:                                               ; preds = %51, %70, %61, %45
  %76 = phi i32 [ %74, %70 ], [ %65, %61 ], [ %56, %51 ], [ %46, %45 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEvT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 2
  %5 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 1
  %6 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %7 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, align 8
  %8 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %9 = tail call zeroext i1 %6(%"class.v8::internal::compiler::MoveOperands"* %7, %"class.v8::internal::compiler::MoveOperands"* %8) #5
  %10 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %11 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %4, align 8
  %12 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %5, align 8
  %13 = tail call zeroext i1 %10(%"class.v8::internal::compiler::MoveOperands"* %11, %"class.v8::internal::compiler::MoveOperands"* %12) #5
  br i1 %9, label %29, label %14

14:                                               ; preds = %3
  br i1 %13, label %15, label %47

15:                                               ; preds = %14
  %16 = bitcast %"class.v8::internal::compiler::MoveOperands"** %5 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.v8::internal::compiler::MoveOperands"** %4 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 8
  store i64 %17, i64* %18, align 8
  %20 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %21 = inttoptr i64 %19 to %"class.v8::internal::compiler::MoveOperands"*
  %22 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %23 = tail call zeroext i1 %20(%"class.v8::internal::compiler::MoveOperands"* %21, %"class.v8::internal::compiler::MoveOperands"* %22) #5
  br i1 %23, label %24, label %47

24:                                               ; preds = %15
  %25 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 8
  %27 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %28 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %28, align 8
  br label %47

29:                                               ; preds = %3
  %30 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %31 = load i64, i64* %30, align 8
  br i1 %13, label %32, label %35

32:                                               ; preds = %29
  %33 = bitcast %"class.v8::internal::compiler::MoveOperands"** %4 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %30, align 8
  store i64 %31, i64* %33, align 8
  br label %47

35:                                               ; preds = %29
  %36 = bitcast %"class.v8::internal::compiler::MoveOperands"** %5 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %30, align 8
  store i64 %31, i64* %36, align 8
  %38 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %39 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %4, align 8
  %40 = inttoptr i64 %31 to %"class.v8::internal::compiler::MoveOperands"*
  %41 = tail call zeroext i1 %38(%"class.v8::internal::compiler::MoveOperands"* %39, %"class.v8::internal::compiler::MoveOperands"* %40) #5
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = bitcast %"class.v8::internal::compiler::MoveOperands"** %5 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %46 = bitcast %"class.v8::internal::compiler::MoveOperands"** %5 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %46, align 8
  br label %47

47:                                               ; preds = %14, %15, %24, %32, %35, %42
  %48 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 3
  %49 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %48, %1
  br i1 %49, label %50, label %51

50:                                               ; preds = %77, %47
  ret void

51:                                               ; preds = %47, %77
  %52 = phi %"class.v8::internal::compiler::MoveOperands"** [ %78, %77 ], [ %48, %47 ]
  %53 = phi %"class.v8::internal::compiler::MoveOperands"** [ %52, %77 ], [ %4, %47 ]
  %54 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %55 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %52, align 8
  %56 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %53, align 8
  %57 = tail call zeroext i1 %54(%"class.v8::internal::compiler::MoveOperands"* %55, %"class.v8::internal::compiler::MoveOperands"* %56) #5
  br i1 %57, label %58, label %77

58:                                               ; preds = %51
  %59 = bitcast %"class.v8::internal::compiler::MoveOperands"** %52 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = inttoptr i64 %60 to %"class.v8::internal::compiler::MoveOperands"*
  br label %62

62:                                               ; preds = %69, %58
  %63 = phi %"class.v8::internal::compiler::MoveOperands"** [ %52, %58 ], [ %64, %69 ]
  %64 = phi %"class.v8::internal::compiler::MoveOperands"** [ %53, %58 ], [ %71, %69 ]
  %65 = bitcast %"class.v8::internal::compiler::MoveOperands"** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.v8::internal::compiler::MoveOperands"** %63 to i64*
  store i64 %66, i64* %67, align 8
  %68 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %64, %0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %71 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %64, i64 -1
  %72 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %71, align 8
  %73 = tail call zeroext i1 %70(%"class.v8::internal::compiler::MoveOperands"* %61, %"class.v8::internal::compiler::MoveOperands"* %72) #5
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %69
  %75 = phi %"class.v8::internal::compiler::MoveOperands"** [ %64, %69 ], [ %0, %62 ]
  %76 = bitcast %"class.v8::internal::compiler::MoveOperands"** %75 to i64*
  store i64 %60, i64* %76, align 8
  br label %77

77:                                               ; preds = %74, %51
  %78 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %52, i64 1
  %79 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %78, %1
  br i1 %79, label %50, label %51
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEbT0_SC_T_(%"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %1 to i64
  %5 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  switch i64 %7, label %107 [
    i64 0, label %190
    i64 1, label %190
    i64 2, label %8
    i64 3, label %19
    i64 4, label %62
    i64 5, label %67
  ]

8:                                                ; preds = %3
  %9 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, i64 -1
  %11 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %10, align 8
  %12 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %13 = tail call zeroext i1 %9(%"class.v8::internal::compiler::MoveOperands"* %11, %"class.v8::internal::compiler::MoveOperands"* %12) #5
  br i1 %13, label %14, label %190

14:                                               ; preds = %8
  %15 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.v8::internal::compiler::MoveOperands"** %10 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %15, align 8
  store i64 %16, i64* %17, align 8
  br label %190

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 1
  %21 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, i64 -1
  %22 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %23 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %20, align 8
  %24 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %25 = tail call zeroext i1 %22(%"class.v8::internal::compiler::MoveOperands"* %23, %"class.v8::internal::compiler::MoveOperands"* %24) #5
  %26 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %27 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %21, align 8
  %28 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %20, align 8
  %29 = tail call zeroext i1 %26(%"class.v8::internal::compiler::MoveOperands"* %27, %"class.v8::internal::compiler::MoveOperands"* %28) #5
  br i1 %25, label %45, label %30

30:                                               ; preds = %19
  br i1 %29, label %31, label %190

31:                                               ; preds = %30
  %32 = bitcast %"class.v8::internal::compiler::MoveOperands"** %20 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.v8::internal::compiler::MoveOperands"** %21 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %32, align 8
  store i64 %33, i64* %34, align 8
  %36 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %37 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %20, align 8
  %38 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %39 = tail call zeroext i1 %36(%"class.v8::internal::compiler::MoveOperands"* %37, %"class.v8::internal::compiler::MoveOperands"* %38) #5
  br i1 %39, label %40, label %190

40:                                               ; preds = %31
  %41 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 8
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %44 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 8
  br label %190

45:                                               ; preds = %19
  %46 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %47 = load i64, i64* %46, align 8
  br i1 %29, label %48, label %51

48:                                               ; preds = %45
  %49 = bitcast %"class.v8::internal::compiler::MoveOperands"** %21 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %46, align 8
  store i64 %47, i64* %49, align 8
  br label %190

51:                                               ; preds = %45
  %52 = bitcast %"class.v8::internal::compiler::MoveOperands"** %20 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %46, align 8
  store i64 %47, i64* %52, align 8
  %54 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %55 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %21, align 8
  %56 = inttoptr i64 %47 to %"class.v8::internal::compiler::MoveOperands"*
  %57 = tail call zeroext i1 %54(%"class.v8::internal::compiler::MoveOperands"* %55, %"class.v8::internal::compiler::MoveOperands"* %56) #5
  br i1 %57, label %58, label %190

58:                                               ; preds = %51
  %59 = load i64, i64* %52, align 8
  %60 = bitcast %"class.v8::internal::compiler::MoveOperands"** %21 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %52, align 8
  store i64 %59, i64* %60, align 8
  br label %190

62:                                               ; preds = %3
  %63 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 1
  %64 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 2
  %65 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, i64 -1
  %66 = tail call i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %0, %"class.v8::internal::compiler::MoveOperands"** %63, %"class.v8::internal::compiler::MoveOperands"** %64, %"class.v8::internal::compiler::MoveOperands"** %65, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2)
  br label %190

67:                                               ; preds = %3
  %68 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 1
  %69 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 2
  %70 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 3
  %71 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %1, i64 -1
  %72 = tail call i32 @_ZNSt3__17__sort4IRPFbPKN2v88internal8compiler12MoveOperandsES6_EPPS4_EEjT0_SC_SC_SC_T_(%"class.v8::internal::compiler::MoveOperands"** %0, %"class.v8::internal::compiler::MoveOperands"** %68, %"class.v8::internal::compiler::MoveOperands"** %69, %"class.v8::internal::compiler::MoveOperands"** %70, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** dereferenceable(8) %2) #5
  %73 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %74 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %71, align 8
  %75 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %70, align 8
  %76 = tail call zeroext i1 %73(%"class.v8::internal::compiler::MoveOperands"* %74, %"class.v8::internal::compiler::MoveOperands"* %75) #5
  br i1 %76, label %77, label %190

77:                                               ; preds = %67
  %78 = bitcast %"class.v8::internal::compiler::MoveOperands"** %70 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.v8::internal::compiler::MoveOperands"** %71 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %78, align 8
  store i64 %79, i64* %80, align 8
  %82 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %83 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %70, align 8
  %84 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %69, align 8
  %85 = tail call zeroext i1 %82(%"class.v8::internal::compiler::MoveOperands"* %83, %"class.v8::internal::compiler::MoveOperands"* %84) #5
  br i1 %85, label %86, label %190

86:                                               ; preds = %77
  %87 = bitcast %"class.v8::internal::compiler::MoveOperands"** %69 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load i64, i64* %78, align 8
  store i64 %89, i64* %87, align 8
  store i64 %88, i64* %78, align 8
  %90 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %91 = inttoptr i64 %89 to %"class.v8::internal::compiler::MoveOperands"*
  %92 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, align 8
  %93 = tail call zeroext i1 %90(%"class.v8::internal::compiler::MoveOperands"* %91, %"class.v8::internal::compiler::MoveOperands"* %92) #5
  br i1 %93, label %94, label %190

94:                                               ; preds = %86
  %95 = bitcast %"class.v8::internal::compiler::MoveOperands"** %68 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = load i64, i64* %87, align 8
  store i64 %97, i64* %95, align 8
  store i64 %96, i64* %87, align 8
  %98 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %99 = inttoptr i64 %97 to %"class.v8::internal::compiler::MoveOperands"*
  %100 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %101 = tail call zeroext i1 %98(%"class.v8::internal::compiler::MoveOperands"* %99, %"class.v8::internal::compiler::MoveOperands"* %100) #5
  br i1 %101, label %102, label %190

102:                                              ; preds = %94
  %103 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8
  %105 = shufflevector <2 x i64> %104, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %106 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %106, align 8
  br label %190

107:                                              ; preds = %3
  %108 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 2
  %109 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 1
  %110 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %111 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %109, align 8
  %112 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %113 = tail call zeroext i1 %110(%"class.v8::internal::compiler::MoveOperands"* %111, %"class.v8::internal::compiler::MoveOperands"* %112) #5
  %114 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %115 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %108, align 8
  %116 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %109, align 8
  %117 = tail call zeroext i1 %114(%"class.v8::internal::compiler::MoveOperands"* %115, %"class.v8::internal::compiler::MoveOperands"* %116) #5
  br i1 %113, label %133, label %118

118:                                              ; preds = %107
  br i1 %117, label %119, label %151

119:                                              ; preds = %118
  %120 = bitcast %"class.v8::internal::compiler::MoveOperands"** %109 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = bitcast %"class.v8::internal::compiler::MoveOperands"** %108 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %120, align 8
  store i64 %121, i64* %122, align 8
  %124 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %125 = inttoptr i64 %123 to %"class.v8::internal::compiler::MoveOperands"*
  %126 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, align 8
  %127 = tail call zeroext i1 %124(%"class.v8::internal::compiler::MoveOperands"* %125, %"class.v8::internal::compiler::MoveOperands"* %126) #5
  br i1 %127, label %128, label %151

128:                                              ; preds = %119
  %129 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8
  %131 = shufflevector <2 x i64> %130, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %132 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %132, align 8
  br label %151

133:                                              ; preds = %107
  %134 = bitcast %"class.v8::internal::compiler::MoveOperands"** %0 to i64*
  %135 = load i64, i64* %134, align 8
  br i1 %117, label %136, label %139

136:                                              ; preds = %133
  %137 = bitcast %"class.v8::internal::compiler::MoveOperands"** %108 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %134, align 8
  store i64 %135, i64* %137, align 8
  br label %151

139:                                              ; preds = %133
  %140 = bitcast %"class.v8::internal::compiler::MoveOperands"** %109 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %134, align 8
  store i64 %135, i64* %140, align 8
  %142 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %143 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %108, align 8
  %144 = inttoptr i64 %135 to %"class.v8::internal::compiler::MoveOperands"*
  %145 = tail call zeroext i1 %142(%"class.v8::internal::compiler::MoveOperands"* %143, %"class.v8::internal::compiler::MoveOperands"* %144) #5
  br i1 %145, label %146, label %151

146:                                              ; preds = %139
  %147 = bitcast %"class.v8::internal::compiler::MoveOperands"** %109 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8
  %149 = shufflevector <2 x i64> %148, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %150 = bitcast %"class.v8::internal::compiler::MoveOperands"** %109 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %150, align 8
  br label %151

151:                                              ; preds = %118, %119, %128, %136, %139, %146
  %152 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %0, i64 3
  %153 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %152, %1
  br i1 %153, label %190, label %154

154:                                              ; preds = %151, %183
  %155 = phi %"class.v8::internal::compiler::MoveOperands"** [ %185, %183 ], [ %152, %151 ]
  %156 = phi i32 [ %184, %183 ], [ 0, %151 ]
  %157 = phi %"class.v8::internal::compiler::MoveOperands"** [ %155, %183 ], [ %108, %151 ]
  %158 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %159 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %155, align 8
  %160 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %157, align 8
  %161 = tail call zeroext i1 %158(%"class.v8::internal::compiler::MoveOperands"* %159, %"class.v8::internal::compiler::MoveOperands"* %160) #5
  br i1 %161, label %162, label %183

162:                                              ; preds = %154
  %163 = bitcast %"class.v8::internal::compiler::MoveOperands"** %155 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = inttoptr i64 %164 to %"class.v8::internal::compiler::MoveOperands"*
  br label %166

166:                                              ; preds = %173, %162
  %167 = phi %"class.v8::internal::compiler::MoveOperands"** [ %155, %162 ], [ %168, %173 ]
  %168 = phi %"class.v8::internal::compiler::MoveOperands"** [ %157, %162 ], [ %175, %173 ]
  %169 = bitcast %"class.v8::internal::compiler::MoveOperands"** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %"class.v8::internal::compiler::MoveOperands"** %167 to i64*
  store i64 %170, i64* %171, align 8
  %172 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %168, %0
  br i1 %172, label %178, label %173

173:                                              ; preds = %166
  %174 = load i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)*, i1 (%"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"*)** %2, align 8
  %175 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %168, i64 -1
  %176 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %175, align 8
  %177 = tail call zeroext i1 %174(%"class.v8::internal::compiler::MoveOperands"* %165, %"class.v8::internal::compiler::MoveOperands"* %176) #5
  br i1 %177, label %166, label %178

178:                                              ; preds = %166, %173
  %179 = phi %"class.v8::internal::compiler::MoveOperands"** [ %168, %173 ], [ %0, %166 ]
  %180 = bitcast %"class.v8::internal::compiler::MoveOperands"** %179 to i64*
  store i64 %164, i64* %180, align 8
  %181 = add i32 %156, 1
  %182 = icmp eq i32 %181, 8
  br i1 %182, label %187, label %183

183:                                              ; preds = %178, %154
  %184 = phi i32 [ %181, %178 ], [ %156, %154 ]
  %185 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %155, i64 1
  %186 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %185, %1
  br i1 %186, label %190, label %154

187:                                              ; preds = %178
  %188 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %155, i64 1
  %189 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %188, %1
  br label %190

190:                                              ; preds = %183, %187, %151, %102, %94, %86, %77, %67, %58, %51, %48, %40, %31, %30, %8, %14, %3, %3, %62
  %191 = phi i1 [ true, %62 ], [ true, %3 ], [ true, %3 ], [ true, %14 ], [ true, %8 ], [ true, %30 ], [ true, %31 ], [ true, %40 ], [ true, %48 ], [ true, %51 ], [ true, %58 ], [ true, %67 ], [ true, %77 ], [ true, %86 ], [ true, %94 ], [ true, %102 ], [ true, %151 ], [ %189, %187 ], [ true, %183 ]
  ret i1 %191
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__19make_pairIRN2v88internal8compiler12_GLOBAL__N_17MoveKeyEiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS8_IT0_E4typeEEEOS9_OSC_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__19make_pairIRN2v88internal8compiler12_GLOBAL__N_17MoveKeyEiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS8_IT0_E4typeEEEOS9_OSC_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__16__treeINS_12__value_typeIN2v88internal8compiler12_GLOBAL__N_17MoveKeyEjEENS_19__map_value_compareIS6_S7_NS5_14MoveKeyCompareELb1EEENS3_13ZoneAllocatorIS7_EEE16__construct_nodeIJNS_4pairIS6_iEEEEENS_10unique_ptrINS_11__tree_nodeIS7_PvEENS_22__tree_node_destructorINSB_ISK_EEEEEEDpOT_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__16__treeINS_12__value_typeIN2v88internal8compiler12_GLOBAL__N_17MoveKeyEjEENS_19__map_value_compareIS6_S7_NS5_14MoveKeyCompareELb1EEENS3_13ZoneAllocatorIS7_EEE16__construct_nodeIJNS_4pairIS6_iEEEEENS_10unique_ptrINS_11__tree_nodeIS7_PvEENS_22__tree_node_destructorINSB_ISK_EEEEEEDpOT_"}
!9 = !{!"branch_weights", i32 1, i32 2000}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !16}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !18}
!27 = distinct !{!27, !16}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !16}
!34 = distinct !{!34, !18}
!35 = distinct !{!35, !16}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZNSt3__16__treeIN2v88internal8compiler12_GLOBAL__N_17MoveKeyENS4_14MoveKeyCompareENS2_13ZoneAllocatorIS5_EEE16__construct_nodeIJRKS5_EEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!38 = distinct !{!38, !"_ZNSt3__16__treeIN2v88internal8compiler12_GLOBAL__N_17MoveKeyENS4_14MoveKeyCompareENS2_13ZoneAllocatorIS5_EEE16__construct_nodeIJRKS5_EEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !16}
!45 = distinct !{!45, !18}
!46 = distinct !{!46, !16}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !18}
!54 = distinct !{!54, !16}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !16}
!61 = distinct !{!61, !18}
!62 = distinct !{!62, !16}
!63 = distinct !{!63, !18}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !16}
!70 = distinct !{!70, !18}
!71 = distinct !{!71, !16}
