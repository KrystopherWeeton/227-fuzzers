; ModuleID = '../../components/autofill/core/browser/webdata/autofill_change.cc'
source_filename = "../../components/autofill/core/browser/webdata/autofill_change.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::AutofillChange" = type { %"class.autofill::GenericAutofillChange" }
%"class.autofill::GenericAutofillChange" = type { i32 (...)**, i32, %"class.autofill::AutofillKey" }
%"class.autofill::AutofillKey" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }

$_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED2Ev = comdat any

$_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED0Ev = comdat any

$_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE = comdat any

@_ZTVN8autofill14AutofillChangeE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::AutofillChange"*)* @_ZN8autofill14AutofillChangeD2Ev to i8*), i8* bitcast (void (%"class.autofill::AutofillChange"*)* @_ZN8autofill14AutofillChangeD0Ev to i8*)] }, align 8
@_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::GenericAutofillChange"*)* @_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED2Ev to i8*), i8* bitcast (void (%"class.autofill::GenericAutofillChange"*)* @_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED0Ev to i8*)] }, comdat, align 8

@_ZN8autofill14AutofillChangeC1ENS_21GenericAutofillChangeINS_11AutofillKeyEE4TypeERKS2_ = hidden unnamed_addr alias void (%"class.autofill::AutofillChange"*, i32, %"class.autofill::AutofillKey"*), void (%"class.autofill::AutofillChange"*, i32, %"class.autofill::AutofillKey"*)* @_ZN8autofill14AutofillChangeC2ENS_21GenericAutofillChangeINS_11AutofillKeyEE4TypeERKS2_
@_ZN8autofill14AutofillChangeD1Ev = hidden unnamed_addr alias void (%"class.autofill::AutofillChange"*), void (%"class.autofill::AutofillChange"*)* @_ZN8autofill14AutofillChangeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill14AutofillChangeC2ENS_21GenericAutofillChangeINS_11AutofillKeyEE4TypeERKS2_(%"class.autofill::AutofillChange"*, i32, %"class.autofill::AutofillKey"* dereferenceable(56)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 1
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 2
  tail call void @_ZN8autofill11AutofillKeyC1ERKS0_(%"class.autofill::AutofillKey"* %6, %"class.autofill::AutofillKey"* dereferenceable(56) %2) #4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill14AutofillChangeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill14AutofillChangeD2Ev(%"class.autofill::AutofillChange"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 2
  tail call void @_ZN8autofill11AutofillKeyD1Ev(%"class.autofill::AutofillKey"* %3) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill14AutofillChangeD0Ev(%"class.autofill::AutofillChange"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::AutofillChange", %"class.autofill::AutofillChange"* %0, i64 0, i32 0, i32 2
  tail call void @_ZN8autofill11AutofillKeyD1Ev(%"class.autofill::AutofillKey"* %3) #4
  %4 = bitcast %"class.autofill::AutofillChange"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

declare void @_ZN8autofill11AutofillKeyC1ERKS0_(%"class.autofill::AutofillKey"*, %"class.autofill::AutofillKey"* dereferenceable(56)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED2Ev(%"class.autofill::GenericAutofillChange"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.autofill::GenericAutofillChange", %"class.autofill::GenericAutofillChange"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::GenericAutofillChange", %"class.autofill::GenericAutofillChange"* %0, i64 0, i32 2
  tail call void @_ZN8autofill11AutofillKeyD1Ev(%"class.autofill::AutofillKey"* %3) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill21GenericAutofillChangeINS_11AutofillKeyEED0Ev(%"class.autofill::GenericAutofillChange"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.autofill::GenericAutofillChange", %"class.autofill::GenericAutofillChange"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8autofill21GenericAutofillChangeINS_11AutofillKeyEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::GenericAutofillChange", %"class.autofill::GenericAutofillChange"* %0, i64 0, i32 2
  tail call void @_ZN8autofill11AutofillKeyD1Ev(%"class.autofill::AutofillKey"* %3) #4
  %4 = bitcast %"class.autofill::GenericAutofillChange"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8autofill11AutofillKeyD1Ev(%"class.autofill::AutofillKey"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
