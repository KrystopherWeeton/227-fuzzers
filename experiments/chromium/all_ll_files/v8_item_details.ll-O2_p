; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_item_details.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_item_details.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.76", i32, [4 x i8], %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.240", %"class.std::__1::unique_ptr.246", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.253", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.192", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.112" = type { %"struct.std::__1::__atomic_base.113" }
%"struct.std::__1::__atomic_base.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__cxx_atomic_impl.115" }
%"struct.std::__1::__cxx_atomic_impl.115" = type { %"struct.std::__1::__cxx_atomic_base_impl.116" }
%"struct.std::__1::__cxx_atomic_base_impl.116" = type { i64 }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist.158"* }
%"class.blink::Worklist.158" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::Worklist.165"* }
%"class.blink::Worklist.165" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.172", %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.186", [4 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174", %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { i64 }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { float }
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.195", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.204" }
%"class.WTF::Vector.204" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.220" }
%"class.WTF::VectorBuffer.220" = type { %"class.WTF::VectorBufferBase.221" }
%"class.WTF::VectorBufferBase.221" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.234" }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.144"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.151"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.286" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.252 }
%class.scoped_refptr.252 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.253" = type { %"struct.std::__1::__atomic_base.254" }
%"struct.std::__1::__atomic_base.254" = type { %"struct.std::__1::__cxx_atomic_impl.255" }
%"struct.std::__1::__cxx_atomic_impl.255" = type { %"struct.std::__1::__cxx_atomic_base_impl.256" }
%"struct.std::__1::__cxx_atomic_base_impl.256" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::ItemDetails" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String", %"class.blink::Member", %"class.WTF::String", %"class.WTF::String", %"class.blink::Member", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::PaymentCurrencyAmount"* }
%"class.blink::PaymentCurrencyAmount" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.23", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.70", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.257", %"class.std::__1::unique_ptr.262", %"class.blink::Persistent.268", %"class.blink::Persistent.272", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.7", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", i32, i32 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.23" = type { %"class.WTF::HashTable.24" }
%"class.WTF::HashTable.24" = type <{ %"struct.WTF::KeyValuePair.27"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.27" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.36", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.31", i8* }
%"class.WTF::HashMap.31" = type { %"class.WTF::HashTable.32" }
%"class.WTF::HashTable.32" = type <{ %"struct.WTF::KeyValuePair.35"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.35" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.36" = type { %"class.v8::PersistentValueMapBase.37" }
%"class.v8::PersistentValueMapBase.37" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.38", i8* }
%"class.WTF::HashMap.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair.42"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.42" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.43" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.54", %"class.WTF::Vector.60", i8, i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.293, %"class.blink::Member.312", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.293 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.294", i32, i32, %"class.blink::Persistent.296" }
%"class.WTF::RefCounted.294" = type { %"class.base::RefCounted.295" }
%"class.base::RefCounted.295" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.296" = type { %"class.blink::PersistentBase.297" }
%"class.blink::PersistentBase.297" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.302" }
%"class.WTF::HashMap.302" = type { %"class.WTF::HashTable.303" }
%"class.WTF::HashTable.303" = type <{ %"struct.WTF::KeyValuePair.305"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.305" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.309" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.306" }
%"class.blink::MemberBase.306" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.309" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.309" = type { %"class.v8::TracedReference.310" }
%"class.v8::TracedReference.310" = type { %"class.v8::BasicTracedReference.311" }
%"class.v8::BasicTracedReference.311" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.257" = type { %"class.WTF::VectorBuffer.258" }
%"class.WTF::VectorBuffer.258" = type { %"class.WTF::VectorBufferBase.259" }
%"class.WTF::VectorBufferBase.259" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.268" = type { %"class.blink::PersistentBase.269" }
%"class.blink::PersistentBase.269" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.272" = type { %"class.blink::PersistentBase.273" }
%"class.blink::PersistentBase.273" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.278" }
%"class.WTF::Vector.278" = type { %"class.WTF::VectorBuffer.279" }
%"class.WTF::VectorBuffer.279" = type { %"class.WTF::VectorBufferBase.280" }
%"class.WTF::VectorBufferBase.280" = type { %"struct.std::__1::pair.281"*, i32, i32 }
%"struct.std::__1::pair.281" = type { %"class.blink::UntracedMember", %"class.blink::Member.283" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.283" = type { %"class.blink::MemberBase.284" }
%"class.blink::MemberBase.284" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.314" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.336" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.v8::Int32" = type { i8 }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [50 x i8] c"Missing required member(s): itemId, price, title.\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"required member itemId is undefined.\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"required member price is undefined.\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"required member title is undefined.\00", align 1
@_ZZN5blinkL24eternalV8ItemDetailsKeysEPN2v87IsolateEE5kKeys = internal constant [8 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [12 x i8] c"description\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"freeTrialPeriod\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"introductoryPrice\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"introductoryPricePeriod\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"itemId\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"price\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"subscriptionPeriod\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 8, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @_ZZN5blinkL24eternalV8ItemDetailsKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.15 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13V8ItemDetails6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_11ItemDetailsERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ItemDetails"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = icmp eq %"class.v8::Value"* %1, null
  br i1 %12, label %34, label %13

13:                                               ; preds = %4
  %14 = bitcast %"class.v8::Value"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 3
  %17 = icmp eq i64 %16, 1
  br i1 %17, label %18, label %35

18:                                               ; preds = %13
  %19 = add i64 %15, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i64 %15, -4294967296
  %23 = zext i32 %21 to i64
  %24 = or i64 %22, %23
  %25 = add i64 %24, 7
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26, align 2
  %28 = icmp eq i16 %27, 67
  br i1 %28, label %29, label %35

29:                                               ; preds = %18
  %30 = add i64 %15, 23
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = ashr i32 %32, 1
  switch i32 %33, label %35 [
    i32 5, label %34
    i32 3, label %34
  ]

34:                                               ; preds = %29, %29, %4
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0)) #7
  br label %1172

35:                                               ; preds = %29, %18, %13
  %36 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %1172

38:                                               ; preds = %35
  %39 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %40 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %41 to %"class.blink::V8PerIsolateData"**
  %43 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %42, align 8
  %44 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %43, i8* bitcast ([8 x i8*]* @_ZZN5blinkL24eternalV8ItemDetailsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.314"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.314"*)) #7
  %45 = extractvalue { i64, %"class.v8::Eternal"* } %44, 1
  %46 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %46) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %47 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %48 = bitcast %"class.v8::Eternal"* %45 to %"class.v8::Value"**
  %49 = load %"class.v8::Value"*, %"class.v8::Value"** %48, align 8
  %50 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %49) #7
  %51 = icmp eq %"class.v8::Value"* %50, null
  br i1 %51, label %52, label %58

52:                                               ; preds = %38
  %53 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %54 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %55 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %55, i64 5
  %57 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %56, align 8
  call void %57(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %53) #7
  br label %1171

58:                                               ; preds = %38
  %59 = bitcast %"class.v8::Value"* %50 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 3
  %62 = icmp eq i64 %61, 1
  br i1 %62, label %63, label %80

63:                                               ; preds = %58
  %64 = add i64 %60, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = and i64 %60, -4294967296
  %68 = zext i32 %66 to i64
  %69 = or i64 %67, %68
  %70 = add i64 %69, 7
  %71 = inttoptr i64 %70 to i16*
  %72 = load i16, i16* %71, align 2
  %73 = icmp eq i16 %72, 67
  br i1 %73, label %74, label %80

74:                                               ; preds = %63
  %75 = add i64 %60, 23
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, -2
  %79 = icmp eq i32 %78, 10
  br i1 %79, label %220, label %80

80:                                               ; preds = %63, %58, %74
  %81 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %81) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 152, i1 false)
  %82 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %50, %"class.v8::Value"** %82, align 8
  %83 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %84, align 8
  %85 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %86 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 0, i64* %86, align 8
  %87 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %87, label %88, label %198

88:                                               ; preds = %80
  %89 = load %"class.v8::Value"*, %"class.v8::Value"** %82, align 8
  %90 = icmp eq %"class.v8::Value"* %89, null
  br i1 %90, label %91, label %115, !prof !2

91:                                               ; preds = %88
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %93 = icmp eq %"class.WTF::StringImpl"* %92, null
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 1
  br label %140

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %113

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i33
  %105 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %104, i33 1) #7
  %106 = extractvalue { i33, i1 } %105, 1
  %107 = extractvalue { i33, i1 } %105, 0
  %108 = icmp slt i33 %107, 0
  %109 = or i1 %106, %108
  br i1 %109, label %110, label %111, !prof !2

110:                                              ; preds = %101
  call void @llvm.trap() #7
  unreachable

111:                                              ; preds = %101
  %112 = trunc i33 %107 to i32
  store i32 %112, i32* %102, align 4
  br label %113

113:                                              ; preds = %96, %111
  %114 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 1
  br label %121

115:                                              ; preds = %88
  %116 = bitcast %"class.v8::Value"* %89 to %"class.v8::String"*
  %117 = load i32, i32* %83, align 8
  %118 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %116, i32 %117) #7
  %119 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 1
  %120 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %120, label %140, label %121

121:                                              ; preds = %113, %115
  %122 = phi %"class.WTF::String"* [ %114, %113 ], [ %119, %115 ]
  %123 = phi %"class.WTF::StringImpl"* [ %92, %113 ], [ %118, %115 ]
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %121
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i33
  %132 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %131, i33 1) #7
  %133 = extractvalue { i33, i1 } %132, 1
  %134 = extractvalue { i33, i1 } %132, 0
  %135 = icmp slt i33 %134, 0
  %136 = or i1 %133, %135
  br i1 %136, label %137, label %138, !prof !2

137:                                              ; preds = %128
  call void @llvm.trap() #7
  unreachable

138:                                              ; preds = %128
  %139 = trunc i33 %134 to i32
  store i32 %139, i32* %129, align 4
  br label %140

140:                                              ; preds = %94, %138, %121, %115
  %141 = phi i1 [ false, %138 ], [ false, %121 ], [ true, %115 ], [ true, %94 ]
  %142 = phi %"class.WTF::String"* [ %122, %138 ], [ %122, %121 ], [ %119, %115 ], [ %95, %94 ]
  %143 = phi %"class.WTF::StringImpl"* [ %123, %138 ], [ %123, %121 ], [ null, %115 ], [ null, %94 ]
  %144 = ptrtoint %"class.WTF::StringImpl"* %143 to i64
  %145 = bitcast %"class.WTF::String"* %142 to i64*
  %146 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %142, i64 0, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  store i64 %144, i64* %145, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %162, label %149

149:                                              ; preds = %140
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  br i1 %153, label %156, label %158

156:                                              ; preds = %149
  %157 = add i32 %155, -1
  store i32 %157, i32* %154, align 4
  br label %158

158:                                              ; preds = %156, %149
  %159 = phi i32 [ %157, %156 ], [ %155, %149 ]
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %147) #7
  br label %162

162:                                              ; preds = %140, %158, %161
  br i1 %141, label %176, label %163

163:                                              ; preds = %162
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  br i1 %167, label %170, label %172

170:                                              ; preds = %163
  %171 = add i32 %169, -1
  store i32 %171, i32* %168, align 4
  br label %172

172:                                              ; preds = %170, %163
  %173 = phi i32 [ %171, %170 ], [ %169, %163 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %143) #7
  br label %176

176:                                              ; preds = %162, %172, %175
  %177 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  store i8* null, i8** %177, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %178) #7
  br label %181

181:                                              ; preds = %180, %176
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %183, label %197, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #7
  br label %197

197:                                              ; preds = %181, %193, %196
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %81) #7
  br label %220

198:                                              ; preds = %80
  %199 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %200 = load i8*, i8** %199, align 8
  store i8* null, i8** %199, align 8
  %201 = icmp eq i8* %200, null
  br i1 %201, label %203, label %202

202:                                              ; preds = %198
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %200) #7
  br label %203

203:                                              ; preds = %202, %198
  %204 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %205 = icmp eq %"class.WTF::StringImpl"* %204, null
  br i1 %205, label %219, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load atomic i32, i32* %207 monotonic, align 4
  %209 = and i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 0
  %212 = load i32, i32* %211, align 4
  br i1 %210, label %213, label %215

213:                                              ; preds = %206
  %214 = add i32 %212, -1
  store i32 %214, i32* %211, align 4
  br label %215

215:                                              ; preds = %213, %206
  %216 = phi i32 [ %214, %213 ], [ %212, %206 ]
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %219

218:                                              ; preds = %215
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %204) #7
  br label %219

219:                                              ; preds = %203, %215, %218
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %81) #7
  br label %1171

220:                                              ; preds = %197, %74
  %221 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 1, i32 0
  %222 = bitcast %"class.v8::Name"** %221 to %"class.v8::Value"**
  %223 = load %"class.v8::Value"*, %"class.v8::Value"** %222, align 8
  %224 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %223) #7
  %225 = icmp eq %"class.v8::Value"* %224, null
  br i1 %225, label %226, label %232

226:                                              ; preds = %220
  %227 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %228 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %229 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %228, align 8
  %230 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %229, i64 5
  %231 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %230, align 8
  call void %231(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %227) #7
  br label %1171

232:                                              ; preds = %220
  %233 = bitcast %"class.v8::Value"* %224 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = and i64 %234, 3
  %236 = icmp eq i64 %235, 1
  br i1 %236, label %237, label %254

237:                                              ; preds = %232
  %238 = add i64 %234, -1
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239, align 4
  %241 = and i64 %234, -4294967296
  %242 = zext i32 %240 to i64
  %243 = or i64 %241, %242
  %244 = add i64 %243, 7
  %245 = inttoptr i64 %244 to i16*
  %246 = load i16, i16* %245, align 2
  %247 = icmp eq i16 %246, 67
  br i1 %247, label %248, label %254

248:                                              ; preds = %237
  %249 = add i64 %234, 23
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = and i32 %251, -2
  %253 = icmp eq i32 %252, 10
  br i1 %253, label %394, label %254

254:                                              ; preds = %237, %232, %248
  %255 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %255) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %255, i8 -86, i64 152, i1 false)
  %256 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %224, %"class.v8::Value"** %256, align 8
  %257 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %257, align 8
  %258 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %258, align 8
  %259 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %260 = bitcast %"class.std::__1::unique_ptr"* %259 to i64*
  store i64 0, i64* %260, align 8
  %261 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %261, label %262, label %372

262:                                              ; preds = %254
  %263 = load %"class.v8::Value"*, %"class.v8::Value"** %256, align 8
  %264 = icmp eq %"class.v8::Value"* %263, null
  br i1 %264, label %265, label %289, !prof !2

265:                                              ; preds = %262
  %266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %258, align 8
  %267 = icmp eq %"class.WTF::StringImpl"* %266, null
  br i1 %267, label %268, label %270

268:                                              ; preds = %265
  %269 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 2
  br label %314

270:                                              ; preds = %265
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %272 = load atomic i32, i32* %271 monotonic, align 4
  %273 = and i32 %272, 2
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %287

275:                                              ; preds = %270
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = zext i32 %277 to i33
  %279 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %278, i33 1) #7
  %280 = extractvalue { i33, i1 } %279, 1
  %281 = extractvalue { i33, i1 } %279, 0
  %282 = icmp slt i33 %281, 0
  %283 = or i1 %280, %282
  br i1 %283, label %284, label %285, !prof !2

284:                                              ; preds = %275
  call void @llvm.trap() #7
  unreachable

285:                                              ; preds = %275
  %286 = trunc i33 %281 to i32
  store i32 %286, i32* %276, align 4
  br label %287

287:                                              ; preds = %270, %285
  %288 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 2
  br label %295

289:                                              ; preds = %262
  %290 = bitcast %"class.v8::Value"* %263 to %"class.v8::String"*
  %291 = load i32, i32* %257, align 8
  %292 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %290, i32 %291) #7
  %293 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 2
  %294 = icmp eq %"class.WTF::StringImpl"* %292, null
  br i1 %294, label %314, label %295

295:                                              ; preds = %287, %289
  %296 = phi %"class.WTF::String"* [ %288, %287 ], [ %293, %289 ]
  %297 = phi %"class.WTF::StringImpl"* [ %266, %287 ], [ %292, %289 ]
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %299 = load atomic i32, i32* %298 monotonic, align 4
  %300 = and i32 %299, 2
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %314

302:                                              ; preds = %295
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 0
  %304 = load i32, i32* %303, align 4
  %305 = zext i32 %304 to i33
  %306 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %305, i33 1) #7
  %307 = extractvalue { i33, i1 } %306, 1
  %308 = extractvalue { i33, i1 } %306, 0
  %309 = icmp slt i33 %308, 0
  %310 = or i1 %307, %309
  br i1 %310, label %311, label %312, !prof !2

311:                                              ; preds = %302
  call void @llvm.trap() #7
  unreachable

312:                                              ; preds = %302
  %313 = trunc i33 %308 to i32
  store i32 %313, i32* %303, align 4
  br label %314

314:                                              ; preds = %268, %312, %295, %289
  %315 = phi i1 [ false, %312 ], [ false, %295 ], [ true, %289 ], [ true, %268 ]
  %316 = phi %"class.WTF::String"* [ %296, %312 ], [ %296, %295 ], [ %293, %289 ], [ %269, %268 ]
  %317 = phi %"class.WTF::StringImpl"* [ %297, %312 ], [ %297, %295 ], [ null, %289 ], [ null, %268 ]
  %318 = ptrtoint %"class.WTF::StringImpl"* %317 to i64
  %319 = bitcast %"class.WTF::String"* %316 to i64*
  %320 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %316, i64 0, i32 0, i32 0
  %321 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %320, align 8
  store i64 %318, i64* %319, align 8
  %322 = icmp eq %"class.WTF::StringImpl"* %321, null
  br i1 %322, label %336, label %323

323:                                              ; preds = %314
  %324 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %325 = load atomic i32, i32* %324 monotonic, align 4
  %326 = and i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 0
  %329 = load i32, i32* %328, align 4
  br i1 %327, label %330, label %332

330:                                              ; preds = %323
  %331 = add i32 %329, -1
  store i32 %331, i32* %328, align 4
  br label %332

332:                                              ; preds = %330, %323
  %333 = phi i32 [ %331, %330 ], [ %329, %323 ]
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %336

335:                                              ; preds = %332
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %321) #7
  br label %336

336:                                              ; preds = %314, %332, %335
  br i1 %315, label %350, label %337

337:                                              ; preds = %336
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %339 = load atomic i32, i32* %338 monotonic, align 4
  %340 = and i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 0
  %343 = load i32, i32* %342, align 4
  br i1 %341, label %344, label %346

344:                                              ; preds = %337
  %345 = add i32 %343, -1
  store i32 %345, i32* %342, align 4
  br label %346

346:                                              ; preds = %344, %337
  %347 = phi i32 [ %345, %344 ], [ %343, %337 ]
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %350

349:                                              ; preds = %346
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %317) #7
  br label %350

350:                                              ; preds = %336, %346, %349
  %351 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %352 = load i8*, i8** %351, align 8
  store i8* null, i8** %351, align 8
  %353 = icmp eq i8* %352, null
  br i1 %353, label %355, label %354

354:                                              ; preds = %350
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %352) #7
  br label %355

355:                                              ; preds = %354, %350
  %356 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %258, align 8
  %357 = icmp eq %"class.WTF::StringImpl"* %356, null
  br i1 %357, label %371, label %358

358:                                              ; preds = %355
  %359 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %360 = load atomic i32, i32* %359 monotonic, align 4
  %361 = and i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 0, i32 0
  %364 = load i32, i32* %363, align 4
  br i1 %362, label %365, label %367

365:                                              ; preds = %358
  %366 = add i32 %364, -1
  store i32 %366, i32* %363, align 4
  br label %367

367:                                              ; preds = %365, %358
  %368 = phi i32 [ %366, %365 ], [ %364, %358 ]
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %367
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %356) #7
  br label %371

371:                                              ; preds = %355, %367, %370
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %255) #7
  br label %394

372:                                              ; preds = %254
  %373 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %374 = load i8*, i8** %373, align 8
  store i8* null, i8** %373, align 8
  %375 = icmp eq i8* %374, null
  br i1 %375, label %377, label %376

376:                                              ; preds = %372
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %374) #7
  br label %377

377:                                              ; preds = %376, %372
  %378 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %258, align 8
  %379 = icmp eq %"class.WTF::StringImpl"* %378, null
  br i1 %379, label %393, label %380

380:                                              ; preds = %377
  %381 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %378, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %382 = load atomic i32, i32* %381 monotonic, align 4
  %383 = and i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %378, i64 0, i32 0
  %386 = load i32, i32* %385, align 4
  br i1 %384, label %387, label %389

387:                                              ; preds = %380
  %388 = add i32 %386, -1
  store i32 %388, i32* %385, align 4
  br label %389

389:                                              ; preds = %387, %380
  %390 = phi i32 [ %388, %387 ], [ %386, %380 ]
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %393

392:                                              ; preds = %389
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %378) #7
  br label %393

393:                                              ; preds = %377, %389, %392
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %255) #7
  br label %1171

394:                                              ; preds = %371, %248
  %395 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 2, i32 0
  %396 = bitcast %"class.v8::Name"** %395 to %"class.v8::Value"**
  %397 = load %"class.v8::Value"*, %"class.v8::Value"** %396, align 8
  %398 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %397) #7
  %399 = icmp eq %"class.v8::Value"* %398, null
  br i1 %399, label %400, label %406

400:                                              ; preds = %394
  %401 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %402 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %403 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %402, align 8
  %404 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %403, i64 5
  %405 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %404, align 8
  call void %405(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %401) #7
  br label %1171

406:                                              ; preds = %394
  %407 = bitcast %"class.v8::Value"* %398 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = and i64 %408, 3
  %410 = icmp eq i64 %409, 1
  br i1 %410, label %411, label %428

411:                                              ; preds = %406
  %412 = add i64 %408, -1
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = and i64 %408, -4294967296
  %416 = zext i32 %414 to i64
  %417 = or i64 %415, %416
  %418 = add i64 %417, 7
  %419 = inttoptr i64 %418 to i16*
  %420 = load i16, i16* %419, align 2
  %421 = icmp eq i16 %420, 67
  br i1 %421, label %422, label %428

422:                                              ; preds = %411
  %423 = add i64 %408, 23
  %424 = inttoptr i64 %423 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = and i32 %425, -2
  %427 = icmp eq i32 %426, 10
  br i1 %427, label %434, label %428

428:                                              ; preds = %411, %406, %422
  %429 = call %"class.blink::PaymentCurrencyAmount"* @_ZN5blink17NativeValueTraitsINS_21PaymentCurrencyAmountEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %398, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %430 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %431 = load i32, i32* %430, align 8
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %433, label %1171

433:                                              ; preds = %428
  call void @_ZN5blink11ItemDetails20setIntroductoryPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"* %2, %"class.blink::PaymentCurrencyAmount"* %429) #7
  br label %434

434:                                              ; preds = %433, %422
  %435 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 3, i32 0
  %436 = bitcast %"class.v8::Name"** %435 to %"class.v8::Value"**
  %437 = load %"class.v8::Value"*, %"class.v8::Value"** %436, align 8
  %438 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %437) #7
  %439 = icmp eq %"class.v8::Value"* %438, null
  br i1 %439, label %440, label %446

440:                                              ; preds = %434
  %441 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %442 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %443 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %442, align 8
  %444 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %443, i64 5
  %445 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %444, align 8
  call void %445(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %441) #7
  br label %1171

446:                                              ; preds = %434
  %447 = bitcast %"class.v8::Value"* %438 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = and i64 %448, 3
  %450 = icmp eq i64 %449, 1
  br i1 %450, label %451, label %468

451:                                              ; preds = %446
  %452 = add i64 %448, -1
  %453 = inttoptr i64 %452 to i32*
  %454 = load i32, i32* %453, align 4
  %455 = and i64 %448, -4294967296
  %456 = zext i32 %454 to i64
  %457 = or i64 %455, %456
  %458 = add i64 %457, 7
  %459 = inttoptr i64 %458 to i16*
  %460 = load i16, i16* %459, align 2
  %461 = icmp eq i16 %460, 67
  br i1 %461, label %462, label %468

462:                                              ; preds = %451
  %463 = add i64 %448, 23
  %464 = inttoptr i64 %463 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = and i32 %465, -2
  %467 = icmp eq i32 %466, 10
  br i1 %467, label %608, label %468

468:                                              ; preds = %451, %446, %462
  %469 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %469) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %469, i8 -86, i64 152, i1 false)
  %470 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %438, %"class.v8::Value"** %470, align 8
  %471 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %471, align 8
  %472 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %472, align 8
  %473 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %474 = bitcast %"class.std::__1::unique_ptr"* %473 to i64*
  store i64 0, i64* %474, align 8
  %475 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %475, label %476, label %586

476:                                              ; preds = %468
  %477 = load %"class.v8::Value"*, %"class.v8::Value"** %470, align 8
  %478 = icmp eq %"class.v8::Value"* %477, null
  br i1 %478, label %479, label %503, !prof !2

479:                                              ; preds = %476
  %480 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %472, align 8
  %481 = icmp eq %"class.WTF::StringImpl"* %480, null
  br i1 %481, label %482, label %484

482:                                              ; preds = %479
  %483 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 4
  br label %528

484:                                              ; preds = %479
  %485 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %486 = load atomic i32, i32* %485 monotonic, align 4
  %487 = and i32 %486, 2
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %501

489:                                              ; preds = %484
  %490 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 0
  %491 = load i32, i32* %490, align 4
  %492 = zext i32 %491 to i33
  %493 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %492, i33 1) #7
  %494 = extractvalue { i33, i1 } %493, 1
  %495 = extractvalue { i33, i1 } %493, 0
  %496 = icmp slt i33 %495, 0
  %497 = or i1 %494, %496
  br i1 %497, label %498, label %499, !prof !2

498:                                              ; preds = %489
  call void @llvm.trap() #7
  unreachable

499:                                              ; preds = %489
  %500 = trunc i33 %495 to i32
  store i32 %500, i32* %490, align 4
  br label %501

501:                                              ; preds = %484, %499
  %502 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 4
  br label %509

503:                                              ; preds = %476
  %504 = bitcast %"class.v8::Value"* %477 to %"class.v8::String"*
  %505 = load i32, i32* %471, align 8
  %506 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %504, i32 %505) #7
  %507 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 4
  %508 = icmp eq %"class.WTF::StringImpl"* %506, null
  br i1 %508, label %528, label %509

509:                                              ; preds = %501, %503
  %510 = phi %"class.WTF::String"* [ %502, %501 ], [ %507, %503 ]
  %511 = phi %"class.WTF::StringImpl"* [ %480, %501 ], [ %506, %503 ]
  %512 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %513 = load atomic i32, i32* %512 monotonic, align 4
  %514 = and i32 %513, 2
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %516, label %528

516:                                              ; preds = %509
  %517 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 0
  %518 = load i32, i32* %517, align 4
  %519 = zext i32 %518 to i33
  %520 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %519, i33 1) #7
  %521 = extractvalue { i33, i1 } %520, 1
  %522 = extractvalue { i33, i1 } %520, 0
  %523 = icmp slt i33 %522, 0
  %524 = or i1 %521, %523
  br i1 %524, label %525, label %526, !prof !2

525:                                              ; preds = %516
  call void @llvm.trap() #7
  unreachable

526:                                              ; preds = %516
  %527 = trunc i33 %522 to i32
  store i32 %527, i32* %517, align 4
  br label %528

528:                                              ; preds = %482, %526, %509, %503
  %529 = phi i1 [ false, %526 ], [ false, %509 ], [ true, %503 ], [ true, %482 ]
  %530 = phi %"class.WTF::String"* [ %510, %526 ], [ %510, %509 ], [ %507, %503 ], [ %483, %482 ]
  %531 = phi %"class.WTF::StringImpl"* [ %511, %526 ], [ %511, %509 ], [ null, %503 ], [ null, %482 ]
  %532 = ptrtoint %"class.WTF::StringImpl"* %531 to i64
  %533 = bitcast %"class.WTF::String"* %530 to i64*
  %534 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %530, i64 0, i32 0, i32 0
  %535 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %534, align 8
  store i64 %532, i64* %533, align 8
  %536 = icmp eq %"class.WTF::StringImpl"* %535, null
  br i1 %536, label %550, label %537

537:                                              ; preds = %528
  %538 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %535, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %539 = load atomic i32, i32* %538 monotonic, align 4
  %540 = and i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %535, i64 0, i32 0
  %543 = load i32, i32* %542, align 4
  br i1 %541, label %544, label %546

544:                                              ; preds = %537
  %545 = add i32 %543, -1
  store i32 %545, i32* %542, align 4
  br label %546

546:                                              ; preds = %544, %537
  %547 = phi i32 [ %545, %544 ], [ %543, %537 ]
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %549, label %550

549:                                              ; preds = %546
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %535) #7
  br label %550

550:                                              ; preds = %528, %546, %549
  br i1 %529, label %564, label %551

551:                                              ; preds = %550
  %552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %531, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %553 = load atomic i32, i32* %552 monotonic, align 4
  %554 = and i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %531, i64 0, i32 0
  %557 = load i32, i32* %556, align 4
  br i1 %555, label %558, label %560

558:                                              ; preds = %551
  %559 = add i32 %557, -1
  store i32 %559, i32* %556, align 4
  br label %560

560:                                              ; preds = %558, %551
  %561 = phi i32 [ %559, %558 ], [ %557, %551 ]
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %563, label %564

563:                                              ; preds = %560
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %531) #7
  br label %564

564:                                              ; preds = %550, %560, %563
  %565 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %566 = load i8*, i8** %565, align 8
  store i8* null, i8** %565, align 8
  %567 = icmp eq i8* %566, null
  br i1 %567, label %569, label %568

568:                                              ; preds = %564
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %566) #7
  br label %569

569:                                              ; preds = %568, %564
  %570 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %472, align 8
  %571 = icmp eq %"class.WTF::StringImpl"* %570, null
  br i1 %571, label %585, label %572

572:                                              ; preds = %569
  %573 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %570, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %574 = load atomic i32, i32* %573 monotonic, align 4
  %575 = and i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %570, i64 0, i32 0
  %578 = load i32, i32* %577, align 4
  br i1 %576, label %579, label %581

579:                                              ; preds = %572
  %580 = add i32 %578, -1
  store i32 %580, i32* %577, align 4
  br label %581

581:                                              ; preds = %579, %572
  %582 = phi i32 [ %580, %579 ], [ %578, %572 ]
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %584, label %585

584:                                              ; preds = %581
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %570) #7
  br label %585

585:                                              ; preds = %569, %581, %584
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %469) #7
  br label %608

586:                                              ; preds = %468
  %587 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %588 = load i8*, i8** %587, align 8
  store i8* null, i8** %587, align 8
  %589 = icmp eq i8* %588, null
  br i1 %589, label %591, label %590

590:                                              ; preds = %586
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %588) #7
  br label %591

591:                                              ; preds = %590, %586
  %592 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %472, align 8
  %593 = icmp eq %"class.WTF::StringImpl"* %592, null
  br i1 %593, label %607, label %594

594:                                              ; preds = %591
  %595 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %592, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %596 = load atomic i32, i32* %595 monotonic, align 4
  %597 = and i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %592, i64 0, i32 0
  %600 = load i32, i32* %599, align 4
  br i1 %598, label %601, label %603

601:                                              ; preds = %594
  %602 = add i32 %600, -1
  store i32 %602, i32* %599, align 4
  br label %603

603:                                              ; preds = %601, %594
  %604 = phi i32 [ %602, %601 ], [ %600, %594 ]
  %605 = icmp eq i32 %604, 0
  br i1 %605, label %606, label %607

606:                                              ; preds = %603
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %592) #7
  br label %607

607:                                              ; preds = %591, %603, %606
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %469) #7
  br label %1171

608:                                              ; preds = %585, %462
  %609 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 4, i32 0
  %610 = bitcast %"class.v8::Name"** %609 to %"class.v8::Value"**
  %611 = load %"class.v8::Value"*, %"class.v8::Value"** %610, align 8
  %612 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %611) #7
  %613 = icmp eq %"class.v8::Value"* %612, null
  br i1 %613, label %614, label %620

614:                                              ; preds = %608
  %615 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %616 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %617 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %616, align 8
  %618 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %617, i64 5
  %619 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %618, align 8
  call void %619(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %615) #7
  br label %1171

620:                                              ; preds = %608
  %621 = bitcast %"class.v8::Value"* %612 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = and i64 %622, 3
  %624 = icmp eq i64 %623, 1
  br i1 %624, label %625, label %643

625:                                              ; preds = %620
  %626 = add i64 %622, -1
  %627 = inttoptr i64 %626 to i32*
  %628 = load i32, i32* %627, align 4
  %629 = and i64 %622, -4294967296
  %630 = zext i32 %628 to i64
  %631 = or i64 %629, %630
  %632 = add i64 %631, 7
  %633 = inttoptr i64 %632 to i16*
  %634 = load i16, i16* %633, align 2
  %635 = icmp eq i16 %634, 67
  br i1 %635, label %636, label %643

636:                                              ; preds = %625
  %637 = add i64 %622, 23
  %638 = inttoptr i64 %637 to i32*
  %639 = load i32, i32* %638, align 4
  %640 = and i32 %639, -2
  %641 = icmp eq i32 %640, 10
  br i1 %641, label %642, label %643

642:                                              ; preds = %636
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %1171

643:                                              ; preds = %625, %620, %636
  %644 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %644) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %644, i8 -86, i64 152, i1 false)
  %645 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %612, %"class.v8::Value"** %645, align 8
  %646 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %646, align 8
  %647 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %647, align 8
  %648 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %649 = bitcast %"class.std::__1::unique_ptr"* %648 to i64*
  store i64 0, i64* %649, align 8
  %650 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %650, label %651, label %766

651:                                              ; preds = %643
  %652 = load %"class.v8::Value"*, %"class.v8::Value"** %645, align 8
  %653 = icmp eq %"class.v8::Value"* %652, null
  br i1 %653, label %654, label %678, !prof !2

654:                                              ; preds = %651
  %655 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %647, align 8
  %656 = icmp eq %"class.WTF::StringImpl"* %655, null
  br i1 %656, label %657, label %659

657:                                              ; preds = %654
  %658 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 5
  br label %703

659:                                              ; preds = %654
  %660 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %661 = load atomic i32, i32* %660 monotonic, align 4
  %662 = and i32 %661, 2
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %664, label %676

664:                                              ; preds = %659
  %665 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 0
  %666 = load i32, i32* %665, align 4
  %667 = zext i32 %666 to i33
  %668 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %667, i33 1) #7
  %669 = extractvalue { i33, i1 } %668, 1
  %670 = extractvalue { i33, i1 } %668, 0
  %671 = icmp slt i33 %670, 0
  %672 = or i1 %669, %671
  br i1 %672, label %673, label %674, !prof !2

673:                                              ; preds = %664
  call void @llvm.trap() #7
  unreachable

674:                                              ; preds = %664
  %675 = trunc i33 %670 to i32
  store i32 %675, i32* %665, align 4
  br label %676

676:                                              ; preds = %659, %674
  %677 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 5
  br label %684

678:                                              ; preds = %651
  %679 = bitcast %"class.v8::Value"* %652 to %"class.v8::String"*
  %680 = load i32, i32* %646, align 8
  %681 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %679, i32 %680) #7
  %682 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 5
  %683 = icmp eq %"class.WTF::StringImpl"* %681, null
  br i1 %683, label %703, label %684

684:                                              ; preds = %676, %678
  %685 = phi %"class.WTF::String"* [ %677, %676 ], [ %682, %678 ]
  %686 = phi %"class.WTF::StringImpl"* [ %655, %676 ], [ %681, %678 ]
  %687 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %686, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %688 = load atomic i32, i32* %687 monotonic, align 4
  %689 = and i32 %688, 2
  %690 = icmp eq i32 %689, 0
  br i1 %690, label %691, label %703

691:                                              ; preds = %684
  %692 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %686, i64 0, i32 0
  %693 = load i32, i32* %692, align 4
  %694 = zext i32 %693 to i33
  %695 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %694, i33 1) #7
  %696 = extractvalue { i33, i1 } %695, 1
  %697 = extractvalue { i33, i1 } %695, 0
  %698 = icmp slt i33 %697, 0
  %699 = or i1 %696, %698
  br i1 %699, label %700, label %701, !prof !2

700:                                              ; preds = %691
  call void @llvm.trap() #7
  unreachable

701:                                              ; preds = %691
  %702 = trunc i33 %697 to i32
  store i32 %702, i32* %692, align 4
  br label %703

703:                                              ; preds = %657, %701, %684, %678
  %704 = phi i1 [ false, %701 ], [ false, %684 ], [ true, %678 ], [ true, %657 ]
  %705 = phi %"class.WTF::String"* [ %685, %701 ], [ %685, %684 ], [ %682, %678 ], [ %658, %657 ]
  %706 = phi %"class.WTF::StringImpl"* [ %686, %701 ], [ %686, %684 ], [ null, %678 ], [ null, %657 ]
  %707 = ptrtoint %"class.WTF::StringImpl"* %706 to i64
  %708 = bitcast %"class.WTF::String"* %705 to i64*
  %709 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %705, i64 0, i32 0, i32 0
  %710 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %709, align 8
  store i64 %707, i64* %708, align 8
  %711 = icmp eq %"class.WTF::StringImpl"* %710, null
  br i1 %711, label %725, label %712

712:                                              ; preds = %703
  %713 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %714 = load atomic i32, i32* %713 monotonic, align 4
  %715 = and i32 %714, 2
  %716 = icmp eq i32 %715, 0
  %717 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 0
  %718 = load i32, i32* %717, align 4
  br i1 %716, label %719, label %721

719:                                              ; preds = %712
  %720 = add i32 %718, -1
  store i32 %720, i32* %717, align 4
  br label %721

721:                                              ; preds = %719, %712
  %722 = phi i32 [ %720, %719 ], [ %718, %712 ]
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %724, label %725

724:                                              ; preds = %721
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %710) #7
  br label %725

725:                                              ; preds = %703, %721, %724
  br i1 %704, label %739, label %726

726:                                              ; preds = %725
  %727 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %706, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %728 = load atomic i32, i32* %727 monotonic, align 4
  %729 = and i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %706, i64 0, i32 0
  %732 = load i32, i32* %731, align 4
  br i1 %730, label %733, label %735

733:                                              ; preds = %726
  %734 = add i32 %732, -1
  store i32 %734, i32* %731, align 4
  br label %735

735:                                              ; preds = %733, %726
  %736 = phi i32 [ %734, %733 ], [ %732, %726 ]
  %737 = icmp eq i32 %736, 0
  br i1 %737, label %738, label %739

738:                                              ; preds = %735
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %706) #7
  br label %739

739:                                              ; preds = %725, %735, %738
  %740 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %741 = load i8*, i8** %740, align 8
  store i8* null, i8** %740, align 8
  %742 = icmp eq i8* %741, null
  br i1 %742, label %744, label %743

743:                                              ; preds = %739
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %741) #7
  br label %744

744:                                              ; preds = %743, %739
  %745 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %647, align 8
  %746 = icmp eq %"class.WTF::StringImpl"* %745, null
  br i1 %746, label %760, label %747

747:                                              ; preds = %744
  %748 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %745, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %749 = load atomic i32, i32* %748 monotonic, align 4
  %750 = and i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %745, i64 0, i32 0
  %753 = load i32, i32* %752, align 4
  br i1 %751, label %754, label %756

754:                                              ; preds = %747
  %755 = add i32 %753, -1
  store i32 %755, i32* %752, align 4
  br label %756

756:                                              ; preds = %754, %747
  %757 = phi i32 [ %755, %754 ], [ %753, %747 ]
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %760

759:                                              ; preds = %756
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %745) #7
  br label %760

760:                                              ; preds = %744, %756, %759
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %644) #7
  %761 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 5, i32 0
  %762 = bitcast %"class.v8::Name"** %761 to %"class.v8::Value"**
  %763 = load %"class.v8::Value"*, %"class.v8::Value"** %762, align 8
  %764 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %763) #7
  %765 = icmp eq %"class.v8::Value"* %764, null
  br i1 %765, label %788, label %794

766:                                              ; preds = %643
  %767 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %768 = load i8*, i8** %767, align 8
  store i8* null, i8** %767, align 8
  %769 = icmp eq i8* %768, null
  br i1 %769, label %771, label %770

770:                                              ; preds = %766
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %768) #7
  br label %771

771:                                              ; preds = %770, %766
  %772 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %647, align 8
  %773 = icmp eq %"class.WTF::StringImpl"* %772, null
  br i1 %773, label %787, label %774

774:                                              ; preds = %771
  %775 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %772, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %776 = load atomic i32, i32* %775 monotonic, align 4
  %777 = and i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %772, i64 0, i32 0
  %780 = load i32, i32* %779, align 4
  br i1 %778, label %781, label %783

781:                                              ; preds = %774
  %782 = add i32 %780, -1
  store i32 %782, i32* %779, align 4
  br label %783

783:                                              ; preds = %781, %774
  %784 = phi i32 [ %782, %781 ], [ %780, %774 ]
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %786, label %787

786:                                              ; preds = %783
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %772) #7
  br label %787

787:                                              ; preds = %771, %783, %786
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %644) #7
  br label %1171

788:                                              ; preds = %760
  %789 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %790 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %791 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %790, align 8
  %792 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %791, i64 5
  %793 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %792, align 8
  call void %793(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %789) #7
  br label %1171

794:                                              ; preds = %760
  %795 = bitcast %"class.v8::Value"* %764 to i64*
  %796 = load i64, i64* %795, align 8
  %797 = and i64 %796, 3
  %798 = icmp eq i64 %797, 1
  br i1 %798, label %799, label %817

799:                                              ; preds = %794
  %800 = add i64 %796, -1
  %801 = inttoptr i64 %800 to i32*
  %802 = load i32, i32* %801, align 4
  %803 = and i64 %796, -4294967296
  %804 = zext i32 %802 to i64
  %805 = or i64 %803, %804
  %806 = add i64 %805, 7
  %807 = inttoptr i64 %806 to i16*
  %808 = load i16, i16* %807, align 2
  %809 = icmp eq i16 %808, 67
  br i1 %809, label %810, label %817

810:                                              ; preds = %799
  %811 = add i64 %796, 23
  %812 = inttoptr i64 %811 to i32*
  %813 = load i32, i32* %812, align 4
  %814 = and i32 %813, -2
  %815 = icmp eq i32 %814, 10
  br i1 %815, label %816, label %817

816:                                              ; preds = %810
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %1171

817:                                              ; preds = %799, %794, %810
  %818 = call %"class.blink::PaymentCurrencyAmount"* @_ZN5blink17NativeValueTraitsINS_21PaymentCurrencyAmountEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %764, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %819 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %820 = load i32, i32* %819, align 8
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %1171

822:                                              ; preds = %817
  call void @_ZN5blink11ItemDetails8setPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"* %2, %"class.blink::PaymentCurrencyAmount"* %818) #7
  %823 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 6, i32 0
  %824 = bitcast %"class.v8::Name"** %823 to %"class.v8::Value"**
  %825 = load %"class.v8::Value"*, %"class.v8::Value"** %824, align 8
  %826 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %825) #7
  %827 = icmp eq %"class.v8::Value"* %826, null
  br i1 %827, label %828, label %834

828:                                              ; preds = %822
  %829 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %830 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %831 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %830, align 8
  %832 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %831, i64 5
  %833 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %832, align 8
  call void %833(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %829) #7
  br label %1171

834:                                              ; preds = %822
  %835 = bitcast %"class.v8::Value"* %826 to i64*
  %836 = load i64, i64* %835, align 8
  %837 = and i64 %836, 3
  %838 = icmp eq i64 %837, 1
  br i1 %838, label %839, label %856

839:                                              ; preds = %834
  %840 = add i64 %836, -1
  %841 = inttoptr i64 %840 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = and i64 %836, -4294967296
  %844 = zext i32 %842 to i64
  %845 = or i64 %843, %844
  %846 = add i64 %845, 7
  %847 = inttoptr i64 %846 to i16*
  %848 = load i16, i16* %847, align 2
  %849 = icmp eq i16 %848, 67
  br i1 %849, label %850, label %856

850:                                              ; preds = %839
  %851 = add i64 %836, 23
  %852 = inttoptr i64 %851 to i32*
  %853 = load i32, i32* %852, align 4
  %854 = and i32 %853, -2
  %855 = icmp eq i32 %854, 10
  br i1 %855, label %996, label %856

856:                                              ; preds = %839, %834, %850
  %857 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %857) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %857, i8 -86, i64 152, i1 false)
  %858 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %826, %"class.v8::Value"** %858, align 8
  %859 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %859, align 8
  %860 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %860, align 8
  %861 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %862 = bitcast %"class.std::__1::unique_ptr"* %861 to i64*
  store i64 0, i64* %862, align 8
  %863 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %863, label %864, label %974

864:                                              ; preds = %856
  %865 = load %"class.v8::Value"*, %"class.v8::Value"** %858, align 8
  %866 = icmp eq %"class.v8::Value"* %865, null
  br i1 %866, label %867, label %891, !prof !2

867:                                              ; preds = %864
  %868 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %860, align 8
  %869 = icmp eq %"class.WTF::StringImpl"* %868, null
  br i1 %869, label %870, label %872

870:                                              ; preds = %867
  %871 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 7
  br label %916

872:                                              ; preds = %867
  %873 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %868, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %874 = load atomic i32, i32* %873 monotonic, align 4
  %875 = and i32 %874, 2
  %876 = icmp eq i32 %875, 0
  br i1 %876, label %877, label %889

877:                                              ; preds = %872
  %878 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %868, i64 0, i32 0
  %879 = load i32, i32* %878, align 4
  %880 = zext i32 %879 to i33
  %881 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %880, i33 1) #7
  %882 = extractvalue { i33, i1 } %881, 1
  %883 = extractvalue { i33, i1 } %881, 0
  %884 = icmp slt i33 %883, 0
  %885 = or i1 %882, %884
  br i1 %885, label %886, label %887, !prof !2

886:                                              ; preds = %877
  call void @llvm.trap() #7
  unreachable

887:                                              ; preds = %877
  %888 = trunc i33 %883 to i32
  store i32 %888, i32* %878, align 4
  br label %889

889:                                              ; preds = %872, %887
  %890 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 7
  br label %897

891:                                              ; preds = %864
  %892 = bitcast %"class.v8::Value"* %865 to %"class.v8::String"*
  %893 = load i32, i32* %859, align 8
  %894 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %892, i32 %893) #7
  %895 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 7
  %896 = icmp eq %"class.WTF::StringImpl"* %894, null
  br i1 %896, label %916, label %897

897:                                              ; preds = %889, %891
  %898 = phi %"class.WTF::String"* [ %890, %889 ], [ %895, %891 ]
  %899 = phi %"class.WTF::StringImpl"* [ %868, %889 ], [ %894, %891 ]
  %900 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %899, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %901 = load atomic i32, i32* %900 monotonic, align 4
  %902 = and i32 %901, 2
  %903 = icmp eq i32 %902, 0
  br i1 %903, label %904, label %916

904:                                              ; preds = %897
  %905 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %899, i64 0, i32 0
  %906 = load i32, i32* %905, align 4
  %907 = zext i32 %906 to i33
  %908 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %907, i33 1) #7
  %909 = extractvalue { i33, i1 } %908, 1
  %910 = extractvalue { i33, i1 } %908, 0
  %911 = icmp slt i33 %910, 0
  %912 = or i1 %909, %911
  br i1 %912, label %913, label %914, !prof !2

913:                                              ; preds = %904
  call void @llvm.trap() #7
  unreachable

914:                                              ; preds = %904
  %915 = trunc i33 %910 to i32
  store i32 %915, i32* %905, align 4
  br label %916

916:                                              ; preds = %870, %914, %897, %891
  %917 = phi i1 [ false, %914 ], [ false, %897 ], [ true, %891 ], [ true, %870 ]
  %918 = phi %"class.WTF::String"* [ %898, %914 ], [ %898, %897 ], [ %895, %891 ], [ %871, %870 ]
  %919 = phi %"class.WTF::StringImpl"* [ %899, %914 ], [ %899, %897 ], [ null, %891 ], [ null, %870 ]
  %920 = ptrtoint %"class.WTF::StringImpl"* %919 to i64
  %921 = bitcast %"class.WTF::String"* %918 to i64*
  %922 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %918, i64 0, i32 0, i32 0
  %923 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %922, align 8
  store i64 %920, i64* %921, align 8
  %924 = icmp eq %"class.WTF::StringImpl"* %923, null
  br i1 %924, label %938, label %925

925:                                              ; preds = %916
  %926 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %923, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %927 = load atomic i32, i32* %926 monotonic, align 4
  %928 = and i32 %927, 2
  %929 = icmp eq i32 %928, 0
  %930 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %923, i64 0, i32 0
  %931 = load i32, i32* %930, align 4
  br i1 %929, label %932, label %934

932:                                              ; preds = %925
  %933 = add i32 %931, -1
  store i32 %933, i32* %930, align 4
  br label %934

934:                                              ; preds = %932, %925
  %935 = phi i32 [ %933, %932 ], [ %931, %925 ]
  %936 = icmp eq i32 %935, 0
  br i1 %936, label %937, label %938

937:                                              ; preds = %934
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %923) #7
  br label %938

938:                                              ; preds = %916, %934, %937
  br i1 %917, label %952, label %939

939:                                              ; preds = %938
  %940 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %919, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %941 = load atomic i32, i32* %940 monotonic, align 4
  %942 = and i32 %941, 2
  %943 = icmp eq i32 %942, 0
  %944 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %919, i64 0, i32 0
  %945 = load i32, i32* %944, align 4
  br i1 %943, label %946, label %948

946:                                              ; preds = %939
  %947 = add i32 %945, -1
  store i32 %947, i32* %944, align 4
  br label %948

948:                                              ; preds = %946, %939
  %949 = phi i32 [ %947, %946 ], [ %945, %939 ]
  %950 = icmp eq i32 %949, 0
  br i1 %950, label %951, label %952

951:                                              ; preds = %948
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %919) #7
  br label %952

952:                                              ; preds = %938, %948, %951
  %953 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %954 = load i8*, i8** %953, align 8
  store i8* null, i8** %953, align 8
  %955 = icmp eq i8* %954, null
  br i1 %955, label %957, label %956

956:                                              ; preds = %952
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %954) #7
  br label %957

957:                                              ; preds = %956, %952
  %958 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %860, align 8
  %959 = icmp eq %"class.WTF::StringImpl"* %958, null
  br i1 %959, label %973, label %960

960:                                              ; preds = %957
  %961 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %962 = load atomic i32, i32* %961 monotonic, align 4
  %963 = and i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 0
  %966 = load i32, i32* %965, align 4
  br i1 %964, label %967, label %969

967:                                              ; preds = %960
  %968 = add i32 %966, -1
  store i32 %968, i32* %965, align 4
  br label %969

969:                                              ; preds = %967, %960
  %970 = phi i32 [ %968, %967 ], [ %966, %960 ]
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %972, label %973

972:                                              ; preds = %969
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %958) #7
  br label %973

973:                                              ; preds = %957, %969, %972
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %857) #7
  br label %996

974:                                              ; preds = %856
  %975 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %976 = load i8*, i8** %975, align 8
  store i8* null, i8** %975, align 8
  %977 = icmp eq i8* %976, null
  br i1 %977, label %979, label %978

978:                                              ; preds = %974
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %976) #7
  br label %979

979:                                              ; preds = %978, %974
  %980 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %860, align 8
  %981 = icmp eq %"class.WTF::StringImpl"* %980, null
  br i1 %981, label %995, label %982

982:                                              ; preds = %979
  %983 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %980, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %984 = load atomic i32, i32* %983 monotonic, align 4
  %985 = and i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %980, i64 0, i32 0
  %988 = load i32, i32* %987, align 4
  br i1 %986, label %989, label %991

989:                                              ; preds = %982
  %990 = add i32 %988, -1
  store i32 %990, i32* %987, align 4
  br label %991

991:                                              ; preds = %989, %982
  %992 = phi i32 [ %990, %989 ], [ %988, %982 ]
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %995

994:                                              ; preds = %991
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %980) #7
  br label %995

995:                                              ; preds = %979, %991, %994
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %857) #7
  br label %1171

996:                                              ; preds = %973, %850
  %997 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %45, i64 7, i32 0
  %998 = bitcast %"class.v8::Name"** %997 to %"class.v8::Value"**
  %999 = load %"class.v8::Value"*, %"class.v8::Value"** %998, align 8
  %1000 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %47, %"class.v8::Value"* %999) #7
  %1001 = icmp eq %"class.v8::Value"* %1000, null
  br i1 %1001, label %1002, label %1008

1002:                                             ; preds = %996
  %1003 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1004 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1005 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1004, align 8
  %1006 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1005, i64 5
  %1007 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1006, align 8
  call void %1007(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1003) #7
  br label %1171

1008:                                             ; preds = %996
  %1009 = bitcast %"class.v8::Value"* %1000 to i64*
  %1010 = load i64, i64* %1009, align 8
  %1011 = and i64 %1010, 3
  %1012 = icmp eq i64 %1011, 1
  br i1 %1012, label %1013, label %1031

1013:                                             ; preds = %1008
  %1014 = add i64 %1010, -1
  %1015 = inttoptr i64 %1014 to i32*
  %1016 = load i32, i32* %1015, align 4
  %1017 = and i64 %1010, -4294967296
  %1018 = zext i32 %1016 to i64
  %1019 = or i64 %1017, %1018
  %1020 = add i64 %1019, 7
  %1021 = inttoptr i64 %1020 to i16*
  %1022 = load i16, i16* %1021, align 2
  %1023 = icmp eq i16 %1022, 67
  br i1 %1023, label %1024, label %1031

1024:                                             ; preds = %1013
  %1025 = add i64 %1010, 23
  %1026 = inttoptr i64 %1025 to i32*
  %1027 = load i32, i32* %1026, align 4
  %1028 = and i32 %1027, -2
  %1029 = icmp eq i32 %1028, 10
  br i1 %1029, label %1030, label %1031

1030:                                             ; preds = %1024
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %1171

1031:                                             ; preds = %1013, %1008, %1024
  %1032 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1032) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1032, i8 -86, i64 152, i1 false)
  %1033 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1000, %"class.v8::Value"** %1033, align 8
  %1034 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %1034, align 8
  %1035 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1035, align 8
  %1036 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %1037 = bitcast %"class.std::__1::unique_ptr"* %1036 to i64*
  store i64 0, i64* %1037, align 8
  %1038 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1038, label %1039, label %1149

1039:                                             ; preds = %1031
  %1040 = load %"class.v8::Value"*, %"class.v8::Value"** %1033, align 8
  %1041 = icmp eq %"class.v8::Value"* %1040, null
  br i1 %1041, label %1042, label %1066, !prof !2

1042:                                             ; preds = %1039
  %1043 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1035, align 8
  %1044 = icmp eq %"class.WTF::StringImpl"* %1043, null
  br i1 %1044, label %1045, label %1047

1045:                                             ; preds = %1042
  %1046 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 8
  br label %1091

1047:                                             ; preds = %1042
  %1048 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1043, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1049 = load atomic i32, i32* %1048 monotonic, align 4
  %1050 = and i32 %1049, 2
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1052, label %1064

1052:                                             ; preds = %1047
  %1053 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1043, i64 0, i32 0
  %1054 = load i32, i32* %1053, align 4
  %1055 = zext i32 %1054 to i33
  %1056 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1055, i33 1) #7
  %1057 = extractvalue { i33, i1 } %1056, 1
  %1058 = extractvalue { i33, i1 } %1056, 0
  %1059 = icmp slt i33 %1058, 0
  %1060 = or i1 %1057, %1059
  br i1 %1060, label %1061, label %1062, !prof !2

1061:                                             ; preds = %1052
  call void @llvm.trap() #7
  unreachable

1062:                                             ; preds = %1052
  %1063 = trunc i33 %1058 to i32
  store i32 %1063, i32* %1053, align 4
  br label %1064

1064:                                             ; preds = %1047, %1062
  %1065 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 8
  br label %1072

1066:                                             ; preds = %1039
  %1067 = bitcast %"class.v8::Value"* %1040 to %"class.v8::String"*
  %1068 = load i32, i32* %1034, align 8
  %1069 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1067, i32 %1068) #7
  %1070 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %2, i64 0, i32 8
  %1071 = icmp eq %"class.WTF::StringImpl"* %1069, null
  br i1 %1071, label %1091, label %1072

1072:                                             ; preds = %1064, %1066
  %1073 = phi %"class.WTF::String"* [ %1065, %1064 ], [ %1070, %1066 ]
  %1074 = phi %"class.WTF::StringImpl"* [ %1043, %1064 ], [ %1069, %1066 ]
  %1075 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1074, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1076 = load atomic i32, i32* %1075 monotonic, align 4
  %1077 = and i32 %1076, 2
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1091

1079:                                             ; preds = %1072
  %1080 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1074, i64 0, i32 0
  %1081 = load i32, i32* %1080, align 4
  %1082 = zext i32 %1081 to i33
  %1083 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1082, i33 1) #7
  %1084 = extractvalue { i33, i1 } %1083, 1
  %1085 = extractvalue { i33, i1 } %1083, 0
  %1086 = icmp slt i33 %1085, 0
  %1087 = or i1 %1084, %1086
  br i1 %1087, label %1088, label %1089, !prof !2

1088:                                             ; preds = %1079
  call void @llvm.trap() #7
  unreachable

1089:                                             ; preds = %1079
  %1090 = trunc i33 %1085 to i32
  store i32 %1090, i32* %1080, align 4
  br label %1091

1091:                                             ; preds = %1045, %1089, %1072, %1066
  %1092 = phi i1 [ false, %1089 ], [ false, %1072 ], [ true, %1066 ], [ true, %1045 ]
  %1093 = phi %"class.WTF::String"* [ %1073, %1089 ], [ %1073, %1072 ], [ %1070, %1066 ], [ %1046, %1045 ]
  %1094 = phi %"class.WTF::StringImpl"* [ %1074, %1089 ], [ %1074, %1072 ], [ null, %1066 ], [ null, %1045 ]
  %1095 = ptrtoint %"class.WTF::StringImpl"* %1094 to i64
  %1096 = bitcast %"class.WTF::String"* %1093 to i64*
  %1097 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1093, i64 0, i32 0, i32 0
  %1098 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1097, align 8
  store i64 %1095, i64* %1096, align 8
  %1099 = icmp eq %"class.WTF::StringImpl"* %1098, null
  br i1 %1099, label %1113, label %1100

1100:                                             ; preds = %1091
  %1101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1098, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1102 = load atomic i32, i32* %1101 monotonic, align 4
  %1103 = and i32 %1102, 2
  %1104 = icmp eq i32 %1103, 0
  %1105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1098, i64 0, i32 0
  %1106 = load i32, i32* %1105, align 4
  br i1 %1104, label %1107, label %1109

1107:                                             ; preds = %1100
  %1108 = add i32 %1106, -1
  store i32 %1108, i32* %1105, align 4
  br label %1109

1109:                                             ; preds = %1107, %1100
  %1110 = phi i32 [ %1108, %1107 ], [ %1106, %1100 ]
  %1111 = icmp eq i32 %1110, 0
  br i1 %1111, label %1112, label %1113

1112:                                             ; preds = %1109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1098) #7
  br label %1113

1113:                                             ; preds = %1091, %1109, %1112
  br i1 %1092, label %1127, label %1114

1114:                                             ; preds = %1113
  %1115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1116 = load atomic i32, i32* %1115 monotonic, align 4
  %1117 = and i32 %1116, 2
  %1118 = icmp eq i32 %1117, 0
  %1119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1120 = load i32, i32* %1119, align 4
  br i1 %1118, label %1121, label %1123

1121:                                             ; preds = %1114
  %1122 = add i32 %1120, -1
  store i32 %1122, i32* %1119, align 4
  br label %1123

1123:                                             ; preds = %1121, %1114
  %1124 = phi i32 [ %1122, %1121 ], [ %1120, %1114 ]
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1126, label %1127

1126:                                             ; preds = %1123
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1094) #7
  br label %1127

1127:                                             ; preds = %1113, %1123, %1126
  %1128 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1129 = load i8*, i8** %1128, align 8
  store i8* null, i8** %1128, align 8
  %1130 = icmp eq i8* %1129, null
  br i1 %1130, label %1132, label %1131

1131:                                             ; preds = %1127
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1129) #7
  br label %1132

1132:                                             ; preds = %1131, %1127
  %1133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1035, align 8
  %1134 = icmp eq %"class.WTF::StringImpl"* %1133, null
  br i1 %1134, label %1148, label %1135

1135:                                             ; preds = %1132
  %1136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1137 = load atomic i32, i32* %1136 monotonic, align 4
  %1138 = and i32 %1137, 2
  %1139 = icmp eq i32 %1138, 0
  %1140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1133, i64 0, i32 0
  %1141 = load i32, i32* %1140, align 4
  br i1 %1139, label %1142, label %1144

1142:                                             ; preds = %1135
  %1143 = add i32 %1141, -1
  store i32 %1143, i32* %1140, align 4
  br label %1144

1144:                                             ; preds = %1142, %1135
  %1145 = phi i32 [ %1143, %1142 ], [ %1141, %1135 ]
  %1146 = icmp eq i32 %1145, 0
  br i1 %1146, label %1147, label %1148

1147:                                             ; preds = %1144
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1133) #7
  br label %1148

1148:                                             ; preds = %1132, %1144, %1147
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1032) #7
  br label %1171

1149:                                             ; preds = %1031
  %1150 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1151 = load i8*, i8** %1150, align 8
  store i8* null, i8** %1150, align 8
  %1152 = icmp eq i8* %1151, null
  br i1 %1152, label %1154, label %1153

1153:                                             ; preds = %1149
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1151) #7
  br label %1154

1154:                                             ; preds = %1153, %1149
  %1155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1035, align 8
  %1156 = icmp eq %"class.WTF::StringImpl"* %1155, null
  br i1 %1156, label %1170, label %1157

1157:                                             ; preds = %1154
  %1158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1155, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1159 = load atomic i32, i32* %1158 monotonic, align 4
  %1160 = and i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1155, i64 0, i32 0
  %1163 = load i32, i32* %1162, align 4
  br i1 %1161, label %1164, label %1166

1164:                                             ; preds = %1157
  %1165 = add i32 %1163, -1
  store i32 %1165, i32* %1162, align 4
  br label %1166

1166:                                             ; preds = %1164, %1157
  %1167 = phi i32 [ %1165, %1164 ], [ %1163, %1157 ]
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1169, label %1170

1169:                                             ; preds = %1166
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1155) #7
  br label %1170

1170:                                             ; preds = %1154, %1166, %1169
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1032) #7
  br label %1171

1171:                                             ; preds = %817, %428, %226, %393, %440, %607, %788, %816, %1002, %1030, %1148, %1170, %995, %828, %787, %642, %614, %400, %219, %52
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %46) #7
  br label %1172

1172:                                             ; preds = %1171, %34, %37
  ret void
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

declare %"class.blink::PaymentCurrencyAmount"* @_ZN5blink17NativeValueTraitsINS_21PaymentCurrencyAmountEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

declare void @_ZN5blink11ItemDetails20setIntroductoryPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"*, %"class.blink::PaymentCurrencyAmount"*) local_unnamed_addr #1

declare void @_ZN5blink11ItemDetails8setPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"*, %"class.blink::PaymentCurrencyAmount"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink11ItemDetails8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::ItemDetails"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink15toV8ItemDetailsEPKNS_11ItemDetailsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::ItemDetails"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15toV8ItemDetailsEPKNS_11ItemDetailsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::ItemDetails"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %12 to %"class.blink::V8PerIsolateData"**
  %14 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %13, align 8
  %15 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %14, i8* bitcast ([8 x i8*]* @_ZZN5blinkL24eternalV8ItemDetailsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.314"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.314"*)) #7
  %16 = extractvalue { i64, %"class.v8::Eternal"* } %15, 1
  %17 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %18 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 1, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %4
  %22 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #7
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %23, align 8
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %28 = bitcast i8** %27 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %25, i32* %29, align 8
  %30 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #7
  %31 = bitcast %"class.v8::String"* %30 to %"class.v8::Value"*
  %32 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 0, i32 0
  %33 = load %"class.v8::Name"*, %"class.v8::Name"** %32, align 8
  %34 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %33, %"class.v8::Value"* %31) #7
  %35 = trunc i16 %34 to i8
  %36 = icmp ne i8 %35, 0
  %37 = icmp ugt i16 %34, 255
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %186

39:                                               ; preds = %4, %21
  %40 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 2, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %61, label %43

43:                                               ; preds = %39
  %44 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #7
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %45, align 8
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %50 = bitcast i8** %49 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %48, %"class.WTF::StringImpl"** %50, align 8
  %51 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %47, i32* %51, align 8
  %52 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #7
  %53 = bitcast %"class.v8::String"* %52 to %"class.v8::Value"*
  %54 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 1, i32 0
  %55 = load %"class.v8::Name"*, %"class.v8::Name"** %54, align 8
  %56 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %55, %"class.v8::Value"* %53) #7
  %57 = trunc i16 %56 to i8
  %58 = icmp ne i8 %57, 0
  %59 = icmp ugt i16 %56, 255
  %60 = and i1 %59, %58
  br i1 %60, label %61, label %186

61:                                               ; preds = %39, %43
  %62 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 3, i32 0, i32 0
  %63 = load %"class.blink::PaymentCurrencyAmount"*, %"class.blink::PaymentCurrencyAmount"** %62, align 8
  %64 = icmp eq %"class.blink::PaymentCurrencyAmount"* %63, null
  br i1 %64, label %79, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.blink::PaymentCurrencyAmount", %"class.blink::PaymentCurrencyAmount"* %63, i64 0, i32 0
  %67 = bitcast %"class.blink::PaymentCurrencyAmount"* %63 to %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)***
  %68 = load %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)**, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*** %67, align 8
  %69 = getelementptr inbounds %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)** %68, i64 2
  %70 = load %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)** %69, align 8
  %71 = call %"class.v8::Value"* %70(%"class.blink::IDLDictionaryBase"* nonnull %66, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #7
  %72 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 2, i32 0
  %73 = load %"class.v8::Name"*, %"class.v8::Name"** %72, align 8
  %74 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %73, %"class.v8::Value"* %71) #7
  %75 = trunc i16 %74 to i8
  %76 = icmp ne i8 %75, 0
  %77 = icmp ugt i16 %74, 255
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %186

79:                                               ; preds = %61, %65
  %80 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 4, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %101, label %83

83:                                               ; preds = %79
  %84 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84) #7
  %85 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %81, %"class.WTF::StringImpl"** %85, align 8
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 1
  %89 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %90 = bitcast i8** %89 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %90, align 8
  %91 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %87, i32* %91, align 8
  %92 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %84) #7
  %93 = bitcast %"class.v8::String"* %92 to %"class.v8::Value"*
  %94 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 3, i32 0
  %95 = load %"class.v8::Name"*, %"class.v8::Name"** %94, align 8
  %96 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %95, %"class.v8::Value"* %93) #7
  %97 = trunc i16 %96 to i8
  %98 = icmp ne i8 %97, 0
  %99 = icmp ugt i16 %96, 255
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %186

101:                                              ; preds = %79, %83
  %102 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 5, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %123, label %105

105:                                              ; preds = %101
  %106 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #7
  %107 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %103, %"class.WTF::StringImpl"** %107, align 8
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 1
  %111 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %112 = bitcast i8** %111 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %110, %"class.WTF::StringImpl"** %112, align 8
  %113 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %109, i32* %113, align 8
  %114 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #7
  %115 = bitcast %"class.v8::String"* %114 to %"class.v8::Value"*
  %116 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 4, i32 0
  %117 = load %"class.v8::Name"*, %"class.v8::Name"** %116, align 8
  %118 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %117, %"class.v8::Value"* %115) #7
  %119 = trunc i16 %118 to i8
  %120 = icmp ne i8 %119, 0
  %121 = icmp ugt i16 %118, 255
  %122 = and i1 %121, %120
  br i1 %122, label %123, label %186

123:                                              ; preds = %101, %105
  %124 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 6, i32 0, i32 0
  %125 = load %"class.blink::PaymentCurrencyAmount"*, %"class.blink::PaymentCurrencyAmount"** %124, align 8
  %126 = icmp eq %"class.blink::PaymentCurrencyAmount"* %125, null
  br i1 %126, label %141, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.blink::PaymentCurrencyAmount", %"class.blink::PaymentCurrencyAmount"* %125, i64 0, i32 0
  %129 = bitcast %"class.blink::PaymentCurrencyAmount"* %125 to %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)***
  %130 = load %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)**, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*** %129, align 8
  %131 = getelementptr inbounds %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)** %130, i64 2
  %132 = load %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)*, %"class.v8::Value"* (%"class.blink::IDLDictionaryBase"*, %"class.v8::Object"*, %"class.v8::Isolate"*)** %131, align 8
  %133 = call %"class.v8::Value"* %132(%"class.blink::IDLDictionaryBase"* nonnull %128, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #7
  %134 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 5, i32 0
  %135 = load %"class.v8::Name"*, %"class.v8::Name"** %134, align 8
  %136 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %135, %"class.v8::Value"* %133) #7
  %137 = trunc i16 %136 to i8
  %138 = icmp ne i8 %137, 0
  %139 = icmp ugt i16 %136, 255
  %140 = and i1 %139, %138
  br i1 %140, label %141, label %186

141:                                              ; preds = %123, %127
  %142 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 7, i32 0, i32 0
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %163, label %145

145:                                              ; preds = %141
  %146 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #7
  %147 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %143, %"class.WTF::StringImpl"** %147, align 8
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 1
  %151 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %152 = bitcast i8** %151 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %150, %"class.WTF::StringImpl"** %152, align 8
  %153 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %149, i32* %153, align 8
  %154 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #7
  %155 = bitcast %"class.v8::String"* %154 to %"class.v8::Value"*
  %156 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 6, i32 0
  %157 = load %"class.v8::Name"*, %"class.v8::Name"** %156, align 8
  %158 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %157, %"class.v8::Value"* %155) #7
  %159 = trunc i16 %158 to i8
  %160 = icmp ne i8 %159, 0
  %161 = icmp ugt i16 %158, 255
  %162 = and i1 %161, %160
  br i1 %162, label %163, label %186

163:                                              ; preds = %141, %145
  %164 = getelementptr inbounds %"class.blink::ItemDetails", %"class.blink::ItemDetails"* %0, i64 0, i32 8, i32 0, i32 0
  %165 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %166 = icmp eq %"class.WTF::StringImpl"* %165, null
  br i1 %166, label %185, label %167

167:                                              ; preds = %163
  %168 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %168) #7
  %169 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %165, %"class.WTF::StringImpl"** %169, align 8
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 1
  %173 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %174 = bitcast i8** %173 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %172, %"class.WTF::StringImpl"** %174, align 8
  %175 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %171, i32* %175, align 8
  %176 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %168) #7
  %177 = bitcast %"class.v8::String"* %176 to %"class.v8::Value"*
  %178 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 7, i32 0
  %179 = load %"class.v8::Name"*, %"class.v8::Name"** %178, align 8
  %180 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %179, %"class.v8::Value"* %177) #7
  %181 = trunc i16 %180 to i8
  %182 = icmp ne i8 %181, 0
  %183 = icmp ugt i16 %180, 255
  %184 = and i1 %183, %182
  br i1 %184, label %185, label %186

185:                                              ; preds = %163, %167
  br label %186

186:                                              ; preds = %43, %83, %127, %185, %167, %145, %105, %65, %21
  %187 = phi i1 [ false, %21 ], [ false, %43 ], [ false, %65 ], [ false, %83 ], [ false, %105 ], [ false, %127 ], [ false, %145 ], [ true, %185 ], [ false, %167 ]
  ret i1 %187
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ItemDetails"* @_ZN5blink17NativeValueTraitsINS_11ItemDetailsEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 72) #7
  %5 = bitcast i8* %4 to %"class.blink::ItemDetails"*
  tail call void @_ZN5blink11ItemDetailsC1Ev(%"class.blink::ItemDetails"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink13V8ItemDetails6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_11ItemDetailsERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::ItemDetails"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::ItemDetails"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.314"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink11ItemDetailsC1Ev(%"class.blink::ItemDetails"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !3

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !4

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !4

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2146410443, i32 1073205}
!4 = !{!"branch_weights", i32 2000, i32 1}
