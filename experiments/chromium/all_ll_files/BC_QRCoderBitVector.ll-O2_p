; ModuleID = '../../third_party/pdfium/fxbarcode/qrcode/BC_QRCoderBitVector.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/qrcode/BC_QRCoderBitVector.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_QRCoderBitVector = type { i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZN20CBC_QRCoderBitVectorC1Ev = hidden unnamed_addr alias void (%class.CBC_QRCoderBitVector*), void (%class.CBC_QRCoderBitVector*)* @_ZN20CBC_QRCoderBitVectorC2Ev
@_ZN20CBC_QRCoderBitVectorD1Ev = hidden unnamed_addr alias void (%class.CBC_QRCoderBitVector*), void (%class.CBC_QRCoderBitVector*)* @_ZN20CBC_QRCoderBitVectorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVectorC2Ev(%class.CBC_QRCoderBitVector* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_QRCoderBitVector* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVectorD2Ev(%class.CBC_QRCoderBitVector* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #5
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK20CBC_QRCoderBitVector2AtEm(%class.CBC_QRCoderBitVector* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %7, label %6, !prof !2

6:                                                ; preds = %2
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

7:                                                ; preds = %2
  %8 = lshr i64 %1, 3
  %9 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %8
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = trunc i64 %1 to i32
  %15 = and i32 %14, 7
  %16 = xor i32 %15, 7
  %17 = lshr i32 %13, %16
  %18 = and i32 %17, 1
  ret i32 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 7
  %5 = lshr i64 %4, 3
  ret i64 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 7
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  tail call void @_ZN20CBC_QRCoderBitVector10AppendByteEa(%class.CBC_QRCoderBitVector* %0, i8 signext 0)
  %9 = load i64, i64* %3, align 8
  %10 = add i64 %9, -8
  store i64 %10, i64* %3, align 8
  br label %11

11:                                               ; preds = %8, %2
  %12 = phi i64 [ %10, %8 ], [ %4, %2 ]
  %13 = xor i32 %6, 7
  %14 = shl i32 %1, %13
  %15 = lshr i64 %12, 3
  %16 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %15
  %19 = load i8, i8* %18, align 1
  %20 = trunc i32 %14 to i8
  %21 = or i8 %19, %20
  store i8 %21, i8* %18, align 1
  %22 = load i64, i64* %3, align 8
  %23 = add i64 %22, 1
  store i64 %23, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVector10AppendByteEa(%class.CBC_QRCoderBitVector*, i8 signext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 3
  %6 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp eq i64 %5, %12
  %14 = inttoptr i64 %9 to i8*
  br i1 %13, label %15, label %168

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ugt i8* %17, %14
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  store i8 0, i8* %14, align 1
  %20 = getelementptr inbounds i8, i8* %14, i64 1
  %21 = ptrtoint i8* %20 to i64
  store i64 %21, i64* %8, align 8
  br label %168

22:                                               ; preds = %15
  %23 = ptrtoint i8* %17 to i64
  %24 = add nuw nsw i64 %5, 1
  %25 = bitcast i8** %16 to i64*
  %26 = sub i64 %23, %11
  %27 = icmp ult i64 %26, 4611686018427387903
  br i1 %27, label %28, label %33

28:                                               ; preds = %22
  %29 = shl i64 %26, 1
  %30 = icmp ult i64 %29, %24
  %31 = select i1 %30, i64 %24, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %28, %22
  %34 = phi i64 [ %31, %28 ], [ 9223372036854775807, %22 ]
  %35 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %34, i64 1) #5
  br label %36

36:                                               ; preds = %33, %28
  %37 = phi i64 [ %34, %33 ], [ 0, %28 ]
  %38 = phi i8* [ %35, %33 ], [ null, %28 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 %5
  %40 = getelementptr inbounds i8, i8* %38, i64 %37
  %41 = ptrtoint i8* %40 to i64
  store i8 0, i8* %39, align 1
  %42 = getelementptr inbounds i8, i8* %39, i64 1
  %43 = ptrtoint i8* %42 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = load i8*, i8** %7, align 8
  %48 = ptrtoint i8* %47 to i64
  %49 = icmp eq i8* %47, %45
  br i1 %49, label %161, label %50

50:                                               ; preds = %36
  %51 = ptrtoint i8* %47 to i64
  %52 = sub i64 %51, %46
  %53 = icmp ult i64 %52, 16
  br i1 %53, label %148, label %54

54:                                               ; preds = %50
  %55 = sub i64 %5, %48
  %56 = getelementptr i8, i8* %45, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr i8, i8* %38, i64 %57
  %59 = icmp ult i8* %58, %47
  %60 = icmp ult i8* %45, %39
  %61 = and i1 %59, %60
  br i1 %61, label %148, label %62

62:                                               ; preds = %54
  %63 = and i64 %52, -16
  %64 = sub i64 0, %63
  %65 = getelementptr i8, i8* %39, i64 %64
  %66 = sub i64 0, %63
  %67 = getelementptr i8, i8* %47, i64 %66
  %68 = add i64 %63, -16
  %69 = lshr exact i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 48
  br i1 %72, label %125, label %73

73:                                               ; preds = %62
  %74 = sub nsw i64 %70, %71
  %75 = getelementptr i8, i8* %39, i64 -1
  %76 = getelementptr inbounds i8, i8* %75, i64 -8
  %77 = getelementptr inbounds i8, i8* %47, i64 -16
  %78 = getelementptr inbounds i8, i8* %76, i64 -7
  %79 = getelementptr i8, i8* %39, i64 -1
  %80 = getelementptr inbounds i8, i8* %79, i64 -8
  %81 = getelementptr inbounds i8, i8* %47, i64 -16
  %82 = getelementptr inbounds i8, i8* %80, i64 -7
  %83 = getelementptr i8, i8* %39, i64 -1
  %84 = getelementptr inbounds i8, i8* %83, i64 -8
  %85 = getelementptr inbounds i8, i8* %47, i64 -16
  %86 = getelementptr inbounds i8, i8* %84, i64 -7
  %87 = getelementptr i8, i8* %39, i64 -1
  %88 = getelementptr inbounds i8, i8* %87, i64 -8
  %89 = getelementptr inbounds i8, i8* %47, i64 -16
  %90 = getelementptr inbounds i8, i8* %88, i64 -7
  br label %91

91:                                               ; preds = %91, %73
  %92 = phi i64 [ 0, %73 ], [ %122, %91 ]
  %93 = phi i64 [ %74, %73 ], [ %123, %91 ]
  %94 = sub i64 0, %92
  %95 = sub i64 0, %92
  %96 = getelementptr inbounds i8, i8* %77, i64 %95
  %97 = bitcast i8* %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 1, !alias.scope !5
  %99 = getelementptr inbounds i8, i8* %78, i64 %94
  %100 = bitcast i8* %99 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %100, align 1, !alias.scope !8, !noalias !5
  %101 = sub nuw nsw i64 -16, %92
  %102 = sub nuw nsw i64 -16, %92
  %103 = getelementptr inbounds i8, i8* %81, i64 %102
  %104 = bitcast i8* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1, !alias.scope !5
  %106 = getelementptr inbounds i8, i8* %82, i64 %101
  %107 = bitcast i8* %106 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %107, align 1, !alias.scope !8, !noalias !5
  %108 = sub nuw nsw i64 -32, %92
  %109 = sub nuw nsw i64 -32, %92
  %110 = getelementptr inbounds i8, i8* %85, i64 %109
  %111 = bitcast i8* %110 to <2 x i64>*
  %112 = load <2 x i64>, <2 x i64>* %111, align 1, !alias.scope !5
  %113 = getelementptr inbounds i8, i8* %86, i64 %108
  %114 = bitcast i8* %113 to <2 x i64>*
  store <2 x i64> %112, <2 x i64>* %114, align 1, !alias.scope !8, !noalias !5
  %115 = sub nuw nsw i64 -48, %92
  %116 = sub nuw nsw i64 -48, %92
  %117 = getelementptr inbounds i8, i8* %89, i64 %116
  %118 = bitcast i8* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 1, !alias.scope !5
  %120 = getelementptr inbounds i8, i8* %90, i64 %115
  %121 = bitcast i8* %120 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %121, align 1, !alias.scope !8, !noalias !5
  %122 = add i64 %92, 64
  %123 = add i64 %93, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %91, !llvm.loop !10

125:                                              ; preds = %91, %62
  %126 = phi i64 [ 0, %62 ], [ %122, %91 ]
  %127 = icmp eq i64 %71, 0
  br i1 %127, label %146, label %128

128:                                              ; preds = %125
  %129 = getelementptr i8, i8* %39, i64 -1
  %130 = getelementptr inbounds i8, i8* %129, i64 -8
  %131 = getelementptr inbounds i8, i8* %47, i64 -16
  %132 = getelementptr inbounds i8, i8* %130, i64 -7
  br label %133

133:                                              ; preds = %133, %128
  %134 = phi i64 [ %126, %128 ], [ %143, %133 ]
  %135 = phi i64 [ %71, %128 ], [ %144, %133 ]
  %136 = sub i64 0, %134
  %137 = sub i64 0, %134
  %138 = getelementptr inbounds i8, i8* %131, i64 %137
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1, !alias.scope !5
  %141 = getelementptr inbounds i8, i8* %132, i64 %136
  %142 = bitcast i8* %141 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1, !alias.scope !8, !noalias !5
  %143 = add i64 %134, 16
  %144 = add i64 %135, -1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %133, !llvm.loop !12

146:                                              ; preds = %133, %125
  %147 = icmp eq i64 %52, %63
  br i1 %147, label %158, label %148

148:                                              ; preds = %146, %54, %50
  %149 = phi i8* [ %39, %54 ], [ %39, %50 ], [ %65, %146 ]
  %150 = phi i8* [ %47, %54 ], [ %47, %50 ], [ %67, %146 ]
  br label %151

151:                                              ; preds = %148, %151
  %152 = phi i8* [ %154, %151 ], [ %149, %148 ]
  %153 = phi i8* [ %155, %151 ], [ %150, %148 ]
  %154 = getelementptr inbounds i8, i8* %152, i64 -1
  %155 = getelementptr inbounds i8, i8* %153, i64 -1
  %156 = load i8, i8* %155, align 1
  store i8 %156, i8* %154, align 1
  %157 = icmp eq i8* %155, %45
  br i1 %157, label %158, label %151, !llvm.loop !14

158:                                              ; preds = %151, %146
  %159 = phi i8* [ %65, %146 ], [ %154, %151 ]
  %160 = load i64, i64* %10, align 8
  br label %161

161:                                              ; preds = %36, %158
  %162 = phi i8* [ %159, %158 ], [ %39, %36 ]
  %163 = phi i64 [ %160, %158 ], [ %46, %36 ]
  %164 = ptrtoint i8* %162 to i64
  store i64 %164, i64* %10, align 8
  store i64 %43, i64* %8, align 8
  store i64 %41, i64* %25, align 8
  %165 = icmp eq i64 %163, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %161
  %167 = inttoptr i64 %163 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %167) #5
  br label %168

168:                                              ; preds = %166, %161, %19, %2
  %169 = load i64, i64* %3, align 8
  %170 = lshr i64 %169, 3
  %171 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %172 = load i8*, i8** %171, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 %170
  store i8 %1, i8* %173, align 1
  %174 = load i64, i64* %3, align 8
  %175 = add i64 %174, 8
  store i64 %175, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %44

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  br label %8

8:                                                ; preds = %5, %41
  %9 = phi i32 [ %2, %5 ], [ %42, %41 ]
  %10 = load i64, i64* %6, align 8
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 0
  %13 = icmp sgt i32 %9, 7
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %19

15:                                               ; preds = %8
  %16 = add nsw i32 %9, -8
  %17 = ashr i32 %1, %16
  %18 = trunc i32 %17 to i8
  tail call void @_ZN20CBC_QRCoderBitVector10AppendByteEa(%class.CBC_QRCoderBitVector* %0, i8 signext %18)
  br label %41

19:                                               ; preds = %8
  %20 = add nsw i32 %9, -1
  %21 = lshr i32 %1, %20
  %22 = and i32 %21, 1
  %23 = trunc i64 %10 to i32
  %24 = and i32 %23, 7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %19
  tail call void @_ZN20CBC_QRCoderBitVector10AppendByteEa(%class.CBC_QRCoderBitVector* %0, i8 signext 0) #5
  %27 = load i64, i64* %6, align 8
  %28 = add i64 %27, -8
  store i64 %28, i64* %6, align 8
  br label %29

29:                                               ; preds = %19, %26
  %30 = phi i64 [ %28, %26 ], [ %10, %19 ]
  %31 = xor i32 %24, 7
  %32 = shl i32 %22, %31
  %33 = lshr i64 %30, 3
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  %36 = load i8, i8* %35, align 1
  %37 = trunc i32 %32 to i8
  %38 = or i8 %36, %37
  store i8 %38, i8* %35, align 1
  %39 = load i64, i64* %6, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %6, align 8
  br label %41

41:                                               ; preds = %29, %15
  %42 = phi i32 [ %16, %15 ], [ %20, %29 ]
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %8, label %44

44:                                               ; preds = %41, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_QRCoderBitVector15AppendBitVectorEPKS_(%class.CBC_QRCoderBitVector*, %class.CBC_QRCoderBitVector* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %1, i64 0, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i64, i64* %8, align 8
  br label %12

11:                                               ; preds = %31, %2
  ret void

12:                                               ; preds = %6, %31
  %13 = phi i64 [ %10, %6 ], [ %42, %31 ]
  %14 = phi i64 [ 0, %6 ], [ %43, %31 ]
  %15 = lshr i64 %14, 3
  %16 = load i8*, i8** %7, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %15
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = trunc i64 %14 to i32
  %21 = and i32 %20, 7
  %22 = xor i32 %21, 7
  %23 = lshr i32 %19, %22
  %24 = and i32 %23, 1
  %25 = trunc i64 %13 to i32
  %26 = and i32 %25, 7
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %12
  tail call void @_ZN20CBC_QRCoderBitVector10AppendByteEa(%class.CBC_QRCoderBitVector* %0, i8 signext 0) #5
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, -8
  store i64 %30, i64* %8, align 8
  br label %31

31:                                               ; preds = %12, %28
  %32 = phi i64 [ %30, %28 ], [ %13, %12 ]
  %33 = xor i32 %26, 7
  %34 = shl i32 %24, %33
  %35 = lshr i64 %32, 3
  %36 = load i8*, i8** %9, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %35
  %38 = load i8, i8* %37, align 1
  %39 = trunc i32 %34 to i8
  %40 = or i8 %38, %39
  store i8 %40, i8* %37, align 1
  %41 = load i64, i64* %8, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %8, align 8
  %43 = add nuw i64 %14, 1
  %44 = load i64, i64* %3, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %12, label %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CBC_QRCoderBitVector3XOREPKS_(%class.CBC_QRCoderBitVector* nocapture readonly, %class.CBC_QRCoderBitVector* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %28

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %1, i64 0, i32 1, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = add i64 %4, 7
  %12 = icmp ugt i64 %11, 7
  br i1 %12, label %13, label %28

13:                                               ; preds = %8
  %14 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  br label %15

15:                                               ; preds = %13, %15
  %16 = phi i64 [ 0, %13 ], [ %23, %15 ]
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = load i8*, i8** %14, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %16
  %21 = load i8, i8* %20, align 1
  %22 = xor i8 %21, %18
  store i8 %22, i8* %20, align 1
  %23 = add nuw nsw i64 %16, 1
  %24 = load i64, i64* %3, align 8
  %25 = add i64 %24, 7
  %26 = lshr i64 %25, 3
  %27 = icmp ult i64 %23, %26
  br i1 %27, label %15, label %28

28:                                               ; preds = %15, %8, %2
  %29 = phi i1 [ false, %2 ], [ true, %8 ], [ true, %15 ]
  ret i1 %29
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK20CBC_QRCoderBitVector8GetArrayEv(%class.CBC_QRCoderBitVector* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CBC_QRCoderBitVector, %class.CBC_QRCoderBitVector* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143987466}
!4 = !{i32 -2143987445}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
