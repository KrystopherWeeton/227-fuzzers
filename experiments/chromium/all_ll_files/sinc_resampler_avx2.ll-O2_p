; ModuleID = '../../third_party/webrtc/common_audio/resampler/sinc_resampler_avx2.cc'
source_filename = "../../third_party/webrtc/common_audio/resampler/sinc_resampler_avx2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZN6webrtc13SincResampler13Convolve_AVX2EPKfS2_S2_d(float*, float* nocapture readonly, float* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %5 = ptrtoint float* %0 to i64
  %6 = and i64 %5, 31
  %7 = icmp eq i64 %6, 0
  %8 = bitcast float* %0 to <8 x float>*
  br i1 %7, label %50, label %9

9:                                                ; preds = %4
  %10 = load <8 x float>, <8 x float>* %8, align 1
  %11 = bitcast float* %1 to <8 x float>*
  %12 = load <8 x float>, <8 x float>* %11, align 32
  %13 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %10, <8 x float> %12, <8 x float> zeroinitializer) #2
  %14 = bitcast float* %2 to <8 x float>*
  %15 = load <8 x float>, <8 x float>* %14, align 32
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %10, <8 x float> %15, <8 x float> zeroinitializer) #2
  %17 = getelementptr inbounds float, float* %0, i64 8
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 1
  %20 = getelementptr inbounds float, float* %1, i64 8
  %21 = bitcast float* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 32
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> %22, <8 x float> %13) #2
  %24 = getelementptr inbounds float, float* %2, i64 8
  %25 = bitcast float* %24 to <8 x float>*
  %26 = load <8 x float>, <8 x float>* %25, align 32
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> %26, <8 x float> %16) #2
  %28 = getelementptr inbounds float, float* %0, i64 16
  %29 = bitcast float* %28 to <8 x float>*
  %30 = load <8 x float>, <8 x float>* %29, align 1
  %31 = getelementptr inbounds float, float* %1, i64 16
  %32 = bitcast float* %31 to <8 x float>*
  %33 = load <8 x float>, <8 x float>* %32, align 32
  %34 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %30, <8 x float> %33, <8 x float> %23) #2
  %35 = getelementptr inbounds float, float* %2, i64 16
  %36 = bitcast float* %35 to <8 x float>*
  %37 = load <8 x float>, <8 x float>* %36, align 32
  %38 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %30, <8 x float> %37, <8 x float> %27) #2
  %39 = getelementptr inbounds float, float* %0, i64 24
  %40 = bitcast float* %39 to <8 x float>*
  %41 = load <8 x float>, <8 x float>* %40, align 1
  %42 = getelementptr inbounds float, float* %1, i64 24
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32
  %45 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %41, <8 x float> %44, <8 x float> %34) #2
  %46 = getelementptr inbounds float, float* %2, i64 24
  %47 = bitcast float* %46 to <8 x float>*
  %48 = load <8 x float>, <8 x float>* %47, align 32
  %49 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %41, <8 x float> %48, <8 x float> %38) #2
  br label %91

50:                                               ; preds = %4
  %51 = load <8 x float>, <8 x float>* %8, align 32
  %52 = bitcast float* %1 to <8 x float>*
  %53 = load <8 x float>, <8 x float>* %52, align 32
  %54 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %51, <8 x float> %53, <8 x float> zeroinitializer) #2
  %55 = bitcast float* %2 to <8 x float>*
  %56 = load <8 x float>, <8 x float>* %55, align 32
  %57 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %51, <8 x float> %56, <8 x float> zeroinitializer) #2
  %58 = getelementptr inbounds float, float* %0, i64 8
  %59 = bitcast float* %58 to <8 x float>*
  %60 = load <8 x float>, <8 x float>* %59, align 32
  %61 = getelementptr inbounds float, float* %1, i64 8
  %62 = bitcast float* %61 to <8 x float>*
  %63 = load <8 x float>, <8 x float>* %62, align 32
  %64 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %60, <8 x float> %63, <8 x float> %54) #2
  %65 = getelementptr inbounds float, float* %2, i64 8
  %66 = bitcast float* %65 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 32
  %68 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %60, <8 x float> %67, <8 x float> %57) #2
  %69 = getelementptr inbounds float, float* %0, i64 16
  %70 = bitcast float* %69 to <8 x float>*
  %71 = load <8 x float>, <8 x float>* %70, align 32
  %72 = getelementptr inbounds float, float* %1, i64 16
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32
  %75 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %71, <8 x float> %74, <8 x float> %64) #2
  %76 = getelementptr inbounds float, float* %2, i64 16
  %77 = bitcast float* %76 to <8 x float>*
  %78 = load <8 x float>, <8 x float>* %77, align 32
  %79 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %71, <8 x float> %78, <8 x float> %68) #2
  %80 = getelementptr inbounds float, float* %0, i64 24
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32
  %83 = getelementptr inbounds float, float* %1, i64 24
  %84 = bitcast float* %83 to <8 x float>*
  %85 = load <8 x float>, <8 x float>* %84, align 32
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %82, <8 x float> %85, <8 x float> %75) #2
  %87 = getelementptr inbounds float, float* %2, i64 24
  %88 = bitcast float* %87 to <8 x float>*
  %89 = load <8 x float>, <8 x float>* %88, align 32
  %90 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %82, <8 x float> %89, <8 x float> %79) #2
  br label %91

91:                                               ; preds = %9, %50
  %92 = phi <8 x float> [ %90, %50 ], [ %49, %9 ]
  %93 = phi <8 x float> [ %86, %50 ], [ %45, %9 ]
  %94 = shufflevector <8 x float> %93, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = shufflevector <8 x float> %93, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %96 = fadd <4 x float> %94, %95
  %97 = shufflevector <8 x float> %92, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %98 = shufflevector <8 x float> %92, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %99 = fadd <4 x float> %97, %98
  %100 = fsub double 1.000000e+00, %3
  %101 = fptrunc double %100 to float
  %102 = insertelement <4 x float> undef, float %101, i32 0
  %103 = shufflevector <4 x float> %102, <4 x float> undef, <4 x i32> zeroinitializer
  %104 = fmul <4 x float> %103, %96
  %105 = fptrunc double %3 to float
  %106 = insertelement <4 x float> undef, float %105, i32 0
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> zeroinitializer
  %108 = fmul <4 x float> %107, %99
  %109 = fadd <4 x float> %108, %104
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %111 = fadd <4 x float> %109, %110
  %112 = extractelement <4 x float> %111, i32 1
  %113 = extractelement <4 x float> %111, i32 0
  %114 = fadd float %113, %112
  ret float %114
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
