; ModuleID = '../../v8/src/strings/uri.cc'
source_filename = "../../v8/src/strings/uri.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1158" }
%"class.std::__1::__compressed_pair.1158" = type { %"struct.std::__1::__compressed_pair_elem.1159" }
%"struct.std::__1::__compressed_pair_elem.1159" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.v8::internal::String::FlatContent" = type { %union.anon.1150, i32, i32, %"class.v8::internal::CombinationAssertScope"* }
%union.anon.1150 = type { i8* }
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.std::__1::vector.1129" = type { %"class.std::__1::__vector_base.1130" }
%"class.std::__1::__vector_base.1130" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1131" }
%"class.std::__1::__compressed_pair.1131" = type { %"struct.std::__1::__compressed_pair_elem.1132" }
%"struct.std::__1::__compressed_pair_elem.1132" = type { i8* }
%"class.std::__1::vector.1136" = type { %"class.std::__1::__vector_base.1137" }
%"class.std::__1::__vector_base.1137" = type { i16*, i16*, %"class.std::__1::__compressed_pair.1138" }
%"class.std::__1::__compressed_pair.1138" = type { %"struct.std::__1::__compressed_pair_elem.1139" }
%"struct.std::__1::__compressed_pair_elem.1139" = type { i16* }
%"class.v8::internal::Vector.1144" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::MessageLocation" = type { %"class.v8::internal::Handle.1182", i32, i32, i32, %"class.v8::internal::Handle.1183" }
%"class.v8::internal::Handle.1182" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1183" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::StringShape" = type { i32 }
%"class.v8::internal::ConsString" = type { %"class.v8::internal::TorqueGeneratedConsString" }
%"class.v8::internal::TorqueGeneratedConsString" = type { %"class.v8::internal::String" }
%"class.v8::internal::SlicedString" = type { %"class.v8::internal::TorqueGeneratedSlicedString" }
%"class.v8::internal::TorqueGeneratedSlicedString" = type { %"class.v8::internal::String" }
%"class.v8::internal::ThinString" = type { %"class.v8::internal::TorqueGeneratedThinString" }
%"class.v8::internal::TorqueGeneratedThinString" = type { %"class.v8::internal::String" }
%"class.v8::String::ExternalOneByteStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i8* }
%"class.v8::String::ExternalStringResourceBase" = type { i32 (...)** }
%"class.v8::String::ExternalStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i16* }

$_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE = comdat any

$_ZN2v88internal9CopyCharsIhtEEvPT0_PKT_m = comdat any

$_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_ = comdat any

$_ZN2v88internal18FindFirstCharacterIhhEEiNS0_6VectorIKT_EENS2_IKT0_EEi = comdat any

$_ZN2v88internal18FindFirstCharacterIhtEEiNS0_6VectorIKT_EENS2_IKT0_EEi = comdat any

@.str.1 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Uri6DecodeEPNS0_7IsolateENS0_6HandleINS0_6StringEEEb(%"class.v8::internal::Isolate"*, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %5 = alloca %"class.v8::internal::String::FlatContent", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %7 = alloca %"class.std::__1::vector.1129", align 8
  %8 = alloca %"class.std::__1::vector.1136", align 8
  %9 = alloca %"class.v8::internal::Vector.1144", align 8
  %10 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %11 = bitcast %"class.std::__1::vector.1129"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #10
  %12 = bitcast %"class.std::__1::vector.1136"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #10
  %13 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #10
  %14 = bitcast %"class.v8::internal::String::FlatContent"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = load i64, i64* %10, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %5, %"class.v8::internal::String"* nonnull %18, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %369

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %5, i64 0, i32 2
  %26 = bitcast %"class.v8::internal::String::FlatContent"* %5 to i16**
  %27 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %5, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast i8** %28 to i64*
  %31 = bitcast %"class.std::__1::vector.1129"* %7 to i64*
  %32 = bitcast i8** %29 to i64*
  br label %33

33:                                               ; preds = %364, %24
  %34 = phi i32 [ 0, %24 ], [ %366, %364 ]
  %35 = load i32, i32* %25, align 4
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %44

37:                                               ; preds = %33
  %38 = load i8*, i8** %27, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = bitcast i8* %38 to i16*
  br label %50

44:                                               ; preds = %33
  %45 = load i16*, i16** %26, align 8
  %46 = sext i32 %34 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = bitcast i16* %45 to i8*
  br label %50

50:                                               ; preds = %44, %37
  %51 = phi i8* [ %38, %37 ], [ %49, %44 ]
  %52 = phi i16* [ %43, %37 ], [ %45, %44 ]
  %53 = phi i16 [ %42, %37 ], [ %48, %44 ]
  %54 = icmp eq i16 %53, 37
  br i1 %54, label %55, label %319

55:                                               ; preds = %50
  %56 = add nsw i32 %34, 2
  %57 = icmp slt i32 %56, %22
  br i1 %57, label %58, label %368

58:                                               ; preds = %55
  %59 = add nsw i32 %34, 1
  %60 = sext i32 %59 to i64
  br i1 %36, label %61, label %69

61:                                               ; preds = %58
  %62 = getelementptr inbounds i8, i8* %51, i64 %60
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = sext i32 %56 to i64
  %66 = getelementptr inbounds i8, i8* %51, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  br label %75

69:                                               ; preds = %58
  %70 = getelementptr inbounds i16, i16* %52, i64 %60
  %71 = load i16, i16* %70, align 2
  %72 = sext i32 %56 to i64
  %73 = getelementptr inbounds i16, i16* %52, i64 %72
  %74 = load i16, i16* %73, align 2
  br label %75

75:                                               ; preds = %69, %61
  %76 = phi i16 [ %64, %61 ], [ %71, %69 ]
  %77 = phi i16 [ %68, %61 ], [ %74, %69 ]
  %78 = icmp ugt i16 %76, 102
  br i1 %78, label %368, label %79

79:                                               ; preds = %75
  %80 = zext i16 %76 to i32
  %81 = add nsw i32 %80, -48
  %82 = icmp ult i32 %81, 10
  br i1 %82, label %89, label %83

83:                                               ; preds = %79
  %84 = or i32 %81, 32
  %85 = add nsw i32 %84, -49
  %86 = icmp ult i32 %85, 6
  %87 = add nsw i32 %84, -39
  %88 = select i1 %86, i32 %87, i32 -1
  br label %89

89:                                               ; preds = %83, %79
  %90 = phi i32 [ %88, %83 ], [ %81, %79 ]
  %91 = icmp eq i32 %90, -1
  %92 = icmp ugt i16 %77, 102
  %93 = or i1 %92, %91
  br i1 %93, label %368, label %94

94:                                               ; preds = %89
  %95 = zext i16 %77 to i32
  %96 = add nsw i32 %95, -48
  %97 = icmp ult i32 %96, 10
  br i1 %97, label %98, label %101

98:                                               ; preds = %94
  %99 = shl nsw i32 %90, 4
  %100 = add nsw i32 %99, %96
  br label %110

101:                                              ; preds = %94
  %102 = or i32 %96, 32
  %103 = add nsw i32 %102, -49
  %104 = icmp ult i32 %103, 6
  %105 = add nsw i32 %102, -39
  br i1 %104, label %106, label %368

106:                                              ; preds = %101
  %107 = icmp eq i32 %105, -1
  %108 = shl nsw i32 %90, 4
  %109 = add nsw i32 %108, %105
  br i1 %107, label %368, label %110

110:                                              ; preds = %106, %98
  %111 = phi i32 [ %109, %106 ], [ %100, %98 ]
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %368, label %113

113:                                              ; preds = %110
  %114 = and i32 %111, 65408
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %118, label %116

116:                                              ; preds = %113
  %117 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_111IntoTwoByteEibiPNS0_6String11FlatContentEPNSt3__16vectorItNS5_9allocatorItEEEE(i32 %34, i1 zeroext %2, i32 %22, %"class.v8::internal::String::FlatContent"* nonnull %5, %"class.std::__1::vector.1136"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  br i1 %117, label %415, label %372

118:                                              ; preds = %113
  br i1 %2, label %119, label %276

119:                                              ; preds = %118
  %120 = trunc i32 %111 to i16
  switch i16 %120, label %276 [
    i16 35, label %121
    i16 36, label %121
    i16 38, label %121
    i16 43, label %121
    i16 44, label %121
    i16 47, label %121
    i16 58, label %121
    i16 59, label %121
    i16 61, label %121
    i16 63, label %121
    i16 64, label %121
  ]

121:                                              ; preds = %119, %119, %119, %119, %119, %119, %119, %119, %119, %119, %119
  %122 = load i8*, i8** %28, align 8
  %123 = load i8*, i8** %29, align 8
  %124 = icmp ult i8* %122, %123
  %125 = ptrtoint i8* %123 to i64
  br i1 %124, label %126, label %129

126:                                              ; preds = %121
  store i8 37, i8* %122, align 1
  %127 = getelementptr inbounds i8, i8* %122, i64 1
  %128 = ptrtoint i8* %127 to i64
  store i64 %128, i64* %30, align 8
  br label %163

129:                                              ; preds = %121
  %130 = ptrtoint i8* %122 to i64
  %131 = load i64, i64* %31, align 8
  %132 = sub i64 %130, %131
  %133 = add i64 %132, 1
  %134 = icmp slt i64 %133, 0
  %135 = inttoptr i64 %131 to i8*
  br i1 %134, label %136, label %138

136:                                              ; preds = %129
  %137 = bitcast %"class.std::__1::vector.1129"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %137) #11
  unreachable

138:                                              ; preds = %129
  %139 = sub i64 %125, %131
  %140 = icmp ult i64 %139, 4611686018427387903
  br i1 %140, label %141, label %146

141:                                              ; preds = %138
  %142 = shl i64 %139, 1
  %143 = icmp ult i64 %142, %133
  %144 = select i1 %143, i64 %133, i64 %142
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %149, label %146

146:                                              ; preds = %141, %138
  %147 = phi i64 [ %144, %141 ], [ 9223372036854775807, %138 ]
  %148 = call i8* @_Znwm(i64 %147) #12
  br label %149

149:                                              ; preds = %146, %141
  %150 = phi i64 [ %147, %146 ], [ 0, %141 ]
  %151 = phi i8* [ %148, %146 ], [ null, %141 ]
  %152 = getelementptr inbounds i8, i8* %151, i64 %132
  %153 = getelementptr inbounds i8, i8* %151, i64 %150
  %154 = ptrtoint i8* %153 to i64
  store i8 37, i8* %152, align 1
  %155 = getelementptr inbounds i8, i8* %152, i64 1
  %156 = ptrtoint i8* %155 to i64
  %157 = ptrtoint i8* %151 to i64
  %158 = icmp sgt i64 %132, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %135, i64 %132, i1 false) #10
  br label %160

160:                                              ; preds = %159, %149
  store i64 %157, i64* %31, align 8
  store i64 %156, i64* %30, align 8
  store i64 %154, i64* %32, align 8
  %161 = icmp eq i64 %131, 0
  br i1 %161, label %163, label %162

162:                                              ; preds = %160
  call void @_ZdlPv(i8* nonnull %135) #12
  br label %163

163:                                              ; preds = %162, %160, %126
  %164 = load i32, i32* %25, align 4
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %175

166:                                              ; preds = %163
  %167 = load i8*, i8** %27, align 8
  %168 = getelementptr inbounds i8, i8* %167, i64 %60
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i16
  %171 = sext i32 %56 to i64
  %172 = getelementptr inbounds i8, i8* %167, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i16
  br label %182

175:                                              ; preds = %163
  %176 = load i16*, i16** %26, align 8
  %177 = getelementptr inbounds i16, i16* %176, i64 %60
  %178 = load i16, i16* %177, align 2
  %179 = sext i32 %56 to i64
  %180 = getelementptr inbounds i16, i16* %176, i64 %179
  %181 = load i16, i16* %180, align 2
  br label %182

182:                                              ; preds = %175, %166
  %183 = phi i16 [ %170, %166 ], [ %178, %175 ]
  %184 = phi i16 [ %174, %166 ], [ %181, %175 ]
  %185 = trunc i16 %183 to i8
  %186 = load i8*, i8** %28, align 8
  %187 = load i8*, i8** %29, align 8
  %188 = icmp ult i8* %186, %187
  %189 = ptrtoint i8* %187 to i64
  br i1 %188, label %190, label %193

190:                                              ; preds = %182
  store i8 %185, i8* %186, align 1
  %191 = getelementptr inbounds i8, i8* %186, i64 1
  %192 = ptrtoint i8* %191 to i64
  store i64 %192, i64* %30, align 8
  br label %229

193:                                              ; preds = %182
  %194 = ptrtoint i8* %186 to i64
  %195 = load i64, i64* %31, align 8
  %196 = sub i64 %194, %195
  %197 = add i64 %196, 1
  %198 = icmp slt i64 %197, 0
  %199 = inttoptr i64 %195 to i8*
  br i1 %198, label %200, label %202

200:                                              ; preds = %193
  %201 = bitcast %"class.std::__1::vector.1129"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %201) #11
  unreachable

202:                                              ; preds = %193
  %203 = sub i64 %189, %195
  %204 = icmp ult i64 %203, 4611686018427387903
  br i1 %204, label %205, label %210

205:                                              ; preds = %202
  %206 = shl i64 %203, 1
  %207 = icmp ult i64 %206, %197
  %208 = select i1 %207, i64 %197, i64 %206
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %213, label %210

210:                                              ; preds = %205, %202
  %211 = phi i64 [ %208, %205 ], [ 9223372036854775807, %202 ]
  %212 = call i8* @_Znwm(i64 %211) #12
  br label %213

213:                                              ; preds = %210, %205
  %214 = phi i64 [ %211, %210 ], [ 0, %205 ]
  %215 = phi i8* [ %212, %210 ], [ null, %205 ]
  %216 = getelementptr inbounds i8, i8* %215, i64 %196
  %217 = getelementptr inbounds i8, i8* %215, i64 %214
  %218 = ptrtoint i8* %217 to i64
  store i8 %185, i8* %216, align 1
  %219 = getelementptr inbounds i8, i8* %216, i64 1
  %220 = ptrtoint i8* %219 to i64
  %221 = ptrtoint i8* %215 to i64
  %222 = icmp sgt i64 %196, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %213
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %215, i8* align 1 %199, i64 %196, i1 false) #10
  br label %224

224:                                              ; preds = %223, %213
  store i64 %221, i64* %31, align 8
  store i64 %220, i64* %30, align 8
  store i64 %218, i64* %32, align 8
  %225 = icmp eq i64 %195, 0
  br i1 %225, label %229, label %226

226:                                              ; preds = %224
  call void @_ZdlPv(i8* nonnull %199) #12
  %227 = load i8*, i8** %28, align 8
  %228 = ptrtoint i8* %227 to i64
  br label %229

229:                                              ; preds = %226, %224, %190
  %230 = phi i64 [ %192, %190 ], [ %220, %224 ], [ %228, %226 ]
  %231 = phi i8* [ %191, %190 ], [ %219, %224 ], [ %227, %226 ]
  %232 = trunc i16 %184 to i8
  %233 = load i8*, i8** %29, align 8
  %234 = icmp ult i8* %231, %233
  %235 = ptrtoint i8* %233 to i64
  br i1 %234, label %236, label %239

236:                                              ; preds = %229
  store i8 %232, i8* %231, align 1
  %237 = getelementptr inbounds i8, i8* %231, i64 1
  %238 = ptrtoint i8* %237 to i64
  store i64 %238, i64* %30, align 8
  br label %364

239:                                              ; preds = %229
  %240 = ptrtoint i8* %231 to i64
  %241 = load i64, i64* %31, align 8
  %242 = sub i64 %240, %241
  %243 = add i64 %242, 1
  %244 = icmp slt i64 %243, 0
  %245 = inttoptr i64 %241 to i8*
  br i1 %244, label %246, label %248

246:                                              ; preds = %239
  %247 = bitcast %"class.std::__1::vector.1129"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %247) #11
  unreachable

248:                                              ; preds = %239
  %249 = sub i64 %235, %241
  %250 = icmp ult i64 %249, 4611686018427387903
  br i1 %250, label %251, label %256

251:                                              ; preds = %248
  %252 = shl i64 %249, 1
  %253 = icmp ult i64 %252, %243
  %254 = select i1 %253, i64 %243, i64 %252
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %259, label %256

256:                                              ; preds = %251, %248
  %257 = phi i64 [ %254, %251 ], [ 9223372036854775807, %248 ]
  %258 = call i8* @_Znwm(i64 %257) #12
  br label %259

259:                                              ; preds = %256, %251
  %260 = phi i64 [ %257, %256 ], [ 0, %251 ]
  %261 = phi i8* [ %258, %256 ], [ null, %251 ]
  %262 = getelementptr inbounds i8, i8* %261, i64 %242
  %263 = getelementptr inbounds i8, i8* %261, i64 %260
  %264 = ptrtoint i8* %263 to i64
  store i8 %232, i8* %262, align 1
  %265 = getelementptr inbounds i8, i8* %262, i64 1
  %266 = ptrtoint i8* %265 to i64
  %267 = sub i64 %230, %241
  %268 = sub i64 0, %267
  %269 = getelementptr inbounds i8, i8* %262, i64 %268
  %270 = ptrtoint i8* %269 to i64
  %271 = icmp sgt i64 %267, 0
  br i1 %271, label %272, label %273

272:                                              ; preds = %259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* align 1 %245, i64 %267, i1 false) #10
  br label %273

273:                                              ; preds = %272, %259
  store i64 %270, i64* %31, align 8
  store i64 %266, i64* %30, align 8
  store i64 %264, i64* %32, align 8
  %274 = icmp eq i64 %241, 0
  br i1 %274, label %364, label %275

275:                                              ; preds = %273
  call void @_ZdlPv(i8* nonnull %245) #12
  br label %364

276:                                              ; preds = %119, %118
  %277 = trunc i32 %111 to i8
  %278 = load i8*, i8** %28, align 8
  %279 = load i8*, i8** %29, align 8
  %280 = icmp ult i8* %278, %279
  %281 = ptrtoint i8* %279 to i64
  br i1 %280, label %282, label %285

282:                                              ; preds = %276
  store i8 %277, i8* %278, align 1
  %283 = getelementptr inbounds i8, i8* %278, i64 1
  %284 = ptrtoint i8* %283 to i64
  store i64 %284, i64* %30, align 8
  br label %364

285:                                              ; preds = %276
  %286 = ptrtoint i8* %278 to i64
  %287 = load i64, i64* %31, align 8
  %288 = sub i64 %286, %287
  %289 = add i64 %288, 1
  %290 = icmp slt i64 %289, 0
  %291 = inttoptr i64 %287 to i8*
  br i1 %290, label %292, label %294

292:                                              ; preds = %285
  %293 = bitcast %"class.std::__1::vector.1129"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %293) #11
  unreachable

294:                                              ; preds = %285
  %295 = sub i64 %281, %287
  %296 = icmp ult i64 %295, 4611686018427387903
  br i1 %296, label %297, label %302

297:                                              ; preds = %294
  %298 = shl i64 %295, 1
  %299 = icmp ult i64 %298, %289
  %300 = select i1 %299, i64 %289, i64 %298
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %305, label %302

302:                                              ; preds = %297, %294
  %303 = phi i64 [ %300, %297 ], [ 9223372036854775807, %294 ]
  %304 = call i8* @_Znwm(i64 %303) #12
  br label %305

305:                                              ; preds = %302, %297
  %306 = phi i64 [ %303, %302 ], [ 0, %297 ]
  %307 = phi i8* [ %304, %302 ], [ null, %297 ]
  %308 = getelementptr inbounds i8, i8* %307, i64 %288
  %309 = getelementptr inbounds i8, i8* %307, i64 %306
  %310 = ptrtoint i8* %309 to i64
  store i8 %277, i8* %308, align 1
  %311 = getelementptr inbounds i8, i8* %308, i64 1
  %312 = ptrtoint i8* %311 to i64
  %313 = ptrtoint i8* %307 to i64
  %314 = icmp sgt i64 %288, 0
  br i1 %314, label %315, label %316

315:                                              ; preds = %305
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %307, i8* align 1 %291, i64 %288, i1 false) #10
  br label %316

316:                                              ; preds = %315, %305
  store i64 %313, i64* %31, align 8
  store i64 %312, i64* %30, align 8
  store i64 %310, i64* %32, align 8
  %317 = icmp eq i64 %287, 0
  br i1 %317, label %364, label %318

318:                                              ; preds = %316
  call void @_ZdlPv(i8* nonnull %291) #12
  br label %364

319:                                              ; preds = %50
  %320 = icmp ugt i16 %53, 127
  br i1 %320, label %370, label %321

321:                                              ; preds = %319
  %322 = trunc i16 %53 to i8
  %323 = load i8*, i8** %28, align 8
  %324 = load i8*, i8** %29, align 8
  %325 = icmp ult i8* %323, %324
  %326 = ptrtoint i8* %324 to i64
  br i1 %325, label %327, label %330

327:                                              ; preds = %321
  store i8 %322, i8* %323, align 1
  %328 = getelementptr inbounds i8, i8* %323, i64 1
  %329 = ptrtoint i8* %328 to i64
  store i64 %329, i64* %30, align 8
  br label %364

330:                                              ; preds = %321
  %331 = ptrtoint i8* %323 to i64
  %332 = load i64, i64* %31, align 8
  %333 = sub i64 %331, %332
  %334 = add i64 %333, 1
  %335 = icmp slt i64 %334, 0
  %336 = inttoptr i64 %332 to i8*
  br i1 %335, label %337, label %339

337:                                              ; preds = %330
  %338 = bitcast %"class.std::__1::vector.1129"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %338) #11
  unreachable

339:                                              ; preds = %330
  %340 = sub i64 %326, %332
  %341 = icmp ult i64 %340, 4611686018427387903
  br i1 %341, label %342, label %347

342:                                              ; preds = %339
  %343 = shl i64 %340, 1
  %344 = icmp ult i64 %343, %334
  %345 = select i1 %344, i64 %334, i64 %343
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %350, label %347

347:                                              ; preds = %342, %339
  %348 = phi i64 [ %345, %342 ], [ 9223372036854775807, %339 ]
  %349 = call i8* @_Znwm(i64 %348) #12
  br label %350

350:                                              ; preds = %347, %342
  %351 = phi i64 [ %348, %347 ], [ 0, %342 ]
  %352 = phi i8* [ %349, %347 ], [ null, %342 ]
  %353 = getelementptr inbounds i8, i8* %352, i64 %333
  %354 = getelementptr inbounds i8, i8* %352, i64 %351
  %355 = ptrtoint i8* %354 to i64
  store i8 %322, i8* %353, align 1
  %356 = getelementptr inbounds i8, i8* %353, i64 1
  %357 = ptrtoint i8* %356 to i64
  %358 = ptrtoint i8* %352 to i64
  %359 = icmp sgt i64 %333, 0
  br i1 %359, label %360, label %361

360:                                              ; preds = %350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %352, i8* align 1 %336, i64 %333, i1 false) #10
  br label %361

361:                                              ; preds = %360, %350
  store i64 %358, i64* %31, align 8
  store i64 %357, i64* %30, align 8
  store i64 %355, i64* %32, align 8
  %362 = icmp eq i64 %332, 0
  br i1 %362, label %364, label %363

363:                                              ; preds = %361
  call void @_ZdlPv(i8* nonnull %336) #12
  br label %364

364:                                              ; preds = %363, %361, %327, %318, %316, %282, %275, %273, %236
  %365 = phi i32 [ %34, %327 ], [ %34, %361 ], [ %34, %363 ], [ %56, %236 ], [ %56, %273 ], [ %56, %275 ], [ %56, %282 ], [ %56, %316 ], [ %56, %318 ]
  %366 = add nsw i32 %365, 1
  %367 = icmp slt i32 %366, %22
  br i1 %367, label %33, label %369

368:                                              ; preds = %55, %110, %75, %89, %106, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  br label %372

369:                                              ; preds = %364, %3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  br label %415

370:                                              ; preds = %319
  %371 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_111IntoTwoByteEibiPNS0_6String11FlatContentEPNSt3__16vectorItNS5_9allocatorItEEEE(i32 %34, i1 zeroext %2, i32 %22, %"class.v8::internal::String::FlatContent"* nonnull %5, %"class.std::__1::vector.1136"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  br i1 %371, label %415, label %372

372:                                              ; preds = %116, %368, %370
  %373 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %374 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load i64, i64* %374, align 8
  %376 = and i64 %375, -4294967296
  %377 = add i64 %375, -1
  %378 = inttoptr i64 %377 to i32*
  %379 = load atomic i32, i32* %378 monotonic, align 4
  %380 = zext i32 %379 to i64
  %381 = or i64 %376, %380
  %382 = add i64 %381, 19
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  %386 = or i64 %376, %385
  %387 = add i64 %386, 979
  %388 = inttoptr i64 %387 to i32*
  %389 = load atomic i32, i32* %388 monotonic, align 4
  %390 = zext i32 %389 to i64
  %391 = or i64 %376, %390
  %392 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %393 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %392, align 8
  %394 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %393, null
  br i1 %394, label %397, label %395

395:                                              ; preds = %372
  %396 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %393, i64 %391) #10
  br label %410

397:                                              ; preds = %372
  %398 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %399 = load i64*, i64** %398, align 8
  %400 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %401 = load i64*, i64** %400, align 8
  %402 = icmp eq i64* %399, %401
  br i1 %402, label %403, label %405

403:                                              ; preds = %397
  %404 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #10
  br label %405

405:                                              ; preds = %403, %397
  %406 = phi i64* [ %404, %403 ], [ %399, %397 ]
  %407 = ptrtoint i64* %406 to i64
  %408 = add i64 %407, 8
  %409 = inttoptr i64 %408 to i64*
  store i64* %409, i64** %398, align 8
  store i64 %391, i64* %406, align 8
  br label %410

410:                                              ; preds = %395, %405
  %411 = phi i64* [ %396, %395 ], [ %406, %405 ]
  %412 = call i64* @_ZN2v88internal7Factory8NewErrorENS0_6HandleINS0_10JSFunctionEEENS0_15MessageTemplateENS2_INS0_6ObjectEEES7_S7_(%"class.v8::internal::Factory"* %373, i64* %411, i32 357, i64* null, i64* null, i64* null) #10
  %413 = load i64, i64* %412, align 8
  %414 = call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %413, %"class.v8::internal::MessageLocation"* null) #10
  br label %531

415:                                              ; preds = %116, %369, %370
  %416 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %8, i64 0, i32 0, i32 0
  %417 = load i16*, i16** %416, align 8
  %418 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %8, i64 0, i32 0, i32 1
  %419 = load i16*, i16** %418, align 8
  %420 = icmp eq i16* %417, %419
  br i1 %420, label %421, label %436

421:                                              ; preds = %415
  %422 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %423 = bitcast %"class.v8::internal::Vector.1144"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %423) #10
  %424 = bitcast %"class.std::__1::vector.1129"* %7 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 1
  %427 = bitcast i8** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = sub i64 %428, %425
  %430 = shl i64 %429, 32
  %431 = ashr exact i64 %430, 32
  %432 = bitcast %"class.v8::internal::Vector.1144"* %9 to i64*
  store i64 %425, i64* %432, align 8
  %433 = getelementptr inbounds %"class.v8::internal::Vector.1144", %"class.v8::internal::Vector.1144"* %9, i64 0, i32 1
  store i64 %431, i64* %433, align 8
  %434 = call i64* @_ZN2v88internal7Factory20NewStringFromOneByteERKNS0_6VectorIKhEENS0_14AllocationTypeE(%"class.v8::internal::Factory"* %422, %"class.v8::internal::Vector.1144"* nonnull dereferenceable(16) %9, i8 zeroext 0) #10
  %435 = ptrtoint i64* %434 to i64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %423) #10
  br label %531

436:                                              ; preds = %415
  %437 = ptrtoint i16* %417 to i64
  %438 = ptrtoint i16* %419 to i64
  %439 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 1
  %440 = bitcast i8** %439 to i64*
  %441 = load i64, i64* %440, align 8
  %442 = bitcast %"class.std::__1::vector.1129"* %7 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = sub i64 %441, %443
  %445 = sub i64 %438, %437
  %446 = lshr exact i64 %445, 1
  %447 = add i64 %444, %446
  %448 = trunc i64 %447 to i32
  %449 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %450 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawTwoByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %449, i32 %448, i8 zeroext 0) #10
  %451 = icmp eq i64* %450, null
  br i1 %451, label %531, label %452

452:                                              ; preds = %436
  %453 = ptrtoint i64* %450 to i64
  %454 = load i64, i64* %450, align 8
  %455 = add i64 %454, 11
  %456 = inttoptr i64 %455 to i16*
  %457 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 0
  %458 = load i8*, i8** %457, align 8
  %459 = load i8*, i8** %439, align 8
  %460 = icmp eq i8* %458, %459
  br i1 %460, label %469, label %461

461:                                              ; preds = %452
  %462 = ptrtoint i8* %458 to i64
  %463 = ptrtoint i8* %459 to i64
  %464 = sub i64 %463, %462
  call void @_ZN2v88internal9CopyCharsIhtEEvPT0_PKT_m(i16* %456, i8* %458, i64 %464)
  %465 = load i64, i64* %440, align 8
  %466 = load i64, i64* %442, align 8
  %467 = sub i64 %465, %466
  %468 = getelementptr inbounds i16, i16* %456, i64 %467
  br label %469

469:                                              ; preds = %461, %452
  %470 = phi i16* [ %456, %452 ], [ %468, %461 ]
  %471 = load i16*, i16** %416, align 8
  %472 = load i16*, i16** %418, align 8
  %473 = icmp eq i16* %471, %472
  br i1 %473, label %531, label %474

474:                                              ; preds = %469
  %475 = ptrtoint i16* %471 to i64
  %476 = ptrtoint i16* %472 to i64
  %477 = sub i64 %476, %475
  %478 = ashr exact i64 %477, 1
  switch i64 %478, label %528 [
    i64 1, label %479
    i64 2, label %481
    i64 3, label %485
    i64 4, label %488
    i64 5, label %492
    i64 6, label %495
    i64 7, label %498
    i64 8, label %501
    i64 9, label %504
    i64 10, label %507
    i64 11, label %510
    i64 12, label %513
    i64 13, label %516
    i64 14, label %519
    i64 15, label %522
    i64 16, label %525
    i64 0, label %531
  ]

479:                                              ; preds = %474
  %480 = load i16, i16* %471, align 2
  store i16 %480, i16* %470, align 2
  br label %531

481:                                              ; preds = %474
  %482 = bitcast i16* %471 to i32*
  %483 = bitcast i16* %470 to i32*
  %484 = load i32, i32* %482, align 2
  store i32 %484, i32* %483, align 2
  br label %531

485:                                              ; preds = %474
  %486 = bitcast i16* %470 to i8*
  %487 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %486, i8* align 2 %487, i64 6, i1 false) #10
  br label %531

488:                                              ; preds = %474
  %489 = bitcast i16* %471 to i64*
  %490 = bitcast i16* %470 to i64*
  %491 = load i64, i64* %489, align 2
  store i64 %491, i64* %490, align 2
  br label %531

492:                                              ; preds = %474
  %493 = bitcast i16* %470 to i8*
  %494 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %493, i8* align 2 %494, i64 10, i1 false) #10
  br label %531

495:                                              ; preds = %474
  %496 = bitcast i16* %470 to i8*
  %497 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %496, i8* align 2 %497, i64 12, i1 false) #10
  br label %531

498:                                              ; preds = %474
  %499 = bitcast i16* %470 to i8*
  %500 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %499, i8* align 2 %500, i64 14, i1 false) #10
  br label %531

501:                                              ; preds = %474
  %502 = bitcast i16* %470 to i8*
  %503 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %502, i8* align 2 %503, i64 16, i1 false) #10
  br label %531

504:                                              ; preds = %474
  %505 = bitcast i16* %470 to i8*
  %506 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %505, i8* align 2 %506, i64 18, i1 false) #10
  br label %531

507:                                              ; preds = %474
  %508 = bitcast i16* %470 to i8*
  %509 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %508, i8* align 2 %509, i64 20, i1 false) #10
  br label %531

510:                                              ; preds = %474
  %511 = bitcast i16* %470 to i8*
  %512 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %511, i8* align 2 %512, i64 22, i1 false) #10
  br label %531

513:                                              ; preds = %474
  %514 = bitcast i16* %470 to i8*
  %515 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %514, i8* align 2 %515, i64 24, i1 false) #10
  br label %531

516:                                              ; preds = %474
  %517 = bitcast i16* %470 to i8*
  %518 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %517, i8* align 2 %518, i64 26, i1 false) #10
  br label %531

519:                                              ; preds = %474
  %520 = bitcast i16* %470 to i8*
  %521 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %520, i8* align 2 %521, i64 28, i1 false) #10
  br label %531

522:                                              ; preds = %474
  %523 = bitcast i16* %470 to i8*
  %524 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %523, i8* align 2 %524, i64 30, i1 false) #10
  br label %531

525:                                              ; preds = %474
  %526 = bitcast i16* %470 to i8*
  %527 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %526, i8* align 2 %527, i64 32, i1 false) #10
  br label %531

528:                                              ; preds = %474
  %529 = bitcast i16* %470 to i8*
  %530 = bitcast i16* %471 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %529, i8* align 2 %530, i64 %477, i1 false) #10
  br label %531

531:                                              ; preds = %436, %528, %525, %522, %519, %516, %513, %510, %507, %504, %501, %498, %495, %492, %488, %485, %481, %479, %474, %469, %421, %410
  %532 = phi i64 [ %435, %421 ], [ 0, %410 ], [ 0, %436 ], [ %453, %528 ], [ %453, %525 ], [ %453, %522 ], [ %453, %519 ], [ %453, %516 ], [ %453, %513 ], [ %453, %510 ], [ %453, %507 ], [ %453, %504 ], [ %453, %501 ], [ %453, %498 ], [ %453, %495 ], [ %453, %492 ], [ %453, %488 ], [ %453, %485 ], [ %453, %481 ], [ %453, %479 ], [ %453, %474 ], [ %453, %469 ]
  %533 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %8, i64 0, i32 0, i32 0
  %534 = load i16*, i16** %533, align 8
  %535 = icmp eq i16* %534, null
  br i1 %535, label %541, label %536

536:                                              ; preds = %531
  %537 = ptrtoint i16* %534 to i64
  %538 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %8, i64 0, i32 0, i32 1
  %539 = bitcast i16** %538 to i64*
  store i64 %537, i64* %539, align 8
  %540 = bitcast i16* %534 to i8*
  call void @_ZdlPv(i8* %540) #12
  br label %541

541:                                              ; preds = %531, %536
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10
  %542 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 0
  %543 = load i8*, i8** %542, align 8
  %544 = icmp eq i8* %543, null
  br i1 %544, label %549, label %545

545:                                              ; preds = %541
  %546 = ptrtoint i8* %543 to i64
  %547 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %7, i64 0, i32 0, i32 1
  %548 = bitcast i8** %547 to i64*
  store i64 %546, i64* %548, align 8
  call void @_ZdlPv(i8* nonnull %543) #12
  br label %549

549:                                              ; preds = %541, %545
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  %550 = inttoptr i64 %532 to i64*
  ret i64* %550
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #2 comdat align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 7
  %12 = inttoptr i64 %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = icmp ult i16 %13, 64
  br i1 %14, label %15, label %72

15:                                               ; preds = %3
  %16 = load atomic i32, i32* %7 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = and i16 %21, 7
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %72

24:                                               ; preds = %15
  %25 = load atomic i32, i32* %7 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %5, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = and i16 %30, 7
  %32 = icmp eq i16 %31, 1
  br i1 %32, label %33, label %43

33:                                               ; preds = %24
  %34 = add i64 %4, 15
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %5, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %70

43:                                               ; preds = %24, %33
  %44 = load i64, i64* %1, align 8
  %45 = and i64 %44, -4294967296
  %46 = add i64 %44, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %52 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %51, align 8
  %53 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %43
  %55 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %52, i64 %50) #10
  %56 = load i64, i64* %55, align 8
  br label %72

57:                                               ; preds = %43
  %58 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %61 = load i64*, i64** %60, align 8
  %62 = icmp eq i64* %59, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  %64 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #10
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64* [ %64, %63 ], [ %59, %57 ]
  %67 = ptrtoint i64* %66 to i64
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  store i64* %69, i64** %58, align 8
  store i64 %50, i64* %66, align 8
  br label %72

70:                                               ; preds = %33
  %71 = tail call i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext %2) #10
  br label %118

72:                                               ; preds = %65, %54, %3, %15
  %73 = phi i64 [ %4, %15 ], [ %4, %3 ], [ %50, %65 ], [ %56, %54 ]
  %74 = phi i64* [ %1, %15 ], [ %1, %3 ], [ %66, %65 ], [ %55, %54 ]
  %75 = and i64 %73, -4294967296
  %76 = add i64 %73, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %75, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = icmp ult i16 %83, 64
  br i1 %84, label %85, label %118

85:                                               ; preds = %72
  %86 = load atomic i32, i32* %77 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %75, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 7
  %93 = icmp eq i16 %92, 5
  br i1 %93, label %94, label %118

94:                                               ; preds = %85
  %95 = add i64 %73, 11
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %75, %98
  %100 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %101 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %100, align 8
  %102 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %94
  %104 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %101, i64 %99) #10
  br label %118

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %107 = load i64*, i64** %106, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %109 = load i64*, i64** %108, align 8
  %110 = icmp eq i64* %107, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %105
  %112 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #10
  br label %113

113:                                              ; preds = %111, %105
  %114 = phi i64* [ %112, %111 ], [ %107, %105 ]
  %115 = ptrtoint i64* %114 to i64
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  store i64* %117, i64** %106, align 8
  store i64 %99, i64* %114, align 8
  br label %118

118:                                              ; preds = %72, %85, %103, %113, %70
  %119 = phi i64* [ %71, %70 ], [ %74, %85 ], [ %104, %103 ], [ %114, %113 ], [ %74, %72 ]
  ret i64* %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64* @_ZN2v88internal7Factory20NewStringFromOneByteERKNS0_6VectorIKhEENS0_14AllocationTypeE(%"class.v8::internal::Factory"*, %"class.v8::internal::Vector.1144"* dereferenceable(16), i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawTwoByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal9CopyCharsIhtEEvPT0_PKT_m(i16*, i8*, i64) local_unnamed_addr #0 comdat {
  %4 = bitcast i16* %0 to i8*
  switch i64 %2, label %533 [
    i64 1, label %530
    i64 2, label %523
    i64 3, label %512
    i64 4, label %497
    i64 5, label %478
    i64 6, label %455
    i64 7, label %428
    i64 8, label %397
    i64 9, label %362
    i64 10, label %323
    i64 11, label %280
    i64 12, label %233
    i64 13, label %182
    i64 14, label %127
    i64 15, label %68
    i64 16, label %5
  ]

5:                                                ; preds = %3
  %6 = load i8, i8* %1, align 1
  %7 = zext i8 %6 to i16
  store i16 %7, i16* %0, align 2
  %8 = getelementptr inbounds i16, i16* %0, i64 1
  %9 = getelementptr inbounds i8, i8* %1, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  store i16 %11, i16* %8, align 2
  %12 = getelementptr inbounds i16, i16* %0, i64 2
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  store i16 %15, i16* %12, align 2
  %16 = getelementptr inbounds i16, i16* %0, i64 3
  %17 = getelementptr inbounds i8, i8* %1, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  store i16 %19, i16* %16, align 2
  %20 = getelementptr inbounds i16, i16* %0, i64 4
  %21 = getelementptr inbounds i8, i8* %1, i64 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  store i16 %23, i16* %20, align 2
  %24 = getelementptr inbounds i16, i16* %0, i64 5
  %25 = getelementptr inbounds i8, i8* %1, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  store i16 %27, i16* %24, align 2
  %28 = getelementptr inbounds i16, i16* %0, i64 6
  %29 = getelementptr inbounds i8, i8* %1, i64 6
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  store i16 %31, i16* %28, align 2
  %32 = getelementptr inbounds i16, i16* %0, i64 7
  %33 = getelementptr inbounds i8, i8* %1, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  store i16 %35, i16* %32, align 2
  %36 = getelementptr inbounds i16, i16* %0, i64 8
  %37 = getelementptr inbounds i8, i8* %1, i64 8
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  store i16 %39, i16* %36, align 2
  %40 = getelementptr inbounds i16, i16* %0, i64 9
  %41 = getelementptr inbounds i8, i8* %1, i64 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  store i16 %43, i16* %40, align 2
  %44 = getelementptr inbounds i16, i16* %0, i64 10
  %45 = getelementptr inbounds i8, i8* %1, i64 10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  store i16 %47, i16* %44, align 2
  %48 = getelementptr inbounds i16, i16* %0, i64 11
  %49 = getelementptr inbounds i8, i8* %1, i64 11
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i16
  store i16 %51, i16* %48, align 2
  %52 = getelementptr inbounds i16, i16* %0, i64 12
  %53 = getelementptr inbounds i8, i8* %1, i64 12
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i16
  store i16 %55, i16* %52, align 2
  %56 = getelementptr inbounds i16, i16* %0, i64 13
  %57 = getelementptr inbounds i8, i8* %1, i64 13
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  store i16 %59, i16* %56, align 2
  %60 = getelementptr inbounds i16, i16* %0, i64 14
  %61 = getelementptr inbounds i8, i8* %1, i64 14
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  store i16 %63, i16* %60, align 2
  %64 = getelementptr inbounds i16, i16* %0, i64 15
  %65 = getelementptr inbounds i8, i8* %1, i64 15
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  store i16 %67, i16* %64, align 2
  br label %615

68:                                               ; preds = %3
  %69 = load i8, i8* %1, align 1
  %70 = zext i8 %69 to i16
  store i16 %70, i16* %0, align 2
  %71 = getelementptr inbounds i16, i16* %0, i64 1
  %72 = getelementptr inbounds i8, i8* %1, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  store i16 %74, i16* %71, align 2
  %75 = getelementptr inbounds i16, i16* %0, i64 2
  %76 = getelementptr inbounds i8, i8* %1, i64 2
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  store i16 %78, i16* %75, align 2
  %79 = getelementptr inbounds i16, i16* %0, i64 3
  %80 = getelementptr inbounds i8, i8* %1, i64 3
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  store i16 %82, i16* %79, align 2
  %83 = getelementptr inbounds i16, i16* %0, i64 4
  %84 = getelementptr inbounds i8, i8* %1, i64 4
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  store i16 %86, i16* %83, align 2
  %87 = getelementptr inbounds i16, i16* %0, i64 5
  %88 = getelementptr inbounds i8, i8* %1, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i16
  store i16 %90, i16* %87, align 2
  %91 = getelementptr inbounds i16, i16* %0, i64 6
  %92 = getelementptr inbounds i8, i8* %1, i64 6
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  store i16 %94, i16* %91, align 2
  %95 = getelementptr inbounds i16, i16* %0, i64 7
  %96 = getelementptr inbounds i8, i8* %1, i64 7
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i16
  store i16 %98, i16* %95, align 2
  %99 = getelementptr inbounds i16, i16* %0, i64 8
  %100 = getelementptr inbounds i8, i8* %1, i64 8
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  store i16 %102, i16* %99, align 2
  %103 = getelementptr inbounds i16, i16* %0, i64 9
  %104 = getelementptr inbounds i8, i8* %1, i64 9
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  store i16 %106, i16* %103, align 2
  %107 = getelementptr inbounds i16, i16* %0, i64 10
  %108 = getelementptr inbounds i8, i8* %1, i64 10
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  store i16 %110, i16* %107, align 2
  %111 = getelementptr inbounds i16, i16* %0, i64 11
  %112 = getelementptr inbounds i8, i8* %1, i64 11
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  store i16 %114, i16* %111, align 2
  %115 = getelementptr inbounds i16, i16* %0, i64 12
  %116 = getelementptr inbounds i8, i8* %1, i64 12
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i16
  store i16 %118, i16* %115, align 2
  %119 = getelementptr inbounds i16, i16* %0, i64 13
  %120 = getelementptr inbounds i8, i8* %1, i64 13
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i16
  store i16 %122, i16* %119, align 2
  %123 = getelementptr inbounds i16, i16* %0, i64 14
  %124 = getelementptr inbounds i8, i8* %1, i64 14
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  store i16 %126, i16* %123, align 2
  br label %615

127:                                              ; preds = %3
  %128 = load i8, i8* %1, align 1
  %129 = zext i8 %128 to i16
  store i16 %129, i16* %0, align 2
  %130 = getelementptr inbounds i16, i16* %0, i64 1
  %131 = getelementptr inbounds i8, i8* %1, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  store i16 %133, i16* %130, align 2
  %134 = getelementptr inbounds i16, i16* %0, i64 2
  %135 = getelementptr inbounds i8, i8* %1, i64 2
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  store i16 %137, i16* %134, align 2
  %138 = getelementptr inbounds i16, i16* %0, i64 3
  %139 = getelementptr inbounds i8, i8* %1, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i16
  store i16 %141, i16* %138, align 2
  %142 = getelementptr inbounds i16, i16* %0, i64 4
  %143 = getelementptr inbounds i8, i8* %1, i64 4
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i16
  store i16 %145, i16* %142, align 2
  %146 = getelementptr inbounds i16, i16* %0, i64 5
  %147 = getelementptr inbounds i8, i8* %1, i64 5
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  store i16 %149, i16* %146, align 2
  %150 = getelementptr inbounds i16, i16* %0, i64 6
  %151 = getelementptr inbounds i8, i8* %1, i64 6
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  store i16 %153, i16* %150, align 2
  %154 = getelementptr inbounds i16, i16* %0, i64 7
  %155 = getelementptr inbounds i8, i8* %1, i64 7
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i16
  store i16 %157, i16* %154, align 2
  %158 = getelementptr inbounds i16, i16* %0, i64 8
  %159 = getelementptr inbounds i8, i8* %1, i64 8
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i16
  store i16 %161, i16* %158, align 2
  %162 = getelementptr inbounds i16, i16* %0, i64 9
  %163 = getelementptr inbounds i8, i8* %1, i64 9
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  store i16 %165, i16* %162, align 2
  %166 = getelementptr inbounds i16, i16* %0, i64 10
  %167 = getelementptr inbounds i8, i8* %1, i64 10
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i16
  store i16 %169, i16* %166, align 2
  %170 = getelementptr inbounds i16, i16* %0, i64 11
  %171 = getelementptr inbounds i8, i8* %1, i64 11
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i16
  store i16 %173, i16* %170, align 2
  %174 = getelementptr inbounds i16, i16* %0, i64 12
  %175 = getelementptr inbounds i8, i8* %1, i64 12
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i16
  store i16 %177, i16* %174, align 2
  %178 = getelementptr inbounds i16, i16* %0, i64 13
  %179 = getelementptr inbounds i8, i8* %1, i64 13
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  store i16 %181, i16* %178, align 2
  br label %615

182:                                              ; preds = %3
  %183 = load i8, i8* %1, align 1
  %184 = zext i8 %183 to i16
  store i16 %184, i16* %0, align 2
  %185 = getelementptr inbounds i16, i16* %0, i64 1
  %186 = getelementptr inbounds i8, i8* %1, i64 1
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i16
  store i16 %188, i16* %185, align 2
  %189 = getelementptr inbounds i16, i16* %0, i64 2
  %190 = getelementptr inbounds i8, i8* %1, i64 2
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i16
  store i16 %192, i16* %189, align 2
  %193 = getelementptr inbounds i16, i16* %0, i64 3
  %194 = getelementptr inbounds i8, i8* %1, i64 3
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i16
  store i16 %196, i16* %193, align 2
  %197 = getelementptr inbounds i16, i16* %0, i64 4
  %198 = getelementptr inbounds i8, i8* %1, i64 4
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  store i16 %200, i16* %197, align 2
  %201 = getelementptr inbounds i16, i16* %0, i64 5
  %202 = getelementptr inbounds i8, i8* %1, i64 5
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i16
  store i16 %204, i16* %201, align 2
  %205 = getelementptr inbounds i16, i16* %0, i64 6
  %206 = getelementptr inbounds i8, i8* %1, i64 6
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i16
  store i16 %208, i16* %205, align 2
  %209 = getelementptr inbounds i16, i16* %0, i64 7
  %210 = getelementptr inbounds i8, i8* %1, i64 7
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i16
  store i16 %212, i16* %209, align 2
  %213 = getelementptr inbounds i16, i16* %0, i64 8
  %214 = getelementptr inbounds i8, i8* %1, i64 8
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i16
  store i16 %216, i16* %213, align 2
  %217 = getelementptr inbounds i16, i16* %0, i64 9
  %218 = getelementptr inbounds i8, i8* %1, i64 9
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  store i16 %220, i16* %217, align 2
  %221 = getelementptr inbounds i16, i16* %0, i64 10
  %222 = getelementptr inbounds i8, i8* %1, i64 10
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i16
  store i16 %224, i16* %221, align 2
  %225 = getelementptr inbounds i16, i16* %0, i64 11
  %226 = getelementptr inbounds i8, i8* %1, i64 11
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i16
  store i16 %228, i16* %225, align 2
  %229 = getelementptr inbounds i16, i16* %0, i64 12
  %230 = getelementptr inbounds i8, i8* %1, i64 12
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i16
  store i16 %232, i16* %229, align 2
  br label %615

233:                                              ; preds = %3
  %234 = load i8, i8* %1, align 1
  %235 = zext i8 %234 to i16
  store i16 %235, i16* %0, align 2
  %236 = getelementptr inbounds i16, i16* %0, i64 1
  %237 = getelementptr inbounds i8, i8* %1, i64 1
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i16
  store i16 %239, i16* %236, align 2
  %240 = getelementptr inbounds i16, i16* %0, i64 2
  %241 = getelementptr inbounds i8, i8* %1, i64 2
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i16
  store i16 %243, i16* %240, align 2
  %244 = getelementptr inbounds i16, i16* %0, i64 3
  %245 = getelementptr inbounds i8, i8* %1, i64 3
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i16
  store i16 %247, i16* %244, align 2
  %248 = getelementptr inbounds i16, i16* %0, i64 4
  %249 = getelementptr inbounds i8, i8* %1, i64 4
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i16
  store i16 %251, i16* %248, align 2
  %252 = getelementptr inbounds i16, i16* %0, i64 5
  %253 = getelementptr inbounds i8, i8* %1, i64 5
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i16
  store i16 %255, i16* %252, align 2
  %256 = getelementptr inbounds i16, i16* %0, i64 6
  %257 = getelementptr inbounds i8, i8* %1, i64 6
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i16
  store i16 %259, i16* %256, align 2
  %260 = getelementptr inbounds i16, i16* %0, i64 7
  %261 = getelementptr inbounds i8, i8* %1, i64 7
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i16
  store i16 %263, i16* %260, align 2
  %264 = getelementptr inbounds i16, i16* %0, i64 8
  %265 = getelementptr inbounds i8, i8* %1, i64 8
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i16
  store i16 %267, i16* %264, align 2
  %268 = getelementptr inbounds i16, i16* %0, i64 9
  %269 = getelementptr inbounds i8, i8* %1, i64 9
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i16
  store i16 %271, i16* %268, align 2
  %272 = getelementptr inbounds i16, i16* %0, i64 10
  %273 = getelementptr inbounds i8, i8* %1, i64 10
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i16
  store i16 %275, i16* %272, align 2
  %276 = getelementptr inbounds i16, i16* %0, i64 11
  %277 = getelementptr inbounds i8, i8* %1, i64 11
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i16
  store i16 %279, i16* %276, align 2
  br label %615

280:                                              ; preds = %3
  %281 = load i8, i8* %1, align 1
  %282 = zext i8 %281 to i16
  store i16 %282, i16* %0, align 2
  %283 = getelementptr inbounds i16, i16* %0, i64 1
  %284 = getelementptr inbounds i8, i8* %1, i64 1
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i16
  store i16 %286, i16* %283, align 2
  %287 = getelementptr inbounds i16, i16* %0, i64 2
  %288 = getelementptr inbounds i8, i8* %1, i64 2
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i16
  store i16 %290, i16* %287, align 2
  %291 = getelementptr inbounds i16, i16* %0, i64 3
  %292 = getelementptr inbounds i8, i8* %1, i64 3
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i16
  store i16 %294, i16* %291, align 2
  %295 = getelementptr inbounds i16, i16* %0, i64 4
  %296 = getelementptr inbounds i8, i8* %1, i64 4
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i16
  store i16 %298, i16* %295, align 2
  %299 = getelementptr inbounds i16, i16* %0, i64 5
  %300 = getelementptr inbounds i8, i8* %1, i64 5
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i16
  store i16 %302, i16* %299, align 2
  %303 = getelementptr inbounds i16, i16* %0, i64 6
  %304 = getelementptr inbounds i8, i8* %1, i64 6
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i16
  store i16 %306, i16* %303, align 2
  %307 = getelementptr inbounds i16, i16* %0, i64 7
  %308 = getelementptr inbounds i8, i8* %1, i64 7
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i16
  store i16 %310, i16* %307, align 2
  %311 = getelementptr inbounds i16, i16* %0, i64 8
  %312 = getelementptr inbounds i8, i8* %1, i64 8
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i16
  store i16 %314, i16* %311, align 2
  %315 = getelementptr inbounds i16, i16* %0, i64 9
  %316 = getelementptr inbounds i8, i8* %1, i64 9
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i16
  store i16 %318, i16* %315, align 2
  %319 = getelementptr inbounds i16, i16* %0, i64 10
  %320 = getelementptr inbounds i8, i8* %1, i64 10
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i16
  store i16 %322, i16* %319, align 2
  br label %615

323:                                              ; preds = %3
  %324 = load i8, i8* %1, align 1
  %325 = zext i8 %324 to i16
  store i16 %325, i16* %0, align 2
  %326 = getelementptr inbounds i16, i16* %0, i64 1
  %327 = getelementptr inbounds i8, i8* %1, i64 1
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i16
  store i16 %329, i16* %326, align 2
  %330 = getelementptr inbounds i16, i16* %0, i64 2
  %331 = getelementptr inbounds i8, i8* %1, i64 2
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i16
  store i16 %333, i16* %330, align 2
  %334 = getelementptr inbounds i16, i16* %0, i64 3
  %335 = getelementptr inbounds i8, i8* %1, i64 3
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i16
  store i16 %337, i16* %334, align 2
  %338 = getelementptr inbounds i16, i16* %0, i64 4
  %339 = getelementptr inbounds i8, i8* %1, i64 4
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i16
  store i16 %341, i16* %338, align 2
  %342 = getelementptr inbounds i16, i16* %0, i64 5
  %343 = getelementptr inbounds i8, i8* %1, i64 5
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i16
  store i16 %345, i16* %342, align 2
  %346 = getelementptr inbounds i16, i16* %0, i64 6
  %347 = getelementptr inbounds i8, i8* %1, i64 6
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i16
  store i16 %349, i16* %346, align 2
  %350 = getelementptr inbounds i16, i16* %0, i64 7
  %351 = getelementptr inbounds i8, i8* %1, i64 7
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i16
  store i16 %353, i16* %350, align 2
  %354 = getelementptr inbounds i16, i16* %0, i64 8
  %355 = getelementptr inbounds i8, i8* %1, i64 8
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i16
  store i16 %357, i16* %354, align 2
  %358 = getelementptr inbounds i16, i16* %0, i64 9
  %359 = getelementptr inbounds i8, i8* %1, i64 9
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i16
  store i16 %361, i16* %358, align 2
  br label %615

362:                                              ; preds = %3
  %363 = load i8, i8* %1, align 1
  %364 = zext i8 %363 to i16
  store i16 %364, i16* %0, align 2
  %365 = getelementptr inbounds i16, i16* %0, i64 1
  %366 = getelementptr inbounds i8, i8* %1, i64 1
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i16
  store i16 %368, i16* %365, align 2
  %369 = getelementptr inbounds i16, i16* %0, i64 2
  %370 = getelementptr inbounds i8, i8* %1, i64 2
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i16
  store i16 %372, i16* %369, align 2
  %373 = getelementptr inbounds i16, i16* %0, i64 3
  %374 = getelementptr inbounds i8, i8* %1, i64 3
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i16
  store i16 %376, i16* %373, align 2
  %377 = getelementptr inbounds i16, i16* %0, i64 4
  %378 = getelementptr inbounds i8, i8* %1, i64 4
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i16
  store i16 %380, i16* %377, align 2
  %381 = getelementptr inbounds i16, i16* %0, i64 5
  %382 = getelementptr inbounds i8, i8* %1, i64 5
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i16
  store i16 %384, i16* %381, align 2
  %385 = getelementptr inbounds i16, i16* %0, i64 6
  %386 = getelementptr inbounds i8, i8* %1, i64 6
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i16
  store i16 %388, i16* %385, align 2
  %389 = getelementptr inbounds i16, i16* %0, i64 7
  %390 = getelementptr inbounds i8, i8* %1, i64 7
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i16
  store i16 %392, i16* %389, align 2
  %393 = getelementptr inbounds i16, i16* %0, i64 8
  %394 = getelementptr inbounds i8, i8* %1, i64 8
  %395 = load i8, i8* %394, align 1
  %396 = zext i8 %395 to i16
  store i16 %396, i16* %393, align 2
  br label %615

397:                                              ; preds = %3
  %398 = load i8, i8* %1, align 1
  %399 = zext i8 %398 to i16
  store i16 %399, i16* %0, align 2
  %400 = getelementptr inbounds i16, i16* %0, i64 1
  %401 = getelementptr inbounds i8, i8* %1, i64 1
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i16
  store i16 %403, i16* %400, align 2
  %404 = getelementptr inbounds i16, i16* %0, i64 2
  %405 = getelementptr inbounds i8, i8* %1, i64 2
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i16
  store i16 %407, i16* %404, align 2
  %408 = getelementptr inbounds i16, i16* %0, i64 3
  %409 = getelementptr inbounds i8, i8* %1, i64 3
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i16
  store i16 %411, i16* %408, align 2
  %412 = getelementptr inbounds i16, i16* %0, i64 4
  %413 = getelementptr inbounds i8, i8* %1, i64 4
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i16
  store i16 %415, i16* %412, align 2
  %416 = getelementptr inbounds i16, i16* %0, i64 5
  %417 = getelementptr inbounds i8, i8* %1, i64 5
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i16
  store i16 %419, i16* %416, align 2
  %420 = getelementptr inbounds i16, i16* %0, i64 6
  %421 = getelementptr inbounds i8, i8* %1, i64 6
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i16
  store i16 %423, i16* %420, align 2
  %424 = getelementptr inbounds i16, i16* %0, i64 7
  %425 = getelementptr inbounds i8, i8* %1, i64 7
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i16
  store i16 %427, i16* %424, align 2
  br label %615

428:                                              ; preds = %3
  %429 = load i8, i8* %1, align 1
  %430 = zext i8 %429 to i16
  store i16 %430, i16* %0, align 2
  %431 = getelementptr inbounds i16, i16* %0, i64 1
  %432 = getelementptr inbounds i8, i8* %1, i64 1
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i16
  store i16 %434, i16* %431, align 2
  %435 = getelementptr inbounds i16, i16* %0, i64 2
  %436 = getelementptr inbounds i8, i8* %1, i64 2
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i16
  store i16 %438, i16* %435, align 2
  %439 = getelementptr inbounds i16, i16* %0, i64 3
  %440 = getelementptr inbounds i8, i8* %1, i64 3
  %441 = load i8, i8* %440, align 1
  %442 = zext i8 %441 to i16
  store i16 %442, i16* %439, align 2
  %443 = getelementptr inbounds i16, i16* %0, i64 4
  %444 = getelementptr inbounds i8, i8* %1, i64 4
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i16
  store i16 %446, i16* %443, align 2
  %447 = getelementptr inbounds i16, i16* %0, i64 5
  %448 = getelementptr inbounds i8, i8* %1, i64 5
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i16
  store i16 %450, i16* %447, align 2
  %451 = getelementptr inbounds i16, i16* %0, i64 6
  %452 = getelementptr inbounds i8, i8* %1, i64 6
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i16
  store i16 %454, i16* %451, align 2
  br label %615

455:                                              ; preds = %3
  %456 = load i8, i8* %1, align 1
  %457 = zext i8 %456 to i16
  store i16 %457, i16* %0, align 2
  %458 = getelementptr inbounds i16, i16* %0, i64 1
  %459 = getelementptr inbounds i8, i8* %1, i64 1
  %460 = load i8, i8* %459, align 1
  %461 = zext i8 %460 to i16
  store i16 %461, i16* %458, align 2
  %462 = getelementptr inbounds i16, i16* %0, i64 2
  %463 = getelementptr inbounds i8, i8* %1, i64 2
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i16
  store i16 %465, i16* %462, align 2
  %466 = getelementptr inbounds i16, i16* %0, i64 3
  %467 = getelementptr inbounds i8, i8* %1, i64 3
  %468 = load i8, i8* %467, align 1
  %469 = zext i8 %468 to i16
  store i16 %469, i16* %466, align 2
  %470 = getelementptr inbounds i16, i16* %0, i64 4
  %471 = getelementptr inbounds i8, i8* %1, i64 4
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i16
  store i16 %473, i16* %470, align 2
  %474 = getelementptr inbounds i16, i16* %0, i64 5
  %475 = getelementptr inbounds i8, i8* %1, i64 5
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i16
  store i16 %477, i16* %474, align 2
  br label %615

478:                                              ; preds = %3
  %479 = load i8, i8* %1, align 1
  %480 = zext i8 %479 to i16
  store i16 %480, i16* %0, align 2
  %481 = getelementptr inbounds i16, i16* %0, i64 1
  %482 = getelementptr inbounds i8, i8* %1, i64 1
  %483 = load i8, i8* %482, align 1
  %484 = zext i8 %483 to i16
  store i16 %484, i16* %481, align 2
  %485 = getelementptr inbounds i16, i16* %0, i64 2
  %486 = getelementptr inbounds i8, i8* %1, i64 2
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i16
  store i16 %488, i16* %485, align 2
  %489 = getelementptr inbounds i16, i16* %0, i64 3
  %490 = getelementptr inbounds i8, i8* %1, i64 3
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i16
  store i16 %492, i16* %489, align 2
  %493 = getelementptr inbounds i16, i16* %0, i64 4
  %494 = getelementptr inbounds i8, i8* %1, i64 4
  %495 = load i8, i8* %494, align 1
  %496 = zext i8 %495 to i16
  store i16 %496, i16* %493, align 2
  br label %615

497:                                              ; preds = %3
  %498 = load i8, i8* %1, align 1
  %499 = zext i8 %498 to i16
  store i16 %499, i16* %0, align 2
  %500 = getelementptr inbounds i16, i16* %0, i64 1
  %501 = getelementptr inbounds i8, i8* %1, i64 1
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i16
  store i16 %503, i16* %500, align 2
  %504 = getelementptr inbounds i16, i16* %0, i64 2
  %505 = getelementptr inbounds i8, i8* %1, i64 2
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i16
  store i16 %507, i16* %504, align 2
  %508 = getelementptr inbounds i16, i16* %0, i64 3
  %509 = getelementptr inbounds i8, i8* %1, i64 3
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i16
  store i16 %511, i16* %508, align 2
  br label %615

512:                                              ; preds = %3
  %513 = load i8, i8* %1, align 1
  %514 = zext i8 %513 to i16
  store i16 %514, i16* %0, align 2
  %515 = getelementptr inbounds i16, i16* %0, i64 1
  %516 = getelementptr inbounds i8, i8* %1, i64 1
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i16
  store i16 %518, i16* %515, align 2
  %519 = getelementptr inbounds i16, i16* %0, i64 2
  %520 = getelementptr inbounds i8, i8* %1, i64 2
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i16
  store i16 %522, i16* %519, align 2
  br label %615

523:                                              ; preds = %3
  %524 = load i8, i8* %1, align 1
  %525 = zext i8 %524 to i16
  store i16 %525, i16* %0, align 2
  %526 = getelementptr inbounds i16, i16* %0, i64 1
  %527 = getelementptr inbounds i8, i8* %1, i64 1
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i16
  store i16 %529, i16* %526, align 2
  br label %615

530:                                              ; preds = %3
  %531 = load i8, i8* %1, align 1
  %532 = zext i8 %531 to i16
  store i16 %532, i16* %0, align 2
  br label %615

533:                                              ; preds = %3
  %534 = getelementptr inbounds i8, i8* %1, i64 %2
  %535 = icmp eq i64 %2, 0
  br i1 %535, label %615, label %536

536:                                              ; preds = %533
  %537 = icmp ult i64 %2, 16
  br i1 %537, label %604, label %538

538:                                              ; preds = %536
  %539 = getelementptr i16, i16* %0, i64 %2
  %540 = bitcast i16* %539 to i8*
  %541 = icmp ugt i8* %534, %4
  %542 = icmp ugt i8* %540, %1
  %543 = and i1 %541, %542
  br i1 %543, label %604, label %544

544:                                              ; preds = %538
  %545 = and i64 %2, -16
  %546 = getelementptr i16, i16* %0, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = add i64 %545, -16
  %549 = lshr exact i64 %548, 4
  %550 = add nuw nsw i64 %549, 1
  %551 = and i64 %550, 1
  %552 = icmp eq i64 %548, 0
  br i1 %552, label %586, label %553

553:                                              ; preds = %544
  %554 = sub nuw nsw i64 %550, %551
  br label %555

555:                                              ; preds = %555, %553
  %556 = phi i64 [ 0, %553 ], [ %583, %555 ]
  %557 = phi i64 [ %554, %553 ], [ %584, %555 ]
  %558 = getelementptr i16, i16* %0, i64 %556
  %559 = getelementptr i8, i8* %1, i64 %556
  %560 = bitcast i8* %559 to <8 x i8>*
  %561 = load <8 x i8>, <8 x i8>* %560, align 1, !alias.scope !2
  %562 = getelementptr i8, i8* %559, i64 8
  %563 = bitcast i8* %562 to <8 x i8>*
  %564 = load <8 x i8>, <8 x i8>* %563, align 1, !alias.scope !2
  %565 = zext <8 x i8> %561 to <8 x i16>
  %566 = zext <8 x i8> %564 to <8 x i16>
  %567 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %567, align 2, !alias.scope !5, !noalias !2
  %568 = getelementptr i16, i16* %558, i64 8
  %569 = bitcast i16* %568 to <8 x i16>*
  store <8 x i16> %566, <8 x i16>* %569, align 2, !alias.scope !5, !noalias !2
  %570 = or i64 %556, 16
  %571 = getelementptr i16, i16* %0, i64 %570
  %572 = getelementptr i8, i8* %1, i64 %570
  %573 = bitcast i8* %572 to <8 x i8>*
  %574 = load <8 x i8>, <8 x i8>* %573, align 1, !alias.scope !2
  %575 = getelementptr i8, i8* %572, i64 8
  %576 = bitcast i8* %575 to <8 x i8>*
  %577 = load <8 x i8>, <8 x i8>* %576, align 1, !alias.scope !2
  %578 = zext <8 x i8> %574 to <8 x i16>
  %579 = zext <8 x i8> %577 to <8 x i16>
  %580 = bitcast i16* %571 to <8 x i16>*
  store <8 x i16> %578, <8 x i16>* %580, align 2, !alias.scope !5, !noalias !2
  %581 = getelementptr i16, i16* %571, i64 8
  %582 = bitcast i16* %581 to <8 x i16>*
  store <8 x i16> %579, <8 x i16>* %582, align 2, !alias.scope !5, !noalias !2
  %583 = add i64 %556, 32
  %584 = add i64 %557, -2
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %555, !llvm.loop !7

586:                                              ; preds = %555, %544
  %587 = phi i64 [ 0, %544 ], [ %583, %555 ]
  %588 = icmp eq i64 %551, 0
  br i1 %588, label %602, label %589

589:                                              ; preds = %586
  %590 = getelementptr i16, i16* %0, i64 %587
  %591 = getelementptr i8, i8* %1, i64 %587
  %592 = bitcast i8* %591 to <8 x i8>*
  %593 = load <8 x i8>, <8 x i8>* %592, align 1, !alias.scope !2
  %594 = getelementptr i8, i8* %591, i64 8
  %595 = bitcast i8* %594 to <8 x i8>*
  %596 = load <8 x i8>, <8 x i8>* %595, align 1, !alias.scope !2
  %597 = zext <8 x i8> %593 to <8 x i16>
  %598 = zext <8 x i8> %596 to <8 x i16>
  %599 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %597, <8 x i16>* %599, align 2, !alias.scope !5, !noalias !2
  %600 = getelementptr i16, i16* %590, i64 8
  %601 = bitcast i16* %600 to <8 x i16>*
  store <8 x i16> %598, <8 x i16>* %601, align 2, !alias.scope !5, !noalias !2
  br label %602

602:                                              ; preds = %586, %589
  %603 = icmp eq i64 %545, %2
  br i1 %603, label %615, label %604

604:                                              ; preds = %602, %538, %536
  %605 = phi i16* [ %0, %538 ], [ %0, %536 ], [ %546, %602 ]
  %606 = phi i8* [ %1, %538 ], [ %1, %536 ], [ %547, %602 ]
  br label %607

607:                                              ; preds = %604, %607
  %608 = phi i16* [ %613, %607 ], [ %605, %604 ]
  %609 = phi i8* [ %612, %607 ], [ %606, %604 ]
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i16
  store i16 %611, i16* %608, align 2
  %612 = getelementptr inbounds i8, i8* %609, i64 1
  %613 = getelementptr inbounds i16, i16* %608, i64 1
  %614 = icmp eq i8* %612, %534
  br i1 %614, label %615, label %607, !llvm.loop !9

615:                                              ; preds = %607, %602, %5, %68, %127, %182, %233, %280, %323, %362, %397, %428, %455, %478, %497, %512, %523, %530, %533
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Uri6EncodeEPNS0_7IsolateENS0_6HandleINS0_6StringEEEb(%"class.v8::internal::Isolate"*, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.v8::internal::String", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.v8::internal::StringShape", align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.std::__1::vector.1129", align 8
  %10 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %11 = alloca %"class.v8::internal::String::FlatContent", align 8
  %12 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %13 = alloca %"class.v8::internal::Vector.1144", align 8
  %14 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %"class.std::__1::vector.1129"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #10
  %20 = sext i32 %18 to i64
  %21 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast i8** %21 to i64*
  %23 = bitcast %"class.std::__1::vector.1129"* %9 to i64*
  %24 = icmp eq i32 %18, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  %28 = tail call i8* @_Znwm(i64 %20) #12
  %29 = ptrtoint i8* %28 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %20
  %31 = ptrtoint i8* %30 to i64
  store i64 %29, i64* %23, align 8
  store i64 %29, i64* %27, align 8
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %25, %3
  %33 = phi i64 [ 0, %3 ], [ %29, %25 ]
  %34 = phi i8* [ null, %3 ], [ %28, %25 ]
  %35 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %35) #10
  %36 = bitcast %"class.v8::internal::String::FlatContent"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #10
  %37 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
  %38 = load i64, i64* %14, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %11, %"class.v8::internal::String"* nonnull %40, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %10) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #10
  %41 = icmp sgt i32 %18, 0
  br i1 %41, label %42, label %562

42:                                               ; preds = %32
  %43 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %11, i64 0, i32 2
  %44 = bitcast %"class.v8::internal::String::FlatContent"* %11 to i16**
  %45 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %11, i64 0, i32 0, i32 0
  %46 = bitcast i32* %6 to i8*
  %47 = bitcast %"class.v8::internal::StringShape"* %7 to i8*
  %48 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %7, i64 0, i32 0
  %49 = bitcast %"class.v8::internal::String"* %5 to i8*
  %50 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = bitcast i32* %4 to [4 x i8]*
  %52 = bitcast i32* %4 to i8*
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  %54 = getelementptr inbounds i8, i8* %52, i64 2
  %55 = getelementptr inbounds i8, i8* %52, i64 3
  %56 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 0
  %59 = bitcast i32* %8 to [4 x i8]*
  %60 = bitcast i32* %8 to i8*
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  %62 = getelementptr inbounds i8, i8* %60, i64 2
  br label %63

63:                                               ; preds = %42, %550
  %64 = phi i32 [ 0, %42 ], [ %552, %550 ]
  %65 = load i32, i32* %43, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %73

67:                                               ; preds = %63
  %68 = load i8*, i8** %45, align 8
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  br label %78

73:                                               ; preds = %63
  %74 = load i16*, i16** %44, align 8
  %75 = sext i32 %64 to i64
  %76 = getelementptr inbounds i16, i16* %74, i64 %75
  %77 = load i16, i16* %76, align 2
  br label %78

78:                                               ; preds = %67, %73
  %79 = phi i16 [ %72, %67 ], [ %77, %73 ]
  %80 = zext i16 %79 to i32
  %81 = and i16 %79, -1024
  switch i16 %81, label %280 [
    i16 -10240, label %82
    i16 -9216, label %512
  ]

82:                                               ; preds = %78
  %83 = add nsw i32 %64, 1
  %84 = icmp slt i32 %83, %18
  br i1 %84, label %85, label %512

85:                                               ; preds = %82
  %86 = load i64, i64* %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #10
  store i32 %83, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #10
  %87 = and i64 %86, -4294967296
  %88 = add i64 %86, -1
  %89 = inttoptr i64 %88 to i32*
  %90 = load atomic i32, i32* %89 acquire, align 4
  %91 = zext i32 %90 to i64
  %92 = or i64 %87, %91
  %93 = add i64 %92, 7
  %94 = inttoptr i64 %93 to i16*
  %95 = load atomic i16, i16* %94 monotonic, align 2
  %96 = zext i16 %95 to i32
  store i32 %96, i32* %48, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #10
  store i64 %86, i64* %50, align 8
  %97 = call zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"* nonnull %7, %"class.v8::internal::String"* nonnull dereferenceable(8) %5, i32* nonnull dereferenceable(4) %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #10
  %98 = and i16 %97, -1024
  %99 = icmp eq i16 %98, -9216
  br i1 %99, label %100, label %512

100:                                              ; preds = %85
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #10
  store i32 0, i32* %4, align 4
  %101 = shl nuw nsw i32 %80, 10
  %102 = and i32 %101, 1047552
  %103 = add nuw nsw i32 %102, 65536
  %104 = and i16 %97, 1023
  %105 = zext i16 %104 to i32
  %106 = or i32 %103, %105
  %107 = icmp ult i32 %106, 128
  br i1 %107, label %108, label %110

108:                                              ; preds = %100
  %109 = trunc i16 %97 to i8
  store i8 %109, i8* %52, align 4
  br label %125

110:                                              ; preds = %100
  %111 = lshr i32 %103, 18
  %112 = trunc i32 %111 to i8
  %113 = or i8 %112, -16
  store i8 %113, i8* %52, align 4
  %114 = lshr i32 %103, 12
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 63
  %117 = or i8 %116, -128
  store i8 %117, i8* %53, align 1
  %118 = lshr i32 %106, 6
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 63
  %121 = or i8 %120, -128
  store i8 %121, i8* %54, align 2
  %122 = trunc i16 %97 to i8
  %123 = and i8 %122, 63
  %124 = or i8 %123, -128
  store i8 %124, i8* %55, align 1
  br label %125

125:                                              ; preds = %110, %108
  %126 = phi i64 [ 1, %108 ], [ 4, %110 ]
  br label %127

127:                                              ; preds = %276, %125
  %128 = phi i64 [ 0, %125 ], [ %277, %276 ]
  %129 = getelementptr inbounds [4 x i8], [4 x i8]* %51, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = load i8*, i8** %56, align 8
  %132 = load i8*, i8** %21, align 8
  %133 = icmp ult i8* %131, %132
  %134 = ptrtoint i8* %132 to i64
  br i1 %133, label %135, label %138

135:                                              ; preds = %127
  store i8 37, i8* %131, align 1
  %136 = getelementptr inbounds i8, i8* %131, i64 1
  %137 = ptrtoint i8* %136 to i64
  store i64 %137, i64* %57, align 8
  br label %174

138:                                              ; preds = %127
  %139 = ptrtoint i8* %131 to i64
  %140 = load i64, i64* %23, align 8
  %141 = sub i64 %139, %140
  %142 = add i64 %141, 1
  %143 = icmp slt i64 %142, 0
  %144 = inttoptr i64 %140 to i8*
  br i1 %143, label %145, label %147

145:                                              ; preds = %138
  %146 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %146) #11
  unreachable

147:                                              ; preds = %138
  %148 = sub i64 %134, %140
  %149 = icmp ult i64 %148, 4611686018427387903
  br i1 %149, label %150, label %155

150:                                              ; preds = %147
  %151 = shl i64 %148, 1
  %152 = icmp ult i64 %151, %142
  %153 = select i1 %152, i64 %142, i64 %151
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %158, label %155

155:                                              ; preds = %150, %147
  %156 = phi i64 [ %153, %150 ], [ 9223372036854775807, %147 ]
  %157 = call i8* @_Znwm(i64 %156) #12
  br label %158

158:                                              ; preds = %155, %150
  %159 = phi i64 [ %156, %155 ], [ 0, %150 ]
  %160 = phi i8* [ %157, %155 ], [ null, %150 ]
  %161 = getelementptr inbounds i8, i8* %160, i64 %141
  %162 = getelementptr inbounds i8, i8* %160, i64 %159
  %163 = ptrtoint i8* %162 to i64
  store i8 37, i8* %161, align 1
  %164 = getelementptr inbounds i8, i8* %161, i64 1
  %165 = ptrtoint i8* %164 to i64
  %166 = ptrtoint i8* %160 to i64
  %167 = icmp sgt i64 %141, 0
  br i1 %167, label %168, label %169

168:                                              ; preds = %158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %144, i64 %141, i1 false) #10
  br label %169

169:                                              ; preds = %168, %158
  store i64 %166, i64* %23, align 8
  store i64 %165, i64* %57, align 8
  store i64 %163, i64* %22, align 8
  %170 = icmp eq i64 %140, 0
  br i1 %170, label %174, label %171

171:                                              ; preds = %169
  call void @_ZdlPv(i8* nonnull %144) #12
  %172 = load i8*, i8** %56, align 8
  %173 = ptrtoint i8* %172 to i64
  br label %174

174:                                              ; preds = %171, %169, %135
  %175 = phi i64 [ %137, %135 ], [ %165, %169 ], [ %173, %171 ]
  %176 = phi i8* [ %136, %135 ], [ %164, %169 ], [ %172, %171 ]
  %177 = lshr i8 %130, 4
  %178 = icmp ult i8 %130, -96
  %179 = select i1 %178, i8 48, i8 55
  %180 = add nuw nsw i8 %179, %177
  %181 = load i8*, i8** %21, align 8
  %182 = icmp ult i8* %176, %181
  %183 = ptrtoint i8* %181 to i64
  br i1 %182, label %184, label %187

184:                                              ; preds = %174
  store i8 %180, i8* %176, align 1
  %185 = getelementptr inbounds i8, i8* %176, i64 1
  %186 = ptrtoint i8* %185 to i64
  store i64 %186, i64* %57, align 8
  br label %226

187:                                              ; preds = %174
  %188 = ptrtoint i8* %176 to i64
  %189 = load i64, i64* %23, align 8
  %190 = sub i64 %188, %189
  %191 = add i64 %190, 1
  %192 = icmp slt i64 %191, 0
  %193 = inttoptr i64 %189 to i8*
  br i1 %192, label %194, label %196

194:                                              ; preds = %187
  %195 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %195) #11
  unreachable

196:                                              ; preds = %187
  %197 = sub i64 %183, %189
  %198 = icmp ult i64 %197, 4611686018427387903
  br i1 %198, label %199, label %204

199:                                              ; preds = %196
  %200 = shl i64 %197, 1
  %201 = icmp ult i64 %200, %191
  %202 = select i1 %201, i64 %191, i64 %200
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %207, label %204

204:                                              ; preds = %199, %196
  %205 = phi i64 [ %202, %199 ], [ 9223372036854775807, %196 ]
  %206 = call i8* @_Znwm(i64 %205) #12
  br label %207

207:                                              ; preds = %204, %199
  %208 = phi i64 [ %205, %204 ], [ 0, %199 ]
  %209 = phi i8* [ %206, %204 ], [ null, %199 ]
  %210 = getelementptr inbounds i8, i8* %209, i64 %190
  %211 = getelementptr inbounds i8, i8* %209, i64 %208
  %212 = ptrtoint i8* %211 to i64
  store i8 %180, i8* %210, align 1
  %213 = getelementptr inbounds i8, i8* %210, i64 1
  %214 = ptrtoint i8* %213 to i64
  %215 = sub i64 %175, %189
  %216 = sub i64 0, %215
  %217 = getelementptr inbounds i8, i8* %210, i64 %216
  %218 = ptrtoint i8* %217 to i64
  %219 = icmp sgt i64 %215, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %207
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %217, i8* align 1 %193, i64 %215, i1 false) #10
  br label %221

221:                                              ; preds = %220, %207
  store i64 %218, i64* %23, align 8
  store i64 %214, i64* %57, align 8
  store i64 %212, i64* %22, align 8
  %222 = icmp eq i64 %189, 0
  br i1 %222, label %226, label %223

223:                                              ; preds = %221
  call void @_ZdlPv(i8* nonnull %193) #12
  %224 = load i8*, i8** %56, align 8
  %225 = ptrtoint i8* %224 to i64
  br label %226

226:                                              ; preds = %223, %221, %184
  %227 = phi i64 [ %186, %184 ], [ %214, %221 ], [ %225, %223 ]
  %228 = phi i8* [ %185, %184 ], [ %213, %221 ], [ %224, %223 ]
  %229 = and i8 %130, 15
  %230 = icmp ult i8 %229, 10
  %231 = select i1 %230, i8 48, i8 55
  %232 = add nuw nsw i8 %231, %229
  %233 = load i8*, i8** %21, align 8
  %234 = icmp ult i8* %228, %233
  %235 = ptrtoint i8* %233 to i64
  br i1 %234, label %236, label %239

236:                                              ; preds = %226
  store i8 %232, i8* %228, align 1
  %237 = getelementptr inbounds i8, i8* %228, i64 1
  %238 = ptrtoint i8* %237 to i64
  store i64 %238, i64* %57, align 8
  br label %276

239:                                              ; preds = %226
  %240 = ptrtoint i8* %228 to i64
  %241 = load i64, i64* %23, align 8
  %242 = sub i64 %240, %241
  %243 = add i64 %242, 1
  %244 = icmp slt i64 %243, 0
  %245 = inttoptr i64 %241 to i8*
  br i1 %244, label %246, label %248

246:                                              ; preds = %239
  %247 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %247) #11
  unreachable

248:                                              ; preds = %239
  %249 = sub i64 %235, %241
  %250 = icmp ult i64 %249, 4611686018427387903
  br i1 %250, label %251, label %256

251:                                              ; preds = %248
  %252 = shl i64 %249, 1
  %253 = icmp ult i64 %252, %243
  %254 = select i1 %253, i64 %243, i64 %252
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %259, label %256

256:                                              ; preds = %251, %248
  %257 = phi i64 [ %254, %251 ], [ 9223372036854775807, %248 ]
  %258 = call i8* @_Znwm(i64 %257) #12
  br label %259

259:                                              ; preds = %256, %251
  %260 = phi i64 [ %257, %256 ], [ 0, %251 ]
  %261 = phi i8* [ %258, %256 ], [ null, %251 ]
  %262 = getelementptr inbounds i8, i8* %261, i64 %242
  %263 = getelementptr inbounds i8, i8* %261, i64 %260
  %264 = ptrtoint i8* %263 to i64
  store i8 %232, i8* %262, align 1
  %265 = getelementptr inbounds i8, i8* %262, i64 1
  %266 = ptrtoint i8* %265 to i64
  %267 = sub i64 %227, %241
  %268 = sub i64 0, %267
  %269 = getelementptr inbounds i8, i8* %262, i64 %268
  %270 = ptrtoint i8* %269 to i64
  %271 = icmp sgt i64 %267, 0
  br i1 %271, label %272, label %273

272:                                              ; preds = %259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* align 1 %245, i64 %267, i1 false) #10
  br label %273

273:                                              ; preds = %272, %259
  store i64 %270, i64* %23, align 8
  store i64 %266, i64* %57, align 8
  store i64 %264, i64* %22, align 8
  %274 = icmp eq i64 %241, 0
  br i1 %274, label %276, label %275

275:                                              ; preds = %273
  call void @_ZdlPv(i8* nonnull %245) #12
  br label %276

276:                                              ; preds = %275, %273, %236
  %277 = add nuw nsw i64 %128, 1
  %278 = icmp eq i64 %277, %126
  br i1 %278, label %279, label %127

279:                                              ; preds = %276
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #10
  br label %550

280:                                              ; preds = %78
  %281 = or i32 %80, 32
  %282 = add nsw i32 %281, -97
  %283 = icmp ult i32 %282, 26
  %284 = add nsw i32 %80, -48
  %285 = icmp ult i32 %284, 10
  %286 = or i1 %285, %283
  br i1 %286, label %290, label %287

287:                                              ; preds = %280
  switch i16 %79, label %288 [
    i16 33, label %290
    i16 39, label %290
    i16 40, label %290
    i16 41, label %290
    i16 42, label %290
    i16 45, label %290
    i16 46, label %290
    i16 95, label %290
    i16 126, label %290
  ]

288:                                              ; preds = %287
  br i1 %2, label %289, label %333

289:                                              ; preds = %288
  switch i16 %79, label %333 [
    i16 35, label %290
    i16 58, label %290
    i16 59, label %290
    i16 47, label %290
    i16 63, label %290
    i16 36, label %290
    i16 38, label %290
    i16 43, label %290
    i16 44, label %290
    i16 64, label %290
    i16 61, label %290
  ]

290:                                              ; preds = %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %287, %287, %287, %287, %287, %287, %287, %287, %287, %280
  %291 = trunc i16 %79 to i8
  %292 = load i8*, i8** %56, align 8
  %293 = load i8*, i8** %21, align 8
  %294 = icmp ult i8* %292, %293
  %295 = ptrtoint i8* %293 to i64
  br i1 %294, label %296, label %299

296:                                              ; preds = %290
  store i8 %291, i8* %292, align 1
  %297 = getelementptr inbounds i8, i8* %292, i64 1
  %298 = ptrtoint i8* %297 to i64
  store i64 %298, i64* %57, align 8
  br label %550

299:                                              ; preds = %290
  %300 = ptrtoint i8* %292 to i64
  %301 = load i64, i64* %23, align 8
  %302 = sub i64 %300, %301
  %303 = add i64 %302, 1
  %304 = icmp slt i64 %303, 0
  %305 = inttoptr i64 %301 to i8*
  br i1 %304, label %306, label %308

306:                                              ; preds = %299
  %307 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %307) #11
  unreachable

308:                                              ; preds = %299
  %309 = sub i64 %295, %301
  %310 = icmp ult i64 %309, 4611686018427387903
  br i1 %310, label %311, label %316

311:                                              ; preds = %308
  %312 = shl i64 %309, 1
  %313 = icmp ult i64 %312, %303
  %314 = select i1 %313, i64 %303, i64 %312
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %319, label %316

316:                                              ; preds = %311, %308
  %317 = phi i64 [ %314, %311 ], [ 9223372036854775807, %308 ]
  %318 = call i8* @_Znwm(i64 %317) #12
  br label %319

319:                                              ; preds = %316, %311
  %320 = phi i64 [ %317, %316 ], [ 0, %311 ]
  %321 = phi i8* [ %318, %316 ], [ null, %311 ]
  %322 = getelementptr inbounds i8, i8* %321, i64 %302
  %323 = getelementptr inbounds i8, i8* %321, i64 %320
  %324 = ptrtoint i8* %323 to i64
  store i8 %291, i8* %322, align 1
  %325 = getelementptr inbounds i8, i8* %322, i64 1
  %326 = ptrtoint i8* %325 to i64
  %327 = ptrtoint i8* %321 to i64
  %328 = icmp sgt i64 %302, 0
  br i1 %328, label %329, label %330

329:                                              ; preds = %319
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %321, i8* align 1 %305, i64 %302, i1 false) #10
  br label %330

330:                                              ; preds = %329, %319
  store i64 %327, i64* %23, align 8
  store i64 %326, i64* %57, align 8
  store i64 %324, i64* %22, align 8
  %331 = icmp eq i64 %301, 0
  br i1 %331, label %550, label %332

332:                                              ; preds = %330
  call void @_ZdlPv(i8* nonnull %305) #12
  br label %550

333:                                              ; preds = %289, %288
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #10
  store i32 0, i32* %8, align 4
  %334 = icmp ult i16 %79, 128
  br i1 %334, label %335, label %337

335:                                              ; preds = %333
  %336 = trunc i16 %79 to i8
  store i8 %336, i8* %60, align 4
  br label %357

337:                                              ; preds = %333
  %338 = icmp ult i16 %79, 2048
  br i1 %338, label %339, label %346

339:                                              ; preds = %337
  %340 = lshr i16 %79, 6
  %341 = trunc i16 %340 to i8
  %342 = or i8 %341, -64
  store i8 %342, i8* %60, align 4
  %343 = trunc i16 %79 to i8
  %344 = and i8 %343, 63
  %345 = or i8 %344, -128
  store i8 %345, i8* %61, align 1
  br label %357

346:                                              ; preds = %337
  %347 = lshr i16 %79, 12
  %348 = trunc i16 %347 to i8
  %349 = or i8 %348, -32
  store i8 %349, i8* %60, align 4
  %350 = lshr i16 %79, 6
  %351 = trunc i16 %350 to i8
  %352 = and i8 %351, 63
  %353 = or i8 %352, -128
  store i8 %353, i8* %61, align 1
  %354 = trunc i16 %79 to i8
  %355 = and i8 %354, 63
  %356 = or i8 %355, -128
  store i8 %356, i8* %62, align 2
  br label %357

357:                                              ; preds = %346, %339, %335
  %358 = phi i64 [ 1, %335 ], [ 2, %339 ], [ 3, %346 ]
  br label %359

359:                                              ; preds = %508, %357
  %360 = phi i64 [ 0, %357 ], [ %509, %508 ]
  %361 = getelementptr inbounds [4 x i8], [4 x i8]* %59, i64 0, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = load i8*, i8** %56, align 8
  %364 = load i8*, i8** %21, align 8
  %365 = icmp ult i8* %363, %364
  %366 = ptrtoint i8* %364 to i64
  br i1 %365, label %367, label %370

367:                                              ; preds = %359
  store i8 37, i8* %363, align 1
  %368 = getelementptr inbounds i8, i8* %363, i64 1
  %369 = ptrtoint i8* %368 to i64
  store i64 %369, i64* %57, align 8
  br label %406

370:                                              ; preds = %359
  %371 = ptrtoint i8* %363 to i64
  %372 = load i64, i64* %23, align 8
  %373 = sub i64 %371, %372
  %374 = add i64 %373, 1
  %375 = icmp slt i64 %374, 0
  %376 = inttoptr i64 %372 to i8*
  br i1 %375, label %377, label %379

377:                                              ; preds = %370
  %378 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %378) #11
  unreachable

379:                                              ; preds = %370
  %380 = sub i64 %366, %372
  %381 = icmp ult i64 %380, 4611686018427387903
  br i1 %381, label %382, label %387

382:                                              ; preds = %379
  %383 = shl i64 %380, 1
  %384 = icmp ult i64 %383, %374
  %385 = select i1 %384, i64 %374, i64 %383
  %386 = icmp eq i64 %385, 0
  br i1 %386, label %390, label %387

387:                                              ; preds = %382, %379
  %388 = phi i64 [ %385, %382 ], [ 9223372036854775807, %379 ]
  %389 = call i8* @_Znwm(i64 %388) #12
  br label %390

390:                                              ; preds = %387, %382
  %391 = phi i64 [ %388, %387 ], [ 0, %382 ]
  %392 = phi i8* [ %389, %387 ], [ null, %382 ]
  %393 = getelementptr inbounds i8, i8* %392, i64 %373
  %394 = getelementptr inbounds i8, i8* %392, i64 %391
  %395 = ptrtoint i8* %394 to i64
  store i8 37, i8* %393, align 1
  %396 = getelementptr inbounds i8, i8* %393, i64 1
  %397 = ptrtoint i8* %396 to i64
  %398 = ptrtoint i8* %392 to i64
  %399 = icmp sgt i64 %373, 0
  br i1 %399, label %400, label %401

400:                                              ; preds = %390
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %392, i8* align 1 %376, i64 %373, i1 false) #10
  br label %401

401:                                              ; preds = %400, %390
  store i64 %398, i64* %23, align 8
  store i64 %397, i64* %57, align 8
  store i64 %395, i64* %22, align 8
  %402 = icmp eq i64 %372, 0
  br i1 %402, label %406, label %403

403:                                              ; preds = %401
  call void @_ZdlPv(i8* nonnull %376) #12
  %404 = load i8*, i8** %56, align 8
  %405 = ptrtoint i8* %404 to i64
  br label %406

406:                                              ; preds = %403, %401, %367
  %407 = phi i64 [ %369, %367 ], [ %397, %401 ], [ %405, %403 ]
  %408 = phi i8* [ %368, %367 ], [ %396, %401 ], [ %404, %403 ]
  %409 = lshr i8 %362, 4
  %410 = icmp ult i8 %362, -96
  %411 = select i1 %410, i8 48, i8 55
  %412 = add nuw nsw i8 %411, %409
  %413 = load i8*, i8** %21, align 8
  %414 = icmp ult i8* %408, %413
  %415 = ptrtoint i8* %413 to i64
  br i1 %414, label %416, label %419

416:                                              ; preds = %406
  store i8 %412, i8* %408, align 1
  %417 = getelementptr inbounds i8, i8* %408, i64 1
  %418 = ptrtoint i8* %417 to i64
  store i64 %418, i64* %57, align 8
  br label %458

419:                                              ; preds = %406
  %420 = ptrtoint i8* %408 to i64
  %421 = load i64, i64* %23, align 8
  %422 = sub i64 %420, %421
  %423 = add i64 %422, 1
  %424 = icmp slt i64 %423, 0
  %425 = inttoptr i64 %421 to i8*
  br i1 %424, label %426, label %428

426:                                              ; preds = %419
  %427 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %427) #11
  unreachable

428:                                              ; preds = %419
  %429 = sub i64 %415, %421
  %430 = icmp ult i64 %429, 4611686018427387903
  br i1 %430, label %431, label %436

431:                                              ; preds = %428
  %432 = shl i64 %429, 1
  %433 = icmp ult i64 %432, %423
  %434 = select i1 %433, i64 %423, i64 %432
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %439, label %436

436:                                              ; preds = %431, %428
  %437 = phi i64 [ %434, %431 ], [ 9223372036854775807, %428 ]
  %438 = call i8* @_Znwm(i64 %437) #12
  br label %439

439:                                              ; preds = %436, %431
  %440 = phi i64 [ %437, %436 ], [ 0, %431 ]
  %441 = phi i8* [ %438, %436 ], [ null, %431 ]
  %442 = getelementptr inbounds i8, i8* %441, i64 %422
  %443 = getelementptr inbounds i8, i8* %441, i64 %440
  %444 = ptrtoint i8* %443 to i64
  store i8 %412, i8* %442, align 1
  %445 = getelementptr inbounds i8, i8* %442, i64 1
  %446 = ptrtoint i8* %445 to i64
  %447 = sub i64 %407, %421
  %448 = sub i64 0, %447
  %449 = getelementptr inbounds i8, i8* %442, i64 %448
  %450 = ptrtoint i8* %449 to i64
  %451 = icmp sgt i64 %447, 0
  br i1 %451, label %452, label %453

452:                                              ; preds = %439
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %449, i8* align 1 %425, i64 %447, i1 false) #10
  br label %453

453:                                              ; preds = %452, %439
  store i64 %450, i64* %23, align 8
  store i64 %446, i64* %57, align 8
  store i64 %444, i64* %22, align 8
  %454 = icmp eq i64 %421, 0
  br i1 %454, label %458, label %455

455:                                              ; preds = %453
  call void @_ZdlPv(i8* nonnull %425) #12
  %456 = load i8*, i8** %56, align 8
  %457 = ptrtoint i8* %456 to i64
  br label %458

458:                                              ; preds = %455, %453, %416
  %459 = phi i64 [ %418, %416 ], [ %446, %453 ], [ %457, %455 ]
  %460 = phi i8* [ %417, %416 ], [ %445, %453 ], [ %456, %455 ]
  %461 = and i8 %362, 15
  %462 = icmp ult i8 %461, 10
  %463 = select i1 %462, i8 48, i8 55
  %464 = add nuw nsw i8 %463, %461
  %465 = load i8*, i8** %21, align 8
  %466 = icmp ult i8* %460, %465
  %467 = ptrtoint i8* %465 to i64
  br i1 %466, label %468, label %471

468:                                              ; preds = %458
  store i8 %464, i8* %460, align 1
  %469 = getelementptr inbounds i8, i8* %460, i64 1
  %470 = ptrtoint i8* %469 to i64
  store i64 %470, i64* %57, align 8
  br label %508

471:                                              ; preds = %458
  %472 = ptrtoint i8* %460 to i64
  %473 = load i64, i64* %23, align 8
  %474 = sub i64 %472, %473
  %475 = add i64 %474, 1
  %476 = icmp slt i64 %475, 0
  %477 = inttoptr i64 %473 to i8*
  br i1 %476, label %478, label %480

478:                                              ; preds = %471
  %479 = bitcast %"class.std::__1::vector.1129"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %479) #11
  unreachable

480:                                              ; preds = %471
  %481 = sub i64 %467, %473
  %482 = icmp ult i64 %481, 4611686018427387903
  br i1 %482, label %483, label %488

483:                                              ; preds = %480
  %484 = shl i64 %481, 1
  %485 = icmp ult i64 %484, %475
  %486 = select i1 %485, i64 %475, i64 %484
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %491, label %488

488:                                              ; preds = %483, %480
  %489 = phi i64 [ %486, %483 ], [ 9223372036854775807, %480 ]
  %490 = call i8* @_Znwm(i64 %489) #12
  br label %491

491:                                              ; preds = %488, %483
  %492 = phi i64 [ %489, %488 ], [ 0, %483 ]
  %493 = phi i8* [ %490, %488 ], [ null, %483 ]
  %494 = getelementptr inbounds i8, i8* %493, i64 %474
  %495 = getelementptr inbounds i8, i8* %493, i64 %492
  %496 = ptrtoint i8* %495 to i64
  store i8 %464, i8* %494, align 1
  %497 = getelementptr inbounds i8, i8* %494, i64 1
  %498 = ptrtoint i8* %497 to i64
  %499 = sub i64 %459, %473
  %500 = sub i64 0, %499
  %501 = getelementptr inbounds i8, i8* %494, i64 %500
  %502 = ptrtoint i8* %501 to i64
  %503 = icmp sgt i64 %499, 0
  br i1 %503, label %504, label %505

504:                                              ; preds = %491
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %501, i8* align 1 %477, i64 %499, i1 false) #10
  br label %505

505:                                              ; preds = %504, %491
  store i64 %502, i64* %23, align 8
  store i64 %498, i64* %57, align 8
  store i64 %496, i64* %22, align 8
  %506 = icmp eq i64 %473, 0
  br i1 %506, label %508, label %507

507:                                              ; preds = %505
  call void @_ZdlPv(i8* nonnull %477) #12
  br label %508

508:                                              ; preds = %507, %505, %468
  %509 = add nuw nsw i64 %360, 1
  %510 = icmp eq i64 %509, %358
  br i1 %510, label %511, label %359

511:                                              ; preds = %508
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #10
  br label %550

512:                                              ; preds = %78, %85, %82
  %513 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %514 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = load i64, i64* %514, align 8
  %516 = and i64 %515, -4294967296
  %517 = add i64 %515, -1
  %518 = inttoptr i64 %517 to i32*
  %519 = load atomic i32, i32* %518 monotonic, align 4
  %520 = zext i32 %519 to i64
  %521 = or i64 %516, %520
  %522 = add i64 %521, 19
  %523 = inttoptr i64 %522 to i32*
  %524 = load i32, i32* %523, align 4
  %525 = zext i32 %524 to i64
  %526 = or i64 %516, %525
  %527 = add i64 %526, 979
  %528 = inttoptr i64 %527 to i32*
  %529 = load atomic i32, i32* %528 monotonic, align 4
  %530 = zext i32 %529 to i64
  %531 = or i64 %516, %530
  %532 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %533 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %532, align 8
  %534 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %533, null
  br i1 %534, label %537, label %535

535:                                              ; preds = %512
  %536 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %533, i64 %531) #10
  br label %554

537:                                              ; preds = %512
  %538 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %539 = load i64*, i64** %538, align 8
  %540 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %541 = load i64*, i64** %540, align 8
  %542 = icmp eq i64* %539, %541
  br i1 %542, label %543, label %545

543:                                              ; preds = %537
  %544 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #10
  br label %545

545:                                              ; preds = %543, %537
  %546 = phi i64* [ %544, %543 ], [ %539, %537 ]
  %547 = ptrtoint i64* %546 to i64
  %548 = add i64 %547, 8
  %549 = inttoptr i64 %548 to i64*
  store i64* %549, i64** %538, align 8
  store i64 %531, i64* %546, align 8
  br label %554

550:                                              ; preds = %279, %511, %296, %330, %332
  %551 = phi i32 [ %64, %332 ], [ %64, %330 ], [ %64, %296 ], [ %64, %511 ], [ %83, %279 ]
  %552 = add nsw i32 %551, 1
  %553 = icmp slt i32 %552, %18
  br i1 %553, label %63, label %559

554:                                              ; preds = %545, %535
  %555 = phi i64* [ %536, %535 ], [ %546, %545 ]
  %556 = call i64* @_ZN2v88internal7Factory8NewErrorENS0_6HandleINS0_10JSFunctionEEENS0_15MessageTemplateENS2_INS0_6ObjectEEES7_S7_(%"class.v8::internal::Factory"* %513, i64* %555, i32 357, i64* null, i64* null, i64* null) #10
  %557 = load i64, i64* %556, align 8
  %558 = call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %557, %"class.v8::internal::MessageLocation"* null) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %35) #10
  br label %572

559:                                              ; preds = %550
  %560 = load i8*, i8** %58, align 8
  %561 = load i64, i64* %57, align 8
  br label %562

562:                                              ; preds = %32, %559
  %563 = phi i64 [ %561, %559 ], [ %33, %32 ]
  %564 = phi i8* [ %560, %559 ], [ %34, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %35) #10
  %565 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %566 = bitcast %"class.v8::internal::Vector.1144"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %566) #10
  %567 = ptrtoint i8* %564 to i64
  %568 = sub i64 %563, %567
  %569 = getelementptr inbounds %"class.v8::internal::Vector.1144", %"class.v8::internal::Vector.1144"* %13, i64 0, i32 0
  store i8* %564, i8** %569, align 8
  %570 = getelementptr inbounds %"class.v8::internal::Vector.1144", %"class.v8::internal::Vector.1144"* %13, i64 0, i32 1
  store i64 %568, i64* %570, align 8
  %571 = call i64* @_ZN2v88internal7Factory20NewStringFromOneByteERKNS0_6VectorIKhEENS0_14AllocationTypeE(%"class.v8::internal::Factory"* %565, %"class.v8::internal::Vector.1144"* nonnull dereferenceable(16) %13, i8 zeroext 0) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %566) #10
  br label %572

572:                                              ; preds = %554, %562
  %573 = phi i64* [ %571, %562 ], [ null, %554 ]
  %574 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 0
  %575 = load i8*, i8** %574, align 8
  %576 = icmp eq i8* %575, null
  br i1 %576, label %581, label %577

577:                                              ; preds = %572
  %578 = ptrtoint i8* %575 to i64
  %579 = getelementptr inbounds %"class.std::__1::vector.1129", %"class.std::__1::vector.1129"* %9, i64 0, i32 0, i32 1
  %580 = bitcast i8** %579 to i64*
  store i64 %578, i64* %580, align 8
  call void @_ZdlPv(i8* nonnull %575) #12
  br label %581

581:                                              ; preds = %572, %577
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #10
  ret i64* %573
}

declare void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* sret, %"class.v8::internal::String"*, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Uri6EscapeEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::String::FlatContent", align 8
  %4 = alloca %"class.v8::internal::String::FlatContent", align 8
  %5 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %6 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %7 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %8 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %9 = alloca %"class.v8::internal::String::FlatContent", align 8
  %10 = alloca %"class.v8::internal::String::FlatContent", align 8
  %11 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %12 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %13 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %14 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %15 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %16 = load i64, i64* %15, align 8
  br label %17

17:                                               ; preds = %30, %2
  %18 = phi i64 [ %16, %2 ], [ %35, %30 ]
  %19 = and i64 %18, -4294967296
  %20 = add i64 %18, -1
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = zext i32 %22 to i64
  %24 = or i64 %19, %23
  %25 = add i64 %24, 7
  %26 = inttoptr i64 %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = and i16 %27, 9
  %29 = zext i16 %28 to i32
  switch i32 %29, label %30 [
    i32 8, label %36
    i32 0, label %138
  ]

30:                                               ; preds = %17
  %31 = add i64 %18, 11
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %19, %34
  br label %17

36:                                               ; preds = %17
  %37 = add i64 %16, 7
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %40) #10
  %41 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #10
  %42 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %16, i64* %42, align 8
  %43 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %6, i64 0, i32 0
  %44 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %3, %"class.v8::internal::String"* nonnull %43, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %5) #10
  %45 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #10
  %47 = icmp sgt i32 %39, 0
  br i1 %47, label %48, label %71

48:                                               ; preds = %36
  %49 = sext i32 %39 to i64
  br label %50

50:                                               ; preds = %64, %48
  %51 = phi i64 [ %68, %64 ], [ 0, %48 ]
  %52 = phi i32 [ %66, %64 ], [ 0, %48 ]
  %53 = getelementptr inbounds i8, i8* %46, i64 %51
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %55, 32
  %57 = add nsw i32 %56, -97
  %58 = icmp ult i32 %57, 26
  %59 = add nsw i32 %55, -48
  %60 = icmp ult i32 %59, 10
  %61 = or i1 %60, %58
  br i1 %61, label %63, label %62

62:                                               ; preds = %50
  switch i8 %54, label %64 [
    i8 64, label %63
    i8 42, label %63
    i8 95, label %63
    i8 43, label %63
    i8 45, label %63
    i8 46, label %63
    i8 47, label %63
  ]

63:                                               ; preds = %62, %62, %62, %62, %62, %62, %62, %50
  br label %64

64:                                               ; preds = %62, %63
  %65 = phi i32 [ 1, %63 ], [ 3, %62 ]
  %66 = add nuw nsw i32 %52, %65
  %67 = icmp ult i32 %66, 536870889
  %68 = add nuw nsw i64 %51, 1
  %69 = icmp slt i64 %68, %49
  %70 = and i1 %69, %67
  br i1 %70, label %50, label %71

71:                                               ; preds = %64, %36
  %72 = phi i32 [ 0, %36 ], [ %66, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %40) #10
  %73 = icmp eq i32 %72, %39
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = ptrtoint i64* %15 to i64
  br label %292

76:                                               ; preds = %71
  %77 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %78 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %77, i32 %72, i8 zeroext 0) #10
  %79 = icmp eq i64* %78, null
  br i1 %79, label %292, label %80

80:                                               ; preds = %76
  %81 = ptrtoint i64* %78 to i64
  %82 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %82) #10
  %83 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #10
  %84 = load i64, i64* %15, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8, i64 0, i32 0
  %87 = bitcast %"class.v8::internal::String::FlatContent"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %4, %"class.v8::internal::String"* nonnull %86, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %7) #10
  %88 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %4, i64 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #10
  br i1 %47, label %90, label %92

90:                                               ; preds = %80
  %91 = zext i32 %39 to i64
  br label %93

92:                                               ; preds = %128, %80
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %82) #10
  br label %292

93:                                               ; preds = %128, %90
  %94 = phi i64 [ 0, %90 ], [ %136, %128 ]
  %95 = phi i32 [ 0, %90 ], [ %135, %128 ]
  %96 = getelementptr inbounds i8, i8* %89, i64 %94
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = or i32 %98, 32
  %100 = add nsw i32 %99, -97
  %101 = icmp ult i32 %100, 26
  %102 = add nsw i32 %98, -48
  %103 = icmp ult i32 %102, 10
  %104 = or i1 %103, %101
  br i1 %104, label %106, label %105

105:                                              ; preds = %93
  switch i8 %97, label %109 [
    i8 64, label %106
    i8 42, label %106
    i8 95, label %106
    i8 43, label %106
    i8 45, label %106
    i8 46, label %106
    i8 47, label %106
  ]

106:                                              ; preds = %105, %105, %105, %105, %105, %105, %105, %93
  %107 = add nuw i32 %95, 11
  %108 = zext i32 %107 to i64
  br label %128

109:                                              ; preds = %105
  %110 = load i64, i64* %78, align 8
  %111 = zext i32 %95 to i64
  %112 = add nuw nsw i64 %111, 11
  %113 = add i64 %112, %110
  %114 = inttoptr i64 %113 to i8*
  store i8 37, i8* %114, align 1
  %115 = load i64, i64* %78, align 8
  %116 = lshr i8 %97, 4
  %117 = icmp ult i8 %97, -96
  %118 = select i1 %117, i8 48, i8 55
  %119 = add nuw nsw i8 %118, %116
  %120 = add nuw nsw i64 %111, 12
  %121 = add i64 %120, %115
  %122 = inttoptr i64 %121 to i8*
  store i8 %119, i8* %122, align 1
  %123 = and i8 %97, 15
  %124 = icmp ult i8 %123, 10
  %125 = select i1 %124, i8 48, i8 55
  %126 = add nuw nsw i8 %125, %123
  %127 = add nuw nsw i64 %111, 13
  br label %128

128:                                              ; preds = %109, %106
  %129 = phi i64 [ %127, %109 ], [ %108, %106 ]
  %130 = phi i8 [ %126, %109 ], [ %97, %106 ]
  %131 = phi i32 [ 3, %109 ], [ 1, %106 ]
  %132 = load i64, i64* %78, align 8
  %133 = add i64 %129, %132
  %134 = inttoptr i64 %133 to i8*
  store i8 %130, i8* %134, align 1
  %135 = add nuw nsw i32 %95, %131
  %136 = add nuw nsw i64 %94, 1
  %137 = icmp eq i64 %136, %91
  br i1 %137, label %92, label %93

138:                                              ; preds = %17
  %139 = add i64 %16, 7
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %142) #10
  %143 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #10
  %144 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %16, i64* %144, align 8
  %145 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0
  %146 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %9, %"class.v8::internal::String"* nonnull %145, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %11) #10
  %147 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i16**
  %148 = load i16*, i16** %147, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #10
  %149 = icmp sgt i32 %141, 0
  br i1 %149, label %150, label %175

150:                                              ; preds = %138
  %151 = sext i32 %141 to i64
  br label %152

152:                                              ; preds = %168, %150
  %153 = phi i64 [ %172, %168 ], [ 0, %150 ]
  %154 = phi i32 [ %170, %168 ], [ 0, %150 ]
  %155 = getelementptr inbounds i16, i16* %148, i64 %153
  %156 = load i16, i16* %155, align 2
  %157 = icmp ugt i16 %156, 255
  br i1 %157, label %168, label %158

158:                                              ; preds = %152
  %159 = zext i16 %156 to i32
  %160 = or i32 %159, 32
  %161 = add nsw i32 %160, -97
  %162 = icmp ult i32 %161, 26
  %163 = add nsw i32 %159, -48
  %164 = icmp ult i32 %163, 10
  %165 = or i1 %164, %162
  br i1 %165, label %168, label %166

166:                                              ; preds = %158
  switch i16 %156, label %167 [
    i16 64, label %168
    i16 42, label %168
    i16 95, label %168
    i16 43, label %168
    i16 45, label %168
    i16 46, label %168
    i16 47, label %168
  ]

167:                                              ; preds = %166
  br label %168

168:                                              ; preds = %158, %166, %166, %166, %166, %166, %166, %166, %152, %167
  %169 = phi i32 [ 3, %167 ], [ 6, %152 ], [ 1, %166 ], [ 1, %166 ], [ 1, %166 ], [ 1, %166 ], [ 1, %166 ], [ 1, %166 ], [ 1, %166 ], [ 1, %158 ]
  %170 = add nuw nsw i32 %154, %169
  %171 = icmp ult i32 %170, 536870889
  %172 = add nuw nsw i64 %153, 1
  %173 = icmp slt i64 %172, %151
  %174 = and i1 %173, %171
  br i1 %174, label %152, label %175

175:                                              ; preds = %168, %138
  %176 = phi i32 [ 0, %138 ], [ %170, %168 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %142) #10
  %177 = icmp eq i32 %176, %141
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = ptrtoint i64* %15 to i64
  br label %292

180:                                              ; preds = %175
  %181 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %182 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %181, i32 %176, i8 zeroext 0) #10
  %183 = icmp eq i64* %182, null
  br i1 %183, label %292, label %184

184:                                              ; preds = %180
  %185 = ptrtoint i64* %182 to i64
  %186 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %186) #10
  %187 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %187) #10
  %188 = load i64, i64* %15, align 8
  %189 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %188, i64* %189, align 8
  %190 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14, i64 0, i32 0
  %191 = bitcast %"class.v8::internal::String::FlatContent"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %10, %"class.v8::internal::String"* nonnull %190, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %13) #10
  %192 = bitcast %"class.v8::internal::String::FlatContent"* %10 to i16**
  %193 = load i16*, i16** %192, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #10
  br i1 %149, label %194, label %196

194:                                              ; preds = %184
  %195 = zext i32 %141 to i64
  br label %197

196:                                              ; preds = %282, %184
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %186) #10
  br label %292

197:                                              ; preds = %282, %194
  %198 = phi i64 [ 0, %194 ], [ %290, %282 ]
  %199 = phi i32 [ 0, %194 ], [ %289, %282 ]
  %200 = getelementptr inbounds i16, i16* %193, i64 %198
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = icmp ugt i16 %201, 255
  br i1 %203, label %204, label %249

204:                                              ; preds = %197
  %205 = load i64, i64* %182, align 8
  %206 = zext i32 %199 to i64
  %207 = add nuw nsw i64 %206, 11
  %208 = add i64 %207, %205
  %209 = inttoptr i64 %208 to i8*
  store i8 37, i8* %209, align 1
  %210 = load i64, i64* %182, align 8
  %211 = add nuw nsw i64 %206, 12
  %212 = add i64 %211, %210
  %213 = inttoptr i64 %212 to i8*
  store i8 117, i8* %213, align 1
  %214 = load i64, i64* %182, align 8
  %215 = icmp ult i16 %201, -24576
  %216 = lshr i16 %201, 12
  %217 = trunc i16 %216 to i8
  %218 = select i1 %215, i8 48, i8 55
  %219 = add nuw nsw i8 %218, %217
  %220 = add nuw nsw i64 %206, 13
  %221 = add i64 %220, %214
  %222 = inttoptr i64 %221 to i8*
  store i8 %219, i8* %222, align 1
  %223 = load i64, i64* %182, align 8
  %224 = lshr i32 %202, 8
  %225 = and i32 %224, 15
  %226 = icmp ult i32 %225, 10
  %227 = trunc i32 %225 to i8
  %228 = select i1 %226, i8 48, i8 55
  %229 = add nuw nsw i8 %228, %227
  %230 = add nuw nsw i64 %206, 14
  %231 = add i64 %230, %223
  %232 = inttoptr i64 %231 to i8*
  store i8 %229, i8* %232, align 1
  %233 = load i64, i64* %182, align 8
  %234 = lshr i32 %202, 4
  %235 = and i32 %234, 15
  %236 = icmp ult i32 %235, 10
  %237 = trunc i32 %235 to i8
  %238 = select i1 %236, i8 48, i8 55
  %239 = add nuw nsw i8 %238, %237
  %240 = add nuw nsw i64 %206, 15
  %241 = add i64 %240, %233
  %242 = inttoptr i64 %241 to i8*
  store i8 %239, i8* %242, align 1
  %243 = and i32 %202, 15
  %244 = icmp ult i32 %243, 10
  %245 = trunc i32 %243 to i8
  %246 = select i1 %244, i8 48, i8 55
  %247 = add nuw nsw i8 %246, %245
  %248 = add nuw nsw i64 %206, 16
  br label %282

249:                                              ; preds = %197
  %250 = or i32 %202, 32
  %251 = add nsw i32 %250, -97
  %252 = icmp ult i32 %251, 26
  %253 = add nsw i32 %202, -48
  %254 = icmp ult i32 %253, 10
  %255 = or i1 %254, %252
  br i1 %255, label %257, label %256

256:                                              ; preds = %249
  switch i16 %201, label %261 [
    i16 64, label %257
    i16 42, label %257
    i16 95, label %257
    i16 43, label %257
    i16 45, label %257
    i16 46, label %257
    i16 47, label %257
  ]

257:                                              ; preds = %256, %256, %256, %256, %256, %256, %256, %249
  %258 = trunc i16 %201 to i8
  %259 = add nuw i32 %199, 11
  %260 = zext i32 %259 to i64
  br label %282

261:                                              ; preds = %256
  %262 = load i64, i64* %182, align 8
  %263 = zext i32 %199 to i64
  %264 = add nuw nsw i64 %263, 11
  %265 = add i64 %264, %262
  %266 = inttoptr i64 %265 to i8*
  store i8 37, i8* %266, align 1
  %267 = load i64, i64* %182, align 8
  %268 = icmp ult i16 %201, 160
  %269 = lshr i16 %201, 4
  %270 = trunc i16 %269 to i8
  %271 = select i1 %268, i8 48, i8 55
  %272 = add nuw nsw i8 %271, %270
  %273 = add nuw nsw i64 %263, 12
  %274 = add i64 %273, %267
  %275 = inttoptr i64 %274 to i8*
  store i8 %272, i8* %275, align 1
  %276 = and i32 %202, 15
  %277 = icmp ult i32 %276, 10
  %278 = trunc i32 %276 to i8
  %279 = select i1 %277, i8 48, i8 55
  %280 = add nuw nsw i8 %279, %278
  %281 = add nuw nsw i64 %263, 13
  br label %282

282:                                              ; preds = %261, %257, %204
  %283 = phi i64 [ %281, %261 ], [ %260, %257 ], [ %248, %204 ]
  %284 = phi i8 [ %280, %261 ], [ %258, %257 ], [ %247, %204 ]
  %285 = phi i32 [ 3, %261 ], [ 1, %257 ], [ 6, %204 ]
  %286 = load i64, i64* %182, align 8
  %287 = add i64 %283, %286
  %288 = inttoptr i64 %287 to i8*
  store i8 %284, i8* %288, align 1
  %289 = add nuw nsw i32 %199, %285
  %290 = add nuw nsw i64 %198, 1
  %291 = icmp eq i64 %290, %195
  br i1 %291, label %196, label %197

292:                                              ; preds = %196, %180, %178, %92, %76, %74
  %293 = phi i64 [ %75, %74 ], [ %81, %92 ], [ 0, %76 ], [ %179, %178 ], [ %185, %196 ], [ 0, %180 ]
  %294 = inttoptr i64 %293 to i64*
  ret i64* %294
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Uri8UnescapeEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::String::FlatContent", align 8
  %4 = alloca %"class.v8::internal::String::FlatContent", align 8
  %5 = alloca %"class.v8::internal::String::FlatContent", align 8
  %6 = alloca %"class.v8::internal::String::FlatContent", align 8
  %7 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %8 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %11 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %12 = alloca i32, align 4
  %13 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %14 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %15 = alloca i32, align 4
  %16 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %17 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %18 = alloca %"class.v8::internal::String::FlatContent", align 8
  %19 = alloca %"class.v8::internal::String::FlatContent", align 8
  %20 = alloca %"class.v8::internal::String::FlatContent", align 8
  %21 = alloca %"class.v8::internal::String::FlatContent", align 8
  %22 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %23 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %24 = alloca i32, align 4
  %25 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %26 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %27 = alloca i32, align 4
  %28 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %29 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %30 = alloca i32, align 4
  %31 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %32 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %33 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %34 = load i64, i64* %33, align 8
  br label %35

35:                                               ; preds = %48, %2
  %36 = phi i64 [ %34, %2 ], [ %53, %48 ]
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, -1
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %37, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = and i16 %45, 9
  %47 = zext i16 %46 to i32
  switch i32 %47, label %48 [
    i32 8, label %54
    i32 0, label %177
  ]

48:                                               ; preds = %35
  %49 = add i64 %36, 11
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %37, %52
  br label %35

54:                                               ; preds = %35
  %55 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %16, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %55) #10
  %56 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #10
  %57 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %34, i64* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %17, i64 0, i32 0
  %59 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %3, %"class.v8::internal::String"* nonnull %58, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %16) #10
  %60 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = sext i32 %63 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #10
  %65 = call i32 @_ZN2v88internal18FindFirstCharacterIhhEEiNS0_6VectorIKT_EENS2_IKT0_EEi(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1, i8* %61, i64 %64, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #10
  %66 = icmp slt i32 %65, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %55) #10
  br i1 %66, label %300, label %67

67:                                               ; preds = %54
  %68 = load i64, i64* %33, align 8
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %72) #10
  %73 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  %74 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %68, i64* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %8, i64 0, i32 0
  %76 = bitcast %"class.v8::internal::String::FlatContent"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %4, %"class.v8::internal::String"* nonnull %75, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %7) #10
  %77 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %4, i64 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %4, i64 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = sext i32 %80 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #10
  %82 = icmp sgt i32 %71, %65
  br i1 %82, label %87, label %83

83:                                               ; preds = %67
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %72) #10
  %84 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %85 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %84, i64* %33, i32 0, i32 %65) #10
  %86 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  br label %106

87:                                               ; preds = %67
  %88 = bitcast i32* %9 to i8*
  br label %95

89:                                               ; preds = %95
  %90 = and i8 %101, 1
  %91 = icmp eq i8 %90, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %72) #10
  %92 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %93 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %92, i64* %33, i32 0, i32 %65) #10
  %94 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  br i1 %91, label %140, label %106

95:                                               ; preds = %95, %87
  %96 = phi i8 [ 1, %87 ], [ %101, %95 ]
  %97 = phi i32 [ 0, %87 ], [ %104, %95 ]
  %98 = phi i32 [ %65, %87 ], [ %103, %95 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %88) #10
  %99 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharIhEEiNS0_6VectorIKT_EEiiPi(i8* %78, i64 %81, i32 %98, i32 %71, i32* nonnull %9) #10
  %100 = icmp sgt i32 %99, 255
  %101 = select i1 %100, i8 0, i8 %96
  %102 = load i32, i32* %9, align 4
  %103 = add nsw i32 %102, %98
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %88) #10
  %104 = add nuw nsw i32 %97, 1
  %105 = icmp slt i32 %103, %71
  br i1 %105, label %95, label %89

106:                                              ; preds = %89, %83
  %107 = phi %"class.v8::internal::FactoryBase"* [ %86, %83 ], [ %94, %89 ]
  %108 = phi i64* [ %85, %83 ], [ %93, %89 ]
  %109 = phi i32 [ 0, %83 ], [ %104, %89 ]
  %110 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %107, i32 %109, i8 zeroext 0) #10
  %111 = icmp eq i64* %110, null
  br i1 %111, label %112, label %113, !prof !10

112:                                              ; preds = %106
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #11
  unreachable

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %114) #10
  %115 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #10
  %116 = load i64, i64* %33, align 8
  %117 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %116, i64* %117, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11, i64 0, i32 0
  %119 = bitcast %"class.v8::internal::String::FlatContent"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %119) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %5, %"class.v8::internal::String"* nonnull %118, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %10) #10
  %120 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %5, i64 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %5, i64 0, i32 1
  %123 = load i32, i32* %122, align 8
  %124 = sext i32 %123 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %119) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #10
  br i1 %82, label %125, label %171

125:                                              ; preds = %113
  %126 = bitcast i32* %12 to i8*
  br label %127

127:                                              ; preds = %127, %125
  %128 = phi i64 [ 0, %125 ], [ %138, %127 ]
  %129 = phi i32 [ %65, %125 ], [ %137, %127 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %126) #10
  %130 = load i64, i64* %110, align 8
  %131 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharIhEEiNS0_6VectorIKT_EEiiPi(i8* %121, i64 %124, i32 %129, i32 %71, i32* nonnull %12) #10
  %132 = trunc i32 %131 to i8
  %133 = add nuw i64 %128, 11
  %134 = add i64 %133, %130
  %135 = inttoptr i64 %134 to i8*
  store i8 %132, i8* %135, align 1
  %136 = load i32, i32* %12, align 4
  %137 = add nsw i32 %136, %129
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %126) #10
  %138 = add nuw i64 %128, 1
  %139 = icmp slt i32 %137, %71
  br i1 %139, label %127, label %171

140:                                              ; preds = %89
  %141 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawTwoByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %94, i32 %104, i8 zeroext 0) #10
  %142 = icmp eq i64* %141, null
  br i1 %142, label %143, label %144, !prof !10

143:                                              ; preds = %140
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #11
  unreachable

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %145) #10
  %146 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #10
  %147 = load i64, i64* %33, align 8
  %148 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %147, i64* %148, align 8
  %149 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %14, i64 0, i32 0
  %150 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %6, %"class.v8::internal::String"* nonnull %149, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %13) #10
  %151 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 1
  %154 = load i32, i32* %153, align 8
  %155 = sext i32 %154 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #10
  %156 = bitcast i32* %15 to i8*
  br label %157

157:                                              ; preds = %157, %144
  %158 = phi i64 [ 0, %144 ], [ %169, %157 ]
  %159 = phi i32 [ %65, %144 ], [ %168, %157 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #10
  %160 = load i64, i64* %141, align 8
  %161 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharIhEEiNS0_6VectorIKT_EEiiPi(i8* %152, i64 %155, i32 %159, i32 %71, i32* nonnull %15) #10
  %162 = trunc i32 %161 to i16
  %163 = shl nuw nsw i64 %158, 1
  %164 = add nuw i64 %163, 11
  %165 = add i64 %164, %160
  %166 = inttoptr i64 %165 to i16*
  store i16 %162, i16* %166, align 2
  %167 = load i32, i32* %15, align 4
  %168 = add nsw i32 %167, %159
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #10
  %169 = add nuw i64 %158, 1
  %170 = icmp slt i32 %168, %71
  br i1 %170, label %157, label %171

171:                                              ; preds = %127, %157, %113
  %172 = phi i8* [ %114, %113 ], [ %145, %157 ], [ %114, %127 ]
  %173 = phi %"class.v8::internal::FactoryBase"* [ %107, %113 ], [ %94, %157 ], [ %107, %127 ]
  %174 = phi i64* [ %108, %113 ], [ %93, %157 ], [ %108, %127 ]
  %175 = phi i64* [ %110, %113 ], [ %141, %157 ], [ %110, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %172) #10
  %176 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %173, i64* %174, i64* %175, i8 zeroext 0) #10
  br label %300

177:                                              ; preds = %35
  %178 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %31, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %178) #10
  %179 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %179) #10
  %180 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %34, i64* %180, align 8
  %181 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %32, i64 0, i32 0
  %182 = bitcast %"class.v8::internal::String::FlatContent"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %182) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %18, %"class.v8::internal::String"* nonnull %181, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %31) #10
  %183 = bitcast %"class.v8::internal::String::FlatContent"* %18 to i16**
  %184 = load i16*, i16** %183, align 8
  %185 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %18, i64 0, i32 1
  %186 = load i32, i32* %185, align 8
  %187 = sext i32 %186 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %182) #10
  %188 = call i32 @_ZN2v88internal18FindFirstCharacterIhtEEiNS0_6VectorIKT_EENS2_IKT0_EEi(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1, i16* %184, i64 %187, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %179) #10
  %189 = icmp slt i32 %188, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %178) #10
  br i1 %189, label %300, label %190

190:                                              ; preds = %177
  %191 = load i64, i64* %33, align 8
  %192 = add i64 %191, 7
  %193 = inttoptr i64 %192 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %22, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %195) #10
  %196 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #10
  %197 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %191, i64* %197, align 8
  %198 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %23, i64 0, i32 0
  %199 = bitcast %"class.v8::internal::String::FlatContent"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %199) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %19, %"class.v8::internal::String"* nonnull %198, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %22) #10
  %200 = bitcast %"class.v8::internal::String::FlatContent"* %19 to i16**
  %201 = load i16*, i16** %200, align 8
  %202 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %19, i64 0, i32 1
  %203 = load i32, i32* %202, align 8
  %204 = sext i32 %203 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %199) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #10
  %205 = icmp sgt i32 %194, %188
  br i1 %205, label %210, label %206

206:                                              ; preds = %190
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %195) #10
  %207 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %208 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %207, i64* %33, i32 0, i32 %188) #10
  %209 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  br label %229

210:                                              ; preds = %190
  %211 = bitcast i32* %24 to i8*
  br label %218

212:                                              ; preds = %218
  %213 = and i8 %224, 1
  %214 = icmp eq i8 %213, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %195) #10
  %215 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %216 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %215, i64* %33, i32 0, i32 %188) #10
  %217 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  br i1 %214, label %263, label %229

218:                                              ; preds = %218, %210
  %219 = phi i8 [ 1, %210 ], [ %224, %218 ]
  %220 = phi i32 [ 0, %210 ], [ %227, %218 ]
  %221 = phi i32 [ %188, %210 ], [ %226, %218 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %211) #10
  %222 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharItEEiNS0_6VectorIKT_EEiiPi(i16* %201, i64 %204, i32 %221, i32 %194, i32* nonnull %24) #10
  %223 = icmp sgt i32 %222, 255
  %224 = select i1 %223, i8 0, i8 %219
  %225 = load i32, i32* %24, align 4
  %226 = add nsw i32 %225, %221
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %211) #10
  %227 = add nuw nsw i32 %220, 1
  %228 = icmp slt i32 %226, %194
  br i1 %228, label %218, label %212

229:                                              ; preds = %212, %206
  %230 = phi %"class.v8::internal::FactoryBase"* [ %209, %206 ], [ %217, %212 ]
  %231 = phi i64* [ %208, %206 ], [ %216, %212 ]
  %232 = phi i32 [ 0, %206 ], [ %227, %212 ]
  %233 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %230, i32 %232, i8 zeroext 0) #10
  %234 = icmp eq i64* %233, null
  br i1 %234, label %235, label %236, !prof !10

235:                                              ; preds = %229
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #11
  unreachable

236:                                              ; preds = %229
  %237 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %25, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %237) #10
  %238 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %238) #10
  %239 = load i64, i64* %33, align 8
  %240 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %26, i64 0, i32 0
  %242 = bitcast %"class.v8::internal::String::FlatContent"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %20, %"class.v8::internal::String"* nonnull %241, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %25) #10
  %243 = bitcast %"class.v8::internal::String::FlatContent"* %20 to i16**
  %244 = load i16*, i16** %243, align 8
  %245 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %20, i64 0, i32 1
  %246 = load i32, i32* %245, align 8
  %247 = sext i32 %246 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %238) #10
  br i1 %205, label %248, label %294

248:                                              ; preds = %236
  %249 = bitcast i32* %27 to i8*
  br label %250

250:                                              ; preds = %250, %248
  %251 = phi i64 [ 0, %248 ], [ %261, %250 ]
  %252 = phi i32 [ %188, %248 ], [ %260, %250 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %249) #10
  %253 = load i64, i64* %233, align 8
  %254 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharItEEiNS0_6VectorIKT_EEiiPi(i16* %244, i64 %247, i32 %252, i32 %194, i32* nonnull %27) #10
  %255 = trunc i32 %254 to i8
  %256 = add nuw i64 %251, 11
  %257 = add i64 %256, %253
  %258 = inttoptr i64 %257 to i8*
  store i8 %255, i8* %258, align 1
  %259 = load i32, i32* %27, align 4
  %260 = add nsw i32 %259, %252
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %249) #10
  %261 = add nuw i64 %251, 1
  %262 = icmp slt i32 %260, %194
  br i1 %262, label %250, label %294

263:                                              ; preds = %212
  %264 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawTwoByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %217, i32 %227, i8 zeroext 0) #10
  %265 = icmp eq i64* %264, null
  br i1 %265, label %266, label %267, !prof !10

266:                                              ; preds = %263
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #11
  unreachable

267:                                              ; preds = %263
  %268 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %28, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %268) #10
  %269 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %269) #10
  %270 = load i64, i64* %33, align 8
  %271 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %29, i64 0, i32 0
  %273 = bitcast %"class.v8::internal::String::FlatContent"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %273) #10
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %21, %"class.v8::internal::String"* nonnull %272, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %28) #10
  %274 = bitcast %"class.v8::internal::String::FlatContent"* %21 to i16**
  %275 = load i16*, i16** %274, align 8
  %276 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %21, i64 0, i32 1
  %277 = load i32, i32* %276, align 8
  %278 = sext i32 %277 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %273) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %269) #10
  %279 = bitcast i32* %30 to i8*
  br label %280

280:                                              ; preds = %280, %267
  %281 = phi i64 [ 0, %267 ], [ %292, %280 ]
  %282 = phi i32 [ %188, %267 ], [ %291, %280 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %279) #10
  %283 = load i64, i64* %264, align 8
  %284 = call fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharItEEiNS0_6VectorIKT_EEiiPi(i16* %275, i64 %278, i32 %282, i32 %194, i32* nonnull %30) #10
  %285 = trunc i32 %284 to i16
  %286 = shl nuw nsw i64 %281, 1
  %287 = add nuw i64 %286, 11
  %288 = add i64 %287, %283
  %289 = inttoptr i64 %288 to i16*
  store i16 %285, i16* %289, align 2
  %290 = load i32, i32* %30, align 4
  %291 = add nsw i32 %290, %282
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %279) #10
  %292 = add nuw i64 %281, 1
  %293 = icmp slt i32 %291, %194
  br i1 %293, label %280, label %294

294:                                              ; preds = %250, %280, %236
  %295 = phi i8* [ %237, %236 ], [ %268, %280 ], [ %237, %250 ]
  %296 = phi %"class.v8::internal::FactoryBase"* [ %230, %236 ], [ %217, %280 ], [ %230, %250 ]
  %297 = phi i64* [ %231, %236 ], [ %216, %280 ], [ %231, %250 ]
  %298 = phi i64* [ %233, %236 ], [ %264, %280 ], [ %233, %250 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %295) #10
  %299 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %296, i64* %297, i64* %298, i8 zeroext 0) #10
  br label %300

300:                                              ; preds = %294, %177, %171, %54
  %301 = phi i64* [ %176, %171 ], [ %33, %54 ], [ %299, %294 ], [ %33, %177 ]
  ret i64* %301
}

declare i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_111IntoTwoByteEibiPNS0_6String11FlatContentEPNSt3__16vectorItNS5_9allocatorItEEEE(i32, i1 zeroext, i32, %"class.v8::internal::String::FlatContent"* readonly, %"class.std::__1::vector.1136"*) unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca [4 x i8], align 1
  %8 = icmp slt i32 %0, %2
  br i1 %8, label %9, label %752

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 2
  %11 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i16**
  %12 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %4, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast i16** %13 to i64*
  %16 = bitcast %"class.std::__1::vector.1136"* %4 to i64*
  %17 = bitcast i16** %14 to i64*
  %18 = getelementptr inbounds %"class.std::__1::vector.1136", %"class.std::__1::vector.1136"* %4, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %20 = bitcast i64* %6 to i8*
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 1
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 2
  %23 = sext i32 %2 to i64
  %24 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 1
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 2
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 3
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 1
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 2
  %29 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 3
  br label %30

30:                                               ; preds = %9, %748
  %31 = phi i32 [ %0, %9 ], [ %750, %748 ]
  %32 = load i32, i32* %10, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %41

34:                                               ; preds = %30
  %35 = load i8*, i8** %12, align 8
  %36 = sext i32 %31 to i64
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = bitcast i8* %35 to i16*
  br label %47

41:                                               ; preds = %30
  %42 = load i16*, i16** %11, align 8
  %43 = sext i32 %31 to i64
  %44 = getelementptr inbounds i16, i16* %42, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = bitcast i16* %42 to i8*
  br label %47

47:                                               ; preds = %34, %41
  %48 = phi i8* [ %35, %34 ], [ %46, %41 ]
  %49 = phi i16* [ %40, %34 ], [ %42, %41 ]
  %50 = phi i16 [ %39, %34 ], [ %45, %41 ]
  %51 = icmp eq i16 %50, 37
  br i1 %51, label %52, label %691

52:                                               ; preds = %47
  %53 = add i32 %31, 2
  %54 = icmp slt i32 %53, %2
  br i1 %54, label %55, label %752

55:                                               ; preds = %52
  %56 = add nsw i32 %31, 1
  %57 = sext i32 %56 to i64
  br i1 %33, label %58, label %66

58:                                               ; preds = %55
  %59 = getelementptr inbounds i8, i8* %48, i64 %57
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = sext i32 %53 to i64
  %63 = getelementptr inbounds i8, i8* %48, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  br label %72

66:                                               ; preds = %55
  %67 = getelementptr inbounds i16, i16* %49, i64 %57
  %68 = load i16, i16* %67, align 2
  %69 = sext i32 %53 to i64
  %70 = getelementptr inbounds i16, i16* %49, i64 %69
  %71 = load i16, i16* %70, align 2
  br label %72

72:                                               ; preds = %58, %66
  %73 = phi i16 [ %61, %58 ], [ %68, %66 ]
  %74 = phi i16 [ %65, %58 ], [ %71, %66 ]
  %75 = icmp ugt i16 %73, 102
  br i1 %75, label %752, label %76

76:                                               ; preds = %72
  %77 = zext i16 %73 to i32
  %78 = add nsw i32 %77, -48
  %79 = icmp ult i32 %78, 10
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = or i32 %78, 32
  %82 = add nsw i32 %81, -49
  %83 = icmp ult i32 %82, 6
  %84 = add nsw i32 %81, -39
  %85 = select i1 %83, i32 %84, i32 -1
  br label %86

86:                                               ; preds = %80, %76
  %87 = phi i32 [ %85, %80 ], [ %78, %76 ]
  %88 = icmp eq i32 %87, -1
  %89 = icmp ugt i16 %74, 102
  %90 = or i1 %89, %88
  br i1 %90, label %752, label %91

91:                                               ; preds = %86
  %92 = zext i16 %74 to i32
  %93 = add nsw i32 %92, -48
  %94 = icmp ult i32 %93, 10
  br i1 %94, label %95, label %98

95:                                               ; preds = %91
  %96 = shl nsw i32 %87, 4
  %97 = add nsw i32 %96, %93
  br label %107

98:                                               ; preds = %91
  %99 = or i32 %93, 32
  %100 = add nsw i32 %99, -49
  %101 = icmp ult i32 %100, 6
  %102 = add nsw i32 %99, -39
  br i1 %101, label %103, label %752

103:                                              ; preds = %98
  %104 = icmp eq i32 %102, -1
  %105 = shl nsw i32 %87, 4
  %106 = add nsw i32 %105, %102
  br i1 %104, label %752, label %107

107:                                              ; preds = %95, %103
  %108 = phi i32 [ %106, %103 ], [ %97, %95 ]
  %109 = icmp slt i32 %108, 0
  br i1 %109, label %752, label %110

110:                                              ; preds = %107
  %111 = and i32 %108, 65408
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %439, label %113

113:                                              ; preds = %110
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
  %114 = trunc i32 %108 to i8
  store i8 %114, i8* %19, align 1
  %115 = and i32 %108, 64
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %231, label %117

117:                                              ; preds = %113
  %118 = sext i32 %53 to i64
  %119 = add nsw i64 %118, 3
  %120 = icmp slt i64 %119, %23
  br i1 %33, label %121, label %172

121:                                              ; preds = %117
  br i1 %120, label %122, label %437

122:                                              ; preds = %121
  %123 = add nsw i64 %118, 1
  %124 = getelementptr inbounds i8, i8* %48, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 37
  br i1 %126, label %127, label %437

127:                                              ; preds = %122
  %128 = add nsw i64 %118, 2
  %129 = getelementptr inbounds i8, i8* %48, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds i8, i8* %48, i64 %119
  %132 = load i8, i8* %131, align 1
  %133 = icmp ugt i8 %130, 102
  br i1 %133, label %437, label %134

134:                                              ; preds = %127
  %135 = zext i8 %130 to i32
  %136 = add nsw i32 %135, -48
  %137 = icmp ult i32 %136, 10
  br i1 %137, label %144, label %138

138:                                              ; preds = %134
  %139 = or i32 %136, 32
  %140 = add nsw i32 %139, -49
  %141 = icmp ult i32 %140, 6
  %142 = add nsw i32 %139, -39
  %143 = select i1 %141, i32 %142, i32 -1
  br label %144

144:                                              ; preds = %138, %134
  %145 = phi i32 [ %143, %138 ], [ %136, %134 ]
  %146 = icmp eq i32 %145, -1
  %147 = icmp ugt i8 %132, 102
  %148 = or i1 %147, %146
  br i1 %148, label %437, label %149

149:                                              ; preds = %144
  %150 = zext i8 %132 to i32
  %151 = add nsw i32 %150, -48
  %152 = icmp ult i32 %151, 10
  br i1 %152, label %162, label %153

153:                                              ; preds = %149
  %154 = or i32 %151, 32
  %155 = add nsw i32 %154, -49
  %156 = icmp ult i32 %155, 6
  %157 = add nsw i32 %154, -39
  br i1 %156, label %158, label %437

158:                                              ; preds = %153
  %159 = icmp eq i32 %157, -1
  %160 = shl nsw i32 %145, 4
  %161 = add nsw i32 %160, %157
  br i1 %159, label %437, label %165

162:                                              ; preds = %149
  %163 = shl nsw i32 %145, 4
  %164 = add nsw i32 %163, %151
  br label %165

165:                                              ; preds = %162, %158
  %166 = phi i32 [ %161, %158 ], [ %164, %162 ]
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %437, label %168

168:                                              ; preds = %165
  %169 = trunc i32 %166 to i8
  store i8 %169, i8* %27, align 1
  %170 = and i32 %108, 32
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %223, label %862

172:                                              ; preds = %117
  br i1 %120, label %173, label %437

173:                                              ; preds = %172
  %174 = add nsw i64 %118, 1
  %175 = getelementptr inbounds i16, i16* %49, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = icmp eq i16 %176, 37
  br i1 %177, label %178, label %437

178:                                              ; preds = %173
  %179 = add nsw i64 %118, 2
  %180 = getelementptr inbounds i16, i16* %49, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = getelementptr inbounds i16, i16* %49, i64 %119
  %183 = load i16, i16* %182, align 2
  %184 = icmp ugt i16 %181, 102
  br i1 %184, label %437, label %185

185:                                              ; preds = %178
  %186 = zext i16 %181 to i32
  %187 = add nsw i32 %186, -48
  %188 = icmp ult i32 %187, 10
  br i1 %188, label %195, label %189

189:                                              ; preds = %185
  %190 = or i32 %187, 32
  %191 = add nsw i32 %190, -49
  %192 = icmp ult i32 %191, 6
  %193 = add nsw i32 %190, -39
  %194 = select i1 %192, i32 %193, i32 -1
  br label %195

195:                                              ; preds = %189, %185
  %196 = phi i32 [ %194, %189 ], [ %187, %185 ]
  %197 = icmp eq i32 %196, -1
  %198 = icmp ugt i16 %183, 102
  %199 = or i1 %198, %197
  br i1 %199, label %437, label %200

200:                                              ; preds = %195
  %201 = zext i16 %183 to i32
  %202 = add nsw i32 %201, -48
  %203 = icmp ult i32 %202, 10
  br i1 %203, label %204, label %207

204:                                              ; preds = %200
  %205 = shl nsw i32 %196, 4
  %206 = add nsw i32 %205, %202
  br label %216

207:                                              ; preds = %200
  %208 = or i32 %202, 32
  %209 = add nsw i32 %208, -49
  %210 = icmp ult i32 %209, 6
  %211 = add nsw i32 %208, -39
  br i1 %210, label %212, label %437

212:                                              ; preds = %207
  %213 = icmp eq i32 %211, -1
  %214 = shl nsw i32 %196, 4
  %215 = add nsw i32 %214, %211
  br i1 %213, label %437, label %216

216:                                              ; preds = %204, %212
  %217 = phi i32 [ %215, %212 ], [ %206, %204 ]
  %218 = icmp slt i32 %217, 0
  br i1 %218, label %437, label %219

219:                                              ; preds = %216
  %220 = trunc i32 %217 to i8
  store i8 %220, i8* %24, align 1
  %221 = and i32 %108, 32
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %227, label %754

223:                                              ; preds = %964, %911, %168
  %224 = phi i32 [ 2, %168 ], [ 3, %911 ], [ 4, %964 ]
  %225 = phi i64 [ %119, %168 ], [ %863, %911 ], [ %916, %964 ]
  %226 = trunc i64 %225 to i32
  br label %231

227:                                              ; preds = %856, %803, %219
  %228 = phi i32 [ 2, %219 ], [ 3, %803 ], [ 4, %856 ]
  %229 = phi i64 [ %119, %219 ], [ %755, %803 ], [ %808, %856 ]
  %230 = trunc i64 %229 to i32
  br label %231

231:                                              ; preds = %227, %223, %113
  %232 = phi i32 [ %53, %113 ], [ %226, %223 ], [ %230, %227 ]
  %233 = phi i32 [ 1, %113 ], [ %224, %223 ], [ %228, %227 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  store i64 0, i64* %6, align 8
  %234 = icmp sgt i8 %114, -1
  br i1 %234, label %235, label %237, !prof !11

235:                                              ; preds = %231
  %236 = and i32 %108, 255
  store i64 1, i64* %6, align 8
  br label %254

237:                                              ; preds = %231
  %238 = zext i32 %233 to i64
  %239 = call i32 @_ZN7unibrow4Utf814CalculateValueEPKhmPm(i8* nonnull %19, i64 %238, i64* nonnull %6) #10
  %240 = icmp eq i32 %239, 65533
  br i1 %240, label %241, label %252

241:                                              ; preds = %237
  %242 = icmp eq i32 %233, 3
  %243 = load i8, i8* %19, align 1
  %244 = icmp eq i8 %243, -17
  %245 = and i1 %242, %244
  %246 = load i8, i8* %21, align 1
  %247 = icmp eq i8 %246, -65
  %248 = and i1 %245, %247
  %249 = load i8, i8* %22, align 1
  %250 = icmp eq i8 %249, -67
  %251 = and i1 %248, %250
  br i1 %251, label %254, label %436

252:                                              ; preds = %237
  %253 = icmp ult i32 %239, 65536
  br i1 %253, label %254, label %313

254:                                              ; preds = %241, %252, %235
  %255 = phi i32 [ %239, %252 ], [ %236, %235 ], [ 65533, %241 ]
  %256 = trunc i32 %255 to i16
  %257 = load i16*, i16** %13, align 8
  %258 = load i16*, i16** %14, align 8
  %259 = icmp ult i16* %257, %258
  %260 = ptrtoint i16* %258 to i64
  br i1 %259, label %261, label %264

261:                                              ; preds = %254
  store i16 %256, i16* %257, align 2
  %262 = getelementptr inbounds i16, i16* %257, i64 1
  %263 = ptrtoint i16* %262 to i64
  store i64 %263, i64* %15, align 8
  br label %438

264:                                              ; preds = %254
  %265 = ptrtoint i16* %257 to i64
  %266 = load i64, i64* %16, align 8
  %267 = sub i64 %265, %266
  %268 = ashr exact i64 %267, 1
  %269 = add nsw i64 %268, 1
  %270 = icmp slt i64 %269, 0
  br i1 %270, label %271, label %273

271:                                              ; preds = %264
  %272 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %272) #11
  unreachable

273:                                              ; preds = %264
  %274 = sub i64 %260, %266
  %275 = ashr exact i64 %274, 1
  %276 = icmp ult i64 %275, 4611686018427387903
  %277 = icmp ult i64 %274, %269
  %278 = select i1 %277, i64 %269, i64 %274
  %279 = select i1 %276, i64 %278, i64 9223372036854775807
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %288, label %281

281:                                              ; preds = %273
  %282 = icmp slt i64 %279, 0
  br i1 %282, label %283, label %284

283:                                              ; preds = %281
  call void @abort() #11
  unreachable

284:                                              ; preds = %281
  %285 = shl i64 %279, 1
  %286 = call i8* @_Znwm(i64 %285) #12
  %287 = bitcast i8* %286 to i16*
  br label %288

288:                                              ; preds = %284, %273
  %289 = phi i16* [ %287, %284 ], [ null, %273 ]
  %290 = getelementptr inbounds i16, i16* %289, i64 %268
  %291 = getelementptr inbounds i16, i16* %289, i64 %279
  %292 = ptrtoint i16* %291 to i64
  store i16 %256, i16* %290, align 2
  %293 = getelementptr inbounds i16, i16* %290, i64 1
  %294 = ptrtoint i16* %293 to i64
  %295 = load i16*, i16** %18, align 8
  %296 = load i64, i64* %15, align 8
  %297 = ptrtoint i16* %295 to i64
  %298 = sub i64 %296, %297
  %299 = ashr exact i64 %298, 1
  %300 = sub nsw i64 0, %299
  %301 = getelementptr inbounds i16, i16* %290, i64 %300
  %302 = ptrtoint i16* %301 to i64
  %303 = icmp sgt i64 %298, 0
  br i1 %303, label %304, label %308

304:                                              ; preds = %288
  %305 = bitcast i16* %301 to i8*
  %306 = bitcast i16* %295 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %305, i8* align 2 %306, i64 %298, i1 false) #10
  %307 = load i16*, i16** %18, align 8
  br label %308

308:                                              ; preds = %304, %288
  %309 = phi i16* [ %295, %288 ], [ %307, %304 ]
  store i64 %302, i64* %16, align 8
  store i64 %294, i64* %15, align 8
  store i64 %292, i64* %17, align 8
  %310 = icmp eq i16* %309, null
  br i1 %310, label %438, label %311

311:                                              ; preds = %308
  %312 = bitcast i16* %309 to i8*
  call void @_ZdlPv(i8* %312) #12
  br label %438

313:                                              ; preds = %252
  %314 = add i32 %239, 983040
  %315 = lshr i32 %314, 10
  %316 = trunc i32 %315 to i16
  %317 = and i16 %316, 1023
  %318 = or i16 %317, -10240
  %319 = load i16*, i16** %13, align 8
  %320 = load i16*, i16** %14, align 8
  %321 = icmp ult i16* %319, %320
  %322 = ptrtoint i16* %320 to i64
  br i1 %321, label %323, label %326

323:                                              ; preds = %313
  store i16 %318, i16* %319, align 2
  %324 = getelementptr inbounds i16, i16* %319, i64 1
  %325 = ptrtoint i16* %324 to i64
  store i64 %325, i64* %15, align 8
  br label %376

326:                                              ; preds = %313
  %327 = ptrtoint i16* %319 to i64
  %328 = load i64, i64* %16, align 8
  %329 = sub i64 %327, %328
  %330 = ashr exact i64 %329, 1
  %331 = add nsw i64 %330, 1
  %332 = icmp slt i64 %331, 0
  br i1 %332, label %333, label %335

333:                                              ; preds = %326
  %334 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %334) #11
  unreachable

335:                                              ; preds = %326
  %336 = sub i64 %322, %328
  %337 = ashr exact i64 %336, 1
  %338 = icmp ult i64 %337, 4611686018427387903
  %339 = icmp ult i64 %336, %331
  %340 = select i1 %339, i64 %331, i64 %336
  %341 = select i1 %338, i64 %340, i64 9223372036854775807
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %350, label %343

343:                                              ; preds = %335
  %344 = icmp slt i64 %341, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %343
  call void @abort() #11
  unreachable

346:                                              ; preds = %343
  %347 = shl i64 %341, 1
  %348 = call i8* @_Znwm(i64 %347) #12
  %349 = bitcast i8* %348 to i16*
  br label %350

350:                                              ; preds = %346, %335
  %351 = phi i16* [ %349, %346 ], [ null, %335 ]
  %352 = getelementptr inbounds i16, i16* %351, i64 %330
  %353 = getelementptr inbounds i16, i16* %351, i64 %341
  %354 = ptrtoint i16* %353 to i64
  store i16 %318, i16* %352, align 2
  %355 = getelementptr inbounds i16, i16* %352, i64 1
  %356 = ptrtoint i16* %355 to i64
  %357 = load i16*, i16** %18, align 8
  %358 = load i64, i64* %15, align 8
  %359 = ptrtoint i16* %357 to i64
  %360 = sub i64 %358, %359
  %361 = ashr exact i64 %360, 1
  %362 = sub nsw i64 0, %361
  %363 = getelementptr inbounds i16, i16* %352, i64 %362
  %364 = ptrtoint i16* %363 to i64
  %365 = icmp sgt i64 %360, 0
  br i1 %365, label %366, label %370

366:                                              ; preds = %350
  %367 = bitcast i16* %363 to i8*
  %368 = bitcast i16* %357 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %367, i8* align 2 %368, i64 %360, i1 false) #10
  %369 = load i16*, i16** %18, align 8
  br label %370

370:                                              ; preds = %366, %350
  %371 = phi i16* [ %357, %350 ], [ %369, %366 ]
  store i64 %364, i64* %16, align 8
  store i64 %356, i64* %15, align 8
  store i64 %354, i64* %17, align 8
  %372 = icmp eq i16* %371, null
  br i1 %372, label %376, label %373

373:                                              ; preds = %370
  %374 = bitcast i16* %371 to i8*
  call void @_ZdlPv(i8* %374) #12
  %375 = load i16*, i16** %13, align 8
  br label %376

376:                                              ; preds = %373, %370, %323
  %377 = phi i16* [ %324, %323 ], [ %355, %370 ], [ %375, %373 ]
  %378 = trunc i32 %239 to i16
  %379 = and i16 %378, 1023
  %380 = or i16 %379, -9216
  %381 = load i16*, i16** %14, align 8
  %382 = icmp ult i16* %377, %381
  %383 = ptrtoint i16* %381 to i64
  br i1 %382, label %384, label %387

384:                                              ; preds = %376
  store i16 %380, i16* %377, align 2
  %385 = getelementptr inbounds i16, i16* %377, i64 1
  %386 = ptrtoint i16* %385 to i64
  store i64 %386, i64* %15, align 8
  br label %438

387:                                              ; preds = %376
  %388 = ptrtoint i16* %377 to i64
  %389 = load i64, i64* %16, align 8
  %390 = sub i64 %388, %389
  %391 = ashr exact i64 %390, 1
  %392 = add nsw i64 %391, 1
  %393 = icmp slt i64 %392, 0
  br i1 %393, label %394, label %396

394:                                              ; preds = %387
  %395 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %395) #11
  unreachable

396:                                              ; preds = %387
  %397 = sub i64 %383, %389
  %398 = ashr exact i64 %397, 1
  %399 = icmp ult i64 %398, 4611686018427387903
  %400 = icmp ult i64 %397, %392
  %401 = select i1 %400, i64 %392, i64 %397
  %402 = select i1 %399, i64 %401, i64 9223372036854775807
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %411, label %404

404:                                              ; preds = %396
  %405 = icmp slt i64 %402, 0
  br i1 %405, label %406, label %407

406:                                              ; preds = %404
  call void @abort() #11
  unreachable

407:                                              ; preds = %404
  %408 = shl i64 %402, 1
  %409 = call i8* @_Znwm(i64 %408) #12
  %410 = bitcast i8* %409 to i16*
  br label %411

411:                                              ; preds = %407, %396
  %412 = phi i16* [ %410, %407 ], [ null, %396 ]
  %413 = getelementptr inbounds i16, i16* %412, i64 %391
  %414 = getelementptr inbounds i16, i16* %412, i64 %402
  %415 = ptrtoint i16* %414 to i64
  store i16 %380, i16* %413, align 2
  %416 = getelementptr inbounds i16, i16* %413, i64 1
  %417 = ptrtoint i16* %416 to i64
  %418 = load i16*, i16** %18, align 8
  %419 = load i64, i64* %15, align 8
  %420 = ptrtoint i16* %418 to i64
  %421 = sub i64 %419, %420
  %422 = ashr exact i64 %421, 1
  %423 = sub nsw i64 0, %422
  %424 = getelementptr inbounds i16, i16* %413, i64 %423
  %425 = ptrtoint i16* %424 to i64
  %426 = icmp sgt i64 %421, 0
  br i1 %426, label %427, label %431

427:                                              ; preds = %411
  %428 = bitcast i16* %424 to i8*
  %429 = bitcast i16* %418 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %428, i8* align 2 %429, i64 %421, i1 false) #10
  %430 = load i16*, i16** %18, align 8
  br label %431

431:                                              ; preds = %427, %411
  %432 = phi i16* [ %418, %411 ], [ %430, %427 ]
  store i64 %425, i64* %16, align 8
  store i64 %417, i64* %15, align 8
  store i64 %415, i64* %17, align 8
  %433 = icmp eq i16* %432, null
  br i1 %433, label %438, label %434

434:                                              ; preds = %431
  %435 = bitcast i16* %432 to i8*
  call void @_ZdlPv(i8* %435) #12
  br label %438

436:                                              ; preds = %241
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %437

437:                                              ; preds = %207, %172, %173, %216, %178, %195, %212, %754, %757, %762, %779, %788, %793, %800, %807, %810, %815, %832, %841, %846, %853, %860, %165, %158, %153, %144, %127, %122, %121, %862, %865, %870, %887, %896, %901, %908, %915, %918, %923, %940, %949, %954, %961, %968, %436
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
  br label %752

438:                                              ; preds = %434, %431, %384, %311, %308, %261
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
  br label %748

439:                                              ; preds = %110
  %440 = trunc i32 %108 to i16
  br i1 %1, label %441, label %634

441:                                              ; preds = %439
  switch i16 %440, label %634 [
    i16 35, label %442
    i16 36, label %442
    i16 38, label %442
    i16 43, label %442
    i16 44, label %442
    i16 47, label %442
    i16 58, label %442
    i16 59, label %442
    i16 61, label %442
    i16 63, label %442
    i16 64, label %442
  ]

442:                                              ; preds = %441, %441, %441, %441, %441, %441, %441, %441, %441, %441, %441
  %443 = load i16*, i16** %13, align 8
  %444 = load i16*, i16** %14, align 8
  %445 = icmp ult i16* %443, %444
  %446 = ptrtoint i16* %444 to i64
  br i1 %445, label %447, label %450

447:                                              ; preds = %442
  store i16 37, i16* %443, align 2
  %448 = getelementptr inbounds i16, i16* %443, i64 1
  %449 = ptrtoint i16* %448 to i64
  store i64 %449, i64* %15, align 8
  br label %499

450:                                              ; preds = %442
  %451 = ptrtoint i16* %443 to i64
  %452 = load i64, i64* %16, align 8
  %453 = sub i64 %451, %452
  %454 = ashr exact i64 %453, 1
  %455 = add nsw i64 %454, 1
  %456 = icmp slt i64 %455, 0
  br i1 %456, label %457, label %459

457:                                              ; preds = %450
  %458 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %458) #11
  unreachable

459:                                              ; preds = %450
  %460 = sub i64 %446, %452
  %461 = ashr exact i64 %460, 1
  %462 = icmp ult i64 %461, 4611686018427387903
  %463 = icmp ult i64 %460, %455
  %464 = select i1 %463, i64 %455, i64 %460
  %465 = select i1 %462, i64 %464, i64 9223372036854775807
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %474, label %467

467:                                              ; preds = %459
  %468 = icmp slt i64 %465, 0
  br i1 %468, label %469, label %470

469:                                              ; preds = %467
  call void @abort() #11
  unreachable

470:                                              ; preds = %467
  %471 = shl i64 %465, 1
  %472 = call i8* @_Znwm(i64 %471) #12
  %473 = bitcast i8* %472 to i16*
  br label %474

474:                                              ; preds = %470, %459
  %475 = phi i16* [ %473, %470 ], [ null, %459 ]
  %476 = getelementptr inbounds i16, i16* %475, i64 %454
  %477 = getelementptr inbounds i16, i16* %475, i64 %465
  %478 = ptrtoint i16* %477 to i64
  store i16 37, i16* %476, align 2
  %479 = getelementptr inbounds i16, i16* %476, i64 1
  %480 = ptrtoint i16* %479 to i64
  %481 = load i16*, i16** %18, align 8
  %482 = load i64, i64* %15, align 8
  %483 = ptrtoint i16* %481 to i64
  %484 = sub i64 %482, %483
  %485 = ashr exact i64 %484, 1
  %486 = sub nsw i64 0, %485
  %487 = getelementptr inbounds i16, i16* %476, i64 %486
  %488 = ptrtoint i16* %487 to i64
  %489 = icmp sgt i64 %484, 0
  br i1 %489, label %490, label %494

490:                                              ; preds = %474
  %491 = bitcast i16* %487 to i8*
  %492 = bitcast i16* %481 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %491, i8* align 2 %492, i64 %484, i1 false) #10
  %493 = load i16*, i16** %18, align 8
  br label %494

494:                                              ; preds = %490, %474
  %495 = phi i16* [ %481, %474 ], [ %493, %490 ]
  store i64 %488, i64* %16, align 8
  store i64 %480, i64* %15, align 8
  store i64 %478, i64* %17, align 8
  %496 = icmp eq i16* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %494
  %498 = bitcast i16* %495 to i8*
  call void @_ZdlPv(i8* %498) #12
  br label %499

499:                                              ; preds = %497, %494, %447
  %500 = load i32, i32* %10, align 4
  %501 = icmp eq i32 %500, 1
  br i1 %501, label %502, label %512

502:                                              ; preds = %499
  %503 = load i8*, i8** %12, align 8
  %504 = sext i32 %56 to i64
  %505 = getelementptr inbounds i8, i8* %503, i64 %504
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i16
  %508 = sext i32 %53 to i64
  %509 = getelementptr inbounds i8, i8* %503, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i16
  br label %520

512:                                              ; preds = %499
  %513 = load i16*, i16** %11, align 8
  %514 = sext i32 %56 to i64
  %515 = getelementptr inbounds i16, i16* %513, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = sext i32 %53 to i64
  %518 = getelementptr inbounds i16, i16* %513, i64 %517
  %519 = load i16, i16* %518, align 2
  br label %520

520:                                              ; preds = %512, %502
  %521 = phi i16 [ %507, %502 ], [ %516, %512 ]
  %522 = phi i16 [ %511, %502 ], [ %519, %512 ]
  %523 = load i16*, i16** %13, align 8
  %524 = load i16*, i16** %14, align 8
  %525 = icmp eq i16* %523, %524
  %526 = ptrtoint i16* %524 to i64
  br i1 %525, label %530, label %527

527:                                              ; preds = %520
  store i16 %521, i16* %523, align 2
  %528 = getelementptr inbounds i16, i16* %523, i64 1
  %529 = ptrtoint i16* %528 to i64
  store i64 %529, i64* %15, align 8
  br label %580

530:                                              ; preds = %520
  %531 = ptrtoint i16* %523 to i64
  %532 = load i64, i64* %16, align 8
  %533 = sub i64 %531, %532
  %534 = ashr exact i64 %533, 1
  %535 = add nsw i64 %534, 1
  %536 = icmp slt i64 %535, 0
  br i1 %536, label %537, label %539

537:                                              ; preds = %530
  %538 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %538) #11
  unreachable

539:                                              ; preds = %530
  %540 = sub i64 %526, %532
  %541 = ashr exact i64 %540, 1
  %542 = icmp ult i64 %541, 4611686018427387903
  %543 = icmp ult i64 %540, %535
  %544 = select i1 %543, i64 %535, i64 %540
  %545 = select i1 %542, i64 %544, i64 9223372036854775807
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %554, label %547

547:                                              ; preds = %539
  %548 = icmp slt i64 %545, 0
  br i1 %548, label %549, label %550

549:                                              ; preds = %547
  call void @abort() #11
  unreachable

550:                                              ; preds = %547
  %551 = shl i64 %545, 1
  %552 = call i8* @_Znwm(i64 %551) #12
  %553 = bitcast i8* %552 to i16*
  br label %554

554:                                              ; preds = %550, %539
  %555 = phi i16* [ %553, %550 ], [ null, %539 ]
  %556 = getelementptr inbounds i16, i16* %555, i64 %534
  %557 = getelementptr inbounds i16, i16* %555, i64 %545
  %558 = ptrtoint i16* %557 to i64
  store i16 %521, i16* %556, align 2
  %559 = getelementptr inbounds i16, i16* %556, i64 1
  %560 = ptrtoint i16* %559 to i64
  %561 = load i16*, i16** %18, align 8
  %562 = load i64, i64* %15, align 8
  %563 = ptrtoint i16* %561 to i64
  %564 = sub i64 %562, %563
  %565 = ashr exact i64 %564, 1
  %566 = sub nsw i64 0, %565
  %567 = getelementptr inbounds i16, i16* %556, i64 %566
  %568 = ptrtoint i16* %567 to i64
  %569 = icmp sgt i64 %564, 0
  br i1 %569, label %570, label %574

570:                                              ; preds = %554
  %571 = bitcast i16* %567 to i8*
  %572 = bitcast i16* %561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %571, i8* align 2 %572, i64 %564, i1 false) #10
  %573 = load i16*, i16** %18, align 8
  br label %574

574:                                              ; preds = %570, %554
  %575 = phi i16* [ %561, %554 ], [ %573, %570 ]
  store i64 %568, i64* %16, align 8
  store i64 %560, i64* %15, align 8
  store i64 %558, i64* %17, align 8
  %576 = icmp eq i16* %575, null
  br i1 %576, label %580, label %577

577:                                              ; preds = %574
  %578 = bitcast i16* %575 to i8*
  call void @_ZdlPv(i8* %578) #12
  %579 = load i16*, i16** %13, align 8
  br label %580

580:                                              ; preds = %577, %574, %527
  %581 = phi i16* [ %528, %527 ], [ %559, %574 ], [ %579, %577 ]
  %582 = load i16*, i16** %14, align 8
  %583 = icmp eq i16* %581, %582
  br i1 %583, label %587, label %584

584:                                              ; preds = %580
  store i16 %522, i16* %581, align 2
  %585 = getelementptr inbounds i16, i16* %581, i64 1
  %586 = ptrtoint i16* %585 to i64
  store i64 %586, i64* %15, align 8
  br label %748

587:                                              ; preds = %580
  %588 = ptrtoint i16* %581 to i64
  %589 = load i64, i64* %16, align 8
  %590 = sub i64 %588, %589
  %591 = ashr exact i64 %590, 1
  %592 = add nsw i64 %591, 1
  %593 = icmp slt i64 %592, 0
  br i1 %593, label %594, label %596

594:                                              ; preds = %587
  %595 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %595) #11
  unreachable

596:                                              ; preds = %587
  %597 = icmp ult i64 %591, 4611686018427387903
  %598 = icmp ult i64 %590, %592
  %599 = select i1 %598, i64 %592, i64 %590
  %600 = select i1 %597, i64 %599, i64 9223372036854775807
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %609, label %602

602:                                              ; preds = %596
  %603 = icmp slt i64 %600, 0
  br i1 %603, label %604, label %605

604:                                              ; preds = %602
  call void @abort() #11
  unreachable

605:                                              ; preds = %602
  %606 = shl i64 %600, 1
  %607 = call i8* @_Znwm(i64 %606) #12
  %608 = bitcast i8* %607 to i16*
  br label %609

609:                                              ; preds = %605, %596
  %610 = phi i16* [ %608, %605 ], [ null, %596 ]
  %611 = getelementptr inbounds i16, i16* %610, i64 %591
  %612 = getelementptr inbounds i16, i16* %610, i64 %600
  %613 = ptrtoint i16* %612 to i64
  store i16 %522, i16* %611, align 2
  %614 = getelementptr inbounds i16, i16* %611, i64 1
  %615 = ptrtoint i16* %614 to i64
  %616 = load i16*, i16** %18, align 8
  %617 = load i64, i64* %15, align 8
  %618 = ptrtoint i16* %616 to i64
  %619 = sub i64 %617, %618
  %620 = ashr exact i64 %619, 1
  %621 = sub nsw i64 0, %620
  %622 = getelementptr inbounds i16, i16* %611, i64 %621
  %623 = ptrtoint i16* %622 to i64
  %624 = icmp sgt i64 %619, 0
  br i1 %624, label %625, label %629

625:                                              ; preds = %609
  %626 = bitcast i16* %622 to i8*
  %627 = bitcast i16* %616 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %626, i8* align 2 %627, i64 %619, i1 false) #10
  %628 = load i16*, i16** %18, align 8
  br label %629

629:                                              ; preds = %625, %609
  %630 = phi i16* [ %616, %609 ], [ %628, %625 ]
  store i64 %623, i64* %16, align 8
  store i64 %615, i64* %15, align 8
  store i64 %613, i64* %17, align 8
  %631 = icmp eq i16* %630, null
  br i1 %631, label %748, label %632

632:                                              ; preds = %629
  %633 = bitcast i16* %630 to i8*
  call void @_ZdlPv(i8* %633) #12
  br label %748

634:                                              ; preds = %441, %439
  %635 = load i16*, i16** %13, align 8
  %636 = load i16*, i16** %14, align 8
  %637 = icmp eq i16* %635, %636
  %638 = ptrtoint i16* %636 to i64
  br i1 %637, label %642, label %639

639:                                              ; preds = %634
  store i16 %440, i16* %635, align 2
  %640 = getelementptr inbounds i16, i16* %635, i64 1
  %641 = ptrtoint i16* %640 to i64
  store i64 %641, i64* %15, align 8
  br label %748

642:                                              ; preds = %634
  %643 = ptrtoint i16* %635 to i64
  %644 = load i64, i64* %16, align 8
  %645 = sub i64 %643, %644
  %646 = ashr exact i64 %645, 1
  %647 = add nsw i64 %646, 1
  %648 = icmp slt i64 %647, 0
  br i1 %648, label %649, label %651

649:                                              ; preds = %642
  %650 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %650) #11
  unreachable

651:                                              ; preds = %642
  %652 = sub i64 %638, %644
  %653 = ashr exact i64 %652, 1
  %654 = icmp ult i64 %653, 4611686018427387903
  %655 = icmp ult i64 %652, %647
  %656 = select i1 %655, i64 %647, i64 %652
  %657 = select i1 %654, i64 %656, i64 9223372036854775807
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %666, label %659

659:                                              ; preds = %651
  %660 = icmp slt i64 %657, 0
  br i1 %660, label %661, label %662

661:                                              ; preds = %659
  call void @abort() #11
  unreachable

662:                                              ; preds = %659
  %663 = shl i64 %657, 1
  %664 = call i8* @_Znwm(i64 %663) #12
  %665 = bitcast i8* %664 to i16*
  br label %666

666:                                              ; preds = %662, %651
  %667 = phi i16* [ %665, %662 ], [ null, %651 ]
  %668 = getelementptr inbounds i16, i16* %667, i64 %646
  %669 = getelementptr inbounds i16, i16* %667, i64 %657
  %670 = ptrtoint i16* %669 to i64
  store i16 %440, i16* %668, align 2
  %671 = getelementptr inbounds i16, i16* %668, i64 1
  %672 = ptrtoint i16* %671 to i64
  %673 = load i16*, i16** %18, align 8
  %674 = load i64, i64* %15, align 8
  %675 = ptrtoint i16* %673 to i64
  %676 = sub i64 %674, %675
  %677 = ashr exact i64 %676, 1
  %678 = sub nsw i64 0, %677
  %679 = getelementptr inbounds i16, i16* %668, i64 %678
  %680 = ptrtoint i16* %679 to i64
  %681 = icmp sgt i64 %676, 0
  br i1 %681, label %682, label %686

682:                                              ; preds = %666
  %683 = bitcast i16* %679 to i8*
  %684 = bitcast i16* %673 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %683, i8* align 2 %684, i64 %676, i1 false) #10
  %685 = load i16*, i16** %18, align 8
  br label %686

686:                                              ; preds = %682, %666
  %687 = phi i16* [ %673, %666 ], [ %685, %682 ]
  store i64 %680, i64* %16, align 8
  store i64 %672, i64* %15, align 8
  store i64 %670, i64* %17, align 8
  %688 = icmp eq i16* %687, null
  br i1 %688, label %748, label %689

689:                                              ; preds = %686
  %690 = bitcast i16* %687 to i8*
  call void @_ZdlPv(i8* %690) #12
  br label %748

691:                                              ; preds = %47
  %692 = load i16*, i16** %13, align 8
  %693 = load i16*, i16** %14, align 8
  %694 = icmp eq i16* %692, %693
  %695 = ptrtoint i16* %693 to i64
  br i1 %694, label %699, label %696

696:                                              ; preds = %691
  store i16 %50, i16* %692, align 2
  %697 = getelementptr inbounds i16, i16* %692, i64 1
  %698 = ptrtoint i16* %697 to i64
  store i64 %698, i64* %15, align 8
  br label %748

699:                                              ; preds = %691
  %700 = ptrtoint i16* %692 to i64
  %701 = load i64, i64* %16, align 8
  %702 = sub i64 %700, %701
  %703 = ashr exact i64 %702, 1
  %704 = add nsw i64 %703, 1
  %705 = icmp slt i64 %704, 0
  br i1 %705, label %706, label %708

706:                                              ; preds = %699
  %707 = bitcast %"class.std::__1::vector.1136"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %707) #11
  unreachable

708:                                              ; preds = %699
  %709 = sub i64 %695, %701
  %710 = ashr exact i64 %709, 1
  %711 = icmp ult i64 %710, 4611686018427387903
  %712 = icmp ult i64 %709, %704
  %713 = select i1 %712, i64 %704, i64 %709
  %714 = select i1 %711, i64 %713, i64 9223372036854775807
  %715 = icmp eq i64 %714, 0
  br i1 %715, label %723, label %716

716:                                              ; preds = %708
  %717 = icmp slt i64 %714, 0
  br i1 %717, label %718, label %719

718:                                              ; preds = %716
  call void @abort() #11
  unreachable

719:                                              ; preds = %716
  %720 = shl i64 %714, 1
  %721 = call i8* @_Znwm(i64 %720) #12
  %722 = bitcast i8* %721 to i16*
  br label %723

723:                                              ; preds = %719, %708
  %724 = phi i16* [ %722, %719 ], [ null, %708 ]
  %725 = getelementptr inbounds i16, i16* %724, i64 %703
  %726 = getelementptr inbounds i16, i16* %724, i64 %714
  %727 = ptrtoint i16* %726 to i64
  store i16 %50, i16* %725, align 2
  %728 = getelementptr inbounds i16, i16* %725, i64 1
  %729 = ptrtoint i16* %728 to i64
  %730 = load i16*, i16** %18, align 8
  %731 = load i64, i64* %15, align 8
  %732 = ptrtoint i16* %730 to i64
  %733 = sub i64 %731, %732
  %734 = ashr exact i64 %733, 1
  %735 = sub nsw i64 0, %734
  %736 = getelementptr inbounds i16, i16* %725, i64 %735
  %737 = ptrtoint i16* %736 to i64
  %738 = icmp sgt i64 %733, 0
  br i1 %738, label %739, label %743

739:                                              ; preds = %723
  %740 = bitcast i16* %736 to i8*
  %741 = bitcast i16* %730 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %740, i8* align 2 %741, i64 %733, i1 false) #10
  %742 = load i16*, i16** %18, align 8
  br label %743

743:                                              ; preds = %739, %723
  %744 = phi i16* [ %730, %723 ], [ %742, %739 ]
  store i64 %737, i64* %16, align 8
  store i64 %729, i64* %15, align 8
  store i64 %727, i64* %17, align 8
  %745 = icmp eq i16* %744, null
  br i1 %745, label %748, label %746

746:                                              ; preds = %743
  %747 = bitcast i16* %744 to i8*
  call void @_ZdlPv(i8* %747) #12
  br label %748

748:                                              ; preds = %438, %584, %629, %632, %639, %686, %689, %746, %743, %696
  %749 = phi i32 [ %31, %746 ], [ %31, %743 ], [ %31, %696 ], [ %53, %689 ], [ %53, %686 ], [ %53, %639 ], [ %53, %632 ], [ %53, %629 ], [ %53, %584 ], [ %232, %438 ]
  %750 = add nsw i32 %749, 1
  %751 = icmp slt i32 %750, %2
  br i1 %751, label %30, label %752

752:                                              ; preds = %748, %52, %107, %72, %86, %103, %98, %5, %437
  %753 = phi i1 [ false, %437 ], [ true, %5 ], [ true, %748 ], [ false, %52 ], [ false, %107 ], [ false, %72 ], [ false, %86 ], [ false, %103 ], [ false, %98 ]
  ret i1 %753

754:                                              ; preds = %219
  %755 = add nsw i64 %118, 6
  %756 = icmp slt i64 %755, %23
  br i1 %756, label %757, label %437

757:                                              ; preds = %754
  %758 = add nsw i64 %118, 4
  %759 = getelementptr inbounds i16, i16* %49, i64 %758
  %760 = load i16, i16* %759, align 2
  %761 = icmp eq i16 %760, 37
  br i1 %761, label %762, label %437

762:                                              ; preds = %757
  %763 = add nsw i64 %118, 5
  %764 = getelementptr inbounds i16, i16* %49, i64 %763
  %765 = load i16, i16* %764, align 2
  %766 = getelementptr inbounds i16, i16* %49, i64 %755
  %767 = load i16, i16* %766, align 2
  %768 = icmp ugt i16 %765, 102
  br i1 %768, label %437, label %769

769:                                              ; preds = %762
  %770 = zext i16 %765 to i32
  %771 = add nsw i32 %770, -48
  %772 = icmp ult i32 %771, 10
  br i1 %772, label %779, label %773

773:                                              ; preds = %769
  %774 = or i32 %771, 32
  %775 = add nsw i32 %774, -49
  %776 = icmp ult i32 %775, 6
  %777 = add nsw i32 %774, -39
  %778 = select i1 %776, i32 %777, i32 -1
  br label %779

779:                                              ; preds = %773, %769
  %780 = phi i32 [ %778, %773 ], [ %771, %769 ]
  %781 = icmp eq i32 %780, -1
  %782 = icmp ugt i16 %767, 102
  %783 = or i1 %782, %781
  br i1 %783, label %437, label %784

784:                                              ; preds = %779
  %785 = zext i16 %767 to i32
  %786 = add nsw i32 %785, -48
  %787 = icmp ult i32 %786, 10
  br i1 %787, label %797, label %788

788:                                              ; preds = %784
  %789 = or i32 %786, 32
  %790 = add nsw i32 %789, -49
  %791 = icmp ult i32 %790, 6
  %792 = add nsw i32 %789, -39
  br i1 %791, label %793, label %437

793:                                              ; preds = %788
  %794 = icmp eq i32 %792, -1
  %795 = shl nsw i32 %780, 4
  %796 = add nsw i32 %795, %792
  br i1 %794, label %437, label %800

797:                                              ; preds = %784
  %798 = shl nsw i32 %780, 4
  %799 = add nsw i32 %798, %786
  br label %800

800:                                              ; preds = %797, %793
  %801 = phi i32 [ %796, %793 ], [ %799, %797 ]
  %802 = icmp slt i32 %801, 0
  br i1 %802, label %437, label %803

803:                                              ; preds = %800
  %804 = trunc i32 %801 to i8
  store i8 %804, i8* %25, align 1
  %805 = and i32 %108, 16
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %227, label %807

807:                                              ; preds = %803
  %808 = add nsw i64 %118, 9
  %809 = icmp slt i64 %808, %23
  br i1 %809, label %810, label %437

810:                                              ; preds = %807
  %811 = add nsw i64 %118, 7
  %812 = getelementptr inbounds i16, i16* %49, i64 %811
  %813 = load i16, i16* %812, align 2
  %814 = icmp eq i16 %813, 37
  br i1 %814, label %815, label %437

815:                                              ; preds = %810
  %816 = add nsw i64 %118, 8
  %817 = getelementptr inbounds i16, i16* %49, i64 %816
  %818 = load i16, i16* %817, align 2
  %819 = getelementptr inbounds i16, i16* %49, i64 %808
  %820 = load i16, i16* %819, align 2
  %821 = icmp ugt i16 %818, 102
  br i1 %821, label %437, label %822

822:                                              ; preds = %815
  %823 = zext i16 %818 to i32
  %824 = add nsw i32 %823, -48
  %825 = icmp ult i32 %824, 10
  br i1 %825, label %832, label %826

826:                                              ; preds = %822
  %827 = or i32 %824, 32
  %828 = add nsw i32 %827, -49
  %829 = icmp ult i32 %828, 6
  %830 = add nsw i32 %827, -39
  %831 = select i1 %829, i32 %830, i32 -1
  br label %832

832:                                              ; preds = %826, %822
  %833 = phi i32 [ %831, %826 ], [ %824, %822 ]
  %834 = icmp eq i32 %833, -1
  %835 = icmp ugt i16 %820, 102
  %836 = or i1 %835, %834
  br i1 %836, label %437, label %837

837:                                              ; preds = %832
  %838 = zext i16 %820 to i32
  %839 = add nsw i32 %838, -48
  %840 = icmp ult i32 %839, 10
  br i1 %840, label %850, label %841

841:                                              ; preds = %837
  %842 = or i32 %839, 32
  %843 = add nsw i32 %842, -49
  %844 = icmp ult i32 %843, 6
  %845 = add nsw i32 %842, -39
  br i1 %844, label %846, label %437

846:                                              ; preds = %841
  %847 = icmp eq i32 %845, -1
  %848 = shl nsw i32 %833, 4
  %849 = add nsw i32 %848, %845
  br i1 %847, label %437, label %853

850:                                              ; preds = %837
  %851 = shl nsw i32 %833, 4
  %852 = add nsw i32 %851, %839
  br label %853

853:                                              ; preds = %850, %846
  %854 = phi i32 [ %849, %846 ], [ %852, %850 ]
  %855 = icmp slt i32 %854, 0
  br i1 %855, label %437, label %856

856:                                              ; preds = %853
  %857 = trunc i32 %854 to i8
  store i8 %857, i8* %26, align 1
  %858 = and i32 %108, 8
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %227, label %860

860:                                              ; preds = %856
  %861 = add nsw i64 %118, 12
  br label %437

862:                                              ; preds = %168
  %863 = add nsw i64 %118, 6
  %864 = icmp slt i64 %863, %23
  br i1 %864, label %865, label %437

865:                                              ; preds = %862
  %866 = add nsw i64 %118, 4
  %867 = getelementptr inbounds i8, i8* %48, i64 %866
  %868 = load i8, i8* %867, align 1
  %869 = icmp eq i8 %868, 37
  br i1 %869, label %870, label %437

870:                                              ; preds = %865
  %871 = add nsw i64 %118, 5
  %872 = getelementptr inbounds i8, i8* %48, i64 %871
  %873 = load i8, i8* %872, align 1
  %874 = getelementptr inbounds i8, i8* %48, i64 %863
  %875 = load i8, i8* %874, align 1
  %876 = icmp ugt i8 %873, 102
  br i1 %876, label %437, label %877

877:                                              ; preds = %870
  %878 = zext i8 %873 to i32
  %879 = add nsw i32 %878, -48
  %880 = icmp ult i32 %879, 10
  br i1 %880, label %887, label %881

881:                                              ; preds = %877
  %882 = or i32 %879, 32
  %883 = add nsw i32 %882, -49
  %884 = icmp ult i32 %883, 6
  %885 = add nsw i32 %882, -39
  %886 = select i1 %884, i32 %885, i32 -1
  br label %887

887:                                              ; preds = %881, %877
  %888 = phi i32 [ %886, %881 ], [ %879, %877 ]
  %889 = icmp eq i32 %888, -1
  %890 = icmp ugt i8 %875, 102
  %891 = or i1 %890, %889
  br i1 %891, label %437, label %892

892:                                              ; preds = %887
  %893 = zext i8 %875 to i32
  %894 = add nsw i32 %893, -48
  %895 = icmp ult i32 %894, 10
  br i1 %895, label %905, label %896

896:                                              ; preds = %892
  %897 = or i32 %894, 32
  %898 = add nsw i32 %897, -49
  %899 = icmp ult i32 %898, 6
  %900 = add nsw i32 %897, -39
  br i1 %899, label %901, label %437

901:                                              ; preds = %896
  %902 = icmp eq i32 %900, -1
  %903 = shl nsw i32 %888, 4
  %904 = add nsw i32 %903, %900
  br i1 %902, label %437, label %908

905:                                              ; preds = %892
  %906 = shl nsw i32 %888, 4
  %907 = add nsw i32 %906, %894
  br label %908

908:                                              ; preds = %905, %901
  %909 = phi i32 [ %904, %901 ], [ %907, %905 ]
  %910 = icmp slt i32 %909, 0
  br i1 %910, label %437, label %911

911:                                              ; preds = %908
  %912 = trunc i32 %909 to i8
  store i8 %912, i8* %28, align 1
  %913 = and i32 %108, 16
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %223, label %915

915:                                              ; preds = %911
  %916 = add nsw i64 %118, 9
  %917 = icmp slt i64 %916, %23
  br i1 %917, label %918, label %437

918:                                              ; preds = %915
  %919 = add nsw i64 %118, 7
  %920 = getelementptr inbounds i8, i8* %48, i64 %919
  %921 = load i8, i8* %920, align 1
  %922 = icmp eq i8 %921, 37
  br i1 %922, label %923, label %437

923:                                              ; preds = %918
  %924 = add nsw i64 %118, 8
  %925 = getelementptr inbounds i8, i8* %48, i64 %924
  %926 = load i8, i8* %925, align 1
  %927 = getelementptr inbounds i8, i8* %48, i64 %916
  %928 = load i8, i8* %927, align 1
  %929 = icmp ugt i8 %926, 102
  br i1 %929, label %437, label %930

930:                                              ; preds = %923
  %931 = zext i8 %926 to i32
  %932 = add nsw i32 %931, -48
  %933 = icmp ult i32 %932, 10
  br i1 %933, label %940, label %934

934:                                              ; preds = %930
  %935 = or i32 %932, 32
  %936 = add nsw i32 %935, -49
  %937 = icmp ult i32 %936, 6
  %938 = add nsw i32 %935, -39
  %939 = select i1 %937, i32 %938, i32 -1
  br label %940

940:                                              ; preds = %934, %930
  %941 = phi i32 [ %939, %934 ], [ %932, %930 ]
  %942 = icmp eq i32 %941, -1
  %943 = icmp ugt i8 %928, 102
  %944 = or i1 %943, %942
  br i1 %944, label %437, label %945

945:                                              ; preds = %940
  %946 = zext i8 %928 to i32
  %947 = add nsw i32 %946, -48
  %948 = icmp ult i32 %947, 10
  br i1 %948, label %958, label %949

949:                                              ; preds = %945
  %950 = or i32 %947, 32
  %951 = add nsw i32 %950, -49
  %952 = icmp ult i32 %951, 6
  %953 = add nsw i32 %950, -39
  br i1 %952, label %954, label %437

954:                                              ; preds = %949
  %955 = icmp eq i32 %953, -1
  %956 = shl nsw i32 %941, 4
  %957 = add nsw i32 %956, %953
  br i1 %955, label %437, label %961

958:                                              ; preds = %945
  %959 = shl nsw i32 %941, 4
  %960 = add nsw i32 %959, %947
  br label %961

961:                                              ; preds = %958, %954
  %962 = phi i32 [ %957, %954 ], [ %960, %958 ]
  %963 = icmp slt i32 %962, 0
  br i1 %963, label %437, label %964

964:                                              ; preds = %961
  %965 = trunc i32 %962 to i8
  store i8 %965, i8* %29, align 1
  %966 = and i32 %108, 8
  %967 = icmp eq i32 %966, 0
  br i1 %967, label %223, label %968

968:                                              ; preds = %964
  %969 = add nsw i64 %118, 12
  br label %437
}

declare i32 @_ZN7unibrow4Utf814CalculateValueEPKhmPm(i8*, i64, i64*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare i64* @_ZN2v88internal7Factory8NewErrorENS0_6HandleINS0_10JSFunctionEEENS0_15MessageTemplateENS2_INS0_6ObjectEEES7_S7_(%"class.v8::internal::Factory"*, i64*, i32, i64*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"*, %"class.v8::internal::String"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %4 = alloca %"class.v8::internal::ConsString", align 8
  %5 = alloca %"class.v8::internal::SlicedString", align 8
  %6 = alloca %"class.v8::internal::ThinString", align 8
  %7 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 15
  switch i32 %9, label %134 [
    i32 8, label %10
    i32 0, label %20
    i32 9, label %30
    i32 1, label %30
    i32 10, label %37
    i32 2, label %79
    i32 11, label %120
    i32 3, label %120
    i32 13, label %127
    i32 5, label %127
  ]

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = add i64 %12, 11
  %16 = add i64 %15, %14
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  br label %135

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load i32, i32* %2, align 4
  %24 = shl nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = add i64 %22, 11
  %27 = add i64 %26, %25
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28, align 2
  br label %135

30:                                               ; preds = %3, %3
  %31 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = load i32, i32* %2, align 4
  %34 = bitcast %"class.v8::internal::ConsString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.v8::internal::ConsString", %"class.v8::internal::ConsString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %32, i64* %35, align 8
  %36 = call zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"* nonnull %4, i32 %33) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  br label %135

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load i32, i32* %2, align 4
  %41 = and i64 %39, -4294967296
  %42 = add i64 %39, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %41, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = and i16 %49, 16
  %51 = icmp eq i16 %50, 0
  %52 = add i64 %39, 11
  %53 = inttoptr i64 %52 to %"class.v8::String::ExternalOneByteStringResource"**
  br i1 %51, label %66, label %54

54:                                               ; preds = %37
  %55 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %56 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %55, i64 0, i32 0
  %57 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %55 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %58 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %57, align 8
  %59 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %58, i64 2
  %60 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %59, align 8
  %61 = tail call zeroext i1 %60(%"class.v8::String::ExternalStringResourceBase"* %56) #10
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  tail call void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"* %63) #10
  %64 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %63, i64 0, i32 1
  %65 = load i8*, i8** %64, align 8
  br label %73

66:                                               ; preds = %54, %37
  %67 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %68 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %67 to i8* (%"class.v8::String::ExternalOneByteStringResource"*)***
  %69 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)**, i8* (%"class.v8::String::ExternalOneByteStringResource"*)*** %68, align 8
  %70 = getelementptr inbounds i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %69, i64 6
  %71 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %70, align 8
  %72 = tail call i8* %71(%"class.v8::String::ExternalOneByteStringResource"* %67) #10
  br label %73

73:                                               ; preds = %62, %66
  %74 = phi i8* [ %65, %62 ], [ %72, %66 ]
  %75 = sext i32 %40 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  br label %135

79:                                               ; preds = %3
  %80 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = load i32, i32* %2, align 4
  %83 = and i64 %81, -4294967296
  %84 = add i64 %81, -1
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 16
  %93 = icmp eq i16 %92, 0
  %94 = add i64 %81, 11
  %95 = inttoptr i64 %94 to %"class.v8::String::ExternalStringResource"**
  br i1 %93, label %108, label %96

96:                                               ; preds = %79
  %97 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %98 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %97, i64 0, i32 0
  %99 = bitcast %"class.v8::String::ExternalStringResource"* %97 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %100 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %99, align 8
  %101 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %100, i64 2
  %102 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %101, align 8
  %103 = tail call zeroext i1 %102(%"class.v8::String::ExternalStringResourceBase"* %98) #10
  br i1 %103, label %104, label %108

104:                                              ; preds = %96
  %105 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  tail call void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"* %105) #10
  %106 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %105, i64 0, i32 1
  %107 = load i16*, i16** %106, align 8
  br label %115

108:                                              ; preds = %96, %79
  %109 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %110 = bitcast %"class.v8::String::ExternalStringResource"* %109 to i16* (%"class.v8::String::ExternalStringResource"*)***
  %111 = load i16* (%"class.v8::String::ExternalStringResource"*)**, i16* (%"class.v8::String::ExternalStringResource"*)*** %110, align 8
  %112 = getelementptr inbounds i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %111, i64 6
  %113 = load i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %112, align 8
  %114 = tail call i16* %113(%"class.v8::String::ExternalStringResource"* %109) #10
  br label %115

115:                                              ; preds = %104, %108
  %116 = phi i16* [ %107, %104 ], [ %114, %108 ]
  %117 = sext i32 %82 to i64
  %118 = getelementptr inbounds i16, i16* %116, i64 %117
  %119 = load i16, i16* %118, align 2
  br label %135

120:                                              ; preds = %3, %3
  %121 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = load i32, i32* %2, align 4
  %124 = bitcast %"class.v8::internal::SlicedString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #10
  %125 = getelementptr inbounds %"class.v8::internal::SlicedString", %"class.v8::internal::SlicedString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %122, i64* %125, align 8
  %126 = call zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"* nonnull %5, i32 %123) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #10
  br label %135

127:                                              ; preds = %3, %3
  %128 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = load i32, i32* %2, align 4
  %131 = bitcast %"class.v8::internal::ThinString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #10
  %132 = getelementptr inbounds %"class.v8::internal::ThinString", %"class.v8::internal::ThinString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %129, i64* %132, align 8
  %133 = call zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"* nonnull %6, i32 %130) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #10
  br label %135

134:                                              ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

135:                                              ; preds = %127, %120, %115, %73, %30, %20, %10
  %136 = phi i16 [ %133, %127 ], [ %126, %120 ], [ %119, %115 ], [ %78, %73 ], [ %36, %30 ], [ %29, %20 ], [ %19, %10 ]
  ret i16 %136
}

declare zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"*, i32) local_unnamed_addr #3

declare void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"*) local_unnamed_addr #3

declare void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"*) local_unnamed_addr #3

declare zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"*, i32) local_unnamed_addr #3

declare zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"*, i32) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

declare i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"*, i64, %"class.v8::internal::MessageLocation"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal18FindFirstCharacterIhhEEiNS0_6VectorIKT_EENS2_IKT0_EEi(i8*, i64, i8*, i64, i32) local_unnamed_addr #2 comdat {
  %6 = load i8, i8* %0, align 1
  %7 = trunc i64 %3 to i32
  %8 = trunc i64 %1 to i32
  %9 = sub nsw i32 %7, %8
  %10 = add nsw i32 %9, 1
  %11 = zext i8 %6 to i32
  %12 = ptrtoint i8* %2 to i64
  br label %13

13:                                               ; preds = %30, %5
  %14 = phi i32 [ %4, %5 ], [ %31, %30 ]
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  %17 = sub i32 %10, %14
  %18 = sext i32 %17 to i64
  %19 = tail call i8* @memchr(i8* %16, i32 %11, i64 %18) #13
  %20 = icmp eq i8* %19, null
  br i1 %20, label %35, label %21

21:                                               ; preds = %13
  %22 = ptrtoint i8* %19 to i64
  %23 = sub i64 %22, %12
  %24 = trunc i64 %23 to i32
  %25 = shl i64 %23, 32
  %26 = ashr exact i64 %25, 32
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, %6
  br i1 %29, label %33, label %30

30:                                               ; preds = %21
  %31 = add nsw i32 %24, 1
  %32 = icmp sgt i32 %9, %24
  br i1 %32, label %13, label %35

33:                                               ; preds = %21
  %34 = trunc i64 %23 to i32
  br label %35

35:                                               ; preds = %30, %13, %33
  %36 = phi i32 [ %34, %33 ], [ -1, %13 ], [ -1, %30 ]
  ret i32 %36
}

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharIhEEiNS0_6VectorIKT_EEiiPi(i8*, i64, i32, i32, i32* nocapture) unnamed_addr #9 {
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = icmp ne i8 %8, 37
  %11 = add nsw i32 %3, -6
  %12 = icmp slt i32 %11, %2
  %13 = or i1 %12, %10
  br i1 %13, label %111, label %14

14:                                               ; preds = %5
  %15 = add nsw i32 %2, 1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 117
  br i1 %19, label %20, label %111

20:                                               ; preds = %14
  %21 = add nsw i32 %2, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = add nsw i32 %2, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp ugt i8 %24, 102
  br i1 %29, label %111, label %30

30:                                               ; preds = %20
  %31 = zext i8 %24 to i32
  %32 = add nsw i32 %31, -48
  %33 = icmp ult i32 %32, 10
  br i1 %33, label %40, label %34

34:                                               ; preds = %30
  %35 = or i32 %32, 32
  %36 = add nsw i32 %35, -49
  %37 = icmp ult i32 %36, 6
  %38 = add nsw i32 %35, -39
  %39 = select i1 %37, i32 %38, i32 -1
  br label %40

40:                                               ; preds = %34, %30
  %41 = phi i32 [ %39, %34 ], [ %32, %30 ]
  %42 = icmp eq i32 %41, -1
  %43 = icmp ugt i8 %28, 102
  %44 = or i1 %43, %42
  br i1 %44, label %111, label %45

45:                                               ; preds = %40
  %46 = zext i8 %28 to i32
  %47 = add nsw i32 %46, -48
  %48 = icmp ult i32 %47, 10
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = shl nsw i32 %41, 4
  %51 = add nsw i32 %50, %47
  br label %61

52:                                               ; preds = %45
  %53 = or i32 %47, 32
  %54 = add nsw i32 %53, -49
  %55 = icmp ult i32 %54, 6
  %56 = add nsw i32 %53, -39
  br i1 %55, label %57, label %111

57:                                               ; preds = %52
  %58 = icmp eq i32 %56, -1
  %59 = shl nsw i32 %41, 4
  %60 = add nsw i32 %59, %56
  br i1 %58, label %111, label %61

61:                                               ; preds = %49, %57
  %62 = phi i32 [ %60, %57 ], [ %51, %49 ]
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %64, label %111

64:                                               ; preds = %61
  %65 = add nsw i32 %2, 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = add nsw i32 %2, 5
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = icmp ugt i8 %68, 102
  br i1 %73, label %111, label %74

74:                                               ; preds = %64
  %75 = zext i8 %68 to i32
  %76 = add nsw i32 %75, -48
  %77 = icmp ult i32 %76, 10
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = or i32 %76, 32
  %80 = add nsw i32 %79, -49
  %81 = icmp ult i32 %80, 6
  %82 = add nsw i32 %79, -39
  %83 = select i1 %81, i32 %82, i32 -1
  br label %84

84:                                               ; preds = %78, %74
  %85 = phi i32 [ %83, %78 ], [ %76, %74 ]
  %86 = icmp eq i32 %85, -1
  %87 = icmp ugt i8 %72, 102
  %88 = or i1 %87, %86
  br i1 %88, label %111, label %89

89:                                               ; preds = %84
  %90 = zext i8 %72 to i32
  %91 = add nsw i32 %90, -48
  %92 = icmp ult i32 %91, 10
  br i1 %92, label %93, label %96

93:                                               ; preds = %89
  %94 = shl nsw i32 %85, 4
  %95 = add nsw i32 %94, %91
  br label %105

96:                                               ; preds = %89
  %97 = or i32 %91, 32
  %98 = add nsw i32 %97, -49
  %99 = icmp ult i32 %98, 6
  %100 = add nsw i32 %97, -39
  br i1 %99, label %101, label %111

101:                                              ; preds = %96
  %102 = icmp eq i32 %100, -1
  %103 = shl nsw i32 %85, 4
  %104 = add nsw i32 %103, %100
  br i1 %102, label %111, label %105

105:                                              ; preds = %93, %101
  %106 = phi i32 [ %104, %101 ], [ %95, %93 ]
  %107 = icmp sgt i32 %106, -1
  br i1 %107, label %108, label %111

108:                                              ; preds = %105
  store i32 6, i32* %4, align 4
  %109 = shl i32 %62, 8
  %110 = add nsw i32 %106, %109
  br label %161

111:                                              ; preds = %96, %52, %101, %84, %64, %57, %40, %20, %5, %105, %61, %14
  %112 = add nsw i32 %3, -3
  %113 = icmp slt i32 %112, %2
  %114 = or i1 %113, %10
  br i1 %114, label %160, label %115

115:                                              ; preds = %111
  %116 = add nsw i32 %2, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %0, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = add nsw i32 %2, 2
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = icmp ugt i8 %119, 102
  br i1 %124, label %160, label %125

125:                                              ; preds = %115
  %126 = zext i8 %119 to i32
  %127 = add nsw i32 %126, -48
  %128 = icmp ult i32 %127, 10
  br i1 %128, label %135, label %129

129:                                              ; preds = %125
  %130 = or i32 %127, 32
  %131 = add nsw i32 %130, -49
  %132 = icmp ult i32 %131, 6
  %133 = add nsw i32 %130, -39
  %134 = select i1 %132, i32 %133, i32 -1
  br label %135

135:                                              ; preds = %129, %125
  %136 = phi i32 [ %134, %129 ], [ %127, %125 ]
  %137 = icmp eq i32 %136, -1
  %138 = icmp ugt i8 %123, 102
  %139 = or i1 %138, %137
  br i1 %139, label %160, label %140

140:                                              ; preds = %135
  %141 = zext i8 %123 to i32
  %142 = add nsw i32 %141, -48
  %143 = icmp ult i32 %142, 10
  br i1 %143, label %144, label %147

144:                                              ; preds = %140
  %145 = shl nsw i32 %136, 4
  %146 = add nsw i32 %145, %142
  br label %156

147:                                              ; preds = %140
  %148 = or i32 %142, 32
  %149 = add nsw i32 %148, -49
  %150 = icmp ult i32 %149, 6
  %151 = add nsw i32 %148, -39
  br i1 %150, label %152, label %160

152:                                              ; preds = %147
  %153 = icmp eq i32 %151, -1
  %154 = shl nsw i32 %136, 4
  %155 = add nsw i32 %154, %151
  br i1 %153, label %160, label %156

156:                                              ; preds = %144, %152
  %157 = phi i32 [ %155, %152 ], [ %146, %144 ]
  %158 = icmp sgt i32 %157, -1
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  store i32 3, i32* %4, align 4
  br label %161

160:                                              ; preds = %147, %152, %135, %115, %111, %156
  store i32 1, i32* %4, align 4
  br label %161

161:                                              ; preds = %160, %159, %108
  %162 = phi i32 [ %110, %108 ], [ %157, %159 ], [ %9, %160 ]
  ret i32 %162
}

declare i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"*, i64*, i32, i32) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i64*, i64*, i8 zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal18FindFirstCharacterIhtEEiNS0_6VectorIKT_EENS2_IKT0_EEi(i8*, i64, i16*, i64, i32) local_unnamed_addr #2 comdat {
  %6 = load i8, i8* %0, align 1
  %7 = trunc i64 %3 to i32
  %8 = trunc i64 %1 to i32
  %9 = sub nsw i32 %7, %8
  %10 = add nsw i32 %9, 1
  %11 = icmp eq i8 %6, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %5
  %13 = zext i8 %6 to i32
  %14 = ptrtoint i16* %2 to i64
  br label %34

15:                                               ; preds = %5
  %16 = icmp slt i32 %9, %4
  br i1 %16, label %32, label %17

17:                                               ; preds = %15
  %18 = sext i32 %4 to i64
  %19 = sext i32 %9 to i64
  br label %20

20:                                               ; preds = %17, %25
  %21 = phi i64 [ %18, %17 ], [ %26, %25 ]
  %22 = getelementptr inbounds i16, i16* %2, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %20
  %26 = add nsw i64 %21, 1
  %27 = icmp slt i64 %21, %19
  br i1 %27, label %20, label %32

28:                                               ; preds = %20
  %29 = trunc i64 %21 to i32
  br label %32

30:                                               ; preds = %44
  %31 = trunc i64 %48 to i32
  br label %32

32:                                               ; preds = %34, %56, %25, %30, %28, %15
  %33 = phi i32 [ -1, %15 ], [ %29, %28 ], [ %31, %30 ], [ -1, %25 ], [ -1, %56 ], [ -1, %34 ]
  ret i32 %33

34:                                               ; preds = %12, %56
  %35 = phi i32 [ %57, %56 ], [ %4, %12 ]
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %2, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = sub i32 %10, %35
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 1
  %42 = tail call i8* @memchr(i8* %38, i32 %13, i64 %41) #13
  %43 = icmp eq i8* %42, null
  br i1 %43, label %32, label %44

44:                                               ; preds = %34
  %45 = ptrtoint i8* %42 to i64
  %46 = and i64 %45, -2
  %47 = sub i64 %46, %14
  %48 = lshr exact i64 %47, 1
  %49 = trunc i64 %48 to i32
  %50 = shl i64 %47, 31
  %51 = ashr exact i64 %50, 32
  %52 = getelementptr inbounds i16, i16* %2, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = icmp eq i32 %54, %13
  br i1 %55, label %30, label %56

56:                                               ; preds = %44
  %57 = add nsw i32 %49, 1
  %58 = icmp sgt i32 %9, %49
  br i1 %58, label %34, label %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZN2v88internal12_GLOBAL__N_112UnescapeCharItEEiNS0_6VectorIKT_EEiiPi(i16*, i64, i32, i32, i32* nocapture) unnamed_addr #9 {
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = icmp ne i16 %8, 37
  %11 = add nsw i32 %3, -6
  %12 = icmp slt i32 %11, %2
  %13 = or i1 %12, %10
  br i1 %13, label %111, label %14

14:                                               ; preds = %5
  %15 = add nsw i32 %2, 1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 117
  br i1 %19, label %20, label %111

20:                                               ; preds = %14
  %21 = add nsw i32 %2, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = add nsw i32 %2, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = icmp ugt i16 %24, 102
  br i1 %29, label %111, label %30

30:                                               ; preds = %20
  %31 = zext i16 %24 to i32
  %32 = add nsw i32 %31, -48
  %33 = icmp ult i32 %32, 10
  br i1 %33, label %40, label %34

34:                                               ; preds = %30
  %35 = or i32 %32, 32
  %36 = add nsw i32 %35, -49
  %37 = icmp ult i32 %36, 6
  %38 = add nsw i32 %35, -39
  %39 = select i1 %37, i32 %38, i32 -1
  br label %40

40:                                               ; preds = %34, %30
  %41 = phi i32 [ %39, %34 ], [ %32, %30 ]
  %42 = icmp eq i32 %41, -1
  %43 = icmp ugt i16 %28, 102
  %44 = or i1 %43, %42
  br i1 %44, label %111, label %45

45:                                               ; preds = %40
  %46 = zext i16 %28 to i32
  %47 = add nsw i32 %46, -48
  %48 = icmp ult i32 %47, 10
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = shl nsw i32 %41, 4
  %51 = add nsw i32 %50, %47
  br label %61

52:                                               ; preds = %45
  %53 = or i32 %47, 32
  %54 = add nsw i32 %53, -49
  %55 = icmp ult i32 %54, 6
  %56 = add nsw i32 %53, -39
  br i1 %55, label %57, label %111

57:                                               ; preds = %52
  %58 = icmp eq i32 %56, -1
  %59 = shl nsw i32 %41, 4
  %60 = add nsw i32 %59, %56
  br i1 %58, label %111, label %61

61:                                               ; preds = %49, %57
  %62 = phi i32 [ %60, %57 ], [ %51, %49 ]
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %64, label %111

64:                                               ; preds = %61
  %65 = add nsw i32 %2, 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = add nsw i32 %2, 5
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %0, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = icmp ugt i16 %68, 102
  br i1 %73, label %111, label %74

74:                                               ; preds = %64
  %75 = zext i16 %68 to i32
  %76 = add nsw i32 %75, -48
  %77 = icmp ult i32 %76, 10
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = or i32 %76, 32
  %80 = add nsw i32 %79, -49
  %81 = icmp ult i32 %80, 6
  %82 = add nsw i32 %79, -39
  %83 = select i1 %81, i32 %82, i32 -1
  br label %84

84:                                               ; preds = %78, %74
  %85 = phi i32 [ %83, %78 ], [ %76, %74 ]
  %86 = icmp eq i32 %85, -1
  %87 = icmp ugt i16 %72, 102
  %88 = or i1 %87, %86
  br i1 %88, label %111, label %89

89:                                               ; preds = %84
  %90 = zext i16 %72 to i32
  %91 = add nsw i32 %90, -48
  %92 = icmp ult i32 %91, 10
  br i1 %92, label %93, label %96

93:                                               ; preds = %89
  %94 = shl nsw i32 %85, 4
  %95 = add nsw i32 %94, %91
  br label %105

96:                                               ; preds = %89
  %97 = or i32 %91, 32
  %98 = add nsw i32 %97, -49
  %99 = icmp ult i32 %98, 6
  %100 = add nsw i32 %97, -39
  br i1 %99, label %101, label %111

101:                                              ; preds = %96
  %102 = icmp eq i32 %100, -1
  %103 = shl nsw i32 %85, 4
  %104 = add nsw i32 %103, %100
  br i1 %102, label %111, label %105

105:                                              ; preds = %93, %101
  %106 = phi i32 [ %104, %101 ], [ %95, %93 ]
  %107 = icmp sgt i32 %106, -1
  br i1 %107, label %108, label %111

108:                                              ; preds = %105
  store i32 6, i32* %4, align 4
  %109 = shl i32 %62, 8
  %110 = add nsw i32 %106, %109
  br label %161

111:                                              ; preds = %96, %52, %101, %84, %64, %57, %40, %20, %5, %105, %61, %14
  %112 = add nsw i32 %3, -3
  %113 = icmp slt i32 %112, %2
  %114 = or i1 %113, %10
  br i1 %114, label %160, label %115

115:                                              ; preds = %111
  %116 = add nsw i32 %2, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i16, i16* %0, i64 %117
  %119 = load i16, i16* %118, align 2
  %120 = add nsw i32 %2, 2
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i16, i16* %0, i64 %121
  %123 = load i16, i16* %122, align 2
  %124 = icmp ugt i16 %119, 102
  br i1 %124, label %160, label %125

125:                                              ; preds = %115
  %126 = zext i16 %119 to i32
  %127 = add nsw i32 %126, -48
  %128 = icmp ult i32 %127, 10
  br i1 %128, label %135, label %129

129:                                              ; preds = %125
  %130 = or i32 %127, 32
  %131 = add nsw i32 %130, -49
  %132 = icmp ult i32 %131, 6
  %133 = add nsw i32 %130, -39
  %134 = select i1 %132, i32 %133, i32 -1
  br label %135

135:                                              ; preds = %129, %125
  %136 = phi i32 [ %134, %129 ], [ %127, %125 ]
  %137 = icmp eq i32 %136, -1
  %138 = icmp ugt i16 %123, 102
  %139 = or i1 %138, %137
  br i1 %139, label %160, label %140

140:                                              ; preds = %135
  %141 = zext i16 %123 to i32
  %142 = add nsw i32 %141, -48
  %143 = icmp ult i32 %142, 10
  br i1 %143, label %144, label %147

144:                                              ; preds = %140
  %145 = shl nsw i32 %136, 4
  %146 = add nsw i32 %145, %142
  br label %156

147:                                              ; preds = %140
  %148 = or i32 %142, 32
  %149 = add nsw i32 %148, -49
  %150 = icmp ult i32 %149, 6
  %151 = add nsw i32 %148, -39
  br i1 %150, label %152, label %160

152:                                              ; preds = %147
  %153 = icmp eq i32 %151, -1
  %154 = shl nsw i32 %136, 4
  %155 = add nsw i32 %154, %151
  br i1 %153, label %160, label %156

156:                                              ; preds = %144, %152
  %157 = phi i32 [ %155, %152 ], [ %146, %144 ]
  %158 = icmp sgt i32 %157, -1
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  store i32 3, i32* %4, align 4
  br label %161

160:                                              ; preds = %147, %152, %135, %115, %111, %156
  store i32 1, i32* %4, align 4
  br label %161

161:                                              ; preds = %160, %159, %108
  %162 = phi i32 [ %110, %108 ], [ %157, %159 ], [ %9, %160 ]
  ret i32 %162
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!"branch_weights", i32 1, i32 2000}
!11 = !{!"branch_weights", i32 2000, i32 1}
