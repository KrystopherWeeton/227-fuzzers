; ModuleID = '../../third_party/swiftshader/src/OpenGL/libGLESv2/Device.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/libGLESv2/Device.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.es2::Device" = type { %"class.sw::Renderer", %"class.sw::Context"*, %"struct.es2::Viewport", %"struct.sw::RectT", i8, %"class.sw::PixelShader"*, %"class.sw::VertexShader"*, i8, i32, i8, i32, [264 x [4 x float]], [259 x [4 x float]], [8 x %"class.egl::Image"*], %"class.egl::Image"*, %"class.egl::Image"*, [8 x i8] }
%"class.sw::Renderer" = type { %"class.sw::VertexProcessor.base", [15 x i8], %"class.sw::PixelProcessor", %"class.sw::SetupProcessor", %"class.sw::Context"*, %"class.sw::Clipper"*, %"class.sw::Blitter"*, %"struct.sw::Viewport", %"struct.sw::RectT", i32, [16 x %"struct.sw::Triangle"*], [16 x %"struct.sw::Primitive"*], [6 x %"struct.sw::Plane"], [6 x %"struct.sw::Plane"], i8, %"class.sw::AtomicInt", %"class.sw::AtomicInt", [16 x %"class.sw::Thread"*], [16 x %"class.sw::Event"*], [16 x %"class.sw::Event"*], %"class.sw::Event"*, [16 x %"struct.sw::Renderer::PrimitiveProgress"], [16 x %"struct.sw::Renderer::PixelProgress"], [16 x %"struct.sw::Renderer::Task"], [16 x %"struct.sw::DrawCall"*], [16 x %"struct.sw::DrawCall"*], %"class.sw::AtomicInt", %"class.sw::AtomicInt", [32 x %"struct.sw::Renderer::Task"], %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::MutexLock", [16 x %"struct.sw::VertexTask"*], %"class.sw::SwiftConfig"*, %"class.std::__1::list", %"class.sw::Resource"*, %"struct.sw::VertexProcessor::State", %"struct.sw::SetupProcessor::State", %"struct.sw::PixelProcessor::State", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr" }
%"class.sw::VertexProcessor.base" = type <{ i32 (...)**, [8 x i8], [260 x %"struct.sw::float4"], [16 x %"struct.sw::int4"], [16 x i8], %"struct.sw::VertexProcessor::PointSprite", %"struct.sw::VertexProcessor::FixedFunction", [24 x %"struct.sw::VertexProcessor::UniformBufferInfo"], [64 x %"struct.sw::VertexProcessor::TransformFeedbackInfo"], %"class.sw::Context"*, %"class.sw::LRUCache"*, [12 x %"struct.sw::Matrix"], %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", [12 x %"struct.sw::Matrix"], i8, [12 x i8], i8, i8, i8, i8 }>
%"struct.sw::float4" = type { float, float, float, float }
%"struct.sw::int4" = type { i32, i32, i32, i32 }
%"struct.sw::VertexProcessor::PointSprite" = type { %"struct.sw::float4", float, float, float, float, float, [12 x i8] }
%"struct.sw::VertexProcessor::FixedFunction" = type { [12 x [4 x %"struct.sw::float4"]], [12 x [4 x %"struct.sw::float4"]], [12 x [4 x %"struct.sw::float4"]], [8 x [4 x %"struct.sw::float4"]], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x %"struct.sw::float4"], [8 x float], %"struct.sw::float4", %"struct.sw::float4", float, [12 x i8], %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4" }
%"struct.sw::VertexProcessor::UniformBufferInfo" = type <{ %"class.sw::Resource"*, i32, [4 x i8] }>
%"struct.sw::VertexProcessor::TransformFeedbackInfo" = type <{ %"class.sw::Resource"*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.sw::LRUCache" = type opaque
%"struct.sw::Matrix" = type { [4 x [4 x float]] }
%"class.sw::PixelProcessor" = type { i32 (...)**, [8 x [4 x [4 x i16]]], [8 x i8], [264 x %"struct.sw::float4"], [16 x %"struct.sw::int4"], [16 x i8], %"struct.sw::PixelProcessor::Stencil", %"struct.sw::PixelProcessor::Stencil", %"struct.sw::PixelProcessor::Fog", %"struct.sw::PixelProcessor::Factor", [24 x %"struct.sw::PixelProcessor::UniformBufferInfo"], %"class.sw::Context"*, %"class.sw::LRUCache.17"* }
%"struct.sw::PixelProcessor::Stencil" = type { i64, i64, i64, i64, i64, i64 }
%"struct.sw::PixelProcessor::Fog" = type { %"struct.sw::float4", %"struct.sw::float4", [3 x [4 x i16]], [8 x i8], [3 x %"struct.sw::float4"], %"struct.sw::float4", %"struct.sw::float4" }
%"struct.sw::PixelProcessor::Factor" = type { [4 x [4 x i16]], [4 x i16], [4 x [4 x i16]], [8 x i8], [4 x %"struct.sw::float4"], [4 x [4 x i16]], [4 x %"struct.sw::float4"] }
%"struct.sw::PixelProcessor::UniformBufferInfo" = type <{ %"class.sw::Resource"*, i32, [4 x i8] }>
%"class.sw::LRUCache.17" = type opaque
%"class.sw::SetupProcessor" = type { %"class.sw::Context"*, %"class.sw::LRUCache.18"* }
%"class.sw::LRUCache.18" = type opaque
%"class.sw::Clipper" = type { float }
%"class.sw::Blitter" = type { i32 (...)**, %"class.sw::LRUCache.19"*, %"class.sw::MutexLock" }
%"class.sw::LRUCache.19" = type opaque
%"struct.sw::Viewport" = type { float, float, float, float, float, float }
%"struct.sw::Triangle" = type opaque
%"struct.sw::Primitive" = type opaque
%"struct.sw::Plane" = type { float, float, float, float }
%"class.sw::Thread" = type <{ i64, i8, [7 x i8] }>
%"class.sw::Event" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.sw::Renderer::PrimitiveProgress" = type { %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt" }
%"struct.sw::Renderer::PixelProgress" = type { %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt" }
%"struct.sw::Renderer::Task" = type { %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt" }
%"struct.sw::DrawCall" = type { %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr", void (%"struct.sw::Vertex"*, i32*, %"struct.sw::VertexTask"*, %"struct.sw::DrawData"*)*, i1 (%"struct.sw::Primitive"*, %"struct.sw::Triangle"*, %"struct.sw::Polygon"*, %"struct.sw::DrawData"*)*, void (%"struct.sw::Primitive"*, i32, i32, %"struct.sw::DrawData"*)*, { i64, i64 }, %"struct.sw::SetupProcessor::State", [32 x %"class.sw::Resource"*], %"class.sw::Resource"*, [8 x %"class.sw::Surface"*], %"class.sw::Surface"*, %"class.sw::Surface"*, [32 x %"class.sw::Resource"*], [24 x %"class.sw::Resource"*], [24 x %"class.sw::Resource"*], [64 x %"class.sw::Resource"*], i32, i32, i32, i32, i32, i32, %"class.std::__1::list"*, %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"class.sw::AtomicInt", %"struct.sw::DrawData"* }
%"struct.sw::Vertex" = type { %union.anon.20, i32, i32, float, float, i32, [3 x i32] }
%union.anon.20 = type { [34 x %"struct.sw::float4"] }
%"struct.sw::VertexTask" = type { i32, i32, [8 x i8], %"struct.sw::VertexCache" }
%"struct.sw::VertexCache" = type { [16 x [4 x %"struct.sw::Vertex"]], [16 x i32], i32, [12 x i8] }
%"struct.sw::Polygon" = type opaque
%"class.sw::Surface" = type <{ i32 (...)**, %"class.sw::Resource"*, %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", i8, i8, i8, i8, i32, i8, i8, [6 x i8] }>
%"struct.sw::Surface::Buffer" = type <{ i8*, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, %"class.sw::AtomicInt", i8, [3 x i8] }>
%"struct.sw::DrawData" = type { %"struct.sw::Constants"*, [32 x i8*], [32 x i32], [8 x i8], [32 x %"struct.sw::Texture"], i8*, [8 x i8], %union.anon.22, %"struct.sw::DrawData::PS", i32, [12 x i8], %"struct.sw::VertexProcessor::PointSprite", float, [2 x %"struct.sw::PixelProcessor::Stencil"], [8 x i8], %"struct.sw::PixelProcessor::Fog", %"struct.sw::PixelProcessor::Factor", [16 x i32], [8 x %"struct.sw::TextureStage::Uniforms"], %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", float, float, float, float, [6 x %"struct.sw::Plane"], [8 x i32*], [8 x i32], [8 x i32], float*, i32, i32, i8*, i32, i32, i32, i32, i32, i32, %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4" }
%"struct.sw::Constants" = type opaque
%"struct.sw::Texture" = type { [14 x %"struct.sw::Mipmap"], float, [12 x i8], %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", [4 x [4 x i16]], [4 x %"struct.sw::float4"], float, i32, i32, float, float, [12 x i8] }
%"struct.sw::Mipmap" = type { [6 x i8*], %"struct.sw::float4", %"struct.sw::float4", %"struct.sw::float4", [4 x i16], [4 x i16], [4 x i16], [4 x i16], [4 x i16], [4 x i16], [4 x i16], [8 x i8], %"struct.sw::int4", %"struct.sw::int4" }
%union.anon.22 = type { %"struct.sw::DrawData::VS" }
%"struct.sw::DrawData::VS" = type { [260 x %"struct.sw::float4"], [24 x i8*], [64 x i8*], [64 x i32], [64 x i32], [64 x i32], [64 x i32], [16 x %"struct.sw::int4"], [16 x i8] }
%"struct.sw::DrawData::PS" = type { [8 x [4 x [4 x i16]]], [264 x %"struct.sw::float4"], [24 x i8*], [16 x %"struct.sw::int4"], [16 x i8] }
%"struct.sw::TextureStage::Uniforms" = type { [4 x [4 x i16]], [2 x [2 x %"struct.sw::float4"]], [2 x [2 x [4 x i16]]], [4 x i16], [4 x i16] }
%"class.sw::AtomicInt" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.sw::MutexLock" = type { %union.pthread_mutex_t }
%"class.sw::SwiftConfig" = type opaque
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.25" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.sw::Resource" = type { i64, %"class.sw::MutexLock", %"class.sw::Event", i32, i32, i32, i8, i8* }
%"struct.sw::VertexProcessor::State" = type <{ %"struct.sw::VertexProcessor::States", i32, [4 x i8] }>
%"struct.sw::VertexProcessor::States" = type { i64, i48, [9 x i8], [3 x i8], [8 x %"struct.sw::VertexProcessor::States::TextureState"], [16 x %"struct.sw::Sampler::State"], [32 x %"struct.sw::VertexProcessor::States::Input"], [34 x %"struct.sw::VertexProcessor::States::Output"] }
%"struct.sw::VertexProcessor::States::TextureState" = type { i8, i8, [2 x i8] }
%"struct.sw::Sampler::State" = type { [6 x i8], [2 x i8] }
%"struct.sw::VertexProcessor::States::Input" = type { i16, [2 x i8] }
%"struct.sw::VertexProcessor::States::Output" = type { %union.anon.32, %union.anon.34 }
%union.anon.32 = type { i8 }
%union.anon.34 = type { i8 }
%"struct.sw::SetupProcessor::State" = type { %"struct.sw::SetupProcessor::States", i32 }
%"struct.sw::SetupProcessor::States" = type { i32, %union.anon.23 }
%union.anon.23 = type { [32 x [4 x %"struct.sw::SetupProcessor::States::Gradient"]] }
%"struct.sw::SetupProcessor::States::Gradient" = type { i8 }
%"struct.sw::PixelProcessor::State" = type { %"struct.sw::PixelProcessor::States", i32 }
%"struct.sw::PixelProcessor::States" = type { i32, i32, i32, i16, i32, [8 x i32], i16, [2 x i8], [16 x %"struct.sw::Sampler::State"], [8 x %"struct.sw::TextureStage::State"], %union.anon.38 }
%"struct.sw::TextureStage::State" = type { [6 x i8], [2 x i8] }
%union.anon.38 = type { [32 x %"struct.sw::PixelProcessor::States::Interpolant"] }
%"struct.sw::PixelProcessor::States::Interpolant" = type { i16 }
%"class.std::__1::shared_ptr" = type { %"class.rr::Routine"*, %"class.std::__1::__shared_weak_count"* }
%"class.rr::Routine" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.es2::Viewport" = type { i32, i32, i32, i32, float, float }
%"struct.sw::RectT" = type { i32, i32, i32, i32 }
%"class.sw::PixelShader" = type { %"class.sw::Shader.base", [32 x [4 x %"struct.sw::Shader::Semantic"]], i8, i8, i8, i8, i8, [6 x i8] }
%"class.sw::Shader.base" = type <{ i32 (...)**, i32, i32, i32, i8, i8, i8, i8, %"struct.sw::Shader::Limits", i32, %union.anon.3, [2 x i8], %"class.std::__1::vector", i16, [2 x i8], i32, i8, i8, i8, i8, i8 }>
%"struct.sw::Shader::Limits" = type { i32, i32, i32, i32 }
%union.anon.3 = type { i16 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sw::Shader::Instruction"**, %"struct.sw::Shader::Instruction"**, %"class.std::__1::__compressed_pair" }
%"struct.sw::Shader::Instruction" = type <{ i32 (...)**, i32, %union.anon.5, i8, i8, i8, i8, i32, i32, i8, [3 x i8], %"struct.sw::Shader::DestinationParameter", [5 x %"struct.sw::Shader::SourceParameter"], %union.anon.12, [4 x i8] }>
%union.anon.5 = type { i32 }
%"struct.sw::Shader::DestinationParameter" = type { %"struct.sw::Shader::Parameter.base", %union.anon.10, i8, i8 }
%"struct.sw::Shader::Parameter.base" = type <{ %union.anon.7, i8 }>
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32, %"struct.sw::Shader::Relative" }
%"struct.sw::Shader::Relative" = type { i8, i32, i8, i32, i8 }
%union.anon.10 = type { i8 }
%"struct.sw::Shader::SourceParameter" = type { %"struct.sw::Shader::Parameter.base", [3 x i8] }
%union.anon.12 = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.sw::Shader::Instruction"** }
%"struct.sw::Shader::Semantic" = type { i8, i8, i8, i8 }
%"class.sw::VertexShader" = type <{ %"class.sw::Shader.base", [32 x %"struct.sw::Shader::Semantic"], [34 x [4 x %"struct.sw::Shader::Semantic"]], [32 x i8], [3 x i8], i32, i32, i8, i8, i8, [5 x i8] }>
%"class.egl::Image" = type { %"class.sw::Surface.base", [6 x i8], %"class.gl::Object.base", i32, i32, i32, i32, i8, %"class.egl::Texture"* }
%"class.sw::Surface.base" = type <{ i32 (...)**, %"class.sw::Resource"*, %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", i8, i8, i8, i8, i32, i8, i8 }>
%"class.gl::Object.base" = type <{ i32 (...)**, i32 }>
%"class.egl::Texture" = type { %"class.gl::NamedObject" }
%"class.gl::NamedObject" = type { %"class.gl::Object.base", i32 }
%"class.sw::Context" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, i8, [3 x i8], float, float, float, [8 x i8], [8 x %"class.sw::TextureStage"], [32 x %"class.sw::Sampler"], [32 x %"class.sw::Resource"*], [32 x %"struct.sw::Stream"], %"class.sw::Resource"*, i8, [3 x i8], float, float, i8, [16 x i8], [3 x i8], [8 x i32], i8, i8, [2 x i8], [8 x i32], [8 x i8], [4 x i8], [8 x %"class.sw::Surface"*], [8 x i32], %"class.sw::Surface"*, i32, [4 x i8], %"class.sw::Surface"*, i32, i8, [3 x i8], i32, i32, i8, i8, i8, i8, i32, %"class.sw::PixelShader"*, %"class.sw::VertexShader"*, float, i32, i8, i8, [8 x i8], [2 x i8], [8 x %"struct.sw::Point"], i32, i32, i32, i32, i8, i8, i8, i8, i64, i8, i8, [2 x i8], i32, i8, i8, [2 x i8], i32, i32, i32, i8, [3 x i8], i32, i32, i32, i8, i8, [2 x i8], float, [8 x i32], i8, [3 x i8], i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.sw::TextureStage" = type { %"struct.sw::TextureStage::Uniforms", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.sw::Sampler"*, %"class.sw::TextureStage"*, [8 x i8] }
%"class.sw::Sampler" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.sw::Texture", float, [12 x i8] }>
%"struct.sw::Stream" = type <{ %"struct.sw::StreamResource", i32, i8, i8, [2 x i8] }>
%"struct.sw::StreamResource" = type { %"class.sw::Resource"*, i8*, i32 }
%"struct.sw::Point" = type { %union.anon.15 }
%union.anon.15 = type { [3 x float] }
%"struct.sw::Color" = type { float, float, float, float }
%"class.sw::VertexProcessor" = type <{ i32 (...)**, [8 x i8], [260 x %"struct.sw::float4"], [16 x %"struct.sw::int4"], [16 x i8], %"struct.sw::VertexProcessor::PointSprite", %"struct.sw::VertexProcessor::FixedFunction", [24 x %"struct.sw::VertexProcessor::UniformBufferInfo"], [64 x %"struct.sw::VertexProcessor::TransformFeedbackInfo"], %"class.sw::Context"*, %"class.sw::LRUCache"*, [12 x %"struct.sw::Matrix"], %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", %"struct.sw::Matrix", [12 x %"struct.sw::Matrix"], i8, [12 x i8], i8, i8, i8, i8, [15 x i8] }>
%"class.gl::Object" = type <{ i32 (...)**, i32, [4 x i8] }>
%"struct.sw::SliceRectT" = type { %"struct.sw::RectT.40", i32 }
%"struct.sw::RectT.40" = type { float, float, float, float }
%"struct.sw::SliceRectT.41" = type { %"struct.sw::RectT", i32 }
%"class.sw::Shader" = type <{ i32 (...)**, i32, i32, i32, i8, i8, i8, i8, %"struct.sw::Shader::Limits", i32, %union.anon.3, [2 x i8], %"class.std::__1::vector", i16, [2 x i8], i32, i8, i8, i8, i8, i8, [3 x i8] }>

@_ZTVN3es26DeviceE = hidden unnamed_addr constant { [4 x i8*], [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.es2::Device"*)* @_ZN3es26DeviceD2Ev to i8*), i8* bitcast (void (%"class.es2::Device"*)* @_ZN3es26DeviceD0Ev to i8*)], [4 x i8*] [i8* inttoptr (i64 -12672 to i8*), i8* null, i8* bitcast (void (%"class.es2::Device"*)* @_ZThn12672_N3es26DeviceD1Ev to i8*), i8* bitcast (void (%"class.es2::Device"*)* @_ZThn12672_N3es26DeviceD0Ev to i8*)] }, align 8

@_ZN3es26DeviceC1EPN2sw7ContextE = hidden unnamed_addr alias void (%"class.es2::Device"*, %"class.sw::Context"*), void (%"class.es2::Device"*, %"class.sw::Context"*)* @_ZN3es26DeviceC2EPN2sw7ContextE
@_ZN3es26DeviceD1Ev = hidden unnamed_addr alias void (%"class.es2::Device"*), void (%"class.es2::Device"*)* @_ZN3es26DeviceD2Ev

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26DeviceC2EPN2sw7ContextE(%"class.es2::Device"*, %"class.sw::Context"*) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.sw::Color", align 4
  %4 = alloca <4 x float>, align 16
  %5 = bitcast <4 x float>* %4 to %"struct.sw::Color"*
  %6 = alloca %"struct.sw::Color", align 4
  %7 = alloca %"struct.sw::Color", align 4
  %8 = alloca [4 x float], align 16
  %9 = alloca [4 x float], align 16
  %10 = alloca [4 x float], align 16
  %11 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8RendererC2EPNS_7ContextENS_11ConventionsEb(%"class.sw::Renderer"* %11, %"class.sw::Context"* %1, i56 281474993553665, i1 zeroext true) #10
  %12 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*], [4 x i8*] }, { [4 x i8*], [4 x i8*] }* @_ZTVN3es26DeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 16
  %13 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.sw::PixelProcessor", %"class.sw::PixelProcessor"* %13, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*], [4 x i8*] }, { [4 x i8*], [4 x i8*] }* @_ZTVN3es26DeviceE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %14, align 16
  %15 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 1
  store %"class.sw::Context"* %1, %"class.sw::Context"** %15, align 16
  %16 = getelementptr %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 13, i64 0
  %17 = bitcast %"class.egl::Image"** %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 80, i1 false)
  tail call void @_ZN2sw14PixelProcessor20setDepthBufferEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext true) #10
  tail call void @_ZN2sw14PixelProcessor11setFillModeENS_8FillModeE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  tail call void @_ZN2sw14PixelProcessor14setShadingModeENS_11ShadingModeE(%"class.sw::PixelProcessor"* %13, i32 1) #10
  tail call void @_ZN2sw14PixelProcessor19setDepthWriteEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext true) #10
  tail call void @_ZN2sw14PixelProcessor18setAlphaTestEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  tail call void @_ZN2sw14PixelProcessor20setSourceBlendFactorENS_11BlendFactorE(%"class.sw::PixelProcessor"* %13, i32 1) #10
  tail call void @_ZN2sw14PixelProcessor18setDestBlendFactorENS_11BlendFactorE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  tail call void @_ZN2sw14PixelProcessor11setCullModeENS_8CullModeEb(%"class.sw::PixelProcessor"* %13, i32 2, i1 zeroext true) #10
  tail call void @_ZN2sw14PixelProcessor15setDepthCompareENS_16DepthCompareModeE(%"class.sw::PixelProcessor"* %13, i32 5) #10
  tail call void @_ZN2sw14PixelProcessor17setAlphaReferenceEf(%"class.sw::PixelProcessor"* %13, float 1.275000e+02) #10
  tail call void @_ZN2sw14PixelProcessor15setAlphaCompareENS_16AlphaCompareModeE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  tail call void @_ZN2sw14PixelProcessor19setAlphaBlendEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  %18 = bitcast %"class.es2::Device"* %0 to %"class.sw::VertexProcessor"*
  tail call void @_ZN2sw15VertexProcessor12setFogEnableEb(%"class.sw::VertexProcessor"* %18, i1 zeroext false) #10
  tail call void @_ZN2sw15VertexProcessor17setSpecularEnableEb(%"class.sw::VertexProcessor"* %18, i1 zeroext false) #10
  %19 = bitcast %"struct.sw::Color"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 16, i1 false)
  call void @_ZN2sw14PixelProcessor11setFogColorENS_5ColorIfEE(%"class.sw::PixelProcessor"* %13, %"struct.sw::Color"* nonnull %3) #10
  call void @_ZN2sw14PixelProcessor15setPixelFogModeENS_7FogModeE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor11setFogStartEf(%"class.sw::PixelProcessor"* %13, float 0.000000e+00) #10
  call void @_ZN2sw14PixelProcessor9setFogEndEf(%"class.sw::PixelProcessor"* %13, float 1.000000e+00) #10
  call void @_ZN2sw14PixelProcessor13setFogDensityEf(%"class.sw::PixelProcessor"* %13, float 1.000000e+00) #10
  call void @_ZN2sw15VertexProcessor17setRangeFogEnableEb(%"class.sw::VertexProcessor"* %18, i1 zeroext false) #10
  call void @_ZN2sw14PixelProcessor16setStencilEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  call void @_ZN2sw14PixelProcessor23setStencilFailOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor24setStencilZFailOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor23setStencilPassOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor17setStencilCompareENS_18StencilCompareModeE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor19setStencilReferenceEi(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor14setStencilMaskEi(%"class.sw::PixelProcessor"* %13, i32 -1) #10
  call void @_ZN2sw14PixelProcessor19setStencilWriteMaskEi(%"class.sw::PixelProcessor"* %13, i32 -1) #10
  call void @_ZN2sw15VertexProcessor16setVertexFogModeENS_7FogModeE(%"class.sw::VertexProcessor"* %18, i32 0) #10
  call void @_ZN2sw8Renderer12setClipFlagsEi(%"class.sw::Renderer"* %11, i32 0) #10
  call void @_ZN2sw15VertexProcessor12setPointSizeEf(%"class.sw::VertexProcessor"* %18, float 1.000000e+00) #10
  call void @_ZN2sw15VertexProcessor15setPointSizeMinEf(%"class.sw::VertexProcessor"* %18, float 1.250000e-01) #10
  call void @_ZN2sw15VertexProcessor15setPointSizeMaxEf(%"class.sw::VertexProcessor"* %18, float 8.192000e+03) #10
  call void @_ZN2sw14PixelProcessor17setBlendOperationENS_14BlendOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  %20 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  store i8 0, i8* %20, align 16
  call void @_ZN2sw8Renderer17setSlopeDepthBiasEf(%"class.sw::Renderer"* %11, float 0.000000e+00) #10
  call void @_ZN2sw14PixelProcessor18setTwoSidedStencilEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  call void @_ZN2sw14PixelProcessor26setStencilFailOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor27setStencilZFailOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor26setStencilPassOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor20setStencilCompareCCWENS_18StencilCompareModeE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  %21 = bitcast <4 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #11
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %4, align 16
  call void @_ZN2sw14PixelProcessor16setBlendConstantERKNS_5ColorIfEE(%"class.sw::PixelProcessor"* %13, %"struct.sw::Color"* nonnull dereferenceable(16) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #11
  call void @_ZN2sw14PixelProcessor12setWriteSRGBEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  call void @_ZN2sw8Renderer12setDepthBiasEf(%"class.sw::Renderer"* %11, float 0.000000e+00) #10
  call void @_ZN2sw14PixelProcessor27setSeparateAlphaBlendEnableEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  call void @_ZN2sw14PixelProcessor25setSourceBlendFactorAlphaENS_11BlendFactorE(%"class.sw::PixelProcessor"* %13, i32 1) #10
  call void @_ZN2sw14PixelProcessor23setDestBlendFactorAlphaENS_11BlendFactorE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw14PixelProcessor22setBlendOperationAlphaENS_14BlendOperationE(%"class.sw::PixelProcessor"* %13, i32 0) #10
  call void @_ZN2sw8Renderer20setPointSpriteEnableEb(%"class.sw::Renderer"* %11, i1 zeroext true) #10
  call void @_ZN2sw14PixelProcessor22setColorLogicOpEnabledEb(%"class.sw::PixelProcessor"* %13, i1 zeroext false) #10
  call void @_ZN2sw14PixelProcessor19setLogicalOperationENS_16LogicalOperationE(%"class.sw::PixelProcessor"* %13, i32 2) #10
  %22 = bitcast %"struct.sw::Color"* %6 to i8*
  %23 = bitcast %"struct.sw::Color"* %6 to i8*
  br label %27

24:                                               ; preds = %27
  %25 = bitcast %"struct.sw::Color"* %7 to i8*
  %26 = bitcast %"struct.sw::Color"* %7 to i8*
  br label %34

27:                                               ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %29, %27 ]
  call void @_ZN2sw8Renderer18setAddressingModeUENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 0, i32 %28, i32 0) #10
  call void @_ZN2sw8Renderer18setAddressingModeVENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 0, i32 %28, i32 0) #10
  call void @_ZN2sw8Renderer18setAddressingModeWENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 0, i32 %28, i32 0) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %23, i8 0, i64 16, i1 false)
  call void @_ZN2sw8Renderer14setBorderColorENS_11SamplerTypeEiRKNS_5ColorIfEE(%"class.sw::Renderer"* %11, i32 0, i32 %28, %"struct.sw::Color"* nonnull dereferenceable(16) %6) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #11
  call void @_ZN2sw8Renderer16setTextureFilterENS_11SamplerTypeEiNS_10FilterTypeE(%"class.sw::Renderer"* %11, i32 0, i32 %28, i32 0) #10
  call void @_ZN2sw8Renderer15setMipmapFilterENS_11SamplerTypeEiNS_10MipmapTypeE(%"class.sw::Renderer"* %11, i32 0, i32 %28, i32 0) #10
  call void @_ZN2sw8Renderer12setMipmapLODENS_11SamplerTypeEif(%"class.sw::Renderer"* %11, i32 0, i32 %28, float 0.000000e+00) #10
  %29 = add nuw nsw i32 %28, 1
  %30 = icmp eq i32 %29, 16
  br i1 %30, label %24, label %27

31:                                               ; preds = %34
  %32 = bitcast [4 x float]* %8 to i8*
  %33 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 0
  br label %47

34:                                               ; preds = %34, %24
  %35 = phi i32 [ 0, %24 ], [ %36, %34 ]
  call void @_ZN2sw8Renderer18setAddressingModeUENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 1, i32 %35, i32 0) #10
  call void @_ZN2sw8Renderer18setAddressingModeVENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 1, i32 %35, i32 0) #10
  call void @_ZN2sw8Renderer18setAddressingModeWENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"* %11, i32 1, i32 %35, i32 0) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %26, i8 0, i64 16, i1 false)
  call void @_ZN2sw8Renderer14setBorderColorENS_11SamplerTypeEiRKNS_5ColorIfEE(%"class.sw::Renderer"* %11, i32 1, i32 %35, %"struct.sw::Color"* nonnull dereferenceable(16) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #11
  call void @_ZN2sw8Renderer16setTextureFilterENS_11SamplerTypeEiNS_10FilterTypeE(%"class.sw::Renderer"* %11, i32 1, i32 %35, i32 0) #10
  call void @_ZN2sw8Renderer15setMipmapFilterENS_11SamplerTypeEiNS_10MipmapTypeE(%"class.sw::Renderer"* %11, i32 1, i32 %35, i32 0) #10
  call void @_ZN2sw8Renderer12setMipmapLODENS_11SamplerTypeEif(%"class.sw::Renderer"* %11, i32 1, i32 %35, float 0.000000e+00) #10
  %36 = add nuw nsw i32 %35, 1
  %37 = icmp eq i32 %36, 4
  br i1 %37, label %31, label %34

38:                                               ; preds = %47
  %39 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 5
  %40 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 7
  %41 = bitcast %"class.sw::PixelShader"** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false)
  store i8 1, i8* %40, align 8
  %42 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 8
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 9
  store i8 1, i8* %43, align 16
  %44 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 10
  store i32 0, i32* %44, align 4
  %45 = bitcast [4 x float]* %9 to i8*
  %46 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 0
  br label %54

47:                                               ; preds = %47, %31
  %48 = phi i32 [ 0, %31 ], [ %49, %47 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 0, i64 16, i1 false)
  call void @_ZN2sw8Renderer12setClipPlaneEjPKf(%"class.sw::Renderer"* %11, i32 %48, float* nonnull %33) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #11
  %49 = add nuw nsw i32 %48, 1
  %50 = icmp eq i32 %49, 6
  br i1 %50, label %38, label %47

51:                                               ; preds = %54
  %52 = bitcast [4 x float]* %10 to i8*
  %53 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, i64 0
  br label %59

54:                                               ; preds = %54, %38
  %55 = phi i32 [ 0, %38 ], [ %56, %54 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 16, i1 false)
  call void @_ZN3es26Device23setPixelShaderConstantFEjPKfj(%"class.es2::Device"* %0, i32 %55, float* nonnull %46, i32 1) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #11
  %56 = add nuw nsw i32 %55, 1
  %57 = icmp eq i32 %56, 264
  br i1 %57, label %51, label %54

58:                                               ; preds = %59
  ret void

59:                                               ; preds = %59, %51
  %60 = phi i32 [ 0, %51 ], [ %61, %59 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 0, i64 16, i1 false)
  call void @_ZN3es26Device24setVertexShaderConstantFEjPKfj(%"class.es2::Device"* %0, i32 %60, float* nonnull %53, i32 1) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #11
  %61 = add nuw nsw i32 %60, 1
  %62 = icmp eq i32 %61, 259
  br i1 %62, label %58, label %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_ZN2sw8RendererC2EPNS_7ContextENS_11ConventionsEb(%"class.sw::Renderer"*, %"class.sw::Context"*, i56, i1 zeroext) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor20setDepthBufferEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor11setFillModeENS_8FillModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor14setShadingModeENS_11ShadingModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor19setDepthWriteEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor18setAlphaTestEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor20setSourceBlendFactorENS_11BlendFactorE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor18setDestBlendFactorENS_11BlendFactorE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor11setCullModeENS_8CullModeEb(%"class.sw::PixelProcessor"*, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor15setDepthCompareENS_16DepthCompareModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor17setAlphaReferenceEf(%"class.sw::PixelProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor15setAlphaCompareENS_16AlphaCompareModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor19setAlphaBlendEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor12setFogEnableEb(%"class.sw::VertexProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor17setSpecularEnableEb(%"class.sw::VertexProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor11setFogColorENS_5ColorIfEE(%"class.sw::PixelProcessor"*, %"struct.sw::Color"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor15setPixelFogModeENS_7FogModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor11setFogStartEf(%"class.sw::PixelProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor9setFogEndEf(%"class.sw::PixelProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor13setFogDensityEf(%"class.sw::PixelProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor17setRangeFogEnableEb(%"class.sw::VertexProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor16setStencilEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor23setStencilFailOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor24setStencilZFailOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor23setStencilPassOperationENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor17setStencilCompareENS_18StencilCompareModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor19setStencilReferenceEi(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor14setStencilMaskEi(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor19setStencilWriteMaskEi(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor16setVertexFogModeENS_7FogModeE(%"class.sw::VertexProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer12setClipFlagsEi(%"class.sw::Renderer"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor12setPointSizeEf(%"class.sw::VertexProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor15setPointSizeMinEf(%"class.sw::VertexProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw15VertexProcessor15setPointSizeMaxEf(%"class.sw::VertexProcessor"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor17setBlendOperationENS_14BlendOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer17setSlopeDepthBiasEf(%"class.sw::Renderer"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor18setTwoSidedStencilEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor26setStencilFailOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor27setStencilZFailOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor26setStencilPassOperationCCWENS_16StencilOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor20setStencilCompareCCWENS_18StencilCompareModeE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor16setBlendConstantERKNS_5ColorIfEE(%"class.sw::PixelProcessor"*, %"struct.sw::Color"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor12setWriteSRGBEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer12setDepthBiasEf(%"class.sw::Renderer"*, float) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor27setSeparateAlphaBlendEnableEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor25setSourceBlendFactorAlphaENS_11BlendFactorE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor23setDestBlendFactorAlphaENS_11BlendFactorE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor22setBlendOperationAlphaENS_14BlendOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer20setPointSpriteEnableEb(%"class.sw::Renderer"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor22setColorLogicOpEnabledEb(%"class.sw::PixelProcessor"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor19setLogicalOperationENS_16LogicalOperationE(%"class.sw::PixelProcessor"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer18setAddressingModeUENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer18setAddressingModeVENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer18setAddressingModeWENS_11SamplerTypeEiNS_14AddressingModeE(%"class.sw::Renderer"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer14setBorderColorENS_11SamplerTypeEiRKNS_5ColorIfEE(%"class.sw::Renderer"*, i32, i32, %"struct.sw::Color"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer16setTextureFilterENS_11SamplerTypeEiNS_10FilterTypeE(%"class.sw::Renderer"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer15setMipmapFilterENS_11SamplerTypeEiNS_10MipmapTypeE(%"class.sw::Renderer"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer12setMipmapLODENS_11SamplerTypeEif(%"class.sw::Renderer"*, i32, i32, float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_ZN2sw8Renderer12setClipPlaneEjPKf(%"class.sw::Renderer"*, i32, float*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device23setPixelShaderConstantFEjPKfj(%"class.es2::Device"* nocapture, i32, float* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %4
  %7 = zext i32 %1 to i64
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %20, %6
  %10 = phi i64 [ 0, %6 ], [ %45, %20 ]
  %11 = add nuw nsw i64 %10, %7
  %12 = icmp ult i64 %11, 264
  br i1 %12, label %20, label %13

13:                                               ; preds = %9, %20, %4
  %14 = add i32 %3, %1
  %15 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 8
  %16 = load i32, i32* %15, align 4
  %17 = icmp ugt i32 %14, %16
  %18 = select i1 %17, i32 %14, i32 %16
  store i32 %18, i32* %15, align 4
  %19 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 7
  store i8 1, i8* %19, align 8
  ret void

20:                                               ; preds = %9
  %21 = shl i64 %10, 2
  %22 = getelementptr inbounds float, float* %2, i64 %21
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 11, i64 %11
  %26 = bitcast [4 x float]* %25 to i32*
  store i32 %24, i32* %26, align 8
  %27 = or i64 %21, 1
  %28 = getelementptr inbounds float, float* %2, i64 %27
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 11, i64 %11, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = or i64 %21, 2
  %34 = getelementptr inbounds float, float* %2, i64 %33
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 11, i64 %11, i64 2
  %38 = bitcast float* %37 to i32*
  store i32 %36, i32* %38, align 8
  %39 = or i64 %21, 3
  %40 = getelementptr inbounds float, float* %2, i64 %39
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 11, i64 %11, i64 3
  %44 = bitcast float* %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = add nuw nsw i64 %10, 1
  %46 = icmp eq i64 %45, %8
  br i1 %46, label %13, label %9
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device24setVertexShaderConstantFEjPKfj(%"class.es2::Device"* nocapture, i32, float* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %4
  %7 = zext i32 %1 to i64
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %20, %6
  %10 = phi i64 [ 0, %6 ], [ %45, %20 ]
  %11 = add nuw nsw i64 %10, %7
  %12 = icmp ult i64 %11, 259
  br i1 %12, label %20, label %13

13:                                               ; preds = %9, %20, %4
  %14 = add i32 %3, %1
  %15 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 10
  %16 = load i32, i32* %15, align 4
  %17 = icmp ugt i32 %14, %16
  %18 = select i1 %17, i32 %14, i32 %16
  store i32 %18, i32* %15, align 4
  %19 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 9
  store i8 1, i8* %19, align 16
  ret void

20:                                               ; preds = %9
  %21 = shl i64 %10, 2
  %22 = getelementptr inbounds float, float* %2, i64 %21
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 12, i64 %11
  %26 = bitcast [4 x float]* %25 to i32*
  store i32 %24, i32* %26, align 8
  %27 = or i64 %21, 1
  %28 = getelementptr inbounds float, float* %2, i64 %27
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 12, i64 %11, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = or i64 %21, 2
  %34 = getelementptr inbounds float, float* %2, i64 %33
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 12, i64 %11, i64 2
  %38 = bitcast float* %37 to i32*
  store i32 %36, i32* %38, align 8
  %39 = or i64 %21, 3
  %40 = getelementptr inbounds float, float* %2, i64 %39
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 12, i64 %11, i64 3
  %44 = bitcast float* %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = add nuw nsw i64 %10, 1
  %46 = icmp eq i64 %45, %8
  br i1 %46, label %13, label %9
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26DeviceD2Ev(%"class.es2::Device"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*], [4 x i8*] }, { [4 x i8*], [4 x i8*] }* @_ZTVN3es26DeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 16
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 2, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*], [4 x i8*] }, { [4 x i8*], [4 x i8*] }* @_ZTVN3es26DeviceE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 16
  br label %8

4:                                                ; preds = %18
  %5 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 14
  %6 = load %"class.egl::Image"*, %"class.egl::Image"** %5, align 8
  %7 = icmp eq %"class.egl::Image"* %6, null
  br i1 %7, label %26, label %21

8:                                                ; preds = %18, %1
  %9 = phi i64 [ 0, %1 ], [ %19, %18 ]
  %10 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 13, i64 %9
  %11 = load %"class.egl::Image"*, %"class.egl::Image"** %10, align 8
  %12 = icmp eq %"class.egl::Image"* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.egl::Image"* %11 to void (%"class.egl::Image"*)***
  %15 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %15, i64 7
  %17 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %16, align 8
  tail call void %17(%"class.egl::Image"* nonnull %11) #10
  store %"class.egl::Image"* null, %"class.egl::Image"** %10, align 8
  br label %18

18:                                               ; preds = %8, %13
  %19 = add nuw nsw i64 %9, 1
  %20 = icmp eq i64 %19, 8
  br i1 %20, label %4, label %8

21:                                               ; preds = %4
  %22 = bitcast %"class.egl::Image"* %6 to void (%"class.egl::Image"*)***
  %23 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %23, i64 7
  %25 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %24, align 8
  tail call void %25(%"class.egl::Image"* nonnull %6) #10
  store %"class.egl::Image"* null, %"class.egl::Image"** %5, align 8
  br label %26

26:                                               ; preds = %4, %21
  %27 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 15
  %28 = load %"class.egl::Image"*, %"class.egl::Image"** %27, align 16
  %29 = icmp eq %"class.egl::Image"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = bitcast %"class.egl::Image"* %28 to void (%"class.egl::Image"*)***
  %32 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %32, i64 7
  %34 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %33, align 8
  tail call void %34(%"class.egl::Image"* nonnull %28) #10
  store %"class.egl::Image"* null, %"class.egl::Image"** %27, align 16
  br label %35

35:                                               ; preds = %26, %30
  %36 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 1
  %37 = load %"class.sw::Context"*, %"class.sw::Context"** %36, align 16
  %38 = icmp eq %"class.sw::Context"* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  tail call void @_ZN2sw7ContextD1Ev(%"class.sw::Context"* nonnull %37) #10
  %40 = bitcast %"class.sw::Context"* %37 to i8*
  tail call void @_ZN2sw7ContextdlEPvm(i8* nonnull %40, i64 99072) #10
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8RendererD2Ev(%"class.sw::Renderer"* %42) #10
  ret void
}

; Function Attrs: nounwind optsize
declare void @_ZN2sw7ContextD1Ev(%"class.sw::Context"*) unnamed_addr #4

; Function Attrs: nounwind optsize
declare void @_ZN2sw7ContextdlEPvm(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind optsize
declare void @_ZN2sw8RendererD2Ev(%"class.sw::Renderer"*) unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn12672_N3es26DeviceD1Ev(%"class.es2::Device"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 -1, i32 0, i32 2, i32 8, i32 4
  %3 = bitcast [3 x %"struct.sw::float4"]* %2 to %"class.es2::Device"*
  tail call void @_ZN3es26DeviceD2Ev(%"class.es2::Device"* %3) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26DeviceD0Ev(%"class.es2::Device"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3es26DeviceD2Ev(%"class.es2::Device"* %0) #10
  %2 = bitcast %"class.es2::Device"* %0 to i8*
  tail call void @_ZN2sw10deallocateEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26DevicedlEPv(i8*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2sw10deallocateEPv(i8* %0) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn12672_N3es26DeviceD0Ev(%"class.es2::Device"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 -1, i32 0, i32 2, i32 8, i32 4
  %3 = bitcast [3 x %"struct.sw::float4"]* %2 to %"class.es2::Device"*
  tail call void @_ZN3es26DeviceD2Ev(%"class.es2::Device"* %3) #10
  %4 = bitcast [3 x %"struct.sw::float4"]* %2 to i8*
  tail call void @_ZN2sw10deallocateEPv(i8* %4) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3es26DevicenwEm(i64) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN2sw8allocateEmm(i64 30272, i64 16) #10
  ret i8* %2
}

; Function Attrs: optsize
declare i8* @_ZN2sw8allocateEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw10deallocateEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device10clearColorEffffj(%"class.es2::Device"*, float, float, float, float, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca [4 x float], align 16
  %8 = alloca <4 x i32>, align 16
  %9 = bitcast <4 x i32>* %8 to %"struct.sw::RectT"*
  %10 = icmp eq i32 %5, 0
  br i1 %10, label %63, label %11

11:                                               ; preds = %6
  %12 = bitcast <4 x i32>* %8 to { i64, i64 }*
  %13 = bitcast [4 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  %14 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 0
  %15 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 1
  %16 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 2
  %17 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 3
  store float %1, float* %14, align 16
  store float %2, float* %15, align 4
  store float %3, float* %16, align 8
  store float %4, float* %17, align 4
  %18 = bitcast <4 x i32>* %8 to i8*
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %20 = bitcast <4 x i32>* %8 to i64*
  %21 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 0
  %23 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 2
  %24 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  %25 = bitcast <4 x i32>* %8 to i8*
  %26 = bitcast i32* %22 to <2 x i32>*
  %27 = bitcast i32* %23 to <2 x i32>*
  br label %29

28:                                               ; preds = %60
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  br label %63

29:                                               ; preds = %60, %11
  %30 = phi i64 [ 0, %11 ], [ %61, %60 ]
  %31 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 13, i64 %30
  %32 = load %"class.egl::Image"*, %"class.egl::Image"** %31, align 8
  %33 = icmp eq %"class.egl::Image"* %32, null
  br i1 %33, label %60, label %34

34:                                               ; preds = %29
  %35 = bitcast %"class.egl::Image"* %32 to %"class.sw::Surface"*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #11
  %36 = bitcast %"class.egl::Image"** %31 to %"class.sw::Surface"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 16, i1 false)
  %37 = call { i64, i64 } @_ZNK2sw7Surface7getRectEv(%"class.sw::Surface"* nonnull %35) #10
  %38 = extractvalue { i64, i64 } %37, 0
  store i64 %38, i64* %20, align 16
  %39 = extractvalue { i64, i64 } %37, 1
  store i64 %39, i64* %19, align 8
  %40 = load i8, i8* %21, align 16, !range !2
  %41 = icmp eq i8 %40, 0
  %42 = lshr i64 %38, 32
  %43 = lshr i64 %39, 32
  %44 = insertelement <4 x i64> undef, i64 %38, i32 0
  %45 = insertelement <4 x i64> %44, i64 %42, i32 1
  %46 = insertelement <4 x i64> %45, i64 %39, i32 2
  %47 = insertelement <4 x i64> %46, i64 %43, i32 3
  %48 = trunc <4 x i64> %47 to <4 x i32>
  br i1 %41, label %58, label %49

49:                                               ; preds = %34
  %50 = load <2 x i32>, <2 x i32>* %26, align 16
  %51 = shufflevector <2 x i32> %50, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %52 = load <2 x i32>, <2 x i32>* %27, align 8
  %53 = shufflevector <2 x i32> %52, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %54 = icmp sgt <4 x i32> %51, %48
  %55 = select <4 x i1> %54, <4 x i32> %51, <4 x i32> %48
  %56 = icmp sgt <4 x i32> %55, %53
  %57 = select <4 x i1> %56, <4 x i32> %53, <4 x i32> %55
  store <4 x i32> %57, <4 x i32>* %8, align 16
  br label %58

58:                                               ; preds = %34, %49
  %59 = load %"class.sw::Surface"*, %"class.sw::Surface"** %36, align 8
  call void @_ZN2sw8Renderer5clearEPvNS_6FormatEPNS_7SurfaceERKNS_5RectTIiEEj(%"class.sw::Renderer"* %24, i8* nonnull %13, i32 84, %"class.sw::Surface"* %59, %"struct.sw::RectT"* nonnull dereferenceable(16) %9, i32 %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #11
  br label %60

60:                                               ; preds = %29, %58
  %61 = add nuw nsw i64 %30, 1
  %62 = icmp eq i64 %61, 8
  br i1 %62, label %28, label %29

63:                                               ; preds = %6, %28
  ret void
}

; Function Attrs: optsize
declare { i64, i64 } @_ZNK2sw7Surface7getRectEv(%"class.sw::Surface"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer5clearEPvNS_6FormatEPNS_7SurfaceERKNS_5RectTIiEEj(%"class.sw::Renderer"*, i8*, i32, %"class.sw::Surface"*, %"struct.sw::RectT"* dereferenceable(16), i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device10clearDepthEf(%"class.es2::Device"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 14
  %4 = load %"class.egl::Image"*, %"class.egl::Image"** %3, align 8
  %5 = icmp eq %"class.egl::Image"* %4, null
  br i1 %5, label %64, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.egl::Image"* %4 to %"class.sw::Surface"*
  %8 = fcmp olt float %1, 0.000000e+00
  %9 = select i1 %8, float 0.000000e+00, float %1
  %10 = fcmp ogt float %9, 1.000000e+00
  %11 = select i1 %10, float 1.000000e+00, float %9
  %12 = bitcast %"class.egl::Image"** %3 to %"class.sw::Surface"**
  %13 = tail call { i64, i64 } @_ZNK2sw7Surface7getRectEv(%"class.sw::Surface"* nonnull %7) #10
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = trunc i64 %14 to i32
  %16 = lshr i64 %14, 32
  %17 = trunc i64 %16 to i32
  %18 = extractvalue { i64, i64 } %13, 1
  %19 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  %20 = load i8, i8* %19, align 16, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %54, label %22

22:                                               ; preds = %6
  %23 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 0
  %24 = load i32, i32* %23, align 16
  %25 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %24, %15
  %32 = select i1 %31, i32 %24, i32 %15
  %33 = icmp sgt i32 %32, %28
  %34 = select i1 %33, i32 %28, i32 %32
  %35 = icmp sgt i32 %26, %17
  %36 = select i1 %35, i32 %26, i32 %17
  %37 = icmp sgt i32 %36, %30
  %38 = select i1 %37, i32 %30, i32 %36
  %39 = trunc i64 %18 to i32
  %40 = icmp sgt i32 %24, %39
  %41 = select i1 %40, i32 %24, i32 %39
  %42 = icmp sgt i32 %41, %28
  %43 = select i1 %42, i32 %28, i32 %41
  %44 = zext i32 %43 to i64
  %45 = lshr i64 %18, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i32 %26, %46
  %48 = select i1 %47, i32 %26, i32 %46
  %49 = icmp sgt i32 %48, %30
  %50 = select i1 %49, i32 %30, i32 %48
  %51 = zext i32 %50 to i64
  %52 = shl nuw i64 %51, 32
  %53 = or i64 %52, %44
  br label %54

54:                                               ; preds = %6, %22
  %55 = phi i32 [ %17, %6 ], [ %38, %22 ]
  %56 = phi i32 [ %15, %6 ], [ %34, %22 ]
  %57 = phi i64 [ %18, %6 ], [ %53, %22 ]
  %58 = load %"class.sw::Surface"*, %"class.sw::Surface"** %12, align 8
  %59 = trunc i64 %57 to i32
  %60 = sub nsw i32 %59, %56
  %61 = lshr i64 %57, 32
  %62 = trunc i64 %61 to i32
  %63 = sub nsw i32 %62, %55
  tail call void @_ZN2sw7Surface10clearDepthEfiiii(%"class.sw::Surface"* %58, float %11, i32 %56, i32 %55, i32 %60, i32 %63) #10
  br label %64

64:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw7Surface10clearDepthEfiiii(%"class.sw::Surface"*, float, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device12clearStencilEjj(%"class.es2::Device"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 15
  %5 = load %"class.egl::Image"*, %"class.egl::Image"** %4, align 16
  %6 = icmp eq %"class.egl::Image"* %5, null
  br i1 %6, label %63, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.egl::Image"* %5 to %"class.sw::Surface"*
  %9 = bitcast %"class.egl::Image"** %4 to %"class.sw::Surface"**
  %10 = tail call { i64, i64 } @_ZNK2sw7Surface7getRectEv(%"class.sw::Surface"* nonnull %8) #10
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = trunc i64 %11 to i32
  %13 = lshr i64 %11, 32
  %14 = trunc i64 %13 to i32
  %15 = extractvalue { i64, i64 } %10, 1
  %16 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 16, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %51, label %19

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 0
  %21 = load i32, i32* %20, align 16
  %22 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %21, %12
  %29 = select i1 %28, i32 %21, i32 %12
  %30 = icmp sgt i32 %29, %25
  %31 = select i1 %30, i32 %25, i32 %29
  %32 = icmp sgt i32 %23, %14
  %33 = select i1 %32, i32 %23, i32 %14
  %34 = icmp sgt i32 %33, %27
  %35 = select i1 %34, i32 %27, i32 %33
  %36 = trunc i64 %15 to i32
  %37 = icmp sgt i32 %21, %36
  %38 = select i1 %37, i32 %21, i32 %36
  %39 = icmp sgt i32 %38, %25
  %40 = select i1 %39, i32 %25, i32 %38
  %41 = zext i32 %40 to i64
  %42 = lshr i64 %15, 32
  %43 = trunc i64 %42 to i32
  %44 = icmp sgt i32 %23, %43
  %45 = select i1 %44, i32 %23, i32 %43
  %46 = icmp sgt i32 %45, %27
  %47 = select i1 %46, i32 %27, i32 %45
  %48 = zext i32 %47 to i64
  %49 = shl nuw i64 %48, 32
  %50 = or i64 %49, %41
  br label %51

51:                                               ; preds = %7, %19
  %52 = phi i32 [ %14, %7 ], [ %35, %19 ]
  %53 = phi i32 [ %12, %7 ], [ %31, %19 ]
  %54 = phi i64 [ %15, %7 ], [ %50, %19 ]
  %55 = load %"class.sw::Surface"*, %"class.sw::Surface"** %9, align 16
  %56 = trunc i32 %1 to i8
  %57 = trunc i32 %2 to i8
  %58 = trunc i64 %54 to i32
  %59 = sub nsw i32 %58, %53
  %60 = lshr i64 %54, 32
  %61 = trunc i64 %60 to i32
  %62 = sub nsw i32 %61, %52
  tail call void @_ZN2sw7Surface12clearStencilEhhiiii(%"class.sw::Surface"* %55, i8 zeroext %56, i8 zeroext %57, i32 %53, i32 %52, i32 %59, i32 %62) #10
  br label %63

63:                                               ; preds = %3, %51
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw7Surface12clearStencilEhhiiii(%"class.sw::Surface"*, i8 zeroext, i8 zeroext, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device20drawIndexedPrimitiveEN2sw8DrawTypeEjj(%"class.es2::Device"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = tail call zeroext i1 @_ZN3es26Device13bindResourcesEv(%"class.es2::Device"* %0) #12
  %6 = icmp ne i32 %3, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer4drawENS_8DrawTypeEjjb(%"class.sw::Renderer"* %9, i32 %1, i32 %2, i32 %3, i1 zeroext true) #10
  br label %10

10:                                               ; preds = %4, %8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device13bindResourcesEv(%"class.es2::Device"*) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN3es26Device12bindViewportEv(%"class.es2::Device"* %0) #12
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 1
  %5 = load %"class.sw::Context"*, %"class.sw::Context"** %4, align 16
  %6 = getelementptr inbounds %"class.sw::Context", %"class.sw::Context"* %5, i64 0, i32 83
  %7 = load i64, i64* %6, align 16
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %3, %1
  tail call void @_ZN3es26Device19bindShaderConstantsEv(%"class.es2::Device"* %0) #12
  br label %10

10:                                               ; preds = %3, %9
  %11 = phi i1 [ true, %9 ], [ false, %3 ]
  ret i1 %11
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer4drawENS_8DrawTypeEjjb(%"class.sw::Renderer"*, i32, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device13drawPrimitiveEN2sw8DrawTypeEj(%"class.es2::Device"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZN3es26Device13bindResourcesEv(%"class.es2::Device"* %0) #12
  %5 = icmp ne i32 %2, 0
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer14setIndexBufferEPNS_8ResourceE(%"class.sw::Renderer"* %8, %"class.sw::Resource"* null) #10
  tail call void @_ZN2sw8Renderer4drawENS_8DrawTypeEjjb(%"class.sw::Renderer"* %8, i32 %1, i32 0, i32 %2, i1 zeroext true) #10
  br label %9

9:                                                ; preds = %3, %7
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer14setIndexBufferEPNS_8ResourceE(%"class.sw::Renderer"*, %"class.sw::Resource"*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3es26Device14setPixelShaderEPKN2sw11PixelShaderE(%"class.es2::Device"* nocapture, %"class.sw::PixelShader"*) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 5
  store %"class.sw::PixelShader"* %1, %"class.sw::PixelShader"** %3, align 8
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 7
  store i8 1, i8* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3es26Device16setScissorEnableEb(%"class.es2::Device"* nocapture, i1 zeroext) local_unnamed_addr #5 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  store i8 %3, i8* %4, align 16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device15setRenderTargetEiPN3egl5ImageEj(%"class.es2::Device"*, i32, %"class.egl::Image"*, i32) local_unnamed_addr #0 align 2 {
  %5 = icmp eq %"class.egl::Image"* %2, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %2, i64 0, i32 2
  %8 = bitcast %"class.gl::Object.base"* %7 to %"class.gl::Object"*
  %9 = bitcast %"class.gl::Object.base"* %7 to void (%"class.gl::Object"*)***
  %10 = load void (%"class.gl::Object"*)**, void (%"class.gl::Object"*)*** %9, align 8
  %11 = load void (%"class.gl::Object"*)*, void (%"class.gl::Object"*)** %10, align 8
  tail call void %11(%"class.gl::Object"* %8) #10
  br label %12

12:                                               ; preds = %4, %6
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 13, i64 %13
  %15 = load %"class.egl::Image"*, %"class.egl::Image"** %14, align 8
  %16 = icmp eq %"class.egl::Image"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %12
  %18 = bitcast %"class.egl::Image"* %15 to void (%"class.egl::Image"*)***
  %19 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %19, i64 7
  %21 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %20, align 8
  tail call void %21(%"class.egl::Image"* nonnull %15) #10
  br label %22

22:                                               ; preds = %12, %17
  store %"class.egl::Image"* %2, %"class.egl::Image"** %14, align 8
  %23 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 2
  %24 = bitcast %"class.egl::Image"* %2 to %"class.sw::Surface"*
  tail call void @_ZN2sw14PixelProcessor15setRenderTargetEiPNS_7SurfaceEj(%"class.sw::PixelProcessor"* %23, i32 %1, %"class.sw::Surface"* %24, i32 %3) #10
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor15setRenderTargetEiPNS_7SurfaceEj(%"class.sw::PixelProcessor"*, i32, %"class.sw::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device14setDepthBufferEPN3egl5ImageEj(%"class.es2::Device"*, %"class.egl::Image"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 14
  %5 = load %"class.egl::Image"*, %"class.egl::Image"** %4, align 8
  %6 = icmp eq %"class.egl::Image"* %5, %1
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = icmp eq %"class.egl::Image"* %1, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %1, i64 0, i32 2
  %11 = bitcast %"class.gl::Object.base"* %10 to %"class.gl::Object"*
  %12 = bitcast %"class.gl::Object.base"* %10 to void (%"class.gl::Object"*)***
  %13 = load void (%"class.gl::Object"*)**, void (%"class.gl::Object"*)*** %12, align 8
  %14 = load void (%"class.gl::Object"*)*, void (%"class.gl::Object"*)** %13, align 8
  tail call void %14(%"class.gl::Object"* %11) #10
  %15 = load %"class.egl::Image"*, %"class.egl::Image"** %4, align 8
  br label %16

16:                                               ; preds = %7, %9
  %17 = phi %"class.egl::Image"* [ %5, %7 ], [ %15, %9 ]
  %18 = icmp eq %"class.egl::Image"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = bitcast %"class.egl::Image"* %17 to void (%"class.egl::Image"*)***
  %21 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %21, i64 7
  %23 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %22, align 8
  tail call void %23(%"class.egl::Image"* nonnull %17) #10
  br label %24

24:                                               ; preds = %16, %19
  store %"class.egl::Image"* %1, %"class.egl::Image"** %4, align 8
  %25 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 2
  %26 = bitcast %"class.egl::Image"* %1 to %"class.sw::Surface"*
  tail call void @_ZN2sw14PixelProcessor14setDepthBufferEPNS_7SurfaceEj(%"class.sw::PixelProcessor"* %25, %"class.sw::Surface"* %26, i32 %2) #10
  br label %27

27:                                               ; preds = %3, %24
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor14setDepthBufferEPNS_7SurfaceEj(%"class.sw::PixelProcessor"*, %"class.sw::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device16setStencilBufferEPN3egl5ImageEj(%"class.es2::Device"*, %"class.egl::Image"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 15
  %5 = load %"class.egl::Image"*, %"class.egl::Image"** %4, align 16
  %6 = icmp eq %"class.egl::Image"* %5, %1
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = icmp eq %"class.egl::Image"* %1, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %1, i64 0, i32 2
  %11 = bitcast %"class.gl::Object.base"* %10 to %"class.gl::Object"*
  %12 = bitcast %"class.gl::Object.base"* %10 to void (%"class.gl::Object"*)***
  %13 = load void (%"class.gl::Object"*)**, void (%"class.gl::Object"*)*** %12, align 8
  %14 = load void (%"class.gl::Object"*)*, void (%"class.gl::Object"*)** %13, align 8
  tail call void %14(%"class.gl::Object"* %11) #10
  %15 = load %"class.egl::Image"*, %"class.egl::Image"** %4, align 16
  br label %16

16:                                               ; preds = %7, %9
  %17 = phi %"class.egl::Image"* [ %5, %7 ], [ %15, %9 ]
  %18 = icmp eq %"class.egl::Image"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = bitcast %"class.egl::Image"* %17 to void (%"class.egl::Image"*)***
  %21 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %21, i64 7
  %23 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %22, align 8
  tail call void %23(%"class.egl::Image"* nonnull %17) #10
  br label %24

24:                                               ; preds = %16, %19
  store %"class.egl::Image"* %1, %"class.egl::Image"** %4, align 16
  %25 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0, i32 2
  %26 = bitcast %"class.egl::Image"* %1 to %"class.sw::Surface"*
  tail call void @_ZN2sw14PixelProcessor16setStencilBufferEPNS_7SurfaceEj(%"class.sw::PixelProcessor"* %25, %"class.sw::Surface"* %26, i32 %2) #10
  br label %27

27:                                               ; preds = %3, %24
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw14PixelProcessor16setStencilBufferEPNS_7SurfaceEj(%"class.sw::PixelProcessor"*, %"class.sw::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device14setScissorRectERKN2sw5RectTIiEE(%"class.es2::Device"* nocapture, %"struct.sw::RectT"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3
  %4 = bitcast %"struct.sw::RectT"* %3 to i8*
  %5 = bitcast %"struct.sw::RectT"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 4 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3es26Device15setVertexShaderEPKN2sw12VertexShaderE(%"class.es2::Device"* nocapture, %"class.sw::VertexShader"*) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 6
  store %"class.sw::VertexShader"* %1, %"class.sw::VertexShader"** %3, align 16
  %4 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 9
  store i8 1, i8* %4, align 16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device11setViewportERKNS_8ViewportE(%"class.es2::Device"* nocapture, %"struct.es2::Viewport"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2
  %4 = bitcast %"struct.es2::Viewport"* %3 to i8*
  %5 = bitcast %"struct.es2::Viewport"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 4 %5, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device10copyBufferEPhS1_jjjjjbb(%"class.es2::Device"* nocapture readnone, i8* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %8, label %11, label %76

11:                                               ; preds = %10
  %12 = icmp eq i32 %4, 0
  br i1 %9, label %23, label %13

13:                                               ; preds = %11
  br i1 %12, label %110, label %14

14:                                               ; preds = %13
  %15 = add i32 %3, -1
  %16 = mul i32 %15, %7
  %17 = zext i32 %16 to i64
  %18 = icmp eq i32 %3, 0
  %19 = zext i32 %7 to i64
  %20 = sub nsw i64 0, %19
  %21 = zext i32 %5 to i64
  %22 = zext i32 %6 to i64
  br label %57

23:                                               ; preds = %11
  br i1 %12, label %110, label %24

24:                                               ; preds = %23
  %25 = add i32 %4, -1
  %26 = mul i32 %25, %5
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = add i32 %3, -1
  %30 = mul i32 %29, %7
  %31 = zext i32 %30 to i64
  %32 = icmp eq i32 %3, 0
  %33 = zext i32 %7 to i64
  %34 = sub nsw i64 0, %33
  %35 = zext i32 %5 to i64
  %36 = sub nsw i64 0, %35
  %37 = zext i32 %6 to i64
  br label %38

38:                                               ; preds = %44, %24
  %39 = phi i32 [ 0, %24 ], [ %45, %44 ]
  %40 = phi i8* [ %28, %24 ], [ %46, %44 ]
  %41 = phi i8* [ %2, %24 ], [ %47, %44 ]
  br i1 %32, label %44, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds i8, i8* %40, i64 %31
  br label %49

44:                                               ; preds = %49, %38
  %45 = add nuw i32 %39, 1
  %46 = getelementptr inbounds i8, i8* %40, i64 %36
  %47 = getelementptr inbounds i8, i8* %41, i64 %37
  %48 = icmp eq i32 %45, %4
  br i1 %48, label %110, label %38

49:                                               ; preds = %49, %42
  %50 = phi i32 [ %53, %49 ], [ 0, %42 ]
  %51 = phi i8* [ %54, %49 ], [ %41, %42 ]
  %52 = phi i8* [ %55, %49 ], [ %43, %42 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %52, i64 %33, i1 false)
  %53 = add nuw i32 %50, 1
  %54 = getelementptr inbounds i8, i8* %51, i64 %33
  %55 = getelementptr inbounds i8, i8* %52, i64 %34
  %56 = icmp eq i32 %53, %3
  br i1 %56, label %44, label %49

57:                                               ; preds = %63, %14
  %58 = phi i32 [ 0, %14 ], [ %64, %63 ]
  %59 = phi i8* [ %1, %14 ], [ %65, %63 ]
  %60 = phi i8* [ %2, %14 ], [ %66, %63 ]
  br i1 %18, label %63, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %59, i64 %17
  br label %68

63:                                               ; preds = %68, %57
  %64 = add nuw i32 %58, 1
  %65 = getelementptr inbounds i8, i8* %59, i64 %21
  %66 = getelementptr inbounds i8, i8* %60, i64 %22
  %67 = icmp eq i32 %64, %4
  br i1 %67, label %110, label %57

68:                                               ; preds = %68, %61
  %69 = phi i32 [ %72, %68 ], [ 0, %61 ]
  %70 = phi i8* [ %73, %68 ], [ %60, %61 ]
  %71 = phi i8* [ %74, %68 ], [ %62, %61 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 %19, i1 false)
  %72 = add nuw i32 %69, 1
  %73 = getelementptr inbounds i8, i8* %70, i64 %19
  %74 = getelementptr inbounds i8, i8* %71, i64 %20
  %75 = icmp eq i32 %72, %3
  br i1 %75, label %63, label %68

76:                                               ; preds = %10
  %77 = mul i32 %7, %3
  %78 = icmp eq i32 %4, 0
  br i1 %9, label %84, label %79

79:                                               ; preds = %76
  br i1 %78, label %110, label %80

80:                                               ; preds = %79
  %81 = zext i32 %77 to i64
  %82 = zext i32 %5 to i64
  %83 = zext i32 %6 to i64
  br label %102

84:                                               ; preds = %76
  br i1 %78, label %110, label %85

85:                                               ; preds = %84
  %86 = add i32 %4, -1
  %87 = mul i32 %86, %5
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %1, i64 %88
  %90 = zext i32 %77 to i64
  %91 = zext i32 %5 to i64
  %92 = sub nsw i64 0, %91
  %93 = zext i32 %6 to i64
  br label %94

94:                                               ; preds = %94, %85
  %95 = phi i32 [ 0, %85 ], [ %98, %94 ]
  %96 = phi i8* [ %89, %85 ], [ %99, %94 ]
  %97 = phi i8* [ %2, %85 ], [ %100, %94 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %97, i8* align 1 %96, i64 %90, i1 false)
  %98 = add nuw i32 %95, 1
  %99 = getelementptr inbounds i8, i8* %96, i64 %92
  %100 = getelementptr inbounds i8, i8* %97, i64 %93
  %101 = icmp eq i32 %98, %4
  br i1 %101, label %110, label %94

102:                                              ; preds = %102, %80
  %103 = phi i32 [ 0, %80 ], [ %106, %102 ]
  %104 = phi i8* [ %1, %80 ], [ %107, %102 ]
  %105 = phi i8* [ %2, %80 ], [ %108, %102 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %104, i64 %81, i1 false)
  %106 = add nuw i32 %103, 1
  %107 = getelementptr inbounds i8, i8* %104, i64 %82
  %108 = getelementptr inbounds i8, i8* %105, i64 %83
  %109 = icmp eq i32 %106, %4
  br i1 %109, label %110, label %102

110:                                              ; preds = %102, %94, %63, %44, %23, %13, %84, %79
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device11stretchRectEPN2sw7SurfaceEPKNS1_10SliceRectTIfEES3_PKNS4_IiEEh(%"class.es2::Device"*, %"class.sw::Surface"*, %"struct.sw::SliceRectT"* readonly, %"class.sw::Surface"*, %"struct.sw::SliceRectT.41"* readonly, i8 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.sw::SliceRectT", align 16
  %8 = alloca %"struct.sw::SliceRectT.41", align 4
  %9 = alloca %"struct.sw::RectT", align 4
  %10 = alloca %"struct.sw::RectT", align 4
  %11 = icmp ne %"class.sw::Surface"* %1, null
  %12 = icmp ne %"class.sw::Surface"* %3, null
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %469

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 2, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 2, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 2, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 2, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne %"struct.sw::SliceRectT"* %2, null
  %24 = icmp ne %"struct.sw::SliceRectT.41"* %4, null
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %65

26:                                               ; preds = %14
  %27 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 2
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 0
  %30 = load float, float* %29, align 4
  %31 = fsub float %28, %30
  %32 = fcmp une float %31, 0.000000e+00
  %33 = tail call float @llvm.fabs.f32(float %31) #13
  %34 = fcmp one float %33, 0x7FF0000000000000
  %35 = and i1 %32, %34
  br i1 %35, label %36, label %469

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 3
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fsub float %38, %40
  %42 = fcmp une float %41, 0.000000e+00
  %43 = tail call float @llvm.fabs.f32(float %41) #13
  %44 = fcmp one float %43, 0x7FF0000000000000
  %45 = and i1 %42, %44
  br i1 %45, label %46, label %469

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %48, %50
  br i1 %51, label %469, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %54, %56
  br i1 %57, label %469, label %58

58:                                               ; preds = %52
  %59 = fcmp olt float %30, %28
  %60 = icmp slt i32 %50, %48
  %61 = xor i1 %59, %60
  %62 = fcmp olt float %40, %38
  %63 = icmp slt i32 %56, %54
  %64 = xor i1 %62, %63
  br label %89

65:                                               ; preds = %14
  br i1 %23, label %66, label %77

66:                                               ; preds = %65
  %67 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 0
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 2
  %70 = load float, float* %69, align 4
  %71 = fcmp ogt float %68, %70
  %72 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 1
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 0, i32 3
  %75 = load float, float* %74, align 4
  %76 = fcmp ogt float %73, %75
  br label %89

77:                                               ; preds = %65
  br i1 %24, label %78, label %89

78:                                               ; preds = %77
  %79 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 2
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %80, %82
  %84 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = icmp sgt i32 %85, %87
  br label %89

89:                                               ; preds = %66, %78, %77, %58
  %90 = phi i1 [ %61, %58 ], [ %71, %66 ], [ %83, %78 ], [ false, %77 ]
  %91 = phi i1 [ %64, %58 ], [ %76, %66 ], [ %88, %78 ], [ false, %77 ]
  %92 = bitcast %"struct.sw::SliceRectT"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %92) #11
  %93 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 0, i32 1
  %95 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 0, i32 2
  %96 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 0, i32 3
  %97 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 1
  %98 = bitcast %"struct.sw::SliceRectT"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %98, i8 -1, i64 16, i1 false)
  store i32 0, i32* %97, align 16
  %99 = bitcast %"struct.sw::SliceRectT.41"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %99) #11
  %100 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 0, i32 0
  %101 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 0, i32 1
  %102 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 0, i32 2
  %103 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 0, i32 3
  %104 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 1
  %105 = bitcast %"struct.sw::SliceRectT.41"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %105, i8 -86, i64 16, i1 false)
  store i32 0, i32* %104, align 4
  br i1 %23, label %106, label %129

106:                                              ; preds = %89
  %107 = bitcast float* %94 to i32*
  %108 = bitcast %"struct.sw::SliceRectT"* %2 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4
  %110 = bitcast float* %96 to i32*
  %111 = bitcast %"struct.sw::SliceRectT"* %7 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %111, align 16
  %112 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  store i32 %113, i32* %97, align 16
  %114 = extractelement <4 x i32> %109, i32 0
  %115 = bitcast i32 %114 to float
  %116 = extractelement <4 x i32> %109, i32 2
  %117 = bitcast i32 %116 to float
  %118 = fcmp ogt float %115, %117
  %119 = extractelement <4 x i32> %109, i32 1
  %120 = bitcast i32 %119 to float
  %121 = extractelement <4 x i32> %109, i32 3
  %122 = bitcast i32 %121 to float
  br i1 %118, label %123, label %126

123:                                              ; preds = %106
  %124 = bitcast %"struct.sw::SliceRectT"* %7 to i32*
  %125 = bitcast float* %95 to i32*
  store i32 %116, i32* %124, align 16
  store i32 %114, i32* %125, align 8
  br label %126

126:                                              ; preds = %123, %106
  %127 = fcmp ogt float %120, %122
  br i1 %127, label %128, label %132

128:                                              ; preds = %126
  store i32 %121, i32* %107, align 4
  store i32 %119, i32* %110, align 4
  br label %132

129:                                              ; preds = %89
  store float 0.000000e+00, float* %94, align 4
  store float 0.000000e+00, float* %93, align 16
  %130 = sitofp i32 %18 to float
  store float %130, float* %96, align 4
  %131 = sitofp i32 %16 to float
  store float %131, float* %95, align 8
  br label %132

132:                                              ; preds = %126, %128, %129
  br i1 %24, label %133, label %144

133:                                              ; preds = %132
  %134 = bitcast %"struct.sw::SliceRectT.41"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %99, i8* nonnull align 4 %134, i64 20, i1 false)
  %135 = load i32, i32* %100, align 4
  %136 = load i32, i32* %102, align 4
  %137 = icmp sgt i32 %135, %136
  br i1 %137, label %138, label %139

138:                                              ; preds = %133
  store i32 %136, i32* %100, align 4
  store i32 %135, i32* %102, align 4
  br label %139

139:                                              ; preds = %138, %133
  %140 = load i32, i32* %101, align 4
  %141 = load i32, i32* %103, align 4
  %142 = icmp sgt i32 %140, %141
  br i1 %142, label %143, label %145

143:                                              ; preds = %139
  store i32 %141, i32* %101, align 4
  store i32 %140, i32* %103, align 4
  br label %145

144:                                              ; preds = %132
  store i32 0, i32* %101, align 4
  store i32 0, i32* %100, align 4
  store i32 %22, i32* %103, align 4
  store i32 %20, i32* %102, align 4
  br label %145

145:                                              ; preds = %139, %143, %144
  %146 = bitcast %"struct.sw::RectT"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %146) #11
  %147 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %9, i64 0, i32 0
  %148 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %9, i64 0, i32 1
  %149 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %9, i64 0, i32 2
  %150 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %9, i64 0, i32 3
  store i32 0, i32* %147, align 4
  store i32 0, i32* %148, align 4
  store i32 %16, i32* %149, align 4
  store i32 %18, i32* %150, align 4
  %151 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %7, i64 0, i32 0
  %152 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %8, i64 0, i32 0
  %153 = call zeroext i1 @_ZN3es26Device11ClipSrcRectERN2sw5RectTIfEERNS2_IiEES6_bb(%"struct.sw::RectT.40"* nonnull dereferenceable(16) %151, %"struct.sw::RectT"* nonnull dereferenceable(16) %152, %"struct.sw::RectT"* nonnull dereferenceable(16) %9, i1 zeroext %90, i1 zeroext %91) #12
  br i1 %153, label %154, label %467

154:                                              ; preds = %145
  %155 = bitcast %"struct.sw::RectT"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %155) #11
  %156 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %10, i64 0, i32 0
  %157 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %10, i64 0, i32 1
  %158 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %10, i64 0, i32 2
  %159 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %10, i64 0, i32 3
  store i32 0, i32* %156, align 4
  store i32 0, i32* %157, align 4
  store i32 %20, i32* %158, align 4
  store i32 %22, i32* %159, align 4
  %160 = call zeroext i1 @_ZN3es26Device11ClipDstRectERN2sw5RectTIfEERNS2_IiEES6_bb(%"struct.sw::RectT.40"* nonnull dereferenceable(16) %151, %"struct.sw::RectT"* nonnull dereferenceable(16) %152, %"struct.sw::RectT"* nonnull dereferenceable(16) %10, i1 zeroext %90, i1 zeroext %91) #12
  br i1 %160, label %161, label %465

161:                                              ; preds = %154
  %162 = load float, float* %95, align 8
  %163 = load float, float* %93, align 16
  %164 = fsub float %162, %163
  %165 = fcmp oeq float %164, 0.000000e+00
  br i1 %165, label %465, label %166

166:                                              ; preds = %161
  %167 = load float, float* %96, align 4
  %168 = load float, float* %94, align 4
  %169 = fsub float %167, %168
  %170 = fcmp oeq float %169, 0.000000e+00
  br i1 %170, label %465, label %171

171:                                              ; preds = %166
  %172 = load i32, i32* %102, align 4
  %173 = load i32, i32* %100, align 4
  %174 = icmp eq i32 %172, %173
  br i1 %174, label %465, label %175

175:                                              ; preds = %171
  %176 = load i32, i32* %103, align 4
  %177 = load i32, i32* %101, align 4
  %178 = icmp ne i32 %176, %177
  %179 = tail call float @llvm.fabs.f32(float %164) #13
  %180 = fcmp one float %179, 0x7FF0000000000000
  %181 = and i1 %180, %178
  %182 = tail call float @llvm.fabs.f32(float %169) #13
  %183 = fcmp one float %182, 0x7FF0000000000000
  %184 = and i1 %183, %181
  br i1 %184, label %185, label %465

185:                                              ; preds = %175
  %186 = fcmp ugt float %162, %163
  br i1 %186, label %187, label %465

187:                                              ; preds = %185
  %188 = fcmp ugt float %167, %168
  %189 = insertelement <4 x float> undef, float %167, i32 0
  %190 = insertelement <4 x float> %189, float %168, i32 1
  %191 = insertelement <4 x float> %190, float %162, i32 2
  %192 = insertelement <4 x float> %191, float %163, i32 3
  %193 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %192)
  %194 = fcmp one <4 x float> %193, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %195 = icmp sgt i32 %172, %173
  %196 = shufflevector <4 x i1> %194, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %197 = and <4 x i1> %194, %196
  %198 = shufflevector <4 x i1> %197, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %199 = and <4 x i1> %197, %198
  %200 = extractelement <4 x i1> %199, i32 0
  %201 = and i1 %200, %188
  %202 = and i1 %201, %195
  br i1 %202, label %203, label %465

203:                                              ; preds = %187
  %204 = icmp sle i32 %176, %177
  %205 = or i32 %177, %173
  %206 = icmp slt i32 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %465, label %208

208:                                              ; preds = %203
  %209 = load i32, i32* %19, align 8
  %210 = icmp sgt i32 %172, %209
  br i1 %210, label %465, label %211

211:                                              ; preds = %208
  %212 = load i32, i32* %21, align 4
  %213 = icmp sgt i32 %176, %212
  br i1 %213, label %465, label %214

214:                                              ; preds = %211
  %215 = zext i8 %5 to i32
  %216 = and i32 %215, 4
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %222, label %218

218:                                              ; preds = %214
  %219 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 11
  %220 = load i32, i32* %219, align 4
  %221 = tail call zeroext i1 @_ZN2sw7Surface7isDepthENS_6FormatE(i32 %220) #10
  br label %222

222:                                              ; preds = %214, %218
  %223 = phi i1 [ false, %214 ], [ %221, %218 ]
  %224 = and i32 %215, 8
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %230, label %226

226:                                              ; preds = %222
  %227 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 11
  %228 = load i32, i32* %227, align 4
  %229 = tail call zeroext i1 @_ZN2sw7Surface9isStencilENS_6FormatE(i32 %228) #10
  br label %230

230:                                              ; preds = %222, %226
  %231 = phi i1 [ false, %222 ], [ %229, %226 ]
  %232 = and i32 %215, 2
  %233 = icmp ne i32 %232, 0
  %234 = or i1 %233, %223
  %235 = or i1 %234, %231
  br i1 %235, label %236, label %465

236:                                              ; preds = %230
  br i1 %231, label %237, label %242

237:                                              ; preds = %236
  %238 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 4, i32 9
  %239 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 4, i32 9
  %240 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 4, i32 7
  %241 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 4, i32 7
  br label %247

242:                                              ; preds = %236
  %243 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 9
  %244 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 3, i32 9
  %245 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 7
  %246 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 3, i32 7
  br label %247

247:                                              ; preds = %242, %237
  %248 = phi i32* [ %240, %237 ], [ %245, %242 ]
  %249 = phi i32* [ %238, %237 ], [ %243, %242 ]
  %250 = phi i32* [ %239, %237 ], [ %244, %242 ]
  %251 = phi i32* [ %241, %237 ], [ %246, %242 ]
  %252 = load i32, i32* %251, align 4
  %253 = load i32, i32* %250, align 4
  %254 = load i32, i32* %249, align 4
  %255 = load i32, i32* %248, align 4
  %256 = fcmp olt float %163, 0.000000e+00
  %257 = fcmp olt float %168, 0.000000e+00
  %258 = or i1 %256, %257
  %259 = sitofp i32 %16 to float
  %260 = fcmp ogt float %162, %259
  %261 = or i1 %258, %260
  br i1 %261, label %265, label %262

262:                                              ; preds = %247
  %263 = sitofp i32 %18 to float
  %264 = fcmp ogt float %167, %263
  br label %265

265:                                              ; preds = %262, %247
  %266 = phi i1 [ true, %247 ], [ %264, %262 ]
  %267 = sub i32 %172, %173
  %268 = sitofp i32 %267 to float
  %269 = fcmp une float %164, %268
  br i1 %269, label %274, label %270

270:                                              ; preds = %265
  %271 = sub nsw i32 %176, %177
  %272 = sitofp i32 %271 to float
  %273 = fcmp une float %169, %272
  br label %274

274:                                              ; preds = %270, %265
  %275 = phi i1 [ true, %265 ], [ %273, %270 ]
  %276 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 11
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 3, i32 11
  %279 = load i32, i32* %278, align 4
  %280 = icmp eq i32 %277, %279
  %281 = zext i1 %280 to i8
  %282 = tail call zeroext i1 @_ZN2sw7Surface13hasQuadLayoutENS_6FormatE(i32 %277) #10
  br i1 %282, label %286, label %283

283:                                              ; preds = %274
  %284 = load i32, i32* %278, align 4
  %285 = tail call zeroext i1 @_ZN2sw7Surface13hasQuadLayoutENS_6FormatE(i32 %284) #10
  br label %286

286:                                              ; preds = %283, %274
  %287 = phi i1 [ true, %274 ], [ %285, %283 ]
  %288 = fcmp oeq float %163, 0.000000e+00
  %289 = fcmp oeq float %168, 0.000000e+00
  %290 = and i1 %288, %289
  %291 = icmp eq i32 %205, 0
  %292 = and i1 %290, %291
  %293 = sitofp i32 %16 to float
  %294 = fcmp oeq float %162, %293
  %295 = and i1 %292, %294
  br i1 %295, label %296, label %303

296:                                              ; preds = %286
  %297 = sitofp i32 %18 to float
  %298 = fcmp oeq float %167, %297
  %299 = icmp eq i32 %172, %20
  %300 = and i1 %298, %299
  %301 = icmp eq i32 %176, %22
  %302 = and i1 %300, %301
  br label %303

303:                                              ; preds = %296, %286
  %304 = phi i1 [ false, %286 ], [ %302, %296 ]
  %305 = icmp eq i32 %254, %253
  br i1 %305, label %306, label %314

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 4
  %308 = load i16, i16* %307, align 4
  %309 = icmp eq i16 %308, 0
  br i1 %309, label %310, label %314

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %3, i64 0, i32 3, i32 4
  %312 = load i16, i16* %311, align 4
  %313 = icmp ne i16 %312, 0
  br label %314

314:                                              ; preds = %310, %306, %303
  %315 = phi i1 [ true, %306 ], [ true, %303 ], [ %313, %310 ]
  %316 = load i32, i32* %15, align 8
  %317 = load i32, i32* %276, align 4
  %318 = tail call i32 @_ZN2sw7Surface5bytesENS_6FormatE(i32 %317) #10
  %319 = mul nsw i32 %318, %316
  %320 = add nsw i32 %319, 16
  %321 = icmp sgt i32 %255, %320
  %322 = load i32, i32* %276, align 4
  switch i32 %322, label %330 [
    i32 19, label %323
    i32 18, label %326
  ]

323:                                              ; preds = %314
  %324 = load i32, i32* %278, align 4
  %325 = icmp eq i32 %324, 18
  br i1 %325, label %329, label %330

326:                                              ; preds = %314
  %327 = load i32, i32* %278, align 4
  %328 = icmp eq i32 %327, 19
  br i1 %328, label %329, label %330

329:                                              ; preds = %326, %323
  br label %330

330:                                              ; preds = %314, %323, %329, %326
  %331 = phi i8 [ 1, %329 ], [ %281, %326 ], [ %281, %323 ], [ %281, %314 ]
  %332 = phi i1 [ true, %329 ], [ false, %326 ], [ false, %323 ], [ false, %314 ]
  %333 = xor i1 %304, true
  %334 = or i1 %275, %333
  %335 = or i1 %266, %334
  %336 = icmp eq i8 %331, 0
  %337 = or i1 %335, %336
  %338 = or i1 %332, %337
  %339 = or i1 %315, %338
  %340 = or i1 %321, %339
  %341 = or i1 %90, %340
  %342 = or i1 %91, %341
  br i1 %342, label %368, label %343

343:                                              ; preds = %330
  br i1 %231, label %344, label %348

344:                                              ; preds = %343
  %345 = tail call i8* @_ZN2sw7Surface11lockStencilEiiiNS_8AccessorE(%"class.sw::Surface"* nonnull %1, i32 0, i32 0, i32 0, i32 0) #10
  %346 = tail call i8* @_ZN2sw7Surface11lockStencilEiiiNS_8AccessorE(%"class.sw::Surface"* nonnull %3, i32 0, i32 0, i32 0, i32 0) #10
  %347 = sext i32 %254 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %346, i8* align 1 %345, i64 %347, i1 false)
  tail call void @_ZN2sw7Surface13unlockStencilEv(%"class.sw::Surface"* nonnull %1) #10
  tail call void @_ZN2sw7Surface13unlockStencilEv(%"class.sw::Surface"* nonnull %3) #10
  br label %465

348:                                              ; preds = %343
  %349 = bitcast %"class.sw::Surface"* %1 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %350 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %349, align 8
  %351 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %350, i64 2
  %352 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %351, align 8
  %353 = tail call i8* %352(%"class.sw::Surface"* nonnull %1, i32 0, i32 0, i32 0, i32 1, i32 0) #10
  %354 = bitcast %"class.sw::Surface"* %3 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %355 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %354, align 8
  %356 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %355, i64 2
  %357 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %356, align 8
  %358 = tail call i8* %357(%"class.sw::Surface"* nonnull %3, i32 0, i32 0, i32 0, i32 4, i32 0) #10
  %359 = sext i32 %254 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %358, i8* align 1 %353, i64 %359, i1 false)
  %360 = bitcast %"class.sw::Surface"* %1 to void (%"class.sw::Surface"*)***
  %361 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %360, align 8
  %362 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %361, i64 3
  %363 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %362, align 8
  tail call void %363(%"class.sw::Surface"* nonnull %1) #10
  %364 = bitcast %"class.sw::Surface"* %3 to void (%"class.sw::Surface"*)***
  %365 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %364, align 8
  %366 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %365, i64 3
  %367 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %366, align 8
  tail call void %367(%"class.sw::Surface"* nonnull %3) #10
  br label %465

368:                                              ; preds = %330
  %369 = xor i1 %223, true
  %370 = or i1 %275, %369
  %371 = or i1 %266, %370
  %372 = or i1 %371, %336
  %373 = or i1 %287, %372
  br i1 %373, label %399, label %374

374:                                              ; preds = %368
  %375 = fptosi float %163 to i32
  %376 = fptosi float %168 to i32
  %377 = bitcast %"class.sw::Surface"* %1 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %378 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %377, align 8
  %379 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %378, i64 2
  %380 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %379, align 8
  %381 = tail call i8* %380(%"class.sw::Surface"* nonnull %1, i32 %375, i32 %376, i32 0, i32 1, i32 0) #10
  %382 = select i1 %304, i32 4, i32 2
  %383 = bitcast %"class.sw::Surface"* %3 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %384 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %383, align 8
  %385 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %384, i64 2
  %386 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %385, align 8
  %387 = tail call i8* %386(%"class.sw::Surface"* nonnull %3, i32 %173, i32 %177, i32 0, i32 %382, i32 0) #10
  %388 = sub nsw i32 %176, %177
  %389 = load i32, i32* %276, align 4
  %390 = tail call i32 @_ZN2sw7Surface5bytesENS_6FormatE(i32 %389) #10
  tail call void @_ZN3es26Device10copyBufferEPhS1_jjjjjbb(%"class.es2::Device"* undef, i8* %381, i8* %387, i32 %267, i32 %388, i32 %255, i32 %252, i32 %390, i1 zeroext %90, i1 zeroext %91) #12
  %391 = bitcast %"class.sw::Surface"* %1 to void (%"class.sw::Surface"*)***
  %392 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %391, align 8
  %393 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %392, i64 3
  %394 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %393, align 8
  tail call void %394(%"class.sw::Surface"* nonnull %1) #10
  %395 = bitcast %"class.sw::Surface"* %3 to void (%"class.sw::Surface"*)***
  %396 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %395, align 8
  %397 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %396, i64 3
  %398 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %397, align 8
  tail call void %398(%"class.sw::Surface"* nonnull %3) #10
  br label %465

399:                                              ; preds = %368
  %400 = icmp eq i32 %232, 0
  %401 = or i1 %400, %275
  %402 = or i1 %266, %401
  %403 = or i1 %402, %336
  %404 = or i1 %287, %403
  br i1 %404, label %456, label %405

405:                                              ; preds = %399
  %406 = fptosi float %163 to i32
  %407 = fptosi float %168 to i32
  %408 = getelementptr inbounds %"struct.sw::SliceRectT", %"struct.sw::SliceRectT"* %2, i64 0, i32 1
  %409 = load i32, i32* %408, align 4
  %410 = bitcast %"class.sw::Surface"* %1 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %411 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %410, align 8
  %412 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %411, i64 2
  %413 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %412, align 8
  %414 = tail call i8* %413(%"class.sw::Surface"* nonnull %1, i32 %406, i32 %407, i32 %409, i32 1, i32 0) #10
  %415 = getelementptr inbounds %"struct.sw::SliceRectT.41", %"struct.sw::SliceRectT.41"* %4, i64 0, i32 1
  %416 = load i32, i32* %415, align 4
  %417 = select i1 %304, i32 4, i32 2
  %418 = bitcast %"class.sw::Surface"* %3 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %419 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %418, align 8
  %420 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %419, i64 2
  %421 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %420, align 8
  %422 = tail call i8* %421(%"class.sw::Surface"* nonnull %3, i32 %173, i32 %177, i32 %416, i32 %417, i32 0) #10
  %423 = sub i32 %176, %177
  %424 = load i32, i32* %276, align 4
  %425 = tail call i32 @_ZN2sw7Surface5bytesENS_6FormatE(i32 %424) #10
  tail call void @_ZN3es26Device10copyBufferEPhS1_jjjjjbb(%"class.es2::Device"* undef, i8* %414, i8* %422, i32 %267, i32 %423, i32 %255, i32 %252, i32 %425, i1 zeroext %90, i1 zeroext %91) #12
  %426 = icmp ne i32 %423, 0
  %427 = and i1 %332, %426
  br i1 %427, label %428, label %447

428:                                              ; preds = %405
  %429 = icmp eq i32 %267, 0
  %430 = sext i32 %252 to i64
  %431 = zext i32 %267 to i64
  br label %432

432:                                              ; preds = %435, %428
  %433 = phi i32 [ 0, %428 ], [ %437, %435 ]
  %434 = phi i8* [ %422, %428 ], [ %436, %435 ]
  br i1 %429, label %435, label %439

435:                                              ; preds = %439, %432
  %436 = getelementptr inbounds i8, i8* %434, i64 %430
  %437 = add nuw i32 %433, 1
  %438 = icmp eq i32 %437, %423
  br i1 %438, label %447, label %432

439:                                              ; preds = %432, %439
  %440 = phi i64 [ %445, %439 ], [ 0, %432 ]
  %441 = shl i64 %440, 2
  %442 = and i64 %441, 4294967292
  %443 = or i64 %442, 3
  %444 = getelementptr inbounds i8, i8* %434, i64 %443
  store i8 -1, i8* %444, align 1
  %445 = add nuw nsw i64 %440, 1
  %446 = icmp eq i64 %445, %431
  br i1 %446, label %435, label %439

447:                                              ; preds = %435, %405
  %448 = bitcast %"class.sw::Surface"* %1 to void (%"class.sw::Surface"*)***
  %449 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %448, align 8
  %450 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %449, i64 3
  %451 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %450, align 8
  tail call void %451(%"class.sw::Surface"* %1) #10
  %452 = bitcast %"class.sw::Surface"* %3 to void (%"class.sw::Surface"*)***
  %453 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %452, align 8
  %454 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %453, i64 3
  %455 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %454, align 8
  tail call void %455(%"class.sw::Surface"* %3) #10
  br label %465

456:                                              ; preds = %399
  br i1 %90, label %457, label %458

457:                                              ; preds = %456
  store i32 %172, i32* %100, align 4
  store i32 %173, i32* %102, align 4
  br label %458

458:                                              ; preds = %457, %456
  br i1 %91, label %459, label %460

459:                                              ; preds = %458
  store i32 %176, i32* %101, align 4
  store i32 %177, i32* %103, align 4
  br label %460

460:                                              ; preds = %459, %458
  %461 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  %462 = and i32 %215, 1
  %463 = icmp ne i32 %462, 0
  %464 = and i1 %463, %275
  call void @_ZN2sw8Renderer4blitEPNS_7SurfaceERKNS_10SliceRectTIfEES2_RKNS3_IiEEbbb(%"class.sw::Renderer"* %461, %"class.sw::Surface"* nonnull %1, %"struct.sw::SliceRectT"* nonnull dereferenceable(20) %7, %"class.sw::Surface"* nonnull %3, %"struct.sw::SliceRectT.41"* nonnull dereferenceable(20) %8, i1 zeroext %464, i1 zeroext %231, i1 zeroext true) #10
  br label %465

465:                                              ; preds = %211, %175, %203, %208, %185, %187, %230, %344, %348, %374, %460, %447, %161, %166, %171, %154
  %466 = phi i1 [ true, %154 ], [ true, %175 ], [ true, %171 ], [ true, %166 ], [ true, %161 ], [ false, %211 ], [ true, %447 ], [ true, %460 ], [ true, %374 ], [ true, %348 ], [ true, %344 ], [ true, %230 ], [ false, %187 ], [ false, %185 ], [ false, %208 ], [ false, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %155) #11
  br label %467

467:                                              ; preds = %145, %465
  %468 = phi i1 [ %466, %465 ], [ true, %145 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %146) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %99) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %92) #11
  br label %469

469:                                              ; preds = %36, %26, %467, %52, %46, %6
  %470 = phi i1 [ false, %6 ], [ %468, %467 ], [ true, %52 ], [ true, %46 ], [ true, %36 ], [ true, %26 ]
  ret i1 %470
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device11ClipSrcRectERN2sw5RectTIfEERNS2_IiEES6_bb(%"struct.sw::RectT.40"* nocapture dereferenceable(16), %"struct.sw::RectT"* nocapture dereferenceable(16), %"struct.sw::RectT"* nocapture readonly dereferenceable(16), i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = fcmp olt float %7, %10
  br i1 %11, label %12, label %42

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub nsw i32 %14, %16
  %18 = sitofp i32 %17 to float
  %19 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 2
  %20 = load float, float* %19, align 4
  %21 = fsub float %20, %7
  %22 = fdiv float %18, %21
  %23 = fsub float %10, %7
  %24 = fmul float %23, %22
  %25 = tail call float @llvm.round.f32(float %24)
  %26 = tail call zeroext i1 @_ZN3es214FloatFitsInIntEf(float %25) #10
  %27 = tail call float @llvm.fabs.f32(float %22) #13
  %28 = fcmp one float %27, 0x7FF0000000000000
  %29 = and i1 %26, %28
  br i1 %29, label %30, label %151

30:                                               ; preds = %12
  %31 = fptosi float %25 to i32
  br i1 %3, label %32, label %35

32:                                               ; preds = %30
  %33 = load i32, i32* %13, align 4
  %34 = sub nsw i32 %33, %31
  store i32 %34, i32* %13, align 4
  br label %38

35:                                               ; preds = %30
  %36 = load i32, i32* %15, align 4
  %37 = add nsw i32 %36, %31
  store i32 %37, i32* %15, align 4
  br label %38

38:                                               ; preds = %35, %32
  %39 = fdiv float %25, %22
  %40 = load float, float* %6, align 4
  %41 = fadd float %39, %40
  store float %41, float* %6, align 4
  br label %42

42:                                               ; preds = %38, %5
  %43 = phi float [ %41, %38 ], [ %7, %5 ]
  %44 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 2
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sitofp i32 %47 to float
  %49 = fcmp ogt float %45, %48
  br i1 %49, label %50, label %78

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = sub nsw i32 %52, %54
  %56 = sitofp i32 %55 to float
  %57 = fsub float %45, %43
  %58 = fdiv float %56, %57
  %59 = fsub float %45, %48
  %60 = fmul float %59, %58
  %61 = tail call float @llvm.round.f32(float %60)
  %62 = tail call zeroext i1 @_ZN3es214FloatFitsInIntEf(float %61) #10
  %63 = tail call float @llvm.fabs.f32(float %58) #13
  %64 = fcmp one float %63, 0x7FF0000000000000
  %65 = and i1 %62, %64
  br i1 %65, label %66, label %151

66:                                               ; preds = %50
  %67 = fptosi float %61 to i32
  br i1 %3, label %68, label %71

68:                                               ; preds = %66
  %69 = load i32, i32* %53, align 4
  %70 = add nsw i32 %69, %67
  store i32 %70, i32* %53, align 4
  br label %74

71:                                               ; preds = %66
  %72 = load i32, i32* %51, align 4
  %73 = sub nsw i32 %72, %67
  store i32 %73, i32* %51, align 4
  br label %74

74:                                               ; preds = %71, %68
  %75 = fdiv float %61, %58
  %76 = load float, float* %44, align 4
  %77 = fsub float %76, %75
  store float %77, float* %44, align 4
  br label %78

78:                                               ; preds = %74, %42
  %79 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 1
  %80 = load float, float* %79, align 4
  %81 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = sitofp i32 %82 to float
  %84 = fcmp olt float %80, %83
  br i1 %84, label %85, label %115

85:                                               ; preds = %78
  %86 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = sub nsw i32 %87, %89
  %91 = sitofp i32 %90 to float
  %92 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 3
  %93 = load float, float* %92, align 4
  %94 = fsub float %93, %80
  %95 = fdiv float %91, %94
  %96 = fsub float %83, %80
  %97 = fmul float %96, %95
  %98 = tail call float @llvm.round.f32(float %97)
  %99 = tail call zeroext i1 @_ZN3es214FloatFitsInIntEf(float %98) #10
  %100 = tail call float @llvm.fabs.f32(float %95) #13
  %101 = fcmp one float %100, 0x7FF0000000000000
  %102 = and i1 %99, %101
  br i1 %102, label %103, label %151

103:                                              ; preds = %85
  %104 = fptosi float %98 to i32
  br i1 %4, label %105, label %108

105:                                              ; preds = %103
  %106 = load i32, i32* %86, align 4
  %107 = sub nsw i32 %106, %104
  store i32 %107, i32* %86, align 4
  br label %111

108:                                              ; preds = %103
  %109 = load i32, i32* %88, align 4
  %110 = add nsw i32 %109, %104
  store i32 %110, i32* %88, align 4
  br label %111

111:                                              ; preds = %108, %105
  %112 = fdiv float %98, %95
  %113 = load float, float* %79, align 4
  %114 = fadd float %112, %113
  store float %114, float* %79, align 4
  br label %115

115:                                              ; preds = %111, %78
  %116 = phi float [ %114, %111 ], [ %80, %78 ]
  %117 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 3
  %118 = load float, float* %117, align 4
  %119 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = sitofp i32 %120 to float
  %122 = fcmp ogt float %118, %121
  br i1 %122, label %123, label %151

123:                                              ; preds = %115
  %124 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 3
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = sub nsw i32 %125, %127
  %129 = sitofp i32 %128 to float
  %130 = fsub float %118, %116
  %131 = fdiv float %129, %130
  %132 = fsub float %118, %121
  %133 = fmul float %132, %131
  %134 = tail call float @llvm.round.f32(float %133)
  %135 = tail call zeroext i1 @_ZN3es214FloatFitsInIntEf(float %134) #10
  %136 = tail call float @llvm.fabs.f32(float %131) #13
  %137 = fcmp one float %136, 0x7FF0000000000000
  %138 = and i1 %135, %137
  br i1 %138, label %139, label %151

139:                                              ; preds = %123
  %140 = fptosi float %134 to i32
  br i1 %4, label %141, label %144

141:                                              ; preds = %139
  %142 = load i32, i32* %126, align 4
  %143 = add nsw i32 %142, %140
  store i32 %143, i32* %126, align 4
  br label %147

144:                                              ; preds = %139
  %145 = load i32, i32* %124, align 4
  %146 = sub nsw i32 %145, %140
  store i32 %146, i32* %124, align 4
  br label %147

147:                                              ; preds = %144, %141
  %148 = fdiv float %134, %131
  %149 = load float, float* %117, align 4
  %150 = fsub float %149, %148
  store float %150, float* %117, align 4
  br label %151

151:                                              ; preds = %115, %147, %123, %85, %50, %12
  %152 = phi i1 [ false, %12 ], [ false, %50 ], [ false, %85 ], [ false, %123 ], [ true, %147 ], [ true, %115 ]
  ret i1 %152
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device11ClipDstRectERN2sw5RectTIfEERNS2_IiEES6_bb(%"struct.sw::RectT.40"* nocapture dereferenceable(16), %"struct.sw::RectT"* nocapture dereferenceable(16), %"struct.sw::RectT"* nocapture readonly dereferenceable(16), i1 zeroext, i1 zeroext) local_unnamed_addr #6 align 2 {
  %6 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, %7
  br i1 %10, label %11, label %34

11:                                               ; preds = %5
  %12 = sub nsw i32 %9, %7
  %13 = sitofp i32 %12 to float
  %14 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, %7
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %13, %17
  %19 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 2
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = fsub float %20, %22
  %24 = fmul float %18, %23
  %25 = tail call float @llvm.fabs.f32(float %24) #13
  %26 = fcmp ueq float %25, 0x7FF0000000000000
  br i1 %26, label %119, label %27

27:                                               ; preds = %11
  br i1 %3, label %28, label %30

28:                                               ; preds = %27
  %29 = fsub float %20, %24
  store float %29, float* %19, align 4
  br label %32

30:                                               ; preds = %27
  %31 = fadd float %22, %24
  store float %31, float* %21, align 4
  br label %32

32:                                               ; preds = %30, %28
  %33 = load i32, i32* %8, align 4
  store i32 %33, i32* %6, align 4
  br label %34

34:                                               ; preds = %32, %5
  %35 = phi i32 [ %33, %32 ], [ %7, %5 ]
  %36 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %37, %39
  br i1 %40, label %41, label %62

41:                                               ; preds = %34
  %42 = sub nsw i32 %37, %39
  %43 = sitofp i32 %42 to float
  %44 = sub nsw i32 %37, %35
  %45 = sitofp i32 %44 to float
  %46 = fdiv float %43, %45
  %47 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 2
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 0
  %50 = load float, float* %49, align 4
  %51 = fsub float %48, %50
  %52 = fmul float %46, %51
  %53 = tail call float @llvm.fabs.f32(float %52) #13
  %54 = fcmp ueq float %53, 0x7FF0000000000000
  br i1 %54, label %119, label %55

55:                                               ; preds = %41
  br i1 %3, label %56, label %58

56:                                               ; preds = %55
  %57 = fadd float %50, %52
  store float %57, float* %49, align 4
  br label %60

58:                                               ; preds = %55
  %59 = fsub float %48, %52
  store float %59, float* %47, align 4
  br label %60

60:                                               ; preds = %58, %56
  %61 = load i32, i32* %38, align 4
  store i32 %61, i32* %36, align 4
  br label %62

62:                                               ; preds = %60, %34
  %63 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, %64
  br i1 %67, label %68, label %91

68:                                               ; preds = %62
  %69 = sub nsw i32 %66, %64
  %70 = sitofp i32 %69 to float
  %71 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = sub nsw i32 %72, %64
  %74 = sitofp i32 %73 to float
  %75 = fdiv float %70, %74
  %76 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 3
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 1
  %79 = load float, float* %78, align 4
  %80 = fsub float %77, %79
  %81 = fmul float %75, %80
  %82 = tail call float @llvm.fabs.f32(float %81) #13
  %83 = fcmp ueq float %82, 0x7FF0000000000000
  br i1 %83, label %119, label %84

84:                                               ; preds = %68
  br i1 %4, label %85, label %87

85:                                               ; preds = %84
  %86 = fsub float %77, %81
  store float %86, float* %76, align 4
  br label %89

87:                                               ; preds = %84
  %88 = fadd float %79, %81
  store float %88, float* %78, align 4
  br label %89

89:                                               ; preds = %87, %85
  %90 = load i32, i32* %65, align 4
  store i32 %90, i32* %63, align 4
  br label %91

91:                                               ; preds = %89, %62
  %92 = phi i32 [ %90, %89 ], [ %64, %62 ]
  %93 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 3
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = icmp sgt i32 %94, %96
  br i1 %97, label %98, label %119

98:                                               ; preds = %91
  %99 = sub nsw i32 %94, %96
  %100 = sitofp i32 %99 to float
  %101 = sub nsw i32 %94, %92
  %102 = sitofp i32 %101 to float
  %103 = fdiv float %100, %102
  %104 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 3
  %105 = load float, float* %104, align 4
  %106 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %0, i64 0, i32 1
  %107 = load float, float* %106, align 4
  %108 = fsub float %105, %107
  %109 = fmul float %103, %108
  %110 = tail call float @llvm.fabs.f32(float %109) #13
  %111 = fcmp ueq float %110, 0x7FF0000000000000
  br i1 %111, label %119, label %112

112:                                              ; preds = %98
  br i1 %4, label %113, label %115

113:                                              ; preds = %112
  %114 = fadd float %107, %109
  store float %114, float* %106, align 4
  br label %117

115:                                              ; preds = %112
  %116 = fsub float %105, %109
  store float %116, float* %104, align 4
  br label %117

117:                                              ; preds = %115, %113
  %118 = load i32, i32* %95, align 4
  store i32 %118, i32* %93, align 4
  br label %119

119:                                              ; preds = %11, %41, %68, %98, %91, %117
  %120 = phi i1 [ false, %11 ], [ false, %41 ], [ false, %68 ], [ false, %98 ], [ true, %117 ], [ true, %91 ]
  ret i1 %120
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZN3es26Device14validRectangleEPKN2sw5RectTIfEEPNS1_7SurfaceE(%"class.es2::Device"* nocapture readnone, %"struct.sw::RectT.40"* readonly, %"class.sw::Surface"* nocapture readnone) local_unnamed_addr #7 align 2 {
  %4 = icmp eq %"struct.sw::RectT.40"* %1, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %1, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %1, i64 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp ugt float %7, %9
  br i1 %10, label %11, label %29

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %1, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %"struct.sw::RectT.40", %"struct.sw::RectT.40"* %1, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fcmp ugt float %13, %15
  %17 = tail call float @llvm.fabs.f32(float %9) #13
  %18 = fcmp one float %17, 0x7FF0000000000000
  %19 = and i1 %18, %16
  %20 = tail call float @llvm.fabs.f32(float %7) #13
  %21 = fcmp one float %20, 0x7FF0000000000000
  %22 = and i1 %21, %19
  %23 = tail call float @llvm.fabs.f32(float %15) #13
  %24 = fcmp one float %23, 0x7FF0000000000000
  %25 = and i1 %24, %22
  br i1 %25, label %26, label %29

26:                                               ; preds = %11
  %27 = tail call float @llvm.fabs.f32(float %13) #13
  %28 = fcmp one float %27, 0x7FF0000000000000
  ret i1 %28

29:                                               ; preds = %5, %11, %3
  %30 = phi i1 [ true, %3 ], [ false, %11 ], [ false, %5 ]
  ret i1 %30
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZN3es26Device14validRectangleEPKN2sw5RectTIiEEPNS1_7SurfaceE(%"class.es2::Device"* nocapture readnone, %"struct.sw::RectT"* readonly, %"class.sw::Surface"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %4 = icmp eq %"struct.sw::RectT"* %1, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %7, %9
  br i1 %10, label %11, label %28

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp sle i32 %13, %15
  %17 = or i32 %15, %9
  %18 = icmp slt i32 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %28, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 2, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %7, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 2, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp sle i32 %13, %26
  ret i1 %27

28:                                               ; preds = %11, %20, %5, %3
  %29 = phi i1 [ true, %3 ], [ false, %11 ], [ false, %5 ], [ false, %20 ]
  ret i1 %29
}

; Function Attrs: optsize
declare zeroext i1 @_ZN2sw7Surface7isDepthENS_6FormatE(i32) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i1 @_ZN2sw7Surface9isStencilENS_6FormatE(i32) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i1 @_ZN2sw7Surface13hasQuadLayoutENS_6FormatE(i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZN2sw7Surface5bytesENS_6FormatE(i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZN2sw7Surface11lockStencilEiiiNS_8AccessorE(%"class.sw::Surface"*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw7Surface13unlockStencilEv(%"class.sw::Surface"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer4blitEPNS_7SurfaceERKNS_10SliceRectTIfEES2_RKNS3_IiEEbbb(%"class.sw::Renderer"*, %"class.sw::Surface"*, %"struct.sw::SliceRectT"* dereferenceable(20), %"class.sw::Surface"*, %"struct.sw::SliceRectT.41"* dereferenceable(20), i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device11stretchCubeEPN2sw7SurfaceES3_(%"class.es2::Device"*, %"class.sw::Surface"*, %"class.sw::Surface"*) local_unnamed_addr #0 align 2 {
  %4 = icmp ne %"class.sw::Surface"* %1, null
  %5 = icmp ne %"class.sw::Surface"* %2, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %116

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 11
  %9 = load i32, i32* %8, align 4
  %10 = tail call zeroext i1 @_ZN2sw7Surface7isDepthENS_6FormatE(i32 %9) #10
  br i1 %10, label %116, label %11

11:                                               ; preds = %7
  %12 = load i32, i32* %8, align 4
  %13 = tail call zeroext i1 @_ZN2sw7Surface9isStencilENS_6FormatE(i32 %12) #10
  br i1 %13, label %116, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 2, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 2, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 2, i32 3
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 2, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 2, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 2, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %16, 0
  %28 = icmp eq i32 %18, 0
  %29 = or i1 %27, %28
  %30 = icmp eq i32 %20, 0
  %31 = or i1 %29, %30
  %32 = icmp eq i32 %22, 0
  %33 = or i1 %31, %32
  %34 = icmp eq i32 %24, 0
  %35 = or i1 %33, %34
  %36 = icmp eq i32 %26, 0
  %37 = or i1 %35, %36
  br i1 %37, label %116, label %38

38:                                               ; preds = %14
  %39 = icmp ne i32 %16, %22
  %40 = icmp ne i32 %18, %24
  %41 = icmp ne i32 %20, %26
  %42 = or i1 %39, %40
  %43 = or i1 %41, %42
  %44 = load i32, i32* %8, align 4
  %45 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 3, i32 11
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %44, %46
  switch i32 %44, label %53 [
    i32 19, label %48
    i32 18, label %50
  ]

48:                                               ; preds = %38
  %49 = icmp eq i32 %46, 18
  br i1 %49, label %52, label %53

50:                                               ; preds = %38
  %51 = icmp eq i32 %46, 19
  br i1 %51, label %52, label %53

52:                                               ; preds = %50, %48
  br label %53

53:                                               ; preds = %38, %48, %52, %50
  %54 = phi i1 [ true, %52 ], [ %47, %50 ], [ %47, %48 ], [ %47, %38 ]
  %55 = phi i1 [ false, %52 ], [ true, %50 ], [ true, %48 ], [ true, %38 ]
  %56 = xor i1 %54, true
  %57 = or i1 %43, %56
  br i1 %57, label %114, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %1, i64 0, i32 3, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"class.sw::Surface", %"class.sw::Surface"* %2, i64 0, i32 3, i32 7
  %62 = load i32, i32* %61, align 4
  %63 = tail call i32 @_ZN2sw7Surface5bytesENS_6FormatE(i32 %44) #10
  %64 = icmp sgt i32 %20, 0
  br i1 %64, label %65, label %116

65:                                               ; preds = %58
  %66 = mul nsw i32 %63, %16
  %67 = bitcast %"class.sw::Surface"* %1 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %68 = bitcast %"class.sw::Surface"* %2 to i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)***
  %69 = icmp sgt i32 %18, 0
  %70 = zext i32 %66 to i64
  %71 = icmp slt i32 %16, 1
  %72 = zext i32 %60 to i64
  %73 = zext i32 %62 to i64
  %74 = bitcast %"class.sw::Surface"* %1 to void (%"class.sw::Surface"*)***
  %75 = bitcast %"class.sw::Surface"* %2 to void (%"class.sw::Surface"*)***
  %76 = or i1 %55, %71
  %77 = zext i32 %16 to i64
  br label %78

78:                                               ; preds = %88, %65
  %79 = phi i32 [ 0, %65 ], [ %95, %88 ]
  %80 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %67, align 8
  %81 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %80, i64 2
  %82 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %81, align 8
  %83 = tail call i8* %82(%"class.sw::Surface"* nonnull %1, i32 0, i32 0, i32 %79, i32 1, i32 0) #10
  %84 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)**, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*** %68, align 8
  %85 = getelementptr inbounds i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %84, i64 2
  %86 = load i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)*, i8* (%"class.sw::Surface"*, i32, i32, i32, i32, i32)** %85, align 8
  %87 = tail call i8* %86(%"class.sw::Surface"* nonnull %2, i32 0, i32 0, i32 %79, i32 3, i32 0) #10
  br i1 %69, label %97, label %88

88:                                               ; preds = %109, %78
  %89 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %74, align 8
  %90 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %89, i64 3
  %91 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %90, align 8
  tail call void %91(%"class.sw::Surface"* nonnull %1) #10
  %92 = load void (%"class.sw::Surface"*)**, void (%"class.sw::Surface"*)*** %75, align 8
  %93 = getelementptr inbounds void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %92, i64 3
  %94 = load void (%"class.sw::Surface"*)*, void (%"class.sw::Surface"*)** %93, align 8
  tail call void %94(%"class.sw::Surface"* nonnull %2) #10
  %95 = add nuw nsw i32 %79, 1
  %96 = icmp eq i32 %95, %20
  br i1 %96, label %116, label %78

97:                                               ; preds = %78, %109
  %98 = phi i32 [ %112, %109 ], [ 0, %78 ]
  %99 = phi i8* [ %111, %109 ], [ %87, %78 ]
  %100 = phi i8* [ %110, %109 ], [ %83, %78 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %70, i1 false)
  br i1 %76, label %109, label %101

101:                                              ; preds = %97, %101
  %102 = phi i64 [ %107, %101 ], [ 0, %97 ]
  %103 = shl i64 %102, 2
  %104 = and i64 %103, 4294967292
  %105 = or i64 %104, 3
  %106 = getelementptr inbounds i8, i8* %99, i64 %105
  store i8 -1, i8* %106, align 1
  %107 = add nuw nsw i64 %102, 1
  %108 = icmp eq i64 %107, %77
  br i1 %108, label %109, label %101

109:                                              ; preds = %101, %97
  %110 = getelementptr inbounds i8, i8* %100, i64 %72
  %111 = getelementptr inbounds i8, i8* %99, i64 %73
  %112 = add nuw nsw i32 %98, 1
  %113 = icmp eq i32 %112, %18
  br i1 %113, label %88, label %97

114:                                              ; preds = %53
  %115 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer6blit3DEPNS_7SurfaceES2_(%"class.sw::Renderer"* %115, %"class.sw::Surface"* nonnull %1, %"class.sw::Surface"* nonnull %2) #10
  br label %116

116:                                              ; preds = %88, %58, %14, %114, %3, %7, %11
  %117 = phi i1 [ false, %11 ], [ false, %7 ], [ false, %3 ], [ true, %114 ], [ true, %14 ], [ true, %58 ], [ true, %88 ]
  ret i1 %117
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer6blit3DEPNS_7SurfaceES2_(%"class.sw::Renderer"*, %"class.sw::Surface"*, %"class.sw::Surface"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3es26Device12bindViewportEv(%"class.es2::Device"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.sw::RectT", align 4
  %3 = alloca %"struct.sw::RectT", align 4
  %4 = alloca %"struct.sw::Viewport", align 4
  %5 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %157, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %157, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 4
  %15 = load i8, i8* %14, align 16, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %35, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 0
  %19 = load i32, i32* %18, align 16
  %20 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp slt i32 %19, %21
  br i1 %22, label %23, label %157

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 3, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %157

29:                                               ; preds = %23
  %30 = bitcast %"struct.sw::RectT"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #11
  %31 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 0
  %32 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 1
  %33 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 2
  %34 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %2, i64 0, i32 3
  store i32 %19, i32* %31, align 4
  store i32 %21, i32* %33, align 4
  store i32 %25, i32* %32, align 4
  store i32 %27, i32* %34, align 4
  br label %127

35:                                               ; preds = %13
  %36 = bitcast %"struct.sw::RectT"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #11
  %37 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %3, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %3, i64 0, i32 1
  %39 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %3, i64 0, i32 2
  %40 = getelementptr inbounds %"struct.sw::RectT", %"struct.sw::RectT"* %3, i64 0, i32 3
  %41 = getelementptr inbounds %"struct.es2::Viewport", %"struct.es2::Viewport"* %5, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  store i32 %42, i32* %37, align 4
  %43 = add i32 %42, %7
  store i32 %43, i32* %39, align 4
  %44 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 1
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %38, align 4
  %46 = add i32 %45, %11
  store i32 %46, i32* %40, align 4
  br label %51

47:                                               ; preds = %73
  %48 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 14
  %49 = load %"class.egl::Image"*, %"class.egl::Image"** %48, align 8
  %50 = icmp eq %"class.egl::Image"* %49, null
  br i1 %50, label %93, label %80

51:                                               ; preds = %73, %35
  %52 = phi i32 [ %46, %35 ], [ %74, %73 ]
  %53 = phi i32 [ %45, %35 ], [ %75, %73 ]
  %54 = phi i32 [ %43, %35 ], [ %76, %73 ]
  %55 = phi i32 [ %42, %35 ], [ %77, %73 ]
  %56 = phi i64 [ 0, %35 ], [ %78, %73 ]
  %57 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 13, i64 %56
  %58 = load %"class.egl::Image"*, %"class.egl::Image"** %57, align 8
  %59 = icmp eq %"class.egl::Image"* %58, null
  br i1 %59, label %73, label %60

60:                                               ; preds = %51
  %61 = icmp sgt i32 %55, 0
  %62 = select i1 %61, i32 %55, i32 0
  store i32 %62, i32* %37, align 4
  %63 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %58, i64 0, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %54, %64
  %66 = select i1 %65, i32 %54, i32 %64
  store i32 %66, i32* %39, align 4
  %67 = icmp sgt i32 %53, 0
  %68 = select i1 %67, i32 %53, i32 0
  store i32 %68, i32* %38, align 4
  %69 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %58, i64 0, i32 4
  %70 = load i32, i32* %69, align 8
  %71 = icmp slt i32 %52, %70
  %72 = select i1 %71, i32 %52, i32 %70
  store i32 %72, i32* %40, align 4
  br label %73

73:                                               ; preds = %51, %60
  %74 = phi i32 [ %52, %51 ], [ %72, %60 ]
  %75 = phi i32 [ %53, %51 ], [ %68, %60 ]
  %76 = phi i32 [ %54, %51 ], [ %66, %60 ]
  %77 = phi i32 [ %55, %51 ], [ %62, %60 ]
  %78 = add nuw nsw i64 %56, 1
  %79 = icmp eq i64 %78, 8
  br i1 %79, label %47, label %51

80:                                               ; preds = %47
  %81 = icmp sgt i32 %77, 0
  %82 = select i1 %81, i32 %77, i32 0
  store i32 %82, i32* %37, align 4
  %83 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %49, i64 0, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %76, %84
  %86 = select i1 %85, i32 %76, i32 %84
  store i32 %86, i32* %39, align 4
  %87 = icmp sgt i32 %75, 0
  %88 = select i1 %87, i32 %75, i32 0
  store i32 %88, i32* %38, align 4
  %89 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %49, i64 0, i32 4
  %90 = load i32, i32* %89, align 8
  %91 = icmp slt i32 %74, %90
  %92 = select i1 %91, i32 %74, i32 %90
  store i32 %92, i32* %40, align 4
  br label %93

93:                                               ; preds = %47, %80
  %94 = phi i32 [ %74, %47 ], [ %92, %80 ]
  %95 = phi i32 [ %75, %47 ], [ %88, %80 ]
  %96 = phi i32 [ %76, %47 ], [ %86, %80 ]
  %97 = phi i32 [ %77, %47 ], [ %82, %80 ]
  %98 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 15
  %99 = load %"class.egl::Image"*, %"class.egl::Image"** %98, align 16
  %100 = icmp eq %"class.egl::Image"* %99, null
  br i1 %100, label %114, label %101

101:                                              ; preds = %93
  %102 = icmp sgt i32 %97, 0
  %103 = select i1 %102, i32 %97, i32 0
  store i32 %103, i32* %37, align 4
  %104 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %99, i64 0, i32 3
  %105 = load i32, i32* %104, align 4
  %106 = icmp slt i32 %96, %105
  %107 = select i1 %106, i32 %96, i32 %105
  store i32 %107, i32* %39, align 4
  %108 = icmp sgt i32 %95, 0
  %109 = select i1 %108, i32 %95, i32 0
  store i32 %109, i32* %38, align 4
  %110 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %99, i64 0, i32 4
  %111 = load i32, i32* %110, align 8
  %112 = icmp slt i32 %94, %111
  %113 = select i1 %112, i32 %94, i32 %111
  store i32 %113, i32* %40, align 4
  br label %114

114:                                              ; preds = %93, %101
  %115 = phi i32 [ %94, %93 ], [ %113, %101 ]
  %116 = phi i32 [ %95, %93 ], [ %109, %101 ]
  %117 = phi i32 [ %96, %93 ], [ %107, %101 ]
  %118 = phi i32 [ %97, %93 ], [ %103, %101 ]
  %119 = icmp sgt i32 %118, 0
  %120 = select i1 %119, i32 %118, i32 0
  store i32 %120, i32* %37, align 4
  %121 = icmp sgt i32 %117, 0
  %122 = select i1 %121, i32 %117, i32 0
  store i32 %122, i32* %39, align 4
  %123 = icmp sgt i32 %116, 0
  %124 = select i1 %123, i32 %116, i32 0
  store i32 %124, i32* %38, align 4
  %125 = icmp sgt i32 %115, 0
  %126 = select i1 %125, i32 %115, i32 0
  store i32 %126, i32* %40, align 4
  br label %127

127:                                              ; preds = %114, %29
  %128 = phi %"struct.sw::RectT"* [ %3, %114 ], [ %2, %29 ]
  %129 = phi i8* [ %36, %114 ], [ %30, %29 ]
  %130 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  call void @_ZN2sw8Renderer10setScissorERKNS_5RectTIiEE(%"class.sw::Renderer"* %130, %"struct.sw::RectT"* nonnull dereferenceable(16) %128) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #11
  %131 = bitcast %"struct.sw::Viewport"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #11
  %132 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 0
  %133 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 1
  %134 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 2
  %135 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 3
  %136 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 4
  %137 = getelementptr inbounds %"struct.sw::Viewport", %"struct.sw::Viewport"* %4, i64 0, i32 5
  %138 = getelementptr inbounds %"struct.es2::Viewport", %"struct.es2::Viewport"* %5, i64 0, i32 0
  %139 = load i32, i32* %138, align 8
  %140 = sitofp i32 %139 to float
  store float %140, float* %132, align 4
  %141 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = sitofp i32 %142 to float
  store float %143, float* %133, align 4
  %144 = load i32, i32* %6, align 8
  %145 = uitofp i32 %144 to float
  store float %145, float* %134, align 4
  %146 = load i32, i32* %10, align 4
  %147 = uitofp i32 %146 to float
  store float %147, float* %135, align 4
  %148 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 4
  %149 = bitcast float* %148 to i32*
  %150 = load i32, i32* %149, align 8
  %151 = bitcast float* %136 to i32*
  store i32 %150, i32* %151, align 4
  %152 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 2, i32 5
  %153 = bitcast float* %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = bitcast float* %137 to i32*
  store i32 %154, i32* %155, align 4
  %156 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  call void @_ZN2sw8Renderer11setViewportERKNS_8ViewportE(%"class.sw::Renderer"* %156, %"struct.sw::Viewport"* nonnull dereferenceable(24) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #11
  br label %157

157:                                              ; preds = %17, %23, %1, %9, %127
  %158 = phi i1 [ true, %127 ], [ false, %9 ], [ false, %1 ], [ false, %23 ], [ false, %17 ]
  ret i1 %158
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device19bindShaderConstantsEv(%"class.es2::Device"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 5
  %7 = load %"class.sw::PixelShader"*, %"class.sw::PixelShader"** %6, align 8
  %8 = icmp eq %"class.sw::PixelShader"* %7, null
  br i1 %8, label %24, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  %15 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 11, i64 0, i64 0
  tail call void @_ZN2sw8Renderer23setPixelShaderConstantFEjPKfj(%"class.sw::Renderer"* %14, i32 0, float* %15, i32 %11) #10
  %16 = load %"class.sw::PixelShader"*, %"class.sw::PixelShader"** %6, align 8
  br label %17

17:                                               ; preds = %9, %13
  %18 = phi %"class.sw::PixelShader"* [ %7, %9 ], [ %16, %13 ]
  %19 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer14setPixelShaderEPKNS_11PixelShaderE(%"class.sw::Renderer"* %19, %"class.sw::PixelShader"* %18) #10
  %20 = bitcast %"class.sw::PixelShader"** %6 to %"class.sw::Shader"**
  %21 = load %"class.sw::Shader"*, %"class.sw::Shader"** %20, align 8
  %22 = getelementptr inbounds %"class.sw::Shader", %"class.sw::Shader"* %21, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %10, align 4
  br label %25

24:                                               ; preds = %5
  store %"class.sw::PixelShader"* null, %"class.sw::PixelShader"** %6, align 8
  store i8 1, i8* %2, align 8
  br label %25

25:                                               ; preds = %24, %17
  store i8 0, i8* %2, align 8
  br label %26

26:                                               ; preds = %1, %25
  %27 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 9
  %28 = load i8, i8* %27, align 16, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %51, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 6
  %32 = load %"class.sw::VertexShader"*, %"class.sw::VertexShader"** %31, align 16
  %33 = icmp eq %"class.sw::VertexShader"* %32, null
  br i1 %33, label %49, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 10
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  %40 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 12, i64 0, i64 0
  tail call void @_ZN2sw8Renderer24setVertexShaderConstantFEjPKfj(%"class.sw::Renderer"* %39, i32 0, float* %40, i32 %36) #10
  %41 = load %"class.sw::VertexShader"*, %"class.sw::VertexShader"** %31, align 16
  br label %42

42:                                               ; preds = %34, %38
  %43 = phi %"class.sw::VertexShader"* [ %32, %34 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer15setVertexShaderEPKNS_12VertexShaderE(%"class.sw::Renderer"* %44, %"class.sw::VertexShader"* %43) #10
  %45 = bitcast %"class.sw::VertexShader"** %31 to %"class.sw::Shader"**
  %46 = load %"class.sw::Shader"*, %"class.sw::Shader"** %45, align 16
  %47 = getelementptr inbounds %"class.sw::Shader", %"class.sw::Shader"* %46, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  store i32 %48, i32* %35, align 4
  br label %50

49:                                               ; preds = %30
  store %"class.sw::VertexShader"* null, %"class.sw::VertexShader"** %31, align 16
  store i8 1, i8* %27, align 16
  br label %50

50:                                               ; preds = %49, %42
  store i8 0, i8* %27, align 16
  br label %51

51:                                               ; preds = %26, %50
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer23setPixelShaderConstantFEjPKfj(%"class.sw::Renderer"*, i32, float*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer14setPixelShaderEPKNS_11PixelShaderE(%"class.sw::Renderer"*, %"class.sw::PixelShader"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer24setVertexShaderConstantFEjPKfj(%"class.sw::Renderer"*, i32, float*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer15setVertexShaderEPKNS_12VertexShaderE(%"class.sw::Renderer"*, %"class.sw::VertexShader"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer10setScissorERKNS_5RectTIiEE(%"class.sw::Renderer"*, %"struct.sw::RectT"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw8Renderer11setViewportERKNS_8ViewportE(%"class.sw::Renderer"*, %"struct.sw::Viewport"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #9

; Function Attrs: optsize
declare zeroext i1 @_ZN3es214FloatFitsInIntEf(float) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es26Device6finishEv(%"class.es2::Device"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::Device", %"class.es2::Device"* %0, i64 0, i32 0
  tail call void @_ZN2sw8Renderer11synchronizeEv(%"class.sw::Renderer"* %2) #10
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer11synchronizeEv(%"class.sw::Renderer"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #9

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind optsize }
attributes #11 = { nounwind }
attributes #12 = { optsize }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
