; ModuleID = '../../third_party/skia/src/opts/SkOpts_ssse3.cpp'
source_filename = "../../third_party/skia/src/opts/SkOpts_ssse3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkXfermode = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, {}* }
%class.SkImage_Base = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%"class.(anonymous namespace)::Sk4pxXfermode" = type { %class.SkXfermode.base, [4 x i8] }
%class.SkXfermode.base = type { %class.SkRefCnt.base }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.(anonymous namespace)::Sk4px" = type { %"class.(anonymous namespace)::SkNx" }
%"class.(anonymous namespace)::SkNx" = type { <2 x i64> }
%"class.(anonymous namespace)::Sk4pxXfermode.6" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.8" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.10" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.12" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.14" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.16" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.18" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.20" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.22" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.24" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.26" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.28" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.30" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.32" = type { %class.SkXfermode.base, [4 x i8] }

$_ZN5ssse315create_xfermodeE11SkBlendMode = comdat any

$_ZN5ssse316blit_mask_d32_a8EPjmPKhmjii = comdat any

$_ZN5ssse312RGBA_to_BGRAEPjPKji = comdat any

$_ZN5ssse312RGBA_to_rgbAEPjPKji = comdat any

$_ZN5ssse312RGBA_to_bgrAEPjPKji = comdat any

$_ZN5ssse311RGB_to_RGB1EPjPKhi = comdat any

$_ZN5ssse311RGB_to_BGR1EPjPKhi = comdat any

$_ZN5ssse312gray_to_RGB1EPjPKhi = comdat any

$_ZN5ssse313grayA_to_RGBAEPjPKhi = comdat any

$_ZN5ssse313grayA_to_rgbAEPjPKhi = comdat any

$_ZN5ssse321inverted_CMYK_to_RGB1EPjPKji = comdat any

$_ZN5ssse321inverted_CMYK_to_BGR1EPjPKji = comdat any

$_ZN5ssse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZN6SkOpts15create_xfermodeE = external local_unnamed_addr global %class.SkXfermode* (i32)*, align 8
@_ZN6SkOpts16blit_mask_d32_a8E = external local_unnamed_addr global void (i32*, i64, i8*, i64, i32, i32, i32)*, align 8
@_ZN6SkOpts12RGBA_to_BGRAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_rgbAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_bgrAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts11RGB_to_RGB1E = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts11RGB_to_BGR1E = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts12gray_to_RGB1E = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts13grayA_to_RGBAE = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts13grayA_to_rgbAE = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts21inverted_CMYK_to_RGB1E = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts21inverted_CMYK_to_BGR1E = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts23S32_alpha_D32_filter_DXE = external local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.6"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.6"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.8"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.8"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.10"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.10"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.12"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.12"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.14"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.14"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.16"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.16"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.18"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.18"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.20"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.20"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.22"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.22"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.24"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.24"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.26"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.26"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.28"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.28"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.30"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.30"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.32"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.32"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEE6xfer32EPjPKjiPKh to i8*)] }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkOpts10Init_ssse3Ev() local_unnamed_addr #0 {
  store %class.SkXfermode* (i32)* @_ZN5ssse315create_xfermodeE11SkBlendMode, %class.SkXfermode* (i32)** @_ZN6SkOpts15create_xfermodeE, align 8
  store void (i32*, i64, i8*, i64, i32, i32, i32)* @_ZN5ssse316blit_mask_d32_a8EPjmPKhmjii, void (i32*, i64, i8*, i64, i32, i32, i32)** @_ZN6SkOpts16blit_mask_d32_a8E, align 8
  store void (i32*, i32*, i32)* @_ZN5ssse312RGBA_to_BGRAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_BGRAE, align 8
  store void (i32*, i32*, i32)* @_ZN5ssse312RGBA_to_rgbAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_rgbAE, align 8
  store void (i32*, i32*, i32)* @_ZN5ssse312RGBA_to_bgrAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_bgrAE, align 8
  store void (i32*, i8*, i32)* @_ZN5ssse311RGB_to_RGB1EPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts11RGB_to_RGB1E, align 8
  store void (i32*, i8*, i32)* @_ZN5ssse311RGB_to_BGR1EPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts11RGB_to_BGR1E, align 8
  store void (i32*, i8*, i32)* @_ZN5ssse312gray_to_RGB1EPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts12gray_to_RGB1E, align 8
  store void (i32*, i8*, i32)* @_ZN5ssse313grayA_to_RGBAEPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts13grayA_to_RGBAE, align 8
  store void (i32*, i8*, i32)* @_ZN5ssse313grayA_to_rgbAEPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts13grayA_to_rgbAE, align 8
  store void (i32*, i32*, i32)* @_ZN5ssse321inverted_CMYK_to_RGB1EPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts21inverted_CMYK_to_RGB1E, align 8
  store void (i32*, i32*, i32)* @_ZN5ssse321inverted_CMYK_to_BGR1EPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts21inverted_CMYK_to_BGR1E, align 8
  store void (%struct.SkBitmapProcState*, i32*, i32, i32*)* @_ZN5ssse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** @_ZN6SkOpts23S32_alpha_D32_filter_DXE, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %class.SkXfermode* @_ZN5ssse315create_xfermodeE11SkBlendMode(i32) #1 comdat {
  switch i32 %0, label %23 [
    i32 0, label %16
    i32 1, label %2
    i32 2, label %3
    i32 3, label %4
    i32 4, label %5
    i32 5, label %6
    i32 6, label %7
    i32 7, label %8
    i32 8, label %9
    i32 9, label %10
    i32 10, label %11
    i32 11, label %12
    i32 12, label %13
    i32 13, label %14
    i32 14, label %15
  ]

2:                                                ; preds = %1
  br label %16

3:                                                ; preds = %1
  br label %16

4:                                                ; preds = %1
  br label %16

5:                                                ; preds = %1
  br label %16

6:                                                ; preds = %1
  br label %16

7:                                                ; preds = %1
  br label %16

8:                                                ; preds = %1
  br label %16

9:                                                ; preds = %1
  br label %16

10:                                               ; preds = %1
  br label %16

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  br label %16

13:                                               ; preds = %1
  br label %16

14:                                               ; preds = %1
  br label %16

15:                                               ; preds = %1
  br label %16

16:                                               ; preds = %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15
  %17 = phi i32 (...)** [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %15 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %14 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %13 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %12 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %11 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %10 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %9 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %8 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %7 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %6 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %5 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %4 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %3 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %2 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %1 ]
  %18 = tail call i8* @_Znwm(i64 16) #12
  %19 = getelementptr inbounds i8, i8* %18, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 4
  %21 = bitcast i8* %18 to i32 (...)***
  store i32 (...)** %17, i32 (...)*** %21, align 8
  %22 = bitcast i8* %18 to %class.SkXfermode*
  br label %23

23:                                               ; preds = %16, %1
  %24 = phi %class.SkXfermode* [ null, %1 ], [ %22, %16 ]
  ret %class.SkXfermode* %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse316blit_mask_d32_a8EPjmPKhmjii(i32*, i64, i8*, i64, i32, i32, i32) #2 comdat {
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = icmp eq i32 %4, -16777216
  br i1 %11, label %12, label %178

12:                                               ; preds = %7
  %13 = icmp sgt i32 %6, 0
  br i1 %13, label %14, label %621

14:                                               ; preds = %12
  %15 = icmp sgt i32 %5, 0
  %16 = lshr i64 %1, 2
  %17 = bitcast <2 x i64>* %10 to i8*
  %18 = bitcast <2 x i64>* %10 to i32*
  %19 = bitcast <2 x i64>* %10 to <16 x i8>*
  br label %20

20:                                               ; preds = %174, %14
  %21 = phi i32 [ %6, %14 ], [ %24, %174 ]
  %22 = phi i32* [ %0, %14 ], [ %175, %174 ]
  %23 = phi i8* [ %2, %14 ], [ %176, %174 ]
  %24 = add nsw i32 %21, -1
  br i1 %15, label %25, label %174

25:                                               ; preds = %20, %30
  %26 = phi i32 [ %85, %30 ], [ %5, %20 ]
  %27 = phi i8* [ %84, %30 ], [ %23, %20 ]
  %28 = phi i32* [ %83, %30 ], [ %22, %20 ]
  %29 = icmp sgt i32 %26, 7
  br i1 %29, label %30, label %87

30:                                               ; preds = %25
  %31 = bitcast i32* %28 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 4
  %33 = bitcast i8* %27 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = insertelement <4 x i32> undef, i32 %34, i32 0
  %36 = bitcast <4 x i32> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %38 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %32, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = xor <16 x i8> %37, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = shufflevector <16 x i8> %42, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = mul <8 x i16> %45, %40
  %48 = mul <8 x i16> %46, %41
  %49 = add <8 x i16> %47, %40
  %50 = add <8 x i16> %48, %41
  %51 = lshr <8 x i16> %49, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %52 = lshr <8 x i16> %50, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %53 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %51, <8 x i16> %52) #13
  %54 = and <16 x i8> %37, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %55 = add <16 x i8> %54, %53
  %56 = getelementptr inbounds i32, i32* %28, i64 4
  %57 = bitcast i32* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 4
  %59 = getelementptr inbounds i8, i8* %27, i64 4
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 1
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = bitcast <4 x i32> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %65 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %58, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = bitcast <16 x i8> %66 to <8 x i16>
  %69 = xor <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %72, %67
  %75 = mul <8 x i16> %73, %68
  %76 = add <8 x i16> %74, %67
  %77 = add <8 x i16> %75, %68
  %78 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %78, <8 x i16> %79) #13
  %81 = and <16 x i8> %64, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %82 = add <16 x i8> %81, %80
  store <16 x i8> %55, <16 x i8>* %31, align 4
  store <16 x i8> %82, <16 x i8>* %57, align 4
  %83 = getelementptr inbounds i32, i32* %28, i64 8
  %84 = getelementptr inbounds i8, i8* %27, i64 8
  %85 = add nsw i32 %26, -8
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %25, label %174

87:                                               ; preds = %25
  %88 = icmp sgt i32 %26, 3
  br i1 %88, label %89, label %118

89:                                               ; preds = %87
  %90 = bitcast i32* %28 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 4
  %92 = bitcast i8* %27 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = insertelement <4 x i32> undef, i32 %93, i32 0
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %97 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = bitcast <16 x i8> %97 to <8 x i16>
  %100 = bitcast <16 x i8> %98 to <8 x i16>
  %101 = xor <16 x i8> %96, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %101, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = bitcast <16 x i8> %102 to <8 x i16>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = mul <8 x i16> %104, %99
  %107 = mul <8 x i16> %105, %100
  %108 = add <8 x i16> %106, %99
  %109 = add <8 x i16> %107, %100
  %110 = lshr <8 x i16> %108, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %111 = lshr <8 x i16> %109, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %112 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %110, <8 x i16> %111) #13
  %113 = and <16 x i8> %96, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %114 = add <16 x i8> %113, %112
  store <16 x i8> %114, <16 x i8>* %90, align 4
  %115 = getelementptr inbounds i32, i32* %28, i64 4
  %116 = getelementptr inbounds i8, i8* %27, i64 4
  %117 = add nsw i32 %26, -4
  br label %118

118:                                              ; preds = %89, %87
  %119 = phi i32* [ %115, %89 ], [ %28, %87 ]
  %120 = phi i8* [ %116, %89 ], [ %27, %87 ]
  %121 = phi i32 [ %117, %89 ], [ %26, %87 ]
  %122 = icmp sgt i32 %121, 1
  br i1 %122, label %123, label %150

123:                                              ; preds = %118
  %124 = bitcast i32* %119 to i64*
  %125 = load i64, i64* %124, align 4
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = bitcast i8* %120 to i16*
  %128 = load i16, i16* %127, align 1
  %129 = zext i16 %128 to i32
  %130 = insertelement <4 x i32> undef, i32 %129, i32 0
  %131 = bitcast <4 x i32> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %133 = bitcast <2 x i64> %126 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = xor <16 x i8> %132, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %137 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = mul <8 x i16> %138, %135
  %140 = add <8 x i16> %139, %135
  %141 = lshr <8 x i16> %140, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %142 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> undef) #13
  %143 = and <16 x i8> %132, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %144 = add <16 x i8> %143, %142
  %145 = bitcast <16 x i8> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  store i64 %146, i64* %124, align 4
  %147 = getelementptr inbounds i32, i32* %119, i64 2
  %148 = getelementptr inbounds i8, i8* %120, i64 2
  %149 = add nsw i32 %121, -2
  br label %150

150:                                              ; preds = %123, %118
  %151 = phi i32* [ %147, %123 ], [ %119, %118 ]
  %152 = phi i8* [ %148, %123 ], [ %120, %118 ]
  %153 = phi i32 [ %149, %123 ], [ %121, %118 ]
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %155, label %174

155:                                              ; preds = %150
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %10, align 16
  %156 = load i32, i32* %151, align 4
  store i32 %156, i32* %18, align 16
  %157 = load <16 x i8>, <16 x i8>* %19, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17)
  %158 = load i8, i8* %152, align 1
  %159 = insertelement <16 x i8> undef, i8 %158, i32 0
  %160 = shufflevector <16 x i8> %159, <16 x i8> undef, <16 x i32> zeroinitializer
  %161 = shufflevector <16 x i8> %157, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %162 = bitcast <16 x i8> %161 to <8 x i16>
  %163 = xor <16 x i8> %160, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %164 = shufflevector <16 x i8> %163, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = bitcast <16 x i8> %164 to <8 x i16>
  %166 = mul <8 x i16> %165, %162
  %167 = add <8 x i16> %166, %162
  %168 = lshr <8 x i16> %167, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %169 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %168, <8 x i16> undef) #13
  %170 = and <16 x i8> %160, <i8 0, i8 0, i8 0, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %171 = add <16 x i8> %170, %169
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = extractelement <4 x i32> %172, i32 0
  store i32 %173, i32* %151, align 4
  br label %174

174:                                              ; preds = %30, %155, %150, %20
  %175 = getelementptr inbounds i32, i32* %22, i64 %16
  %176 = getelementptr inbounds i8, i8* %23, i64 %3
  %177 = icmp sgt i32 %24, 0
  br i1 %177, label %20, label %621

178:                                              ; preds = %7
  %179 = icmp ugt i32 %4, -16777217
  %180 = tail call i32 @_Z18SkPreMultiplyColorj(i32 %4) #13
  %181 = icmp sgt i32 %6, 0
  br i1 %179, label %182, label %394

182:                                              ; preds = %178
  br i1 %181, label %183, label %621

183:                                              ; preds = %182
  %184 = insertelement <4 x i32> undef, i32 %180, i32 0
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> zeroinitializer
  %186 = icmp sgt i32 %5, 0
  %187 = bitcast <4 x i32> %185 to <16 x i8>
  %188 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %189 = shufflevector <16 x i8> %187, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = bitcast <16 x i8> %188 to <8 x i16>
  %191 = bitcast <16 x i8> %189 to <8 x i16>
  %192 = lshr i64 %1, 2
  %193 = bitcast <2 x i64>* %8 to i8*
  %194 = bitcast <2 x i64>* %8 to i32*
  %195 = bitcast <2 x i64>* %8 to <16 x i8>*
  br label %196

196:                                              ; preds = %390, %183
  %197 = phi i32 [ %6, %183 ], [ %200, %390 ]
  %198 = phi i32* [ %0, %183 ], [ %391, %390 ]
  %199 = phi i8* [ %2, %183 ], [ %392, %390 ]
  %200 = add nsw i32 %197, -1
  br i1 %186, label %201, label %390

201:                                              ; preds = %196, %206
  %202 = phi i32 [ %281, %206 ], [ %5, %196 ]
  %203 = phi i8* [ %280, %206 ], [ %199, %196 ]
  %204 = phi i32* [ %279, %206 ], [ %198, %196 ]
  %205 = icmp sgt i32 %202, 7
  br i1 %205, label %206, label %283

206:                                              ; preds = %201
  %207 = bitcast i32* %204 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 4
  %209 = bitcast i8* %203 to i32*
  %210 = load i32, i32* %209, align 1
  %211 = insertelement <4 x i32> undef, i32 %210, i32 0
  %212 = bitcast <4 x i32> %211 to <16 x i8>
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %214 = shufflevector <16 x i8> %213, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %215 = shufflevector <16 x i8> %213, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %216 = bitcast <16 x i8> %214 to <8 x i16>
  %217 = bitcast <16 x i8> %215 to <8 x i16>
  %218 = mul <8 x i16> %216, %190
  %219 = mul <8 x i16> %217, %191
  %220 = add <8 x i16> %218, %190
  %221 = add <8 x i16> %219, %191
  %222 = lshr <8 x i16> %220, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %223 = lshr <8 x i16> %221, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %224 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> %223) #13
  %225 = shufflevector <16 x i8> %208, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = shufflevector <16 x i8> %208, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %227 = bitcast <16 x i8> %225 to <8 x i16>
  %228 = bitcast <16 x i8> %226 to <8 x i16>
  %229 = xor <16 x i8> %213, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %230 = shufflevector <16 x i8> %229, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %231 = shufflevector <16 x i8> %229, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %232 = bitcast <16 x i8> %230 to <8 x i16>
  %233 = bitcast <16 x i8> %231 to <8 x i16>
  %234 = mul <8 x i16> %232, %227
  %235 = mul <8 x i16> %233, %228
  %236 = add <8 x i16> %234, %227
  %237 = add <8 x i16> %235, %228
  %238 = lshr <8 x i16> %236, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %239 = lshr <8 x i16> %237, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %240 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %238, <8 x i16> %239) #13
  %241 = add <16 x i8> %240, %224
  %242 = getelementptr inbounds i32, i32* %204, i64 4
  %243 = bitcast i32* %242 to <16 x i8>*
  %244 = load <16 x i8>, <16 x i8>* %243, align 4
  %245 = getelementptr inbounds i8, i8* %203, i64 4
  %246 = bitcast i8* %245 to i32*
  %247 = load i32, i32* %246, align 1
  %248 = insertelement <4 x i32> undef, i32 %247, i32 0
  %249 = bitcast <4 x i32> %248 to <16 x i8>
  %250 = shufflevector <16 x i8> %249, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %251 = shufflevector <16 x i8> %250, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %252 = shufflevector <16 x i8> %250, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %253 = bitcast <16 x i8> %251 to <8 x i16>
  %254 = bitcast <16 x i8> %252 to <8 x i16>
  %255 = mul <8 x i16> %253, %190
  %256 = mul <8 x i16> %254, %191
  %257 = add <8 x i16> %255, %190
  %258 = add <8 x i16> %256, %191
  %259 = lshr <8 x i16> %257, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %260 = lshr <8 x i16> %258, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %261 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %259, <8 x i16> %260) #13
  %262 = shufflevector <16 x i8> %244, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %263 = shufflevector <16 x i8> %244, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %264 = bitcast <16 x i8> %262 to <8 x i16>
  %265 = bitcast <16 x i8> %263 to <8 x i16>
  %266 = xor <16 x i8> %250, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %267 = shufflevector <16 x i8> %266, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %268 = shufflevector <16 x i8> %266, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %269 = bitcast <16 x i8> %267 to <8 x i16>
  %270 = bitcast <16 x i8> %268 to <8 x i16>
  %271 = mul <8 x i16> %269, %264
  %272 = mul <8 x i16> %270, %265
  %273 = add <8 x i16> %271, %264
  %274 = add <8 x i16> %272, %265
  %275 = lshr <8 x i16> %273, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %276 = lshr <8 x i16> %274, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %277 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %275, <8 x i16> %276) #13
  %278 = add <16 x i8> %277, %261
  store <16 x i8> %241, <16 x i8>* %207, align 4
  store <16 x i8> %278, <16 x i8>* %243, align 4
  %279 = getelementptr inbounds i32, i32* %204, i64 8
  %280 = getelementptr inbounds i8, i8* %203, i64 8
  %281 = add nsw i32 %202, -8
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %201, label %390

283:                                              ; preds = %201
  %284 = icmp sgt i32 %202, 3
  br i1 %284, label %285, label %324

285:                                              ; preds = %283
  %286 = bitcast i32* %204 to <16 x i8>*
  %287 = load <16 x i8>, <16 x i8>* %286, align 4
  %288 = bitcast i8* %203 to i32*
  %289 = load i32, i32* %288, align 1
  %290 = insertelement <4 x i32> undef, i32 %289, i32 0
  %291 = bitcast <4 x i32> %290 to <16 x i8>
  %292 = shufflevector <16 x i8> %291, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %293 = shufflevector <16 x i8> %292, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %294 = shufflevector <16 x i8> %292, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %295 = bitcast <16 x i8> %293 to <8 x i16>
  %296 = bitcast <16 x i8> %294 to <8 x i16>
  %297 = mul <8 x i16> %295, %190
  %298 = mul <8 x i16> %296, %191
  %299 = add <8 x i16> %297, %190
  %300 = add <8 x i16> %298, %191
  %301 = lshr <8 x i16> %299, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %302 = lshr <8 x i16> %300, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %303 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %301, <8 x i16> %302) #13
  %304 = shufflevector <16 x i8> %287, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %305 = shufflevector <16 x i8> %287, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = bitcast <16 x i8> %304 to <8 x i16>
  %307 = bitcast <16 x i8> %305 to <8 x i16>
  %308 = xor <16 x i8> %292, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %309 = shufflevector <16 x i8> %308, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = shufflevector <16 x i8> %308, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %311 = bitcast <16 x i8> %309 to <8 x i16>
  %312 = bitcast <16 x i8> %310 to <8 x i16>
  %313 = mul <8 x i16> %311, %306
  %314 = mul <8 x i16> %312, %307
  %315 = add <8 x i16> %313, %306
  %316 = add <8 x i16> %314, %307
  %317 = lshr <8 x i16> %315, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %318 = lshr <8 x i16> %316, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %319 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %317, <8 x i16> %318) #13
  %320 = add <16 x i8> %319, %303
  store <16 x i8> %320, <16 x i8>* %286, align 4
  %321 = getelementptr inbounds i32, i32* %204, i64 4
  %322 = getelementptr inbounds i8, i8* %203, i64 4
  %323 = add nsw i32 %202, -4
  br label %324

324:                                              ; preds = %285, %283
  %325 = phi i32* [ %321, %285 ], [ %204, %283 ]
  %326 = phi i8* [ %322, %285 ], [ %203, %283 ]
  %327 = phi i32 [ %323, %285 ], [ %202, %283 ]
  %328 = icmp sgt i32 %327, 1
  br i1 %328, label %329, label %361

329:                                              ; preds = %324
  %330 = bitcast i32* %325 to i64*
  %331 = load i64, i64* %330, align 4
  %332 = insertelement <2 x i64> undef, i64 %331, i32 0
  %333 = bitcast i8* %326 to i16*
  %334 = load i16, i16* %333, align 1
  %335 = zext i16 %334 to i32
  %336 = insertelement <4 x i32> undef, i32 %335, i32 0
  %337 = bitcast <4 x i32> %336 to <16 x i8>
  %338 = shufflevector <16 x i8> %337, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %339 = shufflevector <16 x i8> %338, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %340 = bitcast <16 x i8> %339 to <8 x i16>
  %341 = mul <8 x i16> %340, %190
  %342 = add <8 x i16> %341, %190
  %343 = lshr <8 x i16> %342, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %344 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %343, <8 x i16> undef) #13
  %345 = bitcast <2 x i64> %332 to <16 x i8>
  %346 = shufflevector <16 x i8> %345, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %347 = bitcast <16 x i8> %346 to <8 x i16>
  %348 = xor <16 x i8> %338, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %349 = shufflevector <16 x i8> %348, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %350 = bitcast <16 x i8> %349 to <8 x i16>
  %351 = mul <8 x i16> %350, %347
  %352 = add <8 x i16> %351, %347
  %353 = lshr <8 x i16> %352, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %354 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %353, <8 x i16> undef) #13
  %355 = add <16 x i8> %354, %344
  %356 = bitcast <16 x i8> %355 to <2 x i64>
  %357 = extractelement <2 x i64> %356, i32 0
  store i64 %357, i64* %330, align 4
  %358 = getelementptr inbounds i32, i32* %325, i64 2
  %359 = getelementptr inbounds i8, i8* %326, i64 2
  %360 = add nsw i32 %327, -2
  br label %361

361:                                              ; preds = %329, %324
  %362 = phi i32* [ %358, %329 ], [ %325, %324 ]
  %363 = phi i8* [ %359, %329 ], [ %326, %324 ]
  %364 = phi i32 [ %360, %329 ], [ %327, %324 ]
  %365 = icmp sgt i32 %364, 0
  br i1 %365, label %366, label %390

366:                                              ; preds = %361
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %193)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %8, align 16
  %367 = load i32, i32* %362, align 4
  store i32 %367, i32* %194, align 16
  %368 = load <16 x i8>, <16 x i8>* %195, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %193)
  %369 = load i8, i8* %363, align 1
  %370 = insertelement <16 x i8> undef, i8 %369, i32 0
  %371 = shufflevector <16 x i8> %370, <16 x i8> undef, <16 x i32> zeroinitializer
  %372 = shufflevector <16 x i8> %371, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %373 = bitcast <16 x i8> %372 to <8 x i16>
  %374 = mul <8 x i16> %373, %190
  %375 = add <8 x i16> %374, %190
  %376 = lshr <8 x i16> %375, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %377 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %376, <8 x i16> undef) #13
  %378 = shufflevector <16 x i8> %368, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %379 = bitcast <16 x i8> %378 to <8 x i16>
  %380 = xor <16 x i8> %371, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %381 = shufflevector <16 x i8> %380, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %382 = bitcast <16 x i8> %381 to <8 x i16>
  %383 = mul <8 x i16> %382, %379
  %384 = add <8 x i16> %383, %379
  %385 = lshr <8 x i16> %384, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %386 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %385, <8 x i16> undef) #13
  %387 = add <16 x i8> %386, %377
  %388 = bitcast <16 x i8> %387 to <4 x i32>
  %389 = extractelement <4 x i32> %388, i32 0
  store i32 %389, i32* %362, align 4
  br label %390

390:                                              ; preds = %206, %366, %361, %196
  %391 = getelementptr inbounds i32, i32* %198, i64 %192
  %392 = getelementptr inbounds i8, i8* %199, i64 %3
  %393 = icmp sgt i32 %200, 0
  br i1 %393, label %196, label %621

394:                                              ; preds = %178
  br i1 %181, label %395, label %621

395:                                              ; preds = %394
  %396 = insertelement <4 x i32> undef, i32 %180, i32 0
  %397 = shufflevector <4 x i32> %396, <4 x i32> undef, <4 x i32> zeroinitializer
  %398 = icmp sgt i32 %5, 0
  %399 = bitcast <4 x i32> %397 to <16 x i8>
  %400 = shufflevector <16 x i8> %399, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %401 = shufflevector <16 x i8> %399, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %402 = bitcast <16 x i8> %400 to <8 x i16>
  %403 = bitcast <16 x i8> %401 to <8 x i16>
  %404 = lshr i64 %1, 2
  %405 = bitcast <2 x i64>* %9 to i8*
  %406 = bitcast <2 x i64>* %9 to i32*
  %407 = bitcast <2 x i64>* %9 to <16 x i8>*
  br label %408

408:                                              ; preds = %617, %395
  %409 = phi i32 [ %6, %395 ], [ %412, %617 ]
  %410 = phi i32* [ %0, %395 ], [ %618, %617 ]
  %411 = phi i8* [ %2, %395 ], [ %619, %617 ]
  %412 = add nsw i32 %409, -1
  br i1 %398, label %413, label %617

413:                                              ; preds = %408, %418
  %414 = phi i32 [ %495, %418 ], [ %5, %408 ]
  %415 = phi i8* [ %494, %418 ], [ %411, %408 ]
  %416 = phi i32* [ %493, %418 ], [ %410, %408 ]
  %417 = icmp sgt i32 %414, 7
  br i1 %417, label %418, label %497

418:                                              ; preds = %413
  %419 = bitcast i32* %416 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 4
  %421 = bitcast i8* %415 to i32*
  %422 = load i32, i32* %421, align 1
  %423 = insertelement <4 x i32> undef, i32 %422, i32 0
  %424 = bitcast <4 x i32> %423 to <16 x i8>
  %425 = shufflevector <16 x i8> %424, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %426 = shufflevector <16 x i8> %425, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %427 = shufflevector <16 x i8> %425, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %428 = bitcast <16 x i8> %426 to <8 x i16>
  %429 = bitcast <16 x i8> %427 to <8 x i16>
  %430 = mul <8 x i16> %428, %402
  %431 = mul <8 x i16> %429, %403
  %432 = add <8 x i16> %430, %402
  %433 = add <8 x i16> %431, %403
  %434 = lshr <8 x i16> %432, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %435 = lshr <8 x i16> %433, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %436 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %434, <8 x i16> %435) #13
  %437 = shufflevector <16 x i8> %420, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %438 = shufflevector <16 x i8> %420, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %439 = bitcast <16 x i8> %437 to <8 x i16>
  %440 = bitcast <16 x i8> %438 to <8 x i16>
  %441 = xor <16 x i8> %436, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %442 = shufflevector <16 x i8> %441, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %443 = shufflevector <16 x i8> %442, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %444 = shufflevector <16 x i8> %442, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %445 = bitcast <16 x i8> %443 to <8 x i16>
  %446 = bitcast <16 x i8> %444 to <8 x i16>
  %447 = mul <8 x i16> %445, %439
  %448 = mul <8 x i16> %446, %440
  %449 = add <8 x i16> %447, %439
  %450 = add <8 x i16> %448, %440
  %451 = lshr <8 x i16> %449, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %452 = lshr <8 x i16> %450, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %453 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %451, <8 x i16> %452) #13
  %454 = add <16 x i8> %453, %436
  %455 = getelementptr inbounds i32, i32* %416, i64 4
  %456 = bitcast i32* %455 to <16 x i8>*
  %457 = load <16 x i8>, <16 x i8>* %456, align 4
  %458 = getelementptr inbounds i8, i8* %415, i64 4
  %459 = bitcast i8* %458 to i32*
  %460 = load i32, i32* %459, align 1
  %461 = insertelement <4 x i32> undef, i32 %460, i32 0
  %462 = bitcast <4 x i32> %461 to <16 x i8>
  %463 = shufflevector <16 x i8> %462, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %464 = shufflevector <16 x i8> %463, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %465 = shufflevector <16 x i8> %463, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %466 = bitcast <16 x i8> %464 to <8 x i16>
  %467 = bitcast <16 x i8> %465 to <8 x i16>
  %468 = mul <8 x i16> %466, %402
  %469 = mul <8 x i16> %467, %403
  %470 = add <8 x i16> %468, %402
  %471 = add <8 x i16> %469, %403
  %472 = lshr <8 x i16> %470, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %473 = lshr <8 x i16> %471, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %474 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %472, <8 x i16> %473) #13
  %475 = shufflevector <16 x i8> %457, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %476 = shufflevector <16 x i8> %457, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %477 = bitcast <16 x i8> %475 to <8 x i16>
  %478 = bitcast <16 x i8> %476 to <8 x i16>
  %479 = xor <16 x i8> %474, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %480 = shufflevector <16 x i8> %479, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %481 = shufflevector <16 x i8> %480, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %482 = shufflevector <16 x i8> %480, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %483 = bitcast <16 x i8> %481 to <8 x i16>
  %484 = bitcast <16 x i8> %482 to <8 x i16>
  %485 = mul <8 x i16> %483, %477
  %486 = mul <8 x i16> %484, %478
  %487 = add <8 x i16> %485, %477
  %488 = add <8 x i16> %486, %478
  %489 = lshr <8 x i16> %487, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %490 = lshr <8 x i16> %488, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %491 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %489, <8 x i16> %490) #13
  %492 = add <16 x i8> %491, %474
  store <16 x i8> %454, <16 x i8>* %419, align 4
  store <16 x i8> %492, <16 x i8>* %456, align 4
  %493 = getelementptr inbounds i32, i32* %416, i64 8
  %494 = getelementptr inbounds i8, i8* %415, i64 8
  %495 = add nsw i32 %414, -8
  %496 = icmp sgt i32 %495, 0
  br i1 %496, label %413, label %617

497:                                              ; preds = %413
  %498 = icmp sgt i32 %414, 3
  br i1 %498, label %499, label %539

499:                                              ; preds = %497
  %500 = bitcast i32* %416 to <16 x i8>*
  %501 = load <16 x i8>, <16 x i8>* %500, align 4
  %502 = bitcast i8* %415 to i32*
  %503 = load i32, i32* %502, align 1
  %504 = insertelement <4 x i32> undef, i32 %503, i32 0
  %505 = bitcast <4 x i32> %504 to <16 x i8>
  %506 = shufflevector <16 x i8> %505, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %507 = shufflevector <16 x i8> %506, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %508 = shufflevector <16 x i8> %506, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %509 = bitcast <16 x i8> %507 to <8 x i16>
  %510 = bitcast <16 x i8> %508 to <8 x i16>
  %511 = mul <8 x i16> %509, %402
  %512 = mul <8 x i16> %510, %403
  %513 = add <8 x i16> %511, %402
  %514 = add <8 x i16> %512, %403
  %515 = lshr <8 x i16> %513, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %516 = lshr <8 x i16> %514, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %517 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %515, <8 x i16> %516) #13
  %518 = shufflevector <16 x i8> %501, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %519 = shufflevector <16 x i8> %501, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %520 = bitcast <16 x i8> %518 to <8 x i16>
  %521 = bitcast <16 x i8> %519 to <8 x i16>
  %522 = xor <16 x i8> %517, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %523 = shufflevector <16 x i8> %522, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %524 = shufflevector <16 x i8> %523, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %525 = shufflevector <16 x i8> %523, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %526 = bitcast <16 x i8> %524 to <8 x i16>
  %527 = bitcast <16 x i8> %525 to <8 x i16>
  %528 = mul <8 x i16> %526, %520
  %529 = mul <8 x i16> %527, %521
  %530 = add <8 x i16> %528, %520
  %531 = add <8 x i16> %529, %521
  %532 = lshr <8 x i16> %530, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %533 = lshr <8 x i16> %531, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %534 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %532, <8 x i16> %533) #13
  %535 = add <16 x i8> %534, %517
  store <16 x i8> %535, <16 x i8>* %500, align 4
  %536 = getelementptr inbounds i32, i32* %416, i64 4
  %537 = getelementptr inbounds i8, i8* %415, i64 4
  %538 = add nsw i32 %414, -4
  br label %539

539:                                              ; preds = %499, %497
  %540 = phi i32* [ %536, %499 ], [ %416, %497 ]
  %541 = phi i8* [ %537, %499 ], [ %415, %497 ]
  %542 = phi i32 [ %538, %499 ], [ %414, %497 ]
  %543 = icmp sgt i32 %542, 1
  br i1 %543, label %544, label %582

544:                                              ; preds = %539
  %545 = bitcast i32* %540 to i64*
  %546 = load i64, i64* %545, align 4
  %547 = insertelement <2 x i64> undef, i64 %546, i32 0
  %548 = bitcast i8* %541 to i16*
  %549 = load i16, i16* %548, align 1
  %550 = zext i16 %549 to i32
  %551 = insertelement <4 x i32> undef, i32 %550, i32 0
  %552 = bitcast <4 x i32> %551 to <16 x i8>
  %553 = shufflevector <16 x i8> %552, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %554 = shufflevector <16 x i8> %553, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %555 = shufflevector <16 x i8> %553, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %556 = bitcast <16 x i8> %554 to <8 x i16>
  %557 = bitcast <16 x i8> %555 to <8 x i16>
  %558 = mul <8 x i16> %556, %402
  %559 = mul <8 x i16> %557, %403
  %560 = add <8 x i16> %558, %402
  %561 = add <8 x i16> %559, %403
  %562 = lshr <8 x i16> %560, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %563 = lshr <8 x i16> %561, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %564 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %562, <8 x i16> %563) #13
  %565 = bitcast <2 x i64> %547 to <16 x i8>
  %566 = shufflevector <16 x i8> %565, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %567 = bitcast <16 x i8> %566 to <8 x i16>
  %568 = xor <16 x i8> %564, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %569 = shufflevector <16 x i8> %568, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %570 = shufflevector <16 x i8> %569, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %571 = bitcast <16 x i8> %570 to <8 x i16>
  %572 = mul <8 x i16> %571, %567
  %573 = add <8 x i16> %572, %567
  %574 = lshr <8 x i16> %573, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %575 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %574, <8 x i16> undef) #13
  %576 = add <16 x i8> %575, %564
  %577 = bitcast <16 x i8> %576 to <2 x i64>
  %578 = extractelement <2 x i64> %577, i32 0
  store i64 %578, i64* %545, align 4
  %579 = getelementptr inbounds i32, i32* %540, i64 2
  %580 = getelementptr inbounds i8, i8* %541, i64 2
  %581 = add nsw i32 %542, -2
  br label %582

582:                                              ; preds = %544, %539
  %583 = phi i32* [ %579, %544 ], [ %540, %539 ]
  %584 = phi i8* [ %580, %544 ], [ %541, %539 ]
  %585 = phi i32 [ %581, %544 ], [ %542, %539 ]
  %586 = icmp sgt i32 %585, 0
  br i1 %586, label %587, label %617

587:                                              ; preds = %582
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %405)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %9, align 16
  %588 = load i32, i32* %583, align 4
  store i32 %588, i32* %406, align 16
  %589 = load <16 x i8>, <16 x i8>* %407, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %405)
  %590 = load i8, i8* %584, align 1
  %591 = insertelement <16 x i8> undef, i8 %590, i32 0
  %592 = shufflevector <16 x i8> %591, <16 x i8> undef, <16 x i32> zeroinitializer
  %593 = shufflevector <16 x i8> %592, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %594 = shufflevector <16 x i8> %592, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %595 = bitcast <16 x i8> %593 to <8 x i16>
  %596 = bitcast <16 x i8> %594 to <8 x i16>
  %597 = mul <8 x i16> %595, %402
  %598 = mul <8 x i16> %596, %403
  %599 = add <8 x i16> %597, %402
  %600 = add <8 x i16> %598, %403
  %601 = lshr <8 x i16> %599, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %602 = lshr <8 x i16> %600, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %603 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %601, <8 x i16> %602) #13
  %604 = shufflevector <16 x i8> %589, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %605 = bitcast <16 x i8> %604 to <8 x i16>
  %606 = xor <16 x i8> %603, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %607 = shufflevector <16 x i8> %606, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %608 = shufflevector <16 x i8> %607, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %609 = bitcast <16 x i8> %608 to <8 x i16>
  %610 = mul <8 x i16> %609, %605
  %611 = add <8 x i16> %610, %605
  %612 = lshr <8 x i16> %611, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %613 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %612, <8 x i16> undef) #13
  %614 = add <16 x i8> %613, %603
  %615 = bitcast <16 x i8> %614 to <4 x i32>
  %616 = extractelement <4 x i32> %615, i32 0
  store i32 %616, i32* %583, align 4
  br label %617

617:                                              ; preds = %418, %587, %582, %408
  %618 = getelementptr inbounds i32, i32* %410, i64 %404
  %619 = getelementptr inbounds i8, i8* %411, i64 %3
  %620 = icmp sgt i32 %412, 0
  br i1 %620, label %408, label %621

621:                                              ; preds = %617, %390, %174, %394, %182, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse312RGBA_to_BGRAEPjPKji(i32*, i32*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 3
  br i1 %4, label %5, label %66

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -4
  %7 = lshr i32 %6, 2
  %8 = add nuw nsw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %25, label %11

11:                                               ; preds = %5, %11
  %12 = phi i32* [ %21, %11 ], [ %0, %5 ]
  %13 = phi i32* [ %20, %11 ], [ %1, %5 ]
  %14 = phi i32 [ %22, %11 ], [ %2, %5 ]
  %15 = phi i32 [ %23, %11 ], [ %9, %5 ]
  %16 = bitcast i32* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <16 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15>
  %19 = bitcast i32* %12 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %19, align 1
  %20 = getelementptr inbounds i32, i32* %13, i64 4
  %21 = getelementptr inbounds i32, i32* %12, i64 4
  %22 = add nsw i32 %14, -4
  %23 = add i32 %15, -1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %11, !llvm.loop !2

25:                                               ; preds = %11, %5
  %26 = phi i32* [ %0, %5 ], [ %21, %11 ]
  %27 = phi i32* [ %1, %5 ], [ %20, %11 ]
  %28 = phi i32 [ %2, %5 ], [ %22, %11 ]
  %29 = phi i32* [ undef, %5 ], [ %20, %11 ]
  %30 = phi i32* [ undef, %5 ], [ %21, %11 ]
  %31 = icmp ult i32 %6, 12
  br i1 %31, label %62, label %32

32:                                               ; preds = %25, %32
  %33 = phi i32* [ %59, %32 ], [ %26, %25 ]
  %34 = phi i32* [ %58, %32 ], [ %27, %25 ]
  %35 = phi i32 [ %60, %32 ], [ %28, %25 ]
  %36 = bitcast i32* %34 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15>
  %39 = bitcast i32* %33 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %39, align 1
  %40 = getelementptr inbounds i32, i32* %34, i64 4
  %41 = getelementptr inbounds i32, i32* %33, i64 4
  %42 = bitcast i32* %40 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15>
  %45 = bitcast i32* %41 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %34, i64 8
  %47 = getelementptr inbounds i32, i32* %33, i64 8
  %48 = bitcast i32* %46 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15>
  %51 = bitcast i32* %47 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %51, align 1
  %52 = getelementptr inbounds i32, i32* %34, i64 12
  %53 = getelementptr inbounds i32, i32* %33, i64 12
  %54 = bitcast i32* %52 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = shufflevector <16 x i8> %55, <16 x i8> undef, <16 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15>
  %57 = bitcast i32* %53 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %57, align 1
  %58 = getelementptr inbounds i32, i32* %34, i64 16
  %59 = getelementptr inbounds i32, i32* %33, i64 16
  %60 = add nsw i32 %35, -16
  %61 = icmp sgt i32 %60, 3
  br i1 %61, label %32, label %62

62:                                               ; preds = %32, %25
  %63 = phi i32* [ %29, %25 ], [ %58, %32 ]
  %64 = phi i32* [ %30, %25 ], [ %59, %32 ]
  %65 = and i32 %2, 3
  br label %66

66:                                               ; preds = %62, %3
  %67 = phi i32 [ %2, %3 ], [ %65, %62 ]
  %68 = phi i32* [ %1, %3 ], [ %63, %62 ]
  %69 = phi i32* [ %0, %3 ], [ %64, %62 ]
  %70 = icmp sgt i32 %67, 0
  br i1 %70, label %71, label %158

71:                                               ; preds = %66
  %72 = zext i32 %67 to i64
  %73 = icmp ult i32 %67, 8
  br i1 %73, label %112, label %74

74:                                               ; preds = %71
  %75 = getelementptr i32, i32* %69, i64 %72
  %76 = getelementptr i32, i32* %68, i64 %72
  %77 = icmp ult i32* %69, %76
  %78 = icmp ult i32* %68, %75
  %79 = and i1 %77, %78
  br i1 %79, label %112, label %80

80:                                               ; preds = %74
  %81 = and i64 %72, 4294967288
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %108, %82 ]
  %84 = getelementptr inbounds i32, i32* %68, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !4
  %90 = lshr <4 x i32> %86, <i32 16, i32 16, i32 16, i32 16>
  %91 = lshr <4 x i32> %89, <i32 16, i32 16, i32 16, i32 16>
  %92 = shl <4 x i32> %86, <i32 16, i32 16, i32 16, i32 16>
  %93 = shl <4 x i32> %89, <i32 16, i32 16, i32 16, i32 16>
  %94 = and <4 x i32> %92, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %95 = and <4 x i32> %93, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %96 = and <4 x i32> %90, <i32 255, i32 255, i32 255, i32 255>
  %97 = and <4 x i32> %91, <i32 255, i32 255, i32 255, i32 255>
  %98 = and <4 x i32> %86, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %99 = and <4 x i32> %89, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %100 = or <4 x i32> %94, %98
  %101 = or <4 x i32> %95, %99
  %102 = or <4 x i32> %100, %96
  %103 = or <4 x i32> %101, %97
  %104 = getelementptr inbounds i32, i32* %69, i64 %83
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %105, align 4, !alias.scope !7, !noalias !4
  %106 = getelementptr inbounds i32, i32* %104, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %107, align 4, !alias.scope !7, !noalias !4
  %108 = add i64 %83, 8
  %109 = icmp eq i64 %108, %81
  br i1 %109, label %110, label %82, !llvm.loop !9

110:                                              ; preds = %82
  %111 = icmp eq i64 %81, %72
  br i1 %111, label %158, label %112

112:                                              ; preds = %110, %74, %71
  %113 = phi i64 [ 0, %74 ], [ 0, %71 ], [ %81, %110 ]
  %114 = xor i64 %113, -1
  %115 = and i64 %72, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %129, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i32, i32* %68, i64 %113
  %119 = load i32, i32* %118, align 4
  %120 = lshr i32 %119, 16
  %121 = shl i32 %119, 16
  %122 = and i32 %121, 16711680
  %123 = and i32 %120, 255
  %124 = and i32 %119, -16711936
  %125 = or i32 %122, %124
  %126 = or i32 %125, %123
  %127 = getelementptr inbounds i32, i32* %69, i64 %113
  store i32 %126, i32* %127, align 4
  %128 = or i64 %113, 1
  br label %129

129:                                              ; preds = %112, %117
  %130 = phi i64 [ %113, %112 ], [ %128, %117 ]
  %131 = sub nsw i64 0, %72
  %132 = icmp eq i64 %114, %131
  br i1 %132, label %158, label %133

133:                                              ; preds = %129, %133
  %134 = phi i64 [ %156, %133 ], [ %130, %129 ]
  %135 = getelementptr inbounds i32, i32* %68, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = lshr i32 %136, 16
  %138 = shl i32 %136, 16
  %139 = and i32 %138, 16711680
  %140 = and i32 %137, 255
  %141 = and i32 %136, -16711936
  %142 = or i32 %139, %141
  %143 = or i32 %142, %140
  %144 = getelementptr inbounds i32, i32* %69, i64 %134
  store i32 %143, i32* %144, align 4
  %145 = add nuw nsw i64 %134, 1
  %146 = getelementptr inbounds i32, i32* %68, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = lshr i32 %147, 16
  %149 = shl i32 %147, 16
  %150 = and i32 %149, 16711680
  %151 = and i32 %148, 255
  %152 = and i32 %147, -16711936
  %153 = or i32 %150, %152
  %154 = or i32 %153, %151
  %155 = getelementptr inbounds i32, i32* %69, i64 %145
  store i32 %154, i32* %155, align 4
  %156 = add nuw nsw i64 %134, 2
  %157 = icmp eq i64 %156, %72
  br i1 %157, label %158, label %133, !llvm.loop !11

158:                                              ; preds = %129, %133, %110, %66
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse312RGBA_to_rgbAEPjPKji(i32*, i32*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %54

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %49, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %50, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %48, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 4
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %15 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %16 = bitcast <16 x i8> %14 to <4 x i32>
  %17 = bitcast <16 x i8> %15 to <4 x i32>
  %18 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %19 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %21 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %27, %26
  %29 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <16 x i8> %22 to <8 x i16>
  %32 = mul <8 x i16> %27, %31
  %33 = add <8 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %33, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <16 x i8> %24 to <8 x i16>
  %36 = mul <8 x i16> %27, %35
  %37 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <8 x i16> %39, %30
  %41 = shl <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %42 = or <8 x i16> %41, %38
  %43 = shufflevector <8 x i16> %40, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %6, i64 4
  %47 = bitcast i32* %46 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %47, align 1
  %48 = getelementptr inbounds i32, i32* %8, i64 8
  %49 = getelementptr inbounds i32, i32* %6, i64 8
  %50 = add nsw i32 %7, -8
  %51 = icmp sgt i32 %50, 7
  br i1 %51, label %5, label %52

52:                                               ; preds = %5
  %53 = and i32 %2, 7
  br label %54

54:                                               ; preds = %52, %3
  %55 = phi i32* [ %1, %3 ], [ %48, %52 ]
  %56 = phi i32 [ %2, %3 ], [ %53, %52 ]
  %57 = phi i32* [ %0, %3 ], [ %49, %52 ]
  %58 = icmp sgt i32 %56, 3
  br i1 %58, label %59, label %94

59:                                               ; preds = %54
  %60 = bitcast i32* %55 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = shufflevector <4 x i32> %63, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %66 = bitcast <4 x i32> %64 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %68 = shufflevector <16 x i8> %66, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = bitcast <4 x i32> %65 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %67 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %73, %72
  %75 = add <8 x i16> %74, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %76 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %75, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %77 = bitcast <16 x i8> %68 to <8 x i16>
  %78 = mul <8 x i16> %73, %77
  %79 = add <8 x i16> %78, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %80 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %79, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %81 = bitcast <16 x i8> %70 to <8 x i16>
  %82 = mul <8 x i16> %73, %81
  %83 = add <8 x i16> %82, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %83, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %85 = shl <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = or <8 x i16> %85, %76
  %87 = shl <8 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = or <8 x i16> %87, %84
  %89 = shufflevector <8 x i16> %86, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = bitcast i32* %57 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 1
  %91 = getelementptr inbounds i32, i32* %55, i64 4
  %92 = getelementptr inbounds i32, i32* %57, i64 4
  %93 = add nsw i32 %56, -4
  br label %94

94:                                               ; preds = %54, %59
  %95 = phi i32* [ %91, %59 ], [ %55, %54 ]
  %96 = phi i32 [ %93, %59 ], [ %56, %54 ]
  %97 = phi i32* [ %92, %59 ], [ %57, %54 ]
  %98 = icmp sgt i32 %96, 0
  br i1 %98, label %99, label %190

99:                                               ; preds = %94
  %100 = zext i32 %96 to i64
  %101 = icmp ult i32 %96, 4
  br i1 %101, label %151, label %102

102:                                              ; preds = %99
  %103 = getelementptr i32, i32* %97, i64 %100
  %104 = getelementptr i32, i32* %95, i64 %100
  %105 = icmp ult i32* %97, %104
  %106 = icmp ult i32* %95, %103
  %107 = and i1 %105, %106
  br i1 %107, label %151, label %108

108:                                              ; preds = %102
  %109 = and i64 %100, 4294967292
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %147, %110 ]
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !12
  %115 = lshr <4 x i32> %114, <i32 24, i32 24, i32 24, i32 24>
  %116 = lshr <4 x i32> %114, <i32 16, i32 16, i32 16, i32 16>
  %117 = lshr <4 x i32> %114, <i32 8, i32 8, i32 8, i32 8>
  %118 = and <4 x i32> %116, <i32 255, i32 255, i32 255, i32 255>
  %119 = mul nuw nsw <4 x i32> %118, %115
  %120 = trunc <4 x i32> %119 to <4 x i16>
  %121 = add nuw <4 x i16> %120, <i16 127, i16 127, i16 127, i16 127>
  %122 = udiv <4 x i16> %121, <i16 255, i16 255, i16 255, i16 255>
  %123 = zext <4 x i16> %122 to <4 x i32>
  %124 = and <4 x i32> %117, <i32 255, i32 255, i32 255, i32 255>
  %125 = mul nuw nsw <4 x i32> %124, %115
  %126 = trunc <4 x i32> %125 to <4 x i16>
  %127 = add nuw <4 x i16> %126, <i16 127, i16 127, i16 127, i16 127>
  %128 = udiv <4 x i16> %127, <i16 255, i16 255, i16 255, i16 255>
  %129 = zext <4 x i16> %128 to <4 x i32>
  %130 = and <4 x i32> %114, <i32 255, i32 255, i32 255, i32 255>
  %131 = mul nuw nsw <4 x i32> %130, %115
  %132 = trunc <4 x i32> %131 to <4 x i16>
  %133 = add nuw <4 x i16> %132, <i16 127, i16 127, i16 127, i16 127>
  %134 = udiv <4 x i16> %133, <i16 255, i16 255, i16 255, i16 255>
  %135 = and <4 x i32> %114, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %136 = shl nuw nsw <4 x i32> %123, <i32 16, i32 16, i32 16, i32 16>
  %137 = and <4 x i32> %136, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %138 = shl nuw nsw <4 x i32> %129, <i32 8, i32 8, i32 8, i32 8>
  %139 = and <4 x i32> %138, <i32 65280, i32 65280, i32 65280, i32 65280>
  %140 = and <4 x i16> %134, <i16 255, i16 255, i16 255, i16 255>
  %141 = zext <4 x i16> %140 to <4 x i32>
  %142 = or <4 x i32> %135, %141
  %143 = or <4 x i32> %142, %137
  %144 = or <4 x i32> %143, %139
  %145 = getelementptr inbounds i32, i32* %97, i64 %111
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %146, align 4, !alias.scope !15, !noalias !12
  %147 = add i64 %111, 4
  %148 = icmp eq i64 %147, %109
  br i1 %148, label %149, label %110, !llvm.loop !17

149:                                              ; preds = %110
  %150 = icmp eq i64 %109, %100
  br i1 %150, label %190, label %151

151:                                              ; preds = %149, %102, %99
  %152 = phi i64 [ 0, %102 ], [ 0, %99 ], [ %109, %149 ]
  br label %153

153:                                              ; preds = %151, %153
  %154 = phi i64 [ %188, %153 ], [ %152, %151 ]
  %155 = getelementptr inbounds i32, i32* %95, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = lshr i32 %156, 24
  %158 = lshr i32 %156, 16
  %159 = lshr i32 %156, 8
  %160 = and i32 %158, 255
  %161 = mul nuw nsw i32 %160, %157
  %162 = trunc i32 %161 to i16
  %163 = add nuw i16 %162, 127
  %164 = udiv i16 %163, 255
  %165 = zext i16 %164 to i32
  %166 = and i32 %159, 255
  %167 = mul nuw nsw i32 %166, %157
  %168 = trunc i32 %167 to i16
  %169 = add nuw i16 %168, 127
  %170 = udiv i16 %169, 255
  %171 = zext i16 %170 to i32
  %172 = and i32 %156, 255
  %173 = mul nuw nsw i32 %172, %157
  %174 = trunc i32 %173 to i16
  %175 = add nuw i16 %174, 127
  %176 = udiv i16 %175, 255
  %177 = and i32 %156, -16777216
  %178 = shl nuw nsw i32 %165, 16
  %179 = and i32 %178, 16711680
  %180 = shl nuw nsw i32 %171, 8
  %181 = and i32 %180, 65280
  %182 = and i16 %176, 255
  %183 = zext i16 %182 to i32
  %184 = or i32 %177, %183
  %185 = or i32 %184, %179
  %186 = or i32 %185, %181
  %187 = getelementptr inbounds i32, i32* %97, i64 %154
  store i32 %186, i32* %187, align 4
  %188 = add nuw nsw i64 %154, 1
  %189 = icmp eq i64 %188, %100
  br i1 %189, label %190, label %153, !llvm.loop !18

190:                                              ; preds = %153, %149, %94
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse312RGBA_to_bgrAEPjPKji(i32*, i32*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %54

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %49, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %50, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %48, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 4
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %15 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %16 = bitcast <16 x i8> %14 to <4 x i32>
  %17 = bitcast <16 x i8> %15 to <4 x i32>
  %18 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %19 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %21 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %27, %26
  %29 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <16 x i8> %22 to <8 x i16>
  %32 = mul <8 x i16> %27, %31
  %33 = add <8 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %33, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <16 x i8> %24 to <8 x i16>
  %36 = mul <8 x i16> %27, %35
  %37 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <8 x i16> %39, %30
  %41 = shl <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %42 = or <8 x i16> %41, %38
  %43 = shufflevector <8 x i16> %40, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %6, i64 4
  %47 = bitcast i32* %46 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %47, align 1
  %48 = getelementptr inbounds i32, i32* %8, i64 8
  %49 = getelementptr inbounds i32, i32* %6, i64 8
  %50 = add nsw i32 %7, -8
  %51 = icmp sgt i32 %50, 7
  br i1 %51, label %5, label %52

52:                                               ; preds = %5
  %53 = and i32 %2, 7
  br label %54

54:                                               ; preds = %52, %3
  %55 = phi i32* [ %1, %3 ], [ %48, %52 ]
  %56 = phi i32 [ %2, %3 ], [ %53, %52 ]
  %57 = phi i32* [ %0, %3 ], [ %49, %52 ]
  %58 = icmp sgt i32 %56, 3
  br i1 %58, label %59, label %94

59:                                               ; preds = %54
  %60 = bitcast i32* %55 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = shufflevector <4 x i32> %63, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %66 = bitcast <4 x i32> %64 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %68 = shufflevector <16 x i8> %66, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = bitcast <4 x i32> %65 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %67 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %73, %72
  %75 = add <8 x i16> %74, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %76 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %75, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %77 = bitcast <16 x i8> %68 to <8 x i16>
  %78 = mul <8 x i16> %73, %77
  %79 = add <8 x i16> %78, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %80 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %79, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %81 = bitcast <16 x i8> %70 to <8 x i16>
  %82 = mul <8 x i16> %73, %81
  %83 = add <8 x i16> %82, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %83, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %85 = shl <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = or <8 x i16> %85, %76
  %87 = shl <8 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = or <8 x i16> %87, %84
  %89 = shufflevector <8 x i16> %86, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = bitcast i32* %57 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 1
  %91 = getelementptr inbounds i32, i32* %55, i64 4
  %92 = getelementptr inbounds i32, i32* %57, i64 4
  %93 = add nsw i32 %56, -4
  br label %94

94:                                               ; preds = %54, %59
  %95 = phi i32* [ %91, %59 ], [ %55, %54 ]
  %96 = phi i32 [ %93, %59 ], [ %56, %54 ]
  %97 = phi i32* [ %92, %59 ], [ %57, %54 ]
  %98 = icmp sgt i32 %96, 0
  br i1 %98, label %99, label %190

99:                                               ; preds = %94
  %100 = zext i32 %96 to i64
  %101 = icmp ult i32 %96, 4
  br i1 %101, label %151, label %102

102:                                              ; preds = %99
  %103 = getelementptr i32, i32* %97, i64 %100
  %104 = getelementptr i32, i32* %95, i64 %100
  %105 = icmp ult i32* %97, %104
  %106 = icmp ult i32* %95, %103
  %107 = and i1 %105, %106
  br i1 %107, label %151, label %108

108:                                              ; preds = %102
  %109 = and i64 %100, 4294967292
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %147, %110 ]
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !19
  %115 = lshr <4 x i32> %114, <i32 24, i32 24, i32 24, i32 24>
  %116 = lshr <4 x i32> %114, <i32 16, i32 16, i32 16, i32 16>
  %117 = lshr <4 x i32> %114, <i32 8, i32 8, i32 8, i32 8>
  %118 = and <4 x i32> %116, <i32 255, i32 255, i32 255, i32 255>
  %119 = mul nuw nsw <4 x i32> %118, %115
  %120 = trunc <4 x i32> %119 to <4 x i16>
  %121 = add nuw <4 x i16> %120, <i16 127, i16 127, i16 127, i16 127>
  %122 = udiv <4 x i16> %121, <i16 255, i16 255, i16 255, i16 255>
  %123 = and <4 x i32> %117, <i32 255, i32 255, i32 255, i32 255>
  %124 = mul nuw nsw <4 x i32> %123, %115
  %125 = trunc <4 x i32> %124 to <4 x i16>
  %126 = add nuw <4 x i16> %125, <i16 127, i16 127, i16 127, i16 127>
  %127 = udiv <4 x i16> %126, <i16 255, i16 255, i16 255, i16 255>
  %128 = zext <4 x i16> %127 to <4 x i32>
  %129 = and <4 x i32> %114, <i32 255, i32 255, i32 255, i32 255>
  %130 = mul nuw nsw <4 x i32> %129, %115
  %131 = trunc <4 x i32> %130 to <4 x i16>
  %132 = add nuw <4 x i16> %131, <i16 127, i16 127, i16 127, i16 127>
  %133 = udiv <4 x i16> %132, <i16 255, i16 255, i16 255, i16 255>
  %134 = zext <4 x i16> %133 to <4 x i32>
  %135 = and <4 x i32> %114, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %136 = shl nuw nsw <4 x i32> %134, <i32 16, i32 16, i32 16, i32 16>
  %137 = and <4 x i32> %136, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %138 = or <4 x i32> %137, %135
  %139 = shl nuw nsw <4 x i32> %128, <i32 8, i32 8, i32 8, i32 8>
  %140 = and <4 x i32> %139, <i32 65280, i32 65280, i32 65280, i32 65280>
  %141 = and <4 x i16> %122, <i16 255, i16 255, i16 255, i16 255>
  %142 = zext <4 x i16> %141 to <4 x i32>
  %143 = or <4 x i32> %138, %142
  %144 = or <4 x i32> %143, %140
  %145 = getelementptr inbounds i32, i32* %97, i64 %111
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %146, align 4, !alias.scope !22, !noalias !19
  %147 = add i64 %111, 4
  %148 = icmp eq i64 %147, %109
  br i1 %148, label %149, label %110, !llvm.loop !24

149:                                              ; preds = %110
  %150 = icmp eq i64 %109, %100
  br i1 %150, label %190, label %151

151:                                              ; preds = %149, %102, %99
  %152 = phi i64 [ 0, %102 ], [ 0, %99 ], [ %109, %149 ]
  br label %153

153:                                              ; preds = %151, %153
  %154 = phi i64 [ %188, %153 ], [ %152, %151 ]
  %155 = getelementptr inbounds i32, i32* %95, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = lshr i32 %156, 24
  %158 = lshr i32 %156, 16
  %159 = lshr i32 %156, 8
  %160 = and i32 %158, 255
  %161 = mul nuw nsw i32 %160, %157
  %162 = trunc i32 %161 to i16
  %163 = add nuw i16 %162, 127
  %164 = udiv i16 %163, 255
  %165 = and i32 %159, 255
  %166 = mul nuw nsw i32 %165, %157
  %167 = trunc i32 %166 to i16
  %168 = add nuw i16 %167, 127
  %169 = udiv i16 %168, 255
  %170 = zext i16 %169 to i32
  %171 = and i32 %156, 255
  %172 = mul nuw nsw i32 %171, %157
  %173 = trunc i32 %172 to i16
  %174 = add nuw i16 %173, 127
  %175 = udiv i16 %174, 255
  %176 = zext i16 %175 to i32
  %177 = and i32 %156, -16777216
  %178 = shl nuw nsw i32 %176, 16
  %179 = and i32 %178, 16711680
  %180 = or i32 %179, %177
  %181 = shl nuw nsw i32 %170, 8
  %182 = and i32 %181, 65280
  %183 = and i16 %164, 255
  %184 = zext i16 %183 to i32
  %185 = or i32 %180, %184
  %186 = or i32 %185, %182
  %187 = getelementptr inbounds i32, i32* %97, i64 %154
  store i32 %186, i32* %187, align 4
  %188 = add nuw nsw i64 %154, 1
  %189 = icmp eq i64 %188, %100
  br i1 %189, label %190, label %153, !llvm.loop !25

190:                                              ; preds = %153, %149, %94
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse311RGB_to_RGB1EPjPKhi(i32*, i8*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 5
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -6
  %7 = add i32 %2, -6
  %8 = lshr i32 %7, 2
  %9 = add nuw nsw i32 %8, 1
  %10 = and i32 %9, 3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %5, %12
  %13 = phi i32* [ %24, %12 ], [ %0, %5 ]
  %14 = phi i8* [ %23, %12 ], [ %1, %5 ]
  %15 = phi i32 [ %25, %12 ], [ %2, %5 ]
  %16 = phi i32 [ %26, %12 ], [ %10, %5 ]
  %17 = bitcast i8* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 3, i32 4, i32 5, i32 16, i32 6, i32 7, i32 8, i32 16, i32 9, i32 10, i32 11, i32 16>
  %20 = bitcast <16 x i8> %19 to <2 x i64>
  %21 = or <2 x i64> %20, <i64 -72057589759737856, i64 -72057589759737856>
  %22 = bitcast i32* %13 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %14, i64 12
  %24 = getelementptr inbounds i32, i32* %13, i64 4
  %25 = add nsw i32 %15, -4
  %26 = add i32 %16, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %12, !llvm.loop !26

28:                                               ; preds = %12, %5
  %29 = phi i32* [ %0, %5 ], [ %24, %12 ]
  %30 = phi i8* [ %1, %5 ], [ %23, %12 ]
  %31 = phi i32 [ %2, %5 ], [ %25, %12 ]
  %32 = phi i8* [ undef, %5 ], [ %23, %12 ]
  %33 = phi i32* [ undef, %5 ], [ %24, %12 ]
  %34 = icmp ult i32 %7, 12
  br i1 %34, label %73, label %35

35:                                               ; preds = %28, %35
  %36 = phi i32* [ %70, %35 ], [ %29, %28 ]
  %37 = phi i8* [ %69, %35 ], [ %30, %28 ]
  %38 = phi i32 [ %71, %35 ], [ %31, %28 ]
  %39 = bitcast i8* %37 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 3, i32 4, i32 5, i32 16, i32 6, i32 7, i32 8, i32 16, i32 9, i32 10, i32 11, i32 16>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = or <2 x i64> %42, <i64 -72057589759737856, i64 -72057589759737856>
  %44 = bitcast i32* %36 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %37, i64 12
  %46 = getelementptr inbounds i32, i32* %36, i64 4
  %47 = bitcast i8* %45 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 3, i32 4, i32 5, i32 16, i32 6, i32 7, i32 8, i32 16, i32 9, i32 10, i32 11, i32 16>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = or <2 x i64> %50, <i64 -72057589759737856, i64 -72057589759737856>
  %52 = bitcast i32* %46 to <2 x i64>*
  store <2 x i64> %51, <2 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %37, i64 24
  %54 = getelementptr inbounds i32, i32* %36, i64 8
  %55 = bitcast i8* %53 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 3, i32 4, i32 5, i32 16, i32 6, i32 7, i32 8, i32 16, i32 9, i32 10, i32 11, i32 16>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = or <2 x i64> %58, <i64 -72057589759737856, i64 -72057589759737856>
  %60 = bitcast i32* %54 to <2 x i64>*
  store <2 x i64> %59, <2 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %37, i64 36
  %62 = getelementptr inbounds i32, i32* %36, i64 12
  %63 = bitcast i8* %61 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 3, i32 4, i32 5, i32 16, i32 6, i32 7, i32 8, i32 16, i32 9, i32 10, i32 11, i32 16>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = or <2 x i64> %66, <i64 -72057589759737856, i64 -72057589759737856>
  %68 = bitcast i32* %62 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %37, i64 48
  %70 = getelementptr inbounds i32, i32* %36, i64 16
  %71 = add nsw i32 %38, -16
  %72 = icmp sgt i32 %71, 5
  br i1 %72, label %35, label %73

73:                                               ; preds = %35, %28
  %74 = phi i8* [ %32, %28 ], [ %69, %35 ]
  %75 = phi i32* [ %33, %28 ], [ %70, %35 ]
  %76 = and i32 %6, -4
  %77 = add i32 %2, -4
  %78 = sub i32 %77, %76
  br label %79

79:                                               ; preds = %3, %73
  %80 = phi i32 [ %2, %3 ], [ %78, %73 ]
  %81 = phi i8* [ %1, %3 ], [ %74, %73 ]
  %82 = phi i32* [ %0, %3 ], [ %75, %73 ]
  %83 = icmp sgt i32 %80, 0
  br i1 %83, label %84, label %147

84:                                               ; preds = %79
  %85 = zext i32 %80 to i64
  %86 = and i64 %85, 1
  %87 = icmp eq i32 %80, 1
  br i1 %87, label %128, label %88

88:                                               ; preds = %84
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %125, %90 ]
  %92 = phi i8* [ %81, %88 ], [ %115, %90 ]
  %93 = phi i64 [ %89, %88 ], [ %126, %90 ]
  %94 = load i8, i8* %92, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds i8, i8* %92, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds i8, i8* %92, i64 3
  %100 = zext i8 %98 to i32
  %101 = shl nuw nsw i32 %100, 16
  %102 = zext i8 %96 to i32
  %103 = shl nuw nsw i32 %102, 8
  %104 = zext i8 %94 to i32
  %105 = or i32 %103, %104
  %106 = or i32 %105, %101
  %107 = or i32 %106, -16777216
  %108 = getelementptr inbounds i32, i32* %82, i64 %91
  store i32 %107, i32* %108, align 4
  %109 = or i64 %91, 1
  %110 = load i8, i8* %99, align 1
  %111 = getelementptr inbounds i8, i8* %92, i64 4
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %92, i64 5
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds i8, i8* %92, i64 6
  %116 = zext i8 %114 to i32
  %117 = shl nuw nsw i32 %116, 16
  %118 = zext i8 %112 to i32
  %119 = shl nuw nsw i32 %118, 8
  %120 = zext i8 %110 to i32
  %121 = or i32 %119, %120
  %122 = or i32 %121, %117
  %123 = or i32 %122, -16777216
  %124 = getelementptr inbounds i32, i32* %82, i64 %109
  store i32 %123, i32* %124, align 4
  %125 = add nuw nsw i64 %91, 2
  %126 = add i64 %93, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %90

128:                                              ; preds = %90, %84
  %129 = phi i64 [ 0, %84 ], [ %125, %90 ]
  %130 = phi i8* [ %81, %84 ], [ %115, %90 ]
  %131 = icmp eq i64 %86, 0
  br i1 %131, label %147, label %132

132:                                              ; preds = %128
  %133 = load i8, i8* %130, align 1
  %134 = getelementptr inbounds i8, i8* %130, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %130, i64 2
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = shl nuw nsw i32 %138, 16
  %140 = zext i8 %135 to i32
  %141 = shl nuw nsw i32 %140, 8
  %142 = zext i8 %133 to i32
  %143 = or i32 %141, %142
  %144 = or i32 %143, %139
  %145 = or i32 %144, -16777216
  %146 = getelementptr inbounds i32, i32* %82, i64 %129
  store i32 %145, i32* %146, align 4
  br label %147

147:                                              ; preds = %132, %128, %79
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse311RGB_to_BGR1EPjPKhi(i32*, i8*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 5
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -6
  %7 = add i32 %2, -6
  %8 = lshr i32 %7, 2
  %9 = add nuw nsw i32 %8, 1
  %10 = and i32 %9, 3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %5, %12
  %13 = phi i32* [ %24, %12 ], [ %0, %5 ]
  %14 = phi i8* [ %23, %12 ], [ %1, %5 ]
  %15 = phi i32 [ %25, %12 ], [ %2, %5 ]
  %16 = phi i32 [ %26, %12 ], [ %10, %5 ]
  %17 = bitcast i8* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 1, i32 0, i32 16, i32 5, i32 4, i32 3, i32 16, i32 8, i32 7, i32 6, i32 16, i32 11, i32 10, i32 9, i32 16>
  %20 = bitcast <16 x i8> %19 to <2 x i64>
  %21 = or <2 x i64> %20, <i64 -72057589759737856, i64 -72057589759737856>
  %22 = bitcast i32* %13 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %14, i64 12
  %24 = getelementptr inbounds i32, i32* %13, i64 4
  %25 = add nsw i32 %15, -4
  %26 = add i32 %16, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %12, !llvm.loop !27

28:                                               ; preds = %12, %5
  %29 = phi i32* [ %0, %5 ], [ %24, %12 ]
  %30 = phi i8* [ %1, %5 ], [ %23, %12 ]
  %31 = phi i32 [ %2, %5 ], [ %25, %12 ]
  %32 = phi i8* [ undef, %5 ], [ %23, %12 ]
  %33 = phi i32* [ undef, %5 ], [ %24, %12 ]
  %34 = icmp ult i32 %7, 12
  br i1 %34, label %73, label %35

35:                                               ; preds = %28, %35
  %36 = phi i32* [ %70, %35 ], [ %29, %28 ]
  %37 = phi i8* [ %69, %35 ], [ %30, %28 ]
  %38 = phi i32 [ %71, %35 ], [ %31, %28 ]
  %39 = bitcast i8* %37 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 1, i32 0, i32 16, i32 5, i32 4, i32 3, i32 16, i32 8, i32 7, i32 6, i32 16, i32 11, i32 10, i32 9, i32 16>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = or <2 x i64> %42, <i64 -72057589759737856, i64 -72057589759737856>
  %44 = bitcast i32* %36 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %37, i64 12
  %46 = getelementptr inbounds i32, i32* %36, i64 4
  %47 = bitcast i8* %45 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 1, i32 0, i32 16, i32 5, i32 4, i32 3, i32 16, i32 8, i32 7, i32 6, i32 16, i32 11, i32 10, i32 9, i32 16>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = or <2 x i64> %50, <i64 -72057589759737856, i64 -72057589759737856>
  %52 = bitcast i32* %46 to <2 x i64>*
  store <2 x i64> %51, <2 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %37, i64 24
  %54 = getelementptr inbounds i32, i32* %36, i64 8
  %55 = bitcast i8* %53 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 1, i32 0, i32 16, i32 5, i32 4, i32 3, i32 16, i32 8, i32 7, i32 6, i32 16, i32 11, i32 10, i32 9, i32 16>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = or <2 x i64> %58, <i64 -72057589759737856, i64 -72057589759737856>
  %60 = bitcast i32* %54 to <2 x i64>*
  store <2 x i64> %59, <2 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %37, i64 36
  %62 = getelementptr inbounds i32, i32* %36, i64 12
  %63 = bitcast i8* %61 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 1, i32 0, i32 16, i32 5, i32 4, i32 3, i32 16, i32 8, i32 7, i32 6, i32 16, i32 11, i32 10, i32 9, i32 16>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = or <2 x i64> %66, <i64 -72057589759737856, i64 -72057589759737856>
  %68 = bitcast i32* %62 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %37, i64 48
  %70 = getelementptr inbounds i32, i32* %36, i64 16
  %71 = add nsw i32 %38, -16
  %72 = icmp sgt i32 %71, 5
  br i1 %72, label %35, label %73

73:                                               ; preds = %35, %28
  %74 = phi i8* [ %32, %28 ], [ %69, %35 ]
  %75 = phi i32* [ %33, %28 ], [ %70, %35 ]
  %76 = and i32 %6, -4
  %77 = add i32 %2, -4
  %78 = sub i32 %77, %76
  br label %79

79:                                               ; preds = %3, %73
  %80 = phi i32 [ %2, %3 ], [ %78, %73 ]
  %81 = phi i8* [ %1, %3 ], [ %74, %73 ]
  %82 = phi i32* [ %0, %3 ], [ %75, %73 ]
  %83 = icmp sgt i32 %80, 0
  br i1 %83, label %84, label %147

84:                                               ; preds = %79
  %85 = zext i32 %80 to i64
  %86 = and i64 %85, 1
  %87 = icmp eq i32 %80, 1
  br i1 %87, label %128, label %88

88:                                               ; preds = %84
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %125, %90 ]
  %92 = phi i8* [ %81, %88 ], [ %115, %90 ]
  %93 = phi i64 [ %89, %88 ], [ %126, %90 ]
  %94 = load i8, i8* %92, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds i8, i8* %92, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds i8, i8* %92, i64 3
  %100 = zext i8 %94 to i32
  %101 = shl nuw nsw i32 %100, 16
  %102 = zext i8 %96 to i32
  %103 = shl nuw nsw i32 %102, 8
  %104 = zext i8 %98 to i32
  %105 = or i32 %101, %103
  %106 = or i32 %105, %104
  %107 = or i32 %106, -16777216
  %108 = getelementptr inbounds i32, i32* %82, i64 %91
  store i32 %107, i32* %108, align 4
  %109 = or i64 %91, 1
  %110 = load i8, i8* %99, align 1
  %111 = getelementptr inbounds i8, i8* %92, i64 4
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %92, i64 5
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds i8, i8* %92, i64 6
  %116 = zext i8 %110 to i32
  %117 = shl nuw nsw i32 %116, 16
  %118 = zext i8 %112 to i32
  %119 = shl nuw nsw i32 %118, 8
  %120 = zext i8 %114 to i32
  %121 = or i32 %117, %119
  %122 = or i32 %121, %120
  %123 = or i32 %122, -16777216
  %124 = getelementptr inbounds i32, i32* %82, i64 %109
  store i32 %123, i32* %124, align 4
  %125 = add nuw nsw i64 %91, 2
  %126 = add i64 %93, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %90

128:                                              ; preds = %90, %84
  %129 = phi i64 [ 0, %84 ], [ %125, %90 ]
  %130 = phi i8* [ %81, %84 ], [ %115, %90 ]
  %131 = icmp eq i64 %86, 0
  br i1 %131, label %147, label %132

132:                                              ; preds = %128
  %133 = load i8, i8* %130, align 1
  %134 = getelementptr inbounds i8, i8* %130, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %130, i64 2
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %133 to i32
  %139 = shl nuw nsw i32 %138, 16
  %140 = zext i8 %135 to i32
  %141 = shl nuw nsw i32 %140, 8
  %142 = zext i8 %137 to i32
  %143 = or i32 %139, %141
  %144 = or i32 %143, %142
  %145 = or i32 %144, -16777216
  %146 = getelementptr inbounds i32, i32* %82, i64 %129
  store i32 %145, i32* %146, align 4
  br label %147

147:                                              ; preds = %132, %128, %79
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse312gray_to_RGB1EPjPKhi(i32*, i8*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %36

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %31, %5 ], [ %0, %3 ]
  %7 = phi i8* [ %30, %5 ], [ %1, %3 ]
  %8 = phi i32 [ %32, %5 ], [ %2, %3 ]
  %9 = bitcast i8* %7 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %12 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %13 = shufflevector <16 x i8> %10, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %10, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %11 to <8 x i16>
  %16 = bitcast <16 x i8> %13 to <8 x i16>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %16, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %18 = shufflevector <8 x i16> %15, <8 x i16> %16, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %19 = bitcast <16 x i8> %12 to <8 x i16>
  %20 = bitcast <16 x i8> %14 to <8 x i16>
  %21 = shufflevector <8 x i16> %19, <8 x i16> %20, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = shufflevector <8 x i16> %19, <8 x i16> %20, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %23 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %23, align 1
  %24 = getelementptr inbounds i32, i32* %6, i64 4
  %25 = bitcast i32* %24 to <8 x i16>*
  store <8 x i16> %18, <8 x i16>* %25, align 1
  %26 = getelementptr inbounds i32, i32* %6, i64 8
  %27 = bitcast i32* %26 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %27, align 1
  %28 = getelementptr inbounds i32, i32* %6, i64 12
  %29 = bitcast i32* %28 to <8 x i16>*
  store <8 x i16> %22, <8 x i16>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %7, i64 16
  %31 = getelementptr inbounds i32, i32* %6, i64 16
  %32 = add nsw i32 %8, -16
  %33 = icmp sgt i32 %32, 15
  br i1 %33, label %5, label %34

34:                                               ; preds = %5
  %35 = and i32 %2, 15
  br label %36

36:                                               ; preds = %34, %3
  %37 = phi i32 [ %2, %3 ], [ %35, %34 ]
  %38 = phi i8* [ %1, %3 ], [ %30, %34 ]
  %39 = phi i32* [ %0, %3 ], [ %31, %34 ]
  %40 = bitcast i32* %39 to i8*
  %41 = icmp sgt i32 %37, 0
  br i1 %41, label %42, label %125

42:                                               ; preds = %36
  %43 = zext i32 %37 to i64
  %44 = icmp ult i32 %37, 8
  br i1 %44, label %82, label %45

45:                                               ; preds = %42
  %46 = getelementptr i32, i32* %39, i64 %43
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr i8, i8* %38, i64 %43
  %49 = icmp ugt i8* %48, %40
  %50 = icmp ult i8* %38, %47
  %51 = and i1 %49, %50
  br i1 %51, label %82, label %52

52:                                               ; preds = %45
  %53 = and i64 %43, 4294967288
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %78, %54 ]
  %56 = getelementptr inbounds i8, i8* %38, i64 %55
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1, !alias.scope !28
  %59 = getelementptr inbounds i8, i8* %56, i64 4
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1, !alias.scope !28
  %62 = zext <4 x i8> %58 to <4 x i32>
  %63 = zext <4 x i8> %61 to <4 x i32>
  %64 = shl nuw nsw <4 x i32> %62, <i32 16, i32 16, i32 16, i32 16>
  %65 = shl nuw nsw <4 x i32> %63, <i32 16, i32 16, i32 16, i32 16>
  %66 = shl nuw nsw <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %67 = shl nuw nsw <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %68 = or <4 x i32> %66, %62
  %69 = or <4 x i32> %67, %63
  %70 = or <4 x i32> %68, %64
  %71 = or <4 x i32> %69, %65
  %72 = or <4 x i32> %70, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %73 = or <4 x i32> %71, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %74 = getelementptr inbounds i32, i32* %39, i64 %55
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !31, !noalias !28
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %77, align 4, !alias.scope !31, !noalias !28
  %78 = add i64 %55, 8
  %79 = icmp eq i64 %78, %53
  br i1 %79, label %80, label %54, !llvm.loop !33

80:                                               ; preds = %54
  %81 = icmp eq i64 %53, %43
  br i1 %81, label %125, label %82

82:                                               ; preds = %80, %45, %42
  %83 = phi i64 [ 0, %45 ], [ 0, %42 ], [ %53, %80 ]
  %84 = xor i64 %83, -1
  %85 = and i64 %43, 1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds i8, i8* %38, i64 %83
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 16
  %92 = shl nuw nsw i32 %90, 8
  %93 = or i32 %92, %90
  %94 = or i32 %93, %91
  %95 = or i32 %94, -16777216
  %96 = getelementptr inbounds i32, i32* %39, i64 %83
  store i32 %95, i32* %96, align 4
  %97 = or i64 %83, 1
  br label %98

98:                                               ; preds = %82, %87
  %99 = phi i64 [ %83, %82 ], [ %97, %87 ]
  %100 = sub nsw i64 0, %43
  %101 = icmp eq i64 %84, %100
  br i1 %101, label %125, label %102

102:                                              ; preds = %98, %102
  %103 = phi i64 [ %123, %102 ], [ %99, %98 ]
  %104 = getelementptr inbounds i8, i8* %38, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl nuw nsw i32 %106, 16
  %108 = shl nuw nsw i32 %106, 8
  %109 = or i32 %108, %106
  %110 = or i32 %109, %107
  %111 = or i32 %110, -16777216
  %112 = getelementptr inbounds i32, i32* %39, i64 %103
  store i32 %111, i32* %112, align 4
  %113 = add nuw nsw i64 %103, 1
  %114 = getelementptr inbounds i8, i8* %38, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = shl nuw nsw i32 %116, 16
  %118 = shl nuw nsw i32 %116, 8
  %119 = or i32 %118, %116
  %120 = or i32 %119, %117
  %121 = or i32 %120, -16777216
  %122 = getelementptr inbounds i32, i32* %39, i64 %113
  store i32 %121, i32* %122, align 4
  %123 = add nuw nsw i64 %103, 2
  %124 = icmp eq i64 %123, %43
  br i1 %124, label %125, label %102, !llvm.loop !34

125:                                              ; preds = %98, %102, %80, %36
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse313grayA_to_RGBAEPjPKhi(i32*, i8*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %64

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -8
  %7 = and i32 %6, 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %5
  %10 = bitcast i8* %1 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 1
  %12 = shl <8 x i16> %11, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %13 = and <8 x i16> %11, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %14 = or <8 x i16> %12, %13
  %15 = shufflevector <8 x i16> %14, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> %11, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast i32* %0 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %17, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = bitcast i32* %18 to <8 x i16>*
  store <8 x i16> %16, <8 x i16>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %1, i64 16
  %21 = getelementptr inbounds i32, i32* %0, i64 8
  %22 = add nsw i32 %2, -8
  br label %23

23:                                               ; preds = %9, %5
  %24 = phi i32* [ %0, %5 ], [ %21, %9 ]
  %25 = phi i8* [ %1, %5 ], [ %20, %9 ]
  %26 = phi i32 [ %2, %5 ], [ %22, %9 ]
  %27 = phi i8* [ undef, %5 ], [ %20, %9 ]
  %28 = phi i32* [ undef, %5 ], [ %21, %9 ]
  %29 = icmp ult i32 %6, 8
  br i1 %29, label %60, label %30

30:                                               ; preds = %23, %30
  %31 = phi i32* [ %57, %30 ], [ %24, %23 ]
  %32 = phi i8* [ %56, %30 ], [ %25, %23 ]
  %33 = phi i32 [ %58, %30 ], [ %26, %23 ]
  %34 = bitcast i8* %32 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = shl <8 x i16> %35, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = and <8 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %38 = or <8 x i16> %36, %37
  %39 = shufflevector <8 x i16> %38, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %40 = shufflevector <8 x i16> %38, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %41 = bitcast i32* %31 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %41, align 1
  %42 = getelementptr inbounds i32, i32* %31, i64 4
  %43 = bitcast i32* %42 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %32, i64 16
  %45 = getelementptr inbounds i32, i32* %31, i64 8
  %46 = bitcast i8* %44 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = shl <8 x i16> %47, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %49 = and <8 x i16> %47, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %50 = or <8 x i16> %48, %49
  %51 = shufflevector <8 x i16> %50, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = shufflevector <8 x i16> %50, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %53 = bitcast i32* %45 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 1
  %54 = getelementptr inbounds i32, i32* %31, i64 12
  %55 = bitcast i32* %54 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %32, i64 32
  %57 = getelementptr inbounds i32, i32* %31, i64 16
  %58 = add nsw i32 %33, -16
  %59 = icmp sgt i32 %58, 7
  br i1 %59, label %30, label %60

60:                                               ; preds = %30, %23
  %61 = phi i8* [ %27, %23 ], [ %56, %30 ]
  %62 = phi i32* [ %28, %23 ], [ %57, %30 ]
  %63 = and i32 %2, 7
  br label %64

64:                                               ; preds = %60, %3
  %65 = phi i32 [ %2, %3 ], [ %63, %60 ]
  %66 = phi i8* [ %1, %3 ], [ %61, %60 ]
  %67 = phi i32* [ %0, %3 ], [ %62, %60 ]
  %68 = bitcast i32* %67 to i8*
  %69 = icmp sgt i32 %65, 0
  br i1 %69, label %70, label %165

70:                                               ; preds = %64
  %71 = zext i32 %65 to i64
  %72 = icmp ult i32 %65, 4
  br i1 %72, label %107, label %73

73:                                               ; preds = %70
  %74 = getelementptr i32, i32* %67, i64 %71
  %75 = bitcast i32* %74 to i8*
  %76 = shl nuw nsw i64 %71, 1
  %77 = getelementptr i8, i8* %66, i64 %76
  %78 = icmp ugt i8* %77, %68
  %79 = icmp ult i8* %66, %75
  %80 = and i1 %78, %79
  br i1 %80, label %107, label %81

81:                                               ; preds = %73
  %82 = and i64 %71, 4294967292
  %83 = shl nuw nsw i64 %82, 1
  %84 = getelementptr i8, i8* %66, i64 %83
  br label %85

85:                                               ; preds = %85, %81
  %86 = phi i64 [ 0, %81 ], [ %103, %85 ]
  %87 = shl i64 %86, 1
  %88 = getelementptr i8, i8* %66, i64 %87
  %89 = bitcast i8* %88 to <8 x i8>*
  %90 = load <8 x i8>, <8 x i8>* %89, align 1
  %91 = shufflevector <8 x i8> %90, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %92 = shufflevector <8 x i8> %90, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %93 = zext <4 x i8> %92 to <4 x i32>
  %94 = shl nuw <4 x i32> %93, <i32 24, i32 24, i32 24, i32 24>
  %95 = zext <4 x i8> %91 to <4 x i32>
  %96 = shl nuw nsw <4 x i32> %95, <i32 16, i32 16, i32 16, i32 16>
  %97 = shl nuw nsw <4 x i32> %95, <i32 8, i32 8, i32 8, i32 8>
  %98 = or <4 x i32> %96, %95
  %99 = or <4 x i32> %98, %97
  %100 = or <4 x i32> %99, %94
  %101 = getelementptr inbounds i32, i32* %67, i64 %86
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4, !alias.scope !35, !noalias !38
  %103 = add i64 %86, 4
  %104 = icmp eq i64 %103, %82
  br i1 %104, label %105, label %85, !llvm.loop !40

105:                                              ; preds = %85
  %106 = icmp eq i64 %82, %71
  br i1 %106, label %165, label %107

107:                                              ; preds = %105, %73, %70
  %108 = phi i64 [ 0, %73 ], [ 0, %70 ], [ %82, %105 ]
  %109 = phi i8* [ %66, %73 ], [ %66, %70 ], [ %84, %105 ]
  %110 = xor i64 %108, -1
  %111 = and i64 %71, 1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %128, label %113

113:                                              ; preds = %107
  %114 = load i8, i8* %109, align 1
  %115 = getelementptr inbounds i8, i8* %109, i64 1
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds i8, i8* %109, i64 2
  %118 = zext i8 %116 to i32
  %119 = shl nuw i32 %118, 24
  %120 = zext i8 %114 to i32
  %121 = shl nuw nsw i32 %120, 16
  %122 = shl nuw nsw i32 %120, 8
  %123 = or i32 %121, %120
  %124 = or i32 %123, %122
  %125 = or i32 %124, %119
  %126 = getelementptr inbounds i32, i32* %67, i64 %108
  store i32 %125, i32* %126, align 4
  %127 = or i64 %108, 1
  br label %128

128:                                              ; preds = %107, %113
  %129 = phi i64 [ %108, %107 ], [ %127, %113 ]
  %130 = phi i8* [ %109, %107 ], [ %117, %113 ]
  %131 = sub nsw i64 0, %71
  %132 = icmp eq i64 %110, %131
  br i1 %132, label %165, label %133

133:                                              ; preds = %128, %133
  %134 = phi i64 [ %163, %133 ], [ %129, %128 ]
  %135 = phi i8* [ %153, %133 ], [ %130, %128 ]
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds i8, i8* %135, i64 1
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds i8, i8* %135, i64 2
  %140 = zext i8 %138 to i32
  %141 = shl nuw i32 %140, 24
  %142 = zext i8 %136 to i32
  %143 = shl nuw nsw i32 %142, 16
  %144 = shl nuw nsw i32 %142, 8
  %145 = or i32 %143, %142
  %146 = or i32 %145, %144
  %147 = or i32 %146, %141
  %148 = getelementptr inbounds i32, i32* %67, i64 %134
  store i32 %147, i32* %148, align 4
  %149 = add nuw nsw i64 %134, 1
  %150 = load i8, i8* %139, align 1
  %151 = getelementptr inbounds i8, i8* %135, i64 3
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %135, i64 4
  %154 = zext i8 %152 to i32
  %155 = shl nuw i32 %154, 24
  %156 = zext i8 %150 to i32
  %157 = shl nuw nsw i32 %156, 16
  %158 = shl nuw nsw i32 %156, 8
  %159 = or i32 %157, %156
  %160 = or i32 %159, %158
  %161 = or i32 %160, %155
  %162 = getelementptr inbounds i32, i32* %67, i64 %149
  store i32 %161, i32* %162, align 4
  %163 = add nuw nsw i64 %134, 2
  %164 = icmp eq i64 %163, %71
  br i1 %164, label %165, label %133, !llvm.loop !41

165:                                              ; preds = %128, %133, %105, %64
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse313grayA_to_rgbAEPjPKhi(i32*, i8*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %31

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %26, %5 ], [ %0, %3 ]
  %7 = phi i8* [ %25, %5 ], [ %1, %3 ]
  %8 = phi i32 [ %27, %5 ], [ %2, %3 ]
  %9 = bitcast i8* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = lshr <8 x i16> %10, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %12 = and <8 x i16> %10, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %13 = mul nuw <8 x i16> %11, %12
  %14 = add <8 x i16> %13, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %15 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %14, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %16 = shl <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = or <8 x i16> %16, %15
  %18 = and <8 x i16> %10, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %19 = or <8 x i16> %18, %15
  %20 = shufflevector <8 x i16> %17, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = shufflevector <8 x i16> %17, <8 x i16> %19, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %22 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %22, align 1
  %23 = getelementptr inbounds i32, i32* %6, i64 4
  %24 = bitcast i32* %23 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %7, i64 16
  %26 = getelementptr inbounds i32, i32* %6, i64 8
  %27 = add nsw i32 %8, -8
  %28 = icmp sgt i32 %27, 7
  br i1 %28, label %5, label %29

29:                                               ; preds = %5
  %30 = and i32 %2, 7
  br label %31

31:                                               ; preds = %29, %3
  %32 = phi i32 [ %2, %3 ], [ %30, %29 ]
  %33 = phi i8* [ %1, %3 ], [ %25, %29 ]
  %34 = phi i32* [ %0, %3 ], [ %26, %29 ]
  %35 = bitcast i32* %34 to i8*
  %36 = icmp sgt i32 %32, 0
  br i1 %36, label %37, label %109

37:                                               ; preds = %31
  %38 = zext i32 %32 to i64
  %39 = icmp ult i32 %32, 4
  br i1 %39, label %81, label %40

40:                                               ; preds = %37
  %41 = getelementptr i32, i32* %34, i64 %38
  %42 = bitcast i32* %41 to i8*
  %43 = shl nuw nsw i64 %38, 1
  %44 = getelementptr i8, i8* %33, i64 %43
  %45 = icmp ugt i8* %44, %35
  %46 = icmp ult i8* %33, %42
  %47 = and i1 %45, %46
  br i1 %47, label %81, label %48

48:                                               ; preds = %40
  %49 = and i64 %38, 4294967292
  %50 = shl nuw nsw i64 %49, 1
  %51 = getelementptr i8, i8* %33, i64 %50
  br label %52

52:                                               ; preds = %52, %48
  %53 = phi i64 [ 0, %48 ], [ %77, %52 ]
  %54 = shl i64 %53, 1
  %55 = getelementptr i8, i8* %33, i64 %54
  %56 = bitcast i8* %55 to <8 x i8>*
  %57 = load <8 x i8>, <8 x i8>* %56, align 1
  %58 = shufflevector <8 x i8> %57, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %59 = shufflevector <8 x i8> %57, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %60 = zext <4 x i8> %58 to <4 x i32>
  %61 = zext <4 x i8> %59 to <4 x i32>
  %62 = mul nuw nsw <4 x i32> %61, %60
  %63 = trunc <4 x i32> %62 to <4 x i16>
  %64 = add nuw <4 x i16> %63, <i16 127, i16 127, i16 127, i16 127>
  %65 = udiv <4 x i16> %64, <i16 255, i16 255, i16 255, i16 255>
  %66 = shl nuw <4 x i32> %61, <i32 24, i32 24, i32 24, i32 24>
  %67 = and <4 x i16> %65, <i16 255, i16 255, i16 255, i16 255>
  %68 = zext <4 x i16> %67 to <4 x i32>
  %69 = shl nuw nsw <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  %70 = shl <4 x i16> %65, <i16 8, i16 8, i16 8, i16 8>
  %71 = zext <4 x i16> %70 to <4 x i32>
  %72 = or <4 x i32> %66, %71
  %73 = or <4 x i32> %72, %68
  %74 = or <4 x i32> %73, %69
  %75 = getelementptr inbounds i32, i32* %34, i64 %53
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %76, align 4, !alias.scope !42, !noalias !45
  %77 = add i64 %53, 4
  %78 = icmp eq i64 %77, %49
  br i1 %78, label %79, label %52, !llvm.loop !47

79:                                               ; preds = %52
  %80 = icmp eq i64 %49, %38
  br i1 %80, label %109, label %81

81:                                               ; preds = %79, %40, %37
  %82 = phi i64 [ 0, %40 ], [ 0, %37 ], [ %49, %79 ]
  %83 = phi i8* [ %33, %40 ], [ %33, %37 ], [ %51, %79 ]
  br label %84

84:                                               ; preds = %81, %84
  %85 = phi i64 [ %107, %84 ], [ %82, %81 ]
  %86 = phi i8* [ %90, %84 ], [ %83, %81 ]
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 1
  %89 = load i8, i8* %88, align 1
  %90 = getelementptr inbounds i8, i8* %86, i64 2
  %91 = zext i8 %87 to i32
  %92 = zext i8 %89 to i32
  %93 = mul nuw nsw i32 %92, %91
  %94 = trunc i32 %93 to i16
  %95 = add nuw i16 %94, 127
  %96 = udiv i16 %95, 255
  %97 = shl nuw i32 %92, 24
  %98 = and i16 %96, 255
  %99 = zext i16 %98 to i32
  %100 = shl nuw nsw i32 %99, 16
  %101 = shl i16 %96, 8
  %102 = zext i16 %101 to i32
  %103 = or i32 %97, %102
  %104 = or i32 %103, %99
  %105 = or i32 %104, %100
  %106 = getelementptr inbounds i32, i32* %34, i64 %85
  store i32 %105, i32* %106, align 4
  %107 = add nuw nsw i64 %85, 1
  %108 = icmp eq i64 %107, %38
  br i1 %108, label %109, label %84, !llvm.loop !48

109:                                              ; preds = %84, %79, %31
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse321inverted_CMYK_to_RGB1EPjPKji(i32*, i32*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %53

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %48, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %49, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %47, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 4
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %15 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %16 = bitcast <16 x i8> %14 to <4 x i32>
  %17 = bitcast <16 x i8> %15 to <4 x i32>
  %18 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %19 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %21 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %27, %26
  %29 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <16 x i8> %22 to <8 x i16>
  %32 = mul <8 x i16> %27, %31
  %33 = add <8 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %33, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <16 x i8> %24 to <8 x i16>
  %36 = mul <8 x i16> %27, %35
  %37 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <8 x i16> %39, %30
  %41 = or <8 x i16> %38, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %42 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %43 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %44 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %44, align 1
  %45 = getelementptr inbounds i32, i32* %6, i64 4
  %46 = bitcast i32* %45 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %46, align 1
  %47 = getelementptr inbounds i32, i32* %8, i64 8
  %48 = getelementptr inbounds i32, i32* %6, i64 8
  %49 = add nsw i32 %7, -8
  %50 = icmp sgt i32 %49, 7
  br i1 %50, label %5, label %51

51:                                               ; preds = %5
  %52 = and i32 %2, 7
  br label %53

53:                                               ; preds = %51, %3
  %54 = phi i32* [ %1, %3 ], [ %47, %51 ]
  %55 = phi i32 [ %2, %3 ], [ %52, %51 ]
  %56 = phi i32* [ %0, %3 ], [ %48, %51 ]
  %57 = icmp sgt i32 %55, 3
  br i1 %57, label %58, label %92

58:                                               ; preds = %53
  %59 = bitcast i32* %54 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = shufflevector <4 x i32> %62, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %64 = shufflevector <4 x i32> %62, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %65 = bitcast <4 x i32> %63 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %65, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <4 x i32> %64 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i8> %66 to <8 x i16>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = mul <8 x i16> %72, %71
  %74 = add <8 x i16> %73, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %75 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %74, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %76 = bitcast <16 x i8> %67 to <8 x i16>
  %77 = mul <8 x i16> %72, %76
  %78 = add <8 x i16> %77, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %78, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %80 = bitcast <16 x i8> %69 to <8 x i16>
  %81 = mul <8 x i16> %72, %80
  %82 = add <8 x i16> %81, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %82, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %84 = shl <8 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = or <8 x i16> %84, %75
  %86 = or <8 x i16> %83, <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>
  %87 = shufflevector <8 x i16> %85, <8 x i16> %86, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %88 = bitcast i32* %56 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 1
  %89 = getelementptr inbounds i32, i32* %54, i64 4
  %90 = getelementptr inbounds i32, i32* %56, i64 4
  %91 = add nsw i32 %55, -4
  br label %92

92:                                               ; preds = %53, %58
  %93 = phi i32* [ %89, %58 ], [ %54, %53 ]
  %94 = phi i32 [ %91, %58 ], [ %55, %53 ]
  %95 = phi i32* [ %90, %58 ], [ %56, %53 ]
  %96 = icmp sgt i32 %94, 0
  br i1 %96, label %97, label %184

97:                                               ; preds = %92
  %98 = zext i32 %94 to i64
  %99 = icmp ult i32 %94, 4
  br i1 %99, label %147, label %100

100:                                              ; preds = %97
  %101 = getelementptr i32, i32* %95, i64 %98
  %102 = getelementptr i32, i32* %93, i64 %98
  %103 = icmp ult i32* %95, %102
  %104 = icmp ult i32* %93, %101
  %105 = and i1 %103, %104
  br i1 %105, label %147, label %106

106:                                              ; preds = %100
  %107 = and i64 %98, 4294967292
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ 0, %106 ], [ %143, %108 ]
  %110 = getelementptr inbounds i32, i32* %93, i64 %109
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !49
  %113 = lshr <4 x i32> %112, <i32 24, i32 24, i32 24, i32 24>
  %114 = lshr <4 x i32> %112, <i32 16, i32 16, i32 16, i32 16>
  %115 = lshr <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  %116 = and <4 x i32> %114, <i32 255, i32 255, i32 255, i32 255>
  %117 = mul nuw nsw <4 x i32> %116, %113
  %118 = trunc <4 x i32> %117 to <4 x i16>
  %119 = add nuw <4 x i16> %118, <i16 127, i16 127, i16 127, i16 127>
  %120 = udiv <4 x i16> %119, <i16 255, i16 255, i16 255, i16 255>
  %121 = zext <4 x i16> %120 to <4 x i32>
  %122 = and <4 x i32> %115, <i32 255, i32 255, i32 255, i32 255>
  %123 = mul nuw nsw <4 x i32> %122, %113
  %124 = trunc <4 x i32> %123 to <4 x i16>
  %125 = add nuw <4 x i16> %124, <i16 127, i16 127, i16 127, i16 127>
  %126 = udiv <4 x i16> %125, <i16 255, i16 255, i16 255, i16 255>
  %127 = zext <4 x i16> %126 to <4 x i32>
  %128 = and <4 x i32> %112, <i32 255, i32 255, i32 255, i32 255>
  %129 = mul nuw nsw <4 x i32> %128, %113
  %130 = trunc <4 x i32> %129 to <4 x i16>
  %131 = add nuw <4 x i16> %130, <i16 127, i16 127, i16 127, i16 127>
  %132 = udiv <4 x i16> %131, <i16 255, i16 255, i16 255, i16 255>
  %133 = shl nuw nsw <4 x i32> %121, <i32 16, i32 16, i32 16, i32 16>
  %134 = shl nuw nsw <4 x i32> %127, <i32 8, i32 8, i32 8, i32 8>
  %135 = and <4 x i32> %134, <i32 65280, i32 65280, i32 65280, i32 65280>
  %136 = and <4 x i16> %132, <i16 255, i16 255, i16 255, i16 255>
  %137 = zext <4 x i16> %136 to <4 x i32>
  %138 = or <4 x i32> %133, %137
  %139 = or <4 x i32> %138, %135
  %140 = or <4 x i32> %139, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %141 = getelementptr inbounds i32, i32* %95, i64 %109
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %142, align 4, !alias.scope !52, !noalias !49
  %143 = add i64 %109, 4
  %144 = icmp eq i64 %143, %107
  br i1 %144, label %145, label %108, !llvm.loop !54

145:                                              ; preds = %108
  %146 = icmp eq i64 %107, %98
  br i1 %146, label %184, label %147

147:                                              ; preds = %145, %100, %97
  %148 = phi i64 [ 0, %100 ], [ 0, %97 ], [ %107, %145 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %182, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i32, i32* %93, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = lshr i32 %152, 24
  %154 = lshr i32 %152, 16
  %155 = lshr i32 %152, 8
  %156 = and i32 %154, 255
  %157 = mul nuw nsw i32 %156, %153
  %158 = trunc i32 %157 to i16
  %159 = add nuw i16 %158, 127
  %160 = udiv i16 %159, 255
  %161 = zext i16 %160 to i32
  %162 = and i32 %155, 255
  %163 = mul nuw nsw i32 %162, %153
  %164 = trunc i32 %163 to i16
  %165 = add nuw i16 %164, 127
  %166 = udiv i16 %165, 255
  %167 = zext i16 %166 to i32
  %168 = and i32 %152, 255
  %169 = mul nuw nsw i32 %168, %153
  %170 = trunc i32 %169 to i16
  %171 = add nuw i16 %170, 127
  %172 = udiv i16 %171, 255
  %173 = shl nuw nsw i32 %161, 16
  %174 = shl nuw nsw i32 %167, 8
  %175 = and i32 %174, 65280
  %176 = and i16 %172, 255
  %177 = zext i16 %176 to i32
  %178 = or i32 %173, %177
  %179 = or i32 %178, %175
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %95, i64 %150
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %150, 1
  %183 = icmp eq i64 %182, %98
  br i1 %183, label %184, label %149, !llvm.loop !55

184:                                              ; preds = %149, %145, %92
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse321inverted_CMYK_to_BGR1EPjPKji(i32*, i32*, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %53

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %48, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %49, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %47, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 4
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = shufflevector <16 x i8> %10, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %15 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %16 = bitcast <16 x i8> %14 to <4 x i32>
  %17 = bitcast <16 x i8> %15 to <4 x i32>
  %18 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %19 = shufflevector <4 x i32> %16, <4 x i32> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %21 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %27, %26
  %29 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <16 x i8> %22 to <8 x i16>
  %32 = mul <8 x i16> %27, %31
  %33 = add <8 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %33, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <16 x i8> %24 to <8 x i16>
  %36 = mul <8 x i16> %27, %35
  %37 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <8 x i16> %39, %30
  %41 = or <8 x i16> %38, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %42 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %43 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %44 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %44, align 1
  %45 = getelementptr inbounds i32, i32* %6, i64 4
  %46 = bitcast i32* %45 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %46, align 1
  %47 = getelementptr inbounds i32, i32* %8, i64 8
  %48 = getelementptr inbounds i32, i32* %6, i64 8
  %49 = add nsw i32 %7, -8
  %50 = icmp sgt i32 %49, 7
  br i1 %50, label %5, label %51

51:                                               ; preds = %5
  %52 = and i32 %2, 7
  br label %53

53:                                               ; preds = %51, %3
  %54 = phi i32* [ %1, %3 ], [ %47, %51 ]
  %55 = phi i32 [ %2, %3 ], [ %52, %51 ]
  %56 = phi i32* [ %0, %3 ], [ %48, %51 ]
  %57 = icmp sgt i32 %55, 3
  br i1 %57, label %58, label %92

58:                                               ; preds = %53
  %59 = bitcast i32* %54 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15>
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = shufflevector <4 x i32> %62, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %64 = shufflevector <4 x i32> %62, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %65 = bitcast <4 x i32> %63 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %65, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <4 x i32> %64 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i8> %66 to <8 x i16>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = mul <8 x i16> %72, %71
  %74 = add <8 x i16> %73, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %75 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %74, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %76 = bitcast <16 x i8> %67 to <8 x i16>
  %77 = mul <8 x i16> %72, %76
  %78 = add <8 x i16> %77, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %78, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %80 = bitcast <16 x i8> %69 to <8 x i16>
  %81 = mul <8 x i16> %72, %80
  %82 = add <8 x i16> %81, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %82, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %84 = shl <8 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = or <8 x i16> %84, %75
  %86 = or <8 x i16> %83, <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>
  %87 = shufflevector <8 x i16> %85, <8 x i16> %86, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %88 = bitcast i32* %56 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 1
  %89 = getelementptr inbounds i32, i32* %54, i64 4
  %90 = getelementptr inbounds i32, i32* %56, i64 4
  %91 = add nsw i32 %55, -4
  br label %92

92:                                               ; preds = %53, %58
  %93 = phi i32* [ %89, %58 ], [ %54, %53 ]
  %94 = phi i32 [ %91, %58 ], [ %55, %53 ]
  %95 = phi i32* [ %90, %58 ], [ %56, %53 ]
  %96 = icmp sgt i32 %94, 0
  br i1 %96, label %97, label %184

97:                                               ; preds = %92
  %98 = zext i32 %94 to i64
  %99 = icmp ult i32 %94, 4
  br i1 %99, label %147, label %100

100:                                              ; preds = %97
  %101 = getelementptr i32, i32* %95, i64 %98
  %102 = getelementptr i32, i32* %93, i64 %98
  %103 = icmp ult i32* %95, %102
  %104 = icmp ult i32* %93, %101
  %105 = and i1 %103, %104
  br i1 %105, label %147, label %106

106:                                              ; preds = %100
  %107 = and i64 %98, 4294967292
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ 0, %106 ], [ %143, %108 ]
  %110 = getelementptr inbounds i32, i32* %93, i64 %109
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !56
  %113 = lshr <4 x i32> %112, <i32 24, i32 24, i32 24, i32 24>
  %114 = lshr <4 x i32> %112, <i32 16, i32 16, i32 16, i32 16>
  %115 = lshr <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  %116 = and <4 x i32> %114, <i32 255, i32 255, i32 255, i32 255>
  %117 = mul nuw nsw <4 x i32> %116, %113
  %118 = trunc <4 x i32> %117 to <4 x i16>
  %119 = add nuw <4 x i16> %118, <i16 127, i16 127, i16 127, i16 127>
  %120 = udiv <4 x i16> %119, <i16 255, i16 255, i16 255, i16 255>
  %121 = and <4 x i32> %115, <i32 255, i32 255, i32 255, i32 255>
  %122 = mul nuw nsw <4 x i32> %121, %113
  %123 = trunc <4 x i32> %122 to <4 x i16>
  %124 = add nuw <4 x i16> %123, <i16 127, i16 127, i16 127, i16 127>
  %125 = udiv <4 x i16> %124, <i16 255, i16 255, i16 255, i16 255>
  %126 = zext <4 x i16> %125 to <4 x i32>
  %127 = and <4 x i32> %112, <i32 255, i32 255, i32 255, i32 255>
  %128 = mul nuw nsw <4 x i32> %127, %113
  %129 = trunc <4 x i32> %128 to <4 x i16>
  %130 = add nuw <4 x i16> %129, <i16 127, i16 127, i16 127, i16 127>
  %131 = udiv <4 x i16> %130, <i16 255, i16 255, i16 255, i16 255>
  %132 = zext <4 x i16> %131 to <4 x i32>
  %133 = shl nuw nsw <4 x i32> %132, <i32 16, i32 16, i32 16, i32 16>
  %134 = shl nuw nsw <4 x i32> %126, <i32 8, i32 8, i32 8, i32 8>
  %135 = and <4 x i32> %134, <i32 65280, i32 65280, i32 65280, i32 65280>
  %136 = and <4 x i16> %120, <i16 255, i16 255, i16 255, i16 255>
  %137 = zext <4 x i16> %136 to <4 x i32>
  %138 = or <4 x i32> %133, %137
  %139 = or <4 x i32> %138, %135
  %140 = or <4 x i32> %139, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %141 = getelementptr inbounds i32, i32* %95, i64 %109
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %142, align 4, !alias.scope !59, !noalias !56
  %143 = add i64 %109, 4
  %144 = icmp eq i64 %143, %107
  br i1 %144, label %145, label %108, !llvm.loop !61

145:                                              ; preds = %108
  %146 = icmp eq i64 %107, %98
  br i1 %146, label %184, label %147

147:                                              ; preds = %145, %100, %97
  %148 = phi i64 [ 0, %100 ], [ 0, %97 ], [ %107, %145 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %182, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i32, i32* %93, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = lshr i32 %152, 24
  %154 = lshr i32 %152, 16
  %155 = lshr i32 %152, 8
  %156 = and i32 %154, 255
  %157 = mul nuw nsw i32 %156, %153
  %158 = trunc i32 %157 to i16
  %159 = add nuw i16 %158, 127
  %160 = udiv i16 %159, 255
  %161 = and i32 %155, 255
  %162 = mul nuw nsw i32 %161, %153
  %163 = trunc i32 %162 to i16
  %164 = add nuw i16 %163, 127
  %165 = udiv i16 %164, 255
  %166 = zext i16 %165 to i32
  %167 = and i32 %152, 255
  %168 = mul nuw nsw i32 %167, %153
  %169 = trunc i32 %168 to i16
  %170 = add nuw i16 %169, 127
  %171 = udiv i16 %170, 255
  %172 = zext i16 %171 to i32
  %173 = shl nuw nsw i32 %172, 16
  %174 = shl nuw nsw i32 %166, 8
  %175 = and i32 %174, 65280
  %176 = and i16 %160, 255
  %177 = zext i16 %176 to i32
  %178 = or i32 %173, %177
  %179 = or i32 %178, %175
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %95, i64 %150
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %150, 1
  %183 = icmp eq i64 %182, %98
  br i1 %183, label %184, label %149, !llvm.loop !62

184:                                              ; preds = %149, %145, %92
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ssse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj(%struct.SkBitmapProcState* dereferenceable(336), i32*, i32, i32*) #2 comdat {
  %5 = getelementptr inbounds i32, i32* %1, i64 1
  %6 = load i32, i32* %1, align 4
  %7 = lshr i32 %6, 18
  %8 = and i32 %6, 16383
  %9 = lshr i32 %6, 14
  %10 = and i32 %9, 15
  %11 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = zext i32 %7 to i64
  %14 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = mul i64 %15, %13
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = bitcast i8* %17 to i32*
  %19 = zext i32 %8 to i64
  %20 = mul i64 %15, %19
  %21 = getelementptr inbounds i8, i8* %12, i64 %20
  %22 = bitcast i8* %21 to i32*
  %23 = icmp sgt i32 %2, 3
  br i1 %23, label %24, label %31

24:                                               ; preds = %4
  %25 = trunc i32 %10 to i16
  %26 = insertelement <8 x i16> undef, i16 %25, i32 0
  %27 = shufflevector <8 x i16> %26, <8 x i16> undef, <8 x i32> zeroinitializer
  %28 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %41

29:                                               ; preds = %194
  %30 = and i32 %2, 3
  br label %31

31:                                               ; preds = %29, %4
  %32 = phi i32* [ %3, %4 ], [ %199, %29 ]
  %33 = phi i32 [ %2, %4 ], [ %30, %29 ]
  %34 = phi i32* [ %5, %4 ], [ %198, %29 ]
  %35 = icmp sgt i32 %33, 0
  br i1 %35, label %36, label %265

36:                                               ; preds = %31
  %37 = trunc i32 %10 to i16
  %38 = insertelement <8 x i16> undef, i16 %37, i32 0
  %39 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> zeroinitializer
  %40 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %202

41:                                               ; preds = %24, %194
  %42 = phi i32* [ %5, %24 ], [ %198, %194 ]
  %43 = phi i32 [ %2, %24 ], [ %200, %194 ]
  %44 = phi i32* [ %3, %24 ], [ %199, %194 ]
  %45 = bitcast i32* %42 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 1
  %47 = bitcast <2 x i64> %46 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 18, i32 18, i32 18, i32 18>
  %49 = and <2 x i64> %46, <i64 70364449226751, i64 70364449226751>
  %50 = lshr <4 x i32> %47, <i32 14, i32 14, i32 14, i32 14>
  %51 = bitcast <4 x i32> %50 to <16 x i8>
  %52 = and <16 x i8> %51, <i8 15, i8 undef, i8 undef, i8 undef, i8 15, i8 undef, i8 undef, i8 undef, i8 15, i8 undef, i8 undef, i8 undef, i8 15, i8 undef, i8 undef, i8 undef>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 8, i32 12, i32 12, i32 12, i32 12>
  %54 = sub <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>, %53
  %55 = shufflevector <16 x i8> %54, <16 x i8> %53, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %54, <16 x i8> %53, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %57 = bitcast <4 x i32> %48 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = shl i64 %58, 32
  %60 = ashr exact i64 %59, 32
  %61 = getelementptr inbounds i32, i32* %18, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = extractelement <2 x i64> %49, i32 0
  %64 = and i64 %63, 16383
  %65 = getelementptr inbounds i32, i32* %18, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds i32, i32* %22, i64 %60
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds i32, i32* %22, i64 %64
  %70 = load i32, i32* %69, align 4
  %71 = extractelement <4 x i32> %48, i32 1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %18, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = bitcast <2 x i64> %49 to <4 x i32>
  %76 = extractelement <4 x i32> %75, i32 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %18, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds i32, i32* %22, i64 %72
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds i32, i32* %22, i64 %77
  %83 = load i32, i32* %82, align 4
  %84 = insertelement <4 x i32> undef, i32 %62, i32 0
  %85 = insertelement <4 x i32> undef, i32 %66, i32 0
  %86 = bitcast <4 x i32> %84 to <16 x i8>
  %87 = bitcast <4 x i32> %85 to <16 x i8>
  %88 = shufflevector <16 x i8> %86, <16 x i8> %87, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  %90 = insertelement <4 x i32> undef, i32 %74, i32 0
  %91 = insertelement <4 x i32> undef, i32 %79, i32 0
  %92 = bitcast <4 x i32> %90 to <16 x i8>
  %93 = bitcast <4 x i32> %91 to <16 x i8>
  %94 = shufflevector <16 x i8> %92, <16 x i8> %93, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = shufflevector <2 x i64> %89, <2 x i64> %95, <2 x i32> <i32 0, i32 2>
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %55) #13
  %99 = insertelement <4 x i32> undef, i32 %68, i32 0
  %100 = insertelement <4 x i32> undef, i32 %70, i32 0
  %101 = bitcast <4 x i32> %99 to <16 x i8>
  %102 = bitcast <4 x i32> %100 to <16 x i8>
  %103 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <2 x i64>
  %105 = insertelement <4 x i32> undef, i32 %81, i32 0
  %106 = insertelement <4 x i32> undef, i32 %83, i32 0
  %107 = bitcast <4 x i32> %105 to <16 x i8>
  %108 = bitcast <4 x i32> %106 to <16 x i8>
  %109 = shufflevector <16 x i8> %107, <16 x i8> %108, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <16 x i8> %109 to <2 x i64>
  %111 = shufflevector <2 x i64> %104, <2 x i64> %110, <2 x i32> <i32 0, i32 2>
  %112 = bitcast <2 x i64> %111 to <16 x i8>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %55) #13
  %114 = shl <8 x i16> %98, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %115 = sub <8 x i16> %113, %98
  %116 = mul <8 x i16> %115, %27
  %117 = add <8 x i16> %116, %114
  %118 = lshr <8 x i16> %117, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = load i16, i16* %28, align 8
  %120 = icmp ult i16 %119, 256
  %121 = extractelement <4 x i32> %48, i32 2
  %122 = bitcast <2 x i64> %49 to <4 x i32>
  %123 = extractelement <4 x i32> %122, i32 2
  %124 = extractelement <4 x i32> %48, i32 3
  %125 = bitcast <2 x i64> %49 to <4 x i32>
  %126 = extractelement <4 x i32> %125, i32 3
  br i1 %120, label %127, label %132

127:                                              ; preds = %41
  %128 = insertelement <8 x i16> undef, i16 %119, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  %130 = mul <8 x i16> %118, %129
  %131 = lshr <8 x i16> %130, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %132

132:                                              ; preds = %41, %127
  %133 = phi <8 x i16> [ %131, %127 ], [ %118, %41 ]
  %134 = zext i32 %121 to i64
  %135 = getelementptr inbounds i32, i32* %18, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %123 to i64
  %138 = getelementptr inbounds i32, i32* %18, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds i32, i32* %22, i64 %134
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds i32, i32* %22, i64 %137
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %124 to i64
  %145 = getelementptr inbounds i32, i32* %18, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = sext i32 %126 to i64
  %148 = getelementptr inbounds i32, i32* %18, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds i32, i32* %22, i64 %144
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %22, i64 %147
  %153 = load i32, i32* %152, align 4
  %154 = insertelement <4 x i32> undef, i32 %136, i32 0
  %155 = insertelement <4 x i32> undef, i32 %139, i32 0
  %156 = bitcast <4 x i32> %154 to <16 x i8>
  %157 = bitcast <4 x i32> %155 to <16 x i8>
  %158 = shufflevector <16 x i8> %156, <16 x i8> %157, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <16 x i8> %158 to <2 x i64>
  %160 = insertelement <4 x i32> undef, i32 %146, i32 0
  %161 = insertelement <4 x i32> undef, i32 %149, i32 0
  %162 = bitcast <4 x i32> %160 to <16 x i8>
  %163 = bitcast <4 x i32> %161 to <16 x i8>
  %164 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %165 = bitcast <16 x i8> %164 to <2 x i64>
  %166 = shufflevector <2 x i64> %159, <2 x i64> %165, <2 x i32> <i32 0, i32 2>
  %167 = bitcast <2 x i64> %166 to <16 x i8>
  %168 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %167, <16 x i8> %56) #13
  %169 = insertelement <4 x i32> undef, i32 %141, i32 0
  %170 = insertelement <4 x i32> undef, i32 %143, i32 0
  %171 = bitcast <4 x i32> %169 to <16 x i8>
  %172 = bitcast <4 x i32> %170 to <16 x i8>
  %173 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = bitcast <16 x i8> %173 to <2 x i64>
  %175 = insertelement <4 x i32> undef, i32 %151, i32 0
  %176 = insertelement <4 x i32> undef, i32 %153, i32 0
  %177 = bitcast <4 x i32> %175 to <16 x i8>
  %178 = bitcast <4 x i32> %176 to <16 x i8>
  %179 = shufflevector <16 x i8> %177, <16 x i8> %178, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = bitcast <16 x i8> %179 to <2 x i64>
  %181 = shufflevector <2 x i64> %174, <2 x i64> %180, <2 x i32> <i32 0, i32 2>
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %182, <16 x i8> %56) #13
  %184 = shl <8 x i16> %168, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %185 = sub <8 x i16> %183, %168
  %186 = mul <8 x i16> %185, %27
  %187 = add <8 x i16> %186, %184
  %188 = lshr <8 x i16> %187, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br i1 %120, label %189, label %194

189:                                              ; preds = %132
  %190 = insertelement <8 x i16> undef, i16 %119, i32 0
  %191 = shufflevector <8 x i16> %190, <8 x i16> undef, <8 x i32> zeroinitializer
  %192 = mul <8 x i16> %188, %191
  %193 = lshr <8 x i16> %192, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %194

194:                                              ; preds = %132, %189
  %195 = phi <8 x i16> [ %193, %189 ], [ %188, %132 ]
  %196 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %133, <8 x i16> %195) #13
  %197 = bitcast i32* %44 to <16 x i8>*
  store <16 x i8> %196, <16 x i8>* %197, align 1
  %198 = getelementptr inbounds i32, i32* %42, i64 4
  %199 = getelementptr inbounds i32, i32* %44, i64 4
  %200 = add nsw i32 %43, -4
  %201 = icmp sgt i32 %200, 3
  br i1 %201, label %41, label %29

202:                                              ; preds = %36, %258
  %203 = phi i32* [ %34, %36 ], [ %207, %258 ]
  %204 = phi i32 [ %33, %36 ], [ %206, %258 ]
  %205 = phi i32* [ %32, %36 ], [ %263, %258 ]
  %206 = add nsw i32 %204, -1
  %207 = getelementptr inbounds i32, i32* %203, i64 1
  %208 = load i32, i32* %203, align 4
  %209 = lshr i32 %208, 18
  %210 = and i32 %208, 16383
  %211 = lshr i32 %208, 14
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 15
  %214 = insertelement <16 x i8> undef, i8 %213, i32 0
  %215 = shufflevector <16 x i8> %214, <16 x i8> undef, <16 x i32> zeroinitializer
  %216 = sub <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %215
  %217 = shufflevector <16 x i8> %216, <16 x i8> %215, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %218 = zext i32 %209 to i64
  %219 = getelementptr inbounds i32, i32* %18, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = zext i32 %210 to i64
  %222 = getelementptr inbounds i32, i32* %18, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds i32, i32* %22, i64 %218
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds i32, i32* %22, i64 %221
  %227 = load i32, i32* %226, align 4
  %228 = insertelement <4 x i32> undef, i32 %220, i32 0
  %229 = insertelement <4 x i32> undef, i32 %223, i32 0
  %230 = bitcast <4 x i32> %228 to <16 x i8>
  %231 = bitcast <4 x i32> %229 to <16 x i8>
  %232 = shufflevector <16 x i8> %230, <16 x i8> %231, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = bitcast <16 x i8> %232 to <2 x i64>
  %234 = insertelement <2 x i64> %233, i64 0, i32 1
  %235 = bitcast <2 x i64> %234 to <16 x i8>
  %236 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %235, <16 x i8> %217) #13
  %237 = insertelement <4 x i32> undef, i32 %225, i32 0
  %238 = insertelement <4 x i32> undef, i32 %227, i32 0
  %239 = bitcast <4 x i32> %237 to <16 x i8>
  %240 = bitcast <4 x i32> %238 to <16 x i8>
  %241 = shufflevector <16 x i8> %239, <16 x i8> %240, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = bitcast <16 x i8> %241 to <2 x i64>
  %243 = insertelement <2 x i64> %242, i64 0, i32 1
  %244 = bitcast <2 x i64> %243 to <16 x i8>
  %245 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %244, <16 x i8> %217) #13
  %246 = shl <8 x i16> %236, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %247 = sub <8 x i16> %245, %236
  %248 = mul <8 x i16> %247, %39
  %249 = add <8 x i16> %248, %246
  %250 = lshr <8 x i16> %249, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %251 = load i16, i16* %40, align 8
  %252 = icmp ult i16 %251, 256
  br i1 %252, label %253, label %258

253:                                              ; preds = %202
  %254 = insertelement <8 x i16> undef, i16 %251, i32 0
  %255 = shufflevector <8 x i16> %254, <8 x i16> undef, <8 x i32> zeroinitializer
  %256 = mul <8 x i16> %250, %255
  %257 = lshr <8 x i16> %256, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %258

258:                                              ; preds = %202, %253
  %259 = phi <8 x i16> [ %257, %253 ], [ %250, %202 ]
  %260 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %259, <8 x i16> undef) #13
  %261 = bitcast <16 x i8> %260 to <4 x i32>
  %262 = extractelement <4 x i32> %261, i32 0
  %263 = getelementptr inbounds i32, i32* %205, i64 1
  store i32 %262, i32* %205, align 4
  %264 = icmp sgt i32 %206, 0
  br i1 %264, label %202, label %265

265:                                              ; preds = %258, %31
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #4 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #13
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %37

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %38

9:                                                ; preds = %7, %13
  %10 = phi i32 [ %15, %13 ], [ %3, %7 ]
  %11 = phi i32* [ %14, %13 ], [ %1, %7 ]
  %12 = icmp sgt i32 %10, 7
  br i1 %12, label %13, label %18

13:                                               ; preds = %9
  %14 = getelementptr inbounds i32, i32* %11, i64 8
  %15 = add nsw i32 %10, -8
  %16 = icmp sgt i32 %15, 0
  %17 = bitcast i32* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 32, i1 false) #13
  br i1 %16, label %9, label %38

18:                                               ; preds = %9
  %19 = icmp sgt i32 %10, 3
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = bitcast i32* %11 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 4
  %22 = getelementptr inbounds i32, i32* %11, i64 4
  %23 = add nsw i32 %10, -4
  br label %24

24:                                               ; preds = %20, %18
  %25 = phi i32* [ %22, %20 ], [ %11, %18 ]
  %26 = phi i32 [ %23, %20 ], [ %10, %18 ]
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = bitcast i32* %25 to i64*
  store i64 0, i64* %29, align 4
  %30 = getelementptr inbounds i32, i32* %25, i64 2
  %31 = add nsw i32 %26, -2
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i32* [ %30, %28 ], [ %25, %24 ]
  %34 = phi i32 [ %31, %28 ], [ %26, %24 ]
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  store i32 0, i32* %33, align 4
  br label %38

37:                                               ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5ClearEEENS_5Sk4pxERKS2_S4_S4_)
  br label %38

38:                                               ; preds = %13, %36, %32, %7, %37
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32, i32* nocapture, i32* nocapture readonly, i8* nocapture readonly, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nocapture) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %9 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %10 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %11 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %12 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %13 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %14 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %15 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %16 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %17 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %18 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %19 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %20 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %21 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %22 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %23 = icmp sgt i32 %0, 0
  br i1 %23, label %24, label %153

24:                                               ; preds = %5
  %25 = bitcast %"class.(anonymous namespace)::Sk4px"* %8 to i8*
  %26 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %8, i64 0, i32 0, i32 0
  %27 = bitcast %"class.(anonymous namespace)::Sk4px"* %9 to i8*
  %28 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %9, i64 0, i32 0, i32 0
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %10 to i8*
  %30 = bitcast %"class.(anonymous namespace)::Sk4px"* %10 to <16 x i8>*
  %31 = bitcast %"class.(anonymous namespace)::Sk4px"* %11 to i8*
  %32 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %11, i64 0, i32 0, i32 0
  %33 = bitcast %"class.(anonymous namespace)::Sk4px"* %12 to i8*
  %34 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %12, i64 0, i32 0, i32 0
  %35 = bitcast %"class.(anonymous namespace)::Sk4px"* %13 to i8*
  %36 = bitcast %"class.(anonymous namespace)::Sk4px"* %13 to <16 x i8>*
  br label %37

37:                                               ; preds = %24, %43
  %38 = phi i32 [ %0, %24 ], [ %70, %43 ]
  %39 = phi i8* [ %3, %24 ], [ %69, %43 ]
  %40 = phi i32* [ %2, %24 ], [ %68, %43 ]
  %41 = phi i32* [ %1, %24 ], [ %67, %43 ]
  %42 = icmp sgt i32 %38, 7
  br i1 %42, label %43, label %72

43:                                               ; preds = %37
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #13
  %44 = bitcast i32* %41 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 4
  store <2 x i64> %45, <2 x i64>* %26, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #13
  %46 = bitcast i32* %40 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 4
  store <2 x i64> %47, <2 x i64>* %28, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #13
  %48 = bitcast i8* %39 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = insertelement <4 x i32> undef, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  store <16 x i8> %52, <16 x i8>* %30, align 16
  %53 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %8, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %9, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %10) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #13
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #13
  %54 = getelementptr inbounds i32, i32* %41, i64 4
  %55 = bitcast i32* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 4
  store <2 x i64> %56, <2 x i64>* %32, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #13
  %57 = getelementptr inbounds i32, i32* %40, i64 4
  %58 = bitcast i32* %57 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 4
  store <2 x i64> %59, <2 x i64>* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #13
  %60 = getelementptr inbounds i8, i8* %39, i64 4
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = insertelement <4 x i32> undef, i32 %62, i32 0
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  store <16 x i8> %65, <16 x i8>* %36, align 16
  %66 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %11, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %12, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %13) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #13
  store <2 x i64> %53, <2 x i64>* %44, align 4
  store <2 x i64> %66, <2 x i64>* %55, align 4
  %67 = getelementptr inbounds i32, i32* %41, i64 8
  %68 = getelementptr inbounds i32, i32* %40, i64 8
  %69 = getelementptr inbounds i8, i8* %39, i64 8
  %70 = add nsw i32 %38, -8
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %37, label %153

72:                                               ; preds = %37
  %73 = icmp sgt i32 %38, 3
  br i1 %73, label %74, label %95

74:                                               ; preds = %72
  %75 = bitcast %"class.(anonymous namespace)::Sk4px"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #13
  %76 = bitcast i32* %41 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 4
  %78 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %14, i64 0, i32 0, i32 0
  store <2 x i64> %77, <2 x i64>* %78, align 16
  %79 = bitcast %"class.(anonymous namespace)::Sk4px"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %79) #13
  %80 = bitcast i32* %40 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 4
  %82 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %15, i64 0, i32 0, i32 0
  store <2 x i64> %81, <2 x i64>* %82, align 16
  %83 = bitcast %"class.(anonymous namespace)::Sk4px"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %83) #13
  %84 = bitcast i8* %39 to i32*
  %85 = load i32, i32* %84, align 1
  %86 = insertelement <4 x i32> undef, i32 %85, i32 0
  %87 = bitcast <4 x i32> %86 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %89 = bitcast %"class.(anonymous namespace)::Sk4px"* %16 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %89, align 16
  %90 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %14, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %15, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %16) #13
  store <2 x i64> %90, <2 x i64>* %76, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %83) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %79) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #13
  %91 = getelementptr inbounds i32, i32* %41, i64 4
  %92 = getelementptr inbounds i32, i32* %40, i64 4
  %93 = getelementptr inbounds i8, i8* %39, i64 4
  %94 = add nsw i32 %38, -4
  br label %95

95:                                               ; preds = %74, %72
  %96 = phi i32* [ %91, %74 ], [ %41, %72 ]
  %97 = phi i32* [ %92, %74 ], [ %40, %72 ]
  %98 = phi i8* [ %93, %74 ], [ %39, %72 ]
  %99 = phi i32 [ %94, %74 ], [ %38, %72 ]
  %100 = icmp sgt i32 %99, 1
  br i1 %100, label %101, label %126

101:                                              ; preds = %95
  %102 = bitcast %"class.(anonymous namespace)::Sk4px"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %102) #13
  %103 = bitcast i32* %96 to i64*
  %104 = load i64, i64* %103, align 4
  %105 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %104, i32 0
  %106 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %17, i64 0, i32 0, i32 0
  store <2 x i64> %105, <2 x i64>* %106, align 16
  %107 = bitcast %"class.(anonymous namespace)::Sk4px"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %107) #13
  %108 = bitcast i32* %97 to i64*
  %109 = load i64, i64* %108, align 4
  %110 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %109, i32 0
  %111 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %18, i64 0, i32 0, i32 0
  store <2 x i64> %110, <2 x i64>* %111, align 16
  %112 = bitcast %"class.(anonymous namespace)::Sk4px"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %112) #13
  %113 = bitcast i8* %98 to i16*
  %114 = load i16, i16* %113, align 1
  %115 = zext i16 %114 to i32
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = bitcast <4 x i32> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %119 = bitcast %"class.(anonymous namespace)::Sk4px"* %19 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %119, align 16
  %120 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %17, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %19) #13
  %121 = extractelement <2 x i64> %120, i32 0
  store i64 %121, i64* %103, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %112) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %107) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %102) #13
  %122 = getelementptr inbounds i32, i32* %96, i64 2
  %123 = getelementptr inbounds i32, i32* %97, i64 2
  %124 = getelementptr inbounds i8, i8* %98, i64 2
  %125 = add nsw i32 %99, -2
  br label %126

126:                                              ; preds = %101, %95
  %127 = phi i32* [ %122, %101 ], [ %96, %95 ]
  %128 = phi i32* [ %123, %101 ], [ %97, %95 ]
  %129 = phi i8* [ %124, %101 ], [ %98, %95 ]
  %130 = phi i32 [ %125, %101 ], [ %99, %95 ]
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %153

132:                                              ; preds = %126
  %133 = bitcast %"class.(anonymous namespace)::Sk4px"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133) #13
  %134 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %134)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %135 = load i32, i32* %127, align 4
  %136 = bitcast <2 x i64>* %6 to i32*
  store i32 %135, i32* %136, align 16
  %137 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %134)
  %138 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %20, i64 0, i32 0, i32 0
  store <2 x i64> %137, <2 x i64>* %138, align 16
  %139 = bitcast %"class.(anonymous namespace)::Sk4px"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %139) #13
  %140 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %140)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %141 = load i32, i32* %128, align 4
  %142 = bitcast <2 x i64>* %7 to i32*
  store i32 %141, i32* %142, align 16
  %143 = load <2 x i64>, <2 x i64>* %7, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %140)
  %144 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %21, i64 0, i32 0, i32 0
  store <2 x i64> %143, <2 x i64>* %144, align 16
  %145 = bitcast %"class.(anonymous namespace)::Sk4px"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %145) #13
  %146 = load i8, i8* %129, align 1
  %147 = insertelement <16 x i8> undef, i8 %146, i32 0
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <16 x i32> zeroinitializer
  %149 = bitcast %"class.(anonymous namespace)::Sk4px"* %22 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %149, align 16
  %150 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %20, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %21, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %22) #13
  %151 = bitcast <2 x i64> %150 to <4 x i32>
  %152 = extractelement <4 x i32> %151, i32 0
  store i32 %152, i32* %127, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %145) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %139) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133) #13
  br label %153

153:                                              ; preds = %43, %5, %126, %132
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5ClearEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !63
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %10, %15
  %18 = mul <8 x i16> %11, %16
  %19 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %20 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %19, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %21 = add <8 x i16> %18, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %21, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %20, <8 x i16> %22) #13
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  ret <2 x i64> %24
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.6"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.6"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.6"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %55

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7, %14
  %10 = phi i32 [ %25, %14 ], [ %3, %7 ]
  %11 = phi i32* [ %24, %14 ], [ %2, %7 ]
  %12 = phi i32* [ %23, %14 ], [ %1, %7 ]
  %13 = icmp sgt i32 %10, 7
  br i1 %13, label %14, label %27

14:                                               ; preds = %9
  %15 = bitcast i32* %12 to <2 x i64>*
  %16 = bitcast i32* %11 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 4
  %18 = getelementptr inbounds i32, i32* %12, i64 4
  %19 = bitcast i32* %18 to <2 x i64>*
  %20 = getelementptr inbounds i32, i32* %11, i64 4
  %21 = bitcast i32* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 4
  store <2 x i64> %17, <2 x i64>* %15, align 4
  store <2 x i64> %22, <2 x i64>* %19, align 4
  %23 = getelementptr inbounds i32, i32* %12, i64 8
  %24 = getelementptr inbounds i32, i32* %11, i64 8
  %25 = add nsw i32 %10, -8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %9, label %56

27:                                               ; preds = %9
  %28 = icmp sgt i32 %10, 3
  br i1 %28, label %29, label %36

29:                                               ; preds = %27
  %30 = bitcast i32* %12 to <2 x i64>*
  %31 = bitcast i32* %11 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 4
  store <2 x i64> %32, <2 x i64>* %30, align 4
  %33 = getelementptr inbounds i32, i32* %12, i64 4
  %34 = getelementptr inbounds i32, i32* %11, i64 4
  %35 = add nsw i32 %10, -4
  br label %36

36:                                               ; preds = %29, %27
  %37 = phi i32* [ %33, %29 ], [ %12, %27 ]
  %38 = phi i32* [ %34, %29 ], [ %11, %27 ]
  %39 = phi i32 [ %35, %29 ], [ %10, %27 ]
  %40 = icmp sgt i32 %39, 1
  br i1 %40, label %41, label %48

41:                                               ; preds = %36
  %42 = bitcast i32* %38 to i64*
  %43 = load i64, i64* %42, align 4
  %44 = bitcast i32* %37 to i64*
  store i64 %43, i64* %44, align 4
  %45 = getelementptr inbounds i32, i32* %37, i64 2
  %46 = getelementptr inbounds i32, i32* %38, i64 2
  %47 = add nsw i32 %39, -2
  br label %48

48:                                               ; preds = %41, %36
  %49 = phi i32* [ %45, %41 ], [ %37, %36 ]
  %50 = phi i32* [ %46, %41 ], [ %38, %36 ]
  %51 = phi i32 [ %47, %41 ], [ %39, %36 ]
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = load i32, i32* %50, align 4
  store i32 %54, i32* %49, align 4
  br label %56

55:                                               ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3SrcEEENS_5Sk4pxERKS2_S4_S4_)
  br label %56

56:                                               ; preds = %14, %53, %48, %7, %55
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3SrcEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 16, !noalias !70
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shufflevector <16 x i8> %19, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %22, %27
  %30 = mul <8 x i16> %23, %28
  %31 = add <8 x i16> %16, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %32 = add <8 x i16> %31, %29
  %33 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %32, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %34 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %35 = add <8 x i16> %34, %30
  %36 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %35, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %36) #13
  %38 = bitcast <16 x i8> %37 to <2 x i64>
  ret <2 x i64> %38
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.8"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.8"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.8"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %5, %8
  ret void

8:                                                ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3DstEEENS_5Sk4pxERKS2_S4_S4_)
  br label %7
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3DstEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = mul <8 x i16> %8, %21
  %24 = mul <8 x i16> %9, %22
  %25 = add <8 x i16> %16, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %26 = add <8 x i16> %25, %23
  %27 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %26, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %28 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %29 = add <8 x i16> %28, %24
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %27, <8 x i16> %30) #13
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.10"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.10"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.10"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %154

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %155

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %65, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %64, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %63, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %67

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %20, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast <16 x i8> %28 to <8 x i16>
  %31 = mul <8 x i16> %29, %23
  %32 = mul <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %23
  %34 = add <8 x i16> %32, %24
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %35, <8 x i16> %36) #13
  %38 = add <16 x i8> %37, %20
  %39 = getelementptr inbounds i32, i32* %14, i64 4
  %40 = bitcast i32* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 4
  %42 = getelementptr inbounds i32, i32* %13, i64 4
  %43 = bitcast i32* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 4
  %45 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = xor <16 x i8> %44, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = mul <8 x i16> %53, %47
  %56 = mul <8 x i16> %54, %48
  %57 = add <8 x i16> %55, %47
  %58 = add <8 x i16> %56, %48
  %59 = lshr <8 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = lshr <8 x i16> %58, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> %60) #13
  %62 = add <16 x i8> %61, %44
  store <16 x i8> %38, <16 x i8>* %17, align 4
  store <16 x i8> %62, <16 x i8>* %40, align 4
  %63 = getelementptr inbounds i32, i32* %14, i64 8
  %64 = getelementptr inbounds i32, i32* %13, i64 8
  %65 = add nsw i32 %12, -8
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %11, label %155

67:                                               ; preds = %11
  %68 = icmp sgt i32 %12, 3
  br i1 %68, label %69, label %95

69:                                               ; preds = %67
  %70 = bitcast i32* %14 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = bitcast i32* %13 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 4
  %74 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = shufflevector <16 x i8> %71, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = xor <16 x i8> %73, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %79, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = bitcast <16 x i8> %81 to <8 x i16>
  %84 = mul <8 x i16> %82, %76
  %85 = mul <8 x i16> %83, %77
  %86 = add <8 x i16> %84, %76
  %87 = add <8 x i16> %85, %77
  %88 = lshr <8 x i16> %86, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %89 = lshr <8 x i16> %87, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %90 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %88, <8 x i16> %89) #13
  %91 = add <16 x i8> %90, %73
  store <16 x i8> %91, <16 x i8>* %70, align 4
  %92 = getelementptr inbounds i32, i32* %14, i64 4
  %93 = getelementptr inbounds i32, i32* %13, i64 4
  %94 = add nsw i32 %12, -4
  br label %95

95:                                               ; preds = %69, %67
  %96 = phi i32* [ %92, %69 ], [ %14, %67 ]
  %97 = phi i32* [ %93, %69 ], [ %13, %67 ]
  %98 = phi i32 [ %94, %69 ], [ %12, %67 ]
  %99 = icmp sgt i32 %98, 1
  br i1 %99, label %100, label %125

100:                                              ; preds = %95
  %101 = bitcast i32* %96 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast i32* %97 to i64*
  %105 = load i64, i64* %104, align 4
  %106 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = bitcast <2 x i64> %103 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = bitcast <16 x i8> %109 to <8 x i16>
  %111 = xor <16 x i8> %107, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = mul <8 x i16> %114, %110
  %116 = add <8 x i16> %115, %110
  %117 = lshr <8 x i16> %116, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %117, <8 x i16> undef) #13
  %119 = add <16 x i8> %118, %107
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = extractelement <2 x i64> %120, i32 0
  store i64 %121, i64* %101, align 4
  %122 = getelementptr inbounds i32, i32* %96, i64 2
  %123 = getelementptr inbounds i32, i32* %97, i64 2
  %124 = add nsw i32 %98, -2
  br label %125

125:                                              ; preds = %100, %95
  %126 = phi i32* [ %122, %100 ], [ %96, %95 ]
  %127 = phi i32* [ %123, %100 ], [ %97, %95 ]
  %128 = phi i32 [ %124, %100 ], [ %98, %95 ]
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %155

130:                                              ; preds = %125
  %131 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %132 = load i32, i32* %126, align 4
  %133 = bitcast <2 x i64>* %6 to i32*
  store i32 %132, i32* %133, align 16
  %134 = bitcast <2 x i64>* %6 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %131)
  %136 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %137 = load i32, i32* %127, align 4
  %138 = bitcast <2 x i64>* %7 to i32*
  store i32 %137, i32* %138, align 16
  %139 = bitcast <2 x i64>* %7 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %136)
  %141 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = xor <16 x i8> %140, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %146 = bitcast <16 x i8> %145 to <8 x i16>
  %147 = mul <8 x i16> %146, %142
  %148 = add <8 x i16> %147, %142
  %149 = lshr <8 x i16> %148, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %149, <8 x i16> undef) #13
  %151 = add <16 x i8> %150, %140
  %152 = bitcast <16 x i8> %151 to <4 x i32>
  %153 = extractelement <4 x i32> %152, i32 0
  store i32 %153, i32* %126, align 4
  br label %155

154:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcOverEEENS_5Sk4pxERKS2_S4_S4_)
  br label %155

155:                                              ; preds = %16, %130, %125, %9, %154
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcOverEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !77
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = shufflevector <16 x i8> %13, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = bitcast <16 x i8> %15 to <8 x i16>
  %18 = mul <8 x i16> %16, %10
  %19 = mul <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %10
  %21 = add <8 x i16> %19, %11
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %22, <8 x i16> %23) #13
  %25 = add <16 x i8> %24, %5
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 16
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = mul <8 x i16> %34, %28
  %37 = mul <8 x i16> %35, %29
  %38 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %39 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %38, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = mul <8 x i16> %41, %10
  %44 = mul <8 x i16> %42, %11
  %45 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %46 = add <8 x i16> %45, %43
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %46, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %48 = add <8 x i16> %37, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %49 = add <8 x i16> %48, %44
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %49, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %50) #13
  %52 = bitcast <16 x i8> %51 to <2 x i64>
  ret <2 x i64> %52
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.12"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.12"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.12"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %154

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %155

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %65, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %64, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %63, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %67

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %18, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast <16 x i8> %28 to <8 x i16>
  %31 = mul <8 x i16> %29, %23
  %32 = mul <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %23
  %34 = add <8 x i16> %32, %24
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %35, <8 x i16> %36) #13
  %38 = add <16 x i8> %37, %18
  %39 = getelementptr inbounds i32, i32* %14, i64 4
  %40 = bitcast i32* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 4
  %42 = getelementptr inbounds i32, i32* %13, i64 4
  %43 = bitcast i32* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 4
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = shufflevector <16 x i8> %44, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = xor <16 x i8> %41, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = mul <8 x i16> %53, %47
  %56 = mul <8 x i16> %54, %48
  %57 = add <8 x i16> %55, %47
  %58 = add <8 x i16> %56, %48
  %59 = lshr <8 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = lshr <8 x i16> %58, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> %60) #13
  %62 = add <16 x i8> %61, %41
  store <16 x i8> %38, <16 x i8>* %17, align 4
  store <16 x i8> %62, <16 x i8>* %40, align 4
  %63 = getelementptr inbounds i32, i32* %14, i64 8
  %64 = getelementptr inbounds i32, i32* %13, i64 8
  %65 = add nsw i32 %12, -8
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %11, label %155

67:                                               ; preds = %11
  %68 = icmp sgt i32 %12, 3
  br i1 %68, label %69, label %95

69:                                               ; preds = %67
  %70 = bitcast i32* %14 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = bitcast i32* %13 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 4
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = xor <16 x i8> %71, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %79, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = bitcast <16 x i8> %81 to <8 x i16>
  %84 = mul <8 x i16> %82, %76
  %85 = mul <8 x i16> %83, %77
  %86 = add <8 x i16> %84, %76
  %87 = add <8 x i16> %85, %77
  %88 = lshr <8 x i16> %86, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %89 = lshr <8 x i16> %87, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %90 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %88, <8 x i16> %89) #13
  %91 = add <16 x i8> %90, %71
  store <16 x i8> %91, <16 x i8>* %70, align 4
  %92 = getelementptr inbounds i32, i32* %14, i64 4
  %93 = getelementptr inbounds i32, i32* %13, i64 4
  %94 = add nsw i32 %12, -4
  br label %95

95:                                               ; preds = %69, %67
  %96 = phi i32* [ %92, %69 ], [ %14, %67 ]
  %97 = phi i32* [ %93, %69 ], [ %13, %67 ]
  %98 = phi i32 [ %94, %69 ], [ %12, %67 ]
  %99 = icmp sgt i32 %98, 1
  br i1 %99, label %100, label %125

100:                                              ; preds = %95
  %101 = bitcast i32* %96 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %102, i32 0
  %104 = bitcast i32* %97 to i64*
  %105 = load i64, i64* %104, align 4
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %103 to <16 x i8>
  %108 = bitcast <2 x i64> %106 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = bitcast <16 x i8> %109 to <8 x i16>
  %111 = xor <16 x i8> %107, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = mul <8 x i16> %114, %110
  %116 = add <8 x i16> %115, %110
  %117 = lshr <8 x i16> %116, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %117, <8 x i16> undef) #13
  %119 = add <16 x i8> %118, %107
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = extractelement <2 x i64> %120, i32 0
  store i64 %121, i64* %101, align 4
  %122 = getelementptr inbounds i32, i32* %96, i64 2
  %123 = getelementptr inbounds i32, i32* %97, i64 2
  %124 = add nsw i32 %98, -2
  br label %125

125:                                              ; preds = %100, %95
  %126 = phi i32* [ %122, %100 ], [ %96, %95 ]
  %127 = phi i32* [ %123, %100 ], [ %97, %95 ]
  %128 = phi i32 [ %124, %100 ], [ %98, %95 ]
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %155

130:                                              ; preds = %125
  %131 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %132 = load i32, i32* %126, align 4
  %133 = bitcast <2 x i64>* %6 to i32*
  store i32 %132, i32* %133, align 16
  %134 = bitcast <2 x i64>* %6 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %131)
  %136 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %137 = load i32, i32* %127, align 4
  %138 = bitcast <2 x i64>* %7 to i32*
  store i32 %137, i32* %138, align 16
  %139 = bitcast <2 x i64>* %7 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %136)
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = xor <16 x i8> %135, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %146 = bitcast <16 x i8> %145 to <8 x i16>
  %147 = mul <8 x i16> %142, %146
  %148 = add <8 x i16> %147, %142
  %149 = lshr <8 x i16> %148, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %149, <8 x i16> undef) #13
  %151 = add <16 x i8> %150, %135
  %152 = bitcast <16 x i8> %151 to <4 x i32>
  %153 = extractelement <4 x i32> %152, i32 0
  store i32 %153, i32* %126, align 4
  br label %155

154:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7DstOverEEENS_5Sk4pxERKS2_S4_S4_)
  br label %155

155:                                              ; preds = %16, %130, %125, %9, %154
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7DstOverEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !80
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = shufflevector <16 x i8> %13, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = bitcast <16 x i8> %15 to <8 x i16>
  %18 = mul <8 x i16> %16, %10
  %19 = mul <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %10
  %21 = add <8 x i16> %19, %11
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %22, <8 x i16> %23) #13
  %25 = add <16 x i8> %24, %5
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 16
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = mul <8 x i16> %34, %28
  %37 = mul <8 x i16> %35, %29
  %38 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = shufflevector <16 x i8> %42, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = mul <8 x i16> %45, %40
  %48 = mul <8 x i16> %46, %41
  %49 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %50 = add <8 x i16> %49, %47
  %51 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %50, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %52 = add <8 x i16> %37, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %53 = add <8 x i16> %52, %48
  %54 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %53, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %51, <8 x i16> %54) #13
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  ret <2 x i64> %56
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.14"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.14"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.14"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %144

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %145

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %61, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %60, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %59, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %63

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %24
  %31 = mul <8 x i16> %29, %25
  %32 = add <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %25
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %34, <8 x i16> %35) #13
  %37 = getelementptr inbounds i32, i32* %14, i64 4
  %38 = bitcast i32* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 4
  %40 = getelementptr inbounds i32, i32* %13, i64 4
  %41 = bitcast i32* %40 to <16 x i8>*
  %42 = load <16 x i8>, <16 x i8>* %41, align 4
  %43 = shufflevector <16 x i8> %39, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %44 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %42, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = mul <8 x i16> %50, %46
  %53 = mul <8 x i16> %51, %47
  %54 = add <8 x i16> %52, %46
  %55 = add <8 x i16> %53, %47
  %56 = lshr <8 x i16> %54, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %57 = lshr <8 x i16> %55, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %58 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %56, <8 x i16> %57) #13
  store <16 x i8> %36, <16 x i8>* %17, align 4
  store <16 x i8> %58, <16 x i8>* %38, align 4
  %59 = getelementptr inbounds i32, i32* %14, i64 8
  %60 = getelementptr inbounds i32, i32* %13, i64 8
  %61 = add nsw i32 %12, -8
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %11, label %145

63:                                               ; preds = %11
  %64 = icmp sgt i32 %12, 3
  br i1 %64, label %65, label %89

65:                                               ; preds = %63
  %66 = bitcast i32* %14 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 4
  %68 = bitcast i32* %13 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = mul <8 x i16> %77, %73
  %80 = mul <8 x i16> %78, %74
  %81 = add <8 x i16> %79, %73
  %82 = add <8 x i16> %80, %74
  %83 = lshr <8 x i16> %81, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %84 = lshr <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #13
  store <16 x i8> %85, <16 x i8>* %66, align 4
  %86 = getelementptr inbounds i32, i32* %14, i64 4
  %87 = getelementptr inbounds i32, i32* %13, i64 4
  %88 = add nsw i32 %12, -4
  br label %89

89:                                               ; preds = %65, %63
  %90 = phi i32* [ %86, %65 ], [ %14, %63 ]
  %91 = phi i32* [ %87, %65 ], [ %13, %63 ]
  %92 = phi i32 [ %88, %65 ], [ %12, %63 ]
  %93 = icmp sgt i32 %92, 1
  br i1 %93, label %94, label %117

94:                                               ; preds = %89
  %95 = bitcast i32* %90 to i64*
  %96 = load i64, i64* %95, align 4
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast i32* %91 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast <2 x i64> %97 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <2 x i64> %100 to <16 x i8>
  %104 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = bitcast <16 x i8> %104 to <8 x i16>
  %106 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = mul <8 x i16> %107, %105
  %109 = add <8 x i16> %108, %105
  %110 = lshr <8 x i16> %109, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %111 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %110, <8 x i16> undef) #13
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  store i64 %113, i64* %95, align 4
  %114 = getelementptr inbounds i32, i32* %90, i64 2
  %115 = getelementptr inbounds i32, i32* %91, i64 2
  %116 = add nsw i32 %92, -2
  br label %117

117:                                              ; preds = %94, %89
  %118 = phi i32* [ %114, %94 ], [ %90, %89 ]
  %119 = phi i32* [ %115, %94 ], [ %91, %89 ]
  %120 = phi i32 [ %116, %94 ], [ %92, %89 ]
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %122, label %145

122:                                              ; preds = %117
  %123 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %124 = load i32, i32* %118, align 4
  %125 = bitcast <2 x i64>* %6 to i32*
  store i32 %124, i32* %125, align 16
  %126 = bitcast <2 x i64>* %6 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123)
  %128 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %129 = load i32, i32* %119, align 4
  %130 = bitcast <2 x i64>* %7 to i32*
  store i32 %129, i32* %130, align 16
  %131 = bitcast <2 x i64>* %7 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %128)
  %133 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = bitcast <16 x i8> %136 to <8 x i16>
  %138 = mul <8 x i16> %135, %137
  %139 = add <8 x i16> %138, %135
  %140 = lshr <8 x i16> %139, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %140, <8 x i16> undef) #13
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  store i32 %143, i32* %118, align 4
  br label %145

144:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5SrcInEEENS_5Sk4pxERKS2_S4_S4_)
  br label %145

145:                                              ; preds = %16, %122, %117, %9, %144
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5SrcInEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %7 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16, !noalias !83
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = bitcast <16 x i8> %10 to <8 x i16>
  %13 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %15, %11
  %18 = mul <8 x i16> %16, %12
  %19 = add <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %12
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> %22) #13
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 16
  %30 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %29, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = mul <8 x i16> %32, %26
  %35 = mul <8 x i16> %33, %27
  %36 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = xor <16 x i8> %29, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = mul <8 x i16> %43, %38
  %46 = mul <8 x i16> %44, %39
  %47 = add <8 x i16> %34, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %45
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %50 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %51 = add <8 x i16> %50, %46
  %52 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %51, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %53 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %49, <8 x i16> %52) #13
  %54 = bitcast <16 x i8> %53 to <2 x i64>
  ret <2 x i64> %54
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.16"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.16"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.16"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %144

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %145

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %61, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %60, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %59, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %63

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %24
  %31 = mul <8 x i16> %29, %25
  %32 = add <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %25
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %34, <8 x i16> %35) #13
  %37 = getelementptr inbounds i32, i32* %14, i64 4
  %38 = bitcast i32* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 4
  %40 = getelementptr inbounds i32, i32* %13, i64 4
  %41 = bitcast i32* %40 to <16 x i8>*
  %42 = load <16 x i8>, <16 x i8>* %41, align 4
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %44 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = mul <8 x i16> %50, %46
  %53 = mul <8 x i16> %51, %47
  %54 = add <8 x i16> %52, %46
  %55 = add <8 x i16> %53, %47
  %56 = lshr <8 x i16> %54, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %57 = lshr <8 x i16> %55, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %58 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %56, <8 x i16> %57) #13
  store <16 x i8> %36, <16 x i8>* %17, align 4
  store <16 x i8> %58, <16 x i8>* %38, align 4
  %59 = getelementptr inbounds i32, i32* %14, i64 8
  %60 = getelementptr inbounds i32, i32* %13, i64 8
  %61 = add nsw i32 %12, -8
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %11, label %145

63:                                               ; preds = %11
  %64 = icmp sgt i32 %12, 3
  br i1 %64, label %65, label %89

65:                                               ; preds = %63
  %66 = bitcast i32* %14 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 4
  %68 = bitcast i32* %13 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %71 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %67, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = mul <8 x i16> %77, %73
  %80 = mul <8 x i16> %78, %74
  %81 = add <8 x i16> %79, %73
  %82 = add <8 x i16> %80, %74
  %83 = lshr <8 x i16> %81, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %84 = lshr <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #13
  store <16 x i8> %85, <16 x i8>* %66, align 4
  %86 = getelementptr inbounds i32, i32* %14, i64 4
  %87 = getelementptr inbounds i32, i32* %13, i64 4
  %88 = add nsw i32 %12, -4
  br label %89

89:                                               ; preds = %65, %63
  %90 = phi i32* [ %86, %65 ], [ %14, %63 ]
  %91 = phi i32* [ %87, %65 ], [ %13, %63 ]
  %92 = phi i32 [ %88, %65 ], [ %12, %63 ]
  %93 = icmp sgt i32 %92, 1
  br i1 %93, label %94, label %117

94:                                               ; preds = %89
  %95 = bitcast i32* %90 to i64*
  %96 = load i64, i64* %95, align 4
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast i32* %91 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast <2 x i64> %100 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <2 x i64> %97 to <16 x i8>
  %104 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = bitcast <16 x i8> %104 to <8 x i16>
  %106 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = mul <8 x i16> %107, %105
  %109 = add <8 x i16> %108, %105
  %110 = lshr <8 x i16> %109, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %111 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %110, <8 x i16> undef) #13
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  store i64 %113, i64* %95, align 4
  %114 = getelementptr inbounds i32, i32* %90, i64 2
  %115 = getelementptr inbounds i32, i32* %91, i64 2
  %116 = add nsw i32 %92, -2
  br label %117

117:                                              ; preds = %94, %89
  %118 = phi i32* [ %114, %94 ], [ %90, %89 ]
  %119 = phi i32* [ %115, %94 ], [ %91, %89 ]
  %120 = phi i32 [ %116, %94 ], [ %92, %89 ]
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %122, label %145

122:                                              ; preds = %117
  %123 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %124 = load i32, i32* %118, align 4
  %125 = bitcast <2 x i64>* %6 to i32*
  store i32 %124, i32* %125, align 16
  %126 = bitcast <2 x i64>* %6 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123)
  %128 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %129 = load i32, i32* %119, align 4
  %130 = bitcast <2 x i64>* %7 to i32*
  store i32 %129, i32* %130, align 16
  %131 = bitcast <2 x i64>* %7 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %128)
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = bitcast <16 x i8> %136 to <8 x i16>
  %138 = mul <8 x i16> %137, %135
  %139 = add <8 x i16> %138, %135
  %140 = lshr <8 x i16> %139, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %140, <8 x i16> undef) #13
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  store i32 %143, i32* %118, align 4
  br label %145

144:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5DstInEEENS_5Sk4pxERKS2_S4_S4_)
  br label %145

145:                                              ; preds = %16, %122, %117, %9, %144
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5DstInEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %7 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16, !noalias !86
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = bitcast <16 x i8> %10 to <8 x i16>
  %13 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %15, %11
  %18 = mul <8 x i16> %16, %12
  %19 = add <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %12
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> %22) #13
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 16
  %30 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %29, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = mul <8 x i16> %32, %26
  %35 = mul <8 x i16> %33, %27
  %36 = xor <16 x i8> %29, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %11
  %42 = mul <8 x i16> %40, %12
  %43 = add <8 x i16> %34, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %44 = add <8 x i16> %43, %41
  %45 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %44, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %46 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %47 = add <8 x i16> %46, %42
  %48 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %47, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %49 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> %48) #13
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  ret <2 x i64> %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.18"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.18"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.18"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %149

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %150

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %63, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %62, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %61, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %65

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %18, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast <16 x i8> %28 to <8 x i16>
  %31 = mul <8 x i16> %29, %23
  %32 = mul <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %23
  %34 = add <8 x i16> %32, %24
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %35, <8 x i16> %36) #13
  %38 = getelementptr inbounds i32, i32* %14, i64 4
  %39 = bitcast i32* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %13, i64 4
  %42 = bitcast i32* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 4
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = xor <16 x i8> %40, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %49, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = mul <8 x i16> %52, %46
  %55 = mul <8 x i16> %53, %47
  %56 = add <8 x i16> %54, %46
  %57 = add <8 x i16> %55, %47
  %58 = lshr <8 x i16> %56, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = lshr <8 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %59) #13
  store <16 x i8> %37, <16 x i8>* %17, align 4
  store <16 x i8> %60, <16 x i8>* %39, align 4
  %61 = getelementptr inbounds i32, i32* %14, i64 8
  %62 = getelementptr inbounds i32, i32* %13, i64 8
  %63 = add nsw i32 %12, -8
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %11, label %150

65:                                               ; preds = %11
  %66 = icmp sgt i32 %12, 3
  br i1 %66, label %67, label %92

67:                                               ; preds = %65
  %68 = bitcast i32* %14 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = bitcast i32* %13 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %71, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = xor <16 x i8> %69, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %77, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = bitcast <16 x i8> %78 to <8 x i16>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = mul <8 x i16> %80, %74
  %83 = mul <8 x i16> %81, %75
  %84 = add <8 x i16> %82, %74
  %85 = add <8 x i16> %83, %75
  %86 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = lshr <8 x i16> %85, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %86, <8 x i16> %87) #13
  store <16 x i8> %88, <16 x i8>* %68, align 4
  %89 = getelementptr inbounds i32, i32* %14, i64 4
  %90 = getelementptr inbounds i32, i32* %13, i64 4
  %91 = add nsw i32 %12, -4
  br label %92

92:                                               ; preds = %67, %65
  %93 = phi i32* [ %89, %67 ], [ %14, %65 ]
  %94 = phi i32* [ %90, %67 ], [ %13, %65 ]
  %95 = phi i32 [ %91, %67 ], [ %12, %65 ]
  %96 = icmp sgt i32 %95, 1
  br i1 %96, label %97, label %121

97:                                               ; preds = %92
  %98 = bitcast i32* %93 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast i32* %94 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast <2 x i64> %100 to <16 x i8>
  %105 = bitcast <2 x i64> %103 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = xor <16 x i8> %104, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = bitcast <16 x i8> %110 to <8 x i16>
  %112 = mul <8 x i16> %111, %107
  %113 = add <8 x i16> %112, %107
  %114 = lshr <8 x i16> %113, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> undef) #13
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  store i64 %117, i64* %98, align 4
  %118 = getelementptr inbounds i32, i32* %93, i64 2
  %119 = getelementptr inbounds i32, i32* %94, i64 2
  %120 = add nsw i32 %95, -2
  br label %121

121:                                              ; preds = %97, %92
  %122 = phi i32* [ %118, %97 ], [ %93, %92 ]
  %123 = phi i32* [ %119, %97 ], [ %94, %92 ]
  %124 = phi i32 [ %120, %97 ], [ %95, %92 ]
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %150

126:                                              ; preds = %121
  %127 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %128 = load i32, i32* %122, align 4
  %129 = bitcast <2 x i64>* %6 to i32*
  store i32 %128, i32* %129, align 16
  %130 = bitcast <2 x i64>* %6 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127)
  %132 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %133 = load i32, i32* %123, align 4
  %134 = bitcast <2 x i64>* %7 to i32*
  store i32 %133, i32* %134, align 16
  %135 = bitcast <2 x i64>* %7 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132)
  %137 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = xor <16 x i8> %131, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = mul <8 x i16> %138, %142
  %144 = add <8 x i16> %143, %138
  %145 = lshr <8 x i16> %144, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %145, <8 x i16> undef) #13
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  store i32 %148, i32* %122, align 4
  br label %150

149:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6SrcOutEEENS_5Sk4pxERKS2_S4_S4_)
  br label %150

150:                                              ; preds = %16, %126, %121, %9, %149
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6SrcOutEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !89
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = shufflevector <16 x i8> %13, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = bitcast <16 x i8> %15 to <8 x i16>
  %18 = mul <8 x i16> %16, %10
  %19 = mul <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %10
  %21 = add <8 x i16> %19, %11
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %22, <8 x i16> %23) #13
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = mul <8 x i16> %33, %27
  %36 = mul <8 x i16> %34, %28
  %37 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = xor <16 x i8> %30, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = mul <8 x i16> %44, %39
  %47 = mul <8 x i16> %45, %40
  %48 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %49 = add <8 x i16> %48, %46
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %49, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %51 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %52 = add <8 x i16> %51, %47
  %53 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %52, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> %53) #13
  %55 = bitcast <16 x i8> %54 to <2 x i64>
  ret <2 x i64> %55
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.20"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.20"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.20"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %149

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %150

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %63, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %62, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %61, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %65

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %20, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast <16 x i8> %28 to <8 x i16>
  %31 = mul <8 x i16> %29, %23
  %32 = mul <8 x i16> %30, %24
  %33 = add <8 x i16> %31, %23
  %34 = add <8 x i16> %32, %24
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %35, <8 x i16> %36) #13
  %38 = getelementptr inbounds i32, i32* %14, i64 4
  %39 = bitcast i32* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %13, i64 4
  %42 = bitcast i32* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 4
  %44 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = xor <16 x i8> %43, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %49, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = mul <8 x i16> %52, %46
  %55 = mul <8 x i16> %53, %47
  %56 = add <8 x i16> %54, %46
  %57 = add <8 x i16> %55, %47
  %58 = lshr <8 x i16> %56, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = lshr <8 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %59) #13
  store <16 x i8> %37, <16 x i8>* %17, align 4
  store <16 x i8> %60, <16 x i8>* %39, align 4
  %61 = getelementptr inbounds i32, i32* %14, i64 8
  %62 = getelementptr inbounds i32, i32* %13, i64 8
  %63 = add nsw i32 %12, -8
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %11, label %150

65:                                               ; preds = %11
  %66 = icmp sgt i32 %12, 3
  br i1 %66, label %67, label %92

67:                                               ; preds = %65
  %68 = bitcast i32* %14 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = bitcast i32* %13 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = xor <16 x i8> %71, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %77, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = bitcast <16 x i8> %78 to <8 x i16>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = mul <8 x i16> %80, %74
  %83 = mul <8 x i16> %81, %75
  %84 = add <8 x i16> %82, %74
  %85 = add <8 x i16> %83, %75
  %86 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = lshr <8 x i16> %85, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %86, <8 x i16> %87) #13
  store <16 x i8> %88, <16 x i8>* %68, align 4
  %89 = getelementptr inbounds i32, i32* %14, i64 4
  %90 = getelementptr inbounds i32, i32* %13, i64 4
  %91 = add nsw i32 %12, -4
  br label %92

92:                                               ; preds = %67, %65
  %93 = phi i32* [ %89, %67 ], [ %14, %65 ]
  %94 = phi i32* [ %90, %67 ], [ %13, %65 ]
  %95 = phi i32 [ %91, %67 ], [ %12, %65 ]
  %96 = icmp sgt i32 %95, 1
  br i1 %96, label %97, label %121

97:                                               ; preds = %92
  %98 = bitcast i32* %93 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast i32* %94 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = bitcast <2 x i64> %100 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = xor <16 x i8> %104, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = bitcast <16 x i8> %110 to <8 x i16>
  %112 = mul <8 x i16> %111, %107
  %113 = add <8 x i16> %112, %107
  %114 = lshr <8 x i16> %113, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> undef) #13
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  store i64 %117, i64* %98, align 4
  %118 = getelementptr inbounds i32, i32* %93, i64 2
  %119 = getelementptr inbounds i32, i32* %94, i64 2
  %120 = add nsw i32 %95, -2
  br label %121

121:                                              ; preds = %97, %92
  %122 = phi i32* [ %118, %97 ], [ %93, %92 ]
  %123 = phi i32* [ %119, %97 ], [ %94, %92 ]
  %124 = phi i32 [ %120, %97 ], [ %95, %92 ]
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %150

126:                                              ; preds = %121
  %127 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %128 = load i32, i32* %122, align 4
  %129 = bitcast <2 x i64>* %6 to i32*
  store i32 %128, i32* %129, align 16
  %130 = bitcast <2 x i64>* %6 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127)
  %132 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %133 = load i32, i32* %123, align 4
  %134 = bitcast <2 x i64>* %7 to i32*
  store i32 %133, i32* %134, align 16
  %135 = bitcast <2 x i64>* %7 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132)
  %137 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = xor <16 x i8> %136, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = mul <8 x i16> %142, %138
  %144 = add <8 x i16> %143, %138
  %145 = lshr <8 x i16> %144, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %145, <8 x i16> undef) #13
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  store i32 %148, i32* %122, align 4
  br label %150

149:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6DstOutEEENS_5Sk4pxERKS2_S4_S4_)
  br label %150

150:                                              ; preds = %16, %126, %121, %9, %149
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6DstOutEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !92
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = shufflevector <16 x i8> %13, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = bitcast <16 x i8> %15 to <8 x i16>
  %18 = mul <8 x i16> %16, %10
  %19 = mul <8 x i16> %17, %11
  %20 = add <8 x i16> %18, %10
  %21 = add <8 x i16> %19, %11
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %22, <8 x i16> %23) #13
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = mul <8 x i16> %33, %27
  %36 = mul <8 x i16> %34, %28
  %37 = xor <16 x i8> %30, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = mul <8 x i16> %40, %10
  %43 = mul <8 x i16> %41, %11
  %44 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %45 = add <8 x i16> %44, %42
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %45, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %47 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %43
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %49) #13
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  ret <2 x i64> %51
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.22"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.22"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.22"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %202

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %203

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %89, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %88, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %87, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %91

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %24
  %31 = mul <8 x i16> %29, %25
  %32 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %20, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = mul <8 x i16> %40, %34
  %43 = mul <8 x i16> %41, %35
  %44 = add <8 x i16> %30, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %45 = add <8 x i16> %44, %42
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %45, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %47 = add <8 x i16> %31, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %43
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %49) #13
  %51 = getelementptr inbounds i32, i32* %14, i64 4
  %52 = bitcast i32* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %13, i64 4
  %55 = bitcast i32* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 4
  %57 = shufflevector <16 x i8> %53, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %58 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %64 = bitcast <16 x i8> %62 to <8 x i16>
  %65 = bitcast <16 x i8> %63 to <8 x i16>
  %66 = mul <8 x i16> %64, %60
  %67 = mul <8 x i16> %65, %61
  %68 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = xor <16 x i8> %56, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = mul <8 x i16> %76, %70
  %79 = mul <8 x i16> %77, %71
  %80 = add <8 x i16> %66, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %81 = add <8 x i16> %80, %78
  %82 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %81, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %83 = add <8 x i16> %67, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = add <8 x i16> %83, %79
  %85 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %84, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %86 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %85) #13
  store <16 x i8> %50, <16 x i8>* %17, align 4
  store <16 x i8> %86, <16 x i8>* %52, align 4
  %87 = getelementptr inbounds i32, i32* %14, i64 8
  %88 = getelementptr inbounds i32, i32* %13, i64 8
  %89 = add nsw i32 %12, -8
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %11, label %203

91:                                               ; preds = %11
  %92 = icmp sgt i32 %12, 3
  br i1 %92, label %93, label %131

93:                                               ; preds = %91
  %94 = bitcast i32* %14 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 4
  %96 = bitcast i32* %13 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 4
  %98 = shufflevector <16 x i8> %95, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %99 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i8> %99 to <8 x i16>
  %102 = bitcast <16 x i8> %100 to <8 x i16>
  %103 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %98, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = bitcast <16 x i8> %104 to <8 x i16>
  %107 = mul <8 x i16> %105, %101
  %108 = mul <8 x i16> %106, %102
  %109 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = xor <16 x i8> %97, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %115 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %116 = shufflevector <16 x i8> %114, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = bitcast <16 x i8> %115 to <8 x i16>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = mul <8 x i16> %117, %111
  %120 = mul <8 x i16> %118, %112
  %121 = add <8 x i16> %107, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %122 = add <8 x i16> %121, %119
  %123 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %122, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %124 = add <8 x i16> %108, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %125 = add <8 x i16> %124, %120
  %126 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %125, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %126) #13
  store <16 x i8> %127, <16 x i8>* %94, align 4
  %128 = getelementptr inbounds i32, i32* %14, i64 4
  %129 = getelementptr inbounds i32, i32* %13, i64 4
  %130 = add nsw i32 %12, -4
  br label %131

131:                                              ; preds = %93, %91
  %132 = phi i32* [ %128, %93 ], [ %14, %91 ]
  %133 = phi i32* [ %129, %93 ], [ %13, %91 ]
  %134 = phi i32 [ %130, %93 ], [ %12, %91 ]
  %135 = icmp sgt i32 %134, 1
  br i1 %135, label %136, label %167

136:                                              ; preds = %131
  %137 = bitcast i32* %132 to i64*
  %138 = load i64, i64* %137, align 4
  %139 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %138, i32 0
  %140 = bitcast i32* %133 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %141, i32 0
  %143 = bitcast <2 x i64> %139 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = bitcast <2 x i64> %142 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = mul <8 x i16> %149, %147
  %151 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = bitcast <16 x i8> %151 to <8 x i16>
  %153 = xor <16 x i8> %145, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = mul <8 x i16> %156, %152
  %158 = add <8 x i16> %150, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %159 = add <8 x i16> %158, %157
  %160 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %159, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %161 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> undef) #13
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  store i64 %163, i64* %137, align 4
  %164 = getelementptr inbounds i32, i32* %132, i64 2
  %165 = getelementptr inbounds i32, i32* %133, i64 2
  %166 = add nsw i32 %134, -2
  br label %167

167:                                              ; preds = %136, %131
  %168 = phi i32* [ %164, %136 ], [ %132, %131 ]
  %169 = phi i32* [ %165, %136 ], [ %133, %131 ]
  %170 = phi i32 [ %166, %136 ], [ %134, %131 ]
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %203

172:                                              ; preds = %167
  %173 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %174 = load i32, i32* %168, align 4
  %175 = bitcast <2 x i64>* %6 to i32*
  store i32 %174, i32* %175, align 16
  %176 = bitcast <2 x i64>* %6 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173)
  %178 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %179 = load i32, i32* %169, align 4
  %180 = bitcast <2 x i64>* %7 to i32*
  store i32 %179, i32* %180, align 16
  %181 = bitcast <2 x i64>* %7 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178)
  %183 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = shufflevector <16 x i8> %182, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %185 = bitcast <16 x i8> %184 to <8 x i16>
  %186 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %187 = bitcast <16 x i8> %186 to <8 x i16>
  %188 = mul <8 x i16> %185, %187
  %189 = shufflevector <16 x i8> %177, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = bitcast <16 x i8> %189 to <8 x i16>
  %191 = xor <16 x i8> %182, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = bitcast <16 x i8> %193 to <8 x i16>
  %195 = mul <8 x i16> %194, %190
  %196 = add <8 x i16> %188, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %197 = add <8 x i16> %196, %195
  %198 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %197, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %199 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %198, <8 x i16> undef) #13
  %200 = bitcast <16 x i8> %199 to <4 x i32>
  %201 = extractelement <4 x i32> %200, i32 0
  store i32 %201, i32* %168, align 4
  br label %203

202:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcATopEEENS_5Sk4pxERKS2_S4_S4_)
  br label %203

203:                                              ; preds = %16, %172, %167, %9, %202
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcATopEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %7 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16, !noalias !95
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = bitcast <16 x i8> %10 to <8 x i16>
  %13 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %15, %11
  %18 = mul <8 x i16> %16, %12
  %19 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %8, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %27, %21
  %30 = mul <8 x i16> %28, %22
  %31 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %32 = add <8 x i16> %31, %29
  %33 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %32, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %34 = add <8 x i16> %18, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %35 = add <8 x i16> %34, %30
  %36 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %35, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %36) #13
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 16
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = mul <8 x i16> %46, %40
  %49 = mul <8 x i16> %47, %41
  %50 = xor <16 x i8> %43, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = mul <8 x i16> %53, %21
  %56 = mul <8 x i16> %54, %22
  %57 = add <8 x i16> %48, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %58 = add <8 x i16> %57, %55
  %59 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %58, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %60 = add <8 x i16> %49, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %61 = add <8 x i16> %60, %56
  %62 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %61, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> %62) #13
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  ret <2 x i64> %64
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.24"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.24"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.24"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %202

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %203

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %89, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %88, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %87, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %91

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %24
  %31 = mul <8 x i16> %29, %25
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %18, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = mul <8 x i16> %40, %34
  %43 = mul <8 x i16> %41, %35
  %44 = add <8 x i16> %42, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %45 = add <8 x i16> %44, %30
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %45, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %47 = add <8 x i16> %43, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %31
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %49) #13
  %51 = getelementptr inbounds i32, i32* %14, i64 4
  %52 = bitcast i32* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %13, i64 4
  %55 = bitcast i32* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 4
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %58 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %64 = bitcast <16 x i8> %62 to <8 x i16>
  %65 = bitcast <16 x i8> %63 to <8 x i16>
  %66 = mul <8 x i16> %64, %60
  %67 = mul <8 x i16> %65, %61
  %68 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = xor <16 x i8> %53, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = mul <8 x i16> %76, %70
  %79 = mul <8 x i16> %77, %71
  %80 = add <8 x i16> %78, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %81 = add <8 x i16> %80, %66
  %82 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %81, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %83 = add <8 x i16> %79, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = add <8 x i16> %83, %67
  %85 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %84, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %86 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %85) #13
  store <16 x i8> %50, <16 x i8>* %17, align 4
  store <16 x i8> %86, <16 x i8>* %52, align 4
  %87 = getelementptr inbounds i32, i32* %14, i64 8
  %88 = getelementptr inbounds i32, i32* %13, i64 8
  %89 = add nsw i32 %12, -8
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %11, label %203

91:                                               ; preds = %11
  %92 = icmp sgt i32 %12, 3
  br i1 %92, label %93, label %131

93:                                               ; preds = %91
  %94 = bitcast i32* %14 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 4
  %96 = bitcast i32* %13 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 4
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %99 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i8> %99 to <8 x i16>
  %102 = bitcast <16 x i8> %100 to <8 x i16>
  %103 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %98, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = bitcast <16 x i8> %104 to <8 x i16>
  %107 = mul <8 x i16> %105, %101
  %108 = mul <8 x i16> %106, %102
  %109 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = xor <16 x i8> %95, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %115 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %116 = shufflevector <16 x i8> %114, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = bitcast <16 x i8> %115 to <8 x i16>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = mul <8 x i16> %117, %111
  %120 = mul <8 x i16> %118, %112
  %121 = add <8 x i16> %119, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %122 = add <8 x i16> %121, %107
  %123 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %122, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %124 = add <8 x i16> %120, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %125 = add <8 x i16> %124, %108
  %126 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %125, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %126) #13
  store <16 x i8> %127, <16 x i8>* %94, align 4
  %128 = getelementptr inbounds i32, i32* %14, i64 4
  %129 = getelementptr inbounds i32, i32* %13, i64 4
  %130 = add nsw i32 %12, -4
  br label %131

131:                                              ; preds = %93, %91
  %132 = phi i32* [ %128, %93 ], [ %14, %91 ]
  %133 = phi i32* [ %129, %93 ], [ %13, %91 ]
  %134 = phi i32 [ %130, %93 ], [ %12, %91 ]
  %135 = icmp sgt i32 %134, 1
  br i1 %135, label %136, label %167

136:                                              ; preds = %131
  %137 = bitcast i32* %132 to i64*
  %138 = load i64, i64* %137, align 4
  %139 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %138, i32 0
  %140 = bitcast i32* %133 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %141, i32 0
  %143 = bitcast <2 x i64> %142 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = bitcast <2 x i64> %139 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = mul <8 x i16> %149, %147
  %151 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = bitcast <16 x i8> %151 to <8 x i16>
  %153 = xor <16 x i8> %145, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = mul <8 x i16> %156, %152
  %158 = add <8 x i16> %157, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %159 = add <8 x i16> %158, %150
  %160 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %159, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %161 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> undef) #13
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  store i64 %163, i64* %137, align 4
  %164 = getelementptr inbounds i32, i32* %132, i64 2
  %165 = getelementptr inbounds i32, i32* %133, i64 2
  %166 = add nsw i32 %134, -2
  br label %167

167:                                              ; preds = %136, %131
  %168 = phi i32* [ %164, %136 ], [ %132, %131 ]
  %169 = phi i32* [ %165, %136 ], [ %133, %131 ]
  %170 = phi i32 [ %166, %136 ], [ %134, %131 ]
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %203

172:                                              ; preds = %167
  %173 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %174 = load i32, i32* %168, align 4
  %175 = bitcast <2 x i64>* %6 to i32*
  store i32 %174, i32* %175, align 16
  %176 = bitcast <2 x i64>* %6 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173)
  %178 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %179 = load i32, i32* %169, align 4
  %180 = bitcast <2 x i64>* %7 to i32*
  store i32 %179, i32* %180, align 16
  %181 = bitcast <2 x i64>* %7 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178)
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = shufflevector <16 x i8> %177, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %185 = bitcast <16 x i8> %184 to <8 x i16>
  %186 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %187 = bitcast <16 x i8> %186 to <8 x i16>
  %188 = mul <8 x i16> %187, %185
  %189 = shufflevector <16 x i8> %182, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = bitcast <16 x i8> %189 to <8 x i16>
  %191 = xor <16 x i8> %177, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = bitcast <16 x i8> %193 to <8 x i16>
  %195 = mul <8 x i16> %190, %194
  %196 = add <8 x i16> %195, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %197 = add <8 x i16> %196, %188
  %198 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %197, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %199 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %198, <8 x i16> undef) #13
  %200 = bitcast <16 x i8> %199 to <4 x i32>
  %201 = extractelement <4 x i32> %200, i32 0
  store i32 %201, i32* %168, align 4
  br label %203

202:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7DstATopEEENS_5Sk4pxERKS2_S4_S4_)
  br label %203

203:                                              ; preds = %16, %172, %167, %9, %202
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7DstATopEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %7 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16, !noalias !102
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = bitcast <16 x i8> %10 to <8 x i16>
  %13 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %15, %11
  %18 = mul <8 x i16> %16, %12
  %19 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %8, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %27, %21
  %30 = mul <8 x i16> %28, %22
  %31 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %32 = add <8 x i16> %31, %29
  %33 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %32, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %34 = add <8 x i16> %18, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %35 = add <8 x i16> %34, %30
  %36 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %35, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %36) #13
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 16
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = mul <8 x i16> %46, %40
  %49 = mul <8 x i16> %47, %41
  %50 = xor <16 x i8> %43, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = mul <8 x i16> %53, %11
  %56 = mul <8 x i16> %54, %12
  %57 = add <8 x i16> %48, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %58 = add <8 x i16> %57, %55
  %59 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %58, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %60 = add <8 x i16> %49, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %61 = add <8 x i16> %60, %56
  %62 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %61, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> %62) #13
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  ret <2 x i64> %64
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.26"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.26"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.26"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %207

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %208

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %91, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %90, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %89, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %93

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %18, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = bitcast <16 x i8> %28 to <8 x i16>
  %31 = mul <8 x i16> %29, %23
  %32 = mul <8 x i16> %30, %24
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = bitcast <16 x i8> %34 to <8 x i16>
  %37 = xor <16 x i8> %20, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %39 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %38, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = mul <8 x i16> %41, %35
  %44 = mul <8 x i16> %42, %36
  %45 = add <8 x i16> %31, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %46 = add <8 x i16> %45, %43
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %46, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %48 = add <8 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %49 = add <8 x i16> %48, %44
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %49, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %50) #13
  %52 = getelementptr inbounds i32, i32* %14, i64 4
  %53 = bitcast i32* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %13, i64 4
  %56 = bitcast i32* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 4
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = xor <16 x i8> %54, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = shufflevector <16 x i8> %63, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = mul <8 x i16> %66, %60
  %69 = mul <8 x i16> %67, %61
  %70 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %54, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = xor <16 x i8> %57, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = bitcast <16 x i8> %77 to <8 x i16>
  %80 = mul <8 x i16> %78, %72
  %81 = mul <8 x i16> %79, %73
  %82 = add <8 x i16> %68, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = add <8 x i16> %82, %80
  %84 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %83, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %85 = add <8 x i16> %69, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %86 = add <8 x i16> %85, %81
  %87 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %86, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> %87) #13
  store <16 x i8> %51, <16 x i8>* %17, align 4
  store <16 x i8> %88, <16 x i8>* %53, align 4
  %89 = getelementptr inbounds i32, i32* %14, i64 8
  %90 = getelementptr inbounds i32, i32* %13, i64 8
  %91 = add nsw i32 %12, -8
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %11, label %208

93:                                               ; preds = %11
  %94 = icmp sgt i32 %12, 3
  br i1 %94, label %95, label %134

95:                                               ; preds = %93
  %96 = bitcast i32* %14 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 4
  %98 = bitcast i32* %13 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 4
  %100 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = shufflevector <16 x i8> %99, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i8> %100 to <8 x i16>
  %103 = bitcast <16 x i8> %101 to <8 x i16>
  %104 = xor <16 x i8> %97, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %105 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %105, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = mul <8 x i16> %108, %102
  %111 = mul <8 x i16> %109, %103
  %112 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = bitcast <16 x i8> %113 to <8 x i16>
  %116 = xor <16 x i8> %99, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %118 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %119 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %120 = bitcast <16 x i8> %118 to <8 x i16>
  %121 = bitcast <16 x i8> %119 to <8 x i16>
  %122 = mul <8 x i16> %120, %114
  %123 = mul <8 x i16> %121, %115
  %124 = add <8 x i16> %110, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %125 = add <8 x i16> %124, %122
  %126 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %125, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %127 = add <8 x i16> %111, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %128 = add <8 x i16> %127, %123
  %129 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %128, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %126, <8 x i16> %129) #13
  store <16 x i8> %130, <16 x i8>* %96, align 4
  %131 = getelementptr inbounds i32, i32* %14, i64 4
  %132 = getelementptr inbounds i32, i32* %13, i64 4
  %133 = add nsw i32 %12, -4
  br label %134

134:                                              ; preds = %95, %93
  %135 = phi i32* [ %131, %95 ], [ %14, %93 ]
  %136 = phi i32* [ %132, %95 ], [ %13, %93 ]
  %137 = phi i32 [ %133, %95 ], [ %12, %93 ]
  %138 = icmp sgt i32 %137, 1
  br i1 %138, label %139, label %171

139:                                              ; preds = %134
  %140 = bitcast i32* %135 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %141, i32 0
  %143 = bitcast i32* %136 to i64*
  %144 = load i64, i64* %143, align 4
  %145 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %144, i32 0
  %146 = bitcast <2 x i64> %142 to <16 x i8>
  %147 = bitcast <2 x i64> %145 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = xor <16 x i8> %146, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %151 = shufflevector <16 x i8> %150, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = mul <8 x i16> %153, %149
  %155 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = xor <16 x i8> %147, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %158 = shufflevector <16 x i8> %157, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = shufflevector <16 x i8> %158, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %160 = bitcast <16 x i8> %159 to <8 x i16>
  %161 = mul <8 x i16> %160, %156
  %162 = add <8 x i16> %154, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %163 = add <8 x i16> %162, %161
  %164 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %163, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %165 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %164, <8 x i16> undef) #13
  %166 = bitcast <16 x i8> %165 to <2 x i64>
  %167 = extractelement <2 x i64> %166, i32 0
  store i64 %167, i64* %140, align 4
  %168 = getelementptr inbounds i32, i32* %135, i64 2
  %169 = getelementptr inbounds i32, i32* %136, i64 2
  %170 = add nsw i32 %137, -2
  br label %171

171:                                              ; preds = %139, %134
  %172 = phi i32* [ %168, %139 ], [ %135, %134 ]
  %173 = phi i32* [ %169, %139 ], [ %136, %134 ]
  %174 = phi i32 [ %170, %139 ], [ %137, %134 ]
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %208

176:                                              ; preds = %171
  %177 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %178 = load i32, i32* %172, align 4
  %179 = bitcast <2 x i64>* %6 to i32*
  store i32 %178, i32* %179, align 16
  %180 = bitcast <2 x i64>* %6 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177)
  %182 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %182)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %183 = load i32, i32* %173, align 4
  %184 = bitcast <2 x i64>* %7 to i32*
  store i32 %183, i32* %184, align 16
  %185 = bitcast <2 x i64>* %7 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %182)
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = bitcast <16 x i8> %187 to <8 x i16>
  %189 = xor <16 x i8> %181, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %190 = shufflevector <16 x i8> %189, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <16 x i8> %190, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = bitcast <16 x i8> %191 to <8 x i16>
  %193 = mul <8 x i16> %188, %192
  %194 = shufflevector <16 x i8> %181, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %195 = bitcast <16 x i8> %194 to <8 x i16>
  %196 = xor <16 x i8> %186, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %197 = shufflevector <16 x i8> %196, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %198 = shufflevector <16 x i8> %197, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %199 = bitcast <16 x i8> %198 to <8 x i16>
  %200 = mul <8 x i16> %199, %195
  %201 = add <8 x i16> %193, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %202 = add <8 x i16> %201, %200
  %203 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %202, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %204 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %203, <8 x i16> undef) #13
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = extractelement <4 x i32> %205, i32 0
  store i32 %206, i32* %172, align 4
  br label %208

207:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3XorEEENS_5Sk4pxERKS2_S4_S4_)
  br label %208

208:                                              ; preds = %16, %176, %171, %9, %207
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3XorEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !109
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = shufflevector <16 x i8> %13, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = bitcast <16 x i8> %15 to <8 x i16>
  %18 = mul <8 x i16> %16, %10
  %19 = mul <8 x i16> %17, %11
  %20 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = xor <16 x i8> %7, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %22
  %31 = mul <8 x i16> %29, %23
  %32 = add <8 x i16> %18, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %33 = add <8 x i16> %32, %30
  %34 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %33, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = add <8 x i16> %19, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %36 = add <8 x i16> %35, %31
  %37 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %36, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %38 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %34, <8 x i16> %37) #13
  %39 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %38, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 16
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = shufflevector <16 x i8> %44, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = mul <8 x i16> %47, %41
  %50 = mul <8 x i16> %48, %42
  %51 = xor <16 x i8> %44, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %51, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = mul <8 x i16> %54, %22
  %57 = mul <8 x i16> %55, %23
  %58 = add <8 x i16> %49, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %59 = add <8 x i16> %58, %56
  %60 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %59, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %61 = add <8 x i16> %50, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %62 = add <8 x i16> %61, %57
  %63 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %62, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %63) #13
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  ret <2 x i64> %65
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.28"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.28"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.28"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = icmp eq i8* %4, null
  %11 = icmp sgt i32 %3, 0
  br i1 %10, label %12, label %85

12:                                               ; preds = %5
  br i1 %11, label %13, label %264

13:                                               ; preds = %12, %18
  %14 = phi i32 [ %33, %18 ], [ %3, %12 ]
  %15 = phi i32* [ %32, %18 ], [ %2, %12 ]
  %16 = phi i32* [ %31, %18 ], [ %1, %12 ]
  %17 = icmp sgt i32 %14, 7
  br i1 %17, label %18, label %35

18:                                               ; preds = %13
  %19 = bitcast i32* %16 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast i32* %15 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 4
  %23 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %22, <16 x i8> %20) #13
  %24 = getelementptr inbounds i32, i32* %16, i64 4
  %25 = bitcast i32* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 4
  %27 = getelementptr inbounds i32, i32* %15, i64 4
  %28 = bitcast i32* %27 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 4
  %30 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %29, <16 x i8> %26) #13
  store <16 x i8> %23, <16 x i8>* %19, align 4
  store <16 x i8> %30, <16 x i8>* %25, align 4
  %31 = getelementptr inbounds i32, i32* %16, i64 8
  %32 = getelementptr inbounds i32, i32* %15, i64 8
  %33 = add nsw i32 %14, -8
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %13, label %264

35:                                               ; preds = %13
  %36 = icmp sgt i32 %14, 3
  br i1 %36, label %37, label %46

37:                                               ; preds = %35
  %38 = bitcast i32* %16 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 4
  %40 = bitcast i32* %15 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 4
  %42 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %41, <16 x i8> %39) #13
  store <16 x i8> %42, <16 x i8>* %38, align 4
  %43 = getelementptr inbounds i32, i32* %16, i64 4
  %44 = getelementptr inbounds i32, i32* %15, i64 4
  %45 = add nsw i32 %14, -4
  br label %46

46:                                               ; preds = %37, %35
  %47 = phi i32* [ %43, %37 ], [ %16, %35 ]
  %48 = phi i32* [ %44, %37 ], [ %15, %35 ]
  %49 = phi i32 [ %45, %37 ], [ %14, %35 ]
  %50 = icmp sgt i32 %49, 1
  br i1 %50, label %51, label %66

51:                                               ; preds = %46
  %52 = bitcast i32* %47 to i64*
  %53 = load i64, i64* %52, align 4
  %54 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %53, i32 0
  %55 = bitcast i32* %48 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %56, i32 0
  %58 = bitcast <2 x i64> %57 to <16 x i8>
  %59 = bitcast <2 x i64> %54 to <16 x i8>
  %60 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %58, <16 x i8> %59) #13
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = extractelement <2 x i64> %61, i32 0
  store i64 %62, i64* %52, align 4
  %63 = getelementptr inbounds i32, i32* %47, i64 2
  %64 = getelementptr inbounds i32, i32* %48, i64 2
  %65 = add nsw i32 %49, -2
  br label %66

66:                                               ; preds = %51, %46
  %67 = phi i32* [ %63, %51 ], [ %47, %46 ]
  %68 = phi i32* [ %64, %51 ], [ %48, %46 ]
  %69 = phi i32 [ %65, %51 ], [ %49, %46 ]
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %264

71:                                               ; preds = %66
  %72 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %73 = load i32, i32* %67, align 4
  %74 = bitcast <2 x i64>* %6 to i32*
  store i32 %73, i32* %74, align 16
  %75 = bitcast <2 x i64>* %6 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72)
  %77 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %77)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %78 = load i32, i32* %68, align 4
  %79 = bitcast <2 x i64>* %7 to i32*
  store i32 %78, i32* %79, align 16
  %80 = bitcast <2 x i64>* %7 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %77)
  %82 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %81, <16 x i8> %76) #13
  %83 = bitcast <16 x i8> %82 to <4 x i32>
  %84 = extractelement <4 x i32> %83, i32 0
  store i32 %84, i32* %67, align 4
  br label %264

85:                                               ; preds = %5
  br i1 %11, label %86, label %264

86:                                               ; preds = %85, %92
  %87 = phi i32 [ %149, %92 ], [ %3, %85 ]
  %88 = phi i8* [ %148, %92 ], [ %4, %85 ]
  %89 = phi i32* [ %147, %92 ], [ %2, %85 ]
  %90 = phi i32* [ %146, %92 ], [ %1, %85 ]
  %91 = icmp sgt i32 %87, 7
  br i1 %91, label %92, label %151

92:                                               ; preds = %86
  %93 = bitcast i32* %90 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 4
  %95 = bitcast i32* %89 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 4
  %97 = bitcast i8* %88 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = bitcast <4 x i32> %99 to <16 x i8>
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %102 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %96, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = bitcast <16 x i8> %102 to <8 x i16>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %101, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = mul <8 x i16> %108, %104
  %111 = mul <8 x i16> %109, %105
  %112 = add <8 x i16> %110, %104
  %113 = add <8 x i16> %111, %105
  %114 = lshr <8 x i16> %112, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = lshr <8 x i16> %113, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %116 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %115) #13
  %117 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %94, <16 x i8> %116) #13
  %118 = getelementptr inbounds i32, i32* %90, i64 4
  %119 = bitcast i32* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %89, i64 4
  %122 = bitcast i32* %121 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 4
  %124 = getelementptr inbounds i8, i8* %88, i64 4
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 1
  %127 = insertelement <4 x i32> undef, i32 %126, i32 0
  %128 = bitcast <4 x i32> %127 to <16 x i8>
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %130 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %131 = shufflevector <16 x i8> %123, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %132 = bitcast <16 x i8> %130 to <8 x i16>
  %133 = bitcast <16 x i8> %131 to <8 x i16>
  %134 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = shufflevector <16 x i8> %129, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %136 = bitcast <16 x i8> %134 to <8 x i16>
  %137 = bitcast <16 x i8> %135 to <8 x i16>
  %138 = mul <8 x i16> %136, %132
  %139 = mul <8 x i16> %137, %133
  %140 = add <8 x i16> %138, %132
  %141 = add <8 x i16> %139, %133
  %142 = lshr <8 x i16> %140, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %143 = lshr <8 x i16> %141, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %144 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %143) #13
  %145 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %120, <16 x i8> %144) #13
  store <16 x i8> %117, <16 x i8>* %93, align 4
  store <16 x i8> %145, <16 x i8>* %119, align 4
  %146 = getelementptr inbounds i32, i32* %90, i64 8
  %147 = getelementptr inbounds i32, i32* %89, i64 8
  %148 = getelementptr inbounds i8, i8* %88, i64 8
  %149 = add nsw i32 %87, -8
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %86, label %264

151:                                              ; preds = %86
  %152 = icmp sgt i32 %87, 3
  br i1 %152, label %153, label %183

153:                                              ; preds = %151
  %154 = bitcast i32* %90 to <16 x i8>*
  %155 = load <16 x i8>, <16 x i8>* %154, align 4
  %156 = bitcast i32* %89 to <16 x i8>*
  %157 = load <16 x i8>, <16 x i8>* %156, align 4
  %158 = bitcast i8* %88 to i32*
  %159 = load i32, i32* %158, align 1
  %160 = insertelement <4 x i32> undef, i32 %159, i32 0
  %161 = bitcast <4 x i32> %160 to <16 x i8>
  %162 = shufflevector <16 x i8> %161, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %163 = shufflevector <16 x i8> %157, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %164 = shufflevector <16 x i8> %157, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = bitcast <16 x i8> %163 to <8 x i16>
  %166 = bitcast <16 x i8> %164 to <8 x i16>
  %167 = shufflevector <16 x i8> %162, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = shufflevector <16 x i8> %162, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %169 = bitcast <16 x i8> %167 to <8 x i16>
  %170 = bitcast <16 x i8> %168 to <8 x i16>
  %171 = mul <8 x i16> %169, %165
  %172 = mul <8 x i16> %170, %166
  %173 = add <8 x i16> %171, %165
  %174 = add <8 x i16> %172, %166
  %175 = lshr <8 x i16> %173, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %176 = lshr <8 x i16> %174, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %177 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %175, <8 x i16> %176) #13
  %178 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %155, <16 x i8> %177) #13
  store <16 x i8> %178, <16 x i8>* %154, align 4
  %179 = getelementptr inbounds i32, i32* %90, i64 4
  %180 = getelementptr inbounds i32, i32* %89, i64 4
  %181 = getelementptr inbounds i8, i8* %88, i64 4
  %182 = add nsw i32 %87, -4
  br label %183

183:                                              ; preds = %153, %151
  %184 = phi i32* [ %179, %153 ], [ %90, %151 ]
  %185 = phi i32* [ %180, %153 ], [ %89, %151 ]
  %186 = phi i8* [ %181, %153 ], [ %88, %151 ]
  %187 = phi i32 [ %182, %153 ], [ %87, %151 ]
  %188 = icmp sgt i32 %187, 1
  br i1 %188, label %189, label %226

189:                                              ; preds = %183
  %190 = bitcast i32* %184 to i64*
  %191 = load i64, i64* %190, align 4
  %192 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %191, i32 0
  %193 = bitcast i32* %185 to i64*
  %194 = load i64, i64* %193, align 4
  %195 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %194, i32 0
  %196 = bitcast i8* %186 to i16*
  %197 = load i16, i16* %196, align 1
  %198 = zext i16 %197 to i32
  %199 = insertelement <4 x i32> undef, i32 %198, i32 0
  %200 = bitcast <4 x i32> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %202 = bitcast <2 x i64> %195 to <16 x i8>
  %203 = shufflevector <16 x i8> %202, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %204 = shufflevector <16 x i8> %202, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = bitcast <16 x i8> %203 to <8 x i16>
  %206 = bitcast <16 x i8> %204 to <8 x i16>
  %207 = shufflevector <16 x i8> %201, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %208 = shufflevector <16 x i8> %201, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %209 = bitcast <16 x i8> %207 to <8 x i16>
  %210 = bitcast <16 x i8> %208 to <8 x i16>
  %211 = mul <8 x i16> %209, %205
  %212 = mul <8 x i16> %210, %206
  %213 = add <8 x i16> %211, %205
  %214 = add <8 x i16> %212, %206
  %215 = lshr <8 x i16> %213, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %216 = lshr <8 x i16> %214, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %217 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %215, <8 x i16> %216) #13
  %218 = bitcast <2 x i64> %192 to <16 x i8>
  %219 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %218, <16 x i8> %217) #13
  %220 = bitcast <16 x i8> %219 to <2 x i64>
  %221 = extractelement <2 x i64> %220, i32 0
  store i64 %221, i64* %190, align 4
  %222 = getelementptr inbounds i32, i32* %184, i64 2
  %223 = getelementptr inbounds i32, i32* %185, i64 2
  %224 = getelementptr inbounds i8, i8* %186, i64 2
  %225 = add nsw i32 %187, -2
  br label %226

226:                                              ; preds = %189, %183
  %227 = phi i32* [ %222, %189 ], [ %184, %183 ]
  %228 = phi i32* [ %223, %189 ], [ %185, %183 ]
  %229 = phi i8* [ %224, %189 ], [ %186, %183 ]
  %230 = phi i32 [ %225, %189 ], [ %187, %183 ]
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %232, label %264

232:                                              ; preds = %226
  %233 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %233)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %8, align 16
  %234 = load i32, i32* %227, align 4
  %235 = bitcast <2 x i64>* %8 to i32*
  store i32 %234, i32* %235, align 16
  %236 = bitcast <2 x i64>* %8 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %233)
  %238 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %238)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %9, align 16
  %239 = load i32, i32* %228, align 4
  %240 = bitcast <2 x i64>* %9 to i32*
  store i32 %239, i32* %240, align 16
  %241 = bitcast <2 x i64>* %9 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %238)
  %243 = load i8, i8* %229, align 1
  %244 = insertelement <16 x i8> undef, i8 %243, i32 0
  %245 = shufflevector <16 x i8> %244, <16 x i8> undef, <16 x i32> zeroinitializer
  %246 = shufflevector <16 x i8> %242, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %247 = shufflevector <16 x i8> %242, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %248 = bitcast <16 x i8> %246 to <8 x i16>
  %249 = bitcast <16 x i8> %247 to <8 x i16>
  %250 = shufflevector <16 x i8> %245, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %251 = shufflevector <16 x i8> %245, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %252 = bitcast <16 x i8> %250 to <8 x i16>
  %253 = bitcast <16 x i8> %251 to <8 x i16>
  %254 = mul <8 x i16> %252, %248
  %255 = mul <8 x i16> %253, %249
  %256 = add <8 x i16> %254, %248
  %257 = add <8 x i16> %255, %249
  %258 = lshr <8 x i16> %256, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %259 = lshr <8 x i16> %257, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %260 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %258, <8 x i16> %259) #13
  %261 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %237, <16 x i8> %260) #13
  %262 = bitcast <16 x i8> %261 to <4 x i32>
  %263 = extractelement <4 x i32> %262, i32 0
  store i32 %263, i32* %227, align 4
  br label %264

264:                                              ; preds = %92, %18, %232, %226, %85, %71, %66, %12
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.30"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.30"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.30"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %139

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %140

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %59, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %58, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %57, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %61

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %23, %27
  %30 = mul <8 x i16> %24, %28
  %31 = add <8 x i16> %29, %23
  %32 = add <8 x i16> %30, %24
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %34) #13
  %36 = getelementptr inbounds i32, i32* %14, i64 4
  %37 = bitcast i32* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %13, i64 4
  %40 = bitcast i32* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 4
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = shufflevector <16 x i8> %38, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = bitcast <16 x i8> %47 to <8 x i16>
  %50 = mul <8 x i16> %44, %48
  %51 = mul <8 x i16> %45, %49
  %52 = add <8 x i16> %50, %44
  %53 = add <8 x i16> %51, %45
  %54 = lshr <8 x i16> %52, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %55 = lshr <8 x i16> %53, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #13
  store <16 x i8> %35, <16 x i8>* %17, align 4
  store <16 x i8> %56, <16 x i8>* %37, align 4
  %57 = getelementptr inbounds i32, i32* %14, i64 8
  %58 = getelementptr inbounds i32, i32* %13, i64 8
  %59 = add nsw i32 %12, -8
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %11, label %140

61:                                               ; preds = %11
  %62 = icmp sgt i32 %12, 3
  br i1 %62, label %63, label %86

63:                                               ; preds = %61
  %64 = bitcast i32* %14 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 4
  %66 = bitcast i32* %13 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 4
  %68 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %67, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %65, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = mul <8 x i16> %70, %74
  %77 = mul <8 x i16> %71, %75
  %78 = add <8 x i16> %76, %70
  %79 = add <8 x i16> %77, %71
  %80 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %81 = lshr <8 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #13
  store <16 x i8> %82, <16 x i8>* %64, align 4
  %83 = getelementptr inbounds i32, i32* %14, i64 4
  %84 = getelementptr inbounds i32, i32* %13, i64 4
  %85 = add nsw i32 %12, -4
  br label %86

86:                                               ; preds = %63, %61
  %87 = phi i32* [ %83, %63 ], [ %14, %61 ]
  %88 = phi i32* [ %84, %63 ], [ %13, %61 ]
  %89 = phi i32 [ %85, %63 ], [ %12, %61 ]
  %90 = icmp sgt i32 %89, 1
  br i1 %90, label %91, label %113

91:                                               ; preds = %86
  %92 = bitcast i32* %87 to i64*
  %93 = load i64, i64* %92, align 4
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast i32* %88 to i64*
  %96 = load i64, i64* %95, align 4
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = bitcast <2 x i64> %94 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = bitcast <16 x i8> %102 to <8 x i16>
  %104 = mul <8 x i16> %100, %103
  %105 = add <8 x i16> %104, %100
  %106 = lshr <8 x i16> %105, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %106, <8 x i16> undef) #13
  %108 = bitcast <16 x i8> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  store i64 %109, i64* %92, align 4
  %110 = getelementptr inbounds i32, i32* %87, i64 2
  %111 = getelementptr inbounds i32, i32* %88, i64 2
  %112 = add nsw i32 %89, -2
  br label %113

113:                                              ; preds = %91, %86
  %114 = phi i32* [ %110, %91 ], [ %87, %86 ]
  %115 = phi i32* [ %111, %91 ], [ %88, %86 ]
  %116 = phi i32 [ %112, %91 ], [ %89, %86 ]
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %140

118:                                              ; preds = %113
  %119 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %119)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %120 = load i32, i32* %114, align 4
  %121 = bitcast <2 x i64>* %6 to i32*
  store i32 %120, i32* %121, align 16
  %122 = bitcast <2 x i64>* %6 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %119)
  %124 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %125 = load i32, i32* %115, align 4
  %126 = bitcast <2 x i64>* %7 to i32*
  store i32 %125, i32* %126, align 16
  %127 = bitcast <2 x i64>* %7 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124)
  %129 = shufflevector <16 x i8> %128, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = bitcast <16 x i8> %129 to <8 x i16>
  %131 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %132 = bitcast <16 x i8> %131 to <8 x i16>
  %133 = mul <8 x i16> %130, %132
  %134 = add <8 x i16> %133, %130
  %135 = lshr <8 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> undef) #13
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = extractelement <4 x i32> %137, i32 0
  store i32 %138, i32* %114, align 4
  br label %140

139:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_8ModulateEEENS_5Sk4pxERKS2_S4_S4_)
  br label %140

140:                                              ; preds = %16, %118, %113, %9, %139
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_8ModulateEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16, !noalias !116
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = add <8 x i16> %16, %8
  %19 = add <8 x i16> %17, %9
  %20 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %20, <8 x i16> %21) #13
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 16
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %28, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %29 to <8 x i16>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = mul <8 x i16> %31, %25
  %34 = mul <8 x i16> %32, %26
  %35 = xor <16 x i8> %28, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %35, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %14
  %41 = mul <8 x i16> %39, %15
  %42 = add <8 x i16> %33, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %43 = add <8 x i16> %42, %40
  %44 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %43, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %45 = add <8 x i16> %34, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %46 = add <8 x i16> %45, %41
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %46, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> %47) #13
  %49 = bitcast <16 x i8> %48 to <2 x i64>
  ret <2 x i64> %49
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.32"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.32"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.32"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #5 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %149

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %150

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %63, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %62, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %61, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %65

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %20, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %23
  %31 = mul <8 x i16> %29, %24
  %32 = add <8 x i16> %30, %23
  %33 = add <8 x i16> %31, %24
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %34, <8 x i16> %35) #13
  %37 = add <16 x i8> %36, %20
  %38 = getelementptr inbounds i32, i32* %14, i64 4
  %39 = bitcast i32* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %13, i64 4
  %42 = bitcast i32* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 4
  %44 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = xor <16 x i8> %43, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = mul <8 x i16> %51, %46
  %54 = mul <8 x i16> %52, %47
  %55 = add <8 x i16> %53, %46
  %56 = add <8 x i16> %54, %47
  %57 = lshr <8 x i16> %55, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %58 = lshr <8 x i16> %56, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %58) #13
  %60 = add <16 x i8> %59, %43
  store <16 x i8> %37, <16 x i8>* %17, align 4
  store <16 x i8> %60, <16 x i8>* %39, align 4
  %61 = getelementptr inbounds i32, i32* %14, i64 8
  %62 = getelementptr inbounds i32, i32* %13, i64 8
  %63 = add nsw i32 %12, -8
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %11, label %150

65:                                               ; preds = %11
  %66 = icmp sgt i32 %12, 3
  br i1 %66, label %67, label %92

67:                                               ; preds = %65
  %68 = bitcast i32* %14 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = bitcast i32* %13 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = xor <16 x i8> %71, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = shufflevector <16 x i8> %76, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i8> %77 to <8 x i16>
  %80 = bitcast <16 x i8> %78 to <8 x i16>
  %81 = mul <8 x i16> %79, %74
  %82 = mul <8 x i16> %80, %75
  %83 = add <8 x i16> %81, %74
  %84 = add <8 x i16> %82, %75
  %85 = lshr <8 x i16> %83, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %85, <8 x i16> %86) #13
  %88 = add <16 x i8> %87, %71
  store <16 x i8> %88, <16 x i8>* %68, align 4
  %89 = getelementptr inbounds i32, i32* %14, i64 4
  %90 = getelementptr inbounds i32, i32* %13, i64 4
  %91 = add nsw i32 %12, -4
  br label %92

92:                                               ; preds = %67, %65
  %93 = phi i32* [ %89, %67 ], [ %14, %65 ]
  %94 = phi i32* [ %90, %67 ], [ %13, %65 ]
  %95 = phi i32 [ %91, %67 ], [ %12, %65 ]
  %96 = icmp sgt i32 %95, 1
  br i1 %96, label %97, label %121

97:                                               ; preds = %92
  %98 = bitcast i32* %93 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast i32* %94 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = bitcast <2 x i64> %100 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = xor <16 x i8> %104, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %109 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = bitcast <16 x i8> %109 to <8 x i16>
  %111 = mul <8 x i16> %110, %107
  %112 = add <8 x i16> %111, %107
  %113 = lshr <8 x i16> %112, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %114 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %113, <8 x i16> undef) #13
  %115 = add <16 x i8> %114, %104
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  store i64 %117, i64* %98, align 4
  %118 = getelementptr inbounds i32, i32* %93, i64 2
  %119 = getelementptr inbounds i32, i32* %94, i64 2
  %120 = add nsw i32 %95, -2
  br label %121

121:                                              ; preds = %97, %92
  %122 = phi i32* [ %118, %97 ], [ %93, %92 ]
  %123 = phi i32* [ %119, %97 ], [ %94, %92 ]
  %124 = phi i32 [ %120, %97 ], [ %95, %92 ]
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %150

126:                                              ; preds = %121
  %127 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %128 = load i32, i32* %122, align 4
  %129 = bitcast <2 x i64>* %6 to i32*
  store i32 %128, i32* %129, align 16
  %130 = bitcast <2 x i64>* %6 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127)
  %132 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %133 = load i32, i32* %123, align 4
  %134 = bitcast <2 x i64>* %7 to i32*
  store i32 %133, i32* %134, align 16
  %135 = bitcast <2 x i64>* %7 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132)
  %137 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = xor <16 x i8> %136, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = bitcast <16 x i8> %140 to <8 x i16>
  %142 = mul <8 x i16> %141, %138
  %143 = add <8 x i16> %142, %138
  %144 = lshr <8 x i16> %143, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %145 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %144, <8 x i16> undef) #13
  %146 = add <16 x i8> %145, %136
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  store i32 %148, i32* %122, align 4
  br label %150

149:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6ScreenEEENS_5Sk4pxERKS2_S4_S4_)
  br label %150

150:                                              ; preds = %16, %126, %121, %9, %149
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6ScreenEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #8 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !119
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %10, %15
  %18 = mul <8 x i16> %11, %16
  %19 = add <8 x i16> %17, %10
  %20 = add <8 x i16> %18, %11
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> %22) #13
  %24 = add <16 x i8> %23, %5
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = mul <8 x i16> %33, %27
  %36 = mul <8 x i16> %34, %28
  %37 = xor <16 x i8> %30, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = mul <8 x i16> %40, %10
  %43 = mul <8 x i16> %41, %11
  %44 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %45 = add <8 x i16> %44, %42
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %45, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %47 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %43
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %49) #13
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  ret <2 x i64> %51
}

declare i32 @_Z18SkPreMultiplyColorj(i32) local_unnamed_addr #11

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !10}
!18 = distinct !{!18, !10}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !10}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !10}
!34 = distinct !{!34, !10}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !10}
!41 = distinct !{!41, !10}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !10}
!48 = distinct !{!48, !10}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !10}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !10}
!63 = !{!64, !66, !68}
!64 = distinct !{!64, !65, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!65 = distinct !{!65, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!66 = distinct !{!66, !67, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!67 = distinct !{!67, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!68 = distinct !{!68, !69, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!69 = distinct !{!69, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!70 = !{!71, !73, !75}
!71 = distinct !{!71, !72, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!72 = distinct !{!72, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!73 = distinct !{!73, !74, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!74 = distinct !{!74, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!75 = distinct !{!75, !76, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!76 = distinct !{!76, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!79 = distinct !{!79, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!82 = distinct !{!82, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!85 = distinct !{!85, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!88 = distinct !{!88, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!91 = distinct !{!91, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!94 = distinct !{!94, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!95 = !{!96, !98, !100}
!96 = distinct !{!96, !97, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!97 = distinct !{!97, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!98 = distinct !{!98, !99, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!99 = distinct !{!99, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!100 = distinct !{!100, !101, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!101 = distinct !{!101, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!102 = !{!103, !105, !107}
!103 = distinct !{!103, !104, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!104 = distinct !{!104, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!105 = distinct !{!105, !106, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!106 = distinct !{!106, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!107 = distinct !{!107, !108, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!108 = distinct !{!108, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!109 = !{!110, !112, !114}
!110 = distinct !{!110, !111, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!111 = distinct !{!111, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!112 = distinct !{!112, !113, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!113 = distinct !{!113, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!114 = distinct !{!114, !115, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!115 = distinct !{!115, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!118 = distinct !{!118, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!121 = distinct !{!121, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
