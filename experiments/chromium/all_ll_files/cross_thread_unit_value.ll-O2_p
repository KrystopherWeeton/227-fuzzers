; ModuleID = '../../third_party/blink/renderer/core/css/cssom/cross_thread_unit_value.cc'
source_filename = "../../third_party/blink/renderer/core/css/cssom/cross_thread_unit_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSStyleValue" = type { %"class.blink::ScriptWrappable", %"class.WTF::String" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CrossThreadUnitValue" = type <{ %"class.blink::CrossThreadStyleValue", double, i32, [4 x i8] }>
%"class.blink::CrossThreadStyleValue" = type { i32 (...)** }
%"class.blink::CSSUnitValue" = type <{ %"class.blink::CSSNumericValue", double, i32, [4 x i8] }>
%"class.blink::CSSNumericValue" = type { %"class.blink::CSSStyleValue", %"class.blink::CSSNumericValueType" }
%"class.blink::CSSNumericValueType" = type { %"class.WTF::Vector", i32, i8, i32, [4 x i8] }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase", [28 x i8] }>
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }

$_ZN5blink20CrossThreadUnitValueD0Ev = comdat any

$_ZNK5blink20CrossThreadUnitValue7GetTypeEv = comdat any

$_ZN5blink21CrossThreadStyleValueD2Ev = comdat any

@_ZTVN5blink20CrossThreadUnitValueE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::CrossThreadStyleValue"*)* @_ZN5blink21CrossThreadStyleValueD2Ev to i8*), i8* bitcast (void (%"class.blink::CrossThreadUnitValue"*)* @_ZN5blink20CrossThreadUnitValueD0Ev to i8*), i8* bitcast (i32 (%"class.blink::CrossThreadUnitValue"*)* @_ZNK5blink20CrossThreadUnitValue7GetTypeEv to i8*), i8* bitcast (%"class.blink::CSSStyleValue"* (%"class.blink::CrossThreadUnitValue"*)* @_ZN5blink20CrossThreadUnitValue15ToCSSStyleValueEv to i8*), i8* bitcast (%"class.blink::CrossThreadStyleValue"* (%"class.blink::CrossThreadUnitValue"*)* @_ZNK5blink20CrossThreadUnitValue12IsolatedCopyEv to i8*), i8* bitcast (i1 (%"class.blink::CrossThreadUnitValue"*, %"class.blink::CrossThreadStyleValue"*)* @_ZNK5blink20CrossThreadUnitValueeqERKNS_21CrossThreadStyleValueE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSStyleValue"* @_ZN5blink20CrossThreadUnitValue15ToCSSStyleValueEv(%"class.blink::CrossThreadUnitValue"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = tail call %"class.blink::CSSUnitValue"* @_ZN5blink12CSSUnitValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %3, i32 %5) #4
  %7 = getelementptr inbounds %"class.blink::CSSUnitValue", %"class.blink::CSSUnitValue"* %6, i64 0, i32 0, i32 0
  ret %"class.blink::CSSStyleValue"* %7
}

declare %"class.blink::CSSUnitValue"* @_ZN5blink12CSSUnitValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink20CrossThreadUnitValueeqERKNS_21CrossThreadStyleValueE(%"class.blink::CrossThreadUnitValue"* nocapture readonly, %"class.blink::CrossThreadStyleValue"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::CrossThreadStyleValue"* %1 to i32 (%"class.blink::CrossThreadStyleValue"*)***
  %4 = load i32 (%"class.blink::CrossThreadStyleValue"*)**, i32 (%"class.blink::CrossThreadStyleValue"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.blink::CrossThreadStyleValue"*)*, i32 (%"class.blink::CrossThreadStyleValue"*)** %4, i64 2
  %6 = load i32 (%"class.blink::CrossThreadStyleValue"*)*, i32 (%"class.blink::CrossThreadStyleValue"*)** %5, align 8
  %7 = tail call i32 %6(%"class.blink::CrossThreadStyleValue"* %1) #4
  %8 = icmp ne i32 %7, 3
  %9 = icmp eq %"class.blink::CrossThreadStyleValue"* %1, null
  %10 = or i1 %9, %8
  br i1 %10, label %25, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 1
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %"class.blink::CrossThreadStyleValue", %"class.blink::CrossThreadStyleValue"* %1, i64 1
  %15 = bitcast %"class.blink::CrossThreadStyleValue"* %14 to double*
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %13, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.blink::CrossThreadStyleValue", %"class.blink::CrossThreadStyleValue"* %1, i64 2
  %22 = bitcast %"class.blink::CrossThreadStyleValue"* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %20, %23
  br label %25

25:                                               ; preds = %11, %18, %2
  %26 = phi i1 [ false, %2 ], [ %24, %18 ], [ false, %11 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CrossThreadStyleValue"* @_ZNK5blink20CrossThreadUnitValue12IsolatedCopyEv(%"class.blink::CrossThreadUnitValue"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::CrossThreadUnitValue", %"class.blink::CrossThreadUnitValue"* %0, i64 0, i32 2
  %4 = tail call i8* @_Znwm(i64 24) #5
  %5 = bitcast double* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = load i32, i32* %3, align 4
  %8 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink20CrossThreadUnitValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = getelementptr inbounds i8, i8* %4, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 %7, i32* %12, align 8
  %13 = bitcast i8* %4 to %"class.blink::CrossThreadStyleValue"*
  ret %"class.blink::CrossThreadStyleValue"* %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20CrossThreadUnitValueD0Ev(%"class.blink::CrossThreadUnitValue"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.blink::CrossThreadUnitValue"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink20CrossThreadUnitValue7GetTypeEv(%"class.blink::CrossThreadUnitValue"*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink21CrossThreadStyleValueD2Ev(%"class.blink::CrossThreadStyleValue"*) unnamed_addr #0 comdat align 2 {
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
