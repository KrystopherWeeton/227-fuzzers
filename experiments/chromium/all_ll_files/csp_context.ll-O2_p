; ModuleID = '../../services/network/public/cpp/content_security_policy/csp_context.cc'
source_filename = "../../services/network/public/cpp/content_security_policy/csp_context.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::CSPContext" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"*, %"class.std::__1::__compressed_pair.42" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.network::mojom::ContentSecurityPolicy"* }
%"class.network::mojom::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.0", %"class.base::flat_map", %"class.base::flat_map.15", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.std::__1::vector.25", i32, %"class.mojo::StructPtr.32", %"class.std::__1::vector.25" }
%"class.mojo::StructPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.network::mojom::CSPSource"* }
%"class.network::mojom::CSPSource" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.8" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.10" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::pair"* }
%"class.base::flat_map.15" = type { %"class.base::internal::flat_tree.16" }
%"class.base::internal::flat_tree.16" = type { %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"*, %"class.std::__1::__compressed_pair.20" }
%"struct.std::__1::pair.19" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::pair.19"* }
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::ContentSecurityPolicyHeader" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.mojo::StructPtr.32" = type { %"class.std::__1::unique_ptr.33" }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.network::mojom::CSPTrustedTypes"* }
%"class.network::mojom::CSPTrustedTypes" = type <{ %"class.std::__1::vector.25", i8, i8, [6 x i8] }>
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.mojo::StructPtr"* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.47" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.GURL* }
%"class.mojo::InlinedStructPtr.53" = type <{ %"class.network::mojom::SourceLocation", i32, [4 x i8] }>
%"class.network::mojom::SourceLocation" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.mojo::StructPtr.55" = type { %"class.std::__1::unique_ptr.56" }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.network::mojom::CSPViolation"* }
%"class.network::mojom::CSPViolation" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %class.GURL, %"class.std::__1::vector.25", i8, %"class.std::__1::basic_string", i32, i8, [3 x i8], %"class.mojo::InlinedStructPtr.53" }

@_ZTVN7network10CSPContextE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::CSPContext"*)* @_ZN7network10CSPContextD2Ev to i8*), i8* bitcast (void (%"class.network::CSPContext"*)* @_ZN7network10CSPContextD0Ev to i8*), i8* bitcast (void (%"class.network::CSPContext"*, %"class.mojo::StructPtr.55"*)* @_ZN7network10CSPContext36ReportContentSecurityPolicyViolationEN4mojo9StructPtrINS_5mojom12CSPViolationEEE to i8*), i8* bitcast (void (%"class.network::CSPContext"*, i1, i32, %class.GURL*, %"class.network::mojom::SourceLocation"*)* @_ZNK7network10CSPContext32SanitizeDataForUseInCspViolationEbNS_5mojom16CSPDirectiveNameEP4GURLPNS1_14SourceLocationE to i8*), i8* bitcast (i1 (%"class.network::CSPContext"*, %"class.base::BasicStringPiece"*)* @_ZN7network10CSPContext21SchemeShouldBypassCSPERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE to i8*)] }, align 8

@_ZN7network10CSPContextC1Ev = hidden unnamed_addr alias void (%"class.network::CSPContext"*), void (%"class.network::CSPContext"*)* @_ZN7network10CSPContextC2Ev
@_ZN7network10CSPContextD1Ev = hidden unnamed_addr alias void (%"class.network::CSPContext"*), void (%"class.network::CSPContext"*)* @_ZN7network10CSPContextD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7network10CSPContextC2Ev(%"class.network::CSPContext"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::CSPContext", %"class.network::CSPContext"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network10CSPContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7network10CSPContextD2Ev(%"class.network::CSPContext"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network10CSPContextD0Ev(%"class.network::CSPContext"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.network::CSPContext"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7network10CSPContext14IsAllowedByCspERKNSt3__16vectorIN4mojo9StructPtrINS_5mojom21ContentSecurityPolicyEEENS1_9allocatorIS7_EEEENS5_16CSPDirectiveNameERK4GURLSG_bbRKNS3_16InlinedStructPtrINS5_14SourceLocationEEENS0_19CheckCSPDispositionEb(%"class.network::CSPContext"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32, %class.GURL* dereferenceable(120), %class.GURL* dereferenceable(120), i1 zeroext, i1 zeroext, %"class.mojo::InlinedStructPtr.53"* dereferenceable(40), i32, i1 zeroext) local_unnamed_addr #2 align 2 {
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %14 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %13, align 8
  %15 = icmp eq %"class.mojo::StructPtr"* %12, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %39, %10
  %17 = phi i8 [ 1, %10 ], [ %40, %39 ]
  %18 = and i8 %17, 1
  %19 = icmp ne i8 %18, 0
  ret i1 %19

20:                                               ; preds = %10, %39
  %21 = phi i8 [ %40, %39 ], [ 1, %10 ]
  %22 = phi %"class.mojo::StructPtr"* [ %41, %39 ], [ %12, %10 ]
  switch i32 %8, label %35 [
    i32 0, label %29
    i32 1, label %23
  ]

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.network::mojom::ContentSecurityPolicy"*, %"class.network::mojom::ContentSecurityPolicy"** %24, align 8
  %26 = getelementptr inbounds %"class.network::mojom::ContentSecurityPolicy", %"class.network::mojom::ContentSecurityPolicy"* %25, i64 0, i32 7, i32 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %35, label %39

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = load %"class.network::mojom::ContentSecurityPolicy"*, %"class.network::mojom::ContentSecurityPolicy"** %30, align 8
  %32 = getelementptr inbounds %"class.network::mojom::ContentSecurityPolicy", %"class.network::mojom::ContentSecurityPolicy"* %31, i64 0, i32 7, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %20, %23, %29
  %36 = tail call zeroext i1 @_ZN7network26CheckContentSecurityPolicyERKN4mojo9StructPtrINS_5mojom21ContentSecurityPolicyEEENS2_16CSPDirectiveNameERK4GURLSA_bbPNS_10CSPContextERKNS0_16InlinedStructPtrINS2_14SourceLocationEEEb(%"class.mojo::StructPtr"* dereferenceable(8) %22, i32 %2, %class.GURL* dereferenceable(120) %3, %class.GURL* dereferenceable(120) %4, i1 zeroext %5, i1 zeroext %6, %"class.network::CSPContext"* %0, %"class.mojo::InlinedStructPtr.53"* dereferenceable(40) %7, i1 zeroext %9) #7
  %37 = zext i1 %36 to i8
  %38 = and i8 %21, %37
  br label %39

39:                                               ; preds = %23, %35, %29
  %40 = phi i8 [ %38, %35 ], [ %21, %29 ], [ %21, %23 ]
  %41 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %22, i64 1
  %42 = icmp eq %"class.mojo::StructPtr"* %41, %14
  br i1 %42, label %16, label %20
}

declare zeroext i1 @_ZN7network26CheckContentSecurityPolicyERKN4mojo9StructPtrINS_5mojom21ContentSecurityPolicyEEENS2_16CSPDirectiveNameERK4GURLSA_bbPNS_10CSPContextERKNS0_16InlinedStructPtrINS2_14SourceLocationEEEb(%"class.mojo::StructPtr"* dereferenceable(8), i32, %class.GURL* dereferenceable(120), %class.GURL* dereferenceable(120), i1 zeroext, i1 zeroext, %"class.network::CSPContext"*, %"class.mojo::InlinedStructPtr.53"* dereferenceable(40), i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7network10CSPContext21SchemeShouldBypassCSPERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.network::CSPContext"* nocapture readnone, %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %3 = tail call dereferenceable(24) %"class.std::__1::vector.25"* @_ZN3url22GetCSPBypassingSchemesEv() #7
  %4 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %6, align 8
  %8 = icmp eq %"class.std::__1::basic_string"* %5, %7
  br i1 %8, label %35, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = load i8*, i8** %10, align 8
  br label %14

14:                                               ; preds = %32, %9
  %15 = phi %"class.std::__1::basic_string"* [ %5, %9 ], [ %33, %32 ]
  %16 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %18 to i64
  %23 = select i1 %19, i64 %21, i64 %22
  %24 = icmp eq i64 %23, %12
  br i1 %24, label %25, label %32

25:                                               ; preds = %14
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  %29 = select i1 %19, i8* %27, i8* %28
  %30 = tail call i32 @bcmp(i8* %29, i8* %13, i64 %12) #7
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %25, %14
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 1
  %34 = icmp eq %"class.std::__1::basic_string"* %33, %7
  br i1 %34, label %35, label %14

35:                                               ; preds = %25, %32, %2
  %36 = phi %"class.std::__1::basic_string"* [ %5, %2 ], [ %7, %32 ], [ %15, %25 ]
  %37 = icmp ne %"class.std::__1::basic_string"* %36, %7
  ret i1 %37
}

declare dereferenceable(24) %"class.std::__1::vector.25"* @_ZN3url22GetCSPBypassingSchemesEv() local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7network10CSPContext32SanitizeDataForUseInCspViolationEbNS_5mojom16CSPDirectiveNameEP4GURLPNS1_14SourceLocationE(%"class.network::CSPContext"* nocapture, i1 zeroext, i32, %class.GURL* nocapture, %"class.network::mojom::SourceLocation"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7network10CSPContext36ReportContentSecurityPolicyViolationEN4mojo9StructPtrINS_5mojom12CSPViolationEEE(%"class.network::CSPContext"* nocapture, %"class.mojo::StructPtr.55"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
