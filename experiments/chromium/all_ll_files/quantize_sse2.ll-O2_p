; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_quantize_b_sse2(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = bitcast i16* %3 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = bitcast i16* %4 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %5 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = add <8 x i16> %15, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %21 = bitcast <8 x i16> %20 to <2 x i64>
  %22 = bitcast i16* %9 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 16
  %24 = bitcast i16* %6 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 16
  %26 = bitcast i32* %0 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = getelementptr inbounds i32, i32* %0, i64 4
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %30) #3
  %32 = getelementptr inbounds i32, i32* %0, i64 8
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 12
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #3
  %39 = ashr <8 x i16> %31, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %40 = ashr <8 x i16> %38, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %41 = xor <8 x i16> %39, %31
  %42 = sub <8 x i16> %41, %39
  %43 = xor <8 x i16> %40, %38
  %44 = sub <8 x i16> %43, %40
  %45 = icmp sgt <8 x i16> %42, %20
  %46 = sext <8 x i1> %45 to <8 x i16>
  %47 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %49 = icmp sgt <8 x i16> %44, %48
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = bitcast <2 x i64> %17 to <8 x i16>
  %52 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %42, <8 x i16> %51) #3
  %53 = bitcast <2 x i64> %19 to <8 x i16>
  %54 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %52, <8 x i16> %53) #3
  %55 = add <8 x i16> %52, %54
  %56 = bitcast <2 x i64> %25 to <8 x i16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %59 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %60 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %61 = bitcast <2 x i64> %58 to <8 x i16>
  %62 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %44, <8 x i16> %61) #3
  %63 = bitcast <2 x i64> %59 to <8 x i16>
  %64 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %62, <8 x i16> %63) #3
  %65 = add <8 x i16> %62, %64
  %66 = bitcast <2 x i64> %60 to <8 x i16>
  %67 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %65, <8 x i16> %66) #3
  %68 = xor <8 x i16> %57, %39
  %69 = sub <8 x i16> %68, %39
  %70 = xor <8 x i16> %67, %40
  %71 = sub <8 x i16> %70, %40
  %72 = and <8 x i16> %69, %46
  %73 = and <8 x i16> %71, %50
  %74 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %72, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %75 = shufflevector <8 x i16> %72, <8 x i16> %74, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %76 = shufflevector <8 x i16> %72, <8 x i16> %74, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 16
  %78 = getelementptr inbounds i32, i32* %7, i64 4
  %79 = bitcast i32* %78 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %79, align 16
  %80 = getelementptr inbounds i32, i32* %7, i64 8
  %81 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %73, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %82 = shufflevector <8 x i16> %73, <8 x i16> %81, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %73, <8 x i16> %81, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = bitcast i32* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %84, align 16
  %85 = getelementptr inbounds i32, i32* %7, i64 12
  %86 = bitcast i32* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 16
  %87 = bitcast <2 x i64> %23 to <8 x i16>
  %88 = mul <8 x i16> %72, %87
  %89 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %72, <8 x i16> %87) #3
  %90 = shufflevector <8 x i16> %88, <8 x i16> %89, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = shufflevector <8 x i16> %88, <8 x i16> %89, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %92 = bitcast i32* %8 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 16
  %93 = getelementptr inbounds i32, i32* %8, i64 4
  %94 = bitcast i32* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 16
  %95 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %96 = getelementptr inbounds i32, i32* %8, i64 8
  %97 = bitcast <2 x i64> %95 to <8 x i16>
  %98 = mul <8 x i16> %73, %97
  %99 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %73, <8 x i16> %97) #3
  %100 = shufflevector <8 x i16> %98, <8 x i16> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = shufflevector <8 x i16> %98, <8 x i16> %99, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = bitcast i32* %96 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %102, align 16
  %103 = getelementptr inbounds i32, i32* %8, i64 12
  %104 = bitcast i32* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 16
  %105 = icmp eq <8 x i16> %72, zeroinitializer
  %106 = icmp eq <8 x i16> %73, zeroinitializer
  %107 = bitcast i16* %12 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 16
  %109 = getelementptr inbounds i16, i16* %12, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 16
  %112 = sub <8 x i16> %108, %46
  %113 = sub <8 x i16> %111, %50
  %114 = select <8 x i1> %105, <8 x i16> zeroinitializer, <8 x i16> %112
  %115 = select <8 x i1> %106, <8 x i16> zeroinitializer, <8 x i16> %113
  %116 = icmp sgt <8 x i16> %114, %115
  %117 = select <8 x i1> %116, <8 x i16> %114, <8 x i16> %115
  %118 = icmp sgt i64 %1, 16
  br i1 %118, label %119, label %208

119:                                              ; preds = %13, %119
  %120 = phi i64 [ %206, %119 ], [ 16, %13 ]
  %121 = phi <8 x i16> [ %205, %119 ], [ %117, %13 ]
  %122 = getelementptr inbounds i32, i32* %0, i64 %120
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 16
  %125 = getelementptr inbounds i32, i32* %122, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 16
  %128 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %124, <4 x i32> %127) #3
  %129 = getelementptr inbounds i32, i32* %122, i64 8
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 16
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 16
  %135 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %131, <4 x i32> %134) #3
  %136 = ashr <8 x i16> %128, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %137 = ashr <8 x i16> %135, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %138 = xor <8 x i16> %136, %128
  %139 = sub <8 x i16> %138, %136
  %140 = xor <8 x i16> %137, %135
  %141 = sub <8 x i16> %140, %137
  %142 = icmp sgt <8 x i16> %139, %48
  %143 = sext <8 x i1> %142 to <8 x i16>
  %144 = icmp sgt <8 x i16> %141, %48
  %145 = sext <8 x i1> %144 to <8 x i16>
  %146 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %139, <8 x i16> %61) #3
  %147 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %146, <8 x i16> %63) #3
  %148 = add <8 x i16> %146, %147
  %149 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %148, <8 x i16> %66) #3
  %150 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %141, <8 x i16> %61) #3
  %151 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %150, <8 x i16> %63) #3
  %152 = add <8 x i16> %150, %151
  %153 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %152, <8 x i16> %66) #3
  %154 = xor <8 x i16> %149, %136
  %155 = sub <8 x i16> %154, %136
  %156 = xor <8 x i16> %153, %137
  %157 = sub <8 x i16> %156, %137
  %158 = and <8 x i16> %155, %143
  %159 = and <8 x i16> %157, %145
  %160 = getelementptr inbounds i32, i32* %7, i64 %120
  %161 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %158, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %162 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %163 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %164 = bitcast i32* %160 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %164, align 16
  %165 = getelementptr inbounds i32, i32* %160, i64 4
  %166 = bitcast i32* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 16
  %167 = getelementptr inbounds i32, i32* %160, i64 8
  %168 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %159, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %169 = shufflevector <8 x i16> %159, <8 x i16> %168, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %170 = shufflevector <8 x i16> %159, <8 x i16> %168, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %171 = bitcast i32* %167 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 16
  %172 = getelementptr inbounds i32, i32* %167, i64 4
  %173 = bitcast i32* %172 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds i32, i32* %8, i64 %120
  %175 = mul <8 x i16> %158, %97
  %176 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %158, <8 x i16> %97) #3
  %177 = shufflevector <8 x i16> %175, <8 x i16> %176, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %178 = shufflevector <8 x i16> %175, <8 x i16> %176, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %179 = bitcast i32* %174 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %179, align 16
  %180 = getelementptr inbounds i32, i32* %174, i64 4
  %181 = bitcast i32* %180 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %181, align 16
  %182 = getelementptr inbounds i32, i32* %174, i64 8
  %183 = mul <8 x i16> %159, %97
  %184 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %159, <8 x i16> %97) #3
  %185 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %186 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %187 = bitcast i32* %182 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %187, align 16
  %188 = getelementptr inbounds i32, i32* %182, i64 4
  %189 = bitcast i32* %188 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %189, align 16
  %190 = icmp eq <8 x i16> %158, zeroinitializer
  %191 = icmp eq <8 x i16> %159, zeroinitializer
  %192 = getelementptr inbounds i16, i16* %12, i64 %120
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = sub <8 x i16> %194, %143
  %199 = sub <8 x i16> %197, %145
  %200 = select <8 x i1> %190, <8 x i16> zeroinitializer, <8 x i16> %198
  %201 = select <8 x i1> %191, <8 x i16> zeroinitializer, <8 x i16> %199
  %202 = icmp sgt <8 x i16> %200, %201
  %203 = select <8 x i1> %202, <8 x i16> %200, <8 x i16> %201
  %204 = icmp sgt <8 x i16> %121, %203
  %205 = select <8 x i1> %204, <8 x i16> %121, <8 x i16> %203
  %206 = add nuw i64 %120, 16
  %207 = icmp slt i64 %206, %1
  br i1 %207, label %119, label %208

208:                                              ; preds = %119, %13
  %209 = phi <8 x i16> [ %117, %13 ], [ %205, %119 ]
  %210 = bitcast <8 x i16> %209 to <4 x i32>
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %212 = bitcast <4 x i32> %211 to <8 x i16>
  %213 = icmp sgt <8 x i16> %209, %212
  %214 = select <8 x i1> %213, <8 x i16> %209, <8 x i16> %212
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %216 = icmp sgt <8 x i16> %214, %215
  %217 = select <8 x i1> %216, <8 x i16> %214, <8 x i16> %215
  %218 = shufflevector <8 x i16> %217, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %219 = icmp sgt <8 x i16> %217, %218
  %220 = select <8 x i1> %219, <8 x i16> %217, <8 x i16> %218
  %221 = extractelement <8 x i16> %220, i64 1
  store i16 %221, i16* %10, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
