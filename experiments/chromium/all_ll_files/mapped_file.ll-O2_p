; ModuleID = '../../net/disk_cache/blockfile/mapped_file.cc'
source_filename = "../../net/disk_cache/blockfile/mapped_file.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.disk_cache::MappedFile" = type { %"class.disk_cache::File", i8, i8*, i64 }
%"class.disk_cache::File" = type { i32 (...)**, %"class.base::RefCounted", i8, i8, [2 x i8], %"class.base::File", %"class.base::File" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::File" = type <{ %"class.base::ScopedGeneric", %"class.base::FilePath", %"class.base::FileTracing::ScopedEnabler", [3 x i8], i32, i8, i8, [6 x i8] }>
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::FileTracing::ScopedEnabler" = type { i8 }
%"class.disk_cache::FileBlock" = type { i32 (...)** }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10disk_cache10MappedFile4LoadEPKNS_9FileBlockE(%"class.disk_cache::MappedFile"*, %"class.disk_cache::FileBlock"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.disk_cache::FileBlock"* %1 to i32 (%"class.disk_cache::FileBlock"*)***
  %4 = load i32 (%"class.disk_cache::FileBlock"*)**, i32 (%"class.disk_cache::FileBlock"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.disk_cache::FileBlock"*)*, i32 (%"class.disk_cache::FileBlock"*)** %4, i64 4
  %6 = load i32 (%"class.disk_cache::FileBlock"*)*, i32 (%"class.disk_cache::FileBlock"*)** %5, align 8
  %7 = tail call i32 %6(%"class.disk_cache::FileBlock"* %1) #4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.disk_cache::MappedFile", %"class.disk_cache::MappedFile"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %8
  %12 = getelementptr inbounds %"class.disk_cache::MappedFile", %"class.disk_cache::MappedFile"* %0, i64 0, i32 0
  %13 = bitcast %"class.disk_cache::FileBlock"* %1 to i8* (%"class.disk_cache::FileBlock"*)***
  %14 = load i8* (%"class.disk_cache::FileBlock"*)**, i8* (%"class.disk_cache::FileBlock"*)*** %13, align 8
  %15 = getelementptr inbounds i8* (%"class.disk_cache::FileBlock"*)*, i8* (%"class.disk_cache::FileBlock"*)** %14, i64 2
  %16 = load i8* (%"class.disk_cache::FileBlock"*)*, i8* (%"class.disk_cache::FileBlock"*)** %15, align 8
  %17 = tail call i8* %16(%"class.disk_cache::FileBlock"* %1) #4
  %18 = bitcast %"class.disk_cache::FileBlock"* %1 to i64 (%"class.disk_cache::FileBlock"*)***
  %19 = load i64 (%"class.disk_cache::FileBlock"*)**, i64 (%"class.disk_cache::FileBlock"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.disk_cache::FileBlock"*)*, i64 (%"class.disk_cache::FileBlock"*)** %19, i64 3
  %21 = load i64 (%"class.disk_cache::FileBlock"*)*, i64 (%"class.disk_cache::FileBlock"*)** %20, align 8
  %22 = tail call i64 %21(%"class.disk_cache::FileBlock"* %1) #4
  %23 = tail call zeroext i1 @_ZN10disk_cache4File4ReadEPvmm(%"class.disk_cache::File"* %12, i8* %17, i64 %22, i64 %11) #4
  ret i1 %23
}

declare zeroext i1 @_ZN10disk_cache4File4ReadEPvmm(%"class.disk_cache::File"*, i8*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10disk_cache10MappedFile5StoreEPKNS_9FileBlockE(%"class.disk_cache::MappedFile"*, %"class.disk_cache::FileBlock"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.disk_cache::FileBlock"* %1 to i32 (%"class.disk_cache::FileBlock"*)***
  %4 = load i32 (%"class.disk_cache::FileBlock"*)**, i32 (%"class.disk_cache::FileBlock"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.disk_cache::FileBlock"*)*, i32 (%"class.disk_cache::FileBlock"*)** %4, i64 4
  %6 = load i32 (%"class.disk_cache::FileBlock"*)*, i32 (%"class.disk_cache::FileBlock"*)** %5, align 8
  %7 = tail call i32 %6(%"class.disk_cache::FileBlock"* %1) #4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.disk_cache::MappedFile", %"class.disk_cache::MappedFile"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %8
  %12 = getelementptr inbounds %"class.disk_cache::MappedFile", %"class.disk_cache::MappedFile"* %0, i64 0, i32 0
  %13 = bitcast %"class.disk_cache::FileBlock"* %1 to i8* (%"class.disk_cache::FileBlock"*)***
  %14 = load i8* (%"class.disk_cache::FileBlock"*)**, i8* (%"class.disk_cache::FileBlock"*)*** %13, align 8
  %15 = getelementptr inbounds i8* (%"class.disk_cache::FileBlock"*)*, i8* (%"class.disk_cache::FileBlock"*)** %14, i64 2
  %16 = load i8* (%"class.disk_cache::FileBlock"*)*, i8* (%"class.disk_cache::FileBlock"*)** %15, align 8
  %17 = tail call i8* %16(%"class.disk_cache::FileBlock"* %1) #4
  %18 = bitcast %"class.disk_cache::FileBlock"* %1 to i64 (%"class.disk_cache::FileBlock"*)***
  %19 = load i64 (%"class.disk_cache::FileBlock"*)**, i64 (%"class.disk_cache::FileBlock"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.disk_cache::FileBlock"*)*, i64 (%"class.disk_cache::FileBlock"*)** %19, i64 3
  %21 = load i64 (%"class.disk_cache::FileBlock"*)*, i64 (%"class.disk_cache::FileBlock"*)** %20, align 8
  %22 = tail call i64 %21(%"class.disk_cache::FileBlock"* %1) #4
  %23 = tail call zeroext i1 @_ZN10disk_cache4File5WriteEPKvmm(%"class.disk_cache::File"* %12, i8* %17, i64 %22, i64 %11) #4
  ret i1 %23
}

declare zeroext i1 @_ZN10disk_cache4File5WriteEPKvmm(%"class.disk_cache::File"*, i8*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10disk_cache10MappedFile7PreloadEv(%"class.disk_cache::MappedFile"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.disk_cache::MappedFile", %"class.disk_cache::MappedFile"* %0, i64 0, i32 0
  %3 = tail call i64 @_ZN10disk_cache4File9GetLengthEv(%"class.disk_cache::File"* %2) #4
  %4 = tail call i8* @_Znam(i64 %3) #5
  %5 = tail call zeroext i1 @_ZN10disk_cache4File4ReadEPvmm(%"class.disk_cache::File"* %2, i8* nonnull %4, i64 %3, i64 0) #4
  tail call void @_ZdaPv(i8* nonnull %4) #5
  ret i1 %5
}

declare i64 @_ZN10disk_cache4File9GetLengthEv(%"class.disk_cache::File"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
