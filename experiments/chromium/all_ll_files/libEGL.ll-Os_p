; ModuleID = '../../third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.LibX11 = type { i8 }
%struct.Function = type { i8*, void ()* }
%class.LibGLESv2 = type <{ i8*, %class.LibGLESv2exports*, i8, [7 x i8] }>
%class.LibGLESv2exports = type { void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (float, float, float, float)*, void (float)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32, i32*)*, i32 ()*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (float, i8)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, i8 (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32)*, void (i32, i32*)*, %"class.egl::Context"* (%"class.egl::Display"*, %"class.egl::Context"*, %"class.egl::Config"*)*, void ()* (i8*)*, %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.egl::Image"* (%"class.egl::ClientBuffer"*)*, %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.sw::FrameBuffer"* (i8*, i64, i32, i32)* }
%"class.egl::Display" = type { i32 (...)**, i8*, i8*, i32, i32, %"class.std::__1::set", %"class.egl::ConfigSet", %"class.std::__1::set.12", %"class.std::__1::set.22", %"class.gl::NameSpace", %"class.sw::RecursiveLock" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.egl::ConfigSet" = type { %"class.std::__1::set.4" }
%"class.std::__1::set.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.12" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.22" = type { %"class.std::__1::__tree.23" }
%"class.std::__1::__tree.23" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.gl::NameSpace" = type <{ %"class.std::__1::map", i32, [4 x i8] }>
%"class.std::__1::map" = type { %"class.std::__1::__tree.32" }
%"class.std::__1::__tree.32" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.33", %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.sw::RecursiveLock" = type { %"class.std::__1::recursive_mutex" }
%"class.std::__1::recursive_mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.egl::Context" = type { %"class.gl::Object.base", %"class.egl::Display"* }
%"class.gl::Object.base" = type <{ i32 (...)**, i32 }>
%"class.egl::Config" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.egl::Image" = type { %"class.sw::Surface.base", [6 x i8], %"class.gl::Object.base", i32, i32, i32, i32, i8, %"class.egl::Texture"* }
%"class.sw::Surface.base" = type <{ i32 (...)**, %"class.sw::Resource"*, %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", i8, i8, i8, i8, i32, i8, i8 }>
%"class.sw::Resource" = type { i64, %"class.sw::MutexLock", %"class.sw::Event", i32, i32, i32, i8, i8* }
%"class.sw::MutexLock" = type { %union.pthread_mutex_t }
%"class.sw::Event" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.46, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.46 = type { i64 }
%"struct.sw::Surface::Buffer" = type <{ i8*, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, %"class.sw::AtomicInt", i8, [3 x i8] }>
%"class.sw::AtomicInt" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.egl::Texture" = type { %"class.gl::NamedObject" }
%"class.gl::NamedObject" = type { %"class.gl::Object.base", i32 }
%"class.egl::ClientBuffer" = type { i32, i32, i32, i8*, i64 }
%"class.sw::FrameBuffer" = type <{ i32 (...)**, i8, [7 x i8], i8*, i32, i32, i32, i32, i8*, void (i8*, i8*, %"struct.sw::FrameBuffer::Cursor"*)*, %"class.std::__1::shared_ptr", %"struct.sw::BlitState", %"struct.sw::BlitState", %"class.sw::Thread"*, %"class.sw::Event", %"class.sw::Event", i8, [7 x i8] }>
%"struct.sw::FrameBuffer::Cursor" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.rr::Routine"*, %"class.std::__1::__shared_weak_count"* }
%"class.rr::Routine" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.sw::BlitState" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.sw::Thread" = type <{ i64, i8, [7 x i8] }>
%struct.LibX11exports = type { %struct._XDisplay* (i8*)*, i32 (%struct._XDisplay*, i64, %struct.XWindowAttributes*)*, %struct.Screen* (%struct._XDisplay*)*, i32 (%struct.Screen*)*, i32 (%struct.Screen*)*, i32 (%struct.Screen*)*, %struct._XGC* (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, i32, i32, i32, %struct.XVisualInfo*)*, %struct.Visual* (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, %struct.XErrorEvent*)* (i32 (%struct._XDisplay*, %struct.XErrorEvent*)*)*, i32 (%struct._XDisplay*, i32)*, %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XDisplay*)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, %struct._XImage*, i32, i32, i32, i32, i32, i32)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i8*, i32)*, i32 (%struct._XDisplay*)*, %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i8*, %struct.XShmSegmentInfo*, i32, i32)*, i32 (%struct._XDisplay*, %struct.XShmSegmentInfo*)*, i32 (%struct._XDisplay*, %struct.XShmSegmentInfo*)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, %struct._XImage*, i32, i32, i32, i32, i32, i32, i1)* }
%struct._XDisplay = type opaque
%struct.XWindowAttributes = type { i32, i32, i32, i32, i32, i32, %struct.Visual*, i64, i32, i32, i32, i32, i64, i64, i32, i64, i32, i32, i64, i64, i64, i32, %struct.Screen* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._XGC = type opaque
%struct.XVisualInfo = type { %struct.Visual*, i64, i32, i32, i32, i64, i64, i64, i32, i32 }
%struct.XErrorEvent = type { i32, %struct._XDisplay*, i64, i64, i8, i8, i8 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %"struct._XImage::funcs" }
%"struct._XImage::funcs" = type { {}*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.XShmSegmentInfo = type { i64, i32, i8*, i32 }
%"class.egl::(anonymous namespace)::EGLAttribs" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.egl::Surface" = type <{ %"class.gl::Surface", %"class.gl::Object.base", [4 x i8], %"class.egl::Display"*, %"class.egl::Config"*, %"class.egl::Image"*, %"class.egl::Image"*, %"class.egl::Texture"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i8*, i32, i32, i32, [4 x i8] }>
%"class.gl::Surface" = type { i32 (...)** }
%"class.egl::FenceSync" = type { i32, %"class.egl::Context"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.53 }
%union.anon.53 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.54 }
%struct.anon.54 = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZN9LibGLESv211loadExportsEv = comdat any

$_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_ = comdat any

@libX11 = external global %class.LibX11, align 1
@.str = private unnamed_addr constant [128 x i8] c"EGL_KHR_client_get_all_proc_addresses EGL_KHR_platform_gbm EGL_KHR_platform_x11 EGL_EXT_client_extensions EGL_EXT_platform_base\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"OpenGL_ES\00", align 1
@.str.2 = private unnamed_addr constant [299 x i8] c"EGL_KHR_create_context EGL_KHR_get_all_proc_addresses EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_gl_renderbuffer_image EGL_KHR_fence_sync EGL_KHR_image_base EGL_KHR_surfaceless_context EGL_ANGLE_iosurface_client_buffer EGL_ANDROID_framebuffer_target EGL_ANDROID_recordable\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"Google Inc.\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"1.4 SwiftShader 4.1.0.7\00", align 1
@_ZZN3egl10GetConfigsEPvPS0_iPiE10attribList = internal constant [1 x i32] [i32 12344], align 4
@_ZZN3egl12ChooseConfigEPvPKiPS0_iPiE10attribList = internal constant [1 x i32] [i32 12344], align 4
@_ZZN3egl14GetProcAddressEPKcE12eglFunctions = internal constant [54 x %struct.Function] [%struct.Function { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), void ()* bitcast (i32 (i32)* @eglBindAPI to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32)* @eglBindTexImage to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), void ()* bitcast (i32 (i8*, i32*, i8**, i32, i32*)* @eglChooseConfig to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i64)* @eglClientWaitSync to void ()*) }, %struct.Function { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i64)* @eglClientWaitSyncKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i64)* @eglCopyBuffers to void ()*) }, %struct.Function { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i8*, i32*)* @eglCreateContext to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i32, i8*, i64*)* @eglCreateImage to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i32, i8*, i32*)* @eglCreateImageKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.14, i32 0, i32 0), void ()* bitcast (i8* (i8*, i32, i8*, i8*, i32*)* @eglCreatePbufferFromClientBuffer to void ()*) }, %struct.Function { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i32*)* @eglCreatePbufferSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i64, i32*)* @eglCreatePixmapSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i8*, i64*)* @eglCreatePlatformPixmapSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.18, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i8*, i32*)* @eglCreatePlatformPixmapSurfaceEXT to void ()*) }, %struct.Function { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.19, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i8*, i64*)* @eglCreatePlatformWindowSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i8*, i32*)* @eglCreatePlatformWindowSurfaceEXT to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), void ()* bitcast (i8* (i8*, i32, i64*)* @eglCreateSync to void ()*) }, %struct.Function { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i32 0, i32 0), void ()* bitcast (i8* (i8*, i32, i32*)* @eglCreateSyncKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i32 0, i32 0), void ()* bitcast (i8* (i8*, i8*, i64, i32*)* @eglCreateWindowSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.24, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroyContext to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroyImage to void ()*) }, %struct.Function { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.26, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroyImageKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.27, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroySurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroySync to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglDestroySyncKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.30, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i32*)* @eglGetConfigAttrib to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8**, i32, i32*)* @eglGetConfigs to void ()*) }, %struct.Function { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i32 0, i32 0), void ()* bitcast (i8* ()* @eglGetCurrentContext to void ()*) }, %struct.Function { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i32 0, i32 0), void ()* bitcast (i8* ()* @eglGetCurrentDisplay to void ()*) }, %struct.Function { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i32 0, i32 0), void ()* bitcast (i8* (i32)* @eglGetCurrentSurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35, i32 0, i32 0), void ()* bitcast (i8* (i64)* @eglGetDisplay to void ()*) }, %struct.Function { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), void ()* bitcast (i32 ()* @eglGetError to void ()*) }, %struct.Function { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i32 0, i32 0), void ()* bitcast (i8* (i32, i8*, i64*)* @eglGetPlatformDisplay to void ()*) }, %struct.Function { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i32 0, i32 0), void ()* bitcast (i8* (i32, i8*, i32*)* @eglGetPlatformDisplayEXT to void ()*) }, %struct.Function { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39, i32 0, i32 0), void ()* bitcast (void ()* (i8*)* @eglGetProcAddress to void ()*) }, %struct.Function { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i64*)* @eglGetSyncAttrib to void ()*) }, %struct.Function { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i32*)* @eglGetSyncAttribKHR to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i32 0, i32 0), void ()* bitcast (i32 (i8*, i32*, i32*)* @eglInitialize to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i8*, i8*)* @eglMakeCurrent to void ()*) }, %struct.Function { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i32 0, i32 0), void ()* bitcast (i32 ()* @eglQueryAPI to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i32*)* @eglQueryContext to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i32 0, i32 0), void ()* bitcast (i8* (i8*, i32)* @eglQueryString to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i32*)* @eglQuerySurface to void ()*) }, %struct.Function { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.48, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32)* @eglReleaseTexImage to void ()*) }, %struct.Function { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), void ()* bitcast (i32 ()* @eglReleaseThread to void ()*) }, %struct.Function { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32, i32)* @eglSurfaceAttrib to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.51, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*)* @eglSwapBuffers to void ()*) }, %struct.Function { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), void ()* bitcast (i32 (i8*, i32)* @eglSwapInterval to void ()*) }, %struct.Function { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), void ()* bitcast (i32 (i8*)* @eglTerminate to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.54, i32 0, i32 0), void ()* bitcast (i32 ()* @eglWaitClient to void ()*) }, %struct.Function { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i32 0, i32 0), void ()* bitcast (i32 ()* @eglWaitGL to void ()*) }, %struct.Function { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), void ()* bitcast (i32 (i32)* @eglWaitNative to void ()*) }, %struct.Function { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32)* @eglWaitSync to void ()*) }, %struct.Function { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.58, i32 0, i32 0), void ()* bitcast (i32 (i8*, i8*, i32)* @eglWaitSyncKHR to void ()*) }], align 16
@.str.5 = private unnamed_addr constant [11 x i8] c"eglBindAPI\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"eglBindTexImage\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"eglChooseConfig\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"eglClientWaitSync\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"eglClientWaitSyncKHR\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"eglCopyBuffers\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"eglCreateContext\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"eglCreateImage\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"eglCreateImageKHR\00", align 1
@.str.14 = private unnamed_addr constant [33 x i8] c"eglCreatePbufferFromClientBuffer\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"eglCreatePbufferSurface\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"eglCreatePixmapSurface\00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"eglCreatePlatformPixmapSurface\00", align 1
@.str.18 = private unnamed_addr constant [34 x i8] c"eglCreatePlatformPixmapSurfaceEXT\00", align 1
@.str.19 = private unnamed_addr constant [31 x i8] c"eglCreatePlatformWindowSurface\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c"eglCreatePlatformWindowSurfaceEXT\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"eglCreateSync\00", align 1
@.str.22 = private unnamed_addr constant [17 x i8] c"eglCreateSyncKHR\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"eglCreateWindowSurface\00", align 1
@.str.24 = private unnamed_addr constant [18 x i8] c"eglDestroyContext\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"eglDestroyImage\00", align 1
@.str.26 = private unnamed_addr constant [19 x i8] c"eglDestroyImageKHR\00", align 1
@.str.27 = private unnamed_addr constant [18 x i8] c"eglDestroySurface\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"eglDestroySync\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"eglDestroySyncKHR\00", align 1
@.str.30 = private unnamed_addr constant [19 x i8] c"eglGetConfigAttrib\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"eglGetConfigs\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"eglGetCurrentContext\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"eglGetCurrentDisplay\00", align 1
@.str.34 = private unnamed_addr constant [21 x i8] c"eglGetCurrentSurface\00", align 1
@.str.35 = private unnamed_addr constant [14 x i8] c"eglGetDisplay\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c"eglGetError\00", align 1
@.str.37 = private unnamed_addr constant [22 x i8] c"eglGetPlatformDisplay\00", align 1
@.str.38 = private unnamed_addr constant [25 x i8] c"eglGetPlatformDisplayEXT\00", align 1
@.str.39 = private unnamed_addr constant [18 x i8] c"eglGetProcAddress\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"eglGetSyncAttrib\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"eglGetSyncAttribKHR\00", align 1
@.str.42 = private unnamed_addr constant [14 x i8] c"eglInitialize\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"eglMakeCurrent\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"eglQueryAPI\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"eglQueryContext\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"eglQueryString\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"eglQuerySurface\00", align 1
@.str.48 = private unnamed_addr constant [19 x i8] c"eglReleaseTexImage\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"eglReleaseThread\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"eglSurfaceAttrib\00", align 1
@.str.51 = private unnamed_addr constant [15 x i8] c"eglSwapBuffers\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"eglSwapInterval\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"eglTerminate\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"eglWaitClient\00", align 1
@.str.55 = private unnamed_addr constant [10 x i8] c"eglWaitGL\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"eglWaitNative\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"eglWaitSync\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"eglWaitSyncKHR\00", align 1
@.str.59 = private unnamed_addr constant [4 x i8] c"egl\00", align 1
@libGLESv2 = external global %class.LibGLESv2, align 8
@.str.61 = private unnamed_addr constant [27 x i8] c"lib64GLES_V2_translator.so\00", align 1
@.str.62 = private unnamed_addr constant [15 x i8] c"libGLESv2.so.2\00", align 1
@.str.63 = private unnamed_addr constant [13 x i8] c"libGLESv2.so\00", align 1
@__const._ZN9LibGLESv211loadExportsEv.libGLESv2_lib = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i32 0, i32 0)], align 16
@.str.64 = private unnamed_addr constant [22 x i8] c"libGLESv2_swiftshader\00", align 1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl8GetErrorEv() local_unnamed_addr #0 {
  %1 = tail call i32 @_ZN3egl15getCurrentErrorEv() #10
  %2 = icmp eq i32 %1, 12288
  br i1 %2, label %4, label %3

3:                                                ; preds = %0
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %4

4:                                                ; preds = %0, %3
  ret i32 %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare i32 @_ZN3egl15getCurrentErrorEv() local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl15setCurrentErrorEi(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl10GetDisplayEl(i64) local_unnamed_addr #0 {
  %2 = tail call %struct.LibX11exports* @_ZN6LibX1111loadExportsEv(%class.LibX11* nonnull @libX11) #10
  %3 = icmp eq %struct.LibX11exports* %2, null
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  %4 = select i1 %3, i8* inttoptr (i64 4207812181 to i8*), i8* inttoptr (i64 1 to i8*)
  ret i8* %4
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl10InitializeEPvPiS1_(i8*, i32*, i32*) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = icmp eq %"class.egl::Display"* %4, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %3, %9
  br i1 %5, label %12, label %13

12:                                               ; preds = %11
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %23

13:                                               ; preds = %11
  %14 = tail call zeroext i1 @_ZN3egl7Display10initializeEv(%"class.egl::Display"* nonnull %4) #10
  br i1 %14, label %16, label %15

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12289) #10
  br label %23

16:                                               ; preds = %13
  %17 = icmp eq i32* %1, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %16
  store i32 1, i32* %1, align 4
  br label %19

19:                                               ; preds = %16, %18
  %20 = icmp eq i32* %2, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  store i32 4, i32* %2, align 4
  br label %22

22:                                               ; preds = %19, %21
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %23

23:                                               ; preds = %22, %15, %12
  %24 = phi i32 [ 1, %22 ], [ 0, %15 ], [ 0, %12 ]
  br i1 %8, label %27, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %26) #10
  br label %27

27:                                               ; preds = %23, %25
  ret i32 %24
}

; Function Attrs: optsize
declare %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8*) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display10initializeEv(%"class.egl::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl9TerminateEPv(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %13

4:                                                ; preds = %1
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* nonnull %0) #10
  %6 = icmp eq %"class.egl::Display"* %5, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  %9 = or i1 %6, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  tail call void @_ZN3egl7Display9terminateEv(%"class.egl::Display"* nonnull %5) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %13

12:                                               ; preds = %4
  tail call void @_ZN3egl7Display9terminateEv(%"class.egl::Display"* %5) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %13

13:                                               ; preds = %12, %10, %3
  %14 = phi i32 [ 0, %3 ], [ 1, %10 ], [ 1, %12 ]
  ret i32 %14
}

; Function Attrs: optsize
declare void @_ZN3egl7Display9terminateEv(%"class.egl::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl11QueryStringEPvi(i8*, i32) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  %4 = icmp eq i32 %1, 12373
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %27

7:                                                ; preds = %2
  %8 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %9 = icmp eq %"class.egl::Display"* %8, null
  %10 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %8, i64 0, i32 10
  %11 = select i1 %9, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %10
  %12 = icmp eq %"class.sw::RecursiveLock"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %11, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %14) #10
  br label %15

15:                                               ; preds = %7, %13
  %16 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %8) #11
  br i1 %16, label %17, label %23

17:                                               ; preds = %15
  switch i32 %1, label %22 [
    i32 12429, label %18
    i32 12373, label %19
    i32 12371, label %20
    i32 12372, label %21
  ]

18:                                               ; preds = %17
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %23

19:                                               ; preds = %17
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %23

20:                                               ; preds = %17
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %23

21:                                               ; preds = %17
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %23

22:                                               ; preds = %17
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %23

23:                                               ; preds = %15, %22, %21, %20, %19, %18
  %24 = phi i8* [ null, %22 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), %21 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), %20 ], [ getelementptr inbounds ([299 x i8], [299 x i8]* @.str.2, i64 0, i64 0), %19 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), %18 ], [ null, %15 ]
  br i1 %12, label %27, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %11, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %26) #10
  br label %27

27:                                               ; preds = %25, %23, %6
  %28 = phi i8* [ getelementptr inbounds ([128 x i8], [128 x i8]* @.str, i64 0, i64 0), %6 ], [ %24, %23 ], [ %24, %25 ]
  ret i8* %28
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"*) unnamed_addr #0 {
  %2 = icmp eq %"class.egl::Display"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = tail call zeroext i1 @_ZNK3egl7Display13isInitializedEv(%"class.egl::Display"* nonnull %0) #10
  br i1 %4, label %7, label %5

5:                                                ; preds = %3, %1
  %6 = phi i32 [ 12296, %1 ], [ 12289, %3 ]
  tail call void @_ZN3egl5errorEi(i32 %6) #10
  br label %7

7:                                                ; preds = %5, %3
  %8 = phi i1 [ true, %3 ], [ false, %5 ]
  ret i1 %8
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl10GetConfigsEPvPS0_iPi(i8*, i8**, i32, i32*) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = icmp eq %"class.egl::Display"* %5, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %4, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %5) #11
  br i1 %13, label %14, label %21

14:                                               ; preds = %12
  %15 = icmp eq i32* %3, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %21

17:                                               ; preds = %14
  %18 = tail call zeroext i1 @_ZN3egl7Display10getConfigsEPPvPKiiPi(%"class.egl::Display"* %5, i8** %1, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @_ZZN3egl10GetConfigsEPvPS0_iPiE10attribList, i64 0, i64 0), i32 %2, i32* nonnull %3) #10
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %21

20:                                               ; preds = %17
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %21

21:                                               ; preds = %12, %20, %19, %16
  %22 = phi i32 [ 1, %20 ], [ 0, %19 ], [ 0, %16 ], [ 0, %12 ]
  br i1 %9, label %25, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %24) #10
  br label %25

25:                                               ; preds = %21, %23
  ret i32 %22
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display10getConfigsEPPvPKiiPi(%"class.egl::Display"*, i8**, i32*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl12ChooseConfigEPvPKiPS0_iPi(i8*, i32*, i8**, i32, i32*) local_unnamed_addr #0 {
  %6 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %7 = icmp eq %"class.egl::Display"* %6, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %6, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %5, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %6) #11
  br i1 %14, label %15, label %24

15:                                               ; preds = %13
  %16 = icmp eq i32* %4, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %24

18:                                               ; preds = %15
  %19 = icmp eq i32* %1, null
  %20 = select i1 %19, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @_ZZN3egl12ChooseConfigEPvPKiPS0_iPiE10attribList, i64 0, i64 0), i32* %1
  %21 = tail call zeroext i1 @_ZN3egl7Display10getConfigsEPPvPKiiPi(%"class.egl::Display"* %6, i8** %2, i32* %20, i32 %3, i32* nonnull %4) #10
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %24

23:                                               ; preds = %18
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %24

24:                                               ; preds = %13, %23, %22, %17
  %25 = phi i32 [ 1, %23 ], [ 0, %22 ], [ 0, %17 ], [ 0, %13 ]
  br i1 %10, label %28, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %27) #10
  br label %28

28:                                               ; preds = %24, %26
  ret i32 %25
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl15GetConfigAttribEPvS0_iPi(i8*, i8*, i32, i32*) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = icmp eq %"class.egl::Display"* %5, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %4, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %5, i8* %1) #11
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = tail call zeroext i1 @_ZN3egl7Display15getConfigAttribEPviPi(%"class.egl::Display"* %5, i8* %1, i32 %2, i32* %3) #10
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %18

17:                                               ; preds = %14
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %18

18:                                               ; preds = %12, %17, %16
  %19 = phi i32 [ 1, %17 ], [ 0, %16 ], [ 0, %12 ]
  br i1 %9, label %22, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %21) #10
  br label %22

22:                                               ; preds = %18, %20
  ret i32 %19
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"*, i8*) unnamed_addr #0 {
  %3 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %0) #11
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = tail call zeroext i1 @_ZN3egl7Display13isValidConfigEPv(%"class.egl::Display"* %0, i8* %1) #10
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void @_ZN3egl5errorEi(i32 12293) #10
  br label %7

7:                                                ; preds = %4, %2, %6
  %8 = phi i1 [ false, %6 ], [ false, %2 ], [ true, %4 ]
  ret i1 %8
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display15getConfigAttribEPviPi(%"class.egl::Display"*, i8*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl27CreatePlatformWindowSurfaceEPvS0_S0_PKl(i8*, i8*, i8* nocapture readonly, i64*) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = icmp eq %"class.egl::Display"* %5, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %4, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %5, i8* %1) #11
  br i1 %13, label %14, label %21

14:                                               ; preds = %12
  %15 = bitcast i8* %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = tail call zeroext i1 @_ZN3egl7Display13isValidWindowEl(%"class.egl::Display"* %5, i64 %16) #10
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12299) #10
  br label %21

19:                                               ; preds = %14
  %20 = tail call i8* @_ZN3egl7Display19createWindowSurfaceElPvPKl(%"class.egl::Display"* %5, i64 %16, i8* %1, i64* %3) #10
  br label %21

21:                                               ; preds = %12, %19, %18
  %22 = phi i8* [ %20, %19 ], [ null, %18 ], [ null, %12 ]
  br i1 %9, label %25, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %24) #10
  br label %25

25:                                               ; preds = %21, %23
  ret i8* %22
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display13isValidWindowEl(%"class.egl::Display"*, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZN3egl7Display19createWindowSurfaceElPvPKl(%"class.egl::Display"*, i64, i8*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl30CreatePlatformWindowSurfaceEXTEPvS0_S0_PKi(i8*, i8*, i8* nocapture readonly, i32* readonly) local_unnamed_addr #0 {
  %5 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %6 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %5, i32* %3) #11
  %9 = load i64*, i64** %7, align 8
  %10 = call i8* @_ZN3egl27CreatePlatformWindowSurfaceEPvS0_S0_PKl(i8* %0, i8* %1, i8* %2, i64* %9) #11
  %11 = load i64*, i64** %7, align 8
  %12 = icmp eq i64* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 1
  %15 = ptrtoint i64* %11 to i64
  %16 = bitcast i64** %14 to i64*
  store i64 %15, i64* %16, align 8
  %17 = bitcast i64* %11 to i8*
  call void @_ZdlPv(i8* %17) #13
  br label %18

18:                                               ; preds = %4, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret i8* %10
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"*, i32* readonly) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = icmp eq i32* %1, null
  br i1 %4, label %84, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* %1, align 4
  %7 = icmp eq i32 %6, 12344
  br i1 %7, label %84, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i64** %9 to i64*
  %12 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %0 to i64*
  %13 = bitcast i64** %10 to i64*
  %14 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 0
  br label %15

15:                                               ; preds = %78, %8
  %16 = phi i64* [ null, %8 ], [ %83, %78 ]
  %17 = phi i64* [ null, %8 ], [ %82, %78 ]
  %18 = phi i32 [ %6, %8 ], [ %80, %78 ]
  %19 = phi i32* [ %1, %8 ], [ %79, %78 ]
  %20 = sext i32 %18 to i64
  %21 = icmp ult i64* %17, %16
  %22 = ptrtoint i64* %16 to i64
  br i1 %21, label %23, label %26

23:                                               ; preds = %15
  store i64 %20, i64* %17, align 8
  %24 = getelementptr inbounds i64, i64* %17, i64 1
  %25 = ptrtoint i64* %24 to i64
  store i64 %25, i64* %11, align 8
  br label %78

26:                                               ; preds = %15
  %27 = ptrtoint i64* %17 to i64
  %28 = load i64, i64* %12, align 8
  %29 = sub i64 %27, %28
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = icmp ugt i64 %31, 2305843009213693951
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #14
  unreachable

35:                                               ; preds = %26
  %36 = sub i64 %22, %28
  %37 = ashr exact i64 %36, 3
  %38 = icmp ult i64 %37, 1152921504606846975
  br i1 %38, label %39, label %47

39:                                               ; preds = %35
  %40 = ashr exact i64 %36, 2
  %41 = icmp ult i64 %40, %31
  %42 = select i1 %41, i64 %31, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %39
  %45 = icmp ugt i64 %42, 2305843009213693951
  br i1 %45, label %46, label %47

46:                                               ; preds = %44
  tail call void @abort() #14
  unreachable

47:                                               ; preds = %44, %35
  %48 = phi i64 [ %42, %44 ], [ 2305843009213693951, %35 ]
  %49 = shl i64 %48, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to i64*
  br label %52

52:                                               ; preds = %47, %39
  %53 = phi i64 [ %48, %47 ], [ 0, %39 ]
  %54 = phi i64* [ %51, %47 ], [ null, %39 ]
  %55 = getelementptr inbounds i64, i64* %54, i64 %30
  %56 = getelementptr inbounds i64, i64* %54, i64 %53
  %57 = ptrtoint i64* %56 to i64
  store i64 %20, i64* %55, align 8
  %58 = getelementptr inbounds i64, i64* %55, i64 1
  %59 = ptrtoint i64* %58 to i64
  %60 = load i64*, i64** %14, align 8
  %61 = load i64, i64* %11, align 8
  %62 = ptrtoint i64* %60 to i64
  %63 = sub i64 %61, %62
  %64 = ashr exact i64 %63, 3
  %65 = sub nsw i64 0, %64
  %66 = getelementptr inbounds i64, i64* %55, i64 %65
  %67 = ptrtoint i64* %66 to i64
  %68 = icmp sgt i64 %63, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %52
  %70 = bitcast i64* %66 to i8*
  %71 = bitcast i64* %60 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 %63, i1 false) #12
  %72 = load i64*, i64** %14, align 8
  br label %73

73:                                               ; preds = %69, %52
  %74 = phi i64* [ %60, %52 ], [ %72, %69 ]
  store i64 %67, i64* %12, align 8
  store i64 %59, i64* %11, align 8
  store i64 %57, i64* %13, align 8
  %75 = icmp eq i64* %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = bitcast i64* %74 to i8*
  tail call void @_ZdlPv(i8* %77) #13
  br label %78

78:                                               ; preds = %23, %73, %76
  %79 = getelementptr inbounds i32, i32* %19, i64 1
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 12344
  %82 = load i64*, i64** %9, align 8
  %83 = load i64*, i64** %10, align 8
  br i1 %81, label %86, label %15

84:                                               ; preds = %5, %2
  %85 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 1
  br label %94

86:                                               ; preds = %78
  %87 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 1
  %88 = icmp ult i64* %82, %83
  %89 = ptrtoint i64* %83 to i64
  br i1 %88, label %90, label %94

90:                                               ; preds = %86
  store i64 12344, i64* %82, align 8
  %91 = getelementptr inbounds i64, i64* %82, i64 1
  %92 = ptrtoint i64* %91 to i64
  %93 = bitcast i64** %87 to i64*
  store i64 %92, i64* %93, align 8
  br label %154

94:                                               ; preds = %84, %86
  %95 = phi i64 [ 0, %84 ], [ %89, %86 ]
  %96 = phi i64** [ %85, %84 ], [ %87, %86 ]
  %97 = phi i64* [ null, %84 ], [ %82, %86 ]
  %98 = ptrtoint i64* %97 to i64
  %99 = bitcast i64** %96 to i64*
  %100 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %0 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %98, %101
  %103 = ashr exact i64 %102, 3
  %104 = add nsw i64 %103, 1
  %105 = icmp ugt i64 %104, 2305843009213693951
  br i1 %105, label %106, label %108

106:                                              ; preds = %94
  %107 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %107) #14
  unreachable

108:                                              ; preds = %94
  %109 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast i64** %109 to i64*
  %111 = sub i64 %95, %101
  %112 = ashr exact i64 %111, 3
  %113 = icmp ult i64 %112, 1152921504606846975
  br i1 %113, label %114, label %122

114:                                              ; preds = %108
  %115 = ashr exact i64 %111, 2
  %116 = icmp ult i64 %115, %104
  %117 = select i1 %116, i64 %104, i64 %115
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %127, label %119

119:                                              ; preds = %114
  %120 = icmp ugt i64 %117, 2305843009213693951
  br i1 %120, label %121, label %122

121:                                              ; preds = %119
  tail call void @abort() #14
  unreachable

122:                                              ; preds = %119, %108
  %123 = phi i64 [ %117, %119 ], [ 2305843009213693951, %108 ]
  %124 = shl i64 %123, 3
  %125 = tail call i8* @_Znwm(i64 %124) #13
  %126 = bitcast i8* %125 to i64*
  br label %127

127:                                              ; preds = %122, %114
  %128 = phi i64 [ %123, %122 ], [ 0, %114 ]
  %129 = phi i64* [ %126, %122 ], [ null, %114 ]
  %130 = getelementptr inbounds i64, i64* %129, i64 %103
  %131 = getelementptr inbounds i64, i64* %129, i64 %128
  %132 = ptrtoint i64* %131 to i64
  store i64 12344, i64* %130, align 8
  %133 = getelementptr inbounds i64, i64* %130, i64 1
  %134 = ptrtoint i64* %133 to i64
  %135 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %0, i64 0, i32 0, i32 0, i32 0
  %136 = load i64*, i64** %135, align 8
  %137 = load i64, i64* %99, align 8
  %138 = ptrtoint i64* %136 to i64
  %139 = sub i64 %137, %138
  %140 = ashr exact i64 %139, 3
  %141 = sub nsw i64 0, %140
  %142 = getelementptr inbounds i64, i64* %130, i64 %141
  %143 = ptrtoint i64* %142 to i64
  %144 = icmp sgt i64 %139, 0
  br i1 %144, label %145, label %149

145:                                              ; preds = %127
  %146 = bitcast i64* %142 to i8*
  %147 = bitcast i64* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 %139, i1 false) #12
  %148 = load i64*, i64** %135, align 8
  br label %149

149:                                              ; preds = %145, %127
  %150 = phi i64* [ %136, %127 ], [ %148, %145 ]
  store i64 %143, i64* %100, align 8
  store i64 %134, i64* %99, align 8
  store i64 %132, i64* %110, align 8
  %151 = icmp eq i64* %150, null
  br i1 %151, label %154, label %152

152:                                              ; preds = %149
  %153 = bitcast i64* %150 to i8*
  tail call void @_ZdlPv(i8* %153) #13
  br label %154

154:                                              ; preds = %90, %149, %152
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl19CreateWindowSurfaceEPvS0_lPKi(i8*, i8*, i64, i32* readonly) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  store i64 %2, i64* %5, align 8
  %7 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %6, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %6, i32* %3) #11
  %10 = bitcast i64* %5 to i8*
  %11 = load i64*, i64** %8, align 8
  %12 = call i8* @_ZN3egl27CreatePlatformWindowSurfaceEPvS0_S0_PKl(i8* %0, i8* %1, i8* nonnull %10, i64* %11) #11
  %13 = load i64*, i64** %8, align 8
  %14 = icmp eq i64* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %6, i64 0, i32 0, i32 0, i32 1
  %17 = ptrtoint i64* %13 to i64
  %18 = bitcast i64** %16 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast i64* %13 to i8*
  call void @_ZdlPv(i8* %19) #13
  br label %20

20:                                               ; preds = %4, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret i8* %12
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl20CreatePbufferSurfaceEPvS0_PKi(i8*, i8*, i32*) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = icmp eq %"class.egl::Display"* %4, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %3, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %4, i8* %1) #11
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = tail call i8* @_ZN3egl7Display20createPBufferSurfaceEPvPKiS1_(%"class.egl::Display"* %4, i8* %1, i32* %2, i8* null) #10
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i8* [ %14, %13 ], [ null, %11 ]
  br i1 %8, label %19, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %18) #10
  br label %19

19:                                               ; preds = %15, %17
  ret i8* %16
}

; Function Attrs: optsize
declare i8* @_ZN3egl7Display20createPBufferSurfaceEPvPKiS1_(%"class.egl::Display"*, i8*, i32*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl27CreatePlatformPixmapSurfaceEPvS0_S0_PKl(i8*, i8*, i8* nocapture readnone, i64* nocapture readnone) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = icmp eq %"class.egl::Display"* %5, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %4, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %5, i8* %1) #11
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %15

15:                                               ; preds = %12, %14
  br i1 %9, label %18, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %17) #10
  br label %18

18:                                               ; preds = %15, %16
  ret i8* null
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl30CreatePlatformPixmapSurfaceEXTEPvS0_S0_PKi(i8*, i8*, i8* nocapture readnone, i32* readonly) local_unnamed_addr #0 {
  %5 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %6 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %5, i32* %3) #11
  %9 = call i8* @_ZN3egl27CreatePlatformPixmapSurfaceEPvS0_S0_PKl(i8* %0, i8* %1, i8* undef, i64* undef) #11
  %10 = load i64*, i64** %7, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 1
  %14 = ptrtoint i64* %10 to i64
  %15 = bitcast i64** %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast i64* %10 to i8*
  call void @_ZdlPv(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret i8* %9
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl19CreatePixmapSurfaceEPvS0_lPKi(i8*, i8*, i64, i32* readonly) local_unnamed_addr #0 {
  %5 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %6 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %5, i32* %3) #11
  %9 = call i8* @_ZN3egl27CreatePlatformPixmapSurfaceEPvS0_S0_PKl(i8* %0, i8* %1, i8* undef, i64* undef) #11
  %10 = load i64*, i64** %7, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %5, i64 0, i32 0, i32 0, i32 1
  %14 = ptrtoint i64* %10 to i64
  %15 = bitcast i64** %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast i64* %10 to i8*
  call void @_ZdlPv(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret i8* %9
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl14DestroySurfaceEPvS0_(i8*, i8*) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = bitcast i8* %1 to %"class.egl::Surface"*
  %5 = icmp eq %"class.egl::Display"* %3, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %2, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %3, %"class.egl::Surface"* %4) #11
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = icmp eq i8* %1, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %17

16:                                               ; preds = %13
  tail call void @_ZN3egl7Display14destroySurfaceEPNS_7SurfaceE(%"class.egl::Display"* %3, %"class.egl::Surface"* nonnull %4) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %17

17:                                               ; preds = %11, %16, %15
  %18 = phi i32 [ 0, %15 ], [ 1, %16 ], [ 0, %11 ]
  br i1 %8, label %21, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %20) #10
  br label %21

21:                                               ; preds = %17, %19
  ret i32 %18
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"*, %"class.egl::Surface"*) unnamed_addr #0 {
  %3 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %0) #11
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = tail call zeroext i1 @_ZN3egl7Display14isValidSurfaceEPNS_7SurfaceE(%"class.egl::Display"* %0, %"class.egl::Surface"* %1) #10
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %7

7:                                                ; preds = %4, %2, %6
  %8 = phi i1 [ false, %6 ], [ false, %2 ], [ true, %4 ]
  ret i1 %8
}

; Function Attrs: optsize
declare void @_ZN3egl7Display14destroySurfaceEPNS_7SurfaceE(%"class.egl::Display"*, %"class.egl::Surface"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl12QuerySurfaceEPvS0_iPi(i8*, i8*, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %1 to %"class.egl::Surface"*
  %7 = icmp eq %"class.egl::Display"* %5, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %4, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %5, %"class.egl::Surface"* %6) #11
  br i1 %14, label %15, label %122

15:                                               ; preds = %13
  %16 = icmp eq i8* %1, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %122

18:                                               ; preds = %15
  switch i32 %2, label %120 [
    i32 12424, label %19
    i32 12423, label %20
    i32 12328, label %21
    i32 12374, label %27
    i32 12432, label %33
    i32 12376, label %34
    i32 12418, label %46
    i32 12419, label %53
    i32 12441, label %65
    i32 12434, label %71
    i32 12422, label %77
    i32 12435, label %83
    i32 12416, label %89
    i32 12417, label %101
    i32 12433, label %113
    i32 12375, label %114
  ]

19:                                               ; preds = %18
  store i32 12427, i32* %3, align 4
  br label %121

20:                                               ; preds = %18
  store i32 12425, i32* %3, align 4
  br label %121

21:                                               ; preds = %18
  %22 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %23 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %22, align 8
  %24 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %23, i64 10
  %25 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %24, align 8
  %26 = tail call i32 %25(%"class.egl::Surface"* nonnull %6) #10
  store i32 %26, i32* %3, align 4
  br label %121

27:                                               ; preds = %18
  %28 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %29 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %28, align 8
  %30 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %29, i64 5
  %31 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %30, align 8
  %32 = tail call i32 %31(%"class.egl::Surface"* nonnull %6) #10
  store i32 %32, i32* %3, align 4
  br label %121

33:                                               ; preds = %18
  store i32 -1, i32* %3, align 4
  br label %121

34:                                               ; preds = %18
  %35 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %36 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %35, align 8
  %37 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %36, i64 22
  %38 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %37, align 8
  %39 = tail call zeroext i1 %38(%"class.egl::Surface"* nonnull %6) #10
  br i1 %39, label %40, label %121

40:                                               ; preds = %34
  %41 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %42 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %41, align 8
  %43 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %42, i64 18
  %44 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %43, align 8
  %45 = tail call i32 %44(%"class.egl::Surface"* nonnull %6) #10
  store i32 %45, i32* %3, align 4
  br label %121

46:                                               ; preds = %18
  %47 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %48 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %47, align 8
  %49 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %48, i64 22
  %50 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %49, align 8
  %51 = tail call zeroext i1 %50(%"class.egl::Surface"* nonnull %6) #10
  br i1 %51, label %52, label %121

52:                                               ; preds = %46
  store i32 0, i32* %3, align 4
  br label %121

53:                                               ; preds = %18
  %54 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %55 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %54, align 8
  %56 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %55, i64 22
  %57 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %56, align 8
  %58 = tail call zeroext i1 %57(%"class.egl::Surface"* nonnull %6) #10
  br i1 %58, label %59, label %121

59:                                               ; preds = %53
  %60 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %61 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %60, align 8
  %62 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %61, i64 12
  %63 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %62, align 8
  %64 = tail call i32 %63(%"class.egl::Surface"* nonnull %6) #10
  store i32 %64, i32* %3, align 4
  br label %121

65:                                               ; preds = %18
  %66 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %67 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %66, align 8
  %68 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %67, i64 13
  %69 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %68, align 8
  %70 = tail call i32 %69(%"class.egl::Surface"* nonnull %6) #10
  store i32 %70, i32* %3, align 4
  br label %121

71:                                               ; preds = %18
  %72 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %73 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %72, align 8
  %74 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %73, i64 14
  %75 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %74, align 8
  %76 = tail call i32 %75(%"class.egl::Surface"* nonnull %6) #10
  store i32 %76, i32* %3, align 4
  br label %121

77:                                               ; preds = %18
  %78 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %79 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %79, i64 15
  %81 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %80, align 8
  %82 = tail call i32 %81(%"class.egl::Surface"* nonnull %6) #10
  store i32 %82, i32* %3, align 4
  br label %121

83:                                               ; preds = %18
  %84 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %85 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %84, align 8
  %86 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %85, i64 16
  %87 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %86, align 8
  %88 = tail call i32 %87(%"class.egl::Surface"* nonnull %6) #10
  store i32 %88, i32* %3, align 4
  br label %121

89:                                               ; preds = %18
  %90 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %91 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %90, align 8
  %92 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %91, i64 22
  %93 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %92, align 8
  %94 = tail call zeroext i1 %93(%"class.egl::Surface"* nonnull %6) #10
  br i1 %94, label %95, label %121

95:                                               ; preds = %89
  %96 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %97 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %96, align 8
  %98 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %97, i64 17
  %99 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %98, align 8
  %100 = tail call i32 %99(%"class.egl::Surface"* nonnull %6) #10
  store i32 %100, i32* %3, align 4
  br label %121

101:                                              ; preds = %18
  %102 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %103 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %102, align 8
  %104 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %103, i64 22
  %105 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %104, align 8
  %106 = tail call zeroext i1 %105(%"class.egl::Surface"* nonnull %6) #10
  br i1 %106, label %107, label %121

107:                                              ; preds = %101
  %108 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %109 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %108, align 8
  %110 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %109, i64 6
  %111 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %110, align 8
  %112 = tail call i32 %111(%"class.egl::Surface"* nonnull %6) #10
  store i32 %112, i32* %3, align 4
  br label %121

113:                                              ; preds = %18
  store i32 -1, i32* %3, align 4
  br label %121

114:                                              ; preds = %18
  %115 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %116 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %115, align 8
  %117 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %116, i64 4
  %118 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %117, align 8
  %119 = tail call i32 %118(%"class.egl::Surface"* nonnull %6) #10
  store i32 %119, i32* %3, align 4
  br label %121

120:                                              ; preds = %18
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %122

121:                                              ; preds = %101, %107, %89, %95, %53, %59, %46, %52, %34, %40, %114, %113, %83, %77, %71, %65, %33, %27, %21, %20, %19
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %122

122:                                              ; preds = %13, %121, %120, %17
  %123 = phi i32 [ 0, %17 ], [ 0, %120 ], [ 1, %121 ], [ 0, %13 ]
  br i1 %10, label %126, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %125) #10
  br label %126

126:                                              ; preds = %122, %124
  ret i32 %123
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl7BindAPIEj(i32) local_unnamed_addr #0 {
  switch i32 %0, label %3 [
    i32 12450, label %2
    i32 12449, label %2
    i32 12448, label %4
  ]

2:                                                ; preds = %1, %1
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %5

3:                                                ; preds = %1
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %5

4:                                                ; preds = %1
  tail call void @_ZN3egl13setCurrentAPIEj(i32 12448) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %5

5:                                                ; preds = %4, %3, %2
  %6 = phi i32 [ 0, %3 ], [ 1, %4 ], [ 0, %2 ]
  ret i32 %6
}

; Function Attrs: optsize
declare void @_ZN3egl13setCurrentAPIEj(i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl8QueryAPIEv() local_unnamed_addr #0 {
  %1 = tail call i32 @_ZN3egl13getCurrentAPIEv() #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  ret i32 %1
}

; Function Attrs: optsize
declare i32 @_ZN3egl13getCurrentAPIEv() local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl10WaitClientEv() local_unnamed_addr #0 {
  %1 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %2 = icmp eq %"class.egl::Context"* %1, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = bitcast %"class.egl::Context"* %1 to void (%"class.egl::Context"*)***
  %5 = load void (%"class.egl::Context"*)**, void (%"class.egl::Context"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %5, i64 10
  %7 = load void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %6, align 8
  tail call void %7(%"class.egl::Context"* nonnull %1) #10
  br label %8

8:                                                ; preds = %0, %3
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  ret i32 1
}

; Function Attrs: optsize
declare %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl13ReleaseThreadEv() local_unnamed_addr #0 {
  tail call void @_ZN3egl12detachThreadEv() #10
  ret i32 1
}

; Function Attrs: optsize
declare void @_ZN3egl12detachThreadEv() local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl29CreatePbufferFromClientBufferEPvjS0_S0_PKi(i8*, i32, i8*, i8*, i32*) local_unnamed_addr #0 {
  switch i32 %1, label %23 [
    i32 13396, label %6
    i32 12438, label %22
  ]

6:                                                ; preds = %5
  %7 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %8 = icmp eq %"class.egl::Display"* %7, null
  %9 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %7, i64 0, i32 10
  %10 = select i1 %8, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %9
  %11 = icmp eq %"class.sw::RecursiveLock"* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %10, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %13) #10
  br label %14

14:                                               ; preds = %6, %12
  %15 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %7, i8* %3) #11
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = tail call i8* @_ZN3egl7Display20createPBufferSurfaceEPvPKiS1_(%"class.egl::Display"* %7, i8* %3, i32* %4, i8* %2) #10
  br label %18

18:                                               ; preds = %14, %16
  %19 = phi i8* [ %17, %16 ], [ null, %14 ]
  br i1 %11, label %24, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %10, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %21) #10
  br label %24

22:                                               ; preds = %5
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %24

23:                                               ; preds = %5
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %24

24:                                               ; preds = %20, %18, %23, %22
  %25 = phi i8* [ null, %23 ], [ null, %22 ], [ %19, %18 ], [ %19, %20 ]
  ret i8* %25
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl13SurfaceAttribEPvS0_ii(i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %1 to %"class.egl::Surface"*
  %7 = icmp eq %"class.egl::Display"* %5, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %4, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %5, %"class.egl::Surface"* %6) #11
  br i1 %14, label %15, label %43

15:                                               ; preds = %13
  switch i32 %2, label %41 [
    i32 12419, label %16
    i32 12441, label %17
    i32 12435, label %29
  ]

16:                                               ; preds = %15
  tail call void @_ZN3egl7Surface14setMipmapLevelEi(%"class.egl::Surface"* %6, i32 %3) #10
  br label %42

17:                                               ; preds = %15
  switch i32 %3, label %27 [
    i32 12442, label %28
    i32 12443, label %18
  ]

18:                                               ; preds = %17
  %19 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %20 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %19, align 8
  %21 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %20, i64 11
  %22 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %21, align 8
  %23 = tail call i32 %22(%"class.egl::Surface"* %6) #10
  %24 = and i32 %23, 512
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %18
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %43

27:                                               ; preds = %17
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %43

28:                                               ; preds = %18, %17
  tail call void @_ZN3egl7Surface21setMultisampleResolveEj(%"class.egl::Surface"* %6, i32 %3) #10
  br label %42

29:                                               ; preds = %15
  switch i32 %3, label %39 [
    i32 12437, label %40
    i32 12436, label %30
  ]

30:                                               ; preds = %29
  %31 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %32 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %32, i64 11
  %34 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %33, align 8
  %35 = tail call i32 %34(%"class.egl::Surface"* %6) #10
  %36 = and i32 %35, 1024
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %43

39:                                               ; preds = %29
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %43

40:                                               ; preds = %30, %29
  tail call void @_ZN3egl7Surface15setSwapBehaviorEj(%"class.egl::Surface"* %6, i32 %3) #10
  br label %42

41:                                               ; preds = %15
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %43

42:                                               ; preds = %40, %28, %16
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %43

43:                                               ; preds = %13, %42, %41, %39, %38, %27, %26
  %44 = phi i32 [ 0, %41 ], [ 0, %39 ], [ 1, %42 ], [ 0, %38 ], [ 0, %27 ], [ 0, %26 ], [ 0, %13 ]
  br i1 %10, label %47, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %46) #10
  br label %47

47:                                               ; preds = %43, %45
  ret i32 %44
}

; Function Attrs: optsize
declare void @_ZN3egl7Surface14setMipmapLevelEi(%"class.egl::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl7Surface21setMultisampleResolveEj(%"class.egl::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl7Surface15setSwapBehaviorEj(%"class.egl::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl12BindTexImageEPvS0_i(i8*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = bitcast i8* %1 to %"class.egl::Surface"*
  %6 = icmp eq %"class.egl::Display"* %4, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %3, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %4, %"class.egl::Surface"* %5) #11
  br i1 %13, label %14, label %52

14:                                               ; preds = %12
  %15 = icmp eq i32 %2, 12420
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %52

17:                                               ; preds = %14
  %18 = icmp eq i8* %1, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %17
  %20 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %21 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %21, i64 21
  %23 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.egl::Surface"* nonnull %5) #10
  br i1 %24, label %25, label %26

25:                                               ; preds = %19, %17
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %52

26:                                               ; preds = %19
  %27 = bitcast i8* %1 to %"class.egl::Texture"* (%"class.egl::Surface"*)***
  %28 = load %"class.egl::Texture"* (%"class.egl::Surface"*)**, %"class.egl::Texture"* (%"class.egl::Surface"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.egl::Texture"* (%"class.egl::Surface"*)*, %"class.egl::Texture"* (%"class.egl::Surface"*)** %28, i64 20
  %30 = load %"class.egl::Texture"* (%"class.egl::Surface"*)*, %"class.egl::Texture"* (%"class.egl::Surface"*)** %29, align 8
  %31 = tail call %"class.egl::Texture"* %30(%"class.egl::Surface"* nonnull %5) #10
  %32 = icmp eq %"class.egl::Texture"* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %26
  tail call void @_ZN3egl5errorEi(i32 12290) #10
  br label %52

34:                                               ; preds = %26
  %35 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %36 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %35, align 8
  %37 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %36, i64 17
  %38 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %37, align 8
  %39 = tail call i32 %38(%"class.egl::Surface"* nonnull %5) #10
  %40 = icmp eq i32 %39, 12380
  br i1 %40, label %41, label %42

41:                                               ; preds = %34
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %52

42:                                               ; preds = %34
  %43 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %44 = icmp eq %"class.egl::Context"* %43, null
  br i1 %44, label %51, label %45

45:                                               ; preds = %42
  %46 = bitcast i8* %1 to %"class.gl::Surface"*
  %47 = bitcast %"class.egl::Context"* %43 to void (%"class.egl::Context"*, %"class.gl::Surface"*)***
  %48 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)**, void (%"class.egl::Context"*, %"class.gl::Surface"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %48, i64 5
  %50 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %49, align 8
  tail call void %50(%"class.egl::Context"* nonnull %43, %"class.gl::Surface"* nonnull %46) #10
  br label %51

51:                                               ; preds = %42, %45
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %52

52:                                               ; preds = %12, %51, %41, %33, %25, %16
  %53 = phi i32 [ 0, %16 ], [ 0, %25 ], [ 0, %33 ], [ 0, %41 ], [ 1, %51 ], [ 0, %12 ]
  br i1 %9, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %55) #10
  br label %56

56:                                               ; preds = %52, %54
  ret i32 %53
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl15ReleaseTexImageEPvS0_i(i8*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = bitcast i8* %1 to %"class.egl::Surface"*
  %6 = icmp eq %"class.egl::Display"* %4, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %3, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %4, %"class.egl::Surface"* %5) #11
  br i1 %13, label %14, label %47

14:                                               ; preds = %12
  %15 = icmp eq i32 %2, 12420
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %47

17:                                               ; preds = %14
  %18 = icmp eq i8* %1, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %17
  %20 = bitcast i8* %1 to i1 (%"class.egl::Surface"*)***
  %21 = load i1 (%"class.egl::Surface"*)**, i1 (%"class.egl::Surface"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %21, i64 21
  %23 = load i1 (%"class.egl::Surface"*)*, i1 (%"class.egl::Surface"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.egl::Surface"* nonnull %5) #10
  br i1 %24, label %25, label %26

25:                                               ; preds = %19, %17
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %47

26:                                               ; preds = %19
  %27 = bitcast i8* %1 to i32 (%"class.egl::Surface"*)***
  %28 = load i32 (%"class.egl::Surface"*)**, i32 (%"class.egl::Surface"*)*** %27, align 8
  %29 = getelementptr inbounds i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %28, i64 17
  %30 = load i32 (%"class.egl::Surface"*)*, i32 (%"class.egl::Surface"*)** %29, align 8
  %31 = tail call i32 %30(%"class.egl::Surface"* nonnull %5) #10
  %32 = icmp eq i32 %31, 12380
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %47

34:                                               ; preds = %26
  %35 = bitcast i8* %1 to %"class.egl::Texture"* (%"class.egl::Surface"*)***
  %36 = load %"class.egl::Texture"* (%"class.egl::Surface"*)**, %"class.egl::Texture"* (%"class.egl::Surface"*)*** %35, align 8
  %37 = getelementptr inbounds %"class.egl::Texture"* (%"class.egl::Surface"*)*, %"class.egl::Texture"* (%"class.egl::Surface"*)** %36, i64 20
  %38 = load %"class.egl::Texture"* (%"class.egl::Surface"*)*, %"class.egl::Texture"* (%"class.egl::Surface"*)** %37, align 8
  %39 = tail call %"class.egl::Texture"* %38(%"class.egl::Surface"* nonnull %5) #10
  %40 = icmp eq %"class.egl::Texture"* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %34
  %42 = bitcast %"class.egl::Texture"* %39 to void (%"class.egl::Texture"*)***
  %43 = load void (%"class.egl::Texture"*)**, void (%"class.egl::Texture"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.egl::Texture"*)*, void (%"class.egl::Texture"*)** %43, i64 4
  %45 = load void (%"class.egl::Texture"*)*, void (%"class.egl::Texture"*)** %44, align 8
  tail call void %45(%"class.egl::Texture"* nonnull %39) #10
  br label %46

46:                                               ; preds = %34, %41
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %47

47:                                               ; preds = %12, %46, %33, %25, %16
  %48 = phi i32 [ 0, %16 ], [ 0, %25 ], [ 0, %33 ], [ 1, %46 ], [ 0, %12 ]
  br i1 %9, label %51, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %50) #10
  br label %51

51:                                               ; preds = %47, %49
  ret i32 %48
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl12SwapIntervalEPvi(i8*, i32) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %5 = icmp eq %"class.egl::Display"* %3, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %2, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"* %3, %"class.egl::Context"* %4) #11
  br i1 %12, label %13, label %18

13:                                               ; preds = %11
  %14 = tail call %"class.egl::Surface"* @_ZN3egl21getCurrentDrawSurfaceEv() #10
  %15 = icmp eq %"class.egl::Surface"* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %18

17:                                               ; preds = %13
  tail call void @_ZN3egl7Surface15setSwapIntervalEi(%"class.egl::Surface"* nonnull %14, i32 %1) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %18

18:                                               ; preds = %16, %17, %11
  %19 = phi i32 [ 0, %11 ], [ 1, %17 ], [ 0, %16 ]
  br i1 %8, label %22, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %21) #10
  br label %22

22:                                               ; preds = %18, %20
  ret i32 %19
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"*, %"class.egl::Context"*) unnamed_addr #0 {
  %3 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %0) #11
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = tail call zeroext i1 @_ZN3egl7Display14isValidContextEPNS_7ContextE(%"class.egl::Display"* %0, %"class.egl::Context"* %1) #10
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void @_ZN3egl5errorEi(i32 12294) #10
  br label %7

7:                                                ; preds = %4, %2, %6
  %8 = phi i1 [ false, %6 ], [ false, %2 ], [ true, %4 ]
  ret i1 %8
}

; Function Attrs: optsize
declare %"class.egl::Surface"* @_ZN3egl21getCurrentDrawSurfaceEv() local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl7Surface15setSwapIntervalEi(%"class.egl::Surface"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl13CreateContextEPvS0_S0_PKi(i8*, i8*, i8*, i32* readonly) local_unnamed_addr #0 {
  %5 = icmp eq i32* %3, null
  br i1 %5, label %37, label %6

6:                                                ; preds = %4, %25
  %7 = phi i32 [ %26, %25 ], [ 1, %4 ]
  %8 = phi i32 [ %27, %25 ], [ 0, %4 ]
  %9 = phi i32* [ %28, %25 ], [ %3, %4 ]
  %10 = load i32, i32* %9, align 4
  switch i32 %10, label %24 [
    i32 12344, label %29
    i32 12440, label %11
    i32 12539, label %14
    i32 12540, label %17
    i32 12541, label %22
    i32 12733, label %23
  ]

11:                                               ; preds = %6
  %12 = getelementptr inbounds i32, i32* %9, i64 1
  %13 = load i32, i32* %12, align 4
  br label %25

14:                                               ; preds = %6
  %15 = getelementptr inbounds i32, i32* %9, i64 1
  %16 = load i32, i32* %15, align 4
  br label %25

17:                                               ; preds = %6
  %18 = getelementptr inbounds i32, i32* %9, i64 1
  %19 = load i32, i32* %18, align 4
  switch i32 %19, label %21 [
    i32 1, label %25
    i32 2, label %20
    i32 4, label %20
  ]

20:                                               ; preds = %17, %17
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %67

21:                                               ; preds = %17
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %67

22:                                               ; preds = %6
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %67

23:                                               ; preds = %6
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %67

24:                                               ; preds = %6
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %67

25:                                               ; preds = %11, %14, %17
  %26 = phi i32 [ %7, %17 ], [ %7, %14 ], [ %13, %11 ]
  %27 = phi i32 [ %8, %17 ], [ %16, %14 ], [ %8, %11 ]
  %28 = getelementptr inbounds i32, i32* %9, i64 2
  br label %6

29:                                               ; preds = %6
  switch i32 %7, label %36 [
    i32 1, label %30
    i32 2, label %33
    i32 3, label %33
  ]

30:                                               ; preds = %29
  %31 = icmp ugt i32 %8, 1
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %67

33:                                               ; preds = %29, %29
  %34 = icmp eq i32 %8, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %33
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %67

36:                                               ; preds = %29
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %67

37:                                               ; preds = %4, %33, %30
  %38 = phi i32 [ %7, %33 ], [ 1, %30 ], [ 1, %4 ]
  %39 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %40 = bitcast i8* %2 to %"class.egl::Context"*
  %41 = icmp eq %"class.egl::Display"* %39, null
  %42 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %39, i64 0, i32 10
  %43 = select i1 %41, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %42
  %44 = icmp eq %"class.sw::RecursiveLock"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %43, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %46) #10
  br label %47

47:                                               ; preds = %37, %45
  %48 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_114validateConfigEPNS_7DisplayEPv(%"class.egl::Display"* %39, i8* %1) #11
  br i1 %48, label %49, label %63

49:                                               ; preds = %47
  %50 = icmp eq i8* %2, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %49
  %52 = bitcast i8* %2 to i32 (%"class.egl::Context"*)***
  %53 = load i32 (%"class.egl::Context"*)**, i32 (%"class.egl::Context"*)*** %52, align 8
  %54 = getelementptr inbounds i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %53, i64 8
  %55 = load i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %54, align 8
  %56 = tail call i32 %55(%"class.egl::Context"* nonnull %40) #10
  %57 = icmp sgt i32 %56, 1
  %58 = icmp sgt i32 %38, 1
  %59 = xor i1 %58, %57
  br i1 %59, label %60, label %61

60:                                               ; preds = %51
  tail call void @_ZN3egl5errorEi(i32 12294) #10
  br label %63

61:                                               ; preds = %49, %51
  %62 = tail call i8* @_ZN3egl7Display13createContextEPvPKNS_7ContextEi(%"class.egl::Display"* %39, i8* %1, %"class.egl::Context"* %40, i32 %38) #10
  br label %63

63:                                               ; preds = %47, %61, %60
  %64 = phi i8* [ null, %60 ], [ %62, %61 ], [ null, %47 ]
  br i1 %44, label %67, label %65

65:                                               ; preds = %63
  %66 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %43, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %66) #10
  br label %67

67:                                               ; preds = %23, %22, %20, %21, %24, %65, %63, %36, %35, %32
  %68 = phi i8* [ null, %36 ], [ null, %35 ], [ null, %32 ], [ %64, %63 ], [ %64, %65 ], [ null, %24 ], [ null, %21 ], [ null, %20 ], [ null, %22 ], [ null, %23 ]
  ret i8* %68
}

; Function Attrs: optsize
declare i8* @_ZN3egl7Display13createContextEPvPKNS_7ContextEi(%"class.egl::Display"*, i8*, %"class.egl::Context"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl14DestroyContextEPvS0_(i8*, i8*) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = bitcast i8* %1 to %"class.egl::Context"*
  %5 = icmp eq %"class.egl::Display"* %3, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %2, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"* %3, %"class.egl::Context"* %4) #11
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = icmp eq i8* %1, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12294) #10
  br label %17

16:                                               ; preds = %13
  tail call void @_ZN3egl7Display14destroyContextEPNS_7ContextE(%"class.egl::Display"* %3, %"class.egl::Context"* nonnull %4) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %17

17:                                               ; preds = %11, %16, %15
  %18 = phi i32 [ 0, %15 ], [ 1, %16 ], [ 0, %11 ]
  br i1 %8, label %21, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %20) #10
  br label %21

21:                                               ; preds = %17, %19
  ret i32 %18
}

; Function Attrs: optsize
declare void @_ZN3egl7Display14destroyContextEPNS_7ContextE(%"class.egl::Display"*, %"class.egl::Context"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl11MakeCurrentEPvS0_S0_S0_(i8*, i8*, i8*, i8*) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %3 to %"class.egl::Context"*
  %7 = bitcast i8* %1 to %"class.egl::Surface"*
  %8 = bitcast i8* %2 to %"class.egl::Surface"*
  %9 = icmp eq %"class.egl::Display"* %5, null
  %10 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %11 = select i1 %9, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %10
  %12 = icmp eq %"class.sw::RecursiveLock"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %11, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %14) #10
  br label %15

15:                                               ; preds = %4, %13
  %16 = icmp ne i8* %3, null
  %17 = icmp ne i8* %1, null
  %18 = or i1 %17, %16
  %19 = icmp ne i8* %2, null
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %5) #11
  br i1 %22, label %23, label %48

23:                                               ; preds = %21, %15
  %24 = icmp eq i8* %3, null
  %25 = or i1 %17, %19
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %48

28:                                               ; preds = %23
  br i1 %16, label %29, label %31

29:                                               ; preds = %28
  %30 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"* %5, %"class.egl::Context"* nonnull %6) #11
  br i1 %30, label %31, label %48

31:                                               ; preds = %29, %28
  br i1 %17, label %32, label %34

32:                                               ; preds = %31
  %33 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %5, %"class.egl::Surface"* nonnull %7) #11
  br i1 %33, label %34, label %48

34:                                               ; preds = %32, %31
  br i1 %19, label %35, label %37

35:                                               ; preds = %34
  %36 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %5, %"class.egl::Surface"* nonnull %8) #11
  br i1 %36, label %37, label %48

37:                                               ; preds = %35, %34
  %38 = xor i1 %17, %19
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %48

40:                                               ; preds = %37
  tail call void @_ZN3egl21setCurrentDrawSurfaceEPNS_7SurfaceE(%"class.egl::Surface"* %7) #10
  tail call void @_ZN3egl21setCurrentReadSurfaceEPNS_7SurfaceE(%"class.egl::Surface"* %8) #10
  tail call void @_ZN3egl17setCurrentContextEPNS_7ContextE(%"class.egl::Context"* %6) #10
  br i1 %24, label %47, label %41

41:                                               ; preds = %40
  %42 = bitcast i8* %1 to %"class.gl::Surface"*
  %43 = bitcast i8* %3 to void (%"class.egl::Context"*, %"class.gl::Surface"*)***
  %44 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)**, void (%"class.egl::Context"*, %"class.gl::Surface"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %44, i64 4
  %46 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %45, align 8
  tail call void %46(%"class.egl::Context"* nonnull %6, %"class.gl::Surface"* %42) #10
  br label %47

47:                                               ; preds = %40, %41
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %48

48:                                               ; preds = %32, %35, %29, %21, %47, %39, %27
  %49 = phi i32 [ 0, %27 ], [ 0, %39 ], [ 1, %47 ], [ 0, %21 ], [ 0, %29 ], [ 0, %35 ], [ 0, %32 ]
  br i1 %12, label %52, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %11, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %51) #10
  br label %52

52:                                               ; preds = %48, %50
  ret i32 %49
}

; Function Attrs: optsize
declare void @_ZN3egl21setCurrentDrawSurfaceEPNS_7SurfaceE(%"class.egl::Surface"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl21setCurrentReadSurfaceEPNS_7SurfaceE(%"class.egl::Surface"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl17setCurrentContextEPNS_7ContextE(%"class.egl::Context"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl17GetCurrentContextEv() local_unnamed_addr #0 {
  %1 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %2 = bitcast %"class.egl::Context"* %1 to i8*
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  ret i8* %2
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl17GetCurrentSurfaceEi(i32) local_unnamed_addr #0 {
  switch i32 %0, label %8 [
    i32 12378, label %2
    i32 12377, label %5
  ]

2:                                                ; preds = %1
  %3 = tail call %"class.egl::Surface"* @_ZN3egl21getCurrentReadSurfaceEv() #10
  %4 = bitcast %"class.egl::Surface"* %3 to i8*
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %9

5:                                                ; preds = %1
  %6 = tail call %"class.egl::Surface"* @_ZN3egl21getCurrentDrawSurfaceEv() #10
  %7 = bitcast %"class.egl::Surface"* %6 to i8*
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %9

8:                                                ; preds = %1
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %9

9:                                                ; preds = %8, %5, %2
  %10 = phi i8* [ %4, %2 ], [ %7, %5 ], [ null, %8 ]
  ret i8* %10
}

; Function Attrs: optsize
declare %"class.egl::Surface"* @_ZN3egl21getCurrentReadSurfaceEv() local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl17GetCurrentDisplayEv() local_unnamed_addr #0 {
  %1 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %2 = icmp eq %"class.egl::Context"* %1, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %11

4:                                                ; preds = %0
  %5 = getelementptr inbounds %"class.egl::Context", %"class.egl::Context"* %1, i64 0, i32 1
  %6 = load %"class.egl::Display"*, %"class.egl::Display"** %5, align 8
  %7 = icmp eq %"class.egl::Display"* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @_ZN3egl5errorEi(i32 12290) #10
  br label %11

9:                                                ; preds = %4
  %10 = tail call i8* @_ZNK3egl7Display13getEGLDisplayEv(%"class.egl::Display"* nonnull %6) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %11

11:                                               ; preds = %8, %9, %3
  %12 = phi i8* [ null, %3 ], [ %10, %9 ], [ null, %8 ]
  ret i8* %12
}

; Function Attrs: optsize
declare i8* @_ZNK3egl7Display13getEGLDisplayEv(%"class.egl::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl12QueryContextEPvS0_iPi(i8*, i8*, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %1 to %"class.egl::Context"*
  %7 = icmp eq %"class.egl::Display"* %5, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %4, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"* %5, %"class.egl::Context"* %6) #11
  br i1 %14, label %15, label %33

15:                                               ; preds = %13
  switch i32 %2, label %30 [
    i32 12328, label %16
    i32 12439, label %22
    i32 12440, label %24
    i32 12422, label %31
  ]

16:                                               ; preds = %15
  %17 = bitcast i8* %1 to i32 (%"class.egl::Context"*)***
  %18 = load i32 (%"class.egl::Context"*)**, i32 (%"class.egl::Context"*)*** %17, align 8
  %19 = getelementptr inbounds i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %18, i64 9
  %20 = load i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %19, align 8
  %21 = tail call i32 %20(%"class.egl::Context"* %6) #10
  br label %31

22:                                               ; preds = %15
  %23 = tail call i32 @_ZN3egl13getCurrentAPIEv() #10
  br label %31

24:                                               ; preds = %15
  %25 = bitcast i8* %1 to i32 (%"class.egl::Context"*)***
  %26 = load i32 (%"class.egl::Context"*)**, i32 (%"class.egl::Context"*)*** %25, align 8
  %27 = getelementptr inbounds i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %26, i64 8
  %28 = load i32 (%"class.egl::Context"*)*, i32 (%"class.egl::Context"*)** %27, align 8
  %29 = tail call i32 %28(%"class.egl::Context"* %6) #10
  br label %31

30:                                               ; preds = %15
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %33

31:                                               ; preds = %15, %24, %22, %16
  %32 = phi i32 [ %29, %24 ], [ %23, %22 ], [ %21, %16 ], [ 12420, %15 ]
  store i32 %32, i32* %3, align 4
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %33

33:                                               ; preds = %13, %31, %30
  %34 = phi i32 [ 0, %30 ], [ 1, %31 ], [ 0, %13 ]
  br i1 %10, label %37, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %36) #10
  br label %37

37:                                               ; preds = %33, %35
  ret i32 %34
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl6WaitGLEv() local_unnamed_addr #0 {
  %1 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %2 = icmp eq %"class.egl::Context"* %1, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = bitcast %"class.egl::Context"* %1 to void (%"class.egl::Context"*)***
  %5 = load void (%"class.egl::Context"*)**, void (%"class.egl::Context"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %5, i64 10
  %7 = load void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %6, align 8
  tail call void %7(%"class.egl::Context"* nonnull %1) #10
  br label %8

8:                                                ; preds = %0, %3
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  ret i32 1
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl10WaitNativeEi(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 12379
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %20

4:                                                ; preds = %1
  %5 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %6 = icmp eq %"class.egl::Context"* %5, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.egl::Context", %"class.egl::Context"* %5, i64 0, i32 1
  %9 = load %"class.egl::Display"*, %"class.egl::Display"** %8, align 8
  %10 = icmp eq %"class.egl::Display"* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %7
  %12 = tail call %struct.LibX11exports* @_ZN6LibX11ptEv(%class.LibX11* nonnull @libX11) #10
  %13 = getelementptr inbounds %struct.LibX11exports, %struct.LibX11exports* %12, i64 0, i32 11
  %14 = load i32 (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, i32)** %13, align 8
  %15 = tail call i8* @_ZNK3egl7Display16getNativeDisplayEv(%"class.egl::Display"* nonnull %9) #10
  %16 = bitcast i8* %15 to %struct._XDisplay*
  %17 = tail call i32 %14(%struct._XDisplay* %16, i32 0) #10
  br label %19

18:                                               ; preds = %7
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %20

19:                                               ; preds = %11, %4
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %20

20:                                               ; preds = %18, %19, %3
  %21 = phi i32 [ 0, %3 ], [ 1, %19 ], [ 0, %18 ]
  ret i32 %21
}

; Function Attrs: optsize
declare %struct.LibX11exports* @_ZN6LibX11ptEv(%class.LibX11*) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZNK3egl7Display16getNativeDisplayEv(%"class.egl::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl11SwapBuffersEPvS0_(i8*, i8*) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = bitcast i8* %1 to %"class.egl::Surface"*
  %5 = icmp eq %"class.egl::Display"* %3, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %7 = icmp eq %"class.sw::RecursiveLock"* %6, null
  %8 = or i1 %5, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %3, %"class.egl::Surface"* %4) #11
  br i1 %10, label %14, label %22

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %6, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* nonnull %3, %"class.egl::Surface"* %4) #11
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br i1 %13, label %14, label %22

14:                                               ; preds = %9, %11
  %15 = icmp eq i8* %1, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12301) #10
  br label %22

17:                                               ; preds = %14
  %18 = bitcast i8* %1 to void (%"class.egl::Surface"*)***
  %19 = load void (%"class.egl::Surface"*)**, void (%"class.egl::Surface"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %19, i64 9
  %21 = load void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %20, align 8
  tail call void %21(%"class.egl::Surface"* nonnull %4) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %22

22:                                               ; preds = %9, %11, %17, %16
  %23 = phi i32 [ 0, %16 ], [ 1, %17 ], [ 0, %11 ], [ 0, %9 ]
  ret i32 %23
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl11CopyBuffersEPvS0_l(i8*, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = bitcast i8* %1 to %"class.egl::Surface"*
  %6 = icmp eq %"class.egl::Display"* %4, null
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %8 = select i1 %6, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %7
  %9 = icmp eq %"class.sw::RecursiveLock"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %11) #10
  br label %12

12:                                               ; preds = %3, %10
  %13 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateSurfaceEPNS_7DisplayEPNS_7SurfaceE(%"class.egl::Display"* %4, %"class.egl::Surface"* %5) #11
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %15

15:                                               ; preds = %12, %14
  br i1 %9, label %18, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %8, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %17) #10
  br label %18

18:                                               ; preds = %15, %16
  ret i32 0
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl11CreateImageEPvS0_jS0_PKl(i8*, i8*, i32, i8*, i64* readonly) local_unnamed_addr #0 {
  %6 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %7 = bitcast i8* %1 to %"class.egl::Context"*
  %8 = icmp eq %"class.egl::Display"* %6, null
  %9 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %6, i64 0, i32 10
  %10 = select i1 %8, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %9
  %11 = icmp eq %"class.sw::RecursiveLock"* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %10, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %13) #10
  br label %14

14:                                               ; preds = %5, %12
  %15 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %6) #11
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %65

17:                                               ; preds = %14
  %18 = icmp eq i8* %1, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  %20 = tail call zeroext i1 @_ZN3egl7Display14isValidContextEPNS_7ContextE(%"class.egl::Display"* %6, %"class.egl::Context"* nonnull %7) #10
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  tail call void @_ZN3egl5errorEi(i32 12294) #10
  br label %65

22:                                               ; preds = %17, %19
  %23 = icmp eq i64* %4, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %22, %32
  %25 = phi i32 [ %33, %32 ], [ 0, %22 ]
  %26 = phi i64* [ %34, %32 ], [ %4, %22 ]
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %35 [
    i64 12344, label %36
    i64 12498, label %32
    i64 12476, label %28
  ]

28:                                               ; preds = %24
  %29 = getelementptr inbounds i64, i64* %26, i64 1
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  br label %32

32:                                               ; preds = %24, %28
  %33 = phi i32 [ %31, %28 ], [ %25, %24 ]
  %34 = getelementptr inbounds i64, i64* %26, i64 2
  br label %24

35:                                               ; preds = %24
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %65

36:                                               ; preds = %24, %22
  %37 = phi i32 [ 0, %22 ], [ %25, %24 ]
  %38 = ptrtoint i8* %3 to i64
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %36
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %65

42:                                               ; preds = %36
  %43 = bitcast i8* %1 to i32 (%"class.egl::Context"*, i32, i32, i32)***
  %44 = load i32 (%"class.egl::Context"*, i32, i32, i32)**, i32 (%"class.egl::Context"*, i32, i32, i32)*** %43, align 8
  %45 = getelementptr inbounds i32 (%"class.egl::Context"*, i32, i32, i32)*, i32 (%"class.egl::Context"*, i32, i32, i32)** %44, i64 6
  %46 = load i32 (%"class.egl::Context"*, i32, i32, i32)*, i32 (%"class.egl::Context"*, i32, i32, i32)** %45, align 8
  %47 = tail call i32 %46(%"class.egl::Context"* %7, i32 %2, i32 %39, i32 %37) #10
  %48 = icmp eq i32 %47, 12288
  br i1 %48, label %50, label %49

49:                                               ; preds = %42
  tail call void @_ZN3egl5errorEi(i32 %47) #10
  br label %65

50:                                               ; preds = %42
  %51 = bitcast i8* %1 to %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)***
  %52 = load %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)**, %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)*** %51, align 8
  %53 = getelementptr inbounds %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)*, %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)** %52, i64 7
  %54 = load %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)*, %"class.egl::Image"* (%"class.egl::Context"*, i32, i32, i32)** %53, align 8
  %55 = tail call %"class.egl::Image"* %54(%"class.egl::Context"* %7, i32 %2, i32 %39, i32 %37) #10
  %56 = icmp eq %"class.egl::Image"* %55, null
  br i1 %56, label %57, label %58

57:                                               ; preds = %50
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %65

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %55, i64 0, i32 5
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %60, 1
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %65

63:                                               ; preds = %58
  %64 = tail call i8* @_ZN3egl7Display17createSharedImageEPNS_5ImageE(%"class.egl::Display"* %6, %"class.egl::Image"* nonnull %55) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %65

65:                                               ; preds = %35, %49, %63, %62, %57, %41, %21, %16
  %66 = phi i8* [ null, %21 ], [ null, %16 ], [ null, %35 ], [ null, %41 ], [ null, %49 ], [ null, %62 ], [ %64, %63 ], [ null, %57 ]
  br i1 %11, label %69, label %67

67:                                               ; preds = %65
  %68 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %10, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %68) #10
  br label %69

69:                                               ; preds = %65, %67
  ret i8* %66
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display14isValidContextEPNS_7ContextE(%"class.egl::Display"*, %"class.egl::Context"*) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZN3egl7Display17createSharedImageEPNS_5ImageE(%"class.egl::Display"*, %"class.egl::Image"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl14CreateImageKHREPvS0_jS0_PKi(i8*, i8*, i32, i8*, i32* readonly) local_unnamed_addr #0 {
  %6 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %7 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %6, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %6, i32* %4) #11
  %10 = load i64*, i64** %8, align 8
  %11 = call i8* @_ZN3egl11CreateImageEPvS0_jS0_PKl(i8* %0, i8* %1, i32 %2, i8* %3, i64* %10) #11
  %12 = load i64*, i64** %8, align 8
  %13 = icmp eq i64* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %6, i64 0, i32 0, i32 0, i32 1
  %16 = ptrtoint i64* %12 to i64
  %17 = bitcast i64** %15 to i64*
  store i64 %16, i64* %17, align 8
  %18 = bitcast i64* %12 to i8*
  call void @_ZdlPv(i8* %18) #13
  br label %19

19:                                               ; preds = %5, %14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret i8* %11
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl15DestroyImageKHREPvS0_(i8*, i8*) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = icmp eq %"class.egl::Display"* %3, null
  %5 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %6 = select i1 %4, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %5
  %7 = icmp eq %"class.sw::RecursiveLock"* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %6, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %9) #10
  br label %10

10:                                               ; preds = %2, %8
  %11 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %3) #11
  br i1 %11, label %13, label %12

12:                                               ; preds = %10
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %17

13:                                               ; preds = %10
  %14 = tail call zeroext i1 @_ZN3egl7Display18destroySharedImageEPv(%"class.egl::Display"* %3, i8* %1) #10
  br i1 %14, label %16, label %15

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %17

16:                                               ; preds = %13
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %17

17:                                               ; preds = %16, %15, %12
  %18 = phi i32 [ 1, %16 ], [ 0, %15 ], [ 0, %12 ]
  br i1 %7, label %21, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %6, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %20) #10
  br label %21

21:                                               ; preds = %17, %19
  ret i32 %18
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display18destroySharedImageEPv(%"class.egl::Display"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl18GetPlatformDisplayEjPvPKl(i32, i8* readnone, i64* readonly) local_unnamed_addr #0 {
  switch i32 %0, label %4 [
    i32 12759, label %5
    i32 12757, label %15
  ]

4:                                                ; preds = %3
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %29

5:                                                ; preds = %3
  %6 = icmp eq i8* %1, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %29

8:                                                ; preds = %5
  %9 = icmp eq i64* %2, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = load i64, i64* %2, align 8
  %12 = icmp eq i64 %11, 12344
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %29

14:                                               ; preds = %10, %8
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %29

15:                                               ; preds = %3
  %16 = tail call %struct.LibX11exports* @_ZN6LibX1111loadExportsEv(%class.LibX11* nonnull @libX11) #10
  %17 = icmp eq %struct.LibX11exports* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %29

19:                                               ; preds = %15
  %20 = icmp eq i8* %1, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %29

22:                                               ; preds = %19
  %23 = icmp eq i64* %2, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %22
  %25 = load i64, i64* %2, align 8
  %26 = icmp eq i64 %25, 12344
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %29

28:                                               ; preds = %24, %22
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %29

29:                                               ; preds = %28, %27, %21, %18, %14, %13, %7, %4
  %30 = phi i8* [ null, %4 ], [ null, %7 ], [ null, %13 ], [ inttoptr (i64 4207812181 to i8*), %14 ], [ null, %21 ], [ null, %27 ], [ inttoptr (i64 1 to i8*), %28 ], [ null, %18 ]
  ret i8* %30
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl21GetPlatformDisplayEXTEjPvPKi(i32, i8* readnone, i32* readonly) local_unnamed_addr #0 {
  %4 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %5 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %4, i32* %2) #11
  %8 = load i64*, i64** %6, align 8
  %9 = call i8* @_ZN3egl18GetPlatformDisplayEjPvPKl(i32 %0, i8* %1, i64* %8) #11
  %10 = load i64*, i64** %6, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %4, i64 0, i32 0, i32 0, i32 1
  %14 = ptrtoint i64* %10 to i64
  %15 = bitcast i64** %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast i64* %10 to i8*
  call void @_ZdlPv(i8* %16) #13
  br label %17

17:                                               ; preds = %3, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret i8* %9
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl10CreateSyncEPvjPKl(i8*, i32, i64* readonly) local_unnamed_addr #0 {
  %4 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %5 = icmp eq %"class.egl::Display"* %4, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %4, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %3, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %4) #11
  br i1 %12, label %14, label %13

13:                                               ; preds = %11
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %29

14:                                               ; preds = %11
  %15 = icmp eq i32 %1, 12537
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %29

17:                                               ; preds = %14
  %18 = icmp eq i64* %2, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %17
  %20 = load i64, i64* %2, align 8
  %21 = icmp eq i64 %20, 12344
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %29

23:                                               ; preds = %19, %17
  %24 = tail call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #10
  %25 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateContextEPNS_7DisplayEPNS_7ContextE(%"class.egl::Display"* %4, %"class.egl::Context"* %24) #11
  br i1 %25, label %27, label %26

26:                                               ; preds = %23
  tail call void @_ZN3egl5errorEi(i32 12297) #10
  br label %29

27:                                               ; preds = %23
  %28 = tail call i8* @_ZN3egl7Display10createSyncEPNS_7ContextE(%"class.egl::Display"* %4, %"class.egl::Context"* %24) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %29

29:                                               ; preds = %26, %27, %22, %16, %13
  %30 = phi i8* [ null, %16 ], [ null, %22 ], [ null, %13 ], [ %28, %27 ], [ null, %26 ]
  br i1 %8, label %33, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %32) #10
  br label %33

33:                                               ; preds = %29, %31
  ret i8* %30
}

; Function Attrs: optsize
declare i8* @_ZN3egl7Display10createSyncEPNS_7ContextE(%"class.egl::Display"*, %"class.egl::Context"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3egl13CreateSyncKHREPvjPKi(i8*, i32, i32* readonly) local_unnamed_addr #0 {
  %4 = alloca %"class.egl::(anonymous namespace)::EGLAttribs", align 8
  %5 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.egl::(anonymous namespace)::EGLAttribs"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3egl12_GLOBAL__N_110EGLAttribsC2EPKi(%"class.egl::(anonymous namespace)::EGLAttribs"* nonnull %4, i32* %2) #11
  %8 = load i64*, i64** %6, align 8
  %9 = call i8* @_ZN3egl10CreateSyncEPvjPKl(i8* %0, i32 %1, i64* %8) #11
  %10 = load i64*, i64** %6, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.egl::(anonymous namespace)::EGLAttribs", %"class.egl::(anonymous namespace)::EGLAttribs"* %4, i64 0, i32 0, i32 0, i32 1
  %14 = ptrtoint i64* %10 to i64
  %15 = bitcast i64** %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast i64* %10 to i8*
  call void @_ZdlPv(i8* %16) #13
  br label %17

17:                                               ; preds = %3, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret i8* %9
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl14DestroySyncKHREPvS0_(i8*, i8*) local_unnamed_addr #0 {
  %3 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %4 = bitcast i8* %1 to %"class.egl::FenceSync"*
  %5 = icmp eq %"class.egl::Display"* %3, null
  %6 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %3, i64 0, i32 10
  %7 = select i1 %5, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %6
  %8 = icmp eq %"class.sw::RecursiveLock"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %10) #10
  br label %11

11:                                               ; preds = %2, %9
  %12 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %3) #11
  br i1 %12, label %14, label %13

13:                                               ; preds = %11
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %18

14:                                               ; preds = %11
  %15 = tail call zeroext i1 @_ZN3egl7Display11isValidSyncEPNS_9FenceSyncE(%"class.egl::Display"* %3, %"class.egl::FenceSync"* %4) #10
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %18

17:                                               ; preds = %14
  tail call void @_ZN3egl7Display11destroySyncEPNS_9FenceSyncE(%"class.egl::Display"* %3, %"class.egl::FenceSync"* %4) #10
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %18

18:                                               ; preds = %17, %16, %13
  %19 = phi i32 [ 1, %17 ], [ 0, %16 ], [ 0, %13 ]
  br i1 %8, label %22, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %7, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %21) #10
  br label %22

22:                                               ; preds = %18, %20
  ret i32 %19
}

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display11isValidSyncEPNS_9FenceSyncE(%"class.egl::Display"*, %"class.egl::FenceSync"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl7Display11destroySyncEPNS_9FenceSyncE(%"class.egl::Display"*, %"class.egl::FenceSync"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl17ClientWaitSyncKHREPvS0_im(i8*, i8*, i32, i64) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %1 to %"class.egl::FenceSync"*
  %7 = icmp eq %"class.egl::Display"* %5, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %4, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %5) #11
  br i1 %14, label %16, label %15

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %32

16:                                               ; preds = %13
  %17 = tail call zeroext i1 @_ZN3egl7Display11isValidSyncEPNS_9FenceSyncE(%"class.egl::Display"* %5, %"class.egl::FenceSync"* %6) #10
  br i1 %17, label %19, label %18

18:                                               ; preds = %16
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %32

19:                                               ; preds = %16
  %20 = bitcast i8* %1 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 12530
  br i1 %22, label %31, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds i8, i8* %1, i64 8
  %25 = bitcast i8* %24 to %"class.egl::Context"**
  %26 = load %"class.egl::Context"*, %"class.egl::Context"** %25, align 8
  %27 = bitcast %"class.egl::Context"* %26 to void (%"class.egl::Context"*)***
  %28 = load void (%"class.egl::Context"*)**, void (%"class.egl::Context"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %28, i64 10
  %30 = load void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %29, align 8
  tail call void %30(%"class.egl::Context"* %26) #10
  store i32 12530, i32* %20, align 8
  br label %31

31:                                               ; preds = %23, %19
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %32

32:                                               ; preds = %31, %18, %15
  %33 = phi i32 [ 12534, %31 ], [ 0, %18 ], [ 0, %15 ]
  br i1 %10, label %36, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %35) #10
  br label %36

36:                                               ; preds = %32, %34
  ret i32 %33
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl13GetSyncAttribEPvS0_iPl(i8*, i8*, i32, i64*) local_unnamed_addr #0 {
  %5 = tail call %"class.egl::Display"* @_ZN3egl7Display3getEPv(i8* %0) #10
  %6 = bitcast i8* %1 to %"class.egl::FenceSync"*
  %7 = icmp eq %"class.egl::Display"* %5, null
  %8 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %5, i64 0, i32 10
  %9 = select i1 %7, %"class.sw::RecursiveLock"* null, %"class.sw::RecursiveLock"* %8
  %10 = icmp eq %"class.sw::RecursiveLock"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"* %12) #10
  br label %13

13:                                               ; preds = %4, %11
  %14 = tail call fastcc zeroext i1 @_ZN3egl12_GLOBAL__N_115validateDisplayEPNS_7DisplayE(%"class.egl::Display"* %5) #11
  br i1 %14, label %16, label %15

15:                                               ; preds = %13
  tail call void @_ZN3egl5errorEi(i32 12296) #10
  br label %35

16:                                               ; preds = %13
  %17 = tail call zeroext i1 @_ZN3egl7Display11isValidSyncEPNS_9FenceSyncE(%"class.egl::Display"* %5, %"class.egl::FenceSync"* %6) #10
  br i1 %17, label %19, label %18

18:                                               ; preds = %16
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %35

19:                                               ; preds = %16
  %20 = icmp eq i64* %3, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %19
  tail call void @_ZN3egl5errorEi(i32 12300) #10
  br label %35

22:                                               ; preds = %19
  switch i32 %2, label %34 [
    i32 12535, label %23
    i32 12529, label %24
    i32 12536, label %33
  ]

23:                                               ; preds = %22
  store i64 12537, i64* %3, align 8
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %35

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %1, i64 8
  %26 = bitcast i8* %25 to %"class.egl::Context"**
  %27 = load %"class.egl::Context"*, %"class.egl::Context"** %26, align 8
  %28 = bitcast %"class.egl::Context"* %27 to void (%"class.egl::Context"*)***
  %29 = load void (%"class.egl::Context"*)**, void (%"class.egl::Context"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %29, i64 10
  %31 = load void (%"class.egl::Context"*)*, void (%"class.egl::Context"*)** %30, align 8
  tail call void %31(%"class.egl::Context"* %27) #10
  %32 = bitcast i8* %1 to i32*
  store i32 12530, i32* %32, align 8
  store i64 12530, i64* %3, align 8
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %35

33:                                               ; preds = %22
  store i64 12528, i64* %3, align 8
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  br label %35

34:                                               ; preds = %22
  tail call void @_ZN3egl5errorEi(i32 12292) #10
  br label %35

35:                                               ; preds = %34, %33, %24, %23, %21, %18, %15
  %36 = phi i32 [ 0, %34 ], [ 1, %33 ], [ 1, %24 ], [ 1, %23 ], [ 0, %21 ], [ 0, %18 ], [ 0, %15 ]
  br i1 %10, label %39, label %37

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.sw::RecursiveLock", %"class.sw::RecursiveLock"* %9, i64 0, i32 0
  tail call void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"* %38) #10
  br label %39

39:                                               ; preds = %35, %37
  ret i32 %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3egl16GetSyncAttribKHREPvS0_iPi(i8*, i8*, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  store i64 -6148914691236517206, i64* %5, align 8
  %7 = call i32 @_ZN3egl13GetSyncAttribEPvS0_iPl(i8* %0, i8* %1, i32 %2, i64* nonnull %5) #11
  %8 = load i64, i64* %5, align 8
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret i32 %7
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void ()* @_ZN3egl14GetProcAddressEPKc(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %31, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @strncmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i64 0, i64 0), i8* nonnull %0, i64 3) #15
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %31

6:                                                ; preds = %3, %6
  %7 = phi i64 [ %19, %6 ], [ 54, %3 ]
  %8 = phi %struct.Function* [ %18, %6 ], [ getelementptr inbounds ([54 x %struct.Function], [54 x %struct.Function]* @_ZZN3egl14GetProcAddressEPKcE12eglFunctions, i64 0, i64 0), %3 ]
  %9 = lshr i64 %7, 1
  %10 = getelementptr inbounds %struct.Function, %struct.Function* %8, i64 %9
  %11 = getelementptr inbounds %struct.Function, %struct.Function* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = tail call i32 @strcmp(i8* %12, i8* nonnull %0) #15
  %14 = icmp slt i32 %13, 0
  %15 = getelementptr inbounds %struct.Function, %struct.Function* %10, i64 1
  %16 = xor i64 %9, -1
  %17 = add i64 %7, %16
  %18 = select i1 %14, %struct.Function* %15, %struct.Function* %8
  %19 = select i1 %14, i64 %17, i64 %9
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %6

21:                                               ; preds = %6
  %22 = icmp eq %struct.Function* %18, bitcast (i8** getelementptr inbounds ([54 x %struct.Function], [54 x %struct.Function]* @_ZZN3egl14GetProcAddressEPKcE12eglFunctions, i64 1, i64 0, i32 0) to %struct.Function*)
  br i1 %22, label %31, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.Function, %struct.Function* %18, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i32 @strcmp(i8* nonnull %0, i8* %25) #15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.Function, %struct.Function* %18, i64 0, i32 1
  %30 = load void ()*, void ()** %29, align 8
  br label %41

31:                                               ; preds = %23, %21, %1, %3
  %32 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #10
  %33 = icmp eq %class.LibGLESv2exports* %32, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %31
  %35 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #10
  %36 = getelementptr inbounds %class.LibGLESv2exports, %class.LibGLESv2exports* %35, i64 0, i32 195
  %37 = load void ()* (i8*)*, void ()* (i8*)** %36, align 8
  %38 = tail call void ()* %37(i8* %0) #10
  %39 = icmp eq void ()* %38, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %31, %34
  br label %41

41:                                               ; preds = %34, %28, %40
  %42 = phi void ()* [ null, %40 ], [ %30, %28 ], [ %38, %34 ]
  tail call void @_ZN3egl15setCurrentErrorEi(i32 12288) #10
  ret void ()* %42
}

; Function Attrs: optsize
declare protected i32 @eglBindAPI(i32) #2

; Function Attrs: optsize
declare protected i32 @eglBindTexImage(i8*, i8*, i32) #2

; Function Attrs: optsize
declare protected i32 @eglChooseConfig(i8*, i32*, i8**, i32, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglClientWaitSync(i8*, i8*, i32, i64) #2

; Function Attrs: optsize
declare protected i32 @eglClientWaitSyncKHR(i8*, i8*, i32, i64) #2

; Function Attrs: optsize
declare protected i32 @eglCopyBuffers(i8*, i8*, i64) #2

; Function Attrs: optsize
declare protected i8* @eglCreateContext(i8*, i8*, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreateImage(i8*, i8*, i32, i8*, i64*) #2

; Function Attrs: optsize
declare protected i8* @eglCreateImageKHR(i8*, i8*, i32, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePbufferFromClientBuffer(i8*, i32, i8*, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePbufferSurface(i8*, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePixmapSurface(i8*, i8*, i64, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePlatformPixmapSurface(i8*, i8*, i8*, i64*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePlatformPixmapSurfaceEXT(i8*, i8*, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePlatformWindowSurface(i8*, i8*, i8*, i64*) #2

; Function Attrs: optsize
declare protected i8* @eglCreatePlatformWindowSurfaceEXT(i8*, i8*, i8*, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreateSync(i8*, i32, i64*) #2

; Function Attrs: optsize
declare protected i8* @eglCreateSyncKHR(i8*, i32, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglCreateWindowSurface(i8*, i8*, i64, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroyContext(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroyImage(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroyImageKHR(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroySurface(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroySync(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglDestroySyncKHR(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglGetConfigAttrib(i8*, i8*, i32, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglGetConfigs(i8*, i8**, i32, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglGetCurrentContext() #2

; Function Attrs: optsize
declare protected i8* @eglGetCurrentDisplay() #2

; Function Attrs: optsize
declare protected i8* @eglGetCurrentSurface(i32) #2

; Function Attrs: optsize
declare protected i8* @eglGetDisplay(i64) #2

; Function Attrs: optsize
declare protected i32 @eglGetError() #2

; Function Attrs: optsize
declare protected i8* @eglGetPlatformDisplay(i32, i8*, i64*) #2

; Function Attrs: optsize
declare protected i8* @eglGetPlatformDisplayEXT(i32, i8*, i32*) #2

; Function Attrs: optsize
declare protected void ()* @eglGetProcAddress(i8*) #2

; Function Attrs: optsize
declare protected i32 @eglGetSyncAttrib(i8*, i8*, i32, i64*) #2

; Function Attrs: optsize
declare protected i32 @eglGetSyncAttribKHR(i8*, i8*, i32, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglInitialize(i8*, i32*, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglMakeCurrent(i8*, i8*, i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglQueryAPI() #2

; Function Attrs: optsize
declare protected i32 @eglQueryContext(i8*, i8*, i32, i32*) #2

; Function Attrs: optsize
declare protected i8* @eglQueryString(i8*, i32) #2

; Function Attrs: optsize
declare protected i32 @eglQuerySurface(i8*, i8*, i32, i32*) #2

; Function Attrs: optsize
declare protected i32 @eglReleaseTexImage(i8*, i8*, i32) #2

; Function Attrs: optsize
declare protected i32 @eglReleaseThread() #2

; Function Attrs: optsize
declare protected i32 @eglSurfaceAttrib(i8*, i8*, i32, i32) #2

; Function Attrs: optsize
declare protected i32 @eglSwapBuffers(i8*, i8*) #2

; Function Attrs: optsize
declare protected i32 @eglSwapInterval(i8*, i32) #2

; Function Attrs: optsize
declare protected i32 @eglTerminate(i8*) #2

; Function Attrs: optsize
declare protected i32 @eglWaitClient() #2

; Function Attrs: optsize
declare protected i32 @eglWaitGL() #2

; Function Attrs: optsize
declare protected i32 @eglWaitNative(i32) #2

; Function Attrs: optsize
declare protected i32 @eglWaitSync(i8*, i8*, i32) #2

; Function Attrs: optsize
declare protected i32 @eglWaitSyncKHR(i8*, i8*, i32) #2

; Function Attrs: nofree nounwind optsize readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind optsize readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: optsize
declare %struct.LibX11exports* @_ZN6LibX1111loadExportsEv(%class.LibX11*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZNSt3__115recursive_mutex4lockEv(%"class.std::__1::recursive_mutex"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare void @_ZNSt3__115recursive_mutex6unlockEv(%"class.std::__1::recursive_mutex"*) local_unnamed_addr #4

; Function Attrs: optsize
declare zeroext i1 @_ZNK3egl7Display13isInitializedEv(%"class.egl::Display"*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN3egl5errorEi(i32) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display13isValidConfigEPv(%"class.egl::Display"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: optsize
declare zeroext i1 @_ZN3egl7Display14isValidSurfaceEPNS_7SurfaceE(%"class.egl::Display"*, %"class.egl::Surface"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca [3 x i8*], align 16
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %35

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %35

11:                                               ; preds = %7
  %12 = bitcast [3 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* align 16 bitcast ([3 x i8*]* @__const._ZN9LibGLESv211loadExportsEv.libGLESv2_lib to i8*), i64 24, i1 false)
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @_Z18getModuleDirectoryv(%"class.std::__1::basic_string"* nonnull sret %3) #10
  %16 = call i8* @_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, [3 x i8*]* nonnull dereferenceable(24) %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0)) #11
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %11
  %19 = call i8* @dlsym(i8* nonnull %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0)) #10
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = call i8* @dlerror() #10
  br label %23

23:                                               ; preds = %18, %21
  %24 = bitcast i8* %19 to %class.LibGLESv2exports* ()*
  %25 = call %class.LibGLESv2exports* %24() #10
  %26 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 1
  store %class.LibGLESv2exports* %25, %class.LibGLESv2exports** %26, align 8
  br label %27

27:                                               ; preds = %11, %23
  store i8 1, i8* %4, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %33) #13
  br label %34

34:                                               ; preds = %27, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #12
  br label %35

35:                                               ; preds = %7, %1, %34
  %36 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 1
  %37 = load %class.LibGLESv2exports*, %class.LibGLESv2exports** %36, align 8
  ret %class.LibGLESv2exports* %37
}

; Function Attrs: optsize
declare void @_Z18getModuleDirectoryv(%"class.std::__1::basic_string"* sret) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_(%"class.std::__1::basic_string"* dereferenceable(24), [3 x i8*]* dereferenceable(24), i8*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %1, i64 0, i64 0
  %7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %1, i64 0, i64 3
  %8 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = icmp eq i8* %2, null
  br label %29

20:                                               ; preds = %92
  %21 = icmp eq i8** %94, %7
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %27 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  br label %97

29:                                               ; preds = %3, %20
  %30 = phi i8* [ undef, %3 ], [ %87, %20 ]
  %31 = phi i8** [ %6, %3 ], [ %94, %20 ]
  %32 = load i8*, i8** %31, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #12, !alias.scope !3
  %33 = load i8, i8* %13, align 1, !noalias !3
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %29
  %36 = load i64, i64* %15, align 8, !noalias !3
  %37 = call i64 @strlen(i8* %32) #10, !noalias !3
  %38 = load i8*, i8** %16, align 8, !noalias !3
  br label %42

39:                                               ; preds = %29
  %40 = zext i8 %33 to i64
  %41 = call i64 @strlen(i8* %32) #10, !noalias !3
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi i64 [ %37, %35 ], [ %41, %39 ]
  %44 = phi i64 [ %36, %35 ], [ %40, %39 ]
  %45 = phi i8* [ %38, %35 ], [ %14, %39 ]
  %46 = add i64 %44, %43
  %47 = icmp ugt i64 %46, -17
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %49) #14
  unreachable

50:                                               ; preds = %42
  %51 = icmp ult i64 %46, 23
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = trunc i64 %44 to i8
  store i8 %53, i8* %18, align 1, !alias.scope !3
  br label %59

54:                                               ; preds = %50
  %55 = add nuw i64 %46, 16
  %56 = and i64 %55, -16
  %57 = call i8* @_Znwm(i64 %56) #13
  store i8* %57, i8** %9, align 8, !alias.scope !3
  %58 = or i64 %56, -9223372036854775808
  store i64 %58, i64* %11, align 8, !alias.scope !3
  store i64 %44, i64* %10, align 8, !alias.scope !3
  br label %59

59:                                               ; preds = %54, %52
  %60 = phi i8* [ %8, %52 ], [ %57, %54 ]
  %61 = icmp eq i64 %44, 0
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %45, i64 %44, i1 false) #12
  br label %63

63:                                               ; preds = %59, %62
  %64 = getelementptr inbounds i8, i8* %60, i64 %44
  store i8 0, i8* %64, align 1
  %65 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %32, i64 %43) #10
  %66 = load i8, i8* %18, align 1
  %67 = icmp slt i8 %66, 0
  %68 = load i8*, i8** %9, align 8
  %69 = select i1 %67, i8* %68, i8* %8
  %70 = call i8* @dlopen(i8* %69, i32 5) #10
  %71 = icmp eq i8* %70, null
  br i1 %71, label %85, label %72

72:                                               ; preds = %63
  %73 = call i8* @dlopen(i8* %69, i32 1) #10
  %74 = icmp eq i8* %73, null
  %75 = or i1 %74, %19
  %76 = xor i1 %74, true
  %77 = zext i1 %76 to i32
  %78 = select i1 %74, i8* %30, i8* %73
  br i1 %75, label %85, label %79

79:                                               ; preds = %72
  %80 = call i8* @dlsym(i8* nonnull %73, i8* nonnull %2) #10
  %81 = icmp eq i8* %80, null
  br i1 %81, label %82, label %85

82:                                               ; preds = %79
  %83 = call i8* @dlerror() #10
  %84 = call i32 @dlclose(i8* nonnull %73) #10
  br label %85

85:                                               ; preds = %72, %63, %79, %82
  %86 = phi i32 [ %77, %72 ], [ 0, %82 ], [ 1, %79 ], [ 0, %63 ]
  %87 = phi i8* [ %78, %72 ], [ %30, %82 ], [ %73, %79 ], [ %30, %63 ]
  %88 = load i8, i8* %18, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %91) #13
  br label %92

92:                                               ; preds = %85, %90
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12
  %93 = icmp eq i32 %86, 0
  %94 = getelementptr inbounds i8*, i8** %31, i64 1
  br i1 %93, label %20, label %160

95:                                               ; preds = %157
  %96 = icmp eq i8** %159, %7
  br i1 %96, label %160, label %97

97:                                               ; preds = %22, %95
  %98 = phi i8* [ %87, %22 ], [ %152, %95 ]
  %99 = phi i8** [ %6, %22 ], [ %159, %95 ]
  %100 = load i8*, i8** %99, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 24, i1 false) #12, !alias.scope !6
  %101 = load i8, i8* %13, align 1, !noalias !6
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %97
  %104 = load i64, i64* %15, align 8, !noalias !6
  %105 = call i64 @strlen(i8* %100) #10, !noalias !6
  %106 = load i8*, i8** %16, align 8, !noalias !6
  br label %110

107:                                              ; preds = %97
  %108 = zext i8 %101 to i64
  %109 = call i64 @strlen(i8* %100) #10, !noalias !6
  br label %110

110:                                              ; preds = %107, %103
  %111 = phi i64 [ %105, %103 ], [ %109, %107 ]
  %112 = phi i64 [ %104, %103 ], [ %108, %107 ]
  %113 = phi i8* [ %106, %103 ], [ %14, %107 ]
  %114 = add i64 %112, %111
  %115 = icmp ugt i64 %114, -17
  br i1 %115, label %116, label %118

116:                                              ; preds = %110
  %117 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %117) #14
  unreachable

118:                                              ; preds = %110
  %119 = icmp ult i64 %114, 23
  br i1 %119, label %120, label %122

120:                                              ; preds = %118
  %121 = trunc i64 %112 to i8
  store i8 %121, i8* %28, align 1, !alias.scope !6
  br label %127

122:                                              ; preds = %118
  %123 = add nuw i64 %114, 16
  %124 = and i64 %123, -16
  %125 = call i8* @_Znwm(i64 %124) #13
  store i8* %125, i8** %24, align 8, !alias.scope !6
  %126 = or i64 %124, -9223372036854775808
  store i64 %126, i64* %26, align 8, !alias.scope !6
  store i64 %112, i64* %25, align 8, !alias.scope !6
  br label %127

127:                                              ; preds = %122, %120
  %128 = phi i8* [ %23, %120 ], [ %125, %122 ]
  %129 = icmp eq i64 %112, 0
  br i1 %129, label %131, label %130

130:                                              ; preds = %127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %128, i8* align 1 %113, i64 %112, i1 false) #12
  br label %131

131:                                              ; preds = %127, %130
  %132 = getelementptr inbounds i8, i8* %128, i64 %112
  store i8 0, i8* %132, align 1
  %133 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* %100, i64 %111) #10
  %134 = load i8, i8* %28, align 1
  %135 = icmp slt i8 %134, 0
  %136 = load i8*, i8** %24, align 8
  %137 = select i1 %135, i8* %136, i8* %23
  %138 = call i8* @dlopen(i8* %137, i32 1) #10
  %139 = icmp eq i8* %138, null
  %140 = or i1 %139, %19
  %141 = xor i1 %139, true
  %142 = zext i1 %141 to i32
  %143 = select i1 %139, i8* %98, i8* %138
  br i1 %140, label %150, label %144

144:                                              ; preds = %131
  %145 = call i8* @dlsym(i8* nonnull %138, i8* nonnull %2) #10
  %146 = icmp eq i8* %145, null
  br i1 %146, label %147, label %150

147:                                              ; preds = %144
  %148 = call i8* @dlerror() #10
  %149 = call i32 @dlclose(i8* nonnull %138) #10
  br label %150

150:                                              ; preds = %131, %144, %147
  %151 = phi i32 [ %142, %131 ], [ 0, %147 ], [ 1, %144 ]
  %152 = phi i8* [ %143, %131 ], [ %98, %147 ], [ %138, %144 ]
  %153 = load i8, i8* %28, align 1
  %154 = icmp slt i8 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %150
  %156 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %156) #13
  br label %157

157:                                              ; preds = %150, %155
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #12
  %158 = icmp eq i32 %151, 0
  %159 = getelementptr inbounds i8*, i8** %99, i64 1
  br i1 %158, label %95, label %160

160:                                              ; preds = %92, %95, %157
  %161 = phi i8* [ null, %95 ], [ %152, %157 ], [ %87, %92 ]
  ret i8* %161
}

; Function Attrs: optsize
declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nounwind optsize
declare i8* @dlopen(i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind optsize
declare i32 @dlclose(i8*) local_unnamed_addr #4

; Function Attrs: nounwind optsize
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind optsize
declare i8* @dlerror() local_unnamed_addr #4

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind optsize }
attributes #11 = { optsize }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind optsize }
attributes #14 = { noreturn nounwind optsize }
attributes #15 = { nounwind optsize readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
