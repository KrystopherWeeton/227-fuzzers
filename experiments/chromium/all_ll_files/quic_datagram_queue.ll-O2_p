; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_datagram_queue.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_datagram_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::QuicDatagramQueue" = type { %"class.quic::QuicSession"*, %"class.quic::QuicClock"*, %"class.quic::QuicTime::Delta", %"class.quiche::QuicheCircularDeque", %"class.std::__1::unique_ptr" }
%"class.quic::QuicClock" = type { i32 (...)**, i8, %"class.quic::QuicTime::Delta" }
%"class.quic::QuicTime::Delta" = type { i64 }
%"class.quiche::QuicheCircularDeque" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicDatagramQueue::Datagram, 3, std::__1::allocator<quic::QuicDatagramQueue::Datagram> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicDatagramQueue::Datagram, 3, std::__1::allocator<quic::QuicDatagramQueue::Datagram> >::AllocatorAndData" = type { %"struct.quic::QuicDatagramQueue::Datagram"*, i64 }
%"struct.quic::QuicDatagramQueue::Datagram" = type { %"class.quic::QuicMemSlice", %"class.quic::QuicTime" }
%"class.quic::QuicMemSlice" = type { %"class.quic::QuicMemSliceImpl" }
%"class.quic::QuicMemSliceImpl" = type { %class.scoped_refptr, i64 }
%class.scoped_refptr = type { %"class.net::IOBuffer"* }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.quic::QuicTime" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.quic::QuicDatagramQueue::Observer"* }
%"class.quic::QuicDatagramQueue::Observer" = type { i32 (...)** }
%"class.quic::QuicSession" = type <{ %"class.quic::QuicConnectionVisitorInterface", %"class.quic::SessionNotifierInterface", %"class.quic::QuicStreamFrameDataProducer", %"class.quic::QuicStreamIdManager::DelegateInterface", %"class.quic::HandshakerDelegateInterface", %"class.quic::StreamDelegateInterface", %"class.quic::QuicControlFrameManager::DelegateInterface", %"class.absl::flat_hash_map", %"class.quic::QuicConnection"*, i8, [7 x i8], %"class.quic::QuicSession::Visitor"*, %"class.quic::QuicWriteBlockedList", %"class.std::__1::vector.305", %"class.quic::QuicConfig", %"class.absl::flat_hash_map.368", %"class.absl::flat_hash_map.377", %"class.quic::LegacyQuicStreamIdManager", %"class.quic::UberQuicStreamIdManager", i64, i64, i64, i64, %"struct.quic::QuicConnectionCloseFrame", %"class.quic::QuicFlowController", i32, i8, i8, [2 x i8], %"class.quic::QuicControlFrameManager", i32, [4 x i8], %"class.quic::QuicDatagramQueue", %"class.quiche::QuicheLinkedHashMap", %"class.std::__1::unique_ptr.164", %"class.std::__1::vector", %"class.absl::optional.415", i8, i8, i8, i8, [4 x i8] }>
%"class.quic::QuicConnectionVisitorInterface" = type { i32 (...)** }
%"class.quic::SessionNotifierInterface" = type { i32 (...)** }
%"class.quic::QuicStreamFrameDataProducer" = type { i32 (...)** }
%"class.quic::QuicStreamIdManager::DelegateInterface" = type { i32 (...)** }
%"class.quic::HandshakerDelegateInterface" = type { i32 (...)** }
%"class.quic::StreamDelegateInterface" = type { i32 (...)** }
%"class.quic::QuicControlFrameManager::DelegateInterface" = type { i32 (...)** }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type opaque
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.quic::QuicConnection" = type <{ %"class.quic::QuicFramerVisitorInterface", %"class.quic::QuicBlockedWriterInterface", %"class.quic::QuicPacketCreator::DelegateInterface", %"class.quic::QuicSentPacketManager::NetworkChangeVisitor", %"class.quic::QuicNetworkBlackholeDetector::Delegate", %"class.quic::QuicIdleNetworkDetector::Delegate", %"class.quic::QuicPathValidator::SendDelegate", %"class.quic::QuicConnectionIdManagerVisitorInterface", %"class.quic::QuicFramer", i8, i8, i8, i8, [4 x i8], %"class.quic::QuicConnectionHelperInterface"*, %"class.quic::QuicAlarmFactory"*, %"struct.quic::PerPacketOptions"*, %"class.quic::QuicPacketWriter"*, i8, i8, [6 x i8], %"class.quic::QuicClock"*, %"class.quic::QuicRandom"*, %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", i8, i8, [2 x i8], %"class.quic::QuicSocketAddress", [4 x i8], %"struct.quic::QuicConnection::PathState", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8], i64, i8*, i8, [7 x i8], %"struct.quic::QuicPacketHeader", i8, [7 x i8], %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicPacketNumber", %"class.std::__1::deque", %"class.quiche::QuicheCircularDeque.59", i64, i64, %"class.std::__1::unique_ptr.62", i32, [4 x i8], i64, %"struct.quic::QuicConnectionStats", %"class.quic::UberReceivedPacketManager", i32, i8, i8, [2 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i32, i32, %"class.quic::QuicOneBlockArena", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicConnectionVisitorInterface"*, %"class.quic::QuicConnectionDebugVisitor"*, %"class.quic::QuicPacketCreator", %"class.quic::QuicTime", %"class.quic::QuicSentPacketManager", i8, i8, i8, i8, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", [4 x i8], %"class.quic::QuicConnectionId", i8, [7 x i8], %"class.std::__1::vector", i64, i16, [6 x i8], i64, i64, i64, i8, i8, [6 x i8], i64, i64, i8, i8, i8, i8, %"struct.std::__1::array.35", i32, i8, i8, i8, [5 x i8], %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.195", %"class.quic::QuicTime::Delta", %"class.std::__1::unique_ptr.217", %"class.quiche::QuicheCircularDeque.223", %"class.quiche::QuicheCircularDeque.226", %"class.std::__1::vector.229", %"class.absl::optional.236", %"class.quic::QuicConnectionId", %"class.absl::optional.236", %"class.std::__1::list", %"class.quic::QuicCoalescedPacket", %"class.quic::QuicConnectionMtuDiscoverer", %"class.quic::QuicNetworkBlackholeDetector", %"class.quic::QuicIdleNetworkDetector", i8, i8, i8, i8, [4 x i8], %"class.std::__1::basic_string", i8, [7 x i8], i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicPathValidator", %"struct.quic::QuicConnection::PathState", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%"class.quic::QuicFramerVisitorInterface" = type { i32 (...)** }
%"class.quic::QuicBlockedWriterInterface" = type { i32 (...)** }
%"class.quic::QuicPacketCreator::DelegateInterface" = type { i32 (...)** }
%"class.quic::QuicSentPacketManager::NetworkChangeVisitor" = type { i32 (...)** }
%"class.quic::QuicNetworkBlackholeDetector::Delegate" = type { i32 (...)** }
%"class.quic::QuicIdleNetworkDetector::Delegate" = type { i32 (...)** }
%"class.quic::QuicPathValidator::SendDelegate" = type { i32 (...)** }
%"class.quic::QuicConnectionIdManagerVisitorInterface" = type { i32 (...)** }
%"class.quic::QuicFramer" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.quic::QuicFramerVisitorInterface"*, i32, %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.quic::ParsedQuicVersion", %"class.std::__1::vector", [4 x %"class.std::__1::unique_ptr.21"], i8, i8, i8, [4 x %"class.std::__1::unique_ptr.27"], i8, i8, %"struct.std::__1::array", i8, %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", i8, i8, i8, %"class.quic::QuicPacketNumber", i64, %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.21", %"class.quic::QuicPacketNumber", %"class.quic::QuicStreamFrameDataProducer"*, i8, i8, i8, i8, i8, i8, i64, i32, i32, i64 }
%"struct.quic::ParsedQuicVersion" = type { i32, i32 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.quic::QuicEncrypter"* }
%"class.quic::QuicEncrypter" = type { %"class.quic::QuicCrypter" }
%"class.quic::QuicCrypter" = type { i32 (...)** }
%"struct.std::__1::array" = type { [32 x i8] }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.quic::QuicDecrypter"* }
%"class.quic::QuicDecrypter" = type { %"class.quic::QuicCrypter" }
%"class.quic::QuicConnectionHelperInterface" = type { i32 (...)** }
%"class.quic::QuicAlarmFactory" = type { i32 (...)** }
%"struct.quic::PerPacketOptions" = type <{ i32 (...)**, %"class.quic::QuicTime::Delta", i8, [7 x i8] }>
%"class.quic::QuicPacketWriter" = type { i32 (...)** }
%"class.quic::QuicRandom" = type { i32 (...)** }
%"struct.quic::QuicPacketHeader" = type { %"class.quic::QuicConnectionId", i8, %"class.quic::QuicConnectionId", i8, i8, i8, i8, i8, i8, %"struct.quic::ParsedQuicVersion", %"struct.std::__1::array"*, %"class.quic::QuicPacketNumber", i8, i8, %"struct.std::__1::array.35", i8, %"class.absl::string_view", i8, i64 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.quic::QuicPacketNumber" = type { i64 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.54" }
%"struct.std::__1::__split_buffer" = type { %"struct.quic::QuicConnection::UndecryptablePacket"**, %"struct.quic::QuicConnection::UndecryptablePacket"**, %"struct.quic::QuicConnection::UndecryptablePacket"**, %"class.std::__1::__compressed_pair.49" }
%"struct.quic::QuicConnection::UndecryptablePacket" = type <{ %"class.std::__1::unique_ptr.43", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.quic::QuicEncryptedPacket"* }
%"class.quic::QuicEncryptedPacket" = type { %"class.quic::QuicData.base", [7 x i8] }
%"class.quic::QuicData.base" = type <{ i32 (...)**, i8*, i64, i8 }>
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.quic::QuicConnection::UndecryptablePacket"** }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { i64 }
%"class.quiche::QuicheCircularDeque.59" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> >, 3, std::__1::allocator<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> > > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> >, 3, std::__1::allocator<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> > > >::AllocatorAndData" = type { %"class.std::__1::unique_ptr.43"*, i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::vector.65"* }
%"class.std::__1::vector.65" = type opaque
%"struct.quic::QuicConnectionStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, float, i32, i32, i64, i64, i64, i64, %"class.quic::QuicTimeAccumulator", i32, i32, i8, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.quic::QuicBandwidth", i64, i64, i64, i64, i64, i32, %"class.quic::QuicTime", %"class.quic::QuicTime", i64, i64, i64, i8, i64, i64, i64, i8, i8, %"class.quic::QuicPacketNumber", i64, i64, i64, i32, i64, i64, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, %"class.absl::optional.69", %"class.absl::optional.69", %"class.absl::optional.69" }
%"class.quic::QuicTimeAccumulator" = type { %"class.quic::QuicTime::Delta", %"class.quic::QuicTime" }
%"class.quic::QuicBandwidth" = type { i64 }
%"class.absl::optional.69" = type { %"class.absl::optional_internal::optional_data.70" }
%"class.absl::optional_internal::optional_data.70" = type { %"class.absl::optional_internal::optional_data_base.71" }
%"class.absl::optional_internal::optional_data_base.71" = type { %"class.absl::optional_internal::optional_data_dtor_base.72" }
%"class.absl::optional_internal::optional_data_dtor_base.72" = type { i8, %union.anon.73 }
%union.anon.73 = type { %"struct.quic::QuicConnectionStats::TlsServerOperationStats" }
%"struct.quic::QuicConnectionStats::TlsServerOperationStats" = type { i8, %"class.quic::QuicTime::Delta" }
%"class.quic::UberReceivedPacketManager" = type <{ i32 (...)**, [3 x %"class.quic::QuicReceivedPacketManager"], i8, [7 x i8] }>
%"class.quic::QuicReceivedPacketManager" = type { i32 (...)**, %"class.quic::QuicPacketNumber", %"struct.quic::QuicAckFrame", i8, i64, %"class.quic::QuicTime", i8, %"class.quic::QuicPacketNumber", %"struct.quic::QuicConnectionStats"*, i64, i64, i64, float, i8, i8, i8, %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", %"class.quic::QuicTime", i8, %"class.quic::QuicPacketNumber", i64 }
%"struct.quic::QuicAckFrame" = type { %"class.quic::QuicPacketNumber", %"class.quic::QuicTime::Delta", %"class.std::__1::vector.78", %"class.quic::PacketNumberQueue", i8, i64, i64, i64 }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.quic::PacketNumberQueue" = type { %"class.quic::QuicIntervalSet" }
%"class.quic::QuicIntervalSet" = type { %"class.absl::btree_set" }
%"class.absl::btree_set" = type { %"class.absl::container_internal::btree_set_container" }
%"class.absl::container_internal::btree_set_container" = type { %"class.absl::container_internal::btree_container" }
%"class.absl::container_internal::btree_container" = type { %"class.absl::container_internal::btree" }
%"class.absl::container_internal::btree" = type { %"class.absl::container_internal::CompressedTuple.85", %"class.absl::container_internal::btree_node"*, i64 }
%"class.absl::container_internal::CompressedTuple.85" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.86" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.86" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.91" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.91" = type { %"class.absl::container_internal::btree_node"* }
%"class.absl::container_internal::btree_node" = type { i8 }
%"class.quic::QuicOneBlockArena" = type { [1056 x i8], i32, [4 x i8] }
%"class.quic::QuicArenaScopedPtr" = type { i8* }
%"class.quic::QuicConnectionDebugVisitor" = type { %"class.quic::QuicSentPacketManager::DebugDelegate" }
%"class.quic::QuicSentPacketManager::DebugDelegate" = type { i32 (...)** }
%"class.quic::QuicPacketCreator" = type <{ %"class.quic::QuicPacketCreator::DelegateInterface"*, %"class.quic::QuicPacketCreator::DebugDelegate"*, %"class.quic::QuicFramer"*, %"class.quic::QuicRandom"*, i8, i8, %"struct.std::__1::array", [6 x i8], i64, i64, i8, [7 x i8], %"class.std::__1::vector.92", i64, %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.quic::SerializedPacket", %"class.std::__1::basic_string", i64, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicPacketNumber", i64, i64, i8, [7 x i8] }>
%"class.quic::QuicPacketCreator::DebugDelegate" = type { i32 (...)** }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"struct.quic::QuicFrame"*, %"struct.quic::QuicFrame"*, %"class.std::__1::__compressed_pair.119" }
%"struct.quic::QuicFrame" = type { %union.anon.94 }
%union.anon.94 = type { %"struct.quic::QuicStreamFrame" }
%"struct.quic::QuicStreamFrame" = type { i8, i8, i16, i32, i8*, i64 }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.quic::QuicFrame"* }
%"struct.quic::SerializedPacket" = type <{ i8*, i16, [6 x i8], %"class.std::__1::function", %"class.std::__1::vector.92", %"class.std::__1::vector.92", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, i8, i8, i8, i8, [3 x i8], %"class.quic::QuicPacketNumber", i8, i8, i8, i8, %"class.quic::QuicSocketAddress", [4 x i8] }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, i8*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.quic::QuicSentPacketManager" = type <{ i32 (...)**, %"class.quic::QuicUnackedPacketMap", %"class.quic::QuicClock"*, %"class.quic::QuicRandom"*, %"struct.quic::QuicConnectionStats"*, %"class.quic::QuicSentPacketManager::DebugDelegate"*, %"class.quic::QuicSentPacketManager::NetworkChangeVisitor"*, i64, %"class.quic::RttStats", %"class.std::__1::unique_ptr.36", %"class.quic::LossDetectionInterface"*, %"class.quic::UberLossAlgorithm", %"class.quic::QuicPacketNumber", i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.std::__1::vector.143", %"class.std::__1::vector.150", %"class.quic::QuicPacketNumber", i16, [6 x i8], %"class.quic::PacingSender", i8, [7 x i8], %"class.quic::QuicSustainedBandwidthRecorder", %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i8, [7 x i8], %"class.quiche::QuicheCircularDeque.157", %"struct.quic::QuicAckFrame", i8, [7 x i8], %"class.std::__1::reverse_iterator", i8, [7 x i8], i64, i64, i8, i8, i8, [5 x i8], i64, i32, [4 x i8], i64, i8, i8, i8, i8, float, i8, [3 x i8], float, i32, i8, [3 x i8] }>
%"class.quic::QuicUnackedPacketMap" = type <{ i8, [7 x i8], %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quiche::QuicheCircularDeque.124", %"class.quic::QuicPacketNumber", i64, [3 x i64], i64, %"class.quic::QuicTime", [3 x %"class.quic::QuicTime"], %"class.quic::QuicTime", %"struct.quic::QuicStreamFrame", %"class.quic::SessionNotifierInterface"*, i8, i8, [6 x i8] }>
%"class.quiche::QuicheCircularDeque.124" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicTransmissionInfo, 3, std::__1::allocator<quic::QuicTransmissionInfo> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicTransmissionInfo, 3, std::__1::allocator<quic::QuicTransmissionInfo> >::AllocatorAndData" = type { %"struct.quic::QuicTransmissionInfo"*, i64 }
%"struct.quic::QuicTransmissionInfo" = type { %"class.std::__1::vector.92", %"class.quic::QuicTime", i16, i8, i8, i8, i8, i8, i8, %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber" }
%"class.quic::RttStats" = type <{ %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"struct.quic::RttStats::StandardDeviationCaculator", i8, [7 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", i8, [7 x i8] }>
%"struct.quic::RttStats::StandardDeviationCaculator" = type { i8, double }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.quic::SendAlgorithmInterface"* }
%"class.quic::SendAlgorithmInterface" = type { i32 (...)** }
%"class.quic::LossDetectionInterface" = type { i32 (...)** }
%"class.quic::UberLossAlgorithm" = type <{ %"class.quic::LossDetectionInterface", [3 x %"class.quic::GeneralLossAlgorithm"], %"class.std::__1::unique_ptr.127", %"struct.quic::LossDetectionParameters", i8, i8, i8, i8, i8, [3 x i8] }>
%"class.quic::GeneralLossAlgorithm" = type <{ %"class.quic::LossDetectionInterface", %"class.quic::LossDetectionInterface"*, %"class.quic::QuicTime", i32, [4 x i8], i64, i8, i8, i8, [5 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.quic::LossDetectionTunerInterface"* }
%"class.quic::LossDetectionTunerInterface" = type { i32 (...)** }
%"struct.quic::LossDetectionParameters" = type { %"class.absl::optional.133", %"class.absl::optional.138" }
%"class.absl::optional.133" = type { %"class.absl::optional_internal::optional_data.134" }
%"class.absl::optional_internal::optional_data.134" = type { %"class.absl::optional_internal::optional_data_base.135" }
%"class.absl::optional_internal::optional_data_base.135" = type { %"class.absl::optional_internal::optional_data_dtor_base.136" }
%"class.absl::optional_internal::optional_data_dtor_base.136" = type { i8, %union.anon.137 }
%union.anon.137 = type { i32 }
%"class.absl::optional.138" = type { %"class.absl::optional_internal::optional_data.139" }
%"class.absl::optional_internal::optional_data.139" = type { %"class.absl::optional_internal::optional_data_base.140" }
%"class.absl::optional_internal::optional_data_base.140" = type { %"class.absl::optional_internal::optional_data_dtor_base.141" }
%"class.absl::optional_internal::optional_data_dtor_base.141" = type { i8, %union.anon.142 }
%union.anon.142 = type { i64 }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { %"struct.quic::AckedPacket"*, %"struct.quic::AckedPacket"*, %"class.std::__1::__compressed_pair.145" }
%"struct.quic::AckedPacket" = type { %"class.quic::QuicPacketNumber", i16, %"class.quic::QuicTime" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.quic::AckedPacket"* }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { %"struct.quic::LostPacket"*, %"struct.quic::LostPacket"*, %"class.std::__1::__compressed_pair.152" }
%"struct.quic::LostPacket" = type <{ %"class.quic::QuicPacketNumber", i16, [6 x i8] }>
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.quic::LostPacket"* }
%"class.quic::PacingSender" = type <{ %"class.quic::SendAlgorithmInterface"*, %"class.quic::QuicBandwidth", i32, [4 x i8], %"class.quic::QuicTime", i32, i32, %"class.quic::QuicTime::Delta", i8, [7 x i8] }>
%"class.quic::QuicSustainedBandwidthRecorder" = type { i8, i8, i8, %"class.quic::QuicBandwidth", %"class.quic::QuicBandwidth", i64, %"class.quic::QuicTime" }
%"class.quiche::QuicheCircularDeque.157" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::pair<quic::QuicTime::Delta, unsigned long>, 3, std::__1::allocator<std::__1::pair<quic::QuicTime::Delta, unsigned long> > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::pair<quic::QuicTime::Delta, unsigned long>, 3, std::__1::allocator<std::__1::pair<quic::QuicTime::Delta, unsigned long> > >::AllocatorAndData" = type { %"struct.std::__1::pair.160"*, i64 }
%"struct.std::__1::pair.160" = type opaque
%"class.std::__1::reverse_iterator" = type { %"struct.absl::container_internal::btree_iterator", %"struct.absl::container_internal::btree_iterator" }
%"struct.absl::container_internal::btree_iterator" = type <{ %"class.absl::container_internal::btree_node"*, i32, [4 x i8] }>
%"class.quic::QuicSocketAddress" = type <{ %"class.quic::QuicIpAddress", i16, [2 x i8] }>
%"class.quic::QuicIpAddress" = type { %union.anon.33, i32 }
%union.anon.33 = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.34 }
%union.anon.34 = type { [4 x i32] }
%"struct.std::__1::array.35" = type { [16 x i8] }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.quic::QuicPeerIssuedConnectionIdManager"* }
%"class.quic::QuicPeerIssuedConnectionIdManager" = type { i64, %"class.quic::QuicClock"*, %"class.std::__1::unique_ptr.164", %"class.std::__1::vector.171", %"class.std::__1::vector.171", %"class.std::__1::vector.171", %"class.quic::QuicIntervalSet.178", i64 }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"struct.quic::QuicConnectionIdData"*, %"struct.quic::QuicConnectionIdData"*, %"class.std::__1::__compressed_pair.173" }
%"struct.quic::QuicConnectionIdData" = type { %"class.quic::QuicConnectionId", i64, %"struct.std::__1::array.35" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.quic::QuicConnectionIdData"* }
%"class.quic::QuicIntervalSet.178" = type { %"class.absl::btree_set.179" }
%"class.absl::btree_set.179" = type { %"class.absl::container_internal::btree_set_container.180" }
%"class.absl::container_internal::btree_set_container.180" = type { %"class.absl::container_internal::btree_container.181" }
%"class.absl::container_internal::btree_container.181" = type { %"class.absl::container_internal::btree.182" }
%"class.absl::container_internal::btree.182" = type { %"class.absl::container_internal::CompressedTuple.183", %"class.absl::container_internal::btree_node.190"*, i64 }
%"class.absl::container_internal::CompressedTuple.183" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.184" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.184" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.189" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.189" = type { %"class.absl::container_internal::btree_node.190"* }
%"class.absl::container_internal::btree_node.190" = type { i8 }
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.quic::QuicSelfIssuedConnectionIdManager"* }
%"class.quic::QuicSelfIssuedConnectionIdManager" = type { i32 (...)**, i64, %"class.quic::QuicClock"*, %"class.quic::QuicConnectionIdManagerVisitorInterface"*, %"class.std::__1::vector.198", %"class.std::__1::vector.206", %"class.std::__1::unique_ptr.164", %"class.quic::QuicConnectionId", i64, i64 }
%"class.std::__1::vector.198" = type { %"class.std::__1::__vector_base.199" }
%"class.std::__1::__vector_base.199" = type { %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"class.std::__1::__compressed_pair.201" }
%"struct.std::__1::pair.200" = type opaque
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.std::__1::pair.200"* }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { %"struct.std::__1::pair.208"*, %"struct.std::__1::pair.208"*, %"class.std::__1::__compressed_pair.209" }
%"struct.std::__1::pair.208" = type opaque
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.std::__1::pair.208"* }
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.std::__1::array.111"* }
%"struct.std::__1::array.111" = type { [8 x i8] }
%"class.quiche::QuicheCircularDeque.223" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::array<unsigned char, 8>, 3, std::__1::allocator<std::__1::array<unsigned char, 8> > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::array<unsigned char, 8>, 3, std::__1::allocator<std::__1::array<unsigned char, 8> > >::AllocatorAndData" = type { %"struct.std::__1::array.111"*, i64 }
%"class.quiche::QuicheCircularDeque.226" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicConnection::PendingPathChallenge, 3, std::__1::allocator<quic::QuicConnection::PendingPathChallenge> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicConnection::PendingPathChallenge, 3, std::__1::allocator<quic::QuicConnection::PendingPathChallenge> >::AllocatorAndData" = type { %"struct.quic::QuicConnection::PendingPathChallenge"*, i64 }
%"struct.quic::QuicConnection::PendingPathChallenge" = type { %"struct.std::__1::array.111", %"class.quic::QuicSocketAddress" }
%"class.std::__1::vector.229" = type { %"class.std::__1::__vector_base.230" }
%"class.std::__1::__vector_base.230" = type { %"class.quic::QuicConnectionId"*, %"class.quic::QuicConnectionId"*, %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.quic::QuicConnectionId"* }
%"class.quic::QuicConnectionId" = type { %union.anon.13 }
%union.anon.13 = type { %struct.anon.15 }
%struct.anon.15 = type { i8, i8* }
%"class.absl::optional.236" = type { %"class.absl::optional_internal::optional_data.237" }
%"class.absl::optional_internal::optional_data.237" = type { %"class.absl::optional_internal::optional_data_base.238" }
%"class.absl::optional_internal::optional_data_base.238" = type { %"class.absl::optional_internal::optional_data_dtor_base.239" }
%"class.absl::optional_internal::optional_data_dtor_base.239" = type { i8, %union.anon.240 }
%union.anon.240 = type { %"class.quic::QuicConnectionId" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.241" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.quic::QuicCoalescedPacket" = type { %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", i16, i16, [4 x %"class.std::__1::basic_string"], [4 x i8], %"class.std::__1::unique_ptr.245" }
%"class.std::__1::unique_ptr.245" = type { %"class.std::__1::__compressed_pair.246" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"struct.quic::SerializedPacket"* }
%"class.quic::QuicConnectionMtuDiscoverer" = type { i16, i16, i16, i16, i64, %"class.quic::QuicPacketNumber" }
%"class.quic::QuicNetworkBlackholeDetector" = type { %"class.quic::QuicNetworkBlackholeDetector::Delegate"*, %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicArenaScopedPtr" }
%"class.quic::QuicIdleNetworkDetector" = type <{ %"class.quic::QuicIdleNetworkDetector::Delegate"*, %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", %"class.quic::QuicArenaScopedPtr", i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.quic::QuicPathValidator" = type { %"class.std::__1::vector.251", %"class.quic::QuicPathValidator::SendDelegate"*, %"class.quic::QuicRandom"*, %"class.std::__1::unique_ptr.255", %"class.std::__1::unique_ptr.261", %"class.quic::QuicArenaScopedPtr", i64 }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"struct.std::__1::array.111"*, %"struct.std::__1::array.111"*, %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"class.std::__1::unique_ptr.255" = type { %"class.std::__1::__compressed_pair.256" }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"class.quic::QuicPathValidationContext"* }
%"class.quic::QuicPathValidationContext" = type { i32 (...)**, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress" }
%"class.std::__1::unique_ptr.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.quic::QuicPathValidator::ResultDelegate"* }
%"class.quic::QuicPathValidator::ResultDelegate" = type { i32 (...)** }
%"struct.quic::QuicConnection::PathState" = type { %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.std::__1::array.35", i8, i8, i64, i64, %"class.std::__1::unique_ptr.36", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.42 }
%union.anon.42 = type { %"class.quic::RttStats" }
%"class.quic::QuicSession::Visitor" = type { i32 (...)** }
%"class.quic::QuicWriteBlockedList" = type { %"class.http2::PriorityWriteScheduler", [8 x i32], [8 x i64], i8, %"class.quic::QuicWriteBlockedList::StaticStreamCollection" }
%"class.http2::PriorityWriteScheduler" = type <{ %"class.http2::WriteScheduler", i64, [8 x %"struct.http2::PriorityWriteScheduler<unsigned int>::PriorityInfo"], %"class.std::__1::unordered_map", i32, [4 x i8] }>
%"class.http2::WriteScheduler" = type { i32 (...)** }
%"struct.http2::PriorityWriteScheduler<unsigned int>::PriorityInfo" = type { %"class.std::__1::deque.267", i64 }
%"class.std::__1::deque.267" = type { %"class.std::__1::__deque_base.268" }
%"class.std::__1::__deque_base.268" = type { %"struct.std::__1::__split_buffer.269", i64, %"class.std::__1::__compressed_pair.275" }
%"struct.std::__1::__split_buffer.269" = type { %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"class.std::__1::__compressed_pair.270" }
%"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"*** }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.279", %"class.std::__1::__compressed_pair.287", %"class.std::__1::__compressed_pair.292", %"class.std::__1::__compressed_pair.295", [4 x i8] }>
%"class.std::__1::unique_ptr.279" = type { %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.281", %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.281" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { float }
%"class.quic::QuicWriteBlockedList::StaticStreamCollection" = type { i64, %"class.std::__1::vector.298" }
%"class.std::__1::vector.298" = type { %"class.std::__1::__vector_base.299" }
%"class.std::__1::__vector_base.299" = type { %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"*, %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"*, %"class.std::__1::__compressed_pair.300" }
%"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair" = type { i32, i8 }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"* }
%"class.std::__1::vector.305" = type { %"class.std::__1::__vector_base.306" }
%"class.std::__1::__vector_base.306" = type { %"class.std::__1::unique_ptr.307"*, %"class.std::__1::unique_ptr.307"*, %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"class.quic::QuicStream"* }
%"class.quic::QuicStream" = type <{ %"class.quic::QuicStreamSequencer::StreamInterface", %"class.quic::QuicStreamSequencer", i32, [4 x i8], %"class.quic::QuicSession"*, %"class.quic::StreamDelegateInterface"*, %"class.spdy::StreamPrecedence", i64, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.absl::optional.317", %"class.quic::QuicFlowController"*, i8, [7 x i8], i64, i8, [7 x i8], %"class.quic::QuicStreamSendBuffer", i64, i8, [7 x i8], %"class.quic::QuicTime", i8, [3 x i8], i32, %"class.quic::QuicTime", i8, [7 x i8] }>
%"class.quic::QuicStreamSequencer::StreamInterface" = type { i32 (...)** }
%"class.quic::QuicStreamSequencer" = type <{ i32 (...)**, %"class.quic::QuicStreamSequencer::StreamInterface"*, %"class.quic::QuicStreamSequencerBuffer", i64, i64, i8, [3 x i8], i32, i32, i8, i8, [2 x i8] }>
%"class.quic::QuicStreamSequencerBuffer" = type { i64, i64, i64, i64, i8, %"class.std::__1::unique_ptr.310", i64, %"class.quic::QuicIntervalSet.178" }
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** }
%"struct.quic::QuicStreamSequencerBuffer::BufferBlock" = type { [8192 x i8] }
%"class.spdy::StreamPrecedence" = type { i8, %union.anon.316 }
%union.anon.316 = type { %"struct.spdy::StreamPrecedence<unsigned int>::Http2StreamDependency" }
%"struct.spdy::StreamPrecedence<unsigned int>::Http2StreamDependency" = type { i32, i32, i8 }
%"class.absl::optional.317" = type { %"class.absl::optional_internal::optional_data.318" }
%"class.absl::optional_internal::optional_data.318" = type { %"class.absl::optional_internal::optional_data_base.319" }
%"class.absl::optional_internal::optional_data_base.319" = type { %"class.absl::optional_internal::optional_data_dtor_base.320" }
%"class.absl::optional_internal::optional_data_dtor_base.320" = type { i8, %union.anon.321 }
%union.anon.321 = type { %"class.quic::QuicFlowController" }
%"class.quic::QuicStreamSendBuffer" = type <{ i64, %"class.quic::QuicIntervalDeque", i64, %"class.quic::QuicBufferAllocator"*, i64, i64, %"class.quic::QuicIntervalSet.178", %"class.quic::QuicIntervalSet.178", i32, [4 x i8] }>
%"class.quic::QuicIntervalDeque" = type { %"class.quiche::QuicheCircularDeque.324", %"class.absl::optional.138" }
%"class.quiche::QuicheCircularDeque.324" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::BufferedSlice, 3, std::__1::allocator<quic::BufferedSlice> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::BufferedSlice, 3, std::__1::allocator<quic::BufferedSlice> >::AllocatorAndData" = type { %"struct.quic::BufferedSlice"*, i64 }
%"struct.quic::BufferedSlice" = type { %"class.quic::QuicMemSlice", i64 }
%"class.quic::QuicBufferAllocator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"class.std::__1::unique_ptr.307"* }
%"class.quic::QuicConfig" = type { i8, %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i64, %"class.quic::QuicFixedTagVector", %"class.quic::QuicFixedTagVector", %"class.quic::QuicTime::Delta", %"class.absl::optional.342", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint32", i8, i8, [6 x i8], %"class.quic::QuicFixedSocketAddress", %"class.quic::QuicFixedSocketAddress", %"class.absl::optional.347", %"class.quic::QuicFixedStatelessResetToken", %"class.std::__1::vector.335", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.absl::optional.236", %"class.absl::optional.236", %"class.absl::optional.236", %"class.absl::optional.236", %"class.absl::optional.236", %"class.absl::optional.236", %"class.absl::flat_hash_map.353", %"class.absl::flat_hash_map.353" }
%"class.quic::QuicFixedTagVector" = type { %"class.quic::QuicConfigValue.base", i8, i8, %"class.std::__1::vector.335", %"class.std::__1::vector.335" }
%"class.quic::QuicConfigValue.base" = type <{ i32 (...)**, i32, i8 }>
%"class.absl::optional.342" = type { %"class.absl::optional_internal::optional_data.343" }
%"class.absl::optional_internal::optional_data.343" = type { %"class.absl::optional_internal::optional_data_base.344" }
%"class.absl::optional_internal::optional_data_base.344" = type { %"class.absl::optional_internal::optional_data_dtor_base.345" }
%"class.absl::optional_internal::optional_data_dtor_base.345" = type { i8, %union.anon.346 }
%union.anon.346 = type { %"class.quic::QuicTime::Delta" }
%"class.quic::QuicFixedSocketAddress" = type { %"class.quic::QuicConfigValue.base", i8, i8, i8, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress" }
%"class.absl::optional.347" = type { %"class.absl::optional_internal::optional_data.348" }
%"class.absl::optional_internal::optional_data.348" = type { %"class.absl::optional_internal::optional_data_base.349" }
%"class.absl::optional_internal::optional_data_base.349" = type { %"class.absl::optional_internal::optional_data_dtor_base.350" }
%"class.absl::optional_internal::optional_data_dtor_base.350" = type { i8, %union.anon.351 }
%union.anon.351 = type { %"struct.std::__1::pair.352" }
%"struct.std::__1::pair.352" = type { %"class.quic::QuicConnectionId", %"struct.std::__1::array.35" }
%"class.quic::QuicFixedStatelessResetToken" = type { %"class.quic::QuicConfigValue.base", i8, i8, %"struct.std::__1::array.35", %"struct.std::__1::array.35", i8 }
%"class.std::__1::vector.335" = type { %"class.std::__1::__vector_base.336" }
%"class.std::__1::__vector_base.336" = type { i32*, i32*, %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { i32* }
%"class.quic::QuicFixedUint32" = type { %"class.quic::QuicConfigValue.base", i8, i8, i32, i32 }
%"class.quic::QuicFixedUint62" = type { %"class.quic::QuicConfigValue.base", i8, i8, i64, i64 }
%"class.absl::flat_hash_map.353" = type { %"class.absl::container_internal::raw_hash_map.354" }
%"class.absl::container_internal::raw_hash_map.354" = type { %"class.absl::container_internal::raw_hash_set.355" }
%"class.absl::container_internal::raw_hash_set.355" = type { i8*, %"union.absl::container_internal::map_slot_type.356"*, i64, i64, %"class.absl::container_internal::CompressedTuple.357" }
%"union.absl::container_internal::map_slot_type.356" = type opaque
%"class.absl::container_internal::CompressedTuple.357" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.358" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.358" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.368" = type { %"class.absl::container_internal::raw_hash_map.369" }
%"class.absl::container_internal::raw_hash_map.369" = type { %"class.absl::container_internal::raw_hash_set.370" }
%"class.absl::container_internal::raw_hash_set.370" = type { i8*, %"union.absl::container_internal::map_slot_type.371"*, i64, i64, %"class.absl::container_internal::CompressedTuple.372" }
%"union.absl::container_internal::map_slot_type.371" = type opaque
%"class.absl::container_internal::CompressedTuple.372" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.373" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.373" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.377" = type { %"class.absl::container_internal::raw_hash_map.378" }
%"class.absl::container_internal::raw_hash_map.378" = type { %"class.absl::container_internal::raw_hash_set.379" }
%"class.absl::container_internal::raw_hash_set.379" = type { i8*, %"union.absl::container_internal::map_slot_type.380"*, i64, i64, %"class.absl::container_internal::CompressedTuple.381" }
%"union.absl::container_internal::map_slot_type.380" = type opaque
%"class.absl::container_internal::CompressedTuple.381" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.382" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.382" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.quic::LegacyQuicStreamIdManager" = type { i8, i32, i64, i64, i32, %"class.absl::flat_hash_set", i32, i64, i64 }
%"class.absl::flat_hash_set" = type { %"class.absl::container_internal::raw_hash_set.386" }
%"class.absl::container_internal::raw_hash_set.386" = type { i8*, i32*, i64, i64, %"class.absl::container_internal::CompressedTuple.387" }
%"class.absl::container_internal::CompressedTuple.387" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.388" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.388" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.quic::UberQuicStreamIdManager" = type { %"struct.quic::ParsedQuicVersion", %"class.quic::QuicStreamIdManager", %"class.quic::QuicStreamIdManager" }
%"class.quic::QuicStreamIdManager" = type <{ %"class.quic::QuicStreamIdManager::DelegateInterface"*, i8, i8, [2 x i8], %"struct.quic::ParsedQuicVersion", i32, i32, i32, i32, i32, i32, i32, %"class.absl::flat_hash_set", i32, [4 x i8] }>
%"struct.quic::QuicConnectionCloseFrame" = type { i32, i64, i32, %"class.std::__1::basic_string", i64 }
%"class.quic::QuicFlowController" = type { %"class.quic::QuicFlowControllerInterface", %"class.quic::QuicSession"*, %"class.quic::QuicConnection"*, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i8, %"class.quic::QuicFlowControllerInterface"*, i64, %"class.quic::QuicTime" }
%"class.quic::QuicFlowControllerInterface" = type { i32 (...)** }
%"class.quic::QuicControlFrameManager" = type { %"class.quiche::QuicheCircularDeque.390", i32, i32, i32, %"class.quiche::QuicheLinkedHashMap", %"class.quic::QuicControlFrameManager::DelegateInterface"*, %"class.absl::flat_hash_map.406" }
%"class.quiche::QuicheCircularDeque.390" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicFrame, 3, std::__1::allocator<quic::QuicFrame> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicFrame, 3, std::__1::allocator<quic::QuicFrame> >::AllocatorAndData" = type { %"struct.quic::QuicFrame"*, i64 }
%"class.absl::flat_hash_map.406" = type { %"class.absl::container_internal::raw_hash_map.407" }
%"class.absl::container_internal::raw_hash_map.407" = type { %"class.absl::container_internal::raw_hash_set.408" }
%"class.absl::container_internal::raw_hash_set.408" = type { i8*, %"union.absl::container_internal::map_slot_type.409"*, i64, i64, %"class.absl::container_internal::CompressedTuple.410" }
%"union.absl::container_internal::map_slot_type.409" = type opaque
%"class.absl::container_internal::CompressedTuple.410" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.411" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.411" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.quiche::QuicheLinkedHashMap" = type { %"class.absl::node_hash_map", %"class.std::__1::list.399" }
%"class.absl::node_hash_map" = type { %"class.absl::container_internal::raw_hash_map.391" }
%"class.absl::container_internal::raw_hash_map.391" = type { %"class.absl::container_internal::raw_hash_set.392" }
%"class.absl::container_internal::raw_hash_set.392" = type { i8*, %"struct.std::__1::pair.393"**, i64, i64, %"class.absl::container_internal::CompressedTuple.394" }
%"struct.std::__1::pair.393" = type opaque
%"class.absl::container_internal::CompressedTuple.394" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.395" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.395" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::list.399" = type { %"class.std::__1::__list_imp.400" }
%"class.std::__1::__list_imp.400" = type { %"struct.std::__1::__list_node_base.401", %"class.std::__1::__compressed_pair.402" }
%"struct.std::__1::__list_node_base.401" = type { %"struct.std::__1::__list_node_base.401"*, %"struct.std::__1::__list_node_base.401"* }
%"class.std::__1::__compressed_pair.402" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.quic::QuicAlarm"* }
%"class.quic::QuicAlarm" = type { i32 (...)**, %"class.quic::QuicArenaScopedPtr.167", %"class.quic::QuicTime" }
%"class.quic::QuicArenaScopedPtr.167" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.quic::ParsedQuicVersion"* }
%"class.absl::optional.415" = type { %"class.absl::optional_internal::optional_data.416" }
%"class.absl::optional_internal::optional_data.416" = type { %"class.absl::optional_internal::optional_data_base.417" }
%"class.absl::optional_internal::optional_data_base.417" = type { %"class.absl::optional_internal::optional_data_dtor_base.418" }
%"class.absl::optional_internal::optional_data_dtor_base.418" = type { i8, %union.anon.419 }
%union.anon.419 = type { %"class.std::__1::basic_string" }
%"class.quic::QuicMemSliceSpan" = type { %"class.quic::QuicMemSliceSpanImpl" }
%"class.quic::QuicMemSliceSpanImpl" = type { %class.scoped_refptr*, i64*, i64 }

$_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE12emplace_backIJS3_EEERS3_DpOT_ = comdat any

$_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE8RelocateEm = comdat any

@_ZN4quic17QuicDatagramQueueC1EPNS_11QuicSessionE = hidden unnamed_addr alias void (%"class.quic::QuicDatagramQueue"*, %"class.quic::QuicSession"*), void (%"class.quic::QuicDatagramQueue"*, %"class.quic::QuicSession"*)* @_ZN4quic17QuicDatagramQueueC2EPNS_11QuicSessionE
@_ZN4quic17QuicDatagramQueueC1EPNS_11QuicSessionENSt3__110unique_ptrINS0_8ObserverENS3_14default_deleteIS5_EEEE = hidden unnamed_addr alias void (%"class.quic::QuicDatagramQueue"*, %"class.quic::QuicSession"*, %"class.quic::QuicDatagramQueue::Observer"*), void (%"class.quic::QuicDatagramQueue"*, %"class.quic::QuicSession"*, %"class.quic::QuicDatagramQueue::Observer"*)* @_ZN4quic17QuicDatagramQueueC2EPNS_11QuicSessionENSt3__110unique_ptrINS0_8ObserverENS3_14default_deleteIS5_EEEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicDatagramQueueC2EPNS_11QuicSessionE(%"class.quic::QuicDatagramQueue"* nocapture, %"class.quic::QuicSession"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  store %"class.quic::QuicSession"* %1, %"class.quic::QuicSession"** %3, align 8
  %4 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.quic::QuicSession", %"class.quic::QuicSession"* %1, i64 0, i32 8
  %6 = load %"class.quic::QuicConnection"*, %"class.quic::QuicConnection"** %5, align 8
  %7 = getelementptr inbounds %"class.quic::QuicConnection", %"class.quic::QuicConnection"* %6, i64 0, i32 21
  %8 = bitcast %"class.quic::QuicClock"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.quic::QuicClock"** %4 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 2, i32 0
  %12 = bitcast i64* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicDatagramQueueC2EPNS_11QuicSessionENSt3__110unique_ptrINS0_8ObserverENS3_14default_deleteIS5_EEEE(%"class.quic::QuicDatagramQueue"* nocapture, %"class.quic::QuicSession"*, %"class.quic::QuicDatagramQueue::Observer"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.quic::QuicDatagramQueue::Observer"* %2 to i64
  %5 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  store %"class.quic::QuicSession"* %1, %"class.quic::QuicSession"** %5, align 8
  %6 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.quic::QuicSession", %"class.quic::QuicSession"* %1, i64 0, i32 8
  %8 = load %"class.quic::QuicConnection"*, %"class.quic::QuicConnection"** %7, align 8
  %9 = getelementptr inbounds %"class.quic::QuicConnection", %"class.quic::QuicConnection"* %8, i64 0, i32 21
  %10 = bitcast %"class.quic::QuicClock"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.quic::QuicClock"** %6 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 2, i32 0
  %14 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 4
  %15 = bitcast %"class.std::__1::unique_ptr"* %14 to i64*
  %16 = bitcast i64* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 40, i1 false)
  store i64 %4, i64* %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4quic17QuicDatagramQueue19SendOrQueueDatagramENS_12QuicMemSliceE(%"class.quic::QuicDatagramQueue"*, %"class.quic::QuicMemSlice"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.quic::QuicMemSliceSpan", align 8
  %4 = alloca %"class.quic::QuicMemSliceSpan", align 8
  %5 = alloca %"struct.quic::QuicDatagramQueue::Datagram", align 8
  %6 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %6, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %12, label %36

12:                                               ; preds = %2
  %13 = bitcast %"class.quic::QuicMemSliceSpan"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #7
  %14 = getelementptr inbounds %"class.quic::QuicMemSliceSpan", %"class.quic::QuicMemSliceSpan"* %3, i64 0, i32 0
  %15 = getelementptr inbounds %"class.quic::QuicMemSlice", %"class.quic::QuicMemSlice"* %1, i64 0, i32 0
  %16 = bitcast %"class.quic::QuicMemSliceSpan"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false)
  call void @_ZN4quic20QuicMemSliceSpanImplC1EPNS_16QuicMemSliceImplE(%"class.quic::QuicMemSliceSpanImpl"* nonnull %14, %"class.quic::QuicMemSliceImpl"* %15) #7
  %17 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  %18 = load %"class.quic::QuicSession"*, %"class.quic::QuicSession"** %17, align 8
  %19 = getelementptr inbounds %"class.quic::QuicMemSliceSpan", %"class.quic::QuicMemSliceSpan"* %4, i64 0, i32 0
  call void @_ZN4quic20QuicMemSliceSpanImplC1ERKS0_(%"class.quic::QuicMemSliceSpanImpl"* nonnull %19, %"class.quic::QuicMemSliceSpanImpl"* nonnull dereferenceable(24) %14) #7
  %20 = call i64 @_ZN4quic11QuicSession11SendMessageENS_16QuicMemSliceSpanE(%"class.quic::QuicSession"* %18, %"class.quic::QuicMemSliceSpan"* nonnull %4) #7
  %21 = trunc i64 %20 to i32
  call void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"* nonnull %19) #7
  %22 = icmp eq i32 %21, 3
  br i1 %22, label %35, label %23

23:                                               ; preds = %12
  %24 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %25 = load %"class.quic::QuicDatagramQueue::Observer"*, %"class.quic::QuicDatagramQueue::Observer"** %24, align 8
  %26 = icmp eq %"class.quic::QuicDatagramQueue::Observer"* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %23
  %28 = shl i64 %20, 32
  %29 = or i64 %28, 1
  %30 = bitcast %"class.quic::QuicDatagramQueue::Observer"* %25 to void (%"class.quic::QuicDatagramQueue::Observer"*, i64)***
  %31 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)**, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %31, i64 2
  %33 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %32, align 8
  call void %33(%"class.quic::QuicDatagramQueue::Observer"* nonnull %25, i64 %29) #7
  br label %34

34:                                               ; preds = %23, %27
  call void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"* nonnull %14) #7
  br label %68

35:                                               ; preds = %12
  call void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  br label %36

36:                                               ; preds = %35, %2
  %37 = bitcast %"struct.quic::QuicDatagramQueue::Datagram"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #7
  %38 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %5, i64 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.quic::QuicMemSlice", %"class.quic::QuicMemSlice"* %1, i64 0, i32 0
  call void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"* nonnull %38, %"class.quic::QuicMemSliceImpl"* dereferenceable(16) %39) #7
  %40 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 1
  %41 = load %"class.quic::QuicClock"*, %"class.quic::QuicClock"** %40, align 8
  %42 = bitcast %"class.quic::QuicClock"* %41 to i64 (%"class.quic::QuicClock"*)***
  %43 = load i64 (%"class.quic::QuicClock"*)**, i64 (%"class.quic::QuicClock"*)*** %42, align 8
  %44 = getelementptr inbounds i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %43, i64 2
  %45 = load i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %44, align 8
  %46 = call i64 %45(%"class.quic::QuicClock"* %41) #7
  %47 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 2, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %36
  %51 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  %52 = load %"class.quic::QuicSession"*, %"class.quic::QuicSession"** %51, align 8
  %53 = getelementptr inbounds %"class.quic::QuicSession", %"class.quic::QuicSession"* %52, i64 0, i32 8
  %54 = load %"class.quic::QuicConnection"*, %"class.quic::QuicConnection"** %53, align 8
  %55 = getelementptr inbounds %"class.quic::QuicConnection", %"class.quic::QuicConnection"* %54, i64 0, i32 80, i32 8, i32 1, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = sitofp i64 %56 to double
  %58 = fmul double %57, 1.250000e+00
  %59 = call i64 @llround(double %58) #7
  %60 = call i64 @llround(double 4.000000e+03) #7
  %61 = icmp slt i64 %59, %60
  %62 = select i1 %61, i64 %60, i64 %59
  br label %63

63:                                               ; preds = %36, %50
  %64 = phi i64 [ %62, %50 ], [ %48, %36 ]
  %65 = add nsw i64 %64, %46
  %66 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %5, i64 0, i32 1, i32 0
  store i64 %65, i64* %66, align 8
  %67 = call dereferenceable(24) %"struct.quic::QuicDatagramQueue::Datagram"* @_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE12emplace_backIJS3_EEERS3_DpOT_(%"class.quiche::QuicheCircularDeque"* %6, %"struct.quic::QuicDatagramQueue::Datagram"* nonnull dereferenceable(24) %5)
  call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* nonnull %38) #7
  br label %68

68:                                               ; preds = %34, %63
  %69 = phi i8* [ %13, %34 ], [ %37, %63 ]
  %70 = phi i32 [ %21, %34 ], [ 3, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #7
  ret i32 %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN4quic11QuicSession11SendMessageENS_16QuicMemSliceSpanE(%"class.quic::QuicSession"*, %"class.quic::QuicMemSliceSpan"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"struct.quic::QuicDatagramQueue::Datagram"* @_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE12emplace_backIJS3_EEERS3_DpOT_(%"class.quiche::QuicheCircularDeque"*, %"struct.quic::QuicDatagramQueue::Datagram"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %4
  %8 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = select i1 %7, i64 %9, i64 0
  %11 = sub i64 1, %4
  %12 = add i64 %11, %6
  %13 = add i64 %12, %10
  %14 = icmp eq i64 %9, 0
  %15 = add i64 %9, -1
  %16 = select i1 %14, i64 0, i64 %15
  %17 = icmp ult i64 %16, %13
  br i1 %17, label %18, label %26

18:                                               ; preds = %2
  %19 = lshr i64 %16, 2
  %20 = icmp ugt i64 %19, 3
  %21 = select i1 %20, i64 %19, i64 3
  %22 = add i64 %21, %16
  %23 = icmp ult i64 %13, %22
  %24 = select i1 %23, i64 %22, i64 %13
  tail call void @_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque"* %0, i64 %24) #7
  %25 = load i64, i64* %5, align 8
  br label %26

26:                                               ; preds = %2, %18
  %27 = phi i64 [ %6, %2 ], [ %25, %18 ]
  %28 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  %29 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %28, align 8
  %30 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %29, i64 %27, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"* %30, %"class.quic::QuicMemSliceImpl"* dereferenceable(16) %31) #7
  %32 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %1, i64 0, i32 1, i32 0
  %33 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %29, i64 %27, i32 1, i32 0
  %34 = load i64, i64* %32, align 8
  store i64 %34, i64* %33, align 8
  %35 = load i64, i64* %5, align 8
  %36 = load i64, i64* %8, align 8
  %37 = add i64 %36, -1
  %38 = icmp eq i64 %37, %35
  %39 = add i64 %35, 1
  %40 = select i1 %38, i64 0, i64 %39
  store i64 %40, i64* %5, align 8
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i64 %36, i64 %40
  %43 = add i64 %42, -1
  %44 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %28, align 8
  %45 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %44, i64 %43
  ret %"struct.quic::QuicDatagramQueue::Datagram"* %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic17QuicDatagramQueue17GetMaxTimeInQueueEv(%"class.quic::QuicDatagramQueue"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 2, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  %7 = load %"class.quic::QuicSession"*, %"class.quic::QuicSession"** %6, align 8
  %8 = getelementptr inbounds %"class.quic::QuicSession", %"class.quic::QuicSession"* %7, i64 0, i32 8
  %9 = load %"class.quic::QuicConnection"*, %"class.quic::QuicConnection"** %8, align 8
  %10 = getelementptr inbounds %"class.quic::QuicConnection", %"class.quic::QuicConnection"* %9, i64 0, i32 80, i32 8, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = sitofp i64 %11 to double
  %13 = fmul double %12, 1.250000e+00
  %14 = tail call i64 @llround(double %13) #7
  %15 = tail call i64 @llround(double 4.000000e+03) #7
  %16 = icmp slt i64 %14, %15
  %17 = select i1 %16, i64 %15, i64 %14
  br label %18

18:                                               ; preds = %1, %5
  %19 = phi i64 [ %17, %5 ], [ %3, %1 ]
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic17QuicDatagramQueue22TrySendingNextDatagramEv(%"class.quic::QuicDatagramQueue"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.quic::QuicMemSliceSpan", align 8
  %3 = alloca %"class.quic::QuicMemSliceSpan", align 8
  %4 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 1
  %5 = load %"class.quic::QuicClock"*, %"class.quic::QuicClock"** %4, align 8
  %6 = bitcast %"class.quic::QuicClock"* %5 to i64 (%"class.quic::QuicClock"*)***
  %7 = load i64 (%"class.quic::QuicClock"*)**, i64 (%"class.quic::QuicClock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %7, i64 2
  %9 = load i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.quic::QuicClock"* %5) #7
  %11 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 2, i32 0
  %12 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %13, %15
  br i1 %16, label %90, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 2, i32 1
  %19 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %20 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %11, align 8
  %21 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %20, i64 %13, i32 1, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp slt i64 %10, %22
  br i1 %23, label %51, label %29

24:                                               ; preds = %47
  %25 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %11, align 8
  %26 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %25, i64 %48, i32 1, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %10, %27
  br i1 %28, label %51, label %29

29:                                               ; preds = %17, %24
  %30 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %25, %24 ], [ %20, %17 ]
  %31 = phi i64 [ %48, %24 ], [ %13, %17 ]
  %32 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %30, i64 %31, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %32) #7
  %33 = load i64, i64* %12, align 8
  %34 = load i64, i64* %18, align 8
  %35 = add i64 %34, -1
  %36 = icmp eq i64 %35, %33
  %37 = add i64 %33, 1
  %38 = select i1 %36, i64 0, i64 %37
  store i64 %38, i64* %12, align 8
  %39 = load %"class.quic::QuicDatagramQueue::Observer"*, %"class.quic::QuicDatagramQueue::Observer"** %19, align 8
  %40 = icmp eq %"class.quic::QuicDatagramQueue::Observer"* %39, null
  br i1 %40, label %47, label %41

41:                                               ; preds = %29
  %42 = bitcast %"class.quic::QuicDatagramQueue::Observer"* %39 to void (%"class.quic::QuicDatagramQueue::Observer"*, i64)***
  %43 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)**, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %43, i64 2
  %45 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %44, align 8
  tail call void %45(%"class.quic::QuicDatagramQueue::Observer"* nonnull %39, i64 0) #7
  %46 = load i64, i64* %12, align 8
  br label %47

47:                                               ; preds = %41, %29
  %48 = phi i64 [ %38, %29 ], [ %46, %41 ]
  %49 = load i64, i64* %14, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %90, label %24

51:                                               ; preds = %24, %17
  %52 = phi i64 [ %15, %17 ], [ %49, %24 ]
  %53 = phi i64 [ %13, %17 ], [ %48, %24 ]
  %54 = icmp eq i64 %53, %52
  br i1 %54, label %90, label %55

55:                                               ; preds = %51
  %56 = bitcast %"class.quic::QuicMemSliceSpan"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #7
  %57 = bitcast %"class.quic::QuicMemSliceSpan"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 24, i1 false)
  %58 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %11, align 8
  %59 = getelementptr inbounds %"class.quic::QuicMemSliceSpan", %"class.quic::QuicMemSliceSpan"* %2, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %58, i64 %53, i32 0, i32 0
  call void @_ZN4quic20QuicMemSliceSpanImplC1EPNS_16QuicMemSliceImplE(%"class.quic::QuicMemSliceSpanImpl"* nonnull %59, %"class.quic::QuicMemSliceImpl"* %60) #7
  %61 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 0
  %62 = load %"class.quic::QuicSession"*, %"class.quic::QuicSession"** %61, align 8
  %63 = getelementptr inbounds %"class.quic::QuicMemSliceSpan", %"class.quic::QuicMemSliceSpan"* %3, i64 0, i32 0
  call void @_ZN4quic20QuicMemSliceSpanImplC1ERKS0_(%"class.quic::QuicMemSliceSpanImpl"* nonnull %63, %"class.quic::QuicMemSliceSpanImpl"* nonnull dereferenceable(24) %59) #7
  %64 = call i64 @_ZN4quic11QuicSession11SendMessageENS_16QuicMemSliceSpanE(%"class.quic::QuicSession"* %62, %"class.quic::QuicMemSliceSpan"* nonnull %3) #7
  %65 = trunc i64 %64 to i32
  call void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"* nonnull %63) #7
  %66 = icmp eq i32 %65, 3
  br i1 %66, label %88, label %67

67:                                               ; preds = %55
  %68 = load i64, i64* %12, align 8
  %69 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %11, align 8
  %70 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %69, i64 %68, i32 0, i32 0
  call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %70) #7
  %71 = load i64, i64* %12, align 8
  %72 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 2, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, -1
  %75 = icmp eq i64 %74, %71
  %76 = add i64 %71, 1
  %77 = select i1 %75, i64 0, i64 %76
  store i64 %77, i64* %12, align 8
  %78 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %79 = load %"class.quic::QuicDatagramQueue::Observer"*, %"class.quic::QuicDatagramQueue::Observer"** %78, align 8
  %80 = icmp eq %"class.quic::QuicDatagramQueue::Observer"* %79, null
  br i1 %80, label %88, label %81

81:                                               ; preds = %67
  %82 = shl i64 %64, 32
  %83 = or i64 %82, 1
  %84 = bitcast %"class.quic::QuicDatagramQueue::Observer"* %79 to void (%"class.quic::QuicDatagramQueue::Observer"*, i64)***
  %85 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)**, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*** %84, align 8
  %86 = getelementptr inbounds void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %85, i64 2
  %87 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %86, align 8
  call void %87(%"class.quic::QuicDatagramQueue::Observer"* nonnull %79, i64 %83) #7
  br label %88

88:                                               ; preds = %67, %55, %81
  call void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"* nonnull %59) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #7
  %89 = shl i64 %64, 32
  br label %90

90:                                               ; preds = %47, %1, %51, %88
  %91 = phi i64 [ 1, %88 ], [ 0, %51 ], [ 0, %1 ], [ 0, %47 ]
  %92 = phi i64 [ %89, %88 ], [ 0, %51 ], [ 0, %1 ], [ 0, %47 ]
  %93 = or i64 %92, %91
  ret i64 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicDatagramQueue22RemoveExpiredDatagramsEv(%"class.quic::QuicDatagramQueue"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 1
  %3 = load %"class.quic::QuicClock"*, %"class.quic::QuicClock"** %2, align 8
  %4 = bitcast %"class.quic::QuicClock"* %3 to i64 (%"class.quic::QuicClock"*)***
  %5 = load i64 (%"class.quic::QuicClock"*)**, i64 (%"class.quic::QuicClock"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %5, i64 2
  %7 = load i64 (%"class.quic::QuicClock"*)*, i64 (%"class.quic::QuicClock"*)** %6, align 8
  %8 = tail call i64 %7(%"class.quic::QuicClock"* %3) #7
  %9 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 2, i32 0
  %10 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %44, label %15

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 3, i32 2, i32 1
  %17 = getelementptr inbounds %"class.quic::QuicDatagramQueue", %"class.quic::QuicDatagramQueue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %18

18:                                               ; preds = %15, %40
  %19 = phi i64 [ %11, %15 ], [ %41, %40 ]
  %20 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %9, align 8
  %21 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %20, i64 %19, i32 1, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp slt i64 %8, %22
  br i1 %23, label %44, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %20, i64 %19, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %25) #7
  %26 = load i64, i64* %10, align 8
  %27 = load i64, i64* %16, align 8
  %28 = add i64 %27, -1
  %29 = icmp eq i64 %28, %26
  %30 = add i64 %26, 1
  %31 = select i1 %29, i64 0, i64 %30
  store i64 %31, i64* %10, align 8
  %32 = load %"class.quic::QuicDatagramQueue::Observer"*, %"class.quic::QuicDatagramQueue::Observer"** %17, align 8
  %33 = icmp eq %"class.quic::QuicDatagramQueue::Observer"* %32, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %24
  %35 = bitcast %"class.quic::QuicDatagramQueue::Observer"* %32 to void (%"class.quic::QuicDatagramQueue::Observer"*, i64)***
  %36 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)**, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %36, i64 2
  %38 = load void (%"class.quic::QuicDatagramQueue::Observer"*, i64)*, void (%"class.quic::QuicDatagramQueue::Observer"*, i64)** %37, align 8
  tail call void %38(%"class.quic::QuicDatagramQueue::Observer"* nonnull %32, i64 0) #7
  %39 = load i64, i64* %10, align 8
  br label %40

40:                                               ; preds = %24, %34
  %41 = phi i64 [ %31, %24 ], [ %39, %34 ]
  %42 = load i64, i64* %12, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %18

44:                                               ; preds = %40, %18, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic17QuicDatagramQueue13SendDatagramsEv(%"class.quic::QuicDatagramQueue"* nocapture) local_unnamed_addr #0 align 2 {
  br label %2

2:                                                ; preds = %7, %1
  %3 = phi i64 [ 0, %1 ], [ %12, %7 ]
  %4 = tail call i64 @_ZN4quic17QuicDatagramQueue22TrySendingNextDatagramEv(%"class.quic::QuicDatagramQueue"* %0)
  %5 = trunc i64 %4 to i8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = and i64 %4, -4294967296
  %9 = icmp eq i64 %8, 12884901888
  %10 = xor i1 %9, true
  %11 = zext i1 %10 to i64
  %12 = add i64 %3, %11
  br i1 %9, label %13, label %2

13:                                               ; preds = %7, %2
  %14 = phi i64 [ %12, %7 ], [ %3, %2 ]
  ret i64 %14
}

declare void @_ZN4quic20QuicMemSliceSpanImplC1EPNS_16QuicMemSliceImplE(%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceImpl"*) unnamed_addr #2

declare void @_ZN4quic20QuicMemSliceSpanImplC1ERKS0_(%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceSpanImpl"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4quic20QuicMemSliceSpanImplD1Ev(%"class.quic::QuicMemSliceSpanImpl"*) unnamed_addr #3

declare void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"*, %"class.quic::QuicMemSliceImpl"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"*) unnamed_addr #3

; Function Attrs: nounwind
declare i64 @llround(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6quiche19QuicheCircularDequeIN4quic17QuicDatagramQueue8DatagramELm3ENSt3__19allocatorIS3_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %4
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %6
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i64 [ %11, %8 ], [ %6, %2 ]
  %14 = sub i64 %13, %4
  %15 = add i64 %1, 1
  %16 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2
  %17 = icmp ugt i64 %15, 768614336404564650
  br i1 %17, label %18, label %19

18:                                               ; preds = %12
  tail call void @abort() #8
  unreachable

19:                                               ; preds = %12
  %20 = mul i64 %15, 24
  %21 = tail call i8* @_Znwm(i64 %20) #9
  %22 = bitcast i8* %21 to %"struct.quic::QuicDatagramQueue::Datagram"*
  %23 = icmp ult i64 %4, %6
  br i1 %23, label %24, label %40

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  %26 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %25, align 8
  %27 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %26, i64 %6
  %28 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %26, i64 %4
  br label %29

29:                                               ; preds = %29, %24
  %30 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %38, %29 ], [ %28, %24 ]
  %31 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %37, %29 ], [ %22, %24 ]
  %32 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %31, i64 0, i32 0, i32 0
  %33 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %30, i64 0, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"* %32, %"class.quic::QuicMemSliceImpl"* dereferenceable(16) %33) #7
  %34 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %30, i64 0, i32 1, i32 0
  %35 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %31, i64 0, i32 1, i32 0
  %36 = load i64, i64* %34, align 8
  store i64 %36, i64* %35, align 8
  tail call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %33) #7
  %37 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %31, i64 1
  %38 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %30, i64 1
  %39 = icmp eq %"struct.quic::QuicDatagramQueue::Datagram"* %38, %27
  br i1 %39, label %83, label %29

40:                                               ; preds = %19
  br i1 %7, label %41, label %83

41:                                               ; preds = %40
  %42 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %43, %4
  %45 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  %46 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %45, align 8
  %47 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %46, i64 %43
  %48 = icmp eq i64 %43, %4
  br i1 %48, label %65, label %49

49:                                               ; preds = %41
  %50 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %46, i64 %4
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %60, %51 ], [ %50, %49 ]
  %53 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %59, %51 ], [ %22, %49 ]
  %54 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %53, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %52, i64 0, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"* %54, %"class.quic::QuicMemSliceImpl"* dereferenceable(16) %55) #7
  %56 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %52, i64 0, i32 1, i32 0
  %57 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %53, i64 0, i32 1, i32 0
  %58 = load i64, i64* %56, align 8
  store i64 %58, i64* %57, align 8
  tail call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %55) #7
  %59 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %53, i64 1
  %60 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %52, i64 1
  %61 = icmp eq %"struct.quic::QuicDatagramQueue::Datagram"* %60, %47
  br i1 %61, label %62, label %51

62:                                               ; preds = %51
  %63 = load i64, i64* %5, align 8
  %64 = load %"struct.quic::QuicDatagramQueue::Datagram"*, %"struct.quic::QuicDatagramQueue::Datagram"** %45, align 8
  br label %65

65:                                               ; preds = %62, %41
  %66 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %64, %62 ], [ %46, %41 ]
  %67 = phi i64 [ %63, %62 ], [ %6, %41 ]
  %68 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %66, i64 %67
  %69 = icmp eq i64 %67, 0
  br i1 %69, label %83, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %22, i64 %44
  br label %72

72:                                               ; preds = %70, %72
  %73 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %81, %72 ], [ %66, %70 ]
  %74 = phi %"struct.quic::QuicDatagramQueue::Datagram"* [ %80, %72 ], [ %71, %70 ]
  %75 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %74, i64 0, i32 0, i32 0
  %76 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %73, i64 0, i32 0, i32 0
  tail call void @_ZN4quic16QuicMemSliceImplC1EOS0_(%"class.quic::QuicMemSliceImpl"* %75, %"class.quic::QuicMemSliceImpl"* dereferenceable(16) %76) #7
  %77 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %73, i64 0, i32 1, i32 0
  %78 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %74, i64 0, i32 1, i32 0
  %79 = load i64, i64* %77, align 8
  store i64 %79, i64* %78, align 8
  tail call void @_ZN4quic16QuicMemSliceImplD1Ev(%"class.quic::QuicMemSliceImpl"* %76) #7
  %80 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %74, i64 1
  %81 = getelementptr inbounds %"struct.quic::QuicDatagramQueue::Datagram", %"struct.quic::QuicDatagramQueue::Datagram"* %73, i64 1
  %82 = icmp eq %"struct.quic::QuicDatagramQueue::Datagram"* %81, %68
  br i1 %82, label %83, label %72

83:                                               ; preds = %72, %29, %65, %40
  %84 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = icmp eq i64 %85, 0
  %87 = bitcast %"struct.quiche::QuicheCircularDeque<quic::QuicDatagramQueue::Datagram, 3, std::__1::allocator<quic::QuicDatagramQueue::Datagram> >::AllocatorAndData"* %16 to i8**
  br i1 %86, label %90, label %88

88:                                               ; preds = %83
  %89 = load i8*, i8** %87, align 8
  tail call void @_ZdlPv(i8* %89) #9
  br label %90

90:                                               ; preds = %83, %88
  store i8* %21, i8** %87, align 8
  store i64 %15, i64* %84, align 8
  store i64 0, i64* %3, align 8
  store i64 %14, i64* %5, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
