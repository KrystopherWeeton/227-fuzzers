; ModuleID = '../../media/midi/midi_message_queue.cc'
source_filename = "../../media/midi/midi_message_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.midi::MidiMessageQueue" = type <{ %"class.base::circular_deque", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.base::internal::circular_deque_iterator" = type { %"class.base::internal::circular_deque_const_iterator" }
%"class.base::internal::circular_deque_const_iterator" = type { %"class.base::circular_deque"*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4base14circular_dequeIhED2Ev = comdat any

$_ZN4base14circular_dequeIhE6insertINSt3__111__wrap_iterIPKhEEEENS3_9enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES9_S9_ = comdat any

$_ZN4base14circular_dequeIhE6insertIPKhEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES7_S7_ = comdat any

$_ZN4base8internal12VectorBufferIhEixEm = comdat any

$_ZN4base14circular_dequeIhE25ExpandCapacityIfNecessaryEm = comdat any

$_ZN4base14circular_dequeIhE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIhEES5_ = comdat any

$_ZN4base14circular_dequeIhE10MoveBufferERNS_8internal12VectorBufferIhEEmmPS4_PmS7_ = comdat any

$_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN4base14circular_dequeIhE25ShrinkCapacityIfNecessaryEv = comdat any

@.str = private unnamed_addr constant [15 x i8] c"i <= capacity_\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"../../base/containers/vector_buffer.h\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"!RangesOverlap(from_begin, from_end, to)\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"from_begin: 0x\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c", from_end: 0x\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c", to: 0x\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN4midi16MidiMessageQueueC1Eb = hidden unnamed_addr alias void (%"class.midi::MidiMessageQueue"*, i1), void (%"class.midi::MidiMessageQueue"*, i1)* @_ZN4midi16MidiMessageQueueC2Eb
@_ZN4midi16MidiMessageQueueD1Ev = hidden unnamed_addr alias void (%"class.midi::MidiMessageQueue"*), void (%"class.midi::MidiMessageQueue"*)* @_ZN4midi16MidiMessageQueueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi16MidiMessageQueueC2Eb(%"class.midi::MidiMessageQueue"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 2
  %5 = bitcast %"class.midi::MidiMessageQueue"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 56, i1 false)
  store i8 %3, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi16MidiMessageQueueD2Ev(%"class.midi::MidiMessageQueue"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #10
  br label %9

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0
  tail call void @_ZN4base14circular_dequeIhED2Ev(%"class.base::circular_deque"* %10) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhED2Ev(%"class.base::circular_deque"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, %3
  br i1 %6, label %18, label %7

7:                                                ; preds = %1
  %8 = icmp ugt i64 %5, %3
  %9 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %10 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %3) #11
  br i1 %8, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %13) #11
  %15 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %9, i64 0) #11
  br label %16

16:                                               ; preds = %7, %11
  %17 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %5) #11
  br label %18

18:                                               ; preds = %16, %1
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void @free(i8* %20) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi16MidiMessageQueue3AddERKNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.midi::MidiMessageQueue"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZN4base14circular_dequeIhE6insertINSt3__111__wrap_iterIPKhEEEENS3_9enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES9_S9_(%"class.base::circular_deque"* %3, %"class.base::circular_deque"* %3, i64 %5, i8* %7, i8* %9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE6insertINSt3__111__wrap_iterIPKhEEEENS3_9enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES9_S9_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %7 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %8 = ptrtoint i8* %3 to i64
  %9 = ptrtoint i8* %4 to i64
  %10 = sub i64 %9, %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %5
  %13 = bitcast %"class.base::internal::circular_deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  %14 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #11
  %16 = bitcast %"class.base::internal::circular_deque_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false) #11
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, %2
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  tail call void @_ZN4base14circular_dequeIhE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %10)
  %23 = load i64, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %17, align 8
  store i64 %23, i64* %18, align 8
  %24 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %10
  %27 = add i64 %26, %25
  %28 = urem i64 %27, %25
  store i64 %28, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %28, i64* %15, align 8
  br label %32

29:                                               ; preds = %12
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %2, i64* %15, align 8
  call void @_ZN4base14circular_dequeIhE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIhEES5_(%"class.base::circular_deque"* %0, i64 %10, %"class.base::internal::circular_deque_iterator"* nonnull %6, %"class.base::internal::circular_deque_iterator"* nonnull %7)
  %30 = load i64, i64* %15, align 8
  %31 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  br label %32

32:                                               ; preds = %29, %22
  %33 = phi %"class.base::circular_deque"* [ %31, %29 ], [ %0, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %28, %22 ]
  %35 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  br label %36

36:                                               ; preds = %67, %32
  %37 = phi %"class.base::circular_deque"* [ %33, %32 ], [ %72, %67 ]
  %38 = phi i64 [ %34, %32 ], [ %76, %67 ]
  %39 = phi i8* [ %3, %32 ], [ %77, %67 ]
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = sub i64 %38, %41
  br label %50

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %38, %41
  %49 = add i64 %48, %47
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i64 [ %44, %43 ], [ %49, %45 ]
  %52 = load i64, i64* %18, align 8
  %53 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %17, align 8
  %54 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = sub i64 %52, %55
  br label %64

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %52, %55
  %63 = add i64 %62, %61
  br label %64

64:                                               ; preds = %57, %59
  %65 = phi i64 [ %58, %57 ], [ %63, %59 ]
  %66 = icmp ult i64 %51, %65
  br i1 %66, label %67, label %78

67:                                               ; preds = %64
  %68 = call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %35, i64 %38)
  %69 = load i8, i8* %39, align 1
  store i8 %69, i8* %68, align 1
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %15, align 8
  %72 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  %73 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %72, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %71, %74
  %76 = select i1 %75, i64 0, i64 %71
  store i64 %76, i64* %15, align 8
  %77 = getelementptr inbounds i8, i8* %39, i64 1
  br label %36

78:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  br label %79

79:                                               ; preds = %5, %78
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi16MidiMessageQueue3AddEPKhm(%"class.midi::MidiMessageQueue"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  tail call void @_ZN4base14circular_dequeIhE6insertIPKhEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES7_S7_(%"class.base::circular_deque"* %4, %"class.base::circular_deque"* %4, i64 %6, i8* %1, i8* %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE6insertIPKhEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIhEES7_S7_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %7 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = ptrtoint i8* %3 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %5
  %13 = bitcast %"class.base::internal::circular_deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  %14 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #11
  %16 = bitcast %"class.base::internal::circular_deque_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false) #11
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, %2
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  tail call void @_ZN4base14circular_dequeIhE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %10)
  %23 = load i64, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %17, align 8
  store i64 %23, i64* %18, align 8
  %24 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %10
  %27 = add i64 %26, %25
  %28 = urem i64 %27, %25
  store i64 %28, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %28, i64* %15, align 8
  br label %32

29:                                               ; preds = %12
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %2, i64* %15, align 8
  call void @_ZN4base14circular_dequeIhE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIhEES5_(%"class.base::circular_deque"* %0, i64 %10, %"class.base::internal::circular_deque_iterator"* nonnull %6, %"class.base::internal::circular_deque_iterator"* nonnull %7)
  %30 = load i64, i64* %15, align 8
  %31 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  br label %32

32:                                               ; preds = %29, %22
  %33 = phi %"class.base::circular_deque"* [ %31, %29 ], [ %0, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %28, %22 ]
  %35 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  br label %36

36:                                               ; preds = %67, %32
  %37 = phi %"class.base::circular_deque"* [ %33, %32 ], [ %72, %67 ]
  %38 = phi i64 [ %34, %32 ], [ %76, %67 ]
  %39 = phi i8* [ %3, %32 ], [ %77, %67 ]
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = sub i64 %38, %41
  br label %50

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %38, %41
  %49 = add i64 %48, %47
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i64 [ %44, %43 ], [ %49, %45 ]
  %52 = load i64, i64* %18, align 8
  %53 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %17, align 8
  %54 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = sub i64 %52, %55
  br label %64

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %52, %55
  %63 = add i64 %62, %61
  br label %64

64:                                               ; preds = %57, %59
  %65 = phi i64 [ %58, %57 ], [ %63, %59 ]
  %66 = icmp ult i64 %51, %65
  br i1 %66, label %67, label %78

67:                                               ; preds = %64
  %68 = call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %35, i64 %38)
  %69 = load i8, i8* %39, align 1
  store i8 %69, i8* %68, align 1
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %15, align 8
  %72 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  %73 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %72, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %71, %74
  %76 = select i1 %75, i64 0, i64 %71
  store i64 %76, i64* %15, align 8
  %77 = getelementptr inbounds i8, i8* %39, i64 1
  br label %36

78:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  br label %79

79:                                               ; preds = %5, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi16MidiMessageQueue3GetEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.midi::MidiMessageQueue"*, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::vector"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = bitcast i8** %9 to i64*
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 2
  %15 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i8** %16 to i64*
  %18 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 0, i32 0, i32 1
  br label %19

19:                                               ; preds = %257, %2
  %20 = load i8*, i8** %8, align 8
  %21 = load i8*, i8** %9, align 8
  %22 = icmp eq i8* %20, %21
  br i1 %22, label %108, label %23

23:                                               ; preds = %19
  %24 = load i8, i8* %20, align 1
  %25 = tail call i64 @_ZN4midi16GetMessageLengthEh(i8 zeroext %24) #11
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %23
  %28 = load i8*, i8** %9, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 -1
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, -9
  br i1 %31, label %32, label %108

32:                                               ; preds = %27
  %33 = load i64, i64* %3, align 8
  %34 = load i64, i64* %11, align 8
  store i64 %34, i64* %3, align 8
  store i64 %33, i64* %11, align 8
  %35 = load i64, i64* %6, align 8
  %36 = load i64, i64* %10, align 8
  store i64 %36, i64* %6, align 8
  store i64 %35, i64* %10, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast i8** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* %17, align 8
  store i64 %40, i64* %38, align 8
  store i64 %39, i64* %17, align 8
  br label %318

41:                                               ; preds = %23
  %42 = load i64, i64* %10, align 8
  %43 = load i64, i64* %11, align 8
  %44 = sub i64 %42, %43
  %45 = icmp eq i64 %44, %25
  br i1 %45, label %46, label %108

46:                                               ; preds = %41
  %47 = load i64, i64* %3, align 8
  store i64 %43, i64* %3, align 8
  store i64 %47, i64* %11, align 8
  %48 = load i64, i64* %6, align 8
  %49 = load i64, i64* %10, align 8
  store i64 %49, i64* %6, align 8
  store i64 %48, i64* %10, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = load i64, i64* %17, align 8
  store i64 %53, i64* %51, align 8
  store i64 %52, i64* %17, align 8
  %54 = getelementptr inbounds %"class.midi::MidiMessageQueue", %"class.midi::MidiMessageQueue"* %0, i64 0, i32 2
  %55 = load i8, i8* %54, align 8, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %318, label %57

57:                                               ; preds = %46
  %58 = tail call zeroext i1 @_ZN4midi15IsSystemMessageEh(i8 zeroext %24) #11
  br i1 %58, label %318, label %59

59:                                               ; preds = %57
  %60 = load i8*, i8** %9, align 8
  %61 = load i8*, i8** %16, align 8
  %62 = icmp eq i8* %60, %61
  %63 = ptrtoint i8* %61 to i64
  br i1 %62, label %67, label %64

64:                                               ; preds = %59
  store i8 %24, i8* %60, align 1
  %65 = getelementptr inbounds i8, i8* %60, i64 1
  %66 = ptrtoint i8* %65 to i64
  store i64 %66, i64* %10, align 8
  br label %318

67:                                               ; preds = %59
  %68 = ptrtoint i8* %60 to i64
  %69 = load i64, i64* %11, align 8
  %70 = sub i64 %68, %69
  %71 = add i64 %70, 1
  %72 = icmp slt i64 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %67
  %74 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %74) #12
  unreachable

75:                                               ; preds = %67
  %76 = sub i64 %63, %69
  %77 = icmp ult i64 %76, 4611686018427387903
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = shl i64 %76, 1
  %80 = icmp ult i64 %79, %71
  %81 = select i1 %80, i64 %71, i64 %79
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %78, %75
  %84 = phi i64 [ %81, %78 ], [ 9223372036854775807, %75 ]
  %85 = tail call i8* @_Znwm(i64 %84) #10
  br label %86

86:                                               ; preds = %83, %78
  %87 = phi i64 [ %84, %83 ], [ 0, %78 ]
  %88 = phi i8* [ %85, %83 ], [ null, %78 ]
  %89 = getelementptr inbounds i8, i8* %88, i64 %70
  %90 = getelementptr inbounds i8, i8* %88, i64 %87
  %91 = ptrtoint i8* %90 to i64
  store i8 %24, i8* %89, align 1
  %92 = getelementptr inbounds i8, i8* %89, i64 1
  %93 = ptrtoint i8* %92 to i64
  %94 = load i8*, i8** %8, align 8
  %95 = load i64, i64* %10, align 8
  %96 = ptrtoint i8* %94 to i64
  %97 = sub i64 %95, %96
  %98 = sub i64 0, %97
  %99 = getelementptr inbounds i8, i8* %89, i64 %98
  %100 = ptrtoint i8* %99 to i64
  %101 = icmp sgt i64 %97, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %94, i64 %97, i1 false) #11
  %103 = load i8*, i8** %8, align 8
  br label %104

104:                                              ; preds = %102, %86
  %105 = phi i8* [ %94, %86 ], [ %103, %102 ]
  store i64 %100, i64* %11, align 8
  store i64 %93, i64* %10, align 8
  store i64 %91, i64* %17, align 8
  %106 = icmp eq i8* %105, null
  br i1 %106, label %318, label %107

107:                                              ; preds = %104
  tail call void @_ZdlPv(i8* nonnull %105) #10
  br label %318

108:                                              ; preds = %27, %41, %19
  %109 = load i64, i64* %13, align 8
  %110 = load i64, i64* %14, align 8
  %111 = icmp eq i64 %109, %110
  br i1 %111, label %318, label %112

112:                                              ; preds = %108
  %113 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %109) #11
  %114 = load i8, i8* %113, align 1
  %115 = tail call zeroext i1 @_ZN4midi23IsSystemRealTimeMessageEh(i8 zeroext %114) #11
  br i1 %115, label %116, label %179

116:                                              ; preds = %112
  %117 = load i8*, i8** %5, align 8
  %118 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %117, %119
  %121 = ptrtoint i8* %119 to i64
  br i1 %120, label %125, label %122

122:                                              ; preds = %116
  store i8 %114, i8* %117, align 1
  %123 = getelementptr inbounds i8, i8* %117, i64 1
  %124 = ptrtoint i8* %123 to i64
  store i64 %124, i64* %6, align 8
  br label %168

125:                                              ; preds = %116
  %126 = ptrtoint i8* %117 to i64
  %127 = load i64, i64* %3, align 8
  %128 = sub i64 %126, %127
  %129 = add i64 %128, 1
  %130 = icmp slt i64 %129, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %125
  %132 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %132) #12
  unreachable

133:                                              ; preds = %125
  %134 = bitcast i8** %118 to i64*
  %135 = sub i64 %121, %127
  %136 = icmp ult i64 %135, 4611686018427387903
  br i1 %136, label %137, label %142

137:                                              ; preds = %133
  %138 = shl i64 %135, 1
  %139 = icmp ult i64 %138, %129
  %140 = select i1 %139, i64 %129, i64 %138
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %145, label %142

142:                                              ; preds = %137, %133
  %143 = phi i64 [ %140, %137 ], [ 9223372036854775807, %133 ]
  %144 = tail call i8* @_Znwm(i64 %143) #10
  br label %145

145:                                              ; preds = %142, %137
  %146 = phi i64 [ %143, %142 ], [ 0, %137 ]
  %147 = phi i8* [ %144, %142 ], [ null, %137 ]
  %148 = getelementptr inbounds i8, i8* %147, i64 %128
  %149 = getelementptr inbounds i8, i8* %147, i64 %146
  %150 = ptrtoint i8* %149 to i64
  store i8 %114, i8* %148, align 1
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  %152 = ptrtoint i8* %151 to i64
  %153 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = load i64, i64* %6, align 8
  %156 = ptrtoint i8* %154 to i64
  %157 = sub i64 %155, %156
  %158 = sub i64 0, %157
  %159 = getelementptr inbounds i8, i8* %148, i64 %158
  %160 = ptrtoint i8* %159 to i64
  %161 = icmp sgt i64 %157, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %145
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %159, i8* align 1 %154, i64 %157, i1 false) #11
  %163 = load i8*, i8** %153, align 8
  br label %164

164:                                              ; preds = %162, %145
  %165 = phi i8* [ %154, %145 ], [ %163, %162 ]
  store i64 %160, i64* %3, align 8
  store i64 %152, i64* %6, align 8
  store i64 %150, i64* %134, align 8
  %166 = icmp eq i8* %165, null
  br i1 %166, label %168, label %167

167:                                              ; preds = %164
  tail call void @_ZdlPv(i8* nonnull %165) #10
  br label %168

168:                                              ; preds = %167, %164, %122
  %169 = load i64, i64* %13, align 8
  %170 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %169) #11
  %171 = load i64, i64* %13, align 8
  %172 = add i64 %171, 1
  %173 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %172) #11
  %174 = load i64, i64* %13, align 8
  %175 = add i64 %174, 1
  %176 = load i64, i64* %18, align 8
  %177 = icmp eq i64 %175, %176
  %178 = select i1 %177, i64 0, i64 %175
  store i64 %178, i64* %13, align 8
  tail call void @_ZN4base14circular_dequeIhE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"* %12) #11
  br label %318

179:                                              ; preds = %112
  %180 = load i8*, i8** %8, align 8
  %181 = load i8*, i8** %9, align 8
  %182 = icmp eq i8* %180, %181
  br i1 %182, label %183, label %248

183:                                              ; preds = %179
  %184 = tail call i64 @_ZN4midi16GetMessageLengthEh(i8 zeroext %114) #11
  %185 = icmp ne i64 %184, 0
  %186 = icmp eq i8 %114, -16
  %187 = or i1 %186, %185
  br i1 %187, label %188, label %237

188:                                              ; preds = %183
  %189 = load i8*, i8** %9, align 8
  %190 = load i8*, i8** %16, align 8
  %191 = icmp eq i8* %189, %190
  %192 = ptrtoint i8* %190 to i64
  br i1 %191, label %196, label %193

193:                                              ; preds = %188
  store i8 %114, i8* %189, align 1
  %194 = getelementptr inbounds i8, i8* %189, i64 1
  %195 = ptrtoint i8* %194 to i64
  store i64 %195, i64* %10, align 8
  br label %237

196:                                              ; preds = %188
  %197 = ptrtoint i8* %189 to i64
  %198 = load i64, i64* %11, align 8
  %199 = sub i64 %197, %198
  %200 = add i64 %199, 1
  %201 = icmp slt i64 %200, 0
  br i1 %201, label %202, label %204

202:                                              ; preds = %196
  %203 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %203) #12
  unreachable

204:                                              ; preds = %196
  %205 = sub i64 %192, %198
  %206 = icmp ult i64 %205, 4611686018427387903
  br i1 %206, label %207, label %212

207:                                              ; preds = %204
  %208 = shl i64 %205, 1
  %209 = icmp ult i64 %208, %200
  %210 = select i1 %209, i64 %200, i64 %208
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %215, label %212

212:                                              ; preds = %207, %204
  %213 = phi i64 [ %210, %207 ], [ 9223372036854775807, %204 ]
  %214 = tail call i8* @_Znwm(i64 %213) #10
  br label %215

215:                                              ; preds = %212, %207
  %216 = phi i64 [ %213, %212 ], [ 0, %207 ]
  %217 = phi i8* [ %214, %212 ], [ null, %207 ]
  %218 = getelementptr inbounds i8, i8* %217, i64 %199
  %219 = getelementptr inbounds i8, i8* %217, i64 %216
  %220 = ptrtoint i8* %219 to i64
  store i8 %114, i8* %218, align 1
  %221 = getelementptr inbounds i8, i8* %218, i64 1
  %222 = ptrtoint i8* %221 to i64
  %223 = load i8*, i8** %8, align 8
  %224 = load i64, i64* %10, align 8
  %225 = ptrtoint i8* %223 to i64
  %226 = sub i64 %224, %225
  %227 = sub i64 0, %226
  %228 = getelementptr inbounds i8, i8* %218, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = icmp sgt i64 %226, 0
  br i1 %230, label %231, label %233

231:                                              ; preds = %215
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %228, i8* align 1 %223, i64 %226, i1 false) #11
  %232 = load i8*, i8** %8, align 8
  br label %233

233:                                              ; preds = %231, %215
  %234 = phi i8* [ %223, %215 ], [ %232, %231 ]
  store i64 %229, i64* %11, align 8
  store i64 %222, i64* %10, align 8
  store i64 %220, i64* %17, align 8
  %235 = icmp eq i8* %234, null
  br i1 %235, label %237, label %236

236:                                              ; preds = %233
  tail call void @_ZdlPv(i8* nonnull %234) #10
  br label %237

237:                                              ; preds = %236, %233, %193, %183
  %238 = load i64, i64* %13, align 8
  %239 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %238) #11
  %240 = load i64, i64* %13, align 8
  %241 = add i64 %240, 1
  %242 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %241) #11
  %243 = load i64, i64* %13, align 8
  %244 = add i64 %243, 1
  %245 = load i64, i64* %18, align 8
  %246 = icmp eq i64 %244, %245
  %247 = select i1 %246, i64 0, i64 %244
  store i64 %247, i64* %13, align 8
  tail call void @_ZN4base14circular_dequeIhE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"* %12) #11
  br label %257

248:                                              ; preds = %179
  %249 = load i8, i8* %180, align 1
  %250 = tail call zeroext i1 @_ZN4midi10IsDataByteEh(i8 zeroext %114) #11
  br i1 %250, label %258, label %251

251:                                              ; preds = %248
  %252 = icmp eq i8 %249, -16
  %253 = icmp eq i8 %114, -9
  %254 = and i1 %253, %252
  br i1 %254, label %258, label %255

255:                                              ; preds = %251
  %256 = load i64, i64* %11, align 8
  store i64 %256, i64* %10, align 8
  br label %257

257:                                              ; preds = %255, %307, %237
  br label %19

258:                                              ; preds = %251, %248
  %259 = load i8*, i8** %9, align 8
  %260 = load i8*, i8** %16, align 8
  %261 = icmp eq i8* %259, %260
  %262 = ptrtoint i8* %260 to i64
  br i1 %261, label %266, label %263

263:                                              ; preds = %258
  store i8 %114, i8* %259, align 1
  %264 = getelementptr inbounds i8, i8* %259, i64 1
  %265 = ptrtoint i8* %264 to i64
  store i64 %265, i64* %10, align 8
  br label %307

266:                                              ; preds = %258
  %267 = ptrtoint i8* %259 to i64
  %268 = load i64, i64* %11, align 8
  %269 = sub i64 %267, %268
  %270 = add i64 %269, 1
  %271 = icmp slt i64 %270, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %266
  %273 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %273) #12
  unreachable

274:                                              ; preds = %266
  %275 = sub i64 %262, %268
  %276 = icmp ult i64 %275, 4611686018427387903
  br i1 %276, label %277, label %282

277:                                              ; preds = %274
  %278 = shl i64 %275, 1
  %279 = icmp ult i64 %278, %270
  %280 = select i1 %279, i64 %270, i64 %278
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %285, label %282

282:                                              ; preds = %277, %274
  %283 = phi i64 [ %280, %277 ], [ 9223372036854775807, %274 ]
  %284 = tail call i8* @_Znwm(i64 %283) #10
  br label %285

285:                                              ; preds = %282, %277
  %286 = phi i64 [ %283, %282 ], [ 0, %277 ]
  %287 = phi i8* [ %284, %282 ], [ null, %277 ]
  %288 = getelementptr inbounds i8, i8* %287, i64 %269
  %289 = getelementptr inbounds i8, i8* %287, i64 %286
  %290 = ptrtoint i8* %289 to i64
  store i8 %114, i8* %288, align 1
  %291 = getelementptr inbounds i8, i8* %288, i64 1
  %292 = ptrtoint i8* %291 to i64
  %293 = load i8*, i8** %8, align 8
  %294 = load i64, i64* %10, align 8
  %295 = ptrtoint i8* %293 to i64
  %296 = sub i64 %294, %295
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8, i8* %288, i64 %297
  %299 = ptrtoint i8* %298 to i64
  %300 = icmp sgt i64 %296, 0
  br i1 %300, label %301, label %303

301:                                              ; preds = %285
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %298, i8* align 1 %293, i64 %296, i1 false) #11
  %302 = load i8*, i8** %8, align 8
  br label %303

303:                                              ; preds = %301, %285
  %304 = phi i8* [ %293, %285 ], [ %302, %301 ]
  store i64 %299, i64* %11, align 8
  store i64 %292, i64* %10, align 8
  store i64 %290, i64* %17, align 8
  %305 = icmp eq i8* %304, null
  br i1 %305, label %307, label %306

306:                                              ; preds = %303
  tail call void @_ZdlPv(i8* nonnull %304) #10
  br label %307

307:                                              ; preds = %263, %303, %306
  %308 = load i64, i64* %13, align 8
  %309 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %308) #11
  %310 = load i64, i64* %13, align 8
  %311 = add i64 %310, 1
  %312 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %15, i64 %311) #11
  %313 = load i64, i64* %13, align 8
  %314 = add i64 %313, 1
  %315 = load i64, i64* %18, align 8
  %316 = icmp eq i64 %314, %315
  %317 = select i1 %316, i64 0, i64 %314
  store i64 %317, i64* %13, align 8
  tail call void @_ZN4base14circular_dequeIhE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"* %12) #11
  br label %257

318:                                              ; preds = %108, %57, %46, %168, %107, %104, %64, %32
  ret void
}

declare i64 @_ZN4midi16GetMessageLengthEh(i8 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN4midi15IsSystemMessageEh(i8 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN4midi23IsSystemRealTimeMessageEh(i8 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN4midi10IsDataByteEh(i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #11
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #11
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %4) #11
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  ret i8* %25
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.base::internal::VectorBuffer"*
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = sub i64 %8, %6
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %8, %6
  %18 = add i64 %17, %16
  br label %19

19:                                               ; preds = %10, %14
  %20 = phi i64 [ %13, %10 ], [ %16, %14 ]
  %21 = phi i64 [ %11, %10 ], [ %18, %14 ]
  %22 = add i64 %21, %1
  %23 = icmp eq i64 %20, 0
  %24 = add i64 %20, -1
  %25 = select i1 %23, i64 0, i64 %24
  %26 = icmp ult i64 %25, %22
  br i1 %26, label %27, label %44

27:                                               ; preds = %19
  %28 = icmp ugt i64 %22, 3
  %29 = select i1 %28, i64 %22, i64 3
  %30 = lshr i64 %25, 2
  %31 = add i64 %30, %25
  %32 = icmp ult i64 %29, %31
  %33 = select i1 %32, i64 %31, i64 %29
  %34 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #11
  %35 = bitcast <2 x i64>* %3 to i8**
  %36 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %4, i64 0, i32 1
  %37 = add i64 %33, 1
  %38 = tail call noalias i8* @malloc(i64 %37) #11
  store i8* %38, i8** %35, align 16
  store i64 %37, i64* %36, align 8
  %39 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIhE10MoveBufferERNS_8internal12VectorBufferIhEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %39, i64 %6, i64 %8, %"class.base::internal::VectorBuffer"* nonnull %4, i64* %5, i64* %7) #11
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void @free(i8* %41) #11
  %42 = load <2 x i64>, <2 x i64>* %3, align 16
  %43 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #11
  br label %44

44:                                               ; preds = %19, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIhEES5_(%"class.base::circular_deque"*, i64, %"class.base::internal::circular_deque_iterator"*, %"class.base::internal::circular_deque_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = bitcast %"class.base::internal::circular_deque_iterator"* %3 to i8*
  %8 = bitcast %"class.base::internal::circular_deque_iterator"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  br label %65

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %2, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %2, i64 0, i32 0, i32 0
  %13 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %12, align 8
  %14 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %13, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %11, %15
  br i1 %16, label %19, label %17

17:                                               ; preds = %9
  %18 = sub i64 %11, %15
  br label %24

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %13, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %11, %15
  %23 = add i64 %22, %21
  br label %24

24:                                               ; preds = %17, %19
  %25 = phi i64 [ %18, %17 ], [ %23, %19 ]
  tail call void @_ZN4base14circular_dequeIhE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %1)
  %26 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  %29 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = urem i64 %28, %31
  store i64 %32, i64* %10, align 8
  %33 = add i64 %32, %1
  %34 = load i64, i64* %30, align 8
  %35 = urem i64 %33, %34
  %36 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %3, i64 0, i32 0, i32 0
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %36, align 8
  %37 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %3, i64 0, i32 0, i32 1
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %1
  %41 = load i64, i64* %30, align 8
  %42 = urem i64 %40, %41
  store i64 %42, i64* %38, align 8
  %43 = load i64, i64* %10, align 8
  %44 = icmp eq i64 %39, %43
  br i1 %44, label %65, label %45

45:                                               ; preds = %24, %57
  %46 = phi i64 [ %59, %57 ], [ %42, %24 ]
  %47 = phi i64 [ %53, %57 ], [ %39, %24 ]
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = load i64, i64* %30, align 8
  br label %51

51:                                               ; preds = %45, %49
  %52 = phi i64 [ %50, %49 ], [ %47, %45 ]
  %53 = add i64 %52, -1
  %54 = icmp eq i64 %46, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  %56 = load i64, i64* %30, align 8
  br label %57

57:                                               ; preds = %51, %55
  %58 = phi i64 [ %56, %55 ], [ %46, %51 ]
  %59 = add i64 %58, -1
  %60 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %53)
  %61 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %52)
  %62 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %59)
  tail call void @_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_(i8* %60, i8* %61, i8* %62)
  %63 = load i64, i64* %10, align 8
  %64 = icmp eq i64 %53, %63
  br i1 %64, label %65, label %45

65:                                               ; preds = %57, %24, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE10MoveBufferERNS_8internal12VectorBufferIhEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16), i64, i64, %"class.base::internal::VectorBuffer"*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %7 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 0, i64* %4, align 8
  %9 = icmp ugt i64 %2, %1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %12 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %13 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_(i8* %11, i8* %12, i8* %14)
  %15 = sub i64 %2, %1
  br label %28

16:                                               ; preds = %6
  %17 = icmp ult i64 %2, %1
  br i1 %17, label %18, label %28

18:                                               ; preds = %16
  %19 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %20 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %8)
  %21 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_(i8* %19, i8* %20, i8* %22)
  %23 = sub i64 %8, %1
  %24 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 0)
  %25 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %26 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIhEixEm(%"class.base::internal::VectorBuffer"* %3, i64 %23)
  tail call void @_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_(i8* %24, i8* %25, i8* %26)
  %27 = add i64 %23, %2
  br label %28

28:                                               ; preds = %16, %18, %10
  %29 = phi i64 [ %27, %18 ], [ %15, %10 ], [ 0, %16 ]
  store i64 %29, i64* %5, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal12VectorBufferIhE9MoveRangeIhLi0EEEvPhS4_S4_(i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = ptrtoint i8* %0 to i64
  %6 = icmp ult i8* %2, %1
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = ptrtoint i8* %2 to i64
  %9 = ptrtoint i8* %1 to i64
  %10 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %9, i64 %5) #11
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %8, i64 %12) #11
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = or i1 %11, %14
  br i1 %15, label %16, label %17, !prof !3

16:                                               ; preds = %7
  tail call void @llvm.trap() #11
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i64, i1 } %13, 0
  %19 = icmp ugt i64 %18, %5
  br i1 %19, label %20, label %46

20:                                               ; preds = %17
  %21 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 132, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0)) #11
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  %23 = bitcast %"class.std::__1::basic_ostream"* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr i8, i8* %24, i64 -24
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::basic_ostream"* %22 to i8*
  %29 = getelementptr inbounds i8, i8* %28, i64 %27
  %30 = getelementptr inbounds i8, i8* %29, i64 8
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, -75
  %34 = or i32 %33, 8
  store i32 %34, i32* %31, align 8
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %22, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i64 14) #11
  %36 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %35, i64 %5) #11
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i64 14) #11
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %37, i64 %9) #11
  %39 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %38, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i64 8) #11
  %40 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %39, i64 %8) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %46

41:                                               ; preds = %3
  %42 = ptrtoint i8* %1 to i64
  %43 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %42, i64 %5) #11
  %44 = extractvalue { i64, i1 } %43, 1
  br i1 %44, label %45, label %46, !prof !3

45:                                               ; preds = %41
  call void @llvm.trap() #11
  unreachable

46:                                               ; preds = %20, %17, %41
  %47 = phi { i64, i1 } [ %43, %41 ], [ %10, %17 ], [ %10, %20 ]
  %48 = extractvalue { i64, i1 } %47, 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %0, i64 %48, i1 false)
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #11
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #11
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #11
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #11
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #11
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #11
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #11
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #11
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #11
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #11
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIhE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca <2 x i64>, align 16
  %3 = bitcast <2 x i64>* %2 to %"class.base::internal::VectorBuffer"*
  %4 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  %7 = add i64 %5, -1
  %8 = select i1 %6, i64 0, i64 %7
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %38, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, %12
  %16 = sub i64 %14, %12
  %17 = select i1 %15, i64 %5, i64 0
  %18 = add i64 %17, %16
  %19 = sub i64 %8, %18
  %20 = icmp ult i64 %19, %18
  br i1 %20, label %38, label %21

21:                                               ; preds = %10
  %22 = lshr i64 %18, 2
  %23 = add i64 %22, %18
  %24 = icmp ugt i64 %23, 3
  %25 = select i1 %24, i64 %23, i64 3
  %26 = icmp ult i64 %25, %8
  br i1 %26, label %27, label %38

27:                                               ; preds = %21
  %28 = bitcast <2 x i64>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #11
  %29 = bitcast <2 x i64>* %2 to i8**
  %30 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 1
  %31 = add nuw i64 %25, 1
  %32 = tail call noalias i8* @malloc(i64 %31) #11
  store i8* %32, i8** %29, align 16
  store i64 %31, i64* %30, align 8
  %33 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIhE10MoveBufferERNS_8internal12VectorBufferIhEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %33, i64 %12, i64 %14, %"class.base::internal::VectorBuffer"* nonnull %3, i64* %11, i64* %13) #11
  %34 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  call void @free(i8* %35) #11
  %36 = load <2 x i64>, <2 x i64>* %2, align 16
  %37 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #11
  br label %38

38:                                               ; preds = %10, %27, %21, %1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
