; ModuleID = '../../cc/paint/draw_image.cc'
source_filename = "../../cc/paint/draw_image.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional", %"class.absl::optional.10", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp, %class.sk_sp.7, %"class.gfx::Rect", i32, %class.sk_sp.8, %class.sk_sp.9, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp, %class.scoped_refptr }
%class.sk_sp.7 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type opaque
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.8 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.9 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkSize = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.absl::optional.10" = type { %"class.absl::optional_internal::optional_data.11" }
%"class.absl::optional_internal::optional_data.11" = type { %"class.absl::optional_internal::optional_data_base.12" }
%"class.absl::optional_internal::optional_data_base.12" = type { %"class.absl::optional_internal::optional_data_dtor_base.13" }
%"class.absl::optional_internal::optional_data_dtor_base.13" = type { i8, %union.anon.14 }
%union.anon.14 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%class.SkM44 = type { [16 x float] }
%class.SkMatrix = type { [9 x float], i32 }

@_ZN2cc9DrawImageC1Ev = hidden unnamed_addr alias void (%"class.cc::DrawImage"*), void (%"class.cc::DrawImage"*)* @_ZN2cc9DrawImageC2Ev
@_ZN2cc9DrawImageC1ENS_10PaintImageE = hidden unnamed_addr alias void (%"class.cc::DrawImage"*, %"class.cc::PaintImage"*), void (%"class.cc::DrawImage"*, %"class.cc::PaintImage"*)* @_ZN2cc9DrawImageC2ENS_10PaintImageE
@_ZN2cc9DrawImageC1ENS_10PaintImageEbRK7SkIRect15SkFilterQualityRK5SkM44N4absl8optionalImEERKNSA_IN3gfx10ColorSpaceEEEf = hidden unnamed_addr alias void (%"class.cc::DrawImage"*, %"class.cc::PaintImage"*, i1, %struct.SkIRect*, i32, %class.SkM44*, %"class.absl::optional"*, %"class.absl::optional.10"*, float), void (%"class.cc::DrawImage"*, %"class.cc::PaintImage"*, i1, %struct.SkIRect*, i32, %class.SkM44*, %"class.absl::optional"*, %"class.absl::optional.10"*, float)* @_ZN2cc9DrawImageC2ENS_10PaintImageEbRK7SkIRect15SkFilterQualityRK5SkM44N4absl8optionalImEERKNSA_IN3gfx10ColorSpaceEEEf
@_ZN2cc9DrawImageC1ERKS0_fmRKN3gfx10ColorSpaceEf = hidden unnamed_addr alias void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*, float, i64, %"class.gfx::ColorSpace"*, float), void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*, float, i64, %"class.gfx::ColorSpace"*, float)* @_ZN2cc9DrawImageC2ERKS0_fmRKN3gfx10ColorSpaceEf
@_ZN2cc9DrawImageC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*), void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*)* @_ZN2cc9DrawImageC2ERKS0_
@_ZN2cc9DrawImageC1EOS0_ = hidden unnamed_addr alias void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*), void (%"class.cc::DrawImage"*, %"class.cc::DrawImage"*)* @_ZN2cc9DrawImageC2EOS0_
@_ZN2cc9DrawImageD1Ev = hidden unnamed_addr alias void (%"class.cc::DrawImage"*), void (%"class.cc::DrawImage"*)* @_ZN2cc9DrawImageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2Ev(%"class.cc::DrawImage"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1Ev(%"class.cc::PaintImage"* %2) #7
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5
  %6 = bitcast %struct.SkSize* %5 to <2 x float>*
  %7 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 20, i1 false)
  store <2 x float> <float 1.000000e+00, float 1.000000e+00>, <2 x float>* %6, align 8
  %8 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 8
  %9 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 68, i1 false) #7
  %12 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 10
  store float 1.000000e+02, float* %12, align 8
  ret void
}

declare void @_ZN2cc10PaintImageC1Ev(%"class.cc::PaintImage"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2ENS_10PaintImageE(%"class.cc::DrawImage"*, %"class.cc::PaintImage"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1EOS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %1) #7
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3
  %6 = tail call i32 @_ZNK2cc10PaintImage5widthEv(%"class.cc::PaintImage"* %3) #7
  %7 = tail call i32 @_ZNK2cc10PaintImage6heightEv(%"class.cc::PaintImage"* %3) #7
  %8 = sext i32 %6 to i64
  %9 = icmp slt i64 %8, 2147483647
  %10 = select i1 %9, i64 %8, i64 2147483647
  %11 = icmp sgt i64 %10, -2147483647
  %12 = select i1 %11, i64 %10, i64 -2147483647
  %13 = sext i32 %7 to i64
  %14 = icmp slt i64 %13, 2147483647
  %15 = select i1 %14, i64 %13, i64 2147483647
  %16 = icmp sgt i64 %15, -2147483647
  %17 = select i1 %16, i64 %15, i64 -2147483647
  %18 = shl nsw i64 %17, 32
  %19 = and i64 %12, 4294967295
  %20 = or i64 %18, %19
  %21 = bitcast %struct.SkIRect* %5 to i64*
  store i64 0, i64* %21, align 4
  %22 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3, i32 2
  %23 = bitcast i32* %22 to i64*
  store i64 %20, i64* %23, align 4
  %24 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 4
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5
  %26 = bitcast %struct.SkSize* %25 to <2 x float>*
  store <2 x float> <float 1.000000e+00, float 1.000000e+00>, <2 x float>* %26, align 8
  %27 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 6
  store i8 1, i8* %27, align 8
  %28 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %28, align 8
  %29 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %29, align 4
  %30 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 68, i1 false) #7
  %31 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 10
  store float 1.000000e+02, float* %31, align 8
  ret void
}

declare void @_ZN2cc10PaintImageC1EOS0_(%"class.cc::PaintImage"*, %"class.cc::PaintImage"* dereferenceable(104)) unnamed_addr #1

declare i32 @_ZNK2cc10PaintImage5widthEv(%"class.cc::PaintImage"*) local_unnamed_addr #1

declare i32 @_ZNK2cc10PaintImage6heightEv(%"class.cc::PaintImage"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2ENS_10PaintImageEbRK7SkIRect15SkFilterQualityRK5SkM44N4absl8optionalImEERKNSA_IN3gfx10ColorSpaceEEEf(%"class.cc::DrawImage"*, %"class.cc::PaintImage"*, i1 zeroext, %struct.SkIRect* nocapture readonly dereferenceable(16), i32, %class.SkM44* nocapture readonly dereferenceable(64), %"class.absl::optional"* nocapture readonly byval(%"class.absl::optional") align 8, %"class.absl::optional.10"* nocapture readonly dereferenceable(72), float) unnamed_addr #0 align 2 {
  %10 = alloca %class.SkMatrix, align 4
  %11 = zext i1 %2 to i8
  %12 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1EOS0_(%"class.cc::PaintImage"* %12, %"class.cc::PaintImage"* dereferenceable(104) %1) #7
  %13 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  store i8 %11, i8* %13, align 8
  %14 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3
  %15 = bitcast %struct.SkIRect* %14 to i8*
  %16 = bitcast %struct.SkIRect* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 16, i1 false)
  %17 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 4
  store i32 %4, i32* %17, align 4
  %18 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* nonnull align 8 %19, i64 16, i1 false)
  %20 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 4 %21, i64 72, i1 false)
  %22 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 10
  store float %8, float* %22, align 8
  %23 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 5
  %27 = load float, float* %26, align 4
  %28 = insertelement <2 x float> undef, float %25, i32 0
  %29 = insertelement <2 x float> %28, float %27, i32 1
  %30 = bitcast %struct.SkSize* %23 to <2 x float>*
  store <2 x float> %29, <2 x float>* %30, align 4
  %31 = bitcast %class.SkMatrix* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %31) #7
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 1
  %33 = bitcast %class.SkM44* %5 to i32*
  %34 = load i32, i32* %33, align 4, !noalias !2
  %35 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 4
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4, !noalias !2
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 12
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4, !noalias !2
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 1
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4, !noalias !2
  %44 = bitcast float* %26 to i32*
  %45 = load i32, i32* %44, align 4, !noalias !2
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 13
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4, !noalias !2
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 3
  %50 = bitcast float* %49 to i32*
  %51 = load i32, i32* %50, align 4, !noalias !2
  %52 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 7
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4, !noalias !2
  %55 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 15
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4, !noalias !2
  %58 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 1
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 2
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 3
  %61 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 4
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 5
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 6
  %64 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 7
  %65 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 8
  %66 = bitcast %class.SkMatrix* %10 to i32*
  store i32 %34, i32* %66, align 4, !alias.scope !5
  %67 = bitcast float* %58 to i32*
  store i32 %37, i32* %67, align 4, !alias.scope !5
  %68 = bitcast float* %59 to i32*
  store i32 %40, i32* %68, align 4, !alias.scope !5
  %69 = bitcast float* %60 to i32*
  store i32 %43, i32* %69, align 4, !alias.scope !5
  %70 = bitcast float* %61 to i32*
  store i32 %45, i32* %70, align 4, !alias.scope !5
  %71 = bitcast float* %62 to i32*
  store i32 %48, i32* %71, align 4, !alias.scope !5
  %72 = bitcast float* %63 to i32*
  store i32 %51, i32* %72, align 4, !alias.scope !5
  %73 = bitcast float* %64 to i32*
  store i32 %54, i32* %73, align 4, !alias.scope !5
  %74 = bitcast float* %65 to i32*
  store i32 %57, i32* %74, align 4, !alias.scope !5
  store i32 128, i32* %32, align 4, !alias.scope !5
  %75 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %10) #7
  %76 = zext i8 %75 to i32
  store i32 %76, i32* %32, align 4
  %77 = and i32 %76, 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %84, label %79

79:                                               ; preds = %9
  %80 = call zeroext i1 @_ZNK8SkMatrix14decomposeScaleEP6SkSizePS_(%class.SkMatrix* nonnull %10, %struct.SkSize* %23, %class.SkMatrix* null) #7
  br i1 %80, label %84, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds %struct.SkSize, %struct.SkSize* %23, i64 0, i32 0
  store float 1.000000e+00, float* %82, align 4
  %83 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5, i32 1
  store float 1.000000e+00, float* %83, align 4
  br label %84

84:                                               ; preds = %9, %79, %81
  %85 = phi i8 [ 0, %81 ], [ 1, %9 ], [ 1, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %31) #7
  %86 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 6
  store i8 %85, i8* %86, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2ERKS0_fmRKN3gfx10ColorSpaceEf(%"class.cc::DrawImage"*, %"class.cc::DrawImage"* dereferenceable(240), float, i64, %"class.gfx::ColorSpace"* nocapture readonly dereferenceable(68), float) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1ERKS0_(%"class.cc::PaintImage"* %7, %"class.cc::PaintImage"* dereferenceable(104) %8) #7
  %9 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  %11 = load i8, i8* %10, align 8, !range !8
  store i8 %11, i8* %9, align 8
  %12 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 3
  %14 = bitcast %struct.SkIRect* %12 to i8*
  %15 = bitcast %struct.SkIRect* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 16, i1 false)
  %16 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 4
  %17 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 4
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5
  %20 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 5, i32 0
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = insertelement <2 x float> undef, float %2, i32 0
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x float> %22, %24
  %26 = bitcast %struct.SkSize* %19 to <2 x float>*
  store <2 x float> %25, <2 x float>* %26, align 8
  %27 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 6
  %28 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 6
  %29 = load i8, i8* %28, align 8, !range !8
  store i8 %29, i8* %27, align 8
  %30 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %30, align 8
  %31 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %3, i64* %31, align 8
  %32 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %32, align 4
  %33 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %34 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %4, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 68, i1 false) #7
  %35 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 10
  store float %5, float* %35, align 8
  %36 = fcmp oeq float %5, 1.000000e+02
  br i1 %36, label %37, label %42

37:                                               ; preds = %6
  %38 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 10
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = bitcast float* %35 to i32*
  store i32 %40, i32* %41, align 8
  br label %42

42:                                               ; preds = %37, %6
  ret void
}

declare void @_ZN2cc10PaintImageC1ERKS0_(%"class.cc::PaintImage"*, %"class.cc::PaintImage"* dereferenceable(104)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2ERKS0_(%"class.cc::DrawImage"*, %"class.cc::DrawImage"* dereferenceable(240)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1ERKS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %4) #7
  %5 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 132, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageC2EOS0_(%"class.cc::DrawImage"*, %"class.cc::DrawImage"* dereferenceable(240)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageC1EOS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %4) #7
  %5 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 132, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9DrawImageD2Ev(%"class.cc::DrawImage"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  tail call void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"* %2) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(240) %"class.cc::DrawImage"* @_ZN2cc9DrawImageaSEOS0_(%"class.cc::DrawImage"* returned, %"class.cc::DrawImage"* dereferenceable(240)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(104) %"class.cc::PaintImage"* @_ZN2cc10PaintImageaSEOS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %4) #7
  %6 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 132, i1 false)
  ret %"class.cc::DrawImage"* %0
}

declare dereferenceable(104) %"class.cc::PaintImage"* @_ZN2cc10PaintImageaSEOS0_(%"class.cc::PaintImage"*, %"class.cc::PaintImage"* dereferenceable(104)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(240) %"class.cc::DrawImage"* @_ZN2cc9DrawImageaSERKS0_(%"class.cc::DrawImage"* returned, %"class.cc::DrawImage"* dereferenceable(240)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(104) %"class.cc::PaintImage"* @_ZN2cc10PaintImageaSERKS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %4) #7
  %6 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 132, i1 false)
  ret %"class.cc::DrawImage"* %0
}

declare dereferenceable(104) %"class.cc::PaintImage"* @_ZN2cc10PaintImageaSERKS0_(%"class.cc::PaintImage"*, %"class.cc::PaintImage"* dereferenceable(104)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc9DrawImageeqERKS0_(%"class.cc::DrawImage"*, %"class.cc::DrawImage"* dereferenceable(240)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZNK2cc10PaintImageeqERKS0_(%"class.cc::PaintImage"* %3, %"class.cc::PaintImage"* dereferenceable(104) %4) #7
  br i1 %5, label %6, label %67

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !8
  %9 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !8
  %11 = icmp eq i8 %8, %10
  br i1 %11, label %12, label %67

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 3
  %15 = bitcast %struct.SkIRect* %13 to i8*
  %16 = bitcast %struct.SkIRect* %14 to i8*
  %17 = tail call i32 @bcmp(i8* %15, i8* %16, i64 16) #7
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %67

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %21, %23
  br i1 %24, label %25, label %67

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5, i32 0
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 5, i32 0
  %29 = load float, float* %28, align 4
  %30 = fcmp oeq float %27, %29
  br i1 %30, label %31, label %67

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 5, i32 1
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 5, i32 1
  %35 = load float, float* %34, align 4
  %36 = fcmp oeq float %33, %35
  br i1 %36, label %37, label %67

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 6
  %39 = load i8, i8* %38, align 8, !range !8
  %40 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 6
  %41 = load i8, i8* %40, align 8, !range !8
  %42 = icmp eq i8 %39, %41
  br i1 %42, label %43, label %67

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  %45 = load i8, i8* %44, align 4, !range !8
  %46 = icmp ne i8 %45, 0
  %47 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
  %48 = load i8, i8* %47, align 4, !range !8
  %49 = icmp ne i8 %48, 0
  %50 = xor i1 %46, %49
  %51 = xor i1 %46, true
  %52 = or i1 %50, %51
  br i1 %52, label %60, label %53

53:                                               ; preds = %43
  %54 = icmp eq i8 %48, 0
  br i1 %54, label %55, label %56, !prof !9

55:                                               ; preds = %53
  tail call void @llvm.trap() #7
  unreachable

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1, i32 0
  %58 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1, i32 0
  %59 = tail call zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"* %57, %"class.gfx::ColorSpace"* dereferenceable(68) %58) #7
  br i1 %59, label %61, label %67

60:                                               ; preds = %43
  br i1 %50, label %67, label %61

61:                                               ; preds = %60, %56
  %62 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %0, i64 0, i32 10
  %63 = load float, float* %62, align 8
  %64 = getelementptr inbounds %"class.cc::DrawImage", %"class.cc::DrawImage"* %1, i64 0, i32 10
  %65 = load float, float* %64, align 8
  %66 = fcmp oeq float %63, %65
  br label %67

67:                                               ; preds = %60, %25, %56, %61, %37, %31, %19, %12, %6, %2
  %68 = phi i1 [ false, %60 ], [ false, %37 ], [ false, %31 ], [ false, %19 ], [ false, %12 ], [ false, %6 ], [ false, %2 ], [ %66, %61 ], [ false, %56 ], [ false, %25 ]
  ret i1 %68
}

declare zeroext i1 @_ZNK2cc10PaintImageeqERKS0_(%"class.cc::PaintImage"*, %"class.cc::PaintImage"* dereferenceable(104)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZNK8SkMatrix14decomposeScaleEP6SkSizePS_(%class.SkMatrix*, %struct.SkSize*, %class.SkMatrix*) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

declare zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"*, %"class.gfx::ColorSpace"* dereferenceable(68)) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5SkM445asM33Ev: argument 0"}
!4 = distinct !{!4, !"_ZNK5SkM445asM33Ev"}
!5 = !{!6, !3}
!6 = distinct !{!6, !7, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!7 = distinct !{!7, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!8 = !{i8 0, i8 2}
!9 = !{!"branch_weights", i32 1, i32 2000}
