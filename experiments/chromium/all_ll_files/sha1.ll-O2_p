; ModuleID = '../../third_party/unrar/src/sha1.cpp'
source_filename = "../../third_party/unrar/src/sha1.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%union.CHAR64LONG16 = type { [16 x i32] }
%struct.sha1_context = type { [5 x i32], i64, [64 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13SHA1TransformPjS_PKhb(i32* nocapture, i32*, i8*, i1 zeroext) local_unnamed_addr #0 {
  br i1 %3, label %5, label %7

5:                                                ; preds = %4
  %6 = bitcast i8* %2 to %union.CHAR64LONG16*
  br label %10

7:                                                ; preds = %4
  %8 = bitcast i32* %1 to %union.CHAR64LONG16*
  %9 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 1 %2, i64 64, i1 false)
  br label %10

10:                                               ; preds = %7, %5
  %11 = phi %union.CHAR64LONG16* [ %6, %5 ], [ %8, %7 ]
  %12 = load i32, i32* %0, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = xor i32 %18, %16
  %22 = and i32 %21, %14
  %23 = xor i32 %22, %18
  %24 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = tail call i32 @llvm.bswap.i32(i32 %25) #4
  store i32 %26, i32* %24, align 4
  %27 = shl i32 %12, 5
  %28 = lshr i32 %12, 27
  %29 = or i32 %27, %28
  %30 = add i32 %29, 1518500249
  %31 = add i32 %30, %20
  %32 = add i32 %31, %26
  %33 = add i32 %32, %23
  %34 = shl i32 %14, 30
  %35 = lshr i32 %14, 2
  %36 = or i32 %34, %35
  %37 = xor i32 %36, %16
  %38 = and i32 %37, %12
  %39 = xor i32 %38, %16
  %40 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = tail call i32 @llvm.bswap.i32(i32 %41) #4
  store i32 %42, i32* %40, align 4
  %43 = shl i32 %33, 5
  %44 = lshr i32 %33, 27
  %45 = or i32 %43, %44
  %46 = add i32 %18, 1518500249
  %47 = add i32 %46, %39
  %48 = add i32 %47, %42
  %49 = add i32 %48, %45
  %50 = shl i32 %12, 30
  %51 = lshr i32 %12, 2
  %52 = or i32 %50, %51
  %53 = xor i32 %36, %52
  %54 = and i32 %33, %53
  %55 = xor i32 %54, %36
  %56 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 2
  %57 = load i32, i32* %56, align 4
  %58 = tail call i32 @llvm.bswap.i32(i32 %57) #4
  store i32 %58, i32* %56, align 4
  %59 = shl i32 %49, 5
  %60 = lshr i32 %49, 27
  %61 = or i32 %59, %60
  %62 = add i32 %16, 1518500249
  %63 = add i32 %62, %58
  %64 = add i32 %63, %55
  %65 = add i32 %64, %61
  %66 = shl i32 %33, 30
  %67 = lshr i32 %33, 2
  %68 = or i32 %66, %67
  %69 = xor i32 %68, %52
  %70 = and i32 %49, %69
  %71 = xor i32 %70, %52
  %72 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 3
  %73 = load i32, i32* %72, align 4
  %74 = tail call i32 @llvm.bswap.i32(i32 %73) #4
  store i32 %74, i32* %72, align 4
  %75 = shl i32 %65, 5
  %76 = lshr i32 %65, 27
  %77 = or i32 %75, %76
  %78 = add i32 %36, 1518500249
  %79 = add i32 %78, %74
  %80 = add i32 %79, %71
  %81 = add i32 %80, %77
  %82 = shl i32 %49, 30
  %83 = lshr i32 %49, 2
  %84 = or i32 %82, %83
  %85 = xor i32 %84, %68
  %86 = and i32 %65, %85
  %87 = xor i32 %86, %68
  %88 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 4
  %89 = load i32, i32* %88, align 4
  %90 = tail call i32 @llvm.bswap.i32(i32 %89) #4
  store i32 %90, i32* %88, align 4
  %91 = shl i32 %81, 5
  %92 = lshr i32 %81, 27
  %93 = or i32 %91, %92
  %94 = add i32 %52, 1518500249
  %95 = add i32 %94, %90
  %96 = add i32 %95, %87
  %97 = add i32 %96, %93
  %98 = shl i32 %65, 30
  %99 = lshr i32 %65, 2
  %100 = or i32 %98, %99
  %101 = xor i32 %100, %84
  %102 = and i32 %81, %101
  %103 = xor i32 %102, %84
  %104 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 5
  %105 = load i32, i32* %104, align 4
  %106 = tail call i32 @llvm.bswap.i32(i32 %105) #4
  store i32 %106, i32* %104, align 4
  %107 = shl i32 %97, 5
  %108 = lshr i32 %97, 27
  %109 = or i32 %107, %108
  %110 = add i32 %68, 1518500249
  %111 = add i32 %110, %106
  %112 = add i32 %111, %103
  %113 = add i32 %112, %109
  %114 = shl i32 %81, 30
  %115 = lshr i32 %81, 2
  %116 = or i32 %114, %115
  %117 = xor i32 %116, %100
  %118 = and i32 %97, %117
  %119 = xor i32 %118, %100
  %120 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 6
  %121 = load i32, i32* %120, align 4
  %122 = tail call i32 @llvm.bswap.i32(i32 %121) #4
  store i32 %122, i32* %120, align 4
  %123 = shl i32 %113, 5
  %124 = lshr i32 %113, 27
  %125 = or i32 %123, %124
  %126 = add i32 %84, 1518500249
  %127 = add i32 %126, %122
  %128 = add i32 %127, %119
  %129 = add i32 %128, %125
  %130 = shl i32 %97, 30
  %131 = lshr i32 %97, 2
  %132 = or i32 %130, %131
  %133 = xor i32 %132, %116
  %134 = and i32 %113, %133
  %135 = xor i32 %134, %116
  %136 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 7
  %137 = load i32, i32* %136, align 4
  %138 = tail call i32 @llvm.bswap.i32(i32 %137) #4
  store i32 %138, i32* %136, align 4
  %139 = shl i32 %129, 5
  %140 = lshr i32 %129, 27
  %141 = or i32 %139, %140
  %142 = add i32 %138, 1518500249
  %143 = add i32 %142, %100
  %144 = add i32 %143, %135
  %145 = add i32 %144, %141
  %146 = shl i32 %113, 30
  %147 = lshr i32 %113, 2
  %148 = or i32 %146, %147
  %149 = xor i32 %148, %132
  %150 = and i32 %129, %149
  %151 = xor i32 %150, %132
  %152 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 8
  %153 = load i32, i32* %152, align 4
  %154 = tail call i32 @llvm.bswap.i32(i32 %153) #4
  store i32 %154, i32* %152, align 4
  %155 = shl i32 %145, 5
  %156 = lshr i32 %145, 27
  %157 = or i32 %155, %156
  %158 = add i32 %154, 1518500249
  %159 = add i32 %158, %116
  %160 = add i32 %159, %151
  %161 = add i32 %160, %157
  %162 = shl i32 %129, 30
  %163 = lshr i32 %129, 2
  %164 = or i32 %162, %163
  %165 = xor i32 %164, %148
  %166 = and i32 %145, %165
  %167 = xor i32 %166, %148
  %168 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 9
  %169 = load i32, i32* %168, align 4
  %170 = tail call i32 @llvm.bswap.i32(i32 %169) #4
  store i32 %170, i32* %168, align 4
  %171 = shl i32 %161, 5
  %172 = lshr i32 %161, 27
  %173 = or i32 %171, %172
  %174 = add i32 %170, 1518500249
  %175 = add i32 %174, %132
  %176 = add i32 %175, %167
  %177 = add i32 %176, %173
  %178 = shl i32 %145, 30
  %179 = lshr i32 %145, 2
  %180 = or i32 %178, %179
  %181 = xor i32 %180, %164
  %182 = and i32 %161, %181
  %183 = xor i32 %182, %164
  %184 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 10
  %185 = load i32, i32* %184, align 4
  %186 = tail call i32 @llvm.bswap.i32(i32 %185) #4
  store i32 %186, i32* %184, align 4
  %187 = shl i32 %177, 5
  %188 = lshr i32 %177, 27
  %189 = or i32 %187, %188
  %190 = add i32 %186, 1518500249
  %191 = add i32 %190, %148
  %192 = add i32 %191, %183
  %193 = add i32 %192, %189
  %194 = shl i32 %161, 30
  %195 = lshr i32 %161, 2
  %196 = or i32 %194, %195
  %197 = xor i32 %196, %180
  %198 = and i32 %177, %197
  %199 = xor i32 %198, %180
  %200 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 11
  %201 = load i32, i32* %200, align 4
  %202 = tail call i32 @llvm.bswap.i32(i32 %201) #4
  store i32 %202, i32* %200, align 4
  %203 = shl i32 %193, 5
  %204 = lshr i32 %193, 27
  %205 = or i32 %203, %204
  %206 = add i32 %202, 1518500249
  %207 = add i32 %206, %164
  %208 = add i32 %207, %199
  %209 = add i32 %208, %205
  %210 = shl i32 %177, 30
  %211 = lshr i32 %177, 2
  %212 = or i32 %210, %211
  %213 = xor i32 %212, %196
  %214 = and i32 %193, %213
  %215 = xor i32 %214, %196
  %216 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 12
  %217 = load i32, i32* %216, align 4
  %218 = tail call i32 @llvm.bswap.i32(i32 %217) #4
  store i32 %218, i32* %216, align 4
  %219 = shl i32 %209, 5
  %220 = lshr i32 %209, 27
  %221 = or i32 %219, %220
  %222 = add i32 %218, 1518500249
  %223 = add i32 %222, %180
  %224 = add i32 %223, %215
  %225 = add i32 %224, %221
  %226 = shl i32 %193, 30
  %227 = lshr i32 %193, 2
  %228 = or i32 %226, %227
  %229 = xor i32 %228, %212
  %230 = and i32 %209, %229
  %231 = xor i32 %230, %212
  %232 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 13
  %233 = load i32, i32* %232, align 4
  %234 = tail call i32 @llvm.bswap.i32(i32 %233) #4
  store i32 %234, i32* %232, align 4
  %235 = shl i32 %225, 5
  %236 = lshr i32 %225, 27
  %237 = or i32 %235, %236
  %238 = add i32 %234, 1518500249
  %239 = add i32 %238, %196
  %240 = add i32 %239, %231
  %241 = add i32 %240, %237
  %242 = shl i32 %209, 30
  %243 = lshr i32 %209, 2
  %244 = or i32 %242, %243
  %245 = xor i32 %244, %228
  %246 = and i32 %225, %245
  %247 = xor i32 %246, %228
  %248 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 14
  %249 = load i32, i32* %248, align 4
  %250 = tail call i32 @llvm.bswap.i32(i32 %249) #4
  store i32 %250, i32* %248, align 4
  %251 = shl i32 %241, 5
  %252 = lshr i32 %241, 27
  %253 = or i32 %251, %252
  %254 = add i32 %250, 1518500249
  %255 = add i32 %254, %212
  %256 = add i32 %255, %247
  %257 = add i32 %256, %253
  %258 = shl i32 %225, 30
  %259 = lshr i32 %225, 2
  %260 = or i32 %258, %259
  %261 = xor i32 %260, %244
  %262 = and i32 %241, %261
  %263 = xor i32 %262, %244
  %264 = getelementptr inbounds %union.CHAR64LONG16, %union.CHAR64LONG16* %11, i64 0, i32 0, i64 15
  %265 = load i32, i32* %264, align 4
  %266 = tail call i32 @llvm.bswap.i32(i32 %265) #4
  store i32 %266, i32* %264, align 4
  %267 = shl i32 %257, 5
  %268 = lshr i32 %257, 27
  %269 = or i32 %267, %268
  %270 = add i32 %266, 1518500249
  %271 = add i32 %270, %228
  %272 = add i32 %271, %263
  %273 = add i32 %272, %269
  %274 = shl i32 %241, 30
  %275 = lshr i32 %241, 2
  %276 = or i32 %274, %275
  %277 = xor i32 %276, %260
  %278 = and i32 %257, %277
  %279 = xor i32 %278, %260
  %280 = xor i32 %58, %26
  %281 = xor i32 %280, %154
  %282 = xor i32 %281, %234
  %283 = shl i32 %282, 1
  %284 = lshr i32 %282, 31
  %285 = or i32 %283, %284
  store i32 %285, i32* %24, align 4
  %286 = shl i32 %273, 5
  %287 = lshr i32 %273, 27
  %288 = or i32 %286, %287
  %289 = add i32 %285, 1518500249
  %290 = add i32 %289, %244
  %291 = add i32 %290, %279
  %292 = add i32 %291, %288
  %293 = shl i32 %257, 30
  %294 = lshr i32 %257, 2
  %295 = or i32 %293, %294
  %296 = xor i32 %295, %276
  %297 = and i32 %273, %296
  %298 = xor i32 %297, %276
  %299 = xor i32 %74, %42
  %300 = xor i32 %299, %170
  %301 = xor i32 %300, %250
  %302 = shl i32 %301, 1
  %303 = lshr i32 %301, 31
  %304 = or i32 %302, %303
  store i32 %304, i32* %40, align 4
  %305 = shl i32 %292, 5
  %306 = lshr i32 %292, 27
  %307 = or i32 %305, %306
  %308 = add i32 %304, 1518500249
  %309 = add i32 %308, %260
  %310 = add i32 %309, %298
  %311 = add i32 %310, %307
  %312 = shl i32 %273, 30
  %313 = lshr i32 %273, 2
  %314 = or i32 %312, %313
  %315 = xor i32 %314, %295
  %316 = and i32 %292, %315
  %317 = xor i32 %316, %295
  %318 = xor i32 %90, %58
  %319 = xor i32 %318, %186
  %320 = xor i32 %319, %266
  %321 = shl i32 %320, 1
  %322 = lshr i32 %320, 31
  %323 = or i32 %321, %322
  store i32 %323, i32* %56, align 4
  %324 = shl i32 %311, 5
  %325 = lshr i32 %311, 27
  %326 = or i32 %324, %325
  %327 = add i32 %323, 1518500249
  %328 = add i32 %327, %276
  %329 = add i32 %328, %317
  %330 = add i32 %329, %326
  %331 = shl i32 %292, 30
  %332 = lshr i32 %292, 2
  %333 = or i32 %331, %332
  %334 = xor i32 %333, %314
  %335 = and i32 %311, %334
  %336 = xor i32 %335, %314
  %337 = xor i32 %106, %74
  %338 = xor i32 %337, %202
  %339 = xor i32 %338, %285
  %340 = shl i32 %339, 1
  %341 = lshr i32 %339, 31
  %342 = or i32 %340, %341
  store i32 %342, i32* %72, align 4
  %343 = shl i32 %330, 5
  %344 = lshr i32 %330, 27
  %345 = or i32 %343, %344
  %346 = add i32 %342, 1518500249
  %347 = add i32 %346, %295
  %348 = add i32 %347, %336
  %349 = add i32 %348, %345
  %350 = shl i32 %311, 30
  %351 = lshr i32 %311, 2
  %352 = or i32 %350, %351
  %353 = xor i32 %352, %333
  %354 = xor i32 %353, %330
  %355 = xor i32 %122, %90
  %356 = xor i32 %355, %218
  %357 = xor i32 %356, %304
  %358 = shl i32 %357, 1
  %359 = lshr i32 %357, 31
  %360 = or i32 %358, %359
  store i32 %360, i32* %88, align 4
  %361 = shl i32 %349, 5
  %362 = lshr i32 %349, 27
  %363 = or i32 %361, %362
  %364 = add i32 %360, 1859775393
  %365 = add i32 %364, %314
  %366 = add i32 %365, %354
  %367 = add i32 %366, %363
  %368 = shl i32 %330, 30
  %369 = lshr i32 %330, 2
  %370 = or i32 %368, %369
  %371 = xor i32 %370, %352
  %372 = xor i32 %371, %349
  %373 = xor i32 %138, %106
  %374 = xor i32 %373, %234
  %375 = xor i32 %374, %323
  %376 = shl i32 %375, 1
  %377 = lshr i32 %375, 31
  %378 = or i32 %376, %377
  store i32 %378, i32* %104, align 4
  %379 = shl i32 %367, 5
  %380 = lshr i32 %367, 27
  %381 = or i32 %379, %380
  %382 = add i32 %378, 1859775393
  %383 = add i32 %382, %333
  %384 = add i32 %383, %372
  %385 = add i32 %384, %381
  %386 = shl i32 %349, 30
  %387 = lshr i32 %349, 2
  %388 = or i32 %386, %387
  %389 = xor i32 %388, %370
  %390 = xor i32 %389, %367
  %391 = xor i32 %154, %122
  %392 = xor i32 %391, %250
  %393 = xor i32 %392, %342
  %394 = shl i32 %393, 1
  %395 = lshr i32 %393, 31
  %396 = or i32 %394, %395
  store i32 %396, i32* %120, align 4
  %397 = shl i32 %385, 5
  %398 = lshr i32 %385, 27
  %399 = or i32 %397, %398
  %400 = add i32 %396, 1859775393
  %401 = add i32 %400, %352
  %402 = add i32 %401, %390
  %403 = add i32 %402, %399
  %404 = shl i32 %367, 30
  %405 = lshr i32 %367, 2
  %406 = or i32 %404, %405
  %407 = xor i32 %406, %388
  %408 = xor i32 %407, %385
  %409 = xor i32 %170, %138
  %410 = xor i32 %409, %266
  %411 = xor i32 %410, %360
  %412 = shl i32 %411, 1
  %413 = lshr i32 %411, 31
  %414 = or i32 %412, %413
  store i32 %414, i32* %136, align 4
  %415 = shl i32 %403, 5
  %416 = lshr i32 %403, 27
  %417 = or i32 %415, %416
  %418 = add i32 %414, 1859775393
  %419 = add i32 %418, %370
  %420 = add i32 %419, %408
  %421 = add i32 %420, %417
  %422 = shl i32 %385, 30
  %423 = lshr i32 %385, 2
  %424 = or i32 %422, %423
  %425 = xor i32 %424, %406
  %426 = xor i32 %425, %403
  %427 = xor i32 %186, %154
  %428 = xor i32 %427, %285
  %429 = xor i32 %428, %378
  %430 = shl i32 %429, 1
  %431 = lshr i32 %429, 31
  %432 = or i32 %430, %431
  store i32 %432, i32* %152, align 4
  %433 = shl i32 %421, 5
  %434 = lshr i32 %421, 27
  %435 = or i32 %433, %434
  %436 = add i32 %432, 1859775393
  %437 = add i32 %436, %388
  %438 = add i32 %437, %426
  %439 = add i32 %438, %435
  %440 = shl i32 %403, 30
  %441 = lshr i32 %403, 2
  %442 = or i32 %440, %441
  %443 = xor i32 %442, %424
  %444 = xor i32 %443, %421
  %445 = xor i32 %202, %170
  %446 = xor i32 %445, %304
  %447 = xor i32 %446, %396
  %448 = shl i32 %447, 1
  %449 = lshr i32 %447, 31
  %450 = or i32 %448, %449
  store i32 %450, i32* %168, align 4
  %451 = shl i32 %439, 5
  %452 = lshr i32 %439, 27
  %453 = or i32 %451, %452
  %454 = add i32 %450, 1859775393
  %455 = add i32 %454, %406
  %456 = add i32 %455, %444
  %457 = add i32 %456, %453
  %458 = shl i32 %421, 30
  %459 = lshr i32 %421, 2
  %460 = or i32 %458, %459
  %461 = xor i32 %460, %442
  %462 = xor i32 %461, %439
  %463 = xor i32 %218, %186
  %464 = xor i32 %463, %323
  %465 = xor i32 %464, %414
  %466 = shl i32 %465, 1
  %467 = lshr i32 %465, 31
  %468 = or i32 %466, %467
  store i32 %468, i32* %184, align 4
  %469 = shl i32 %457, 5
  %470 = lshr i32 %457, 27
  %471 = or i32 %469, %470
  %472 = add i32 %468, 1859775393
  %473 = add i32 %472, %424
  %474 = add i32 %473, %462
  %475 = add i32 %474, %471
  %476 = shl i32 %439, 30
  %477 = lshr i32 %439, 2
  %478 = or i32 %476, %477
  %479 = xor i32 %478, %460
  %480 = xor i32 %479, %457
  %481 = xor i32 %234, %202
  %482 = xor i32 %481, %342
  %483 = xor i32 %482, %432
  %484 = shl i32 %483, 1
  %485 = lshr i32 %483, 31
  %486 = or i32 %484, %485
  store i32 %486, i32* %200, align 4
  %487 = shl i32 %475, 5
  %488 = lshr i32 %475, 27
  %489 = or i32 %487, %488
  %490 = add i32 %486, 1859775393
  %491 = add i32 %490, %442
  %492 = add i32 %491, %480
  %493 = add i32 %492, %489
  %494 = shl i32 %457, 30
  %495 = lshr i32 %457, 2
  %496 = or i32 %494, %495
  %497 = xor i32 %496, %478
  %498 = xor i32 %497, %475
  %499 = xor i32 %250, %218
  %500 = xor i32 %499, %360
  %501 = xor i32 %500, %450
  %502 = shl i32 %501, 1
  %503 = lshr i32 %501, 31
  %504 = or i32 %502, %503
  store i32 %504, i32* %216, align 4
  %505 = shl i32 %493, 5
  %506 = lshr i32 %493, 27
  %507 = or i32 %505, %506
  %508 = add i32 %504, 1859775393
  %509 = add i32 %508, %460
  %510 = add i32 %509, %498
  %511 = add i32 %510, %507
  %512 = shl i32 %475, 30
  %513 = lshr i32 %475, 2
  %514 = or i32 %512, %513
  %515 = xor i32 %514, %496
  %516 = xor i32 %515, %493
  %517 = xor i32 %266, %234
  %518 = xor i32 %517, %378
  %519 = xor i32 %518, %468
  %520 = shl i32 %519, 1
  %521 = lshr i32 %519, 31
  %522 = or i32 %520, %521
  store i32 %522, i32* %232, align 4
  %523 = shl i32 %511, 5
  %524 = lshr i32 %511, 27
  %525 = or i32 %523, %524
  %526 = add i32 %522, 1859775393
  %527 = add i32 %526, %478
  %528 = add i32 %527, %516
  %529 = add i32 %528, %525
  %530 = shl i32 %493, 30
  %531 = lshr i32 %493, 2
  %532 = or i32 %530, %531
  %533 = xor i32 %532, %514
  %534 = xor i32 %533, %511
  %535 = xor i32 %285, %250
  %536 = xor i32 %535, %396
  %537 = xor i32 %536, %486
  %538 = shl i32 %537, 1
  %539 = lshr i32 %537, 31
  %540 = or i32 %538, %539
  store i32 %540, i32* %248, align 4
  %541 = shl i32 %529, 5
  %542 = lshr i32 %529, 27
  %543 = or i32 %541, %542
  %544 = add i32 %540, 1859775393
  %545 = add i32 %544, %496
  %546 = add i32 %545, %534
  %547 = add i32 %546, %543
  %548 = shl i32 %511, 30
  %549 = lshr i32 %511, 2
  %550 = or i32 %548, %549
  %551 = xor i32 %550, %532
  %552 = xor i32 %551, %529
  %553 = xor i32 %304, %266
  %554 = xor i32 %553, %414
  %555 = xor i32 %554, %504
  %556 = shl i32 %555, 1
  %557 = lshr i32 %555, 31
  %558 = or i32 %556, %557
  store i32 %558, i32* %264, align 4
  %559 = shl i32 %547, 5
  %560 = lshr i32 %547, 27
  %561 = or i32 %559, %560
  %562 = add i32 %558, 1859775393
  %563 = add i32 %562, %514
  %564 = add i32 %563, %552
  %565 = add i32 %564, %561
  %566 = shl i32 %529, 30
  %567 = lshr i32 %529, 2
  %568 = or i32 %566, %567
  %569 = xor i32 %568, %550
  %570 = xor i32 %569, %547
  %571 = xor i32 %323, %285
  %572 = xor i32 %571, %432
  %573 = xor i32 %572, %522
  %574 = shl i32 %573, 1
  %575 = lshr i32 %573, 31
  %576 = or i32 %574, %575
  store i32 %576, i32* %24, align 4
  %577 = shl i32 %565, 5
  %578 = lshr i32 %565, 27
  %579 = or i32 %577, %578
  %580 = add i32 %576, 1859775393
  %581 = add i32 %580, %532
  %582 = add i32 %581, %570
  %583 = add i32 %582, %579
  %584 = shl i32 %547, 30
  %585 = lshr i32 %547, 2
  %586 = or i32 %584, %585
  %587 = xor i32 %586, %568
  %588 = xor i32 %587, %565
  %589 = xor i32 %342, %304
  %590 = xor i32 %589, %450
  %591 = xor i32 %590, %540
  %592 = shl i32 %591, 1
  %593 = lshr i32 %591, 31
  %594 = or i32 %592, %593
  store i32 %594, i32* %40, align 4
  %595 = shl i32 %583, 5
  %596 = lshr i32 %583, 27
  %597 = or i32 %595, %596
  %598 = add i32 %594, 1859775393
  %599 = add i32 %598, %550
  %600 = add i32 %599, %588
  %601 = add i32 %600, %597
  %602 = shl i32 %565, 30
  %603 = lshr i32 %565, 2
  %604 = or i32 %602, %603
  %605 = xor i32 %604, %586
  %606 = xor i32 %605, %583
  %607 = xor i32 %360, %323
  %608 = xor i32 %607, %468
  %609 = xor i32 %608, %558
  %610 = shl i32 %609, 1
  %611 = lshr i32 %609, 31
  %612 = or i32 %610, %611
  store i32 %612, i32* %56, align 4
  %613 = shl i32 %601, 5
  %614 = lshr i32 %601, 27
  %615 = or i32 %613, %614
  %616 = add i32 %612, 1859775393
  %617 = add i32 %616, %568
  %618 = add i32 %617, %606
  %619 = add i32 %618, %615
  %620 = shl i32 %583, 30
  %621 = lshr i32 %583, 2
  %622 = or i32 %620, %621
  %623 = xor i32 %622, %604
  %624 = xor i32 %623, %601
  %625 = xor i32 %378, %342
  %626 = xor i32 %625, %486
  %627 = xor i32 %626, %576
  %628 = shl i32 %627, 1
  %629 = lshr i32 %627, 31
  %630 = or i32 %628, %629
  store i32 %630, i32* %72, align 4
  %631 = shl i32 %619, 5
  %632 = lshr i32 %619, 27
  %633 = or i32 %631, %632
  %634 = add i32 %630, 1859775393
  %635 = add i32 %634, %586
  %636 = add i32 %635, %624
  %637 = add i32 %636, %633
  %638 = shl i32 %601, 30
  %639 = lshr i32 %601, 2
  %640 = or i32 %638, %639
  %641 = xor i32 %640, %622
  %642 = xor i32 %641, %619
  %643 = xor i32 %396, %360
  %644 = xor i32 %643, %504
  %645 = xor i32 %644, %594
  %646 = shl i32 %645, 1
  %647 = lshr i32 %645, 31
  %648 = or i32 %646, %647
  store i32 %648, i32* %88, align 4
  %649 = shl i32 %637, 5
  %650 = lshr i32 %637, 27
  %651 = or i32 %649, %650
  %652 = add i32 %648, 1859775393
  %653 = add i32 %652, %604
  %654 = add i32 %653, %642
  %655 = add i32 %654, %651
  %656 = shl i32 %619, 30
  %657 = lshr i32 %619, 2
  %658 = or i32 %656, %657
  %659 = xor i32 %658, %640
  %660 = xor i32 %659, %637
  %661 = xor i32 %414, %378
  %662 = xor i32 %661, %522
  %663 = xor i32 %662, %612
  %664 = shl i32 %663, 1
  %665 = lshr i32 %663, 31
  %666 = or i32 %664, %665
  store i32 %666, i32* %104, align 4
  %667 = shl i32 %655, 5
  %668 = lshr i32 %655, 27
  %669 = or i32 %667, %668
  %670 = add i32 %666, 1859775393
  %671 = add i32 %670, %622
  %672 = add i32 %671, %660
  %673 = add i32 %672, %669
  %674 = shl i32 %637, 30
  %675 = lshr i32 %637, 2
  %676 = or i32 %674, %675
  %677 = xor i32 %676, %658
  %678 = xor i32 %677, %655
  %679 = xor i32 %432, %396
  %680 = xor i32 %679, %540
  %681 = xor i32 %680, %630
  %682 = shl i32 %681, 1
  %683 = lshr i32 %681, 31
  %684 = or i32 %682, %683
  store i32 %684, i32* %120, align 4
  %685 = shl i32 %673, 5
  %686 = lshr i32 %673, 27
  %687 = or i32 %685, %686
  %688 = add i32 %684, 1859775393
  %689 = add i32 %688, %640
  %690 = add i32 %689, %678
  %691 = add i32 %690, %687
  %692 = shl i32 %655, 30
  %693 = lshr i32 %655, 2
  %694 = or i32 %692, %693
  %695 = xor i32 %694, %676
  %696 = xor i32 %695, %673
  %697 = xor i32 %450, %414
  %698 = xor i32 %697, %558
  %699 = xor i32 %698, %648
  %700 = shl i32 %699, 1
  %701 = lshr i32 %699, 31
  %702 = or i32 %700, %701
  store i32 %702, i32* %136, align 4
  %703 = shl i32 %691, 5
  %704 = lshr i32 %691, 27
  %705 = or i32 %703, %704
  %706 = add i32 %702, 1859775393
  %707 = add i32 %706, %658
  %708 = add i32 %707, %696
  %709 = add i32 %708, %705
  %710 = shl i32 %673, 30
  %711 = lshr i32 %673, 2
  %712 = or i32 %710, %711
  %713 = or i32 %691, %712
  %714 = and i32 %713, %694
  %715 = and i32 %691, %712
  %716 = or i32 %714, %715
  %717 = xor i32 %468, %432
  %718 = xor i32 %717, %576
  %719 = xor i32 %718, %666
  %720 = shl i32 %719, 1
  %721 = lshr i32 %719, 31
  %722 = or i32 %720, %721
  store i32 %722, i32* %152, align 4
  %723 = shl i32 %709, 5
  %724 = lshr i32 %709, 27
  %725 = or i32 %723, %724
  %726 = add i32 %722, -1894007588
  %727 = add i32 %726, %676
  %728 = add i32 %727, %716
  %729 = add i32 %728, %725
  %730 = shl i32 %691, 30
  %731 = lshr i32 %691, 2
  %732 = or i32 %730, %731
  %733 = or i32 %709, %732
  %734 = and i32 %733, %712
  %735 = and i32 %709, %732
  %736 = or i32 %734, %735
  %737 = xor i32 %486, %450
  %738 = xor i32 %737, %594
  %739 = xor i32 %738, %684
  %740 = shl i32 %739, 1
  %741 = lshr i32 %739, 31
  %742 = or i32 %740, %741
  store i32 %742, i32* %168, align 4
  %743 = shl i32 %729, 5
  %744 = lshr i32 %729, 27
  %745 = or i32 %743, %744
  %746 = add i32 %742, -1894007588
  %747 = add i32 %746, %694
  %748 = add i32 %747, %736
  %749 = add i32 %748, %745
  %750 = shl i32 %709, 30
  %751 = lshr i32 %709, 2
  %752 = or i32 %750, %751
  %753 = or i32 %729, %752
  %754 = and i32 %753, %732
  %755 = and i32 %729, %752
  %756 = or i32 %754, %755
  %757 = xor i32 %504, %468
  %758 = xor i32 %757, %612
  %759 = xor i32 %758, %702
  %760 = shl i32 %759, 1
  %761 = lshr i32 %759, 31
  %762 = or i32 %760, %761
  store i32 %762, i32* %184, align 4
  %763 = shl i32 %749, 5
  %764 = lshr i32 %749, 27
  %765 = or i32 %763, %764
  %766 = add i32 %762, -1894007588
  %767 = add i32 %766, %712
  %768 = add i32 %767, %756
  %769 = add i32 %768, %765
  %770 = shl i32 %729, 30
  %771 = lshr i32 %729, 2
  %772 = or i32 %770, %771
  %773 = or i32 %749, %772
  %774 = and i32 %773, %752
  %775 = and i32 %749, %772
  %776 = or i32 %774, %775
  %777 = xor i32 %522, %486
  %778 = xor i32 %777, %630
  %779 = xor i32 %778, %722
  %780 = shl i32 %779, 1
  %781 = lshr i32 %779, 31
  %782 = or i32 %780, %781
  store i32 %782, i32* %200, align 4
  %783 = shl i32 %769, 5
  %784 = lshr i32 %769, 27
  %785 = or i32 %783, %784
  %786 = add i32 %782, -1894007588
  %787 = add i32 %786, %732
  %788 = add i32 %787, %776
  %789 = add i32 %788, %785
  %790 = shl i32 %749, 30
  %791 = lshr i32 %749, 2
  %792 = or i32 %790, %791
  %793 = or i32 %769, %792
  %794 = and i32 %793, %772
  %795 = and i32 %769, %792
  %796 = or i32 %794, %795
  %797 = xor i32 %540, %504
  %798 = xor i32 %797, %648
  %799 = xor i32 %798, %742
  %800 = shl i32 %799, 1
  %801 = lshr i32 %799, 31
  %802 = or i32 %800, %801
  store i32 %802, i32* %216, align 4
  %803 = shl i32 %789, 5
  %804 = lshr i32 %789, 27
  %805 = or i32 %803, %804
  %806 = add i32 %802, -1894007588
  %807 = add i32 %806, %752
  %808 = add i32 %807, %796
  %809 = add i32 %808, %805
  %810 = shl i32 %769, 30
  %811 = lshr i32 %769, 2
  %812 = or i32 %810, %811
  %813 = or i32 %789, %812
  %814 = and i32 %813, %792
  %815 = and i32 %789, %812
  %816 = or i32 %814, %815
  %817 = xor i32 %558, %522
  %818 = xor i32 %817, %666
  %819 = xor i32 %818, %762
  %820 = shl i32 %819, 1
  %821 = lshr i32 %819, 31
  %822 = or i32 %820, %821
  store i32 %822, i32* %232, align 4
  %823 = shl i32 %809, 5
  %824 = lshr i32 %809, 27
  %825 = or i32 %823, %824
  %826 = add i32 %822, -1894007588
  %827 = add i32 %826, %772
  %828 = add i32 %827, %816
  %829 = add i32 %828, %825
  %830 = shl i32 %789, 30
  %831 = lshr i32 %789, 2
  %832 = or i32 %830, %831
  %833 = or i32 %809, %832
  %834 = and i32 %833, %812
  %835 = and i32 %809, %832
  %836 = or i32 %834, %835
  %837 = xor i32 %576, %540
  %838 = xor i32 %837, %684
  %839 = xor i32 %838, %782
  %840 = shl i32 %839, 1
  %841 = lshr i32 %839, 31
  %842 = or i32 %840, %841
  store i32 %842, i32* %248, align 4
  %843 = shl i32 %829, 5
  %844 = lshr i32 %829, 27
  %845 = or i32 %843, %844
  %846 = add i32 %842, -1894007588
  %847 = add i32 %846, %792
  %848 = add i32 %847, %836
  %849 = add i32 %848, %845
  %850 = shl i32 %809, 30
  %851 = lshr i32 %809, 2
  %852 = or i32 %850, %851
  %853 = or i32 %829, %852
  %854 = and i32 %853, %832
  %855 = and i32 %829, %852
  %856 = or i32 %854, %855
  %857 = xor i32 %594, %558
  %858 = xor i32 %857, %702
  %859 = xor i32 %858, %802
  %860 = shl i32 %859, 1
  %861 = lshr i32 %859, 31
  %862 = or i32 %860, %861
  store i32 %862, i32* %264, align 4
  %863 = shl i32 %849, 5
  %864 = lshr i32 %849, 27
  %865 = or i32 %863, %864
  %866 = add i32 %862, -1894007588
  %867 = add i32 %866, %812
  %868 = add i32 %867, %856
  %869 = add i32 %868, %865
  %870 = shl i32 %829, 30
  %871 = lshr i32 %829, 2
  %872 = or i32 %870, %871
  %873 = or i32 %849, %872
  %874 = and i32 %873, %852
  %875 = and i32 %849, %872
  %876 = or i32 %874, %875
  %877 = xor i32 %612, %576
  %878 = xor i32 %877, %722
  %879 = xor i32 %878, %822
  %880 = shl i32 %879, 1
  %881 = lshr i32 %879, 31
  %882 = or i32 %880, %881
  store i32 %882, i32* %24, align 4
  %883 = shl i32 %869, 5
  %884 = lshr i32 %869, 27
  %885 = or i32 %883, %884
  %886 = add i32 %882, -1894007588
  %887 = add i32 %886, %832
  %888 = add i32 %887, %876
  %889 = add i32 %888, %885
  %890 = shl i32 %849, 30
  %891 = lshr i32 %849, 2
  %892 = or i32 %890, %891
  %893 = or i32 %869, %892
  %894 = and i32 %893, %872
  %895 = and i32 %869, %892
  %896 = or i32 %894, %895
  %897 = xor i32 %630, %594
  %898 = xor i32 %897, %742
  %899 = xor i32 %898, %842
  %900 = shl i32 %899, 1
  %901 = lshr i32 %899, 31
  %902 = or i32 %900, %901
  store i32 %902, i32* %40, align 4
  %903 = shl i32 %889, 5
  %904 = lshr i32 %889, 27
  %905 = or i32 %903, %904
  %906 = add i32 %902, -1894007588
  %907 = add i32 %906, %852
  %908 = add i32 %907, %896
  %909 = add i32 %908, %905
  %910 = shl i32 %869, 30
  %911 = lshr i32 %869, 2
  %912 = or i32 %910, %911
  %913 = or i32 %889, %912
  %914 = and i32 %913, %892
  %915 = and i32 %889, %912
  %916 = or i32 %914, %915
  %917 = xor i32 %648, %612
  %918 = xor i32 %917, %762
  %919 = xor i32 %918, %862
  %920 = shl i32 %919, 1
  %921 = lshr i32 %919, 31
  %922 = or i32 %920, %921
  store i32 %922, i32* %56, align 4
  %923 = shl i32 %909, 5
  %924 = lshr i32 %909, 27
  %925 = or i32 %923, %924
  %926 = add i32 %922, -1894007588
  %927 = add i32 %926, %872
  %928 = add i32 %927, %916
  %929 = add i32 %928, %925
  %930 = shl i32 %889, 30
  %931 = lshr i32 %889, 2
  %932 = or i32 %930, %931
  %933 = or i32 %909, %932
  %934 = and i32 %933, %912
  %935 = and i32 %909, %932
  %936 = or i32 %934, %935
  %937 = xor i32 %666, %630
  %938 = xor i32 %937, %782
  %939 = xor i32 %938, %882
  %940 = shl i32 %939, 1
  %941 = lshr i32 %939, 31
  %942 = or i32 %940, %941
  store i32 %942, i32* %72, align 4
  %943 = shl i32 %929, 5
  %944 = lshr i32 %929, 27
  %945 = or i32 %943, %944
  %946 = add i32 %942, -1894007588
  %947 = add i32 %946, %892
  %948 = add i32 %947, %936
  %949 = add i32 %948, %945
  %950 = shl i32 %909, 30
  %951 = lshr i32 %909, 2
  %952 = or i32 %950, %951
  %953 = or i32 %929, %952
  %954 = and i32 %953, %932
  %955 = and i32 %929, %952
  %956 = or i32 %954, %955
  %957 = xor i32 %684, %648
  %958 = xor i32 %957, %802
  %959 = xor i32 %958, %902
  %960 = shl i32 %959, 1
  %961 = lshr i32 %959, 31
  %962 = or i32 %960, %961
  store i32 %962, i32* %88, align 4
  %963 = shl i32 %949, 5
  %964 = lshr i32 %949, 27
  %965 = or i32 %963, %964
  %966 = add i32 %962, -1894007588
  %967 = add i32 %966, %912
  %968 = add i32 %967, %956
  %969 = add i32 %968, %965
  %970 = shl i32 %929, 30
  %971 = lshr i32 %929, 2
  %972 = or i32 %970, %971
  %973 = or i32 %949, %972
  %974 = and i32 %973, %952
  %975 = and i32 %949, %972
  %976 = or i32 %974, %975
  %977 = xor i32 %702, %666
  %978 = xor i32 %977, %822
  %979 = xor i32 %978, %922
  %980 = shl i32 %979, 1
  %981 = lshr i32 %979, 31
  %982 = or i32 %980, %981
  store i32 %982, i32* %104, align 4
  %983 = shl i32 %969, 5
  %984 = lshr i32 %969, 27
  %985 = or i32 %983, %984
  %986 = add i32 %982, -1894007588
  %987 = add i32 %986, %932
  %988 = add i32 %987, %976
  %989 = add i32 %988, %985
  %990 = shl i32 %949, 30
  %991 = lshr i32 %949, 2
  %992 = or i32 %990, %991
  %993 = or i32 %969, %992
  %994 = and i32 %993, %972
  %995 = and i32 %969, %992
  %996 = or i32 %994, %995
  %997 = xor i32 %722, %684
  %998 = xor i32 %997, %842
  %999 = xor i32 %998, %942
  %1000 = shl i32 %999, 1
  %1001 = lshr i32 %999, 31
  %1002 = or i32 %1000, %1001
  store i32 %1002, i32* %120, align 4
  %1003 = shl i32 %989, 5
  %1004 = lshr i32 %989, 27
  %1005 = or i32 %1003, %1004
  %1006 = add i32 %1002, -1894007588
  %1007 = add i32 %1006, %952
  %1008 = add i32 %1007, %996
  %1009 = add i32 %1008, %1005
  %1010 = shl i32 %969, 30
  %1011 = lshr i32 %969, 2
  %1012 = or i32 %1010, %1011
  %1013 = or i32 %989, %1012
  %1014 = and i32 %1013, %992
  %1015 = and i32 %989, %1012
  %1016 = or i32 %1014, %1015
  %1017 = xor i32 %742, %702
  %1018 = xor i32 %1017, %862
  %1019 = xor i32 %1018, %962
  %1020 = shl i32 %1019, 1
  %1021 = lshr i32 %1019, 31
  %1022 = or i32 %1020, %1021
  store i32 %1022, i32* %136, align 4
  %1023 = shl i32 %1009, 5
  %1024 = lshr i32 %1009, 27
  %1025 = or i32 %1023, %1024
  %1026 = add i32 %1022, -1894007588
  %1027 = add i32 %1026, %972
  %1028 = add i32 %1027, %1016
  %1029 = add i32 %1028, %1025
  %1030 = shl i32 %989, 30
  %1031 = lshr i32 %989, 2
  %1032 = or i32 %1030, %1031
  %1033 = or i32 %1009, %1032
  %1034 = and i32 %1033, %1012
  %1035 = and i32 %1009, %1032
  %1036 = or i32 %1034, %1035
  %1037 = xor i32 %762, %722
  %1038 = xor i32 %1037, %882
  %1039 = xor i32 %1038, %982
  %1040 = shl i32 %1039, 1
  %1041 = lshr i32 %1039, 31
  %1042 = or i32 %1040, %1041
  store i32 %1042, i32* %152, align 4
  %1043 = shl i32 %1029, 5
  %1044 = lshr i32 %1029, 27
  %1045 = or i32 %1043, %1044
  %1046 = add i32 %1042, -1894007588
  %1047 = add i32 %1046, %992
  %1048 = add i32 %1047, %1036
  %1049 = add i32 %1048, %1045
  %1050 = shl i32 %1009, 30
  %1051 = lshr i32 %1009, 2
  %1052 = or i32 %1050, %1051
  %1053 = or i32 %1029, %1052
  %1054 = and i32 %1053, %1032
  %1055 = and i32 %1029, %1052
  %1056 = or i32 %1054, %1055
  %1057 = xor i32 %782, %742
  %1058 = xor i32 %1057, %902
  %1059 = xor i32 %1058, %1002
  %1060 = shl i32 %1059, 1
  %1061 = lshr i32 %1059, 31
  %1062 = or i32 %1060, %1061
  store i32 %1062, i32* %168, align 4
  %1063 = shl i32 %1049, 5
  %1064 = lshr i32 %1049, 27
  %1065 = or i32 %1063, %1064
  %1066 = add i32 %1062, -1894007588
  %1067 = add i32 %1066, %1012
  %1068 = add i32 %1067, %1056
  %1069 = add i32 %1068, %1065
  %1070 = shl i32 %1029, 30
  %1071 = lshr i32 %1029, 2
  %1072 = or i32 %1070, %1071
  %1073 = or i32 %1049, %1072
  %1074 = and i32 %1073, %1052
  %1075 = and i32 %1049, %1072
  %1076 = or i32 %1074, %1075
  %1077 = xor i32 %802, %762
  %1078 = xor i32 %1077, %922
  %1079 = xor i32 %1078, %1022
  %1080 = shl i32 %1079, 1
  %1081 = lshr i32 %1079, 31
  %1082 = or i32 %1080, %1081
  store i32 %1082, i32* %184, align 4
  %1083 = shl i32 %1069, 5
  %1084 = lshr i32 %1069, 27
  %1085 = or i32 %1083, %1084
  %1086 = add i32 %1082, -1894007588
  %1087 = add i32 %1086, %1032
  %1088 = add i32 %1087, %1076
  %1089 = add i32 %1088, %1085
  %1090 = shl i32 %1049, 30
  %1091 = lshr i32 %1049, 2
  %1092 = or i32 %1090, %1091
  %1093 = or i32 %1069, %1092
  %1094 = and i32 %1093, %1072
  %1095 = and i32 %1069, %1092
  %1096 = or i32 %1094, %1095
  %1097 = xor i32 %822, %782
  %1098 = xor i32 %1097, %942
  %1099 = xor i32 %1098, %1042
  %1100 = shl i32 %1099, 1
  %1101 = lshr i32 %1099, 31
  %1102 = or i32 %1100, %1101
  store i32 %1102, i32* %200, align 4
  %1103 = shl i32 %1089, 5
  %1104 = lshr i32 %1089, 27
  %1105 = or i32 %1103, %1104
  %1106 = add i32 %1102, -1894007588
  %1107 = add i32 %1106, %1052
  %1108 = add i32 %1107, %1096
  %1109 = add i32 %1108, %1105
  %1110 = shl i32 %1069, 30
  %1111 = lshr i32 %1069, 2
  %1112 = or i32 %1110, %1111
  %1113 = xor i32 %1112, %1092
  %1114 = xor i32 %1113, %1089
  %1115 = xor i32 %842, %802
  %1116 = xor i32 %1115, %962
  %1117 = xor i32 %1116, %1062
  %1118 = shl i32 %1117, 1
  %1119 = lshr i32 %1117, 31
  %1120 = or i32 %1118, %1119
  store i32 %1120, i32* %216, align 4
  %1121 = shl i32 %1109, 5
  %1122 = lshr i32 %1109, 27
  %1123 = or i32 %1121, %1122
  %1124 = add i32 %1120, -899497514
  %1125 = add i32 %1124, %1072
  %1126 = add i32 %1125, %1114
  %1127 = add i32 %1126, %1123
  %1128 = shl i32 %1089, 30
  %1129 = lshr i32 %1089, 2
  %1130 = or i32 %1128, %1129
  %1131 = xor i32 %1130, %1112
  %1132 = xor i32 %1131, %1109
  %1133 = xor i32 %862, %822
  %1134 = xor i32 %1133, %982
  %1135 = xor i32 %1134, %1082
  %1136 = shl i32 %1135, 1
  %1137 = lshr i32 %1135, 31
  %1138 = or i32 %1136, %1137
  store i32 %1138, i32* %232, align 4
  %1139 = shl i32 %1127, 5
  %1140 = lshr i32 %1127, 27
  %1141 = or i32 %1139, %1140
  %1142 = add i32 %1138, -899497514
  %1143 = add i32 %1142, %1092
  %1144 = add i32 %1143, %1132
  %1145 = add i32 %1144, %1141
  %1146 = shl i32 %1109, 30
  %1147 = lshr i32 %1109, 2
  %1148 = or i32 %1146, %1147
  %1149 = xor i32 %1148, %1130
  %1150 = xor i32 %1149, %1127
  %1151 = xor i32 %882, %842
  %1152 = xor i32 %1151, %1002
  %1153 = xor i32 %1152, %1102
  %1154 = shl i32 %1153, 1
  %1155 = lshr i32 %1153, 31
  %1156 = or i32 %1154, %1155
  store i32 %1156, i32* %248, align 4
  %1157 = shl i32 %1145, 5
  %1158 = lshr i32 %1145, 27
  %1159 = or i32 %1157, %1158
  %1160 = add i32 %1156, -899497514
  %1161 = add i32 %1160, %1112
  %1162 = add i32 %1161, %1150
  %1163 = add i32 %1162, %1159
  %1164 = shl i32 %1127, 30
  %1165 = lshr i32 %1127, 2
  %1166 = or i32 %1164, %1165
  %1167 = xor i32 %1166, %1148
  %1168 = xor i32 %1167, %1145
  %1169 = xor i32 %902, %862
  %1170 = xor i32 %1169, %1022
  %1171 = xor i32 %1170, %1120
  %1172 = shl i32 %1171, 1
  %1173 = lshr i32 %1171, 31
  %1174 = or i32 %1172, %1173
  store i32 %1174, i32* %264, align 4
  %1175 = shl i32 %1163, 5
  %1176 = lshr i32 %1163, 27
  %1177 = or i32 %1175, %1176
  %1178 = add i32 %1174, -899497514
  %1179 = add i32 %1178, %1130
  %1180 = add i32 %1179, %1168
  %1181 = add i32 %1180, %1177
  %1182 = shl i32 %1145, 30
  %1183 = lshr i32 %1145, 2
  %1184 = or i32 %1182, %1183
  %1185 = xor i32 %1184, %1166
  %1186 = xor i32 %1185, %1163
  %1187 = xor i32 %922, %882
  %1188 = xor i32 %1187, %1042
  %1189 = xor i32 %1188, %1138
  %1190 = shl i32 %1189, 1
  %1191 = lshr i32 %1189, 31
  %1192 = or i32 %1190, %1191
  store i32 %1192, i32* %24, align 4
  %1193 = shl i32 %1181, 5
  %1194 = lshr i32 %1181, 27
  %1195 = or i32 %1193, %1194
  %1196 = add i32 %1192, -899497514
  %1197 = add i32 %1196, %1148
  %1198 = add i32 %1197, %1186
  %1199 = add i32 %1198, %1195
  %1200 = shl i32 %1163, 30
  %1201 = lshr i32 %1163, 2
  %1202 = or i32 %1200, %1201
  %1203 = xor i32 %1202, %1184
  %1204 = xor i32 %1203, %1181
  %1205 = xor i32 %942, %902
  %1206 = xor i32 %1205, %1062
  %1207 = xor i32 %1206, %1156
  %1208 = shl i32 %1207, 1
  %1209 = lshr i32 %1207, 31
  %1210 = or i32 %1208, %1209
  store i32 %1210, i32* %40, align 4
  %1211 = shl i32 %1199, 5
  %1212 = lshr i32 %1199, 27
  %1213 = or i32 %1211, %1212
  %1214 = add i32 %1210, -899497514
  %1215 = add i32 %1214, %1166
  %1216 = add i32 %1215, %1204
  %1217 = add i32 %1216, %1213
  %1218 = shl i32 %1181, 30
  %1219 = lshr i32 %1181, 2
  %1220 = or i32 %1218, %1219
  %1221 = xor i32 %1220, %1202
  %1222 = xor i32 %1221, %1199
  %1223 = xor i32 %962, %922
  %1224 = xor i32 %1223, %1082
  %1225 = xor i32 %1224, %1174
  %1226 = shl i32 %1225, 1
  %1227 = lshr i32 %1225, 31
  %1228 = or i32 %1226, %1227
  store i32 %1228, i32* %56, align 4
  %1229 = shl i32 %1217, 5
  %1230 = lshr i32 %1217, 27
  %1231 = or i32 %1229, %1230
  %1232 = add i32 %1228, -899497514
  %1233 = add i32 %1232, %1184
  %1234 = add i32 %1233, %1222
  %1235 = add i32 %1234, %1231
  %1236 = shl i32 %1199, 30
  %1237 = lshr i32 %1199, 2
  %1238 = or i32 %1236, %1237
  %1239 = xor i32 %1238, %1220
  %1240 = xor i32 %1239, %1217
  %1241 = xor i32 %982, %942
  %1242 = xor i32 %1241, %1102
  %1243 = xor i32 %1242, %1192
  %1244 = shl i32 %1243, 1
  %1245 = lshr i32 %1243, 31
  %1246 = or i32 %1244, %1245
  store i32 %1246, i32* %72, align 4
  %1247 = shl i32 %1235, 5
  %1248 = lshr i32 %1235, 27
  %1249 = or i32 %1247, %1248
  %1250 = add i32 %1246, -899497514
  %1251 = add i32 %1250, %1202
  %1252 = add i32 %1251, %1240
  %1253 = add i32 %1252, %1249
  %1254 = shl i32 %1217, 30
  %1255 = lshr i32 %1217, 2
  %1256 = or i32 %1254, %1255
  %1257 = xor i32 %1256, %1238
  %1258 = xor i32 %1257, %1235
  %1259 = xor i32 %1002, %962
  %1260 = xor i32 %1259, %1120
  %1261 = xor i32 %1260, %1210
  %1262 = shl i32 %1261, 1
  %1263 = lshr i32 %1261, 31
  %1264 = or i32 %1262, %1263
  store i32 %1264, i32* %88, align 4
  %1265 = shl i32 %1253, 5
  %1266 = lshr i32 %1253, 27
  %1267 = or i32 %1265, %1266
  %1268 = add i32 %1264, -899497514
  %1269 = add i32 %1268, %1220
  %1270 = add i32 %1269, %1258
  %1271 = add i32 %1270, %1267
  %1272 = shl i32 %1235, 30
  %1273 = lshr i32 %1235, 2
  %1274 = or i32 %1272, %1273
  %1275 = xor i32 %1274, %1256
  %1276 = xor i32 %1275, %1253
  %1277 = xor i32 %1022, %982
  %1278 = xor i32 %1277, %1138
  %1279 = xor i32 %1278, %1228
  %1280 = shl i32 %1279, 1
  %1281 = lshr i32 %1279, 31
  %1282 = or i32 %1280, %1281
  store i32 %1282, i32* %104, align 4
  %1283 = shl i32 %1271, 5
  %1284 = lshr i32 %1271, 27
  %1285 = or i32 %1283, %1284
  %1286 = add i32 %1282, -899497514
  %1287 = add i32 %1286, %1238
  %1288 = add i32 %1287, %1276
  %1289 = add i32 %1288, %1285
  %1290 = shl i32 %1253, 30
  %1291 = lshr i32 %1253, 2
  %1292 = or i32 %1290, %1291
  %1293 = xor i32 %1292, %1274
  %1294 = xor i32 %1293, %1271
  %1295 = xor i32 %1042, %1002
  %1296 = xor i32 %1295, %1156
  %1297 = xor i32 %1296, %1246
  %1298 = shl i32 %1297, 1
  %1299 = lshr i32 %1297, 31
  %1300 = or i32 %1298, %1299
  store i32 %1300, i32* %120, align 4
  %1301 = shl i32 %1289, 5
  %1302 = lshr i32 %1289, 27
  %1303 = or i32 %1301, %1302
  %1304 = add i32 %1300, -899497514
  %1305 = add i32 %1304, %1256
  %1306 = add i32 %1305, %1294
  %1307 = add i32 %1306, %1303
  %1308 = shl i32 %1271, 30
  %1309 = lshr i32 %1271, 2
  %1310 = or i32 %1308, %1309
  %1311 = xor i32 %1310, %1292
  %1312 = xor i32 %1311, %1289
  %1313 = xor i32 %1062, %1022
  %1314 = xor i32 %1313, %1174
  %1315 = xor i32 %1314, %1264
  %1316 = shl i32 %1315, 1
  %1317 = lshr i32 %1315, 31
  %1318 = or i32 %1316, %1317
  store i32 %1318, i32* %136, align 4
  %1319 = shl i32 %1307, 5
  %1320 = lshr i32 %1307, 27
  %1321 = or i32 %1319, %1320
  %1322 = add i32 %1318, -899497514
  %1323 = add i32 %1322, %1274
  %1324 = add i32 %1323, %1312
  %1325 = add i32 %1324, %1321
  %1326 = shl i32 %1289, 30
  %1327 = lshr i32 %1289, 2
  %1328 = or i32 %1326, %1327
  %1329 = xor i32 %1328, %1310
  %1330 = xor i32 %1329, %1307
  %1331 = xor i32 %1082, %1042
  %1332 = xor i32 %1331, %1192
  %1333 = xor i32 %1332, %1282
  %1334 = shl i32 %1333, 1
  %1335 = lshr i32 %1333, 31
  %1336 = or i32 %1334, %1335
  store i32 %1336, i32* %152, align 4
  %1337 = shl i32 %1325, 5
  %1338 = lshr i32 %1325, 27
  %1339 = or i32 %1337, %1338
  %1340 = add i32 %1336, -899497514
  %1341 = add i32 %1340, %1292
  %1342 = add i32 %1341, %1330
  %1343 = add i32 %1342, %1339
  %1344 = shl i32 %1307, 30
  %1345 = lshr i32 %1307, 2
  %1346 = or i32 %1344, %1345
  %1347 = xor i32 %1346, %1328
  %1348 = xor i32 %1347, %1325
  %1349 = xor i32 %1102, %1062
  %1350 = xor i32 %1349, %1210
  %1351 = xor i32 %1350, %1300
  %1352 = shl i32 %1351, 1
  %1353 = lshr i32 %1351, 31
  %1354 = or i32 %1352, %1353
  store i32 %1354, i32* %168, align 4
  %1355 = shl i32 %1343, 5
  %1356 = lshr i32 %1343, 27
  %1357 = or i32 %1355, %1356
  %1358 = add i32 %1354, -899497514
  %1359 = add i32 %1358, %1310
  %1360 = add i32 %1359, %1348
  %1361 = add i32 %1360, %1357
  %1362 = shl i32 %1325, 30
  %1363 = lshr i32 %1325, 2
  %1364 = or i32 %1362, %1363
  %1365 = xor i32 %1364, %1346
  %1366 = xor i32 %1365, %1343
  %1367 = xor i32 %1120, %1082
  %1368 = xor i32 %1367, %1228
  %1369 = xor i32 %1368, %1318
  %1370 = shl i32 %1369, 1
  %1371 = lshr i32 %1369, 31
  %1372 = or i32 %1370, %1371
  store i32 %1372, i32* %184, align 4
  %1373 = shl i32 %1361, 5
  %1374 = lshr i32 %1361, 27
  %1375 = or i32 %1373, %1374
  %1376 = add i32 %1372, -899497514
  %1377 = add i32 %1376, %1328
  %1378 = add i32 %1377, %1366
  %1379 = add i32 %1378, %1375
  %1380 = shl i32 %1343, 30
  %1381 = lshr i32 %1343, 2
  %1382 = or i32 %1380, %1381
  %1383 = xor i32 %1382, %1364
  %1384 = xor i32 %1383, %1361
  %1385 = xor i32 %1138, %1102
  %1386 = xor i32 %1385, %1246
  %1387 = xor i32 %1386, %1336
  %1388 = shl i32 %1387, 1
  %1389 = lshr i32 %1387, 31
  %1390 = or i32 %1388, %1389
  store i32 %1390, i32* %200, align 4
  %1391 = shl i32 %1379, 5
  %1392 = lshr i32 %1379, 27
  %1393 = or i32 %1391, %1392
  %1394 = add i32 %1390, -899497514
  %1395 = add i32 %1394, %1346
  %1396 = add i32 %1395, %1384
  %1397 = add i32 %1396, %1393
  %1398 = shl i32 %1361, 30
  %1399 = lshr i32 %1361, 2
  %1400 = or i32 %1398, %1399
  %1401 = xor i32 %1400, %1382
  %1402 = xor i32 %1401, %1379
  %1403 = xor i32 %1156, %1120
  %1404 = xor i32 %1403, %1264
  %1405 = xor i32 %1404, %1354
  %1406 = shl i32 %1405, 1
  %1407 = lshr i32 %1405, 31
  %1408 = or i32 %1406, %1407
  store i32 %1408, i32* %216, align 4
  %1409 = shl i32 %1397, 5
  %1410 = lshr i32 %1397, 27
  %1411 = or i32 %1409, %1410
  %1412 = add i32 %1408, -899497514
  %1413 = add i32 %1412, %1364
  %1414 = add i32 %1413, %1402
  %1415 = add i32 %1414, %1411
  %1416 = shl i32 %1379, 30
  %1417 = lshr i32 %1379, 2
  %1418 = or i32 %1416, %1417
  %1419 = xor i32 %1418, %1400
  %1420 = xor i32 %1419, %1397
  %1421 = xor i32 %1174, %1138
  %1422 = xor i32 %1421, %1282
  %1423 = xor i32 %1422, %1372
  %1424 = shl i32 %1423, 1
  %1425 = lshr i32 %1423, 31
  %1426 = or i32 %1424, %1425
  store i32 %1426, i32* %232, align 4
  %1427 = shl i32 %1415, 5
  %1428 = lshr i32 %1415, 27
  %1429 = or i32 %1427, %1428
  %1430 = add i32 %1426, -899497514
  %1431 = add i32 %1430, %1382
  %1432 = add i32 %1431, %1420
  %1433 = add i32 %1432, %1429
  %1434 = shl i32 %1397, 30
  %1435 = lshr i32 %1397, 2
  %1436 = or i32 %1434, %1435
  %1437 = xor i32 %1436, %1418
  %1438 = xor i32 %1437, %1415
  %1439 = xor i32 %1192, %1156
  %1440 = xor i32 %1439, %1300
  %1441 = xor i32 %1440, %1390
  %1442 = shl i32 %1441, 1
  %1443 = lshr i32 %1441, 31
  %1444 = or i32 %1442, %1443
  store i32 %1444, i32* %248, align 4
  %1445 = shl i32 %1433, 5
  %1446 = lshr i32 %1433, 27
  %1447 = or i32 %1445, %1446
  %1448 = add i32 %1444, -899497514
  %1449 = add i32 %1448, %1400
  %1450 = add i32 %1449, %1438
  %1451 = add i32 %1450, %1447
  %1452 = shl i32 %1415, 30
  %1453 = lshr i32 %1415, 2
  %1454 = or i32 %1452, %1453
  %1455 = xor i32 %1454, %1436
  %1456 = xor i32 %1455, %1433
  %1457 = xor i32 %1210, %1174
  %1458 = xor i32 %1457, %1318
  %1459 = xor i32 %1458, %1408
  %1460 = shl i32 %1459, 1
  %1461 = lshr i32 %1459, 31
  %1462 = or i32 %1460, %1461
  store i32 %1462, i32* %264, align 4
  %1463 = shl i32 %1451, 5
  %1464 = lshr i32 %1451, 27
  %1465 = or i32 %1463, %1464
  %1466 = shl i32 %1433, 30
  %1467 = lshr i32 %1433, 2
  %1468 = or i32 %1466, %1467
  %1469 = load i32, i32* %0, align 4
  %1470 = add i32 %1469, -899497514
  %1471 = add i32 %1470, %1462
  %1472 = add i32 %1471, %1418
  %1473 = add i32 %1472, %1456
  %1474 = add i32 %1473, %1465
  store i32 %1474, i32* %0, align 4
  %1475 = bitcast i32* %13 to <4 x i32>*
  %1476 = load <4 x i32>, <4 x i32>* %1475, align 4
  %1477 = insertelement <4 x i32> undef, i32 %1451, i32 0
  %1478 = insertelement <4 x i32> %1477, i32 %1468, i32 1
  %1479 = insertelement <4 x i32> %1478, i32 %1454, i32 2
  %1480 = insertelement <4 x i32> %1479, i32 %1436, i32 3
  %1481 = add <4 x i32> %1480, %1476
  %1482 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %1481, <4 x i32>* %1482, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z9sha1_initP12sha1_context(%struct.sha1_context* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 1
  store i64 0, i64* %2, align 8
  %3 = bitcast %struct.sha1_context* %0 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %3, align 8
  %4 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 4
  store i32 -1009589776, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z12sha1_processP12sha1_contextPKhm(%struct.sha1_context*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca [16 x i32], align 16
  %5 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 63
  %8 = add i64 %6, %2
  store i64 %8, i64* %5, align 8
  %9 = add i64 %7, %2
  %10 = icmp ugt i64 %9, 63
  br i1 %10, label %11, label %28

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 0
  %13 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %7
  %14 = sub nuw nsw i64 64, %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %1, i64 %14, i1 false)
  %15 = bitcast [16 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 64, i1 false)
  %16 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 0
  %17 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  call void @_Z13SHA1TransformPjS_PKhb(i32* %16, i32* nonnull %17, i8* %12, i1 zeroext true)
  %18 = xor i64 %7, 127
  %19 = icmp ult i64 %18, %2
  br i1 %19, label %20, label %26

20:                                               ; preds = %11, %20
  %21 = phi i64 [ %23, %20 ], [ %14, %11 ]
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  call void @_Z13SHA1TransformPjS_PKhb(i32* %16, i32* nonnull %17, i8* %22, i1 zeroext false)
  %23 = add i64 %21, 64
  %24 = add i64 %21, 127
  %25 = icmp ult i64 %24, %2
  br i1 %25, label %20, label %26

26:                                               ; preds = %20, %11
  %27 = phi i64 [ %14, %11 ], [ %23, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #4
  br label %28

28:                                               ; preds = %3, %26
  %29 = phi i64 [ %27, %26 ], [ 0, %3 ]
  %30 = phi i64 [ 0, %26 ], [ %7, %3 ]
  %31 = icmp ult i64 %29, %2
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %30
  %34 = getelementptr inbounds i8, i8* %1, i64 %29
  %35 = sub i64 %2, %29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %35, i1 false)
  br label %36

36:                                               ; preds = %32, %28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z18sha1_process_rar29P12sha1_contextPKhm(%struct.sha1_context*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca [16 x i32], align 16
  %5 = bitcast [16 x i32]* %4 to i8*
  %6 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 63
  %9 = add i64 %7, %2
  store i64 %9, i64* %6, align 8
  %10 = add i64 %8, %2
  %11 = icmp ugt i64 %10, 63
  br i1 %11, label %12, label %33

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 0
  %14 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %8
  %15 = sub nuw nsw i64 64, %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %15, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %16 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 0
  %17 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  call void @_Z13SHA1TransformPjS_PKhb(i32* %16, i32* nonnull %17, i8* %13, i1 zeroext true)
  %18 = xor i64 %8, 127
  %19 = icmp ult i64 %18, %2
  br i1 %19, label %20, label %31

20:                                               ; preds = %12, %20
  %21 = phi i64 [ %30, %20 ], [ 0, %12 ]
  %22 = phi i64 [ %27, %20 ], [ %15, %12 ]
  %23 = shl i64 %21, 6
  %24 = add i64 %15, %23
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = getelementptr inbounds i8, i8* %1, i64 %22
  call void @_Z13SHA1TransformPjS_PKhb(i32* %16, i32* nonnull %17, i8* %26, i1 zeroext false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 16 %5, i64 64, i1 false)
  %27 = add i64 %22, 64
  %28 = add i64 %22, 127
  %29 = icmp ult i64 %28, %2
  %30 = add i64 %21, 1
  br i1 %29, label %20, label %31

31:                                               ; preds = %20, %12
  %32 = phi i64 [ %15, %12 ], [ %27, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #4
  br label %33

33:                                               ; preds = %3, %31
  %34 = phi i64 [ %32, %31 ], [ 0, %3 ]
  %35 = phi i64 [ 0, %31 ], [ %8, %3 ]
  %36 = icmp ult i64 %34, %2
  br i1 %36, label %37, label %41

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %35
  %39 = getelementptr inbounds i8, i8* %1, i64 %34
  %40 = sub i64 %2, %34
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %39, i64 %40, i1 false)
  br label %41

41:                                               ; preds = %37, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z9sha1_doneP12sha1_contextPj(%struct.sha1_context*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false)
  %5 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 63
  %9 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2
  %10 = add nuw nsw i32 %8, 1
  %11 = zext i32 %8 to i64
  %12 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %11
  store i8 -128, i8* %12, align 1
  %13 = icmp eq i32 %10, 56
  br i1 %13, label %37, label %14

14:                                               ; preds = %2
  %15 = icmp ugt i32 %8, 55
  br i1 %15, label %16, label %31

16:                                               ; preds = %14
  %17 = icmp ult i32 %10, 64
  br i1 %17, label %18, label %27

18:                                               ; preds = %16
  %19 = and i64 %6, 63
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 8
  %22 = bitcast i32* %21 to i8*
  %23 = getelementptr i8, i8* %22, i64 %20
  %24 = sub nuw nsw i32 62, %8
  %25 = zext i32 %24 to i64
  %26 = add nuw nsw i64 %25, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 0, i64 %26, i1 false)
  br label %27

27:                                               ; preds = %18, %16
  %28 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  %30 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  call void @_Z13SHA1TransformPjS_PKhb(i32* %28, i32* nonnull %29, i8* %30, i1 zeroext true)
  br label %31

31:                                               ; preds = %14, %27
  %32 = phi i32 [ 0, %27 ], [ %10, %14 ]
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 %33
  %35 = sub nsw i32 56, %32
  %36 = zext i32 %35 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 0, i64 %36, i1 false)
  br label %37

37:                                               ; preds = %2, %31
  %38 = lshr i64 %6, 29
  %39 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  %40 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 56
  %41 = lshr i64 %6, 53
  %42 = trunc i64 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = lshr i64 %6, 45
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 57
  store i8 %44, i8* %45, align 1
  %46 = lshr i64 %6, 37
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 58
  store i8 %47, i8* %48, align 1
  %49 = trunc i64 %38 to i8
  %50 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 59
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 60
  %52 = lshr i32 %7, 21
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %51, align 1
  %54 = lshr i32 %7, 13
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 61
  store i8 %55, i8* %56, align 1
  %57 = lshr i32 %7, 5
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 62
  store i8 %58, i8* %59, align 1
  %60 = trunc i64 %6 to i8
  %61 = shl i8 %60, 3
  %62 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 2, i64 63
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 0
  %64 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  call void @_Z13SHA1TransformPjS_PKhb(i32* %63, i32* nonnull %64, i8* %39, i1 zeroext true)
  %65 = load i32, i32* %63, align 4
  store i32 %65, i32* %1, align 4
  %66 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 2
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 3
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.sha1_context, %struct.sha1_context* %0, i64 0, i32 0, i64 4
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %76, i32* %77, align 4
  store i64 0, i64* %5, align 8
  %78 = bitcast %struct.sha1_context* %0 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %78, align 8
  store i32 -1009589776, i32* %75, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
