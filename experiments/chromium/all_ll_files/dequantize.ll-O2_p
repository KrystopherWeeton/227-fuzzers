; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/dequantize.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/dequantize.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"struct.tflite::ops::builtin::dequantize::OpData" = type { i8 }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.Eigen::half" = type { %"struct.Eigen::half_impl::half_base" }
%"struct.Eigen::half_impl::half_base" = type { %"struct.Eigen::half_impl::__half_raw" }
%"struct.Eigen::half_impl::__half_raw" = type { i16 }

$_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_ = comdat any

$_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [67 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/dequantize.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.8 = private unnamed_addr constant [166 x i8] c"op_context.input->type == kTfLiteUInt8 || op_context.input->type == kTfLiteInt8 || op_context.input->type == kTfLiteInt16 || op_context.input->type == kTfLiteFloat16\00", align 1
@_ZZN6tflite3ops7builtin23Register_DEQUANTIZE_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin10dequantize4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin10dequantize4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10dequantize7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin23Register_DEQUANTIZE_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin10dequantize4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin10dequantize4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10dequantize7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.10 = private unnamed_addr constant [23 x i8] c"Type %d not supported.\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin10dequantize4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 1) #7
  store i8 0, i8* %4, align 1
  ret i8* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin10dequantize4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #3 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #7
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin10dequantize7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #3 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #8
  br label %60

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #8
  br label %60

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %24, %20
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  switch i32 %42, label %43 [
    i32 3, label %46
    i32 9, label %46
    i32 7, label %46
    i32 10, label %46
  ]

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %45 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %44, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %45(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %60

46:                                               ; preds = %39, %39, %39, %39
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  store i32 1, i32* %47, align 8
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 4
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 4
  store i32 3, i32* %52, align 8
  br label %53

53:                                               ; preds = %51, %46
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %55 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %54, align 8
  %56 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %57 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %56, align 8
  %58 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %57) #8
  %59 = tail call i32 %55(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteIntArray* %58) #8
  br label %60

60:                                               ; preds = %43, %53, %17, %8
  %61 = phi i32 [ 1, %8 ], [ 1, %17 ], [ %59, %53 ], [ 1, %43 ]
  ret i32 %61
}

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin23Register_DEQUANTIZE_OPTEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin23Register_DEQUANTIZE_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #3 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %4 = bitcast i8** %3 to %"struct.tflite::ops::builtin::dequantize::OpData"**
  %5 = load %"struct.tflite::ops::builtin::dequantize::OpData"*, %"struct.tflite::ops::builtin::dequantize::OpData"** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %13 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 %14
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi %struct.TfLiteTensor* [ %15, %11 ], [ null, %2 ]
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %25 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %24, align 8
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 %26
  br label %28

28:                                               ; preds = %16, %23
  %29 = phi %struct.TfLiteTensor* [ %27, %23 ], [ null, %16 ]
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"struct.tflite::ops::builtin::dequantize::OpData", %"struct.tflite::ops::builtin::dequantize::OpData"* %5, i64 0, i32 0
  %35 = load i8, i8* %34, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %45

37:                                               ; preds = %33, %28
  %38 = tail call i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %29)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = load i32, i32* %30, align 8
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"struct.tflite::ops::builtin::dequantize::OpData", %"struct.tflite::ops::builtin::dequantize::OpData"* %5, i64 0, i32 0
  store i8 1, i8* %44, align 1
  br label %45

45:                                               ; preds = %37, %43, %40, %33
  %46 = phi i32 [ 0, %33 ], [ %38, %37 ], [ 0, %43 ], [ 0, %40 ]
  ret i32 %46
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin23Register_DEQUANTIZE_REFEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin23Register_DEQUANTIZE_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #3 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %4 = bitcast i8** %3 to %"struct.tflite::ops::builtin::dequantize::OpData"**
  %5 = load %"struct.tflite::ops::builtin::dequantize::OpData"*, %"struct.tflite::ops::builtin::dequantize::OpData"** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %13 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 %14
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi %struct.TfLiteTensor* [ %15, %11 ], [ null, %2 ]
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %25 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %24, align 8
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 %26
  br label %28

28:                                               ; preds = %16, %23
  %29 = phi %struct.TfLiteTensor* [ %27, %23 ], [ null, %16 ]
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"struct.tflite::ops::builtin::dequantize::OpData", %"struct.tflite::ops::builtin::dequantize::OpData"* %5, i64 0, i32 0
  %35 = load i8, i8* %34, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %45

37:                                               ; preds = %33, %28
  %38 = tail call i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %29)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = load i32, i32* %30, align 8
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"struct.tflite::ops::builtin::dequantize::OpData", %"struct.tflite::ops::builtin::dequantize::OpData"* %5, i64 0, i32 0
  store i8 1, i8* %44, align 1
  br label %45

45:                                               ; preds = %37, %43, %40, %33
  %46 = phi i32 [ 0, %33 ], [ %38, %37 ], [ 0, %43 ], [ 0, %40 ]
  ret i32 %46
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_DEQUANTIZEEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin23Register_DEQUANTIZE_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %16 = load float, float* %15, align 8
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %1017 [
    i32 3, label %20
    i32 9, label %260
    i32 7, label %500
    i32 10, label %740
  ]

20:                                               ; preds = %4
  %21 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #8
  %22 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !3
  br label %53

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8, !noalias !3
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4, !noalias !3
  %30 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %29, i32* %31, align 8, !alias.scope !3
  %32 = icmp sgt i32 %29, 5
  br i1 %32, label %33, label %40

33:                                               ; preds = %25
  %34 = sext i32 %29 to i64
  %35 = shl nsw i64 %34, 2
  %36 = tail call i8* @_Znam(i64 %35) #7, !noalias !3
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %38 = bitcast i32** %37 to i8**
  store i8* %36, i8** %38, align 8, !alias.scope !3
  %39 = bitcast i8* %36 to i32*
  br label %45

40:                                               ; preds = %25
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %42 = bitcast %union.anon* %41 to i32*
  %43 = sext i32 %29 to i64
  %44 = shl nsw i64 %43, 2
  br label %45

45:                                               ; preds = %40, %33
  %46 = phi i64 [ %35, %33 ], [ %44, %40 ]
  %47 = phi i32* [ %39, %33 ], [ %42, %40 ]
  %48 = bitcast i32* %47 to i8*
  %49 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 %46, i1 false) #8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %51 = bitcast %union.TfLitePtrUnion* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  br label %53

53:                                               ; preds = %23, %45
  %54 = phi i32 [ %29, %45 ], [ 0, %23 ]
  %55 = phi i8* [ %52, %45 ], [ null, %23 ]
  %56 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #8
  %57 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %59, align 8, !alias.scope !6
  br label %88

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %62 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %61, align 8, !noalias !6
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4, !noalias !6
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 1, i64 0
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %64, i32* %66, align 8, !alias.scope !6
  %67 = icmp sgt i32 %64, 5
  br i1 %67, label %68, label %75

68:                                               ; preds = %60
  %69 = sext i32 %64 to i64
  %70 = shl nsw i64 %69, 2
  %71 = tail call i8* @_Znam(i64 %70) #7, !noalias !6
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %73 = bitcast i32** %72 to i8**
  store i8* %71, i8** %73, align 8, !alias.scope !6
  %74 = bitcast i8* %71 to i32*
  br label %80

75:                                               ; preds = %60
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %77 = bitcast %union.anon* %76 to i32*
  %78 = sext i32 %64 to i64
  %79 = shl nsw i64 %78, 2
  br label %80

80:                                               ; preds = %75, %68
  %81 = phi i64 [ %70, %68 ], [ %79, %75 ]
  %82 = phi i32* [ %74, %68 ], [ %77, %75 ]
  %83 = bitcast i32* %82 to i8*
  %84 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %81, i1 false) #8
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  br label %88

88:                                               ; preds = %58, %80
  %89 = phi i32 [ %64, %80 ], [ 0, %58 ]
  %90 = phi float* [ %87, %80 ], [ null, %58 ]
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %92 = icmp sgt i32 %54, 5
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %union.anon, %union.anon* %91, i64 0, i32 0
  %95 = load i32*, i32** %94, align 8
  br label %99

96:                                               ; preds = %88
  %97 = bitcast %union.anon* %91 to i32*
  %98 = icmp sgt i32 %54, 0
  br i1 %98, label %99, label %202

99:                                               ; preds = %96, %93
  %100 = phi i32* [ %95, %93 ], [ %97, %96 ]
  %101 = zext i32 %54 to i64
  %102 = icmp ult i32 %54, 8
  br i1 %102, label %188, label %103

103:                                              ; preds = %99
  %104 = and i64 %101, 4294967288
  %105 = add nsw i64 %104, -8
  %106 = lshr exact i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = and i64 %107, 3
  %109 = icmp ult i64 %105, 24
  br i1 %109, label %155, label %110

110:                                              ; preds = %103
  %111 = sub nsw i64 %107, %108
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %152, %112 ]
  %114 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %150, %112 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %151, %112 ]
  %116 = phi i64 [ %111, %110 ], [ %153, %112 ]
  %117 = getelementptr inbounds i32, i32* %100, i64 %113
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, %114
  %124 = mul nsw <4 x i32> %122, %115
  %125 = or i64 %113, 8
  %126 = getelementptr inbounds i32, i32* %100, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = mul nsw <4 x i32> %128, %123
  %133 = mul nsw <4 x i32> %131, %124
  %134 = or i64 %113, 16
  %135 = getelementptr inbounds i32, i32* %100, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %113, 24
  %144 = getelementptr inbounds i32, i32* %100, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %113, 32
  %153 = add i64 %116, -4
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %112, !llvm.loop !9

155:                                              ; preds = %112, %103
  %156 = phi <4 x i32> [ undef, %103 ], [ %150, %112 ]
  %157 = phi <4 x i32> [ undef, %103 ], [ %151, %112 ]
  %158 = phi i64 [ 0, %103 ], [ %152, %112 ]
  %159 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %150, %112 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %151, %112 ]
  %161 = icmp eq i64 %108, 0
  br i1 %161, label %178, label %162

162:                                              ; preds = %155, %162
  %163 = phi i64 [ %175, %162 ], [ %158, %155 ]
  %164 = phi <4 x i32> [ %173, %162 ], [ %159, %155 ]
  %165 = phi <4 x i32> [ %174, %162 ], [ %160, %155 ]
  %166 = phi i64 [ %176, %162 ], [ %108, %155 ]
  %167 = getelementptr inbounds i32, i32* %100, i64 %163
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %163, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %162, !llvm.loop !11

178:                                              ; preds = %162, %155
  %179 = phi <4 x i32> [ %156, %155 ], [ %173, %162 ]
  %180 = phi <4 x i32> [ %157, %155 ], [ %174, %162 ]
  %181 = mul <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = mul <4 x i32> %181, %182
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %185 = mul <4 x i32> %183, %184
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = icmp eq i64 %104, %101
  br i1 %187, label %199, label %188

188:                                              ; preds = %178, %99
  %189 = phi i64 [ 0, %99 ], [ %104, %178 ]
  %190 = phi i32 [ 1, %99 ], [ %186, %178 ]
  br label %191

191:                                              ; preds = %188, %191
  %192 = phi i64 [ %197, %191 ], [ %189, %188 ]
  %193 = phi i32 [ %196, %191 ], [ %190, %188 ]
  %194 = getelementptr inbounds i32, i32* %100, i64 %192
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i32 %195, %193
  %197 = add nuw nsw i64 %192, 1
  %198 = icmp eq i64 %197, %101
  br i1 %198, label %199, label %191, !llvm.loop !13

199:                                              ; preds = %191, %178
  %200 = phi i32 [ %186, %178 ], [ %196, %191 ]
  %201 = icmp sgt i32 %200, 0
  br i1 %201, label %202, label %244

202:                                              ; preds = %199, %96
  %203 = phi i32 [ %200, %199 ], [ 1, %96 ]
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1
  %206 = icmp eq i32 %203, 1
  br i1 %206, label %232, label %207

207:                                              ; preds = %202
  %208 = sub nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %229, %209 ]
  %211 = phi i64 [ %208, %207 ], [ %230, %209 ]
  %212 = getelementptr inbounds i8, i8* %55, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = sub nsw i32 %214, %14
  %216 = sitofp i32 %215 to double
  %217 = fmul double %17, %216
  %218 = fptrunc double %217 to float
  %219 = getelementptr inbounds float, float* %90, i64 %210
  store float %218, float* %219, align 4
  %220 = or i64 %210, 1
  %221 = getelementptr inbounds i8, i8* %55, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %223, %14
  %225 = sitofp i32 %224 to double
  %226 = fmul double %17, %225
  %227 = fptrunc double %226 to float
  %228 = getelementptr inbounds float, float* %90, i64 %220
  store float %227, float* %228, align 4
  %229 = add nuw nsw i64 %210, 2
  %230 = add i64 %211, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %209

232:                                              ; preds = %209, %202
  %233 = phi i64 [ 0, %202 ], [ %229, %209 ]
  %234 = icmp eq i64 %205, 0
  br i1 %234, label %244, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds i8, i8* %55, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = sub nsw i32 %238, %14
  %240 = sitofp i32 %239 to double
  %241 = fmul double %17, %240
  %242 = fptrunc double %241 to float
  %243 = getelementptr inbounds float, float* %90, i64 %233
  store float %242, float* %243, align 4
  br label %244

244:                                              ; preds = %235, %232, %199
  %245 = icmp sgt i32 %89, 5
  br i1 %245, label %246, label %252

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %248 = load i32*, i32** %247, align 8
  %249 = icmp eq i32* %248, null
  br i1 %249, label %252, label %250

250:                                              ; preds = %246
  %251 = bitcast i32* %248 to i8*
  tail call void @_ZdaPv(i8* %251) #7
  br label %252

252:                                              ; preds = %244, %246, %250
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #8
  br i1 %92, label %253, label %259

253:                                              ; preds = %252
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %255 = load i32*, i32** %254, align 8
  %256 = icmp eq i32* %255, null
  br i1 %256, label %259, label %257

257:                                              ; preds = %253
  %258 = bitcast i32* %255 to i8*
  tail call void @_ZdaPv(i8* %258) #7
  br label %259

259:                                              ; preds = %252, %253, %257
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #8
  br label %1020

260:                                              ; preds = %4
  %261 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %261) #8
  %262 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %264, align 8, !alias.scope !15
  br label %293

265:                                              ; preds = %260
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %267 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %266, align 8, !noalias !15
  %268 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 0
  %269 = load i32, i32* %268, align 4, !noalias !15
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 1, i64 0
  %271 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %269, i32* %271, align 8, !alias.scope !15
  %272 = icmp sgt i32 %269, 5
  br i1 %272, label %273, label %280

273:                                              ; preds = %265
  %274 = sext i32 %269 to i64
  %275 = shl nsw i64 %274, 2
  %276 = tail call i8* @_Znam(i64 %275) #7, !noalias !15
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %278 = bitcast i32** %277 to i8**
  store i8* %276, i8** %278, align 8, !alias.scope !15
  %279 = bitcast i8* %276 to i32*
  br label %285

280:                                              ; preds = %265
  %281 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %282 = bitcast %union.anon* %281 to i32*
  %283 = sext i32 %269 to i64
  %284 = shl nsw i64 %283, 2
  br label %285

285:                                              ; preds = %280, %273
  %286 = phi i64 [ %275, %273 ], [ %284, %280 ]
  %287 = phi i32* [ %279, %273 ], [ %282, %280 ]
  %288 = bitcast i32* %287 to i8*
  %289 = bitcast i32* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %288, i8* align 4 %289, i64 %286, i1 false) #8
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to i8**
  %292 = load i8*, i8** %291, align 8
  br label %293

293:                                              ; preds = %263, %285
  %294 = phi i32 [ %269, %285 ], [ 0, %263 ]
  %295 = phi i8* [ %292, %285 ], [ null, %263 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #8
  %297 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %297, label %298, label %300

298:                                              ; preds = %293
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %299, align 8, !alias.scope !18
  br label %328

300:                                              ; preds = %293
  %301 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %302 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %301, align 8, !noalias !18
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 0
  %304 = load i32, i32* %303, align 4, !noalias !18
  %305 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 1, i64 0
  %306 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %304, i32* %306, align 8, !alias.scope !18
  %307 = icmp sgt i32 %304, 5
  br i1 %307, label %308, label %315

308:                                              ; preds = %300
  %309 = sext i32 %304 to i64
  %310 = shl nsw i64 %309, 2
  %311 = tail call i8* @_Znam(i64 %310) #7, !noalias !18
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %313 = bitcast i32** %312 to i8**
  store i8* %311, i8** %313, align 8, !alias.scope !18
  %314 = bitcast i8* %311 to i32*
  br label %320

315:                                              ; preds = %300
  %316 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %317 = bitcast %union.anon* %316 to i32*
  %318 = sext i32 %304 to i64
  %319 = shl nsw i64 %318, 2
  br label %320

320:                                              ; preds = %315, %308
  %321 = phi i64 [ %310, %308 ], [ %319, %315 ]
  %322 = phi i32* [ %314, %308 ], [ %317, %315 ]
  %323 = bitcast i32* %322 to i8*
  %324 = bitcast i32* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %321, i1 false) #8
  %325 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %326 = bitcast %union.TfLitePtrUnion* %325 to float**
  %327 = load float*, float** %326, align 8
  br label %328

328:                                              ; preds = %298, %320
  %329 = phi i32 [ %304, %320 ], [ 0, %298 ]
  %330 = phi float* [ %327, %320 ], [ null, %298 ]
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %332 = icmp sgt i32 %294, 5
  br i1 %332, label %333, label %336

333:                                              ; preds = %328
  %334 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %335 = load i32*, i32** %334, align 8
  br label %339

336:                                              ; preds = %328
  %337 = bitcast %union.anon* %331 to i32*
  %338 = icmp sgt i32 %294, 0
  br i1 %338, label %339, label %442

339:                                              ; preds = %336, %333
  %340 = phi i32* [ %335, %333 ], [ %337, %336 ]
  %341 = zext i32 %294 to i64
  %342 = icmp ult i32 %294, 8
  br i1 %342, label %428, label %343

343:                                              ; preds = %339
  %344 = and i64 %341, 4294967288
  %345 = add nsw i64 %344, -8
  %346 = lshr exact i64 %345, 3
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 3
  %349 = icmp ult i64 %345, 24
  br i1 %349, label %395, label %350

350:                                              ; preds = %343
  %351 = sub nsw i64 %347, %348
  br label %352

352:                                              ; preds = %352, %350
  %353 = phi i64 [ 0, %350 ], [ %392, %352 ]
  %354 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %390, %352 ]
  %355 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %391, %352 ]
  %356 = phi i64 [ %351, %350 ], [ %393, %352 ]
  %357 = getelementptr inbounds i32, i32* %340, i64 %353
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4
  %360 = getelementptr inbounds i32, i32* %357, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4
  %363 = mul nsw <4 x i32> %359, %354
  %364 = mul nsw <4 x i32> %362, %355
  %365 = or i64 %353, 8
  %366 = getelementptr inbounds i32, i32* %340, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = getelementptr inbounds i32, i32* %366, i64 4
  %370 = bitcast i32* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 4
  %372 = mul nsw <4 x i32> %368, %363
  %373 = mul nsw <4 x i32> %371, %364
  %374 = or i64 %353, 16
  %375 = getelementptr inbounds i32, i32* %340, i64 %374
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4
  %378 = getelementptr inbounds i32, i32* %375, i64 4
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = mul nsw <4 x i32> %377, %372
  %382 = mul nsw <4 x i32> %380, %373
  %383 = or i64 %353, 24
  %384 = getelementptr inbounds i32, i32* %340, i64 %383
  %385 = bitcast i32* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 4
  %387 = getelementptr inbounds i32, i32* %384, i64 4
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = mul nsw <4 x i32> %386, %381
  %391 = mul nsw <4 x i32> %389, %382
  %392 = add i64 %353, 32
  %393 = add i64 %356, -4
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %352, !llvm.loop !21

395:                                              ; preds = %352, %343
  %396 = phi <4 x i32> [ undef, %343 ], [ %390, %352 ]
  %397 = phi <4 x i32> [ undef, %343 ], [ %391, %352 ]
  %398 = phi i64 [ 0, %343 ], [ %392, %352 ]
  %399 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %390, %352 ]
  %400 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %391, %352 ]
  %401 = icmp eq i64 %348, 0
  br i1 %401, label %418, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %415, %402 ], [ %398, %395 ]
  %404 = phi <4 x i32> [ %413, %402 ], [ %399, %395 ]
  %405 = phi <4 x i32> [ %414, %402 ], [ %400, %395 ]
  %406 = phi i64 [ %416, %402 ], [ %348, %395 ]
  %407 = getelementptr inbounds i32, i32* %340, i64 %403
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4
  %410 = getelementptr inbounds i32, i32* %407, i64 4
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = mul nsw <4 x i32> %409, %404
  %414 = mul nsw <4 x i32> %412, %405
  %415 = add i64 %403, 8
  %416 = add i64 %406, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %402, !llvm.loop !22

418:                                              ; preds = %402, %395
  %419 = phi <4 x i32> [ %396, %395 ], [ %413, %402 ]
  %420 = phi <4 x i32> [ %397, %395 ], [ %414, %402 ]
  %421 = mul <4 x i32> %420, %419
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %423 = mul <4 x i32> %421, %422
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %425 = mul <4 x i32> %423, %424
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = icmp eq i64 %344, %341
  br i1 %427, label %439, label %428

428:                                              ; preds = %418, %339
  %429 = phi i64 [ 0, %339 ], [ %344, %418 ]
  %430 = phi i32 [ 1, %339 ], [ %426, %418 ]
  br label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %437, %431 ], [ %429, %428 ]
  %433 = phi i32 [ %436, %431 ], [ %430, %428 ]
  %434 = getelementptr inbounds i32, i32* %340, i64 %432
  %435 = load i32, i32* %434, align 4
  %436 = mul nsw i32 %435, %433
  %437 = add nuw nsw i64 %432, 1
  %438 = icmp eq i64 %437, %341
  br i1 %438, label %439, label %431, !llvm.loop !23

439:                                              ; preds = %431, %418
  %440 = phi i32 [ %426, %418 ], [ %436, %431 ]
  %441 = icmp sgt i32 %440, 0
  br i1 %441, label %442, label %484

442:                                              ; preds = %439, %336
  %443 = phi i32 [ %440, %439 ], [ 1, %336 ]
  %444 = zext i32 %443 to i64
  %445 = and i64 %444, 1
  %446 = icmp eq i32 %443, 1
  br i1 %446, label %472, label %447

447:                                              ; preds = %442
  %448 = sub nsw i64 %444, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %469, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %470, %449 ]
  %452 = getelementptr inbounds i8, i8* %295, i64 %450
  %453 = load i8, i8* %452, align 1
  %454 = sext i8 %453 to i32
  %455 = sub nsw i32 %454, %14
  %456 = sitofp i32 %455 to double
  %457 = fmul double %17, %456
  %458 = fptrunc double %457 to float
  %459 = getelementptr inbounds float, float* %330, i64 %450
  store float %458, float* %459, align 4
  %460 = or i64 %450, 1
  %461 = getelementptr inbounds i8, i8* %295, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i32
  %464 = sub nsw i32 %463, %14
  %465 = sitofp i32 %464 to double
  %466 = fmul double %17, %465
  %467 = fptrunc double %466 to float
  %468 = getelementptr inbounds float, float* %330, i64 %460
  store float %467, float* %468, align 4
  %469 = add nuw nsw i64 %450, 2
  %470 = add i64 %451, -2
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %449

472:                                              ; preds = %449, %442
  %473 = phi i64 [ 0, %442 ], [ %469, %449 ]
  %474 = icmp eq i64 %445, 0
  br i1 %474, label %484, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds i8, i8* %295, i64 %473
  %477 = load i8, i8* %476, align 1
  %478 = sext i8 %477 to i32
  %479 = sub nsw i32 %478, %14
  %480 = sitofp i32 %479 to double
  %481 = fmul double %17, %480
  %482 = fptrunc double %481 to float
  %483 = getelementptr inbounds float, float* %330, i64 %473
  store float %482, float* %483, align 4
  br label %484

484:                                              ; preds = %475, %472, %439
  %485 = icmp sgt i32 %329, 5
  br i1 %485, label %486, label %492

486:                                              ; preds = %484
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %488 = load i32*, i32** %487, align 8
  %489 = icmp eq i32* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %486
  %491 = bitcast i32* %488 to i8*
  tail call void @_ZdaPv(i8* %491) #7
  br label %492

492:                                              ; preds = %484, %486, %490
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #8
  br i1 %332, label %493, label %499

493:                                              ; preds = %492
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %495 = load i32*, i32** %494, align 8
  %496 = icmp eq i32* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %493
  %498 = bitcast i32* %495 to i8*
  tail call void @_ZdaPv(i8* %498) #7
  br label %499

499:                                              ; preds = %492, %493, %497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %261) #8
  br label %1020

500:                                              ; preds = %4
  %501 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %501) #8
  %502 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %502, label %503, label %505

503:                                              ; preds = %500
  %504 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %504, align 8, !alias.scope !24
  br label %533

505:                                              ; preds = %500
  %506 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %507 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %506, align 8, !noalias !24
  %508 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 0
  %509 = load i32, i32* %508, align 4, !noalias !24
  %510 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 1, i64 0
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %509, i32* %511, align 8, !alias.scope !24
  %512 = icmp sgt i32 %509, 5
  br i1 %512, label %513, label %520

513:                                              ; preds = %505
  %514 = sext i32 %509 to i64
  %515 = shl nsw i64 %514, 2
  %516 = tail call i8* @_Znam(i64 %515) #7, !noalias !24
  %517 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %518 = bitcast i32** %517 to i8**
  store i8* %516, i8** %518, align 8, !alias.scope !24
  %519 = bitcast i8* %516 to i32*
  br label %525

520:                                              ; preds = %505
  %521 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %522 = bitcast %union.anon* %521 to i32*
  %523 = sext i32 %509 to i64
  %524 = shl nsw i64 %523, 2
  br label %525

525:                                              ; preds = %520, %513
  %526 = phi i64 [ %515, %513 ], [ %524, %520 ]
  %527 = phi i32* [ %519, %513 ], [ %522, %520 ]
  %528 = bitcast i32* %527 to i8*
  %529 = bitcast i32* %510 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %528, i8* align 4 %529, i64 %526, i1 false) #8
  %530 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %531 = bitcast %union.TfLitePtrUnion* %530 to i16**
  %532 = load i16*, i16** %531, align 8
  br label %533

533:                                              ; preds = %503, %525
  %534 = phi i32 [ %509, %525 ], [ 0, %503 ]
  %535 = phi i16* [ %532, %525 ], [ null, %503 ]
  %536 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %536) #8
  %537 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %537, label %538, label %540

538:                                              ; preds = %533
  %539 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %539, align 8, !alias.scope !27
  br label %568

540:                                              ; preds = %533
  %541 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %542 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %541, align 8, !noalias !27
  %543 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 0
  %544 = load i32, i32* %543, align 4, !noalias !27
  %545 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 1, i64 0
  %546 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %544, i32* %546, align 8, !alias.scope !27
  %547 = icmp sgt i32 %544, 5
  br i1 %547, label %548, label %555

548:                                              ; preds = %540
  %549 = sext i32 %544 to i64
  %550 = shl nsw i64 %549, 2
  %551 = tail call i8* @_Znam(i64 %550) #7, !noalias !27
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %553 = bitcast i32** %552 to i8**
  store i8* %551, i8** %553, align 8, !alias.scope !27
  %554 = bitcast i8* %551 to i32*
  br label %560

555:                                              ; preds = %540
  %556 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %557 = bitcast %union.anon* %556 to i32*
  %558 = sext i32 %544 to i64
  %559 = shl nsw i64 %558, 2
  br label %560

560:                                              ; preds = %555, %548
  %561 = phi i64 [ %550, %548 ], [ %559, %555 ]
  %562 = phi i32* [ %554, %548 ], [ %557, %555 ]
  %563 = bitcast i32* %562 to i8*
  %564 = bitcast i32* %545 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %563, i8* align 4 %564, i64 %561, i1 false) #8
  %565 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %566 = bitcast %union.TfLitePtrUnion* %565 to float**
  %567 = load float*, float** %566, align 8
  br label %568

568:                                              ; preds = %538, %560
  %569 = phi i32 [ %544, %560 ], [ 0, %538 ]
  %570 = phi float* [ %567, %560 ], [ null, %538 ]
  %571 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %572 = icmp sgt i32 %534, 5
  br i1 %572, label %573, label %576

573:                                              ; preds = %568
  %574 = getelementptr inbounds %union.anon, %union.anon* %571, i64 0, i32 0
  %575 = load i32*, i32** %574, align 8
  br label %579

576:                                              ; preds = %568
  %577 = bitcast %union.anon* %571 to i32*
  %578 = icmp sgt i32 %534, 0
  br i1 %578, label %579, label %682

579:                                              ; preds = %576, %573
  %580 = phi i32* [ %575, %573 ], [ %577, %576 ]
  %581 = zext i32 %534 to i64
  %582 = icmp ult i32 %534, 8
  br i1 %582, label %668, label %583

583:                                              ; preds = %579
  %584 = and i64 %581, 4294967288
  %585 = add nsw i64 %584, -8
  %586 = lshr exact i64 %585, 3
  %587 = add nuw nsw i64 %586, 1
  %588 = and i64 %587, 3
  %589 = icmp ult i64 %585, 24
  br i1 %589, label %635, label %590

590:                                              ; preds = %583
  %591 = sub nsw i64 %587, %588
  br label %592

592:                                              ; preds = %592, %590
  %593 = phi i64 [ 0, %590 ], [ %632, %592 ]
  %594 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %630, %592 ]
  %595 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %631, %592 ]
  %596 = phi i64 [ %591, %590 ], [ %633, %592 ]
  %597 = getelementptr inbounds i32, i32* %580, i64 %593
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 4
  %600 = getelementptr inbounds i32, i32* %597, i64 4
  %601 = bitcast i32* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 4
  %603 = mul nsw <4 x i32> %599, %594
  %604 = mul nsw <4 x i32> %602, %595
  %605 = or i64 %593, 8
  %606 = getelementptr inbounds i32, i32* %580, i64 %605
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4
  %609 = getelementptr inbounds i32, i32* %606, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4
  %612 = mul nsw <4 x i32> %608, %603
  %613 = mul nsw <4 x i32> %611, %604
  %614 = or i64 %593, 16
  %615 = getelementptr inbounds i32, i32* %580, i64 %614
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4
  %618 = getelementptr inbounds i32, i32* %615, i64 4
  %619 = bitcast i32* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 4
  %621 = mul nsw <4 x i32> %617, %612
  %622 = mul nsw <4 x i32> %620, %613
  %623 = or i64 %593, 24
  %624 = getelementptr inbounds i32, i32* %580, i64 %623
  %625 = bitcast i32* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4
  %627 = getelementptr inbounds i32, i32* %624, i64 4
  %628 = bitcast i32* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4
  %630 = mul nsw <4 x i32> %626, %621
  %631 = mul nsw <4 x i32> %629, %622
  %632 = add i64 %593, 32
  %633 = add i64 %596, -4
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %592, !llvm.loop !30

635:                                              ; preds = %592, %583
  %636 = phi <4 x i32> [ undef, %583 ], [ %630, %592 ]
  %637 = phi <4 x i32> [ undef, %583 ], [ %631, %592 ]
  %638 = phi i64 [ 0, %583 ], [ %632, %592 ]
  %639 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %630, %592 ]
  %640 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %631, %592 ]
  %641 = icmp eq i64 %588, 0
  br i1 %641, label %658, label %642

642:                                              ; preds = %635, %642
  %643 = phi i64 [ %655, %642 ], [ %638, %635 ]
  %644 = phi <4 x i32> [ %653, %642 ], [ %639, %635 ]
  %645 = phi <4 x i32> [ %654, %642 ], [ %640, %635 ]
  %646 = phi i64 [ %656, %642 ], [ %588, %635 ]
  %647 = getelementptr inbounds i32, i32* %580, i64 %643
  %648 = bitcast i32* %647 to <4 x i32>*
  %649 = load <4 x i32>, <4 x i32>* %648, align 4
  %650 = getelementptr inbounds i32, i32* %647, i64 4
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4
  %653 = mul nsw <4 x i32> %649, %644
  %654 = mul nsw <4 x i32> %652, %645
  %655 = add i64 %643, 8
  %656 = add i64 %646, -1
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %642, !llvm.loop !31

658:                                              ; preds = %642, %635
  %659 = phi <4 x i32> [ %636, %635 ], [ %653, %642 ]
  %660 = phi <4 x i32> [ %637, %635 ], [ %654, %642 ]
  %661 = mul <4 x i32> %660, %659
  %662 = shufflevector <4 x i32> %661, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %663 = mul <4 x i32> %661, %662
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %665 = mul <4 x i32> %663, %664
  %666 = extractelement <4 x i32> %665, i32 0
  %667 = icmp eq i64 %584, %581
  br i1 %667, label %679, label %668

668:                                              ; preds = %658, %579
  %669 = phi i64 [ 0, %579 ], [ %584, %658 ]
  %670 = phi i32 [ 1, %579 ], [ %666, %658 ]
  br label %671

671:                                              ; preds = %668, %671
  %672 = phi i64 [ %677, %671 ], [ %669, %668 ]
  %673 = phi i32 [ %676, %671 ], [ %670, %668 ]
  %674 = getelementptr inbounds i32, i32* %580, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = mul nsw i32 %675, %673
  %677 = add nuw nsw i64 %672, 1
  %678 = icmp eq i64 %677, %581
  br i1 %678, label %679, label %671, !llvm.loop !32

679:                                              ; preds = %671, %658
  %680 = phi i32 [ %666, %658 ], [ %676, %671 ]
  %681 = icmp sgt i32 %680, 0
  br i1 %681, label %682, label %724

682:                                              ; preds = %679, %576
  %683 = phi i32 [ %680, %679 ], [ 1, %576 ]
  %684 = zext i32 %683 to i64
  %685 = and i64 %684, 1
  %686 = icmp eq i32 %683, 1
  br i1 %686, label %712, label %687

687:                                              ; preds = %682
  %688 = sub nsw i64 %684, %685
  br label %689

689:                                              ; preds = %689, %687
  %690 = phi i64 [ 0, %687 ], [ %709, %689 ]
  %691 = phi i64 [ %688, %687 ], [ %710, %689 ]
  %692 = getelementptr inbounds i16, i16* %535, i64 %690
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = sub nsw i32 %694, %14
  %696 = sitofp i32 %695 to double
  %697 = fmul double %17, %696
  %698 = fptrunc double %697 to float
  %699 = getelementptr inbounds float, float* %570, i64 %690
  store float %698, float* %699, align 4
  %700 = or i64 %690, 1
  %701 = getelementptr inbounds i16, i16* %535, i64 %700
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = sub nsw i32 %703, %14
  %705 = sitofp i32 %704 to double
  %706 = fmul double %17, %705
  %707 = fptrunc double %706 to float
  %708 = getelementptr inbounds float, float* %570, i64 %700
  store float %707, float* %708, align 4
  %709 = add nuw nsw i64 %690, 2
  %710 = add i64 %691, -2
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %689

712:                                              ; preds = %689, %682
  %713 = phi i64 [ 0, %682 ], [ %709, %689 ]
  %714 = icmp eq i64 %685, 0
  br i1 %714, label %724, label %715

715:                                              ; preds = %712
  %716 = getelementptr inbounds i16, i16* %535, i64 %713
  %717 = load i16, i16* %716, align 2
  %718 = sext i16 %717 to i32
  %719 = sub nsw i32 %718, %14
  %720 = sitofp i32 %719 to double
  %721 = fmul double %17, %720
  %722 = fptrunc double %721 to float
  %723 = getelementptr inbounds float, float* %570, i64 %713
  store float %722, float* %723, align 4
  br label %724

724:                                              ; preds = %715, %712, %679
  %725 = icmp sgt i32 %569, 5
  br i1 %725, label %726, label %732

726:                                              ; preds = %724
  %727 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %728 = load i32*, i32** %727, align 8
  %729 = icmp eq i32* %728, null
  br i1 %729, label %732, label %730

730:                                              ; preds = %726
  %731 = bitcast i32* %728 to i8*
  tail call void @_ZdaPv(i8* %731) #7
  br label %732

732:                                              ; preds = %724, %726, %730
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %536) #8
  br i1 %572, label %733, label %739

733:                                              ; preds = %732
  %734 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %735 = load i32*, i32** %734, align 8
  %736 = icmp eq i32* %735, null
  br i1 %736, label %739, label %737

737:                                              ; preds = %733
  %738 = bitcast i32* %735 to i8*
  tail call void @_ZdaPv(i8* %738) #7
  br label %739

739:                                              ; preds = %732, %733, %737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %501) #8
  br label %1020

740:                                              ; preds = %4
  %741 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %741, label %742, label %745

742:                                              ; preds = %740
  %743 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %743) #8
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %744, align 8, !alias.scope !33
  br label %775

745:                                              ; preds = %740
  %746 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %747 = bitcast %union.TfLitePtrUnion* %746 to %"struct.Eigen::half"**
  %748 = load %"struct.Eigen::half"*, %"struct.Eigen::half"** %747, align 8
  %749 = bitcast %"struct.Eigen::half"* %748 to i8*
  %750 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #8
  %751 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %752 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %751, align 8, !noalias !33
  %753 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 0
  %754 = load i32, i32* %753, align 4, !noalias !33
  %755 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 1, i64 0
  %756 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %754, i32* %756, align 8, !alias.scope !33
  %757 = icmp sgt i32 %754, 5
  br i1 %757, label %758, label %765

758:                                              ; preds = %745
  %759 = sext i32 %754 to i64
  %760 = shl nsw i64 %759, 2
  %761 = tail call i8* @_Znam(i64 %760) #7, !noalias !33
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %763 = bitcast i32** %762 to i8**
  store i8* %761, i8** %763, align 8, !alias.scope !33
  %764 = bitcast i8* %761 to i32*
  br label %770

765:                                              ; preds = %745
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %767 = bitcast %union.anon* %766 to i32*
  %768 = sext i32 %754 to i64
  %769 = shl nsw i64 %768, 2
  br label %770

770:                                              ; preds = %765, %758
  %771 = phi i64 [ %760, %758 ], [ %769, %765 ]
  %772 = phi i32* [ %764, %758 ], [ %767, %765 ]
  %773 = bitcast i32* %772 to i8*
  %774 = bitcast i32* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %774, i64 %771, i1 false) #8
  br label %775

775:                                              ; preds = %742, %770
  %776 = phi i32 [ 0, %742 ], [ %754, %770 ]
  %777 = phi i8* [ %743, %742 ], [ %750, %770 ]
  %778 = phi i8* [ null, %742 ], [ %749, %770 ]
  %779 = phi %"struct.Eigen::half"* [ null, %742 ], [ %748, %770 ]
  %780 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %780) #8
  %781 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %781, label %782, label %784

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %783, align 8, !alias.scope !36
  br label %813

784:                                              ; preds = %775
  %785 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %786 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %785, align 8, !noalias !36
  %787 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 0
  %788 = load i32, i32* %787, align 4, !noalias !36
  %789 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 1, i64 0
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %788, i32* %790, align 8, !alias.scope !36
  %791 = icmp sgt i32 %788, 5
  br i1 %791, label %792, label %799

792:                                              ; preds = %784
  %793 = sext i32 %788 to i64
  %794 = shl nsw i64 %793, 2
  %795 = tail call i8* @_Znam(i64 %794) #7, !noalias !36
  %796 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %797 = bitcast i32** %796 to i8**
  store i8* %795, i8** %797, align 8, !alias.scope !36
  %798 = bitcast i8* %795 to i32*
  br label %804

799:                                              ; preds = %784
  %800 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %801 = bitcast %union.anon* %800 to i32*
  %802 = sext i32 %788 to i64
  %803 = shl nsw i64 %802, 2
  br label %804

804:                                              ; preds = %799, %792
  %805 = phi i64 [ %794, %792 ], [ %803, %799 ]
  %806 = phi i32* [ %798, %792 ], [ %801, %799 ]
  %807 = bitcast i32* %806 to i8*
  %808 = bitcast i32* %789 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 4 %808, i64 %805, i1 false) #8
  %809 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %810 = bitcast %union.TfLitePtrUnion* %809 to float**
  %811 = load float*, float** %810, align 8
  %812 = bitcast float* %811 to i8*
  br label %813

813:                                              ; preds = %782, %804
  %814 = phi i32 [ %788, %804 ], [ 0, %782 ]
  %815 = phi i8* [ %812, %804 ], [ null, %782 ]
  %816 = phi float* [ %811, %804 ], [ null, %782 ]
  %817 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %818 = icmp sgt i32 %776, 5
  br i1 %818, label %819, label %822

819:                                              ; preds = %813
  %820 = getelementptr inbounds %union.anon, %union.anon* %817, i64 0, i32 0
  %821 = load i32*, i32** %820, align 8
  br label %825

822:                                              ; preds = %813
  %823 = bitcast %union.anon* %817 to i32*
  %824 = icmp sgt i32 %776, 0
  br i1 %824, label %825, label %928

825:                                              ; preds = %822, %819
  %826 = phi i32* [ %821, %819 ], [ %823, %822 ]
  %827 = zext i32 %776 to i64
  %828 = icmp ult i32 %776, 8
  br i1 %828, label %914, label %829

829:                                              ; preds = %825
  %830 = and i64 %827, 4294967288
  %831 = add nsw i64 %830, -8
  %832 = lshr exact i64 %831, 3
  %833 = add nuw nsw i64 %832, 1
  %834 = and i64 %833, 3
  %835 = icmp ult i64 %831, 24
  br i1 %835, label %881, label %836

836:                                              ; preds = %829
  %837 = sub nsw i64 %833, %834
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i64 [ 0, %836 ], [ %878, %838 ]
  %840 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %876, %838 ]
  %841 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %877, %838 ]
  %842 = phi i64 [ %837, %836 ], [ %879, %838 ]
  %843 = getelementptr inbounds i32, i32* %826, i64 %839
  %844 = bitcast i32* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 4
  %846 = getelementptr inbounds i32, i32* %843, i64 4
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 4
  %849 = mul nsw <4 x i32> %845, %840
  %850 = mul nsw <4 x i32> %848, %841
  %851 = or i64 %839, 8
  %852 = getelementptr inbounds i32, i32* %826, i64 %851
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = getelementptr inbounds i32, i32* %852, i64 4
  %856 = bitcast i32* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 4
  %858 = mul nsw <4 x i32> %854, %849
  %859 = mul nsw <4 x i32> %857, %850
  %860 = or i64 %839, 16
  %861 = getelementptr inbounds i32, i32* %826, i64 %860
  %862 = bitcast i32* %861 to <4 x i32>*
  %863 = load <4 x i32>, <4 x i32>* %862, align 4
  %864 = getelementptr inbounds i32, i32* %861, i64 4
  %865 = bitcast i32* %864 to <4 x i32>*
  %866 = load <4 x i32>, <4 x i32>* %865, align 4
  %867 = mul nsw <4 x i32> %863, %858
  %868 = mul nsw <4 x i32> %866, %859
  %869 = or i64 %839, 24
  %870 = getelementptr inbounds i32, i32* %826, i64 %869
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 4
  %873 = getelementptr inbounds i32, i32* %870, i64 4
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = mul nsw <4 x i32> %872, %867
  %877 = mul nsw <4 x i32> %875, %868
  %878 = add i64 %839, 32
  %879 = add i64 %842, -4
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %838, !llvm.loop !39

881:                                              ; preds = %838, %829
  %882 = phi <4 x i32> [ undef, %829 ], [ %876, %838 ]
  %883 = phi <4 x i32> [ undef, %829 ], [ %877, %838 ]
  %884 = phi i64 [ 0, %829 ], [ %878, %838 ]
  %885 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %876, %838 ]
  %886 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %877, %838 ]
  %887 = icmp eq i64 %834, 0
  br i1 %887, label %904, label %888

888:                                              ; preds = %881, %888
  %889 = phi i64 [ %901, %888 ], [ %884, %881 ]
  %890 = phi <4 x i32> [ %899, %888 ], [ %885, %881 ]
  %891 = phi <4 x i32> [ %900, %888 ], [ %886, %881 ]
  %892 = phi i64 [ %902, %888 ], [ %834, %881 ]
  %893 = getelementptr inbounds i32, i32* %826, i64 %889
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4
  %896 = getelementptr inbounds i32, i32* %893, i64 4
  %897 = bitcast i32* %896 to <4 x i32>*
  %898 = load <4 x i32>, <4 x i32>* %897, align 4
  %899 = mul nsw <4 x i32> %895, %890
  %900 = mul nsw <4 x i32> %898, %891
  %901 = add i64 %889, 8
  %902 = add i64 %892, -1
  %903 = icmp eq i64 %902, 0
  br i1 %903, label %904, label %888, !llvm.loop !40

904:                                              ; preds = %888, %881
  %905 = phi <4 x i32> [ %882, %881 ], [ %899, %888 ]
  %906 = phi <4 x i32> [ %883, %881 ], [ %900, %888 ]
  %907 = mul <4 x i32> %906, %905
  %908 = shufflevector <4 x i32> %907, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %909 = mul <4 x i32> %907, %908
  %910 = shufflevector <4 x i32> %909, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %911 = mul <4 x i32> %909, %910
  %912 = extractelement <4 x i32> %911, i32 0
  %913 = icmp eq i64 %830, %827
  br i1 %913, label %925, label %914

914:                                              ; preds = %904, %825
  %915 = phi i64 [ 0, %825 ], [ %830, %904 ]
  %916 = phi i32 [ 1, %825 ], [ %912, %904 ]
  br label %917

917:                                              ; preds = %914, %917
  %918 = phi i64 [ %923, %917 ], [ %915, %914 ]
  %919 = phi i32 [ %922, %917 ], [ %916, %914 ]
  %920 = getelementptr inbounds i32, i32* %826, i64 %918
  %921 = load i32, i32* %920, align 4
  %922 = mul nsw i32 %921, %919
  %923 = add nuw nsw i64 %918, 1
  %924 = icmp eq i64 %923, %827
  br i1 %924, label %925, label %917, !llvm.loop !41

925:                                              ; preds = %917, %904
  %926 = phi i32 [ %912, %904 ], [ %922, %917 ]
  %927 = icmp sgt i32 %926, 0
  br i1 %927, label %928, label %1001

928:                                              ; preds = %925, %822
  %929 = phi i32 [ %926, %925 ], [ 1, %822 ]
  %930 = zext i32 %929 to i64
  %931 = icmp ult i32 %929, 4
  br i1 %931, label %971, label %932

932:                                              ; preds = %928
  %933 = getelementptr float, float* %816, i64 %930
  %934 = bitcast float* %933 to i8*
  %935 = getelementptr %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %930
  %936 = bitcast %"struct.Eigen::half"* %935 to i8*
  %937 = icmp ult i8* %815, %936
  %938 = icmp ult i8* %778, %934
  %939 = and i1 %937, %938
  br i1 %939, label %971, label %940

940:                                              ; preds = %932
  %941 = and i64 %930, 4294967292
  br label %942

942:                                              ; preds = %942, %940
  %943 = phi i64 [ 0, %940 ], [ %967, %942 ]
  %944 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %943, i32 0, i32 0, i32 0
  %945 = bitcast i16* %944 to <4 x i16>*
  %946 = load <4 x i16>, <4 x i16>* %945, align 2, !alias.scope !42
  %947 = zext <4 x i16> %946 to <4 x i32>
  %948 = shl nuw nsw <4 x i32> %947, <i32 13, i32 13, i32 13, i32 13>
  %949 = and <4 x i32> %948, <i32 268427264, i32 268427264, i32 268427264, i32 268427264>
  %950 = and <4 x i32> %948, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %951 = icmp ne <4 x i32> %950, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %952 = add nuw nsw <4 x i32> %949, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %953 = icmp eq <4 x i32> %950, zeroinitializer
  %954 = add nuw nsw <4 x i32> %949, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %955 = bitcast <4 x i32> %954 to <4 x float>
  %956 = fadd <4 x float> %955, <float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000>
  %957 = bitcast <4 x float> %956 to <4 x i32>
  %958 = or <4 x i32> %948, <i32 1879048192, i32 1879048192, i32 1879048192, i32 1879048192>
  %959 = xor <4 x i1> %953, %951
  %960 = select <4 x i1> %953, <4 x i32> %957, <4 x i32> %958
  %961 = select <4 x i1> %959, <4 x i32> %952, <4 x i32> %960
  %962 = shl nuw <4 x i32> %947, <i32 16, i32 16, i32 16, i32 16>
  %963 = and <4 x i32> %962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %964 = or <4 x i32> %961, %963
  %965 = getelementptr inbounds float, float* %816, i64 %943
  %966 = bitcast float* %965 to <4 x i32>*
  store <4 x i32> %964, <4 x i32>* %966, align 4, !alias.scope !45, !noalias !42
  %967 = add i64 %943, 4
  %968 = icmp eq i64 %967, %941
  br i1 %968, label %969, label %942, !llvm.loop !47

969:                                              ; preds = %942
  %970 = icmp eq i64 %941, %930
  br i1 %970, label %1001, label %971

971:                                              ; preds = %969, %932, %928
  %972 = phi i64 [ 0, %932 ], [ 0, %928 ], [ %941, %969 ]
  br label %973

973:                                              ; preds = %971, %992
  %974 = phi i64 [ %999, %992 ], [ %972, %971 ]
  %975 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %974, i32 0, i32 0, i32 0
  %976 = load i16, i16* %975, align 2
  %977 = zext i16 %976 to i32
  %978 = shl nuw nsw i32 %977, 13
  %979 = and i32 %978, 268427264
  %980 = and i32 %978, 260046848
  %981 = icmp eq i32 %980, 260046848
  br i1 %981, label %982, label %984

982:                                              ; preds = %973
  %983 = or i32 %978, 1879048192
  br label %992

984:                                              ; preds = %973
  %985 = add nuw nsw i32 %979, 939524096
  %986 = icmp eq i32 %980, 0
  br i1 %986, label %987, label %992

987:                                              ; preds = %984
  %988 = add nuw nsw i32 %979, 947912704
  %989 = bitcast i32 %988 to float
  %990 = fadd float %989, 0xBF10000000000000
  %991 = bitcast float %990 to i32
  br label %992

992:                                              ; preds = %987, %984, %982
  %993 = phi i32 [ %983, %982 ], [ %991, %987 ], [ %985, %984 ]
  %994 = shl nuw i32 %977, 16
  %995 = and i32 %994, -2147483648
  %996 = or i32 %993, %995
  %997 = getelementptr inbounds float, float* %816, i64 %974
  %998 = bitcast float* %997 to i32*
  store i32 %996, i32* %998, align 4
  %999 = add nuw nsw i64 %974, 1
  %1000 = icmp eq i64 %999, %930
  br i1 %1000, label %1001, label %973, !llvm.loop !48

1001:                                             ; preds = %992, %969, %925
  %1002 = icmp sgt i32 %814, 5
  br i1 %1002, label %1003, label %1009

1003:                                             ; preds = %1001
  %1004 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1005 = load i32*, i32** %1004, align 8
  %1006 = icmp eq i32* %1005, null
  br i1 %1006, label %1009, label %1007

1007:                                             ; preds = %1003
  %1008 = bitcast i32* %1005 to i8*
  tail call void @_ZdaPv(i8* %1008) #7
  br label %1009

1009:                                             ; preds = %1001, %1003, %1007
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %780) #8
  br i1 %818, label %1010, label %1016

1010:                                             ; preds = %1009
  %1011 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1012 = load i32*, i32** %1011, align 8
  %1013 = icmp eq i32* %1012, null
  br i1 %1013, label %1016, label %1014

1014:                                             ; preds = %1010
  %1015 = bitcast i32* %1012 to i8*
  tail call void @_ZdaPv(i8* %1015) #7
  br label %1016

1016:                                             ; preds = %1009, %1010, %1014
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %777) #8
  br label %1020

1017:                                             ; preds = %4
  %1018 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1019 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1018, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1019(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i32 %19) #8
  br label %1020

1020:                                             ; preds = %259, %499, %739, %1016, %1017
  %1021 = phi i32 [ 1, %1017 ], [ 0, %1016 ], [ 0, %739 ], [ 0, %499 ], [ 0, %259 ]
  ret i32 %1021
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %16 = load float, float* %15, align 8
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %1017 [
    i32 3, label %20
    i32 9, label %260
    i32 7, label %500
    i32 10, label %740
  ]

20:                                               ; preds = %4
  %21 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #8
  %22 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !49
  br label %53

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8, !noalias !49
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4, !noalias !49
  %30 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %29, i32* %31, align 8, !alias.scope !49
  %32 = icmp sgt i32 %29, 5
  br i1 %32, label %33, label %40

33:                                               ; preds = %25
  %34 = sext i32 %29 to i64
  %35 = shl nsw i64 %34, 2
  %36 = tail call i8* @_Znam(i64 %35) #7, !noalias !49
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %38 = bitcast i32** %37 to i8**
  store i8* %36, i8** %38, align 8, !alias.scope !49
  %39 = bitcast i8* %36 to i32*
  br label %45

40:                                               ; preds = %25
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %42 = bitcast %union.anon* %41 to i32*
  %43 = sext i32 %29 to i64
  %44 = shl nsw i64 %43, 2
  br label %45

45:                                               ; preds = %40, %33
  %46 = phi i64 [ %35, %33 ], [ %44, %40 ]
  %47 = phi i32* [ %39, %33 ], [ %42, %40 ]
  %48 = bitcast i32* %47 to i8*
  %49 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 %46, i1 false) #8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %51 = bitcast %union.TfLitePtrUnion* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  br label %53

53:                                               ; preds = %23, %45
  %54 = phi i32 [ %29, %45 ], [ 0, %23 ]
  %55 = phi i8* [ %52, %45 ], [ null, %23 ]
  %56 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #8
  %57 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %59, align 8, !alias.scope !52
  br label %88

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %62 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %61, align 8, !noalias !52
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4, !noalias !52
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 1, i64 0
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %64, i32* %66, align 8, !alias.scope !52
  %67 = icmp sgt i32 %64, 5
  br i1 %67, label %68, label %75

68:                                               ; preds = %60
  %69 = sext i32 %64 to i64
  %70 = shl nsw i64 %69, 2
  %71 = tail call i8* @_Znam(i64 %70) #7, !noalias !52
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %73 = bitcast i32** %72 to i8**
  store i8* %71, i8** %73, align 8, !alias.scope !52
  %74 = bitcast i8* %71 to i32*
  br label %80

75:                                               ; preds = %60
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %77 = bitcast %union.anon* %76 to i32*
  %78 = sext i32 %64 to i64
  %79 = shl nsw i64 %78, 2
  br label %80

80:                                               ; preds = %75, %68
  %81 = phi i64 [ %70, %68 ], [ %79, %75 ]
  %82 = phi i32* [ %74, %68 ], [ %77, %75 ]
  %83 = bitcast i32* %82 to i8*
  %84 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %81, i1 false) #8
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  br label %88

88:                                               ; preds = %58, %80
  %89 = phi i32 [ %64, %80 ], [ 0, %58 ]
  %90 = phi float* [ %87, %80 ], [ null, %58 ]
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %92 = icmp sgt i32 %54, 5
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %union.anon, %union.anon* %91, i64 0, i32 0
  %95 = load i32*, i32** %94, align 8
  br label %99

96:                                               ; preds = %88
  %97 = bitcast %union.anon* %91 to i32*
  %98 = icmp sgt i32 %54, 0
  br i1 %98, label %99, label %202

99:                                               ; preds = %96, %93
  %100 = phi i32* [ %95, %93 ], [ %97, %96 ]
  %101 = zext i32 %54 to i64
  %102 = icmp ult i32 %54, 8
  br i1 %102, label %188, label %103

103:                                              ; preds = %99
  %104 = and i64 %101, 4294967288
  %105 = add nsw i64 %104, -8
  %106 = lshr exact i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = and i64 %107, 3
  %109 = icmp ult i64 %105, 24
  br i1 %109, label %155, label %110

110:                                              ; preds = %103
  %111 = sub nsw i64 %107, %108
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %152, %112 ]
  %114 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %150, %112 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %151, %112 ]
  %116 = phi i64 [ %111, %110 ], [ %153, %112 ]
  %117 = getelementptr inbounds i32, i32* %100, i64 %113
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, %114
  %124 = mul nsw <4 x i32> %122, %115
  %125 = or i64 %113, 8
  %126 = getelementptr inbounds i32, i32* %100, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = mul nsw <4 x i32> %128, %123
  %133 = mul nsw <4 x i32> %131, %124
  %134 = or i64 %113, 16
  %135 = getelementptr inbounds i32, i32* %100, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %113, 24
  %144 = getelementptr inbounds i32, i32* %100, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %113, 32
  %153 = add i64 %116, -4
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %112, !llvm.loop !55

155:                                              ; preds = %112, %103
  %156 = phi <4 x i32> [ undef, %103 ], [ %150, %112 ]
  %157 = phi <4 x i32> [ undef, %103 ], [ %151, %112 ]
  %158 = phi i64 [ 0, %103 ], [ %152, %112 ]
  %159 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %150, %112 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %151, %112 ]
  %161 = icmp eq i64 %108, 0
  br i1 %161, label %178, label %162

162:                                              ; preds = %155, %162
  %163 = phi i64 [ %175, %162 ], [ %158, %155 ]
  %164 = phi <4 x i32> [ %173, %162 ], [ %159, %155 ]
  %165 = phi <4 x i32> [ %174, %162 ], [ %160, %155 ]
  %166 = phi i64 [ %176, %162 ], [ %108, %155 ]
  %167 = getelementptr inbounds i32, i32* %100, i64 %163
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %163, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %162, !llvm.loop !56

178:                                              ; preds = %162, %155
  %179 = phi <4 x i32> [ %156, %155 ], [ %173, %162 ]
  %180 = phi <4 x i32> [ %157, %155 ], [ %174, %162 ]
  %181 = mul <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = mul <4 x i32> %181, %182
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %185 = mul <4 x i32> %183, %184
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = icmp eq i64 %104, %101
  br i1 %187, label %199, label %188

188:                                              ; preds = %178, %99
  %189 = phi i64 [ 0, %99 ], [ %104, %178 ]
  %190 = phi i32 [ 1, %99 ], [ %186, %178 ]
  br label %191

191:                                              ; preds = %188, %191
  %192 = phi i64 [ %197, %191 ], [ %189, %188 ]
  %193 = phi i32 [ %196, %191 ], [ %190, %188 ]
  %194 = getelementptr inbounds i32, i32* %100, i64 %192
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i32 %195, %193
  %197 = add nuw nsw i64 %192, 1
  %198 = icmp eq i64 %197, %101
  br i1 %198, label %199, label %191, !llvm.loop !57

199:                                              ; preds = %191, %178
  %200 = phi i32 [ %186, %178 ], [ %196, %191 ]
  %201 = icmp sgt i32 %200, 0
  br i1 %201, label %202, label %244

202:                                              ; preds = %199, %96
  %203 = phi i32 [ %200, %199 ], [ 1, %96 ]
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1
  %206 = icmp eq i32 %203, 1
  br i1 %206, label %232, label %207

207:                                              ; preds = %202
  %208 = sub nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %229, %209 ]
  %211 = phi i64 [ %208, %207 ], [ %230, %209 ]
  %212 = getelementptr inbounds i8, i8* %55, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = sub nsw i32 %214, %14
  %216 = sitofp i32 %215 to double
  %217 = fmul double %17, %216
  %218 = fptrunc double %217 to float
  %219 = getelementptr inbounds float, float* %90, i64 %210
  store float %218, float* %219, align 4
  %220 = or i64 %210, 1
  %221 = getelementptr inbounds i8, i8* %55, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %223, %14
  %225 = sitofp i32 %224 to double
  %226 = fmul double %17, %225
  %227 = fptrunc double %226 to float
  %228 = getelementptr inbounds float, float* %90, i64 %220
  store float %227, float* %228, align 4
  %229 = add nuw nsw i64 %210, 2
  %230 = add i64 %211, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %209

232:                                              ; preds = %209, %202
  %233 = phi i64 [ 0, %202 ], [ %229, %209 ]
  %234 = icmp eq i64 %205, 0
  br i1 %234, label %244, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds i8, i8* %55, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = sub nsw i32 %238, %14
  %240 = sitofp i32 %239 to double
  %241 = fmul double %17, %240
  %242 = fptrunc double %241 to float
  %243 = getelementptr inbounds float, float* %90, i64 %233
  store float %242, float* %243, align 4
  br label %244

244:                                              ; preds = %235, %232, %199
  %245 = icmp sgt i32 %89, 5
  br i1 %245, label %246, label %252

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %248 = load i32*, i32** %247, align 8
  %249 = icmp eq i32* %248, null
  br i1 %249, label %252, label %250

250:                                              ; preds = %246
  %251 = bitcast i32* %248 to i8*
  tail call void @_ZdaPv(i8* %251) #7
  br label %252

252:                                              ; preds = %244, %246, %250
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #8
  br i1 %92, label %253, label %259

253:                                              ; preds = %252
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %255 = load i32*, i32** %254, align 8
  %256 = icmp eq i32* %255, null
  br i1 %256, label %259, label %257

257:                                              ; preds = %253
  %258 = bitcast i32* %255 to i8*
  tail call void @_ZdaPv(i8* %258) #7
  br label %259

259:                                              ; preds = %252, %253, %257
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #8
  br label %1020

260:                                              ; preds = %4
  %261 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %261) #8
  %262 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %264, align 8, !alias.scope !58
  br label %293

265:                                              ; preds = %260
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %267 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %266, align 8, !noalias !58
  %268 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 0
  %269 = load i32, i32* %268, align 4, !noalias !58
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 1, i64 0
  %271 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %269, i32* %271, align 8, !alias.scope !58
  %272 = icmp sgt i32 %269, 5
  br i1 %272, label %273, label %280

273:                                              ; preds = %265
  %274 = sext i32 %269 to i64
  %275 = shl nsw i64 %274, 2
  %276 = tail call i8* @_Znam(i64 %275) #7, !noalias !58
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %278 = bitcast i32** %277 to i8**
  store i8* %276, i8** %278, align 8, !alias.scope !58
  %279 = bitcast i8* %276 to i32*
  br label %285

280:                                              ; preds = %265
  %281 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %282 = bitcast %union.anon* %281 to i32*
  %283 = sext i32 %269 to i64
  %284 = shl nsw i64 %283, 2
  br label %285

285:                                              ; preds = %280, %273
  %286 = phi i64 [ %275, %273 ], [ %284, %280 ]
  %287 = phi i32* [ %279, %273 ], [ %282, %280 ]
  %288 = bitcast i32* %287 to i8*
  %289 = bitcast i32* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %288, i8* align 4 %289, i64 %286, i1 false) #8
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to i8**
  %292 = load i8*, i8** %291, align 8
  br label %293

293:                                              ; preds = %263, %285
  %294 = phi i32 [ %269, %285 ], [ 0, %263 ]
  %295 = phi i8* [ %292, %285 ], [ null, %263 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #8
  %297 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %297, label %298, label %300

298:                                              ; preds = %293
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %299, align 8, !alias.scope !61
  br label %328

300:                                              ; preds = %293
  %301 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %302 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %301, align 8, !noalias !61
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 0
  %304 = load i32, i32* %303, align 4, !noalias !61
  %305 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 1, i64 0
  %306 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %304, i32* %306, align 8, !alias.scope !61
  %307 = icmp sgt i32 %304, 5
  br i1 %307, label %308, label %315

308:                                              ; preds = %300
  %309 = sext i32 %304 to i64
  %310 = shl nsw i64 %309, 2
  %311 = tail call i8* @_Znam(i64 %310) #7, !noalias !61
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %313 = bitcast i32** %312 to i8**
  store i8* %311, i8** %313, align 8, !alias.scope !61
  %314 = bitcast i8* %311 to i32*
  br label %320

315:                                              ; preds = %300
  %316 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %317 = bitcast %union.anon* %316 to i32*
  %318 = sext i32 %304 to i64
  %319 = shl nsw i64 %318, 2
  br label %320

320:                                              ; preds = %315, %308
  %321 = phi i64 [ %310, %308 ], [ %319, %315 ]
  %322 = phi i32* [ %314, %308 ], [ %317, %315 ]
  %323 = bitcast i32* %322 to i8*
  %324 = bitcast i32* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %321, i1 false) #8
  %325 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %326 = bitcast %union.TfLitePtrUnion* %325 to float**
  %327 = load float*, float** %326, align 8
  br label %328

328:                                              ; preds = %298, %320
  %329 = phi i32 [ %304, %320 ], [ 0, %298 ]
  %330 = phi float* [ %327, %320 ], [ null, %298 ]
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %332 = icmp sgt i32 %294, 5
  br i1 %332, label %333, label %336

333:                                              ; preds = %328
  %334 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %335 = load i32*, i32** %334, align 8
  br label %339

336:                                              ; preds = %328
  %337 = bitcast %union.anon* %331 to i32*
  %338 = icmp sgt i32 %294, 0
  br i1 %338, label %339, label %442

339:                                              ; preds = %336, %333
  %340 = phi i32* [ %335, %333 ], [ %337, %336 ]
  %341 = zext i32 %294 to i64
  %342 = icmp ult i32 %294, 8
  br i1 %342, label %428, label %343

343:                                              ; preds = %339
  %344 = and i64 %341, 4294967288
  %345 = add nsw i64 %344, -8
  %346 = lshr exact i64 %345, 3
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 3
  %349 = icmp ult i64 %345, 24
  br i1 %349, label %395, label %350

350:                                              ; preds = %343
  %351 = sub nsw i64 %347, %348
  br label %352

352:                                              ; preds = %352, %350
  %353 = phi i64 [ 0, %350 ], [ %392, %352 ]
  %354 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %390, %352 ]
  %355 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %391, %352 ]
  %356 = phi i64 [ %351, %350 ], [ %393, %352 ]
  %357 = getelementptr inbounds i32, i32* %340, i64 %353
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4
  %360 = getelementptr inbounds i32, i32* %357, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4
  %363 = mul nsw <4 x i32> %359, %354
  %364 = mul nsw <4 x i32> %362, %355
  %365 = or i64 %353, 8
  %366 = getelementptr inbounds i32, i32* %340, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = getelementptr inbounds i32, i32* %366, i64 4
  %370 = bitcast i32* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 4
  %372 = mul nsw <4 x i32> %368, %363
  %373 = mul nsw <4 x i32> %371, %364
  %374 = or i64 %353, 16
  %375 = getelementptr inbounds i32, i32* %340, i64 %374
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4
  %378 = getelementptr inbounds i32, i32* %375, i64 4
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = mul nsw <4 x i32> %377, %372
  %382 = mul nsw <4 x i32> %380, %373
  %383 = or i64 %353, 24
  %384 = getelementptr inbounds i32, i32* %340, i64 %383
  %385 = bitcast i32* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 4
  %387 = getelementptr inbounds i32, i32* %384, i64 4
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = mul nsw <4 x i32> %386, %381
  %391 = mul nsw <4 x i32> %389, %382
  %392 = add i64 %353, 32
  %393 = add i64 %356, -4
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %352, !llvm.loop !64

395:                                              ; preds = %352, %343
  %396 = phi <4 x i32> [ undef, %343 ], [ %390, %352 ]
  %397 = phi <4 x i32> [ undef, %343 ], [ %391, %352 ]
  %398 = phi i64 [ 0, %343 ], [ %392, %352 ]
  %399 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %390, %352 ]
  %400 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %391, %352 ]
  %401 = icmp eq i64 %348, 0
  br i1 %401, label %418, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %415, %402 ], [ %398, %395 ]
  %404 = phi <4 x i32> [ %413, %402 ], [ %399, %395 ]
  %405 = phi <4 x i32> [ %414, %402 ], [ %400, %395 ]
  %406 = phi i64 [ %416, %402 ], [ %348, %395 ]
  %407 = getelementptr inbounds i32, i32* %340, i64 %403
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4
  %410 = getelementptr inbounds i32, i32* %407, i64 4
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = mul nsw <4 x i32> %409, %404
  %414 = mul nsw <4 x i32> %412, %405
  %415 = add i64 %403, 8
  %416 = add i64 %406, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %402, !llvm.loop !65

418:                                              ; preds = %402, %395
  %419 = phi <4 x i32> [ %396, %395 ], [ %413, %402 ]
  %420 = phi <4 x i32> [ %397, %395 ], [ %414, %402 ]
  %421 = mul <4 x i32> %420, %419
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %423 = mul <4 x i32> %421, %422
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %425 = mul <4 x i32> %423, %424
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = icmp eq i64 %344, %341
  br i1 %427, label %439, label %428

428:                                              ; preds = %418, %339
  %429 = phi i64 [ 0, %339 ], [ %344, %418 ]
  %430 = phi i32 [ 1, %339 ], [ %426, %418 ]
  br label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %437, %431 ], [ %429, %428 ]
  %433 = phi i32 [ %436, %431 ], [ %430, %428 ]
  %434 = getelementptr inbounds i32, i32* %340, i64 %432
  %435 = load i32, i32* %434, align 4
  %436 = mul nsw i32 %435, %433
  %437 = add nuw nsw i64 %432, 1
  %438 = icmp eq i64 %437, %341
  br i1 %438, label %439, label %431, !llvm.loop !66

439:                                              ; preds = %431, %418
  %440 = phi i32 [ %426, %418 ], [ %436, %431 ]
  %441 = icmp sgt i32 %440, 0
  br i1 %441, label %442, label %484

442:                                              ; preds = %439, %336
  %443 = phi i32 [ %440, %439 ], [ 1, %336 ]
  %444 = zext i32 %443 to i64
  %445 = and i64 %444, 1
  %446 = icmp eq i32 %443, 1
  br i1 %446, label %472, label %447

447:                                              ; preds = %442
  %448 = sub nsw i64 %444, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %469, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %470, %449 ]
  %452 = getelementptr inbounds i8, i8* %295, i64 %450
  %453 = load i8, i8* %452, align 1
  %454 = sext i8 %453 to i32
  %455 = sub nsw i32 %454, %14
  %456 = sitofp i32 %455 to double
  %457 = fmul double %17, %456
  %458 = fptrunc double %457 to float
  %459 = getelementptr inbounds float, float* %330, i64 %450
  store float %458, float* %459, align 4
  %460 = or i64 %450, 1
  %461 = getelementptr inbounds i8, i8* %295, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i32
  %464 = sub nsw i32 %463, %14
  %465 = sitofp i32 %464 to double
  %466 = fmul double %17, %465
  %467 = fptrunc double %466 to float
  %468 = getelementptr inbounds float, float* %330, i64 %460
  store float %467, float* %468, align 4
  %469 = add nuw nsw i64 %450, 2
  %470 = add i64 %451, -2
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %449

472:                                              ; preds = %449, %442
  %473 = phi i64 [ 0, %442 ], [ %469, %449 ]
  %474 = icmp eq i64 %445, 0
  br i1 %474, label %484, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds i8, i8* %295, i64 %473
  %477 = load i8, i8* %476, align 1
  %478 = sext i8 %477 to i32
  %479 = sub nsw i32 %478, %14
  %480 = sitofp i32 %479 to double
  %481 = fmul double %17, %480
  %482 = fptrunc double %481 to float
  %483 = getelementptr inbounds float, float* %330, i64 %473
  store float %482, float* %483, align 4
  br label %484

484:                                              ; preds = %475, %472, %439
  %485 = icmp sgt i32 %329, 5
  br i1 %485, label %486, label %492

486:                                              ; preds = %484
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %488 = load i32*, i32** %487, align 8
  %489 = icmp eq i32* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %486
  %491 = bitcast i32* %488 to i8*
  tail call void @_ZdaPv(i8* %491) #7
  br label %492

492:                                              ; preds = %484, %486, %490
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #8
  br i1 %332, label %493, label %499

493:                                              ; preds = %492
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %495 = load i32*, i32** %494, align 8
  %496 = icmp eq i32* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %493
  %498 = bitcast i32* %495 to i8*
  tail call void @_ZdaPv(i8* %498) #7
  br label %499

499:                                              ; preds = %492, %493, %497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %261) #8
  br label %1020

500:                                              ; preds = %4
  %501 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %501) #8
  %502 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %502, label %503, label %505

503:                                              ; preds = %500
  %504 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %504, align 8, !alias.scope !67
  br label %533

505:                                              ; preds = %500
  %506 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %507 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %506, align 8, !noalias !67
  %508 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 0
  %509 = load i32, i32* %508, align 4, !noalias !67
  %510 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 1, i64 0
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %509, i32* %511, align 8, !alias.scope !67
  %512 = icmp sgt i32 %509, 5
  br i1 %512, label %513, label %520

513:                                              ; preds = %505
  %514 = sext i32 %509 to i64
  %515 = shl nsw i64 %514, 2
  %516 = tail call i8* @_Znam(i64 %515) #7, !noalias !67
  %517 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %518 = bitcast i32** %517 to i8**
  store i8* %516, i8** %518, align 8, !alias.scope !67
  %519 = bitcast i8* %516 to i32*
  br label %525

520:                                              ; preds = %505
  %521 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %522 = bitcast %union.anon* %521 to i32*
  %523 = sext i32 %509 to i64
  %524 = shl nsw i64 %523, 2
  br label %525

525:                                              ; preds = %520, %513
  %526 = phi i64 [ %515, %513 ], [ %524, %520 ]
  %527 = phi i32* [ %519, %513 ], [ %522, %520 ]
  %528 = bitcast i32* %527 to i8*
  %529 = bitcast i32* %510 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %528, i8* align 4 %529, i64 %526, i1 false) #8
  %530 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %531 = bitcast %union.TfLitePtrUnion* %530 to i16**
  %532 = load i16*, i16** %531, align 8
  br label %533

533:                                              ; preds = %503, %525
  %534 = phi i32 [ %509, %525 ], [ 0, %503 ]
  %535 = phi i16* [ %532, %525 ], [ null, %503 ]
  %536 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %536) #8
  %537 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %537, label %538, label %540

538:                                              ; preds = %533
  %539 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %539, align 8, !alias.scope !70
  br label %568

540:                                              ; preds = %533
  %541 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %542 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %541, align 8, !noalias !70
  %543 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 0
  %544 = load i32, i32* %543, align 4, !noalias !70
  %545 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 1, i64 0
  %546 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %544, i32* %546, align 8, !alias.scope !70
  %547 = icmp sgt i32 %544, 5
  br i1 %547, label %548, label %555

548:                                              ; preds = %540
  %549 = sext i32 %544 to i64
  %550 = shl nsw i64 %549, 2
  %551 = tail call i8* @_Znam(i64 %550) #7, !noalias !70
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %553 = bitcast i32** %552 to i8**
  store i8* %551, i8** %553, align 8, !alias.scope !70
  %554 = bitcast i8* %551 to i32*
  br label %560

555:                                              ; preds = %540
  %556 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %557 = bitcast %union.anon* %556 to i32*
  %558 = sext i32 %544 to i64
  %559 = shl nsw i64 %558, 2
  br label %560

560:                                              ; preds = %555, %548
  %561 = phi i64 [ %550, %548 ], [ %559, %555 ]
  %562 = phi i32* [ %554, %548 ], [ %557, %555 ]
  %563 = bitcast i32* %562 to i8*
  %564 = bitcast i32* %545 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %563, i8* align 4 %564, i64 %561, i1 false) #8
  %565 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %566 = bitcast %union.TfLitePtrUnion* %565 to float**
  %567 = load float*, float** %566, align 8
  br label %568

568:                                              ; preds = %538, %560
  %569 = phi i32 [ %544, %560 ], [ 0, %538 ]
  %570 = phi float* [ %567, %560 ], [ null, %538 ]
  %571 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %572 = icmp sgt i32 %534, 5
  br i1 %572, label %573, label %576

573:                                              ; preds = %568
  %574 = getelementptr inbounds %union.anon, %union.anon* %571, i64 0, i32 0
  %575 = load i32*, i32** %574, align 8
  br label %579

576:                                              ; preds = %568
  %577 = bitcast %union.anon* %571 to i32*
  %578 = icmp sgt i32 %534, 0
  br i1 %578, label %579, label %682

579:                                              ; preds = %576, %573
  %580 = phi i32* [ %575, %573 ], [ %577, %576 ]
  %581 = zext i32 %534 to i64
  %582 = icmp ult i32 %534, 8
  br i1 %582, label %668, label %583

583:                                              ; preds = %579
  %584 = and i64 %581, 4294967288
  %585 = add nsw i64 %584, -8
  %586 = lshr exact i64 %585, 3
  %587 = add nuw nsw i64 %586, 1
  %588 = and i64 %587, 3
  %589 = icmp ult i64 %585, 24
  br i1 %589, label %635, label %590

590:                                              ; preds = %583
  %591 = sub nsw i64 %587, %588
  br label %592

592:                                              ; preds = %592, %590
  %593 = phi i64 [ 0, %590 ], [ %632, %592 ]
  %594 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %630, %592 ]
  %595 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %631, %592 ]
  %596 = phi i64 [ %591, %590 ], [ %633, %592 ]
  %597 = getelementptr inbounds i32, i32* %580, i64 %593
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 4
  %600 = getelementptr inbounds i32, i32* %597, i64 4
  %601 = bitcast i32* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 4
  %603 = mul nsw <4 x i32> %599, %594
  %604 = mul nsw <4 x i32> %602, %595
  %605 = or i64 %593, 8
  %606 = getelementptr inbounds i32, i32* %580, i64 %605
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4
  %609 = getelementptr inbounds i32, i32* %606, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4
  %612 = mul nsw <4 x i32> %608, %603
  %613 = mul nsw <4 x i32> %611, %604
  %614 = or i64 %593, 16
  %615 = getelementptr inbounds i32, i32* %580, i64 %614
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4
  %618 = getelementptr inbounds i32, i32* %615, i64 4
  %619 = bitcast i32* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 4
  %621 = mul nsw <4 x i32> %617, %612
  %622 = mul nsw <4 x i32> %620, %613
  %623 = or i64 %593, 24
  %624 = getelementptr inbounds i32, i32* %580, i64 %623
  %625 = bitcast i32* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4
  %627 = getelementptr inbounds i32, i32* %624, i64 4
  %628 = bitcast i32* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4
  %630 = mul nsw <4 x i32> %626, %621
  %631 = mul nsw <4 x i32> %629, %622
  %632 = add i64 %593, 32
  %633 = add i64 %596, -4
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %592, !llvm.loop !73

635:                                              ; preds = %592, %583
  %636 = phi <4 x i32> [ undef, %583 ], [ %630, %592 ]
  %637 = phi <4 x i32> [ undef, %583 ], [ %631, %592 ]
  %638 = phi i64 [ 0, %583 ], [ %632, %592 ]
  %639 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %630, %592 ]
  %640 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %631, %592 ]
  %641 = icmp eq i64 %588, 0
  br i1 %641, label %658, label %642

642:                                              ; preds = %635, %642
  %643 = phi i64 [ %655, %642 ], [ %638, %635 ]
  %644 = phi <4 x i32> [ %653, %642 ], [ %639, %635 ]
  %645 = phi <4 x i32> [ %654, %642 ], [ %640, %635 ]
  %646 = phi i64 [ %656, %642 ], [ %588, %635 ]
  %647 = getelementptr inbounds i32, i32* %580, i64 %643
  %648 = bitcast i32* %647 to <4 x i32>*
  %649 = load <4 x i32>, <4 x i32>* %648, align 4
  %650 = getelementptr inbounds i32, i32* %647, i64 4
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4
  %653 = mul nsw <4 x i32> %649, %644
  %654 = mul nsw <4 x i32> %652, %645
  %655 = add i64 %643, 8
  %656 = add i64 %646, -1
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %642, !llvm.loop !74

658:                                              ; preds = %642, %635
  %659 = phi <4 x i32> [ %636, %635 ], [ %653, %642 ]
  %660 = phi <4 x i32> [ %637, %635 ], [ %654, %642 ]
  %661 = mul <4 x i32> %660, %659
  %662 = shufflevector <4 x i32> %661, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %663 = mul <4 x i32> %661, %662
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %665 = mul <4 x i32> %663, %664
  %666 = extractelement <4 x i32> %665, i32 0
  %667 = icmp eq i64 %584, %581
  br i1 %667, label %679, label %668

668:                                              ; preds = %658, %579
  %669 = phi i64 [ 0, %579 ], [ %584, %658 ]
  %670 = phi i32 [ 1, %579 ], [ %666, %658 ]
  br label %671

671:                                              ; preds = %668, %671
  %672 = phi i64 [ %677, %671 ], [ %669, %668 ]
  %673 = phi i32 [ %676, %671 ], [ %670, %668 ]
  %674 = getelementptr inbounds i32, i32* %580, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = mul nsw i32 %675, %673
  %677 = add nuw nsw i64 %672, 1
  %678 = icmp eq i64 %677, %581
  br i1 %678, label %679, label %671, !llvm.loop !75

679:                                              ; preds = %671, %658
  %680 = phi i32 [ %666, %658 ], [ %676, %671 ]
  %681 = icmp sgt i32 %680, 0
  br i1 %681, label %682, label %724

682:                                              ; preds = %679, %576
  %683 = phi i32 [ %680, %679 ], [ 1, %576 ]
  %684 = zext i32 %683 to i64
  %685 = and i64 %684, 1
  %686 = icmp eq i32 %683, 1
  br i1 %686, label %712, label %687

687:                                              ; preds = %682
  %688 = sub nsw i64 %684, %685
  br label %689

689:                                              ; preds = %689, %687
  %690 = phi i64 [ 0, %687 ], [ %709, %689 ]
  %691 = phi i64 [ %688, %687 ], [ %710, %689 ]
  %692 = getelementptr inbounds i16, i16* %535, i64 %690
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = sub nsw i32 %694, %14
  %696 = sitofp i32 %695 to double
  %697 = fmul double %17, %696
  %698 = fptrunc double %697 to float
  %699 = getelementptr inbounds float, float* %570, i64 %690
  store float %698, float* %699, align 4
  %700 = or i64 %690, 1
  %701 = getelementptr inbounds i16, i16* %535, i64 %700
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = sub nsw i32 %703, %14
  %705 = sitofp i32 %704 to double
  %706 = fmul double %17, %705
  %707 = fptrunc double %706 to float
  %708 = getelementptr inbounds float, float* %570, i64 %700
  store float %707, float* %708, align 4
  %709 = add nuw nsw i64 %690, 2
  %710 = add i64 %691, -2
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %689

712:                                              ; preds = %689, %682
  %713 = phi i64 [ 0, %682 ], [ %709, %689 ]
  %714 = icmp eq i64 %685, 0
  br i1 %714, label %724, label %715

715:                                              ; preds = %712
  %716 = getelementptr inbounds i16, i16* %535, i64 %713
  %717 = load i16, i16* %716, align 2
  %718 = sext i16 %717 to i32
  %719 = sub nsw i32 %718, %14
  %720 = sitofp i32 %719 to double
  %721 = fmul double %17, %720
  %722 = fptrunc double %721 to float
  %723 = getelementptr inbounds float, float* %570, i64 %713
  store float %722, float* %723, align 4
  br label %724

724:                                              ; preds = %715, %712, %679
  %725 = icmp sgt i32 %569, 5
  br i1 %725, label %726, label %732

726:                                              ; preds = %724
  %727 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %728 = load i32*, i32** %727, align 8
  %729 = icmp eq i32* %728, null
  br i1 %729, label %732, label %730

730:                                              ; preds = %726
  %731 = bitcast i32* %728 to i8*
  tail call void @_ZdaPv(i8* %731) #7
  br label %732

732:                                              ; preds = %724, %726, %730
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %536) #8
  br i1 %572, label %733, label %739

733:                                              ; preds = %732
  %734 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %735 = load i32*, i32** %734, align 8
  %736 = icmp eq i32* %735, null
  br i1 %736, label %739, label %737

737:                                              ; preds = %733
  %738 = bitcast i32* %735 to i8*
  tail call void @_ZdaPv(i8* %738) #7
  br label %739

739:                                              ; preds = %732, %733, %737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %501) #8
  br label %1020

740:                                              ; preds = %4
  %741 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %741, label %742, label %745

742:                                              ; preds = %740
  %743 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %743) #8
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %744, align 8, !alias.scope !76
  br label %775

745:                                              ; preds = %740
  %746 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %747 = bitcast %union.TfLitePtrUnion* %746 to %"struct.Eigen::half"**
  %748 = load %"struct.Eigen::half"*, %"struct.Eigen::half"** %747, align 8
  %749 = bitcast %"struct.Eigen::half"* %748 to i8*
  %750 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #8
  %751 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %752 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %751, align 8, !noalias !76
  %753 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 0
  %754 = load i32, i32* %753, align 4, !noalias !76
  %755 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 1, i64 0
  %756 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %754, i32* %756, align 8, !alias.scope !76
  %757 = icmp sgt i32 %754, 5
  br i1 %757, label %758, label %765

758:                                              ; preds = %745
  %759 = sext i32 %754 to i64
  %760 = shl nsw i64 %759, 2
  %761 = tail call i8* @_Znam(i64 %760) #7, !noalias !76
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %763 = bitcast i32** %762 to i8**
  store i8* %761, i8** %763, align 8, !alias.scope !76
  %764 = bitcast i8* %761 to i32*
  br label %770

765:                                              ; preds = %745
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %767 = bitcast %union.anon* %766 to i32*
  %768 = sext i32 %754 to i64
  %769 = shl nsw i64 %768, 2
  br label %770

770:                                              ; preds = %765, %758
  %771 = phi i64 [ %760, %758 ], [ %769, %765 ]
  %772 = phi i32* [ %764, %758 ], [ %767, %765 ]
  %773 = bitcast i32* %772 to i8*
  %774 = bitcast i32* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %774, i64 %771, i1 false) #8
  br label %775

775:                                              ; preds = %742, %770
  %776 = phi i32 [ 0, %742 ], [ %754, %770 ]
  %777 = phi i8* [ %743, %742 ], [ %750, %770 ]
  %778 = phi i8* [ null, %742 ], [ %749, %770 ]
  %779 = phi %"struct.Eigen::half"* [ null, %742 ], [ %748, %770 ]
  %780 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %780) #8
  %781 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %781, label %782, label %784

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %783, align 8, !alias.scope !79
  br label %813

784:                                              ; preds = %775
  %785 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %786 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %785, align 8, !noalias !79
  %787 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 0
  %788 = load i32, i32* %787, align 4, !noalias !79
  %789 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 1, i64 0
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %788, i32* %790, align 8, !alias.scope !79
  %791 = icmp sgt i32 %788, 5
  br i1 %791, label %792, label %799

792:                                              ; preds = %784
  %793 = sext i32 %788 to i64
  %794 = shl nsw i64 %793, 2
  %795 = tail call i8* @_Znam(i64 %794) #7, !noalias !79
  %796 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %797 = bitcast i32** %796 to i8**
  store i8* %795, i8** %797, align 8, !alias.scope !79
  %798 = bitcast i8* %795 to i32*
  br label %804

799:                                              ; preds = %784
  %800 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %801 = bitcast %union.anon* %800 to i32*
  %802 = sext i32 %788 to i64
  %803 = shl nsw i64 %802, 2
  br label %804

804:                                              ; preds = %799, %792
  %805 = phi i64 [ %794, %792 ], [ %803, %799 ]
  %806 = phi i32* [ %798, %792 ], [ %801, %799 ]
  %807 = bitcast i32* %806 to i8*
  %808 = bitcast i32* %789 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 4 %808, i64 %805, i1 false) #8
  %809 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %810 = bitcast %union.TfLitePtrUnion* %809 to float**
  %811 = load float*, float** %810, align 8
  %812 = bitcast float* %811 to i8*
  br label %813

813:                                              ; preds = %782, %804
  %814 = phi i32 [ %788, %804 ], [ 0, %782 ]
  %815 = phi i8* [ %812, %804 ], [ null, %782 ]
  %816 = phi float* [ %811, %804 ], [ null, %782 ]
  %817 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %818 = icmp sgt i32 %776, 5
  br i1 %818, label %819, label %822

819:                                              ; preds = %813
  %820 = getelementptr inbounds %union.anon, %union.anon* %817, i64 0, i32 0
  %821 = load i32*, i32** %820, align 8
  br label %825

822:                                              ; preds = %813
  %823 = bitcast %union.anon* %817 to i32*
  %824 = icmp sgt i32 %776, 0
  br i1 %824, label %825, label %928

825:                                              ; preds = %822, %819
  %826 = phi i32* [ %821, %819 ], [ %823, %822 ]
  %827 = zext i32 %776 to i64
  %828 = icmp ult i32 %776, 8
  br i1 %828, label %914, label %829

829:                                              ; preds = %825
  %830 = and i64 %827, 4294967288
  %831 = add nsw i64 %830, -8
  %832 = lshr exact i64 %831, 3
  %833 = add nuw nsw i64 %832, 1
  %834 = and i64 %833, 3
  %835 = icmp ult i64 %831, 24
  br i1 %835, label %881, label %836

836:                                              ; preds = %829
  %837 = sub nsw i64 %833, %834
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i64 [ 0, %836 ], [ %878, %838 ]
  %840 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %876, %838 ]
  %841 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %877, %838 ]
  %842 = phi i64 [ %837, %836 ], [ %879, %838 ]
  %843 = getelementptr inbounds i32, i32* %826, i64 %839
  %844 = bitcast i32* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 4
  %846 = getelementptr inbounds i32, i32* %843, i64 4
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 4
  %849 = mul nsw <4 x i32> %845, %840
  %850 = mul nsw <4 x i32> %848, %841
  %851 = or i64 %839, 8
  %852 = getelementptr inbounds i32, i32* %826, i64 %851
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = getelementptr inbounds i32, i32* %852, i64 4
  %856 = bitcast i32* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 4
  %858 = mul nsw <4 x i32> %854, %849
  %859 = mul nsw <4 x i32> %857, %850
  %860 = or i64 %839, 16
  %861 = getelementptr inbounds i32, i32* %826, i64 %860
  %862 = bitcast i32* %861 to <4 x i32>*
  %863 = load <4 x i32>, <4 x i32>* %862, align 4
  %864 = getelementptr inbounds i32, i32* %861, i64 4
  %865 = bitcast i32* %864 to <4 x i32>*
  %866 = load <4 x i32>, <4 x i32>* %865, align 4
  %867 = mul nsw <4 x i32> %863, %858
  %868 = mul nsw <4 x i32> %866, %859
  %869 = or i64 %839, 24
  %870 = getelementptr inbounds i32, i32* %826, i64 %869
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 4
  %873 = getelementptr inbounds i32, i32* %870, i64 4
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = mul nsw <4 x i32> %872, %867
  %877 = mul nsw <4 x i32> %875, %868
  %878 = add i64 %839, 32
  %879 = add i64 %842, -4
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %838, !llvm.loop !82

881:                                              ; preds = %838, %829
  %882 = phi <4 x i32> [ undef, %829 ], [ %876, %838 ]
  %883 = phi <4 x i32> [ undef, %829 ], [ %877, %838 ]
  %884 = phi i64 [ 0, %829 ], [ %878, %838 ]
  %885 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %876, %838 ]
  %886 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %877, %838 ]
  %887 = icmp eq i64 %834, 0
  br i1 %887, label %904, label %888

888:                                              ; preds = %881, %888
  %889 = phi i64 [ %901, %888 ], [ %884, %881 ]
  %890 = phi <4 x i32> [ %899, %888 ], [ %885, %881 ]
  %891 = phi <4 x i32> [ %900, %888 ], [ %886, %881 ]
  %892 = phi i64 [ %902, %888 ], [ %834, %881 ]
  %893 = getelementptr inbounds i32, i32* %826, i64 %889
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4
  %896 = getelementptr inbounds i32, i32* %893, i64 4
  %897 = bitcast i32* %896 to <4 x i32>*
  %898 = load <4 x i32>, <4 x i32>* %897, align 4
  %899 = mul nsw <4 x i32> %895, %890
  %900 = mul nsw <4 x i32> %898, %891
  %901 = add i64 %889, 8
  %902 = add i64 %892, -1
  %903 = icmp eq i64 %902, 0
  br i1 %903, label %904, label %888, !llvm.loop !83

904:                                              ; preds = %888, %881
  %905 = phi <4 x i32> [ %882, %881 ], [ %899, %888 ]
  %906 = phi <4 x i32> [ %883, %881 ], [ %900, %888 ]
  %907 = mul <4 x i32> %906, %905
  %908 = shufflevector <4 x i32> %907, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %909 = mul <4 x i32> %907, %908
  %910 = shufflevector <4 x i32> %909, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %911 = mul <4 x i32> %909, %910
  %912 = extractelement <4 x i32> %911, i32 0
  %913 = icmp eq i64 %830, %827
  br i1 %913, label %925, label %914

914:                                              ; preds = %904, %825
  %915 = phi i64 [ 0, %825 ], [ %830, %904 ]
  %916 = phi i32 [ 1, %825 ], [ %912, %904 ]
  br label %917

917:                                              ; preds = %914, %917
  %918 = phi i64 [ %923, %917 ], [ %915, %914 ]
  %919 = phi i32 [ %922, %917 ], [ %916, %914 ]
  %920 = getelementptr inbounds i32, i32* %826, i64 %918
  %921 = load i32, i32* %920, align 4
  %922 = mul nsw i32 %921, %919
  %923 = add nuw nsw i64 %918, 1
  %924 = icmp eq i64 %923, %827
  br i1 %924, label %925, label %917, !llvm.loop !84

925:                                              ; preds = %917, %904
  %926 = phi i32 [ %912, %904 ], [ %922, %917 ]
  %927 = icmp sgt i32 %926, 0
  br i1 %927, label %928, label %1001

928:                                              ; preds = %925, %822
  %929 = phi i32 [ %926, %925 ], [ 1, %822 ]
  %930 = zext i32 %929 to i64
  %931 = icmp ult i32 %929, 4
  br i1 %931, label %971, label %932

932:                                              ; preds = %928
  %933 = getelementptr float, float* %816, i64 %930
  %934 = bitcast float* %933 to i8*
  %935 = getelementptr %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %930
  %936 = bitcast %"struct.Eigen::half"* %935 to i8*
  %937 = icmp ult i8* %815, %936
  %938 = icmp ult i8* %778, %934
  %939 = and i1 %937, %938
  br i1 %939, label %971, label %940

940:                                              ; preds = %932
  %941 = and i64 %930, 4294967292
  br label %942

942:                                              ; preds = %942, %940
  %943 = phi i64 [ 0, %940 ], [ %967, %942 ]
  %944 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %943, i32 0, i32 0, i32 0
  %945 = bitcast i16* %944 to <4 x i16>*
  %946 = load <4 x i16>, <4 x i16>* %945, align 2, !alias.scope !85
  %947 = zext <4 x i16> %946 to <4 x i32>
  %948 = shl nuw nsw <4 x i32> %947, <i32 13, i32 13, i32 13, i32 13>
  %949 = and <4 x i32> %948, <i32 268427264, i32 268427264, i32 268427264, i32 268427264>
  %950 = and <4 x i32> %948, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %951 = icmp ne <4 x i32> %950, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %952 = add nuw nsw <4 x i32> %949, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %953 = icmp eq <4 x i32> %950, zeroinitializer
  %954 = add nuw nsw <4 x i32> %949, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %955 = bitcast <4 x i32> %954 to <4 x float>
  %956 = fadd <4 x float> %955, <float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000>
  %957 = bitcast <4 x float> %956 to <4 x i32>
  %958 = or <4 x i32> %948, <i32 1879048192, i32 1879048192, i32 1879048192, i32 1879048192>
  %959 = xor <4 x i1> %953, %951
  %960 = select <4 x i1> %953, <4 x i32> %957, <4 x i32> %958
  %961 = select <4 x i1> %959, <4 x i32> %952, <4 x i32> %960
  %962 = shl nuw <4 x i32> %947, <i32 16, i32 16, i32 16, i32 16>
  %963 = and <4 x i32> %962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %964 = or <4 x i32> %961, %963
  %965 = getelementptr inbounds float, float* %816, i64 %943
  %966 = bitcast float* %965 to <4 x i32>*
  store <4 x i32> %964, <4 x i32>* %966, align 4, !alias.scope !88, !noalias !85
  %967 = add i64 %943, 4
  %968 = icmp eq i64 %967, %941
  br i1 %968, label %969, label %942, !llvm.loop !90

969:                                              ; preds = %942
  %970 = icmp eq i64 %941, %930
  br i1 %970, label %1001, label %971

971:                                              ; preds = %969, %932, %928
  %972 = phi i64 [ 0, %932 ], [ 0, %928 ], [ %941, %969 ]
  br label %973

973:                                              ; preds = %971, %992
  %974 = phi i64 [ %999, %992 ], [ %972, %971 ]
  %975 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %974, i32 0, i32 0, i32 0
  %976 = load i16, i16* %975, align 2
  %977 = zext i16 %976 to i32
  %978 = shl nuw nsw i32 %977, 13
  %979 = and i32 %978, 268427264
  %980 = and i32 %978, 260046848
  %981 = icmp eq i32 %980, 260046848
  br i1 %981, label %982, label %984

982:                                              ; preds = %973
  %983 = or i32 %978, 1879048192
  br label %992

984:                                              ; preds = %973
  %985 = add nuw nsw i32 %979, 939524096
  %986 = icmp eq i32 %980, 0
  br i1 %986, label %987, label %992

987:                                              ; preds = %984
  %988 = add nuw nsw i32 %979, 947912704
  %989 = bitcast i32 %988 to float
  %990 = fadd float %989, 0xBF10000000000000
  %991 = bitcast float %990 to i32
  br label %992

992:                                              ; preds = %987, %984, %982
  %993 = phi i32 [ %983, %982 ], [ %991, %987 ], [ %985, %984 ]
  %994 = shl nuw i32 %977, 16
  %995 = and i32 %994, -2147483648
  %996 = or i32 %993, %995
  %997 = getelementptr inbounds float, float* %816, i64 %974
  %998 = bitcast float* %997 to i32*
  store i32 %996, i32* %998, align 4
  %999 = add nuw nsw i64 %974, 1
  %1000 = icmp eq i64 %999, %930
  br i1 %1000, label %1001, label %973, !llvm.loop !91

1001:                                             ; preds = %992, %969, %925
  %1002 = icmp sgt i32 %814, 5
  br i1 %1002, label %1003, label %1009

1003:                                             ; preds = %1001
  %1004 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1005 = load i32*, i32** %1004, align 8
  %1006 = icmp eq i32* %1005, null
  br i1 %1006, label %1009, label %1007

1007:                                             ; preds = %1003
  %1008 = bitcast i32* %1005 to i8*
  tail call void @_ZdaPv(i8* %1008) #7
  br label %1009

1009:                                             ; preds = %1001, %1003, %1007
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %780) #8
  br i1 %818, label %1010, label %1016

1010:                                             ; preds = %1009
  %1011 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1012 = load i32*, i32** %1011, align 8
  %1013 = icmp eq i32* %1012, null
  br i1 %1013, label %1016, label %1014

1014:                                             ; preds = %1010
  %1015 = bitcast i32* %1012 to i8*
  tail call void @_ZdaPv(i8* %1015) #7
  br label %1016

1016:                                             ; preds = %1009, %1010, %1014
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %777) #8
  br label %1020

1017:                                             ; preds = %4
  %1018 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1019 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1018, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1019(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i32 %19) #8
  br label %1020

1020:                                             ; preds = %259, %499, %739, %1016, %1017
  %1021 = phi i32 [ 1, %1017 ], [ 0, %1016 ], [ 0, %739 ], [ 0, %499 ], [ 0, %259 ]
  ret i32 %1021
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!5 = distinct !{!5, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!8 = distinct !{!8, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14, !10}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!17 = distinct !{!17, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!20 = distinct !{!20, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14, !10}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!26 = distinct !{!26, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!29 = distinct !{!29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!30 = distinct !{!30, !10}
!31 = distinct !{!31, !12}
!32 = distinct !{!32, !14, !10}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!35 = distinct !{!35, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!38 = distinct !{!38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!39 = distinct !{!39, !10}
!40 = distinct !{!40, !12}
!41 = distinct !{!41, !14, !10}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !10}
!48 = distinct !{!48, !10}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!51 = distinct !{!51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!54 = distinct !{!54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!55 = distinct !{!55, !10}
!56 = distinct !{!56, !12}
!57 = distinct !{!57, !14, !10}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!60 = distinct !{!60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!63 = distinct !{!63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!64 = distinct !{!64, !10}
!65 = distinct !{!65, !12}
!66 = distinct !{!66, !14, !10}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!69 = distinct !{!69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!72 = distinct !{!72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!73 = distinct !{!73, !10}
!74 = distinct !{!74, !12}
!75 = distinct !{!75, !14, !10}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!78 = distinct !{!78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!81 = distinct !{!81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!82 = distinct !{!82, !10}
!83 = distinct !{!83, !12}
!84 = distinct !{!84, !14, !10}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !10}
!91 = distinct !{!91, !10}
