; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_time.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_time.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.quic::QuicTime::Delta" = type { i64 }
%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"class.absl::string_view" = type { i8*, i64 }
%"class.quic::QuicWallTime" = type { i64 }

@.str = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"us\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4quic8QuicTime5Delta16ToDebuggingValueEv(%"class.std::__1::basic_string"* noalias sret, %"class.quic::QuicTime::Delta"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::AlphaNum", align 8
  %4 = alloca %"class.absl::AlphaNum", align 8
  %5 = alloca %"class.absl::AlphaNum", align 8
  %6 = alloca %"class.absl::AlphaNum", align 8
  %7 = alloca %"class.absl::AlphaNum", align 8
  %8 = alloca %"class.absl::AlphaNum", align 8
  %9 = getelementptr inbounds %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta"* %1, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sub nsw i64 0, %10
  %12 = icmp slt i64 %10, 0
  %13 = select i1 %12, i64 %11, i64 %10
  %14 = icmp sgt i64 %13, 1000000
  %15 = urem i64 %13, 1000000
  %16 = icmp eq i64 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %34

18:                                               ; preds = %2
  %19 = bitcast %"class.absl::AlphaNum"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %19) #6
  %20 = sdiv i64 %10, 1000000
  %21 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 1, i64 0
  %22 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %20, i8* %21) #6
  %23 = ptrtoint i8* %22 to i64
  %24 = ptrtoint i8* %21 to i64
  %25 = sub i64 %23, %24
  %26 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  store i8* %21, i8** %26, align 8
  %27 = icmp sgt i64 %25, -1
  br i1 %27, label %29, label %28, !prof !2

28:                                               ; preds = %18
  call void @llvm.trap() #6
  unreachable

29:                                               ; preds = %18
  %30 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  store i64 %25, i64* %30, align 8
  %31 = bitcast %"class.absl::AlphaNum"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %31) #6
  %32 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %32, align 8
  %33 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 1
  store i64 1, i64* %33, align 8
  call void @_ZN4absl6StrCatERKNS_8AlphaNumES2_(%"class.std::__1::basic_string"* sret %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %4) #6
  br label %70

34:                                               ; preds = %2
  %35 = icmp sgt i64 %13, 1000
  %36 = urem i64 %13, 1000
  %37 = icmp eq i64 %36, 0
  %38 = and i1 %35, %37
  br i1 %38, label %39, label %55

39:                                               ; preds = %34
  %40 = bitcast %"class.absl::AlphaNum"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %40) #6
  %41 = sdiv i64 %10, 1000
  %42 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 1, i64 0
  %43 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %41, i8* %42) #6
  %44 = ptrtoint i8* %43 to i64
  %45 = ptrtoint i8* %42 to i64
  %46 = sub i64 %44, %45
  %47 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 0
  store i8* %42, i8** %47, align 8
  %48 = icmp sgt i64 %46, -1
  br i1 %48, label %50, label %49, !prof !2

49:                                               ; preds = %39
  call void @llvm.trap() #6
  unreachable

50:                                               ; preds = %39
  %51 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 1
  store i64 %46, i64* %51, align 8
  %52 = bitcast %"class.absl::AlphaNum"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %52) #6
  %53 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %53, align 8
  %54 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 1
  store i64 2, i64* %54, align 8
  call void @_ZN4absl6StrCatERKNS_8AlphaNumES2_(%"class.std::__1::basic_string"* sret %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %5, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %6) #6
  br label %70

55:                                               ; preds = %34
  %56 = bitcast %"class.absl::AlphaNum"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %56) #6
  %57 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 1, i64 0
  %58 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %10, i8* %57) #6
  %59 = ptrtoint i8* %58 to i64
  %60 = ptrtoint i8* %57 to i64
  %61 = sub i64 %59, %60
  %62 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 0
  store i8* %57, i8** %62, align 8
  %63 = icmp sgt i64 %61, -1
  br i1 %63, label %65, label %64, !prof !2

64:                                               ; preds = %55
  call void @llvm.trap() #6
  unreachable

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 1
  store i64 %61, i64* %66, align 8
  %67 = bitcast %"class.absl::AlphaNum"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %67) #6
  %68 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %68, align 8
  %69 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 1
  store i64 2, i64* %69, align 8
  call void @_ZN4absl6StrCatERKNS_8AlphaNumES2_(%"class.std::__1::basic_string"* sret %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %7, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %8) #6
  br label %70

70:                                               ; preds = %65, %50, %29
  %71 = phi i8* [ %67, %65 ], [ %52, %50 ], [ %31, %29 ]
  %72 = phi i8* [ %56, %65 ], [ %40, %50 ], [ %19, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %71) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %72) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4absl6StrCatERKNS_8AlphaNumES2_(%"class.std::__1::basic_string"* sret, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic12QuicWallTime13ToUNIXSecondsEv(%"class.quic::QuicWallTime"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = udiv i64 %3, 1000000
  ret i64 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic12QuicWallTime18ToUNIXMicrosecondsEv(%"class.quic::QuicWallTime"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic12QuicWallTime7IsAfterES0_(%"class.quic::QuicWallTime"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic12QuicWallTime8IsBeforeES0_(%"class.quic::QuicWallTime"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic12QuicWallTime6IsZeroEv(%"class.quic::QuicWallTime"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic12QuicWallTime18AbsoluteDifferenceES0_(%"class.quic::QuicWallTime"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  %6 = sub i64 %4, %1
  %7 = sub i64 %1, %4
  %8 = select i1 %5, i64 %6, i64 %7
  %9 = icmp ult i64 %8, 9223372036854775807
  %10 = select i1 %9, i64 %8, i64 9223372036854775807
  ret i64 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic12QuicWallTime3AddENS_8QuicTime5DeltaE(%"class.quic::QuicWallTime"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  %6 = icmp ult i64 %5, %4
  %7 = select i1 %6, i64 -1, i64 %5
  ret i64 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic12QuicWallTime8SubtractENS_8QuicTime5DeltaE(%"class.quic::QuicWallTime"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicWallTime", %"class.quic::QuicWallTime"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = tail call i64 @llvm.usub.sat.i64(i64 %4, i64 %1)
  ret i64 %5
}

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64, i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
