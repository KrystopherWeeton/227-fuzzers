; ModuleID = '../../ui/wm/core/coordinate_conversion.cc'
source_filename = "../../ui/wm/core/coordinate_conversion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.35", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::vector.54", i32, i32, i32, [4 x i8], %"class.base::ObserverList.61", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.78", %"class.base::WeakPtr.84" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.ui::EventHandler"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.6" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.26" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.aura::WindowTreeHost" = type opaque
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.61" = type <{ %"class.std::__1::vector.62", %"class.base::LinkedList.75", i64, i32, [4 x i8] }>
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.70" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.64" }
%"struct.std::__1::__atomic_base.64" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.65" }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__atomic_base.67" }
%"struct.std::__1::__atomic_base.67" = type { %"struct.std::__1::__cxx_atomic_impl.68" }
%"struct.std::__1::__cxx_atomic_impl.68" = type { %"struct.std::__1::__cxx_atomic_base_impl.69" }
%"struct.std::__1::__cxx_atomic_base_impl.69" = type { i8 }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList.75" = type { %"class.base::LinkNode.76" }
%"class.base::LinkNode.76" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.84" = type { %"class.base::internal::WeakPtrBase" }
%"class.aura::client::ScreenPositionClient" = type { i32 (...)** }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm20ConvertPointToScreenEPKN4aura6WindowEPN3gfx5PointE(%"class.aura::Window"*, %"class.gfx::Point"*) local_unnamed_addr #0 {
  %3 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %4 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %3) #3
  tail call void @_ZN4aura6client20ScreenPositionClient20ConvertPointToScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"* %4, %"class.aura::Window"* %0, %"class.gfx::Point"* %1) #3
  ret void
}

declare %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"*) local_unnamed_addr #1

declare %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"*) local_unnamed_addr #1

declare void @_ZN4aura6client20ScreenPositionClient20ConvertPointToScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::Point"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm20ConvertPointToScreenEPKN4aura6WindowEPN3gfx6PointFE(%"class.aura::Window"*, %"class.gfx::PointF"*) local_unnamed_addr #0 {
  %3 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %4 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %3) #3
  %5 = bitcast %"class.aura::client::ScreenPositionClient"* %4 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %6 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %6, i64 2
  %8 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %7, align 8
  tail call void %8(%"class.aura::client::ScreenPositionClient"* %4, %"class.aura::Window"* %0, %"class.gfx::PointF"* %1) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm22ConvertPointFromScreenEPKN4aura6WindowEPN3gfx5PointE(%"class.aura::Window"*, %"class.gfx::Point"*) local_unnamed_addr #0 {
  %3 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %4 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %3) #3
  tail call void @_ZN4aura6client20ScreenPositionClient22ConvertPointFromScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"* %4, %"class.aura::Window"* %0, %"class.gfx::Point"* %1) #3
  ret void
}

declare void @_ZN4aura6client20ScreenPositionClient22ConvertPointFromScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::Point"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm22ConvertPointFromScreenEPKN4aura6WindowEPN3gfx6PointFE(%"class.aura::Window"*, %"class.gfx::PointF"*) local_unnamed_addr #0 {
  %3 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %4 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %3) #3
  %5 = bitcast %"class.aura::client::ScreenPositionClient"* %4 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %6 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %6, i64 3
  %8 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %7, align 8
  tail call void %8(%"class.aura::client::ScreenPositionClient"* %4, %"class.aura::Window"* %0, %"class.gfx::PointF"* %1) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm19ConvertRectToScreenEPKN4aura6WindowEPN3gfx4RectE(%"class.aura::Window"*, %"class.gfx::Rect"* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::Point"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = bitcast %"class.gfx::Rect"* %1 to i64*
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %3, align 8
  %8 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %9 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %8) #3
  call void @_ZN4aura6client20ScreenPositionClient20ConvertPointToScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"* %9, %"class.aura::Window"* %0, %"class.gfx::Point"* nonnull %4) #3
  %10 = load i64, i64* %3, align 8
  store i64 %10, i64* %6, align 4
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = trunc i64 %10 to i32
  %14 = icmp sgt i32 %13, 0
  %15 = icmp sgt i32 %12, 0
  %16 = and i1 %14, %15
  %17 = sub nuw nsw i32 2147483647, %13
  %18 = icmp ult i32 %17, %12
  %19 = and i1 %18, %16
  %20 = select i1 %19, i32 %17, i32 %12
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  store i32 %22, i32* %11, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = icmp sgt i32 %26, 0
  %28 = icmp sgt i32 %24, 0
  %29 = and i1 %27, %28
  %30 = sub nuw nsw i32 2147483647, %26
  %31 = icmp ult i32 %30, %24
  %32 = and i1 %31, %29
  %33 = select i1 %32, i32 %30, i32 %24
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  store i32 %35, i32* %23, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm21TranslateRectToScreenEPKN4aura6WindowEPN3gfx5RectFE(%"class.aura::Window"*, %"class.gfx::RectF"* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::PointF"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = bitcast %"class.gfx::RectF"* %1 to i64*
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %3, align 8
  %8 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %9 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %8) #3
  %10 = bitcast %"class.aura::client::ScreenPositionClient"* %9 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %11 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %11, i64 2
  %13 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %12, align 8
  call void %13(%"class.aura::client::ScreenPositionClient"* %9, %"class.aura::Window"* %0, %"class.gfx::PointF"* nonnull %4) #3
  %14 = load i64, i64* %3, align 8
  store i64 %14, i64* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm21ConvertRectFromScreenEPKN4aura6WindowEPN3gfx4RectE(%"class.aura::Window"*, %"class.gfx::Rect"* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::Point"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = bitcast %"class.gfx::Rect"* %1 to i64*
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %3, align 8
  %8 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %9 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %8) #3
  call void @_ZN4aura6client20ScreenPositionClient22ConvertPointFromScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"* %9, %"class.aura::Window"* %0, %"class.gfx::Point"* nonnull %4) #3
  %10 = load i64, i64* %3, align 8
  store i64 %10, i64* %6, align 4
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = trunc i64 %10 to i32
  %14 = icmp sgt i32 %13, 0
  %15 = icmp sgt i32 %12, 0
  %16 = and i1 %14, %15
  %17 = sub nuw nsw i32 2147483647, %13
  %18 = icmp ult i32 %17, %12
  %19 = and i1 %18, %16
  %20 = select i1 %19, i32 %17, i32 %12
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  store i32 %22, i32* %11, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = icmp sgt i32 %26, 0
  %28 = icmp sgt i32 %24, 0
  %29 = and i1 %27, %28
  %30 = sub nuw nsw i32 2147483647, %26
  %31 = icmp ult i32 %30, %24
  %32 = and i1 %31, %29
  %33 = select i1 %32, i32 %30, i32 %24
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  store i32 %35, i32* %23, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm23TranslateRectFromScreenEPKN4aura6WindowEPN3gfx5RectFE(%"class.aura::Window"*, %"class.gfx::RectF"* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::PointF"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = bitcast %"class.gfx::RectF"* %1 to i64*
  %7 = load i64, i64* %6, align 4
  store i64 %7, i64* %3, align 8
  %8 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %0) #3
  %9 = tail call %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"* %8) #3
  %10 = bitcast %"class.aura::client::ScreenPositionClient"* %9 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %11 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %11, i64 3
  %13 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %12, align 8
  call void %13(%"class.aura::client::ScreenPositionClient"* %9, %"class.aura::Window"* %0, %"class.gfx::PointF"* nonnull %4) #3
  %14 = load i64, i64* %3, align 8
  store i64 %14, i64* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
