; ModuleID = '../../v8/src/wasm/wasm-module-builder.cc'
source_filename = "../../v8/src/wasm/wasm-module-builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::wasm::WasmFunctionBuilder" = type <{ %"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::LocalDeclEncoder", i32, i32, %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::Vector", %"class.v8::internal::ZoneVector.76", %"class.v8::internal::ZoneVector.76", %"class.v8::internal::ZoneVector.76", %"class.v8::internal::ZoneVector.76", %"class.v8::internal::ZoneVector.120", %"class.v8::internal::wasm::ZoneBuffer", i32, i32, i32, i8, [3 x i8] }>
%"class.v8::internal::wasm::LocalDeclEncoder" = type { %"class.v8::internal::Signature"*, %"class.v8::internal::ZoneVector.113", i64 }
%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::wasm::ValueType"* }
%"class.v8::internal::wasm::ValueType" = type { i32 }
%"class.v8::internal::ZoneVector.113" = type { %"class.std::__1::vector.114" }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.116" }
%"struct.std::__1::pair" = type { i32, %"class.v8::internal::wasm::ValueType" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117", %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.v8::internal::ZoneAllocator.119" }
%"class.v8::internal::ZoneAllocator.119" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::ZoneVector.76" = type { %"class.std::__1::vector.77" }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { i32*, i32*, %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80", %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.80" = type { i32* }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.v8::internal::ZoneAllocator.82" }
%"class.v8::internal::ZoneAllocator.82" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.120" = type { %"class.std::__1::vector.121" }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"class.std::__1::__compressed_pair.123" }
%"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex" = type { i64, i32 }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124", %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.v8::internal::ZoneAllocator.126" }
%"class.v8::internal::ZoneAllocator.126" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::wasm::ZoneBuffer" = type { %"class.v8::internal::Zone"*, i8*, i8*, i8* }
%"class.v8::internal::wasm::WasmModuleBuilder" = type <{ %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector.21", %"class.v8::internal::ZoneVector.28", %"class.v8::internal::ZoneVector.35", %"class.v8::internal::ZoneVector.42", %"class.v8::internal::ZoneVector.49", %"class.v8::internal::ZoneVector.62", %"class.v8::internal::ZoneVector.76", %"class.v8::internal::ZoneVector.83", %"class.v8::internal::ZoneVector.90", %"class.v8::internal::ZoneUnorderedMap", i32, i32, i32, i32, i8, i8, [6 x i8] }>
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"class.std::__1::__compressed_pair.18" }
%"struct.v8::internal::wasm::WasmModuleBuilder::Type" = type { i32, %union.anon }
%union.anon = type { %"class.v8::internal::Signature"* }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.21" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"class.std::__1::__compressed_pair.24" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport" = type <{ %"class.v8::internal::Vector", %"class.v8::internal::Vector", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.v8::internal::ZoneAllocator.27" }
%"class.v8::internal::ZoneAllocator.27" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"class.std::__1::__compressed_pair.31" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport" = type <{ %"class.v8::internal::Vector", %"class.v8::internal::Vector", i8, i8, [6 x i8] }>
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.v8::internal::ZoneAllocator.34" }
%"class.v8::internal::ZoneAllocator.34" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.35" = type { %"class.std::__1::vector.36" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"class.std::__1::__compressed_pair.38" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport" = type { %"class.v8::internal::Vector", i8, i32 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39", %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.v8::internal::ZoneAllocator.41" }
%"class.v8::internal::ZoneAllocator.41" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.42" = type { %"class.std::__1::vector.43" }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46", %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.v8::internal::wasm::WasmFunctionBuilder"** }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.v8::internal::ZoneAllocator.48" }
%"class.v8::internal::ZoneAllocator.48" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.49" = type { %"class.std::__1::vector.50" }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"class.std::__1::__compressed_pair.58" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable" = type { %"class.v8::internal::wasm::ValueType", i32, i32, i8, %"class.v8::internal::wasm::WasmInitExpr" }
%"class.v8::internal::wasm::WasmInitExpr" = type { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32, %"class.std::__1::unique_ptr.52" }
%"union.v8::internal::wasm::WasmInitExpr::Immediate" = type { i64, [8 x i8] }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.v8::internal::wasm::WasmInitExpr"* }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59", %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.v8::internal::ZoneAllocator.61" }
%"class.v8::internal::ZoneAllocator.61" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.62" = type { %"class.std::__1::vector.63" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"class.std::__1::__compressed_pair.72" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment" = type <{ %"class.v8::internal::ZoneVector.65", i32, [4 x i8] }>
%"class.v8::internal::ZoneVector.65" = type { %"class.std::__1::vector.66" }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { i8*, i8*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69", %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.69" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.v8::internal::ZoneAllocator.71" }
%"class.v8::internal::ZoneAllocator.71" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73", %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.v8::internal::ZoneAllocator.75" }
%"class.v8::internal::ZoneAllocator.75" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.83" = type { %"class.std::__1::vector.84" }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"class.std::__1::__compressed_pair.86" }
%"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal" = type { %"class.v8::internal::wasm::ValueType", i8, %"class.v8::internal::wasm::WasmInitExpr" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87", %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.v8::internal::ZoneAllocator.89" }
%"class.v8::internal::ZoneAllocator.89" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.90" = type { %"class.std::__1::vector.91" }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i32*, i32*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94", %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i32* }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.v8::internal::ZoneAllocator.96" }
%"class.v8::internal::ZoneAllocator.96" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneUnorderedMap" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.97", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.110", [4 x i8] }>
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.v8::internal::ZoneAllocator.103" }
%"class.v8::internal::ZoneAllocator.103" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105", %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.v8::internal::ZoneAllocator.107" }
%"class.v8::internal::ZoneAllocator.107" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { float }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::wasm::StructType" = type { i32, i32*, %"class.v8::internal::wasm::ValueType"*, i8* }
%"class.v8::internal::wasm::ArrayType" = type <{ %"class.v8::internal::wasm::ValueType", i8, [3 x i8] }>
%"struct.std::__1::__hash_node" = type { %"struct.std::__1::__hash_node_base", i64, %"struct.std::__1::__hash_value_type" }
%"struct.std::__1::__hash_value_type" = type { %"struct.std::__1::pair.127" }
%"struct.std::__1::pair.127" = type <{ %"class.v8::internal::Signature", i32, [4 x i8] }>

$_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi = comdat any

$_ZN2v88internal4wasm10ZoneBuffer10write_i64vEl = comdat any

$_ZN2v88internal4wasm12WasmInitExprD2Ev = comdat any

$_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm = comdat any

$_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder15WasmDataSegmentENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE25__emplace_unique_key_argsIS7_JRS7_RjEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__16vectorIjN2v88internal13ZoneAllocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

$_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder10WasmGlobalENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

@_ZN2v88internal4wasm17WasmModuleBuilder10kNullIndexE = hidden constant i32 -1, align 4
@_ZN2v88internal24FLAG_wasm_max_table_sizeE = external local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"compilationHints\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@switch.table._ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE = private unnamed_addr constant [6 x i32] [i32 -16, i32 -17, i32 -19, i32 -22, i32 -25, i32 -18], align 4

@_ZN2v88internal4wasm19WasmFunctionBuilderC1EPNS1_17WasmModuleBuilderE = hidden unnamed_addr alias void (%"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmModuleBuilder"*), void (%"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmModuleBuilder"*)* @_ZN2v88internal4wasm19WasmFunctionBuilderC2EPNS1_17WasmModuleBuilderE
@_ZN2v88internal4wasm17WasmModuleBuilderC1EPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal4wasm17WasmModuleBuilderC2EPNS0_4ZoneE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilderC2EPNS1_17WasmModuleBuilderE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, %"class.v8::internal::wasm::WasmModuleBuilder"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 0
  store %"class.v8::internal::wasm::WasmModuleBuilder"* %1, %"class.v8::internal::wasm::WasmModuleBuilder"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %1, i64 0, i32 0
  %5 = bitcast %"class.v8::internal::wasm::WasmModuleBuilder"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 1
  %9 = bitcast %"struct.std::__1::__compressed_pair_elem.118"* %8 to i64*
  %10 = bitcast %"class.v8::internal::Signature"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false)
  store i64 %6, i64* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1, i32 2
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 2
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %1, i64 0, i32 5, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %1, i64 0, i32 5, i32 0, i32 0, i32 1
  %16 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.43"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 3
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %13, align 4
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %24 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  store %"class.v8::internal::Zone"* %23, %"class.v8::internal::Zone"** %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ult i64 %30, 256
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %2
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %23, i64 256) #9
  br label %36

34:                                               ; preds = %2
  %35 = add i64 %27, 256
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %32, %34
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to i8*
  store i8* %38, i8** %25, align 8
  %39 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  store i8* %38, i8** %39, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 256
  %41 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 5
  %43 = bitcast %"class.v8::internal::Vector"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 16, i1 false) #9
  %44 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 6
  %45 = load i64, i64* %5, align 8
  %46 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1
  %47 = bitcast %"struct.std::__1::__compressed_pair_elem.81"* %46 to i64*
  %48 = bitcast %"class.v8::internal::ZoneVector.76"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #9
  store i64 %45, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 7
  %50 = load i64, i64* %5, align 8
  %51 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 2, i32 1
  %52 = bitcast %"struct.std::__1::__compressed_pair_elem.81"* %51 to i64*
  %53 = bitcast %"class.v8::internal::ZoneVector.76"* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  store i64 %50, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 8
  %55 = load i64, i64* %5, align 8
  %56 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 8, i32 0, i32 0, i32 2, i32 1
  %57 = bitcast %"struct.std::__1::__compressed_pair_elem.81"* %56 to i64*
  %58 = bitcast %"class.v8::internal::ZoneVector.76"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 24, i1 false) #9
  store i64 %55, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 9
  %60 = load i64, i64* %5, align 8
  %61 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 2, i32 1
  %62 = bitcast %"struct.std::__1::__compressed_pair_elem.81"* %61 to i64*
  %63 = bitcast %"class.v8::internal::ZoneVector.76"* %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #9
  store i64 %60, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10
  %65 = load i64, i64* %5, align 8
  %66 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 1
  %67 = bitcast %"struct.std::__1::__compressed_pair_elem.125"* %66 to i64*
  %68 = bitcast %"class.v8::internal::ZoneVector.120"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #9
  store i64 %65, i64* %67, align 8
  %69 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %70 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 0
  store %"class.v8::internal::Zone"* %69, %"class.v8::internal::Zone"** %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 1
  %72 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %69, i64 0, i32 2
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %69, i64 0, i32 3
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %75, %73
  %77 = icmp ult i64 %76, 8
  br i1 %77, label %78, label %80, !prof !2

78:                                               ; preds = %36
  %79 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %69, i64 8) #9
  br label %82

80:                                               ; preds = %36
  %81 = add i64 %73, 8
  store i64 %81, i64* %72, align 8
  br label %82

82:                                               ; preds = %78, %80
  %83 = phi i64 [ %79, %78 ], [ %73, %80 ]
  %84 = inttoptr i64 %83 to i8*
  store i8* %84, i8** %71, align 8
  %85 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 2
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds i8, i8* %84, i64 8
  %87 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 3
  store i8* %86, i8** %87, align 8
  %88 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 12
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 13
  store i32 0, i32* %89, align 4
  %90 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 14
  store i32 0, i32* %90, align 8
  %91 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 15
  store i8 -1, i8* %91, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder8EmitByteEh(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 1
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %44

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %13, %12
  %15 = shl nsw i64 %14, 1
  %16 = or i64 %15, 1
  %17 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = add i64 %16, 7
  %20 = and i64 %19, -8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %22
  %26 = icmp ugt i64 %20, %25
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %9
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %20) #9
  br label %31

29:                                               ; preds = %9
  %30 = add i64 %20, %22
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ %28, %27 ], [ %22, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8*, i8** %10, align 8
  %35 = bitcast i8** %3 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint i8* %34 to i64
  %38 = sub i64 %36, %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %38, i1 false) #9
  %39 = load i64, i64* %35, align 8
  %40 = load i64, i64* %11, align 8
  %41 = sub i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8* %42, i8** %3, align 8
  store i8* %33, i8** %10, align 8
  %43 = getelementptr inbounds i8, i8* %33, i64 %16
  store i8* %43, i8** %6, align 8
  br label %44

44:                                               ; preds = %2, %31
  %45 = phi i8* [ %4, %2 ], [ %42, %31 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %3, align 8
  store i8 %1, i8* %45, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder8EmitI32VEi(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %3, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 5
  %6 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %44

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %13, %12
  %15 = shl nsw i64 %14, 1
  %16 = add i64 %15, 5
  %17 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = add i64 %15, 12
  %20 = and i64 %19, -8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %22
  %26 = icmp ugt i64 %20, %25
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %9
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %20) #9
  br label %31

29:                                               ; preds = %9
  %30 = add i64 %20, %22
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ %28, %27 ], [ %22, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8*, i8** %10, align 8
  %35 = bitcast i8** %3 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint i8* %34 to i64
  %38 = sub i64 %36, %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %38, i1 false) #9
  %39 = load i64, i64* %35, align 8
  %40 = load i64, i64* %11, align 8
  %41 = sub i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8* %42, i8** %3, align 8
  store i8* %33, i8** %10, align 8
  %43 = getelementptr inbounds i8, i8* %33, i64 %16
  store i8* %43, i8** %6, align 8
  br label %44

44:                                               ; preds = %2, %31
  %45 = phi i8* [ %4, %2 ], [ %42, %31 ]
  %46 = icmp sgt i32 %1, -1
  br i1 %46, label %55, label %47

47:                                               ; preds = %44
  %48 = icmp ult i32 %1, -64
  %49 = trunc i32 %1 to i8
  br i1 %48, label %50, label %91

50:                                               ; preds = %47
  %51 = or i8 %49, -128
  %52 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %52, i8** %3, align 8
  store i8 %51, i8* %45, align 1
  %53 = ashr i32 %1, 7
  %54 = icmp ult i32 %53, -64
  br i1 %54, label %79, label %87

55:                                               ; preds = %44
  %56 = icmp sgt i32 %1, 63
  %57 = trunc i32 %1 to i8
  br i1 %56, label %58, label %75

58:                                               ; preds = %55
  %59 = or i8 %57, -128
  %60 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %60, i8** %3, align 8
  store i8 %59, i8* %45, align 1
  %61 = lshr i32 %1, 7
  %62 = icmp ugt i32 %1, 8191
  br i1 %62, label %63, label %71

63:                                               ; preds = %58, %63
  %64 = phi i32 [ %69, %63 ], [ %61, %58 ]
  %65 = trunc i32 %64 to i8
  %66 = load i8*, i8** %3, align 8
  %67 = or i8 %65, -128
  %68 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %68, i8** %3, align 8
  store i8 %67, i8* %66, align 1
  %69 = lshr i32 %64, 7
  %70 = icmp ugt i32 %64, 8191
  br i1 %70, label %63, label %71

71:                                               ; preds = %63, %58
  %72 = phi i32 [ %61, %58 ], [ %69, %63 ]
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** %3, align 8
  br label %75

75:                                               ; preds = %71, %55
  %76 = phi i8* [ %45, %55 ], [ %74, %71 ]
  %77 = phi i8 [ %57, %55 ], [ %73, %71 ]
  %78 = getelementptr inbounds i8, i8* %76, i64 1
  store i8* %78, i8** %3, align 8
  store i8 %77, i8* %76, align 1
  br label %96

79:                                               ; preds = %50, %79
  %80 = phi i32 [ %85, %79 ], [ %53, %50 ]
  %81 = trunc i32 %80 to i8
  %82 = load i8*, i8** %3, align 8
  %83 = or i8 %81, -128
  %84 = getelementptr inbounds i8, i8* %82, i64 1
  store i8* %84, i8** %3, align 8
  store i8 %83, i8* %82, align 1
  %85 = ashr i32 %80, 7
  %86 = icmp ult i32 %85, -64
  br i1 %86, label %79, label %87

87:                                               ; preds = %79, %50
  %88 = phi i32 [ %53, %50 ], [ %85, %79 ]
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %3, align 8
  br label %91

91:                                               ; preds = %87, %47
  %92 = phi i8* [ %45, %47 ], [ %90, %87 ]
  %93 = phi i8 [ %49, %47 ], [ %89, %87 ]
  %94 = and i8 %93, 127
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  store i8* %95, i8** %3, align 8
  store i8 %94, i8* %92, align 1
  br label %96

96:                                               ; preds = %75, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder8EmitU32VEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 5
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %44

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %13, %12
  %15 = shl nsw i64 %14, 1
  %16 = add i64 %15, 5
  %17 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = add i64 %15, 12
  %20 = and i64 %19, -8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %22
  %26 = icmp ugt i64 %20, %25
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %9
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %20) #9
  br label %31

29:                                               ; preds = %9
  %30 = add i64 %20, %22
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ %28, %27 ], [ %22, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8*, i8** %10, align 8
  %35 = bitcast i8** %3 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint i8* %34 to i64
  %38 = sub i64 %36, %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %38, i1 false) #9
  %39 = load i64, i64* %35, align 8
  %40 = load i64, i64* %11, align 8
  %41 = sub i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8* %42, i8** %3, align 8
  store i8* %33, i8** %10, align 8
  %43 = getelementptr inbounds i8, i8* %33, i64 %16
  store i8* %43, i8** %6, align 8
  br label %44

44:                                               ; preds = %31, %2
  %45 = phi i8* [ %4, %2 ], [ %42, %31 ]
  %46 = icmp ugt i32 %1, 127
  %47 = trunc i32 %1 to i8
  br i1 %46, label %48, label %60

48:                                               ; preds = %44, %48
  %49 = phi i8* [ %57, %48 ], [ %45, %44 ]
  %50 = phi i8 [ %56, %48 ], [ %47, %44 ]
  %51 = phi i32 [ %54, %48 ], [ %1, %44 ]
  %52 = or i8 %50, -128
  %53 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %53, i8** %3, align 8
  store i8 %52, i8* %49, align 1
  %54 = lshr i32 %51, 7
  %55 = icmp ugt i32 %51, 16383
  %56 = trunc i32 %54 to i8
  %57 = load i8*, i8** %3, align 8
  br i1 %55, label %48, label %58

58:                                               ; preds = %48
  %59 = trunc i32 %54 to i8
  br label %60

60:                                               ; preds = %58, %44
  %61 = phi i8* [ %45, %44 ], [ %57, %58 ]
  %62 = phi i8 [ %47, %44 ], [ %59, %58 ]
  %63 = and i8 %62, 127
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %64, i8** %3, align 8
  store i8 %63, i8* %61, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12SetSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, %"class.v8::internal::Signature"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1, i32 0
  store %"class.v8::internal::Signature"* %1, %"class.v8::internal::Signature"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::WasmModuleBuilder"** %4, align 8
  %6 = tail call i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"* %5, %"class.v8::internal::Signature"* %1)
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 2
  store i32 %6, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Signature"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0
  %5 = tail call %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_(%"class.std::__1::__hash_table"* %4, %"class.v8::internal::Signature"* dereferenceable(24) %1) #9
  %6 = icmp eq %"struct.std::__1::__hash_node_base"* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %5, i64 5
  %9 = bitcast %"struct.std::__1::__hash_node_base"* %8 to i32*
  %10 = load i32, i32* %9, align 8
  br label %133

11:                                               ; preds = %2
  %12 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #9
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %15 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %13 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = lshr exact i64 %19, 4
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %3, align 4
  %22 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE25__emplace_unique_key_argsIS7_JRS7_RjEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %4, %"class.v8::internal::Signature"* dereferenceable(24) %1, %"class.v8::internal::Signature"* dereferenceable(24) %1, i32* nonnull dereferenceable(4) %3) #9
  %23 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %14, align 8
  %24 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %24, align 8
  %26 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %23, %25
  %27 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %25 to i64
  br i1 %26, label %28, label %33

28:                                               ; preds = %11
  %29 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %23, i64 0, i32 0
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %23, i64 0, i32 1, i32 0
  store %"class.v8::internal::Signature"* %1, %"class.v8::internal::Signature"** %30, align 8
  %31 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %23, i64 1
  %32 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %31 to i64
  store i64 %32, i64* %15, align 8
  br label %131

33:                                               ; preds = %11
  %34 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %23 to i64
  %35 = load i64, i64* %17, align 8
  %36 = sub i64 %34, %35
  %37 = ashr exact i64 %36, 4
  %38 = add nsw i64 %37, 1
  %39 = icmp ugt i64 %38, 134217727
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %41) #10
  unreachable

42:                                               ; preds = %33
  %43 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %24 to i64*
  %44 = sub i64 %27, %35
  %45 = ashr exact i64 %44, 4
  %46 = icmp ult i64 %45, 67108863
  br i1 %46, label %47, label %52

47:                                               ; preds = %42
  %48 = ashr exact i64 %44, 3
  %49 = icmp ult i64 %48, %38
  %50 = select i1 %49, i64 %38, i64 %48
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %70, label %52

52:                                               ; preds = %47, %42
  %53 = phi i64 [ %50, %47 ], [ 134217727, %42 ]
  %54 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %55 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %54, align 8
  %56 = shl i64 %53, 4
  %57 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %55, i64 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %55, i64 0, i32 3
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %60, %58
  %62 = icmp ugt i64 %56, %61
  br i1 %62, label %63, label %65, !prof !2

63:                                               ; preds = %52
  %64 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %55, i64 %56) #9
  br label %67

65:                                               ; preds = %52
  %66 = add i64 %58, %56
  store i64 %66, i64* %57, align 8
  br label %67

67:                                               ; preds = %65, %63
  %68 = phi i64 [ %64, %63 ], [ %58, %65 ]
  %69 = inttoptr i64 %68 to %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*
  br label %70

70:                                               ; preds = %67, %47
  %71 = phi i64 [ %53, %67 ], [ 0, %47 ]
  %72 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %69, %67 ], [ null, %47 ]
  %73 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %72, i64 %37
  %74 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %72, i64 %71
  %75 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %74 to i64
  %76 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %73, i64 0, i32 0
  store i32 0, i32* %76, align 8
  %77 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %72, i64 %37, i32 1, i32 0
  store %"class.v8::internal::Signature"* %1, %"class.v8::internal::Signature"** %77, align 8
  %78 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %73, i64 1
  %79 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %78 to i64
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 0
  %81 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %80, align 8
  %82 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %14, align 8
  %83 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %82, %81
  br i1 %83, label %128, label %84

84:                                               ; preds = %70
  %85 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %81 to i64
  %86 = getelementptr %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %82, i64 -1, i32 0
  %87 = ptrtoint i32* %86 to i64
  %88 = sub i64 %87, %85
  %89 = lshr i64 %88, 4
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %84, %93
  %94 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %97, %93 ], [ %73, %84 ]
  %95 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %98, %93 ], [ %82, %84 ]
  %96 = phi i64 [ %101, %93 ], [ %91, %84 ]
  %97 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %94, i64 -1
  %98 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %95, i64 -1
  %99 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97 to i8*
  %100 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #9
  %101 = add i64 %96, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %93, !llvm.loop !3

103:                                              ; preds = %93, %84
  %104 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ undef, %84 ], [ %97, %93 ]
  %105 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %73, %84 ], [ %97, %93 ]
  %106 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %82, %84 ], [ %98, %93 ]
  %107 = icmp ult i64 %88, 48
  br i1 %107, label %128, label %108

108:                                              ; preds = %103, %108
  %109 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %123, %108 ], [ %105, %103 ]
  %110 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %124, %108 ], [ %106, %103 ]
  %111 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %109, i64 -1
  %112 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %110, i64 -1
  %113 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %111 to i8*
  %114 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #9
  %115 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %109, i64 -2
  %116 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %110, i64 -2
  %117 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %115 to i8*
  %118 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false) #9
  %119 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %109, i64 -3
  %120 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %110, i64 -3
  %121 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %119 to i8*
  %122 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %120 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #9
  %123 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %109, i64 -4
  %124 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %110, i64 -4
  %125 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %123 to i8*
  %126 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #9
  %127 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %124, %81
  br i1 %127, label %128, label %108

128:                                              ; preds = %103, %108, %70
  %129 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %73, %70 ], [ %104, %103 ], [ %123, %108 ]
  %130 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %129 to i64
  store i64 %130, i64* %17, align 8
  store i64 %79, i64* %15, align 8
  store i64 %75, i64* %43, align 8
  br label %131

131:                                              ; preds = %28, %128
  %132 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #9
  br label %133

133:                                              ; preds = %131, %7
  %134 = phi i32 [ %10, %7 ], [ %132, %131 ]
  ret i32 %134
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm19WasmFunctionBuilder8AddLocalENS1_9ValueTypeE(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1
  %4 = tail call i32 @_ZN2v88internal4wasm16LocalDeclEncoder9AddLocalsEjNS1_9ValueTypeE(%"class.v8::internal::wasm::LocalDeclEncoder"* %3, i32 1, i32 %1) #9
  ret i32 %4
}

declare i32 @_ZN2v88internal4wasm16LocalDeclEncoder9AddLocalsEjNS1_9ValueTypeE(%"class.v8::internal::wasm::LocalDeclEncoder"*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitGetLocalEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithU32VENS1_10WasmOpcodeEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i32 32, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithU32VENS1_10WasmOpcodeEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ugt i8* %8, %10
  br i1 %11, label %12, label %47

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint i8* %10 to i64
  %17 = sub i64 %16, %15
  %18 = shl nsw i64 %17, 1
  %19 = or i64 %18, 1
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %4, i64 0, i32 0
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %22 = add i64 %19, 7
  %23 = and i64 %22, -8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %12
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %21, i64 %23) #9
  br label %34

32:                                               ; preds = %12
  %33 = add i64 %23, %25
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %13, align 8
  %38 = bitcast i8** %6 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = ptrtoint i8* %37 to i64
  %41 = sub i64 %39, %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 %41, i1 false) #9
  %42 = load i64, i64* %38, align 8
  %43 = load i64, i64* %14, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds i8, i8* %36, i64 %44
  store i8* %45, i8** %6, align 8
  store i8* %36, i8** %13, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 %19
  store i8* %46, i8** %9, align 8
  br label %47

47:                                               ; preds = %3, %34
  %48 = phi i8* [ %7, %3 ], [ %45, %34 ]
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %5, i8* %48, align 1
  %50 = load i8*, i8** %6, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 5
  %52 = load i8*, i8** %9, align 8
  %53 = icmp ugt i8* %51, %52
  br i1 %53, label %54, label %89

54:                                               ; preds = %47
  %55 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = ptrtoint i8* %52 to i64
  %59 = sub i64 %58, %57
  %60 = shl nsw i64 %59, 1
  %61 = add i64 %60, 5
  %62 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %4, i64 0, i32 0
  %63 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %62, align 8
  %64 = add i64 %60, 12
  %65 = and i64 %64, -8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %63, i64 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %63, i64 0, i32 3
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %69, %67
  %71 = icmp ugt i64 %65, %70
  br i1 %71, label %72, label %74, !prof !2

72:                                               ; preds = %54
  %73 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %63, i64 %65) #9
  br label %76

74:                                               ; preds = %54
  %75 = add i64 %65, %67
  store i64 %75, i64* %66, align 8
  br label %76

76:                                               ; preds = %74, %72
  %77 = phi i64 [ %73, %72 ], [ %67, %74 ]
  %78 = inttoptr i64 %77 to i8*
  %79 = load i8*, i8** %55, align 8
  %80 = bitcast i8** %6 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = ptrtoint i8* %79 to i64
  %83 = sub i64 %81, %82
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %79, i64 %83, i1 false) #9
  %84 = load i64, i64* %80, align 8
  %85 = load i64, i64* %56, align 8
  %86 = sub i64 %84, %85
  %87 = getelementptr inbounds i8, i8* %78, i64 %86
  store i8* %87, i8** %6, align 8
  store i8* %78, i8** %55, align 8
  %88 = getelementptr inbounds i8, i8* %78, i64 %61
  store i8* %88, i8** %9, align 8
  br label %89

89:                                               ; preds = %76, %47
  %90 = phi i8* [ %50, %47 ], [ %87, %76 ]
  %91 = icmp ugt i32 %2, 127
  %92 = trunc i32 %2 to i8
  br i1 %91, label %93, label %105

93:                                               ; preds = %89, %93
  %94 = phi i8* [ %102, %93 ], [ %90, %89 ]
  %95 = phi i8 [ %101, %93 ], [ %92, %89 ]
  %96 = phi i32 [ %99, %93 ], [ %2, %89 ]
  %97 = or i8 %95, -128
  %98 = getelementptr inbounds i8, i8* %94, i64 1
  store i8* %98, i8** %6, align 8
  store i8 %97, i8* %94, align 1
  %99 = lshr i32 %96, 7
  %100 = icmp ugt i32 %96, 16383
  %101 = trunc i32 %99 to i8
  %102 = load i8*, i8** %6, align 8
  br i1 %100, label %93, label %103

103:                                              ; preds = %93
  %104 = trunc i32 %99 to i8
  br label %105

105:                                              ; preds = %103, %89
  %106 = phi i8* [ %90, %89 ], [ %102, %103 ]
  %107 = phi i8 [ %92, %89 ], [ %104, %103 ]
  %108 = and i8 %107, 127
  %109 = getelementptr inbounds i8, i8* %106, i64 1
  store i8* %109, i8** %6, align 8
  store i8 %108, i8* %106, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitSetLocalEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithU32VENS1_10WasmOpcodeEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i32 33, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitTeeLocalEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithU32VENS1_10WasmOpcodeEj(%"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i32 34, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder8EmitCodeEPKhj(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = zext i32 %2 to i64
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %52, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 %4
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %48

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i8* %11 to i64
  %18 = sub i64 %17, %16
  %19 = shl nsw i64 %18, 1
  %20 = add i64 %19, %4
  %21 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  %23 = add i64 %20, 7
  %24 = and i64 %23, -8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %13
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 %24) #9
  br label %35

33:                                               ; preds = %13
  %34 = add i64 %24, %26
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8*, i8** %14, align 8
  %39 = bitcast i8** %7 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = ptrtoint i8* %38 to i64
  %42 = sub i64 %40, %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %42, i1 false) #9
  %43 = load i64, i64* %39, align 8
  %44 = load i64, i64* %15, align 8
  %45 = sub i64 %43, %44
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8* %46, i8** %7, align 8
  store i8* %37, i8** %14, align 8
  %47 = getelementptr inbounds i8, i8* %37, i64 %20
  store i8* %47, i8** %10, align 8
  br label %48

48:                                               ; preds = %35, %6
  %49 = phi i8* [ %8, %6 ], [ %46, %35 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %1, i64 %4, i1 false) #9
  %50 = load i8*, i8** %7, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %4
  store i8* %51, i8** %7, align 8
  br label %52

52:                                               ; preds = %3, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder4EmitENS1_10WasmOpcodeE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %14, %13
  %16 = shl nsw i64 %15, 1
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = add i64 %17, 7
  %21 = and i64 %20, -8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ugt i64 %21, %26
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %10
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %21) #9
  br label %32

30:                                               ; preds = %10
  %31 = add i64 %21, %23
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8** %4 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = sub i64 %37, %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %39, i1 false) #9
  %40 = load i64, i64* %36, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  store i8* %43, i8** %4, align 8
  store i8* %34, i8** %11, align 8
  %44 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8* %44, i8** %7, align 8
  br label %45

45:                                               ; preds = %2, %32
  %46 = phi i8* [ %5, %2 ], [ %43, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %4, align 8
  store i8 %3, i8* %46, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder14EmitWithPrefixENS1_10WasmOpcodeE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %4 = ashr i32 %1, 8
  %5 = trunc i32 %4 to i8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ugt i8* %8, %10
  br i1 %11, label %12, label %47

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint i8* %10 to i64
  %17 = sub i64 %16, %15
  %18 = shl nsw i64 %17, 1
  %19 = or i64 %18, 1
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %22 = add i64 %19, 7
  %23 = and i64 %22, -8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %12
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %21, i64 %23) #9
  br label %34

32:                                               ; preds = %12
  %33 = add i64 %23, %25
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %13, align 8
  %38 = bitcast i8** %6 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = ptrtoint i8* %37 to i64
  %41 = sub i64 %39, %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 %41, i1 false) #9
  %42 = load i64, i64* %38, align 8
  %43 = load i64, i64* %14, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds i8, i8* %36, i64 %44
  store i8* %45, i8** %6, align 8
  store i8* %36, i8** %13, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 %19
  store i8* %46, i8** %9, align 8
  br label %47

47:                                               ; preds = %2, %34
  %48 = phi i8* [ %7, %2 ], [ %45, %34 ]
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %5, i8* %48, align 1
  %50 = icmp eq i32 %4, 253
  br i1 %50, label %51, label %113

51:                                               ; preds = %47
  %52 = and i32 %1, 255
  %53 = load i8*, i8** %6, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 5
  %55 = load i8*, i8** %9, align 8
  %56 = icmp ugt i8* %54, %55
  br i1 %56, label %57, label %92

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = ptrtoint i8* %55 to i64
  %62 = sub i64 %61, %60
  %63 = shl nsw i64 %62, 1
  %64 = add i64 %63, 5
  %65 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %66 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %65, align 8
  %67 = add i64 %63, 12
  %68 = and i64 %67, -8
  %69 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %66, i64 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %66, i64 0, i32 3
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %72, %70
  %74 = icmp ugt i64 %68, %73
  br i1 %74, label %75, label %77, !prof !2

75:                                               ; preds = %57
  %76 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %66, i64 %68) #9
  br label %79

77:                                               ; preds = %57
  %78 = add i64 %68, %70
  store i64 %78, i64* %69, align 8
  br label %79

79:                                               ; preds = %77, %75
  %80 = phi i64 [ %76, %75 ], [ %70, %77 ]
  %81 = inttoptr i64 %80 to i8*
  %82 = load i8*, i8** %58, align 8
  %83 = bitcast i8** %6 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = ptrtoint i8* %82 to i64
  %86 = sub i64 %84, %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %82, i64 %86, i1 false) #9
  %87 = load i64, i64* %83, align 8
  %88 = load i64, i64* %59, align 8
  %89 = sub i64 %87, %88
  %90 = getelementptr inbounds i8, i8* %81, i64 %89
  store i8* %90, i8** %6, align 8
  store i8* %81, i8** %58, align 8
  %91 = getelementptr inbounds i8, i8* %81, i64 %64
  store i8* %91, i8** %9, align 8
  br label %92

92:                                               ; preds = %79, %51
  %93 = phi i8* [ %53, %51 ], [ %90, %79 ]
  %94 = icmp ugt i32 %52, 127
  %95 = trunc i32 %1 to i8
  br i1 %94, label %96, label %108

96:                                               ; preds = %92, %96
  %97 = phi i8* [ %105, %96 ], [ %93, %92 ]
  %98 = phi i8 [ %104, %96 ], [ %95, %92 ]
  %99 = phi i32 [ %102, %96 ], [ %52, %92 ]
  %100 = or i8 %98, -128
  %101 = getelementptr inbounds i8, i8* %97, i64 1
  store i8* %101, i8** %6, align 8
  store i8 %100, i8* %97, align 1
  %102 = lshr i32 %99, 7
  %103 = icmp ugt i32 %99, 16383
  %104 = trunc i32 %102 to i8
  %105 = load i8*, i8** %6, align 8
  br i1 %103, label %96, label %106

106:                                              ; preds = %96
  %107 = trunc i32 %102 to i8
  br label %108

108:                                              ; preds = %106, %92
  %109 = phi i8* [ %93, %92 ], [ %105, %106 ]
  %110 = phi i8 [ %95, %92 ], [ %107, %106 ]
  %111 = and i8 %110, 127
  %112 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %112, i8** %6, align 8
  store i8 %111, i8* %109, align 1
  br label %157

113:                                              ; preds = %47
  %114 = trunc i32 %1 to i8
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  %117 = load i8*, i8** %9, align 8
  %118 = icmp ugt i8* %116, %117
  br i1 %118, label %119, label %154

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %121 = bitcast i8** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = ptrtoint i8* %117 to i64
  %124 = sub i64 %123, %122
  %125 = shl nsw i64 %124, 1
  %126 = or i64 %125, 1
  %127 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %128 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %127, align 8
  %129 = add i64 %126, 7
  %130 = and i64 %129, -8
  %131 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %128, i64 0, i32 2
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %128, i64 0, i32 3
  %134 = load i64, i64* %133, align 8
  %135 = sub i64 %134, %132
  %136 = icmp ugt i64 %130, %135
  br i1 %136, label %137, label %139, !prof !2

137:                                              ; preds = %119
  %138 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %128, i64 %130) #9
  br label %141

139:                                              ; preds = %119
  %140 = add i64 %130, %132
  store i64 %140, i64* %131, align 8
  br label %141

141:                                              ; preds = %139, %137
  %142 = phi i64 [ %138, %137 ], [ %132, %139 ]
  %143 = inttoptr i64 %142 to i8*
  %144 = load i8*, i8** %120, align 8
  %145 = bitcast i8** %6 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = ptrtoint i8* %144 to i64
  %148 = sub i64 %146, %147
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %143, i8* align 1 %144, i64 %148, i1 false) #9
  %149 = load i64, i64* %145, align 8
  %150 = load i64, i64* %121, align 8
  %151 = sub i64 %149, %150
  %152 = getelementptr inbounds i8, i8* %143, i64 %151
  store i8* %152, i8** %6, align 8
  store i8* %143, i8** %120, align 8
  %153 = getelementptr inbounds i8, i8* %143, i64 %126
  store i8* %153, i8** %9, align 8
  br label %154

154:                                              ; preds = %113, %141
  %155 = phi i8* [ %115, %113 ], [ %152, %141 ]
  %156 = getelementptr inbounds i8, i8* %155, i64 1
  store i8* %156, i8** %6, align 8
  store i8 %114, i8* %155, align 1
  br label %157

157:                                              ; preds = %154, %108
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder10EmitWithU8ENS1_10WasmOpcodeEh(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ugt i8* %8, %10
  br i1 %11, label %12, label %47

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint i8* %10 to i64
  %17 = sub i64 %16, %15
  %18 = shl nsw i64 %17, 1
  %19 = or i64 %18, 1
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %4, i64 0, i32 0
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %22 = add i64 %19, 7
  %23 = and i64 %22, -8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %12
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %21, i64 %23) #9
  br label %34

32:                                               ; preds = %12
  %33 = add i64 %23, %25
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %13, align 8
  %38 = bitcast i8** %6 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = ptrtoint i8* %37 to i64
  %41 = sub i64 %39, %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 %41, i1 false) #9
  %42 = load i64, i64* %38, align 8
  %43 = load i64, i64* %14, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds i8, i8* %36, i64 %44
  store i8* %45, i8** %6, align 8
  store i8* %36, i8** %13, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 %19
  store i8* %46, i8** %9, align 8
  br label %47

47:                                               ; preds = %3, %34
  %48 = phi i8* [ %7, %3 ], [ %45, %34 ]
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %5, i8* %48, align 1
  %50 = load i8*, i8** %6, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  %52 = load i8*, i8** %9, align 8
  %53 = icmp ugt i8* %51, %52
  br i1 %53, label %54, label %89

54:                                               ; preds = %47
  %55 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = ptrtoint i8* %52 to i64
  %59 = sub i64 %58, %57
  %60 = shl nsw i64 %59, 1
  %61 = or i64 %60, 1
  %62 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %4, i64 0, i32 0
  %63 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %62, align 8
  %64 = add i64 %61, 7
  %65 = and i64 %64, -8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %63, i64 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %63, i64 0, i32 3
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %69, %67
  %71 = icmp ugt i64 %65, %70
  br i1 %71, label %72, label %74, !prof !2

72:                                               ; preds = %54
  %73 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %63, i64 %65) #9
  br label %76

74:                                               ; preds = %54
  %75 = add i64 %65, %67
  store i64 %75, i64* %66, align 8
  br label %76

76:                                               ; preds = %74, %72
  %77 = phi i64 [ %73, %72 ], [ %67, %74 ]
  %78 = inttoptr i64 %77 to i8*
  %79 = load i8*, i8** %55, align 8
  %80 = bitcast i8** %6 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = ptrtoint i8* %79 to i64
  %83 = sub i64 %81, %82
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %79, i64 %83, i1 false) #9
  %84 = load i64, i64* %80, align 8
  %85 = load i64, i64* %56, align 8
  %86 = sub i64 %84, %85
  %87 = getelementptr inbounds i8, i8* %78, i64 %86
  store i8* %87, i8** %6, align 8
  store i8* %78, i8** %55, align 8
  %88 = getelementptr inbounds i8, i8* %78, i64 %61
  store i8* %88, i8** %9, align 8
  br label %89

89:                                               ; preds = %47, %76
  %90 = phi i8* [ %50, %47 ], [ %87, %76 ]
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  store i8* %91, i8** %6, align 8
  store i8 %2, i8* %90, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithU8U8ENS1_10WasmOpcodeEhh(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %6 = trunc i32 %1 to i8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %48

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i8* %11 to i64
  %18 = sub i64 %17, %16
  %19 = shl nsw i64 %18, 1
  %20 = or i64 %19, 1
  %21 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %5, i64 0, i32 0
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  %23 = add i64 %20, 7
  %24 = and i64 %23, -8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %13
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 %24) #9
  br label %35

33:                                               ; preds = %13
  %34 = add i64 %24, %26
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8*, i8** %14, align 8
  %39 = bitcast i8** %7 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = ptrtoint i8* %38 to i64
  %42 = sub i64 %40, %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %42, i1 false) #9
  %43 = load i64, i64* %39, align 8
  %44 = load i64, i64* %15, align 8
  %45 = sub i64 %43, %44
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8* %46, i8** %7, align 8
  store i8* %37, i8** %14, align 8
  %47 = getelementptr inbounds i8, i8* %37, i64 %20
  store i8* %47, i8** %10, align 8
  br label %48

48:                                               ; preds = %4, %35
  %49 = phi i8* [ %8, %4 ], [ %46, %35 ]
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %50, i8** %7, align 8
  store i8 %6, i8* %49, align 1
  %51 = load i8*, i8** %7, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  %53 = load i8*, i8** %10, align 8
  %54 = icmp ugt i8* %52, %53
  br i1 %54, label %55, label %90

55:                                               ; preds = %48
  %56 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = ptrtoint i8* %53 to i64
  %60 = sub i64 %59, %58
  %61 = shl nsw i64 %60, 1
  %62 = or i64 %61, 1
  %63 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %5, i64 0, i32 0
  %64 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %63, align 8
  %65 = add i64 %62, 7
  %66 = and i64 %65, -8
  %67 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %64, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %64, i64 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %70, %68
  %72 = icmp ugt i64 %66, %71
  br i1 %72, label %73, label %75, !prof !2

73:                                               ; preds = %55
  %74 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %64, i64 %66) #9
  br label %77

75:                                               ; preds = %55
  %76 = add i64 %66, %68
  store i64 %76, i64* %67, align 8
  br label %77

77:                                               ; preds = %75, %73
  %78 = phi i64 [ %74, %73 ], [ %68, %75 ]
  %79 = inttoptr i64 %78 to i8*
  %80 = load i8*, i8** %56, align 8
  %81 = bitcast i8** %7 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = ptrtoint i8* %80 to i64
  %84 = sub i64 %82, %83
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %80, i64 %84, i1 false) #9
  %85 = load i64, i64* %81, align 8
  %86 = load i64, i64* %57, align 8
  %87 = sub i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %79, i64 %87
  store i8* %88, i8** %7, align 8
  store i8* %79, i8** %56, align 8
  %89 = getelementptr inbounds i8, i8* %79, i64 %62
  store i8* %89, i8** %10, align 8
  br label %90

90:                                               ; preds = %48, %77
  %91 = phi i8* [ %51, %48 ], [ %88, %77 ]
  %92 = getelementptr inbounds i8, i8* %91, i64 1
  store i8* %92, i8** %7, align 8
  store i8 %2, i8* %91, align 1
  %93 = load i8*, i8** %7, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  %95 = load i8*, i8** %10, align 8
  %96 = icmp ugt i8* %94, %95
  br i1 %96, label %97, label %132

97:                                               ; preds = %90
  %98 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = ptrtoint i8* %95 to i64
  %102 = sub i64 %101, %100
  %103 = shl nsw i64 %102, 1
  %104 = or i64 %103, 1
  %105 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %5, i64 0, i32 0
  %106 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %105, align 8
  %107 = add i64 %104, 7
  %108 = and i64 %107, -8
  %109 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %106, i64 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %106, i64 0, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = sub i64 %112, %110
  %114 = icmp ugt i64 %108, %113
  br i1 %114, label %115, label %117, !prof !2

115:                                              ; preds = %97
  %116 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %106, i64 %108) #9
  br label %119

117:                                              ; preds = %97
  %118 = add i64 %108, %110
  store i64 %118, i64* %109, align 8
  br label %119

119:                                              ; preds = %117, %115
  %120 = phi i64 [ %116, %115 ], [ %110, %117 ]
  %121 = inttoptr i64 %120 to i8*
  %122 = load i8*, i8** %98, align 8
  %123 = bitcast i8** %7 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = ptrtoint i8* %122 to i64
  %126 = sub i64 %124, %125
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %122, i64 %126, i1 false) #9
  %127 = load i64, i64* %123, align 8
  %128 = load i64, i64* %99, align 8
  %129 = sub i64 %127, %128
  %130 = getelementptr inbounds i8, i8* %121, i64 %129
  store i8* %130, i8** %7, align 8
  store i8* %121, i8** %98, align 8
  %131 = getelementptr inbounds i8, i8* %121, i64 %104
  store i8* %131, i8** %10, align 8
  br label %132

132:                                              ; preds = %90, %119
  %133 = phi i8* [ %93, %90 ], [ %130, %119 ]
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %7, align 8
  store i8 %3, i8* %133, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitWithI32VENS1_10WasmOpcodeEi(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ugt i8* %8, %10
  br i1 %11, label %12, label %47

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint i8* %10 to i64
  %17 = sub i64 %16, %15
  %18 = shl nsw i64 %17, 1
  %19 = or i64 %18, 1
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %4, i64 0, i32 0
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %22 = add i64 %19, 7
  %23 = and i64 %22, -8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %12
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %21, i64 %23) #9
  br label %34

32:                                               ; preds = %12
  %33 = add i64 %23, %25
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %13, align 8
  %38 = bitcast i8** %6 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = ptrtoint i8* %37 to i64
  %41 = sub i64 %39, %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 %41, i1 false) #9
  %42 = load i64, i64* %38, align 8
  %43 = load i64, i64* %14, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds i8, i8* %36, i64 %44
  store i8* %45, i8** %6, align 8
  store i8* %36, i8** %13, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 %19
  store i8* %46, i8** %9, align 8
  br label %47

47:                                               ; preds = %3, %34
  %48 = phi i8* [ %7, %3 ], [ %45, %34 ]
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %5, i8* %48, align 1
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %4, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitI32ConstEi(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %14, %13
  %16 = shl nsw i64 %15, 1
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = add i64 %17, 7
  %21 = and i64 %20, -8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ugt i64 %21, %26
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %10
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %21) #9
  br label %32

30:                                               ; preds = %10
  %31 = add i64 %21, %23
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8** %4 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = sub i64 %37, %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %39, i1 false) #9
  %40 = load i64, i64* %36, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  store i8* %43, i8** %4, align 8
  store i8* %34, i8** %11, align 8
  %44 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8* %44, i8** %7, align 8
  br label %45

45:                                               ; preds = %2, %32
  %46 = phi i8* [ %5, %2 ], [ %43, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %4, align 8
  store i8 65, i8* %46, align 1
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %3, i32 %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitI64ConstEl(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %14, %13
  %16 = shl nsw i64 %15, 1
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = add i64 %17, 7
  %21 = and i64 %20, -8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ugt i64 %21, %26
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %10
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %21) #9
  br label %32

30:                                               ; preds = %10
  %31 = add i64 %21, %23
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8** %4 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = sub i64 %37, %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %39, i1 false) #9
  %40 = load i64, i64* %36, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  store i8* %43, i8** %4, align 8
  store i8* %34, i8** %11, align 8
  %44 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8* %44, i8** %7, align 8
  br label %45

45:                                               ; preds = %2, %32
  %46 = phi i8* [ %5, %2 ], [ %43, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %4, align 8
  store i8 66, i8* %46, align 1
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i64vEl(%"class.v8::internal::wasm::ZoneBuffer"* %3, i64 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm10ZoneBuffer10write_i64vEl(%"class.v8::internal::wasm::ZoneBuffer"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 10
  %6 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %44

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %13, %12
  %15 = shl nsw i64 %14, 1
  %16 = add i64 %15, 10
  %17 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = add i64 %15, 17
  %20 = and i64 %19, -8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %22
  %26 = icmp ugt i64 %20, %25
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %9
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %20) #9
  br label %31

29:                                               ; preds = %9
  %30 = add i64 %20, %22
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ %28, %27 ], [ %22, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8*, i8** %10, align 8
  %35 = bitcast i8** %3 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint i8* %34 to i64
  %38 = sub i64 %36, %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %38, i1 false) #9
  %39 = load i64, i64* %35, align 8
  %40 = load i64, i64* %11, align 8
  %41 = sub i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8* %42, i8** %3, align 8
  store i8* %33, i8** %10, align 8
  %43 = getelementptr inbounds i8, i8* %33, i64 %16
  store i8* %43, i8** %6, align 8
  br label %44

44:                                               ; preds = %2, %31
  %45 = phi i8* [ %4, %2 ], [ %42, %31 ]
  %46 = icmp sgt i64 %1, -1
  br i1 %46, label %55, label %47

47:                                               ; preds = %44
  %48 = icmp ult i64 %1, -64
  %49 = trunc i64 %1 to i8
  br i1 %48, label %50, label %91

50:                                               ; preds = %47
  %51 = or i8 %49, -128
  %52 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %52, i8** %3, align 8
  store i8 %51, i8* %45, align 1
  %53 = ashr i64 %1, 7
  %54 = icmp ult i64 %53, -64
  br i1 %54, label %79, label %87

55:                                               ; preds = %44
  %56 = icmp sgt i64 %1, 63
  %57 = trunc i64 %1 to i8
  br i1 %56, label %58, label %75

58:                                               ; preds = %55
  %59 = or i8 %57, -128
  %60 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %60, i8** %3, align 8
  store i8 %59, i8* %45, align 1
  %61 = lshr i64 %1, 7
  %62 = icmp ugt i64 %1, 8191
  br i1 %62, label %63, label %71

63:                                               ; preds = %58, %63
  %64 = phi i64 [ %69, %63 ], [ %61, %58 ]
  %65 = trunc i64 %64 to i8
  %66 = load i8*, i8** %3, align 8
  %67 = or i8 %65, -128
  %68 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %68, i8** %3, align 8
  store i8 %67, i8* %66, align 1
  %69 = lshr i64 %64, 7
  %70 = icmp ugt i64 %64, 8191
  br i1 %70, label %63, label %71

71:                                               ; preds = %63, %58
  %72 = phi i64 [ %61, %58 ], [ %69, %63 ]
  %73 = trunc i64 %72 to i8
  %74 = load i8*, i8** %3, align 8
  br label %75

75:                                               ; preds = %71, %55
  %76 = phi i8* [ %45, %55 ], [ %74, %71 ]
  %77 = phi i8 [ %57, %55 ], [ %73, %71 ]
  %78 = getelementptr inbounds i8, i8* %76, i64 1
  store i8* %78, i8** %3, align 8
  store i8 %77, i8* %76, align 1
  br label %96

79:                                               ; preds = %50, %79
  %80 = phi i64 [ %85, %79 ], [ %53, %50 ]
  %81 = trunc i64 %80 to i8
  %82 = load i8*, i8** %3, align 8
  %83 = or i8 %81, -128
  %84 = getelementptr inbounds i8, i8* %82, i64 1
  store i8* %84, i8** %3, align 8
  store i8 %83, i8* %82, align 1
  %85 = ashr i64 %80, 7
  %86 = icmp ult i64 %85, -64
  br i1 %86, label %79, label %87

87:                                               ; preds = %79, %50
  %88 = phi i64 [ %53, %50 ], [ %85, %79 ]
  %89 = trunc i64 %88 to i8
  %90 = load i8*, i8** %3, align 8
  br label %91

91:                                               ; preds = %87, %47
  %92 = phi i8* [ %45, %47 ], [ %90, %87 ]
  %93 = phi i8 [ %49, %47 ], [ %89, %87 ]
  %94 = and i8 %93, 127
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  store i8* %95, i8** %3, align 8
  store i8 %94, i8* %92, align 1
  br label %96

96:                                               ; preds = %75, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitF32ConstEf(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %14, %13
  %16 = shl nsw i64 %15, 1
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = add i64 %17, 7
  %21 = and i64 %20, -8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ugt i64 %21, %26
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %10
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %21) #9
  br label %32

30:                                               ; preds = %10
  %31 = add i64 %21, %23
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8** %4 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = sub i64 %37, %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %39, i1 false) #9
  %40 = load i64, i64* %36, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  store i8* %43, i8** %4, align 8
  store i8* %34, i8** %11, align 8
  %44 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8* %44, i8** %7, align 8
  br label %45

45:                                               ; preds = %2, %32
  %46 = phi i8* [ %5, %2 ], [ %43, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %4, align 8
  store i8 67, i8* %46, align 1
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 4
  %50 = load i8*, i8** %7, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %87

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = ptrtoint i8* %50 to i64
  %57 = sub i64 %56, %55
  %58 = shl nsw i64 %57, 1
  %59 = add i64 %58, 4
  %60 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = add i64 %58, 11
  %63 = and i64 %62, -8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %52
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %63) #9
  br label %74

72:                                               ; preds = %52
  %73 = add i64 %63, %65
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to i8*
  %77 = load i8*, i8** %53, align 8
  %78 = bitcast i8** %4 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = ptrtoint i8* %77 to i64
  %81 = sub i64 %79, %80
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %81, i1 false) #9
  %82 = load i64, i64* %78, align 8
  %83 = load i64, i64* %54, align 8
  %84 = sub i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %76, i64 %84
  store i8* %85, i8** %4, align 8
  store i8* %76, i8** %53, align 8
  %86 = getelementptr inbounds i8, i8* %76, i64 %59
  store i8* %86, i8** %7, align 8
  br label %87

87:                                               ; preds = %45, %74
  %88 = phi i8* [ %48, %45 ], [ %85, %74 ]
  %89 = bitcast i8* %88 to float*
  store float %1, float* %89, align 1
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 4
  store i8* %91, i8** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder12EmitF64ConstEd(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %14, %13
  %16 = shl nsw i64 %15, 1
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = add i64 %17, 7
  %21 = and i64 %20, -8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ugt i64 %21, %26
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %10
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %21) #9
  br label %32

30:                                               ; preds = %10
  %31 = add i64 %21, %23
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8** %4 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = sub i64 %37, %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %39, i1 false) #9
  %40 = load i64, i64* %36, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  store i8* %43, i8** %4, align 8
  store i8* %34, i8** %11, align 8
  %44 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8* %44, i8** %7, align 8
  br label %45

45:                                               ; preds = %2, %32
  %46 = phi i8* [ %5, %2 ], [ %43, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %4, align 8
  store i8 68, i8* %46, align 1
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 8
  %50 = load i8*, i8** %7, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %87

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = ptrtoint i8* %50 to i64
  %57 = sub i64 %56, %55
  %58 = shl nsw i64 %57, 1
  %59 = add i64 %58, 8
  %60 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %3, i64 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = add i64 %58, 15
  %63 = and i64 %62, -8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %52
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %63) #9
  br label %74

72:                                               ; preds = %52
  %73 = add i64 %63, %65
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to i8*
  %77 = load i8*, i8** %53, align 8
  %78 = bitcast i8** %4 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = ptrtoint i8* %77 to i64
  %81 = sub i64 %79, %80
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %81, i1 false) #9
  %82 = load i64, i64* %78, align 8
  %83 = load i64, i64* %54, align 8
  %84 = sub i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %76, i64 %84
  store i8* %85, i8** %4, align 8
  store i8* %76, i8** %53, align 8
  %86 = getelementptr inbounds i8, i8* %76, i64 %59
  store i8* %86, i8** %7, align 8
  br label %87

87:                                               ; preds = %45, %74
  %88 = phi i8* [ %48, %45 ], [ %85, %74 ]
  %89 = bitcast i8* %88 to double*
  store double %1, double* %89, align 1
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 8
  store i8* %91, i8** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder19EmitDirectCallIndexEj(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [5 x i8], align 1
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %13 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %14, align 8
  %16 = icmp eq %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %13, %15
  %17 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %15 to i64
  br i1 %16, label %24, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %13, i64 0, i32 0
  store i64 %10, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %13, i64 0, i32 1
  store i32 %1, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %13, i64 1
  %22 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %21 to i64
  %23 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %12 to i64*
  store i64 %22, i64* %23, align 8
  br label %124

24:                                               ; preds = %2
  %25 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %13 to i64
  %26 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %12 to i64*
  %27 = bitcast %"class.std::__1::vector.121"* %11 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %25, %28
  %30 = ashr exact i64 %29, 4
  %31 = add nsw i64 %30, 1
  %32 = icmp ugt i64 %31, 134217727
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = bitcast %"class.std::__1::vector.121"* %11 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #10
  unreachable

35:                                               ; preds = %24
  %36 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %14 to i64*
  %37 = sub i64 %17, %28
  %38 = ashr exact i64 %37, 4
  %39 = icmp ult i64 %38, 67108863
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = ashr exact i64 %37, 3
  %42 = icmp ult i64 %41, %31
  %43 = select i1 %42, i64 %31, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %63, label %45

45:                                               ; preds = %40, %35
  %46 = phi i64 [ %43, %40 ], [ 134217727, %35 ]
  %47 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %48 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %47, align 8
  %49 = shl i64 %46, 4
  %50 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 3
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %53, %51
  %55 = icmp ugt i64 %49, %54
  br i1 %55, label %56, label %58, !prof !2

56:                                               ; preds = %45
  %57 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %48, i64 %49) #9
  br label %60

58:                                               ; preds = %45
  %59 = add i64 %51, %49
  store i64 %59, i64* %50, align 8
  br label %60

60:                                               ; preds = %58, %56
  %61 = phi i64 [ %57, %56 ], [ %51, %58 ]
  %62 = inttoptr i64 %61 to %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*
  br label %63

63:                                               ; preds = %60, %40
  %64 = phi i64 [ %46, %60 ], [ 0, %40 ]
  %65 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %62, %60 ], [ null, %40 ]
  %66 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %65, i64 %30
  %67 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %65, i64 %64
  %68 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %67 to i64
  %69 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %66, i64 0, i32 0
  store i64 %10, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %65, i64 %30, i32 1
  store i32 %1, i32* %70, align 8
  %71 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %66, i64 1
  %72 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %71 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %11, i64 0, i32 0, i32 0
  %74 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %73, align 8
  %75 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %12, align 8
  %76 = icmp eq %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %75, %74
  br i1 %76, label %121, label %77

77:                                               ; preds = %63
  %78 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %74 to i64
  %79 = getelementptr %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %75, i64 -1, i32 0
  %80 = ptrtoint i64* %79 to i64
  %81 = sub i64 %80, %78
  %82 = lshr i64 %81, 4
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 3
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %77, %86
  %87 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %90, %86 ], [ %66, %77 ]
  %88 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %91, %86 ], [ %75, %77 ]
  %89 = phi i64 [ %94, %86 ], [ %84, %77 ]
  %90 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %87, i64 -1
  %91 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %88, i64 -1
  %92 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %90 to i8*
  %93 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false) #9
  %94 = add i64 %89, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %86, !llvm.loop !5

96:                                               ; preds = %86, %77
  %97 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ undef, %77 ], [ %90, %86 ]
  %98 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %66, %77 ], [ %90, %86 ]
  %99 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %75, %77 ], [ %91, %86 ]
  %100 = icmp ult i64 %81, 48
  br i1 %100, label %121, label %101

101:                                              ; preds = %96, %101
  %102 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %116, %101 ], [ %98, %96 ]
  %103 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %117, %101 ], [ %99, %96 ]
  %104 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %102, i64 -1
  %105 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %103, i64 -1
  %106 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %104 to i8*
  %107 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #9
  %108 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %102, i64 -2
  %109 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %103, i64 -2
  %110 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %108 to i8*
  %111 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #9
  %112 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %102, i64 -3
  %113 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %103, i64 -3
  %114 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %112 to i8*
  %115 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 16, i1 false) #9
  %116 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %102, i64 -4
  %117 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %103, i64 -4
  %118 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %116 to i8*
  %119 = bitcast %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false) #9
  %120 = icmp eq %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %117, %74
  br i1 %120, label %121, label %101

121:                                              ; preds = %96, %101, %63
  %122 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %66, %63 ], [ %97, %96 ], [ %116, %101 ]
  %123 = ptrtoint %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %122 to i64
  store i64 %123, i64* %27, align 8
  store i64 %72, i64* %26, align 8
  store i64 %68, i64* %36, align 8
  br label %124

124:                                              ; preds = %18, %121
  %125 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %125)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %125, i8 0, i64 5, i1 false)
  %126 = load i8*, i8** %4, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 5
  %128 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 3
  %129 = load i8*, i8** %128, align 8
  %130 = icmp ugt i8* %127, %129
  br i1 %130, label %131, label %163

131:                                              ; preds = %124
  %132 = load i64, i64* %8, align 8
  %133 = ptrtoint i8* %129 to i64
  %134 = sub i64 %133, %132
  %135 = shl nsw i64 %134, 1
  %136 = add i64 %135, 5
  %137 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 0
  %138 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %137, align 8
  %139 = add i64 %135, 12
  %140 = and i64 %139, -8
  %141 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %138, i64 0, i32 2
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %138, i64 0, i32 3
  %144 = load i64, i64* %143, align 8
  %145 = sub i64 %144, %142
  %146 = icmp ugt i64 %140, %145
  br i1 %146, label %147, label %149, !prof !2

147:                                              ; preds = %131
  %148 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %138, i64 %140) #9
  br label %151

149:                                              ; preds = %131
  %150 = add i64 %140, %142
  store i64 %150, i64* %141, align 8
  br label %151

151:                                              ; preds = %149, %147
  %152 = phi i64 [ %148, %147 ], [ %142, %149 ]
  %153 = inttoptr i64 %152 to i8*
  %154 = load i8*, i8** %7, align 8
  %155 = load i64, i64* %5, align 8
  %156 = ptrtoint i8* %154 to i64
  %157 = sub i64 %155, %156
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %153, i8* align 1 %154, i64 %157, i1 false) #9
  %158 = load i64, i64* %5, align 8
  %159 = load i64, i64* %8, align 8
  %160 = sub i64 %158, %159
  %161 = getelementptr inbounds i8, i8* %153, i64 %160
  store i8* %161, i8** %4, align 8
  store i8* %153, i8** %7, align 8
  %162 = getelementptr inbounds i8, i8* %153, i64 %136
  store i8* %162, i8** %128, align 8
  br label %163

163:                                              ; preds = %124, %151
  %164 = phi i8* [ %126, %124 ], [ %161, %151 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* nonnull align 1 %125, i64 5, i1 false) #9
  %165 = load i8*, i8** %4, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 5
  store i8* %166, i8** %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %125)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder7SetNameENS0_6VectorIKcEE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i8*, i64) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 5, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 5, i32 1
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder16AddAsmWasmOffsetEmm(%"class.v8::internal::wasm::WasmFunctionBuilder"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 12
  %14 = load i32, i32* %13, align 8
  %15 = sub i32 %11, %14
  %16 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 5
  %19 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ugt i8* %18, %20
  br i1 %21, label %22, label %57

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 1
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i8* %20 to i64
  %27 = sub i64 %26, %25
  %28 = shl nsw i64 %27, 1
  %29 = add i64 %28, 5
  %30 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %12, i64 0, i32 0
  %31 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %30, align 8
  %32 = add i64 %28, 12
  %33 = and i64 %32, -8
  %34 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %31, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %31, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %35
  %39 = icmp ugt i64 %33, %38
  br i1 %39, label %40, label %42, !prof !2

40:                                               ; preds = %22
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %31, i64 %33) #9
  br label %44

42:                                               ; preds = %22
  %43 = add i64 %33, %35
  store i64 %43, i64* %34, align 8
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i64 [ %41, %40 ], [ %35, %42 ]
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8*, i8** %23, align 8
  %48 = bitcast i8** %16 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = ptrtoint i8* %47 to i64
  %51 = sub i64 %49, %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 %51, i1 false) #9
  %52 = load i64, i64* %48, align 8
  %53 = load i64, i64* %24, align 8
  %54 = sub i64 %52, %53
  %55 = getelementptr inbounds i8, i8* %46, i64 %54
  store i8* %55, i8** %16, align 8
  store i8* %46, i8** %23, align 8
  %56 = getelementptr inbounds i8, i8* %46, i64 %29
  store i8* %56, i8** %19, align 8
  br label %57

57:                                               ; preds = %44, %3
  %58 = phi i8* [ %17, %3 ], [ %55, %44 ]
  %59 = icmp ugt i32 %15, 127
  %60 = trunc i32 %15 to i8
  br i1 %59, label %61, label %73

61:                                               ; preds = %57, %61
  %62 = phi i8* [ %70, %61 ], [ %58, %57 ]
  %63 = phi i8 [ %69, %61 ], [ %60, %57 ]
  %64 = phi i32 [ %67, %61 ], [ %15, %57 ]
  %65 = or i8 %63, -128
  %66 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %66, i8** %16, align 8
  store i8 %65, i8* %62, align 1
  %67 = lshr i32 %64, 7
  %68 = icmp ugt i32 %64, 16383
  %69 = trunc i32 %67 to i8
  %70 = load i8*, i8** %16, align 8
  br i1 %68, label %61, label %71

71:                                               ; preds = %61
  %72 = trunc i32 %67 to i8
  br label %73

73:                                               ; preds = %71, %57
  %74 = phi i8* [ %58, %57 ], [ %70, %71 ]
  %75 = phi i8 [ %60, %57 ], [ %72, %71 ]
  %76 = and i8 %75, 127
  %77 = getelementptr inbounds i8, i8* %74, i64 1
  store i8* %77, i8** %16, align 8
  store i8 %76, i8* %74, align 1
  store i32 %11, i32* %13, align 8
  %78 = trunc i64 %1 to i32
  %79 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 13
  %80 = load i32, i32* %79, align 4
  %81 = sub i32 %78, %80
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %12, i32 %81)
  %82 = trunc i64 %2 to i32
  %83 = sub i32 %82, %78
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %12, i32 %83)
  store i32 %82, i32* %79, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder27SetAsmFunctionStartPositionEm(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i64) local_unnamed_addr #3 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 14
  store i32 %3, i32* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 13
  store i32 %3, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder18SetCompilationHintENS1_27WasmCompilationHintStrategyENS1_23WasmCompilationHintTierES4_(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #3 align 2 {
  %5 = shl i8 %2, 2
  %6 = or i8 %5, %1
  %7 = shl i8 %3, 4
  %8 = or i8 %6, %7
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 15
  store i8 %8, i8* %9, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm19WasmFunctionBuilder15DeleteCodeAfterEm(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 %1
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  store i8* %5, i8** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm19WasmFunctionBuilder14WriteSignatureEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture readonly, %"class.v8::internal::wasm::ZoneBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 5
  %8 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ugt i8* %7, %9
  br i1 %10, label %11, label %46

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint i8* %9 to i64
  %16 = sub i64 %15, %14
  %17 = shl nsw i64 %16, 1
  %18 = add i64 %17, 5
  %19 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %20 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %19, align 8
  %21 = add i64 %17, 12
  %22 = and i64 %21, -8
  %23 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %20, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %20, i64 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %26, %24
  %28 = icmp ugt i64 %22, %27
  br i1 %28, label %29, label %31, !prof !2

29:                                               ; preds = %11
  %30 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %20, i64 %22) #9
  br label %33

31:                                               ; preds = %11
  %32 = add i64 %22, %24
  store i64 %32, i64* %23, align 8
  br label %33

33:                                               ; preds = %31, %29
  %34 = phi i64 [ %30, %29 ], [ %24, %31 ]
  %35 = inttoptr i64 %34 to i8*
  %36 = load i8*, i8** %12, align 8
  %37 = bitcast i8** %5 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = ptrtoint i8* %36 to i64
  %40 = sub i64 %38, %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %36, i64 %40, i1 false) #9
  %41 = load i64, i64* %37, align 8
  %42 = load i64, i64* %13, align 8
  %43 = sub i64 %41, %42
  %44 = getelementptr inbounds i8, i8* %35, i64 %43
  store i8* %44, i8** %5, align 8
  store i8* %35, i8** %12, align 8
  %45 = getelementptr inbounds i8, i8* %35, i64 %18
  store i8* %45, i8** %8, align 8
  br label %46

46:                                               ; preds = %33, %2
  %47 = phi i8* [ %6, %2 ], [ %44, %33 ]
  %48 = icmp ugt i32 %4, 127
  %49 = trunc i32 %4 to i8
  br i1 %48, label %50, label %62

50:                                               ; preds = %46, %50
  %51 = phi i8* [ %59, %50 ], [ %47, %46 ]
  %52 = phi i8 [ %58, %50 ], [ %49, %46 ]
  %53 = phi i32 [ %56, %50 ], [ %4, %46 ]
  %54 = or i8 %52, -128
  %55 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %55, i8** %5, align 8
  store i8 %54, i8* %51, align 1
  %56 = lshr i32 %53, 7
  %57 = icmp ugt i32 %53, 16383
  %58 = trunc i32 %56 to i8
  %59 = load i8*, i8** %5, align 8
  br i1 %57, label %50, label %60

60:                                               ; preds = %50
  %61 = trunc i32 %56 to i8
  br label %62

62:                                               ; preds = %60, %46
  %63 = phi i8* [ %47, %46 ], [ %59, %60 ]
  %64 = phi i8 [ %49, %46 ], [ %61, %60 ]
  %65 = and i8 %64, 127
  %66 = getelementptr inbounds i8, i8* %63, i64 1
  store i8* %66, i8** %5, align 8
  store i8 %65, i8* %63, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm19WasmFunctionBuilder9WriteBodyEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::ZoneBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1
  %4 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"* %3) #9
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 2
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 4, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = add i64 %11, %4
  %13 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 5
  %16 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ugt i8* %15, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = ptrtoint i8* %17 to i64
  %24 = sub i64 %23, %22
  %25 = shl nsw i64 %24, 1
  %26 = add i64 %25, 5
  %27 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %28 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %27, align 8
  %29 = add i64 %25, 12
  %30 = and i64 %29, -8
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %34, %32
  %36 = icmp ugt i64 %30, %35
  br i1 %36, label %37, label %39, !prof !2

37:                                               ; preds = %19
  %38 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %28, i64 %30) #9
  br label %41

39:                                               ; preds = %19
  %40 = add i64 %30, %32
  store i64 %40, i64* %31, align 8
  br label %41

41:                                               ; preds = %39, %37
  %42 = phi i64 [ %38, %37 ], [ %32, %39 ]
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8*, i8** %20, align 8
  %45 = bitcast i8** %13 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = ptrtoint i8* %44 to i64
  %48 = sub i64 %46, %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %44, i64 %48, i1 false) #9
  %49 = load i64, i64* %45, align 8
  %50 = load i64, i64* %21, align 8
  %51 = sub i64 %49, %50
  %52 = getelementptr inbounds i8, i8* %43, i64 %51
  store i8* %52, i8** %13, align 8
  store i8* %43, i8** %20, align 8
  %53 = getelementptr inbounds i8, i8* %43, i64 %26
  store i8* %53, i8** %16, align 8
  br label %54

54:                                               ; preds = %41, %2
  %55 = phi i8* [ %14, %2 ], [ %52, %41 ]
  %56 = trunc i64 %12 to i32
  %57 = icmp ugt i32 %56, 127
  %58 = trunc i64 %12 to i8
  br i1 %57, label %59, label %71

59:                                               ; preds = %54, %59
  %60 = phi i8* [ %68, %59 ], [ %55, %54 ]
  %61 = phi i8 [ %67, %59 ], [ %58, %54 ]
  %62 = phi i32 [ %65, %59 ], [ %56, %54 ]
  %63 = or i8 %61, -128
  %64 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %64, i8** %13, align 8
  store i8 %63, i8* %60, align 1
  %65 = lshr i32 %62, 7
  %66 = icmp ugt i32 %62, 16383
  %67 = trunc i32 %65 to i8
  %68 = load i8*, i8** %13, align 8
  br i1 %66, label %59, label %69

69:                                               ; preds = %59
  %70 = trunc i32 %65 to i8
  br label %71

71:                                               ; preds = %69, %54
  %72 = phi i8* [ %55, %54 ], [ %68, %69 ]
  %73 = phi i8 [ %58, %54 ], [ %70, %69 ]
  %74 = and i8 %73, 127
  %75 = getelementptr inbounds i8, i8* %72, i64 1
  store i8* %75, i8** %13, align 8
  store i8 %74, i8* %72, align 1
  %76 = load i8*, i8** %13, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %4
  %78 = load i8*, i8** %16, align 8
  %79 = icmp ugt i8* %77, %78
  br i1 %79, label %80, label %115

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = ptrtoint i8* %78 to i64
  %85 = sub i64 %84, %83
  %86 = shl nsw i64 %85, 1
  %87 = add i64 %86, %4
  %88 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %89 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %88, align 8
  %90 = add i64 %87, 7
  %91 = and i64 %90, -8
  %92 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 2
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 3
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %95, %93
  %97 = icmp ugt i64 %91, %96
  br i1 %97, label %98, label %100, !prof !2

98:                                               ; preds = %80
  %99 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %89, i64 %91) #9
  br label %102

100:                                              ; preds = %80
  %101 = add i64 %91, %93
  store i64 %101, i64* %92, align 8
  br label %102

102:                                              ; preds = %100, %98
  %103 = phi i64 [ %99, %98 ], [ %93, %100 ]
  %104 = inttoptr i64 %103 to i8*
  %105 = load i8*, i8** %81, align 8
  %106 = bitcast i8** %13 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = ptrtoint i8* %105 to i64
  %109 = sub i64 %107, %108
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %105, i64 %109, i1 false) #9
  %110 = load i64, i64* %106, align 8
  %111 = load i64, i64* %82, align 8
  %112 = sub i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %104, i64 %112
  store i8* %113, i8** %13, align 8
  store i8* %104, i8** %81, align 8
  %114 = getelementptr inbounds i8, i8* %104, i64 %87
  store i8* %114, i8** %16, align 8
  br label %115

115:                                              ; preds = %71, %102
  %116 = phi i8* [ %76, %71 ], [ %113, %102 ]
  %117 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4EmitEPh(%"class.v8::internal::wasm::LocalDeclEncoder"* %3, i8* %116) #9
  %118 = load i8*, i8** %13, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %4
  store i8* %119, i8** %13, align 8
  %120 = load i64, i64* %6, align 8
  %121 = load i64, i64* %9, align 8
  %122 = sub i64 %120, %121
  %123 = icmp eq i64 %122, 0
  %124 = inttoptr i64 %121 to i8*
  br i1 %123, label %216, label %125

125:                                              ; preds = %115
  %126 = ptrtoint i8* %119 to i64
  %127 = bitcast i8** %13 to i64*
  %128 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %129 = bitcast i8** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = sub i64 %126, %130
  %132 = getelementptr inbounds i8, i8* %119, i64 %122
  %133 = load i8*, i8** %16, align 8
  %134 = icmp ugt i8* %132, %133
  br i1 %134, label %135, label %166

135:                                              ; preds = %125
  %136 = ptrtoint i8* %133 to i64
  %137 = sub i64 %136, %130
  %138 = shl nsw i64 %137, 1
  %139 = add i64 %138, %122
  %140 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %141 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %140, align 8
  %142 = add i64 %139, 7
  %143 = and i64 %142, -8
  %144 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %141, i64 0, i32 2
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %141, i64 0, i32 3
  %147 = load i64, i64* %146, align 8
  %148 = sub i64 %147, %145
  %149 = icmp ugt i64 %143, %148
  br i1 %149, label %150, label %152, !prof !2

150:                                              ; preds = %135
  %151 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %141, i64 %143) #9
  br label %154

152:                                              ; preds = %135
  %153 = add i64 %145, %143
  store i64 %153, i64* %144, align 8
  br label %154

154:                                              ; preds = %152, %150
  %155 = phi i64 [ %151, %150 ], [ %145, %152 ]
  %156 = inttoptr i64 %155 to i8*
  %157 = load i8*, i8** %128, align 8
  %158 = load i64, i64* %127, align 8
  %159 = ptrtoint i8* %157 to i64
  %160 = sub i64 %158, %159
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %160, i1 false) #9
  %161 = load i64, i64* %127, align 8
  %162 = load i64, i64* %129, align 8
  %163 = sub i64 %161, %162
  %164 = getelementptr inbounds i8, i8* %156, i64 %163
  store i8* %164, i8** %13, align 8
  store i8* %156, i8** %128, align 8
  %165 = getelementptr inbounds i8, i8* %156, i64 %139
  store i8* %165, i8** %16, align 8
  br label %166

166:                                              ; preds = %125, %154
  %167 = phi i8* [ %119, %125 ], [ %164, %154 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %124, i64 %122, i1 false) #9
  %168 = load i8*, i8** %13, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %122
  store i8* %169, i8** %13, align 8
  %170 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %171 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %170, align 8
  %172 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %173 = load %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"*, %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"** %172, align 8
  %174 = icmp eq %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %171, %173
  br i1 %174, label %216, label %175

175:                                              ; preds = %166
  %176 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 0
  br label %177

177:                                              ; preds = %175, %177
  %178 = phi %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* [ %171, %175 ], [ %214, %177 ]
  %179 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %178, i64 0, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %178, i64 0, i32 1
  %182 = load i32, i32* %181, align 8
  %183 = add i64 %131, %180
  %184 = load %"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::WasmModuleBuilder"** %176, align 8
  %185 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %184, i64 0, i32 2, i32 0
  %186 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %184, i64 0, i32 2, i32 0, i32 0, i32 1
  %187 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = bitcast %"class.std::__1::vector.22"* %185 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub i64 %188, %190
  %192 = sdiv exact i64 %191, 40
  %193 = trunc i64 %192 to i32
  %194 = add i32 %182, %193
  %195 = load i8*, i8** %128, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %183
  %197 = trunc i32 %194 to i8
  %198 = lshr i32 %194, 7
  %199 = or i8 %197, -128
  %200 = getelementptr inbounds i8, i8* %196, i64 1
  store i8 %199, i8* %196, align 1
  %201 = trunc i32 %198 to i8
  %202 = lshr i32 %194, 14
  %203 = or i8 %201, -128
  %204 = getelementptr inbounds i8, i8* %200, i64 1
  store i8 %203, i8* %200, align 1
  %205 = trunc i32 %202 to i8
  %206 = lshr i32 %194, 21
  %207 = or i8 %205, -128
  %208 = getelementptr inbounds i8, i8* %204, i64 1
  store i8 %207, i8* %204, align 1
  %209 = trunc i32 %206 to i8
  %210 = lshr i32 %194, 28
  %211 = or i8 %209, -128
  %212 = getelementptr inbounds i8, i8* %208, i64 1
  store i8 %211, i8* %208, align 1
  %213 = trunc i32 %210 to i8
  store i8 %213, i8* %212, align 1
  %214 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex", %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %178, i64 1
  %215 = icmp eq %"struct.v8::internal::wasm::WasmFunctionBuilder::DirectCallIndex"* %214, %173
  br i1 %215, label %216, label %177

216:                                              ; preds = %177, %166, %115
  ret void
}

declare i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"*) local_unnamed_addr #1

declare i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4EmitEPh(%"class.v8::internal::wasm::LocalDeclEncoder"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm19WasmFunctionBuilder23WriteAsmWasmOffsetTableEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::ZoneBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 14
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %59

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 2
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %9, %12
  br i1 %13, label %14, label %59

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 5
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ugt i8* %17, %19
  br i1 %20, label %21, label %56

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = ptrtoint i8* %19 to i64
  %26 = sub i64 %25, %24
  %27 = shl nsw i64 %26, 1
  %28 = add i64 %27, 5
  %29 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %30 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %31 = add i64 %27, 12
  %32 = and i64 %31, -8
  %33 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %30, i64 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %30, i64 0, i32 3
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %36, %34
  %38 = icmp ugt i64 %32, %37
  br i1 %38, label %39, label %41, !prof !2

39:                                               ; preds = %21
  %40 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %30, i64 %32) #9
  br label %43

41:                                               ; preds = %21
  %42 = add i64 %32, %34
  store i64 %42, i64* %33, align 8
  br label %43

43:                                               ; preds = %41, %39
  %44 = phi i64 [ %40, %39 ], [ %34, %41 ]
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8*, i8** %22, align 8
  %47 = bitcast i8** %15 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = ptrtoint i8* %46 to i64
  %50 = sub i64 %48, %49
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %46, i64 %50, i1 false) #9
  %51 = load i64, i64* %47, align 8
  %52 = load i64, i64* %23, align 8
  %53 = sub i64 %51, %52
  %54 = getelementptr inbounds i8, i8* %45, i64 %53
  store i8* %54, i8** %15, align 8
  store i8* %45, i8** %22, align 8
  %55 = getelementptr inbounds i8, i8* %45, i64 %28
  store i8* %55, i8** %18, align 8
  br label %56

56:                                               ; preds = %14, %43
  %57 = phi i8* [ %16, %14 ], [ %54, %43 ]
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8* %58, i8** %15, align 8
  store i8 0, i8* %57, align 1
  br label %322

59:                                               ; preds = %6, %2
  %60 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 1
  %61 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"* %60) #9
  br label %62

62:                                               ; preds = %62, %59
  %63 = phi i64 [ %61, %59 ], [ %66, %62 ]
  %64 = phi i64 [ 0, %59 ], [ %65, %62 ]
  %65 = add nuw nsw i64 %64, 1
  %66 = lshr i64 %63, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %62

68:                                               ; preds = %62
  %69 = load i32, i32* %3, align 8
  %70 = zext i32 %69 to i64
  br label %71

71:                                               ; preds = %71, %68
  %72 = phi i64 [ %70, %68 ], [ %75, %71 ]
  %73 = phi i64 [ 0, %68 ], [ %74, %71 ]
  %74 = add nuw nsw i64 %73, 1
  %75 = lshr i64 %72, 7
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %71

77:                                               ; preds = %71
  %78 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 2
  %79 = bitcast i8** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %0, i64 0, i32 11, i32 1
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = add nuw i64 %74, %65
  %85 = add i64 %84, %80
  %86 = sub i64 %85, %83
  %87 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 5
  %90 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %91 = load i8*, i8** %90, align 8
  %92 = icmp ugt i8* %89, %91
  br i1 %92, label %93, label %128

93:                                               ; preds = %77
  %94 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = ptrtoint i8* %91 to i64
  %98 = sub i64 %97, %96
  %99 = shl nsw i64 %98, 1
  %100 = add i64 %99, 5
  %101 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %102 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %101, align 8
  %103 = add i64 %99, 12
  %104 = and i64 %103, -8
  %105 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %102, i64 0, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %102, i64 0, i32 3
  %108 = load i64, i64* %107, align 8
  %109 = sub i64 %108, %106
  %110 = icmp ugt i64 %104, %109
  br i1 %110, label %111, label %113, !prof !2

111:                                              ; preds = %93
  %112 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %102, i64 %104) #9
  br label %115

113:                                              ; preds = %93
  %114 = add i64 %104, %106
  store i64 %114, i64* %105, align 8
  br label %115

115:                                              ; preds = %113, %111
  %116 = phi i64 [ %112, %111 ], [ %106, %113 ]
  %117 = inttoptr i64 %116 to i8*
  %118 = load i8*, i8** %94, align 8
  %119 = bitcast i8** %87 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = ptrtoint i8* %118 to i64
  %122 = sub i64 %120, %121
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %118, i64 %122, i1 false) #9
  %123 = load i64, i64* %119, align 8
  %124 = load i64, i64* %95, align 8
  %125 = sub i64 %123, %124
  %126 = getelementptr inbounds i8, i8* %117, i64 %125
  store i8* %126, i8** %87, align 8
  store i8* %117, i8** %94, align 8
  %127 = getelementptr inbounds i8, i8* %117, i64 %100
  store i8* %127, i8** %90, align 8
  br label %128

128:                                              ; preds = %115, %77
  %129 = phi i8* [ %88, %77 ], [ %126, %115 ]
  %130 = trunc i64 %86 to i32
  %131 = icmp ugt i32 %130, 127
  %132 = trunc i64 %86 to i8
  br i1 %131, label %133, label %145

133:                                              ; preds = %128, %133
  %134 = phi i8* [ %142, %133 ], [ %129, %128 ]
  %135 = phi i8 [ %141, %133 ], [ %132, %128 ]
  %136 = phi i32 [ %139, %133 ], [ %130, %128 ]
  %137 = or i8 %135, -128
  %138 = getelementptr inbounds i8, i8* %134, i64 1
  store i8* %138, i8** %87, align 8
  store i8 %137, i8* %134, align 1
  %139 = lshr i32 %136, 7
  %140 = icmp ugt i32 %136, 16383
  %141 = trunc i32 %139 to i8
  %142 = load i8*, i8** %87, align 8
  br i1 %140, label %133, label %143

143:                                              ; preds = %133
  %144 = trunc i32 %139 to i8
  br label %145

145:                                              ; preds = %143, %128
  %146 = phi i8* [ %129, %128 ], [ %142, %143 ]
  %147 = phi i8 [ %132, %128 ], [ %144, %143 ]
  %148 = and i8 %147, 127
  %149 = getelementptr inbounds i8, i8* %146, i64 1
  store i8* %149, i8** %87, align 8
  store i8 %148, i8* %146, align 1
  %150 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"* %60) #9
  %151 = trunc i64 %150 to i32
  %152 = load i8*, i8** %87, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 5
  %154 = load i8*, i8** %90, align 8
  %155 = icmp ugt i8* %153, %154
  br i1 %155, label %156, label %191

156:                                              ; preds = %145
  %157 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %158 = bitcast i8** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = ptrtoint i8* %154 to i64
  %161 = sub i64 %160, %159
  %162 = shl nsw i64 %161, 1
  %163 = add i64 %162, 5
  %164 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %165 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %164, align 8
  %166 = add i64 %162, 12
  %167 = and i64 %166, -8
  %168 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %165, i64 0, i32 2
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %165, i64 0, i32 3
  %171 = load i64, i64* %170, align 8
  %172 = sub i64 %171, %169
  %173 = icmp ugt i64 %167, %172
  br i1 %173, label %174, label %176, !prof !2

174:                                              ; preds = %156
  %175 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %165, i64 %167) #9
  br label %178

176:                                              ; preds = %156
  %177 = add i64 %167, %169
  store i64 %177, i64* %168, align 8
  br label %178

178:                                              ; preds = %176, %174
  %179 = phi i64 [ %175, %174 ], [ %169, %176 ]
  %180 = inttoptr i64 %179 to i8*
  %181 = load i8*, i8** %157, align 8
  %182 = bitcast i8** %87 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = ptrtoint i8* %181 to i64
  %185 = sub i64 %183, %184
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* align 1 %181, i64 %185, i1 false) #9
  %186 = load i64, i64* %182, align 8
  %187 = load i64, i64* %158, align 8
  %188 = sub i64 %186, %187
  %189 = getelementptr inbounds i8, i8* %180, i64 %188
  store i8* %189, i8** %87, align 8
  store i8* %180, i8** %157, align 8
  %190 = getelementptr inbounds i8, i8* %180, i64 %163
  store i8* %190, i8** %90, align 8
  br label %191

191:                                              ; preds = %178, %145
  %192 = phi i8* [ %152, %145 ], [ %189, %178 ]
  %193 = icmp ugt i32 %151, 127
  %194 = trunc i64 %150 to i8
  br i1 %193, label %195, label %207

195:                                              ; preds = %191, %195
  %196 = phi i8* [ %204, %195 ], [ %192, %191 ]
  %197 = phi i8 [ %203, %195 ], [ %194, %191 ]
  %198 = phi i32 [ %201, %195 ], [ %151, %191 ]
  %199 = or i8 %197, -128
  %200 = getelementptr inbounds i8, i8* %196, i64 1
  store i8* %200, i8** %87, align 8
  store i8 %199, i8* %196, align 1
  %201 = lshr i32 %198, 7
  %202 = icmp ugt i32 %198, 16383
  %203 = trunc i32 %201 to i8
  %204 = load i8*, i8** %87, align 8
  br i1 %202, label %195, label %205

205:                                              ; preds = %195
  %206 = trunc i32 %201 to i8
  br label %207

207:                                              ; preds = %205, %191
  %208 = phi i8* [ %192, %191 ], [ %204, %205 ]
  %209 = phi i8 [ %194, %191 ], [ %206, %205 ]
  %210 = and i8 %209, 127
  %211 = getelementptr inbounds i8, i8* %208, i64 1
  store i8* %211, i8** %87, align 8
  store i8 %210, i8* %208, align 1
  %212 = load i32, i32* %3, align 8
  %213 = load i8*, i8** %87, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 5
  %215 = load i8*, i8** %90, align 8
  %216 = icmp ugt i8* %214, %215
  br i1 %216, label %217, label %252

217:                                              ; preds = %207
  %218 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %219 = bitcast i8** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = ptrtoint i8* %215 to i64
  %222 = sub i64 %221, %220
  %223 = shl nsw i64 %222, 1
  %224 = add i64 %223, 5
  %225 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %226 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %225, align 8
  %227 = add i64 %223, 12
  %228 = and i64 %227, -8
  %229 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %226, i64 0, i32 2
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %226, i64 0, i32 3
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %232, %230
  %234 = icmp ugt i64 %228, %233
  br i1 %234, label %235, label %237, !prof !2

235:                                              ; preds = %217
  %236 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %226, i64 %228) #9
  br label %239

237:                                              ; preds = %217
  %238 = add i64 %228, %230
  store i64 %238, i64* %229, align 8
  br label %239

239:                                              ; preds = %237, %235
  %240 = phi i64 [ %236, %235 ], [ %230, %237 ]
  %241 = inttoptr i64 %240 to i8*
  %242 = load i8*, i8** %218, align 8
  %243 = bitcast i8** %87 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = ptrtoint i8* %242 to i64
  %246 = sub i64 %244, %245
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %241, i8* align 1 %242, i64 %246, i1 false) #9
  %247 = load i64, i64* %243, align 8
  %248 = load i64, i64* %219, align 8
  %249 = sub i64 %247, %248
  %250 = getelementptr inbounds i8, i8* %241, i64 %249
  store i8* %250, i8** %87, align 8
  store i8* %241, i8** %218, align 8
  %251 = getelementptr inbounds i8, i8* %241, i64 %224
  store i8* %251, i8** %90, align 8
  br label %252

252:                                              ; preds = %239, %207
  %253 = phi i8* [ %213, %207 ], [ %250, %239 ]
  %254 = icmp ugt i32 %212, 127
  %255 = trunc i32 %212 to i8
  br i1 %254, label %256, label %268

256:                                              ; preds = %252, %256
  %257 = phi i8* [ %265, %256 ], [ %253, %252 ]
  %258 = phi i8 [ %264, %256 ], [ %255, %252 ]
  %259 = phi i32 [ %262, %256 ], [ %212, %252 ]
  %260 = or i8 %258, -128
  %261 = getelementptr inbounds i8, i8* %257, i64 1
  store i8* %261, i8** %87, align 8
  store i8 %260, i8* %257, align 1
  %262 = lshr i32 %259, 7
  %263 = icmp ugt i32 %259, 16383
  %264 = trunc i32 %262 to i8
  %265 = load i8*, i8** %87, align 8
  br i1 %263, label %256, label %266

266:                                              ; preds = %256
  %267 = trunc i32 %262 to i8
  br label %268

268:                                              ; preds = %266, %252
  %269 = phi i8* [ %253, %252 ], [ %265, %266 ]
  %270 = phi i8 [ %255, %252 ], [ %267, %266 ]
  %271 = and i8 %270, 127
  %272 = getelementptr inbounds i8, i8* %269, i64 1
  store i8* %272, i8** %87, align 8
  store i8 %271, i8* %269, align 1
  %273 = load i8*, i8** %81, align 8
  %274 = load i64, i64* %79, align 8
  %275 = ptrtoint i8* %273 to i64
  %276 = sub i64 %274, %275
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %322, label %278

278:                                              ; preds = %268
  %279 = load i8*, i8** %87, align 8
  %280 = getelementptr inbounds i8, i8* %279, i64 %276
  %281 = load i8*, i8** %90, align 8
  %282 = icmp ugt i8* %280, %281
  br i1 %282, label %283, label %318

283:                                              ; preds = %278
  %284 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %285 = bitcast i8** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = ptrtoint i8* %281 to i64
  %288 = sub i64 %287, %286
  %289 = shl nsw i64 %288, 1
  %290 = add i64 %289, %276
  %291 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %292 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %291, align 8
  %293 = add i64 %290, 7
  %294 = and i64 %293, -8
  %295 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %292, i64 0, i32 2
  %296 = load i64, i64* %295, align 8
  %297 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %292, i64 0, i32 3
  %298 = load i64, i64* %297, align 8
  %299 = sub i64 %298, %296
  %300 = icmp ugt i64 %294, %299
  br i1 %300, label %301, label %303, !prof !2

301:                                              ; preds = %283
  %302 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %292, i64 %294) #9
  br label %305

303:                                              ; preds = %283
  %304 = add i64 %294, %296
  store i64 %304, i64* %295, align 8
  br label %305

305:                                              ; preds = %303, %301
  %306 = phi i64 [ %302, %301 ], [ %296, %303 ]
  %307 = inttoptr i64 %306 to i8*
  %308 = load i8*, i8** %284, align 8
  %309 = bitcast i8** %87 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = ptrtoint i8* %308 to i64
  %312 = sub i64 %310, %311
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %307, i8* align 1 %308, i64 %312, i1 false) #9
  %313 = load i64, i64* %309, align 8
  %314 = load i64, i64* %285, align 8
  %315 = sub i64 %313, %314
  %316 = getelementptr inbounds i8, i8* %307, i64 %315
  store i8* %316, i8** %87, align 8
  store i8* %307, i8** %284, align 8
  %317 = getelementptr inbounds i8, i8* %307, i64 %290
  store i8* %317, i8** %90, align 8
  br label %318

318:                                              ; preds = %305, %278
  %319 = phi i8* [ %279, %278 ], [ %316, %305 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %319, i8* align 1 %273, i64 %276, i1 false) #9
  %320 = load i8*, i8** %87, align 8
  %321 = getelementptr inbounds i8, i8* %320, i64 %276
  store i8* %321, i8** %87, align 8
  br label %322

322:                                              ; preds = %318, %268, %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilderC2EPNS0_4ZoneE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1
  %5 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1
  %7 = bitcast %"struct.std::__1::__compressed_pair_elem.20"* %6 to i64*
  %8 = bitcast %"class.v8::internal::ZoneVector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 1
  %11 = bitcast %"struct.std::__1::__compressed_pair_elem.26"* %10 to i64*
  %12 = bitcast %"class.v8::internal::ZoneVector.21"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 1
  %15 = bitcast %"struct.std::__1::__compressed_pair_elem.33"* %14 to i64*
  %16 = bitcast %"class.v8::internal::ZoneVector.28"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4
  %18 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1
  %19 = bitcast %"struct.std::__1::__compressed_pair_elem.40"* %18 to i64*
  %20 = bitcast %"class.v8::internal::ZoneVector.35"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5
  %22 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1
  %23 = bitcast %"struct.std::__1::__compressed_pair_elem.47"* %22 to i64*
  %24 = bitcast %"class.v8::internal::ZoneVector.42"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6
  %26 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1
  %27 = bitcast %"struct.std::__1::__compressed_pair_elem.60"* %26 to i64*
  %28 = bitcast %"class.v8::internal::ZoneVector.49"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7
  %30 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 2, i32 1
  %31 = bitcast %"struct.std::__1::__compressed_pair_elem.74"* %30 to i64*
  %32 = bitcast %"class.v8::internal::ZoneVector.62"* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8
  %34 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0, i32 0, i32 2, i32 1
  %35 = bitcast %"struct.std::__1::__compressed_pair_elem.81"* %34 to i64*
  %36 = bitcast %"class.v8::internal::ZoneVector.76"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9
  %38 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 2, i32 1
  %39 = bitcast %"struct.std::__1::__compressed_pair_elem.88"* %38 to i64*
  %40 = bitcast %"class.v8::internal::ZoneVector.83"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10
  %42 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 1
  %43 = bitcast %"struct.std::__1::__compressed_pair_elem.95"* %42 to i64*
  %44 = bitcast %"class.v8::internal::ZoneVector.90"* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #9
  store i64 %5, i64* %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11
  %46 = getelementptr inbounds %"class.v8::internal::ZoneUnorderedMap", %"class.v8::internal::ZoneUnorderedMap"* %45, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %48 = bitcast %"struct.std::__1::__compressed_pair_elem.102"* %47 to i64*
  %49 = bitcast %"class.v8::internal::ZoneUnorderedMap"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 16, i1 false) #9
  store i64 %5, i64* %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 1, i32 1
  %52 = bitcast %"struct.std::__1::__compressed_pair_elem.106"* %51 to i64*
  store i64 %5, i64* %52, align 8
  %53 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 3
  %55 = bitcast %"class.std::__1::__compressed_pair.110"* %54 to i32*
  store i32 1065353216, i32* %55, align 4
  %56 = tail call i64 @_ZNSt3__112__next_primeEm(i64 100) #9
  %57 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = icmp ugt i64 %56, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %2
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm(%"class.std::__1::__hash_table"* %46, i64 %56) #9
  br label %90

61:                                               ; preds = %2
  %62 = icmp ult i64 %56, %58
  br i1 %62, label %63, label %90

63:                                               ; preds = %61
  %64 = icmp ugt i64 %58, 2
  %65 = tail call i64 @llvm.ctpop.i64(i64 %58) #9, !range !6
  %66 = icmp ult i64 %65, 2
  %67 = and i1 %64, %66
  %68 = load i64, i64* %53, align 8
  %69 = uitofp i64 %68 to float
  %70 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 11, i32 0, i32 0, i32 3, i32 0, i32 0
  %71 = load float, float* %70, align 4
  %72 = fdiv float %69, %71
  %73 = tail call float @llvm.ceil.f32(float %72) #9
  %74 = fptoui float %73 to i64
  br i1 %67, label %75, label %82

75:                                               ; preds = %63
  %76 = icmp ult i64 %74, 2
  br i1 %76, label %84, label %77

77:                                               ; preds = %75
  %78 = add i64 %74, -1
  %79 = tail call i64 @llvm.ctlz.i64(i64 %78, i1 true) #9, !range !6
  %80 = sub nuw nsw i64 64, %79
  %81 = shl i64 1, %80
  br label %84

82:                                               ; preds = %63
  %83 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %74) #9
  br label %84

84:                                               ; preds = %82, %77, %75
  %85 = phi i64 [ %83, %82 ], [ %81, %77 ], [ %74, %75 ]
  %86 = icmp ult i64 %56, %85
  %87 = select i1 %86, i64 %85, i64 %56
  %88 = icmp ult i64 %87, %58
  br i1 %88, label %89, label %90

89:                                               ; preds = %84
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm(%"class.std::__1::__hash_table"* %46, i64 %87) #9
  br label %90

90:                                               ; preds = %60, %61, %84, %89
  %91 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 12
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 16, i32 0>, <4 x i32>* %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 16
  store i8 0, i8* %93, align 8
  %94 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 17
  store i8 0, i8* %94, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::wasm::WasmFunctionBuilder"* @_ZN2v88internal4wasm17WasmModuleBuilder11AddFunctionEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Signature"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 320
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %2
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 320) #9
  br label %16

14:                                               ; preds = %2
  %15 = add i64 %7, 320
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::wasm::WasmFunctionBuilder"*
  tail call void @_ZN2v88internal4wasm19WasmFunctionBuilderC2EPNS1_17WasmModuleBuilderE(%"class.v8::internal::wasm::WasmFunctionBuilder"* %18, %"class.v8::internal::wasm::WasmModuleBuilder"* %0) #9
  %19 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %20 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %21, align 8
  %23 = icmp ult %"class.v8::internal::wasm::WasmFunctionBuilder"** %20, %22
  %24 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %22 to i64
  br i1 %23, label %25, label %30

25:                                               ; preds = %16
  %26 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %20 to i64*
  store i64 %17, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %20, i64 1
  %28 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %27 to i64
  %29 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %19 to i64*
  store i64 %28, i64* %29, align 8
  br label %255

30:                                               ; preds = %16
  %31 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %20 to i64
  %32 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %19 to i64*
  %33 = bitcast %"class.std::__1::vector.43"* %3 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %31, %34
  %36 = ashr exact i64 %35, 3
  %37 = add nsw i64 %36, 1
  %38 = icmp ugt i64 %37, 268435455
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  %40 = bitcast %"class.std::__1::vector.43"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %40) #10
  unreachable

41:                                               ; preds = %30
  %42 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %21 to i64*
  %43 = sub i64 %24, %34
  %44 = ashr exact i64 %43, 3
  %45 = icmp ult i64 %44, 134217727
  br i1 %45, label %46, label %51

46:                                               ; preds = %41
  %47 = ashr exact i64 %43, 2
  %48 = icmp ult i64 %47, %37
  %49 = select i1 %48, i64 %37, i64 %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %69, label %51

51:                                               ; preds = %46, %41
  %52 = phi i64 [ %49, %46 ], [ 268435455, %41 ]
  %53 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %54 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %53, align 8
  %55 = shl i64 %52, 3
  %56 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 3
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %59, %57
  %61 = icmp ugt i64 %55, %60
  br i1 %61, label %62, label %64, !prof !2

62:                                               ; preds = %51
  %63 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %54, i64 %55) #9
  br label %66

64:                                               ; preds = %51
  %65 = add i64 %57, %55
  store i64 %65, i64* %56, align 8
  br label %66

66:                                               ; preds = %64, %62
  %67 = phi i64 [ %63, %62 ], [ %57, %64 ]
  %68 = inttoptr i64 %67 to %"class.v8::internal::wasm::WasmFunctionBuilder"**
  br label %69

69:                                               ; preds = %66, %46
  %70 = phi i64 [ %52, %66 ], [ 0, %46 ]
  %71 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %68, %66 ], [ null, %46 ]
  %72 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %71, i64 %36
  %73 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %71, i64 %70
  %74 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %73 to i64
  %75 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %72 to i64*
  store i64 %17, i64* %75, align 8
  %76 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %72, i64 1
  %77 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %3, i64 0, i32 0, i32 0
  %79 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %78, align 8
  %80 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %79 to i64
  %81 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %19, align 8
  %82 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, %79
  br i1 %82, label %252, label %83

83:                                               ; preds = %69
  %84 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 -1
  %85 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %84 to i64
  %86 = sub i64 %85, %80
  %87 = lshr i64 %86, 3
  %88 = add nuw nsw i64 %87, 1
  %89 = icmp ult i64 %88, 4
  br i1 %89, label %182, label %90

90:                                               ; preds = %83
  %91 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 -1
  %92 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %91 to i64
  %93 = sub i64 %92, %80
  %94 = lshr i64 %93, 3
  %95 = xor i64 %94, -1
  %96 = add nsw i64 %36, %95
  %97 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %71, i64 %96
  %98 = xor i64 %94, -1
  %99 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 %98
  %100 = icmp ult %"class.v8::internal::wasm::WasmFunctionBuilder"** %97, %81
  %101 = icmp ult %"class.v8::internal::wasm::WasmFunctionBuilder"** %99, %72
  %102 = and i1 %100, %101
  br i1 %102, label %182, label %103

103:                                              ; preds = %90
  %104 = and i64 %88, 4611686018427387900
  %105 = sub nsw i64 0, %104
  %106 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %72, i64 %105
  %107 = sub nsw i64 0, %104
  %108 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 %107
  %109 = add nsw i64 %104, -4
  %110 = lshr exact i64 %109, 2
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 1
  %113 = icmp eq i64 %109, 0
  br i1 %113, label %160, label %114

114:                                              ; preds = %103
  %115 = sub nuw nsw i64 %111, %112
  %116 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %72, i64 -1
  %117 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 -1
  %118 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %72, i64 -1
  %119 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 -1
  br label %120

120:                                              ; preds = %120, %114
  %121 = phi i64 [ 0, %114 ], [ %155, %120 ]
  %122 = phi i64 [ %115, %114 ], [ %156, %120 ]
  %123 = sub i64 0, %121
  %124 = sub i64 0, %121
  %125 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %116, i64 %123
  %126 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %117, i64 %124
  %127 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %126, i64 -1
  %128 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !7
  %130 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %126, i64 -2
  %131 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %130, i64 -1
  %132 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !7
  %134 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %125, i64 -1
  %135 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %134 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %135, align 8, !alias.scope !10, !noalias !7
  %136 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %125, i64 -2
  %137 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %136, i64 -1
  %138 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %137 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %138, align 8, !alias.scope !10, !noalias !7
  %139 = sub nuw nsw i64 -4, %121
  %140 = sub nuw nsw i64 -4, %121
  %141 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %118, i64 %139
  %142 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %119, i64 %140
  %143 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %142, i64 -1
  %144 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 8, !alias.scope !7
  %146 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %142, i64 -2
  %147 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %146, i64 -1
  %148 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 8, !alias.scope !7
  %150 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %141, i64 -1
  %151 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %150 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %151, align 8, !alias.scope !10, !noalias !7
  %152 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %141, i64 -2
  %153 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %152, i64 -1
  %154 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %153 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %154, align 8, !alias.scope !10, !noalias !7
  %155 = add i64 %121, 8
  %156 = add i64 %122, -2
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %120, !llvm.loop !12

158:                                              ; preds = %120
  %159 = sub nuw nsw i64 -8, %121
  br label %160

160:                                              ; preds = %158, %103
  %161 = phi i64 [ 0, %103 ], [ %159, %158 ]
  %162 = icmp eq i64 %112, 0
  br i1 %162, label %180, label %163

163:                                              ; preds = %160
  %164 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %72, i64 -1
  %165 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %81, i64 -1
  %166 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %164, i64 %161
  %167 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %165, i64 %161
  %168 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %167, i64 -1
  %169 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %168 to <2 x i64>*
  %170 = load <2 x i64>, <2 x i64>* %169, align 8, !alias.scope !7
  %171 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %167, i64 -2
  %172 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %171, i64 -1
  %173 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %172 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !7
  %175 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %166, i64 -1
  %176 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %175 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %176, align 8, !alias.scope !10, !noalias !7
  %177 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %166, i64 -2
  %178 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %177, i64 -1
  %179 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %178 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %179, align 8, !alias.scope !10, !noalias !7
  br label %180

180:                                              ; preds = %160, %163
  %181 = icmp eq i64 %88, %104
  br i1 %181, label %252, label %182

182:                                              ; preds = %180, %90, %83
  %183 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %72, %90 ], [ %72, %83 ], [ %106, %180 ]
  %184 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %81, %90 ], [ %81, %83 ], [ %108, %180 ]
  %185 = getelementptr %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %184, i64 -1
  %186 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %185 to i64
  %187 = sub i64 %186, %80
  %188 = lshr i64 %187, 3
  %189 = add nuw nsw i64 %188, 1
  %190 = and i64 %189, 7
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %203, label %192

192:                                              ; preds = %182, %192
  %193 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %196, %192 ], [ %183, %182 ]
  %194 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %197, %192 ], [ %184, %182 ]
  %195 = phi i64 [ %201, %192 ], [ %190, %182 ]
  %196 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %193, i64 -1
  %197 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %194, i64 -1
  %198 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %196 to i64*
  store i64 %199, i64* %200, align 8
  %201 = add i64 %195, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %192, !llvm.loop !14

203:                                              ; preds = %192, %182
  %204 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ undef, %182 ], [ %196, %192 ]
  %205 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %183, %182 ], [ %196, %192 ]
  %206 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %184, %182 ], [ %197, %192 ]
  %207 = icmp ult i64 %187, 56
  br i1 %207, label %252, label %208

208:                                              ; preds = %203, %208
  %209 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %246, %208 ], [ %205, %203 ]
  %210 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %247, %208 ], [ %206, %203 ]
  %211 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -1
  %212 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -1
  %213 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %211 to i64*
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -2
  %217 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -2
  %218 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %216 to i64*
  store i64 %219, i64* %220, align 8
  %221 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -3
  %222 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -3
  %223 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %221 to i64*
  store i64 %224, i64* %225, align 8
  %226 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -4
  %227 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -4
  %228 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %226 to i64*
  store i64 %229, i64* %230, align 8
  %231 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -5
  %232 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -5
  %233 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %232 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %231 to i64*
  store i64 %234, i64* %235, align 8
  %236 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -6
  %237 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -6
  %238 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %236 to i64*
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -7
  %242 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -7
  %243 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %241 to i64*
  store i64 %244, i64* %245, align 8
  %246 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %209, i64 -8
  %247 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %210, i64 -8
  %248 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %247 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"** %246 to i64*
  store i64 %249, i64* %250, align 8
  %251 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %247, %79
  br i1 %251, label %252, label %208, !llvm.loop !15

252:                                              ; preds = %203, %208, %180, %69
  %253 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %72, %69 ], [ %106, %180 ], [ %204, %203 ], [ %246, %208 ]
  %254 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %253 to i64
  store i64 %254, i64* %33, align 8
  store i64 %77, i64* %32, align 8
  store i64 %74, i64* %42, align 8
  br label %255

255:                                              ; preds = %25, %252
  %256 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %27, %25 ], [ %76, %252 ]
  %257 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %20, %25 ], [ %72, %252 ]
  %258 = icmp eq %"class.v8::internal::Signature"* %1, null
  br i1 %258, label %267, label %259

259:                                              ; preds = %255
  %260 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %257, align 8
  %261 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %260, i64 0, i32 1, i32 0
  store %"class.v8::internal::Signature"* %1, %"class.v8::internal::Signature"** %261, align 8
  %262 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %260, i64 0, i32 0
  %263 = load %"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::WasmModuleBuilder"** %262, align 8
  %264 = tail call i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"* %263, %"class.v8::internal::Signature"* nonnull %1) #9
  %265 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %260, i64 0, i32 2
  store i32 %264, i32* %265, align 8
  %266 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %19, align 8
  br label %267

267:                                              ; preds = %255, %259
  %268 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %256, %255 ], [ %266, %259 ]
  %269 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %268, i64 -1
  %270 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %269, align 8
  ret %"class.v8::internal::wasm::WasmFunctionBuilder"* %270
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder14AddDataSegmentEPKhjj(%"class.v8::internal::wasm::WasmModuleBuilder"*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", align 8
  %6 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #9
  %7 = bitcast %"class.v8::internal::wasm::WasmModuleBuilder"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %10 = bitcast %"struct.std::__1::__compressed_pair_elem.70"* %9 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #9
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 1
  store i32 %3, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %13 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %14, align 8
  %16 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, %15
  br i1 %16, label %17, label %38

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %19 = bitcast %"struct.std::__1::__compressed_pair_elem.70"* %18 to i64*
  %20 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = bitcast i8** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #9
  store i64 %8, i64* %19, align 8
  %22 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %32 = bitcast i8** %31 to i64*
  store i64 %30, i64* %32, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #9
  %33 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 0, i32 1
  %34 = load i32, i32* %11, align 8
  store i32 %34, i32* %33, align 8
  %35 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %13, i64 1
  %36 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %35 to i64
  %37 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %12 to i64*
  store i64 %36, i64* %37, align 8
  br label %47

38:                                               ; preds = %4
  %39 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder15WasmDataSegmentENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.63"* %39, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* nonnull dereferenceable(40) %5) #9
  %40 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %47, label %43

43:                                               ; preds = %38
  %44 = ptrtoint i8* %41 to i64
  %45 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %46 = bitcast i8** %45 to i64*
  store i64 %44, i64* %46, align 8
  br label %47

47:                                               ; preds = %17, %38, %43
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #9
  %48 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %12, align 8
  %49 = icmp eq i32 %2, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %48, i64 -1, i32 0, i32 0
  %52 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %48, i64 -1, i32 0, i32 0, i32 0, i32 1
  %53 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %48, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %54 = bitcast i8** %52 to i64*
  %55 = bitcast %"class.std::__1::vector.66"* %51 to i64*
  %56 = bitcast i8** %53 to i64*
  %57 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %48, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %58 = getelementptr inbounds %"class.std::__1::vector.66", %"class.std::__1::vector.66"* %51, i64 0, i32 0, i32 0
  %59 = zext i32 %2 to i64
  %60 = load i8*, i8** %52, align 8
  br label %62

61:                                               ; preds = %231, %47
  ret void

62:                                               ; preds = %231, %50
  %63 = phi i8* [ %60, %50 ], [ %232, %231 ]
  %64 = phi i64 [ 0, %50 ], [ %233, %231 ]
  %65 = getelementptr inbounds i8, i8* %1, i64 %64
  %66 = load i8*, i8** %53, align 8
  %67 = icmp eq i8* %63, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %62
  %69 = load i8, i8* %65, align 1
  store i8 %69, i8* %63, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 1
  %71 = ptrtoint i8* %70 to i64
  store i64 %71, i64* %54, align 8
  br label %231

72:                                               ; preds = %62
  %73 = ptrtoint i8* %66 to i64
  %74 = load i64, i64* %55, align 8
  %75 = sub i64 %73, %74
  %76 = add i64 %75, 1
  %77 = icmp ugt i64 %76, 2147483647
  br i1 %77, label %78, label %80

78:                                               ; preds = %72
  %79 = bitcast %"class.std::__1::vector.66"* %51 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %79) #10
  unreachable

80:                                               ; preds = %72
  %81 = icmp ult i64 %75, 1073741823
  br i1 %81, label %82, label %87

82:                                               ; preds = %80
  %83 = shl i64 %75, 1
  %84 = icmp ult i64 %83, %76
  %85 = select i1 %84, i64 %76, i64 %83
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %105, label %87

87:                                               ; preds = %82, %80
  %88 = phi i64 [ %85, %82 ], [ 2147483647, %80 ]
  %89 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %90 = add nuw nsw i64 %88, 7
  %91 = and i64 %90, -8
  %92 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 2
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 3
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %95, %93
  %97 = icmp ugt i64 %91, %96
  br i1 %97, label %98, label %100, !prof !2

98:                                               ; preds = %87
  %99 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %89, i64 %91) #9
  br label %102

100:                                              ; preds = %87
  %101 = add i64 %93, %91
  store i64 %101, i64* %92, align 8
  br label %102

102:                                              ; preds = %100, %98
  %103 = phi i64 [ %99, %98 ], [ %93, %100 ]
  %104 = inttoptr i64 %103 to i8*
  br label %105

105:                                              ; preds = %102, %82
  %106 = phi i64 [ %88, %102 ], [ 0, %82 ]
  %107 = phi i8* [ %104, %102 ], [ null, %82 ]
  %108 = getelementptr inbounds i8, i8* %107, i64 %75
  %109 = getelementptr inbounds i8, i8* %107, i64 %106
  %110 = ptrtoint i8* %109 to i64
  %111 = load i8, i8* %65, align 1
  store i8 %111, i8* %108, align 1
  %112 = getelementptr inbounds i8, i8* %108, i64 1
  %113 = ptrtoint i8* %112 to i64
  %114 = load i8*, i8** %58, align 8
  %115 = load i8*, i8** %52, align 8
  %116 = ptrtoint i8* %115 to i64
  %117 = icmp eq i8* %115, %114
  br i1 %117, label %228, label %118

118:                                              ; preds = %105
  %119 = ptrtoint i8* %114 to i64
  %120 = ptrtoint i8* %115 to i64
  %121 = sub i64 %120, %119
  %122 = icmp ult i64 %121, 16
  br i1 %122, label %218, label %123

123:                                              ; preds = %118
  %124 = sub i64 %73, %116
  %125 = sub i64 %124, %74
  %126 = getelementptr i8, i8* %114, i64 %125
  %127 = ptrtoint i8* %126 to i64
  %128 = getelementptr i8, i8* %107, i64 %127
  %129 = icmp ult i8* %128, %115
  %130 = icmp ult i8* %114, %108
  %131 = and i1 %129, %130
  br i1 %131, label %218, label %132

132:                                              ; preds = %123
  %133 = and i64 %121, -16
  %134 = sub i64 0, %133
  %135 = getelementptr i8, i8* %108, i64 %134
  %136 = sub i64 0, %133
  %137 = getelementptr i8, i8* %115, i64 %136
  %138 = add i64 %133, -16
  %139 = lshr exact i64 %138, 4
  %140 = add nuw nsw i64 %139, 1
  %141 = and i64 %140, 3
  %142 = icmp ult i64 %138, 48
  br i1 %142, label %195, label %143

143:                                              ; preds = %132
  %144 = sub nsw i64 %140, %141
  %145 = getelementptr i8, i8* %108, i64 -1
  %146 = getelementptr inbounds i8, i8* %145, i64 -8
  %147 = getelementptr inbounds i8, i8* %115, i64 -16
  %148 = getelementptr inbounds i8, i8* %146, i64 -7
  %149 = getelementptr i8, i8* %108, i64 -1
  %150 = getelementptr inbounds i8, i8* %149, i64 -8
  %151 = getelementptr inbounds i8, i8* %115, i64 -16
  %152 = getelementptr inbounds i8, i8* %150, i64 -7
  %153 = getelementptr i8, i8* %108, i64 -1
  %154 = getelementptr inbounds i8, i8* %153, i64 -8
  %155 = getelementptr inbounds i8, i8* %115, i64 -16
  %156 = getelementptr inbounds i8, i8* %154, i64 -7
  %157 = getelementptr i8, i8* %108, i64 -1
  %158 = getelementptr inbounds i8, i8* %157, i64 -8
  %159 = getelementptr inbounds i8, i8* %115, i64 -16
  %160 = getelementptr inbounds i8, i8* %158, i64 -7
  br label %161

161:                                              ; preds = %161, %143
  %162 = phi i64 [ 0, %143 ], [ %192, %161 ]
  %163 = phi i64 [ %144, %143 ], [ %193, %161 ]
  %164 = sub i64 0, %162
  %165 = sub i64 0, %162
  %166 = getelementptr inbounds i8, i8* %147, i64 %165
  %167 = bitcast i8* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 1, !alias.scope !16
  %169 = getelementptr inbounds i8, i8* %148, i64 %164
  %170 = bitcast i8* %169 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %170, align 1, !alias.scope !19, !noalias !16
  %171 = sub nuw nsw i64 -16, %162
  %172 = sub nuw nsw i64 -16, %162
  %173 = getelementptr inbounds i8, i8* %151, i64 %172
  %174 = bitcast i8* %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 1, !alias.scope !16
  %176 = getelementptr inbounds i8, i8* %152, i64 %171
  %177 = bitcast i8* %176 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %177, align 1, !alias.scope !19, !noalias !16
  %178 = sub nuw nsw i64 -32, %162
  %179 = sub nuw nsw i64 -32, %162
  %180 = getelementptr inbounds i8, i8* %155, i64 %179
  %181 = bitcast i8* %180 to <2 x i64>*
  %182 = load <2 x i64>, <2 x i64>* %181, align 1, !alias.scope !16
  %183 = getelementptr inbounds i8, i8* %156, i64 %178
  %184 = bitcast i8* %183 to <2 x i64>*
  store <2 x i64> %182, <2 x i64>* %184, align 1, !alias.scope !19, !noalias !16
  %185 = sub nuw nsw i64 -48, %162
  %186 = sub nuw nsw i64 -48, %162
  %187 = getelementptr inbounds i8, i8* %159, i64 %186
  %188 = bitcast i8* %187 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 1, !alias.scope !16
  %190 = getelementptr inbounds i8, i8* %160, i64 %185
  %191 = bitcast i8* %190 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %191, align 1, !alias.scope !19, !noalias !16
  %192 = add i64 %162, 64
  %193 = add i64 %163, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %161, !llvm.loop !21

195:                                              ; preds = %161, %132
  %196 = phi i64 [ 0, %132 ], [ %192, %161 ]
  %197 = icmp eq i64 %141, 0
  br i1 %197, label %216, label %198

198:                                              ; preds = %195
  %199 = getelementptr i8, i8* %108, i64 -1
  %200 = getelementptr inbounds i8, i8* %199, i64 -8
  %201 = getelementptr inbounds i8, i8* %115, i64 -16
  %202 = getelementptr inbounds i8, i8* %200, i64 -7
  br label %203

203:                                              ; preds = %203, %198
  %204 = phi i64 [ %196, %198 ], [ %213, %203 ]
  %205 = phi i64 [ %141, %198 ], [ %214, %203 ]
  %206 = sub i64 0, %204
  %207 = sub i64 0, %204
  %208 = getelementptr inbounds i8, i8* %201, i64 %207
  %209 = bitcast i8* %208 to <2 x i64>*
  %210 = load <2 x i64>, <2 x i64>* %209, align 1, !alias.scope !16
  %211 = getelementptr inbounds i8, i8* %202, i64 %206
  %212 = bitcast i8* %211 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %212, align 1, !alias.scope !19, !noalias !16
  %213 = add i64 %204, 16
  %214 = add i64 %205, -1
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %203, !llvm.loop !22

216:                                              ; preds = %203, %195
  %217 = icmp eq i64 %121, %133
  br i1 %217, label %228, label %218

218:                                              ; preds = %216, %123, %118
  %219 = phi i8* [ %108, %123 ], [ %108, %118 ], [ %135, %216 ]
  %220 = phi i8* [ %115, %123 ], [ %115, %118 ], [ %137, %216 ]
  br label %221

221:                                              ; preds = %218, %221
  %222 = phi i8* [ %224, %221 ], [ %219, %218 ]
  %223 = phi i8* [ %225, %221 ], [ %220, %218 ]
  %224 = getelementptr inbounds i8, i8* %222, i64 -1
  %225 = getelementptr inbounds i8, i8* %223, i64 -1
  %226 = load i8, i8* %225, align 1
  store i8 %226, i8* %224, align 1
  %227 = icmp eq i8* %225, %114
  br i1 %227, label %228, label %221, !llvm.loop !23

228:                                              ; preds = %221, %216, %105
  %229 = phi i8* [ %108, %105 ], [ %135, %216 ], [ %224, %221 ]
  %230 = ptrtoint i8* %229 to i64
  store i64 %230, i64* %55, align 8
  store i64 %113, i64* %54, align 8
  store i64 %110, i64* %56, align 8
  br label %231

231:                                              ; preds = %68, %228
  %232 = phi i8* [ %70, %68 ], [ %112, %228 ]
  %233 = add nuw nsw i64 %64, 1
  %234 = icmp eq i64 %233, %59
  br i1 %234, label %61, label %62
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddExceptionEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::Signature"*) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"* %0, %"class.v8::internal::Signature"* %1)
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.91"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 2
  %12 = trunc i64 %11 to i32
  %13 = inttoptr i64 %7 to i32*
  %14 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %15, %13
  %17 = ptrtoint i32* %15 to i64
  br i1 %16, label %21, label %18

18:                                               ; preds = %2
  store i32 %3, i32* %13, align 4
  %19 = getelementptr inbounds i32, i32* %13, i64 1
  %20 = ptrtoint i32* %19 to i64
  store i64 %20, i64* %6, align 8
  br label %224

21:                                               ; preds = %2
  %22 = ashr exact i64 %10, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 536870911
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = bitcast %"class.std::__1::vector.91"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #10
  unreachable

27:                                               ; preds = %21
  %28 = bitcast i32** %14 to i64*
  %29 = sub i64 %17, %9
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 268435455
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %57, label %37

37:                                               ; preds = %32, %27
  %38 = phi i64 [ %35, %32 ], [ 536870911, %27 ]
  %39 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %41 = shl i64 %38, 2
  %42 = add i64 %41, 7
  %43 = and i64 %42, -8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %37
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 %43) #9
  br label %54

52:                                               ; preds = %37
  %53 = add i64 %43, %45
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to i32*
  br label %57

57:                                               ; preds = %54, %32
  %58 = phi i64 [ %38, %54 ], [ 0, %32 ]
  %59 = phi i32* [ %56, %54 ], [ null, %32 ]
  %60 = getelementptr inbounds i32, i32* %59, i64 %22
  %61 = getelementptr inbounds i32, i32* %59, i64 %58
  %62 = ptrtoint i32* %61 to i64
  store i32 %3, i32* %60, align 4
  %63 = getelementptr inbounds i32, i32* %60, i64 1
  %64 = ptrtoint i32* %63 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.91", %"class.std::__1::vector.91"* %4, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = ptrtoint i32* %66 to i64
  %68 = load i32*, i32** %5, align 8
  %69 = icmp eq i32* %68, %66
  br i1 %69, label %221, label %70

70:                                               ; preds = %57
  %71 = getelementptr i32, i32* %68, i64 -1
  %72 = ptrtoint i32* %71 to i64
  %73 = sub i64 %72, %67
  %74 = lshr i64 %73, 2
  %75 = add nuw nsw i64 %74, 1
  %76 = icmp ult i64 %75, 8
  br i1 %76, label %169, label %77

77:                                               ; preds = %70
  %78 = getelementptr i32, i32* %68, i64 -1
  %79 = ptrtoint i32* %78 to i64
  %80 = sub i64 %79, %67
  %81 = lshr i64 %80, 2
  %82 = xor i64 %81, -1
  %83 = add nsw i64 %22, %82
  %84 = getelementptr i32, i32* %59, i64 %83
  %85 = xor i64 %81, -1
  %86 = getelementptr i32, i32* %68, i64 %85
  %87 = icmp ult i32* %84, %68
  %88 = icmp ult i32* %86, %60
  %89 = and i1 %87, %88
  br i1 %89, label %169, label %90

90:                                               ; preds = %77
  %91 = and i64 %75, 9223372036854775800
  %92 = sub nsw i64 0, %91
  %93 = getelementptr i32, i32* %60, i64 %92
  %94 = sub nsw i64 0, %91
  %95 = getelementptr i32, i32* %68, i64 %94
  %96 = add nsw i64 %91, -8
  %97 = lshr exact i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 1
  %100 = icmp eq i64 %96, 0
  br i1 %100, label %147, label %101

101:                                              ; preds = %90
  %102 = sub nuw nsw i64 %98, %99
  %103 = getelementptr i32, i32* %60, i64 -1
  %104 = getelementptr i32, i32* %68, i64 -1
  %105 = getelementptr i32, i32* %60, i64 -1
  %106 = getelementptr i32, i32* %68, i64 -1
  br label %107

107:                                              ; preds = %107, %101
  %108 = phi i64 [ 0, %101 ], [ %142, %107 ]
  %109 = phi i64 [ %102, %101 ], [ %143, %107 ]
  %110 = sub i64 0, %108
  %111 = sub i64 0, %108
  %112 = getelementptr inbounds i32, i32* %103, i64 %110
  %113 = getelementptr inbounds i32, i32* %104, i64 %111
  %114 = getelementptr inbounds i32, i32* %113, i64 -3
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !24
  %117 = getelementptr inbounds i32, i32* %113, i64 -4
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !24
  %121 = getelementptr inbounds i32, i32* %112, i64 -3
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %122, align 4, !alias.scope !27, !noalias !24
  %123 = getelementptr inbounds i32, i32* %112, i64 -4
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %125, align 4, !alias.scope !27, !noalias !24
  %126 = sub nuw nsw i64 -8, %108
  %127 = sub nuw nsw i64 -8, %108
  %128 = getelementptr inbounds i32, i32* %105, i64 %126
  %129 = getelementptr inbounds i32, i32* %106, i64 %127
  %130 = getelementptr inbounds i32, i32* %129, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !24
  %133 = getelementptr inbounds i32, i32* %129, i64 -4
  %134 = getelementptr inbounds i32, i32* %133, i64 -3
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !alias.scope !24
  %137 = getelementptr inbounds i32, i32* %128, i64 -3
  %138 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %138, align 4, !alias.scope !27, !noalias !24
  %139 = getelementptr inbounds i32, i32* %128, i64 -4
  %140 = getelementptr inbounds i32, i32* %139, i64 -3
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %141, align 4, !alias.scope !27, !noalias !24
  %142 = add i64 %108, 16
  %143 = add i64 %109, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %107, !llvm.loop !29

145:                                              ; preds = %107
  %146 = sub nuw nsw i64 -16, %108
  br label %147

147:                                              ; preds = %145, %90
  %148 = phi i64 [ 0, %90 ], [ %146, %145 ]
  %149 = icmp eq i64 %99, 0
  br i1 %149, label %167, label %150

150:                                              ; preds = %147
  %151 = getelementptr i32, i32* %60, i64 -1
  %152 = getelementptr i32, i32* %68, i64 -1
  %153 = getelementptr inbounds i32, i32* %151, i64 %148
  %154 = getelementptr inbounds i32, i32* %152, i64 %148
  %155 = getelementptr inbounds i32, i32* %154, i64 -3
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !24
  %158 = getelementptr inbounds i32, i32* %154, i64 -4
  %159 = getelementptr inbounds i32, i32* %158, i64 -3
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !24
  %162 = getelementptr inbounds i32, i32* %153, i64 -3
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %163, align 4, !alias.scope !27, !noalias !24
  %164 = getelementptr inbounds i32, i32* %153, i64 -4
  %165 = getelementptr inbounds i32, i32* %164, i64 -3
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %166, align 4, !alias.scope !27, !noalias !24
  br label %167

167:                                              ; preds = %147, %150
  %168 = icmp eq i64 %75, %91
  br i1 %168, label %221, label %169

169:                                              ; preds = %167, %77, %70
  %170 = phi i32* [ %60, %77 ], [ %60, %70 ], [ %93, %167 ]
  %171 = phi i32* [ %68, %77 ], [ %68, %70 ], [ %95, %167 ]
  %172 = getelementptr i32, i32* %171, i64 -1
  %173 = ptrtoint i32* %172 to i64
  %174 = sub i64 %173, %67
  %175 = lshr i64 %174, 2
  %176 = add nuw nsw i64 %175, 1
  %177 = and i64 %176, 7
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %188, label %179

179:                                              ; preds = %169, %179
  %180 = phi i32* [ %183, %179 ], [ %170, %169 ]
  %181 = phi i32* [ %184, %179 ], [ %171, %169 ]
  %182 = phi i64 [ %186, %179 ], [ %177, %169 ]
  %183 = getelementptr inbounds i32, i32* %180, i64 -1
  %184 = getelementptr inbounds i32, i32* %181, i64 -1
  %185 = load i32, i32* %184, align 4
  store i32 %185, i32* %183, align 4
  %186 = add i64 %182, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %179, !llvm.loop !30

188:                                              ; preds = %179, %169
  %189 = phi i32* [ undef, %169 ], [ %183, %179 ]
  %190 = phi i32* [ %170, %169 ], [ %183, %179 ]
  %191 = phi i32* [ %171, %169 ], [ %184, %179 ]
  %192 = icmp ult i64 %174, 28
  br i1 %192, label %221, label %193

193:                                              ; preds = %188, %193
  %194 = phi i32* [ %217, %193 ], [ %190, %188 ]
  %195 = phi i32* [ %218, %193 ], [ %191, %188 ]
  %196 = getelementptr inbounds i32, i32* %194, i64 -1
  %197 = getelementptr inbounds i32, i32* %195, i64 -1
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %196, align 4
  %199 = getelementptr inbounds i32, i32* %194, i64 -2
  %200 = getelementptr inbounds i32, i32* %195, i64 -2
  %201 = load i32, i32* %200, align 4
  store i32 %201, i32* %199, align 4
  %202 = getelementptr inbounds i32, i32* %194, i64 -3
  %203 = getelementptr inbounds i32, i32* %195, i64 -3
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds i32, i32* %194, i64 -4
  %206 = getelementptr inbounds i32, i32* %195, i64 -4
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %205, align 4
  %208 = getelementptr inbounds i32, i32* %194, i64 -5
  %209 = getelementptr inbounds i32, i32* %195, i64 -5
  %210 = load i32, i32* %209, align 4
  store i32 %210, i32* %208, align 4
  %211 = getelementptr inbounds i32, i32* %194, i64 -6
  %212 = getelementptr inbounds i32, i32* %195, i64 -6
  %213 = load i32, i32* %212, align 4
  store i32 %213, i32* %211, align 4
  %214 = getelementptr inbounds i32, i32* %194, i64 -7
  %215 = getelementptr inbounds i32, i32* %195, i64 -7
  %216 = load i32, i32* %215, align 4
  store i32 %216, i32* %214, align 4
  %217 = getelementptr inbounds i32, i32* %194, i64 -8
  %218 = getelementptr inbounds i32, i32* %195, i64 -8
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %217, align 4
  %220 = icmp eq i32* %218, %66
  br i1 %220, label %221, label %193, !llvm.loop !31

221:                                              ; preds = %188, %193, %167, %57
  %222 = phi i32* [ %60, %57 ], [ %93, %167 ], [ %189, %188 ], [ %217, %193 ]
  %223 = ptrtoint i32* %222 to i64
  store i64 %223, i64* %8, align 8
  store i64 %64, i64* %6, align 8
  store i64 %62, i64* %28, align 8
  br label %224

224:                                              ; preds = %18, %221
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder13AddStructTypeEPNS1_10StructTypeE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::StructType"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %5 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = lshr exact i64 %9, 4
  %11 = trunc i64 %10 to i32
  %12 = inttoptr i64 %6 to %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %14 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %13, align 8
  %15 = icmp ugt %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %14, %12
  %16 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %14 to i64
  br i1 %15, label %17, label %23

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 0, i32 0
  store i32 1, i32* %18, align 8
  %19 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 0, i32 1
  %20 = bitcast %union.anon* %19 to %"class.v8::internal::wasm::StructType"**
  store %"class.v8::internal::wasm::StructType"* %1, %"class.v8::internal::wasm::StructType"** %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 1
  %22 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %21 to i64
  store i64 %22, i64* %5, align 8
  br label %119

23:                                               ; preds = %2
  %24 = ashr exact i64 %9, 4
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 134217727
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #10
  unreachable

29:                                               ; preds = %23
  %30 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %13 to i64*
  %31 = sub i64 %16, %8
  %32 = ashr exact i64 %31, 4
  %33 = icmp ult i64 %32, 67108863
  br i1 %33, label %34, label %39

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 3
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %57, label %39

39:                                               ; preds = %34, %29
  %40 = phi i64 [ %37, %34 ], [ 134217727, %29 ]
  %41 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %41, align 8
  %43 = shl i64 %40, 4
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %39
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %42, i64 %43) #9
  br label %54

52:                                               ; preds = %39
  %53 = add i64 %45, %43
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*
  br label %57

57:                                               ; preds = %54, %34
  %58 = phi i64 [ %40, %54 ], [ 0, %34 ]
  %59 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %56, %54 ], [ null, %34 ]
  %60 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %24
  %61 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %58
  %62 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %61 to i64
  %63 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %60, i64 0, i32 0
  store i32 1, i32* %63, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %24, i32 1
  %65 = bitcast %union.anon* %64 to %"class.v8::internal::wasm::StructType"**
  store %"class.v8::internal::wasm::StructType"* %1, %"class.v8::internal::wasm::StructType"** %65, align 8
  %66 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %60, i64 1
  %67 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %66 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %69 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %68, align 8
  %70 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %4, align 8
  %71 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %70, %69
  br i1 %71, label %116, label %72

72:                                               ; preds = %57
  %73 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %69 to i64
  %74 = getelementptr %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %70, i64 -1, i32 0
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %75, %73
  %77 = lshr i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 3
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %72, %81
  %82 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %85, %81 ], [ %60, %72 ]
  %83 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %86, %81 ], [ %70, %72 ]
  %84 = phi i64 [ %89, %81 ], [ %79, %72 ]
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %82, i64 -1
  %86 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %83, i64 -1
  %87 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %85 to i8*
  %88 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false) #9
  %89 = add i64 %84, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !32

91:                                               ; preds = %81, %72
  %92 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ undef, %72 ], [ %85, %81 ]
  %93 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %60, %72 ], [ %85, %81 ]
  %94 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %70, %72 ], [ %86, %81 ]
  %95 = icmp ult i64 %76, 48
  br i1 %95, label %116, label %96

96:                                               ; preds = %91, %96
  %97 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %111, %96 ], [ %93, %91 ]
  %98 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %112, %96 ], [ %94, %91 ]
  %99 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -1
  %100 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -1
  %101 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %99 to i8*
  %102 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 16, i1 false) #9
  %103 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -2
  %104 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -2
  %105 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %103 to i8*
  %106 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false) #9
  %107 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -3
  %108 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -3
  %109 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %107 to i8*
  %110 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #9
  %111 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -4
  %112 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -4
  %113 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %111 to i8*
  %114 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #9
  %115 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %112, %69
  br i1 %115, label %116, label %96

116:                                              ; preds = %91, %96, %57
  %117 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %60, %57 ], [ %92, %91 ], [ %111, %96 ]
  %118 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %117 to i64
  store i64 %118, i64* %7, align 8
  store i64 %67, i64* %5, align 8
  store i64 %62, i64* %30, align 8
  br label %119

119:                                              ; preds = %17, %116
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddArrayTypeEPNS1_9ArrayTypeE(%"class.v8::internal::wasm::WasmModuleBuilder"*, %"class.v8::internal::wasm::ArrayType"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %5 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = lshr exact i64 %9, 4
  %11 = trunc i64 %10 to i32
  %12 = inttoptr i64 %6 to %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*
  %13 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %14 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %13, align 8
  %15 = icmp ugt %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %14, %12
  %16 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %14 to i64
  br i1 %15, label %17, label %23

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 0, i32 0
  store i32 2, i32* %18, align 8
  %19 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 0, i32 1
  %20 = bitcast %union.anon* %19 to %"class.v8::internal::wasm::ArrayType"**
  store %"class.v8::internal::wasm::ArrayType"* %1, %"class.v8::internal::wasm::ArrayType"** %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %12, i64 1
  %22 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %21 to i64
  store i64 %22, i64* %5, align 8
  br label %119

23:                                               ; preds = %2
  %24 = ashr exact i64 %9, 4
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 134217727
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #10
  unreachable

29:                                               ; preds = %23
  %30 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %13 to i64*
  %31 = sub i64 %16, %8
  %32 = ashr exact i64 %31, 4
  %33 = icmp ult i64 %32, 67108863
  br i1 %33, label %34, label %39

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 3
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %57, label %39

39:                                               ; preds = %34, %29
  %40 = phi i64 [ %37, %34 ], [ 134217727, %29 ]
  %41 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %41, align 8
  %43 = shl i64 %40, 4
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %39
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %42, i64 %43) #9
  br label %54

52:                                               ; preds = %39
  %53 = add i64 %45, %43
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*
  br label %57

57:                                               ; preds = %54, %34
  %58 = phi i64 [ %40, %54 ], [ 0, %34 ]
  %59 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %56, %54 ], [ null, %34 ]
  %60 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %24
  %61 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %58
  %62 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %61 to i64
  %63 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %60, i64 0, i32 0
  store i32 2, i32* %63, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %59, i64 %24, i32 1
  %65 = bitcast %union.anon* %64 to %"class.v8::internal::wasm::ArrayType"**
  store %"class.v8::internal::wasm::ArrayType"* %1, %"class.v8::internal::wasm::ArrayType"** %65, align 8
  %66 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %60, i64 1
  %67 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %66 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %69 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %68, align 8
  %70 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %4, align 8
  %71 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %70, %69
  br i1 %71, label %116, label %72

72:                                               ; preds = %57
  %73 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %69 to i64
  %74 = getelementptr %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %70, i64 -1, i32 0
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %75, %73
  %77 = lshr i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 3
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %72, %81
  %82 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %85, %81 ], [ %60, %72 ]
  %83 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %86, %81 ], [ %70, %72 ]
  %84 = phi i64 [ %89, %81 ], [ %79, %72 ]
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %82, i64 -1
  %86 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %83, i64 -1
  %87 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %85 to i8*
  %88 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false) #9
  %89 = add i64 %84, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !33

91:                                               ; preds = %81, %72
  %92 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ undef, %72 ], [ %85, %81 ]
  %93 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %60, %72 ], [ %85, %81 ]
  %94 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %70, %72 ], [ %86, %81 ]
  %95 = icmp ult i64 %76, 48
  br i1 %95, label %116, label %96

96:                                               ; preds = %91, %96
  %97 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %111, %96 ], [ %93, %91 ]
  %98 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %112, %96 ], [ %94, %91 ]
  %99 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -1
  %100 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -1
  %101 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %99 to i8*
  %102 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 16, i1 false) #9
  %103 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -2
  %104 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -2
  %105 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %103 to i8*
  %106 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false) #9
  %107 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -3
  %108 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -3
  %109 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %107 to i8*
  %110 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #9
  %111 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %97, i64 -4
  %112 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %98, i64 -4
  %113 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %111 to i8*
  %114 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #9
  %115 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %112, %69
  br i1 %115, label %116, label %96

116:                                              ; preds = %91, %96, %57
  %117 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %60, %57 ], [ %92, %91 ], [ %111, %96 ]
  %118 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %117 to i64
  store i64 %118, i64* %7, align 8
  store i64 %67, i64* %5, align 8
  store i64 %62, i64* %30, align 8
  br label %119

119:                                              ; preds = %17, %116
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder25AllocateIndirectFunctionsEj(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", align 8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.77"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  %12 = trunc i64 %11 to i32
  %13 = load i32, i32* @_ZN2v88internal24FLAG_wasm_max_table_sizeE, align 4
  %14 = sub i32 %13, %12
  %15 = icmp ult i32 %14, %1
  br i1 %15, label %70, label %16

16:                                               ; preds = %2
  %17 = add i32 %12, %1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i64 %11, %18
  %20 = inttoptr i64 %9 to i32*
  br i1 %19, label %21, label %23

21:                                               ; preds = %16
  %22 = sub nsw i64 %18, %11
  tail call void @_ZNSt3__16vectorIjN2v88internal13ZoneAllocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.77"* %4, i64 %22, i32* nonnull dereferenceable(4) @_ZN2v88internal4wasm17WasmModuleBuilder10kNullIndexE) #9
  br label %27

23:                                               ; preds = %16
  %24 = icmp ugt i64 %11, %18
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds i32, i32* %20, i64 %18
  store i32* %26, i32** %5, align 8
  br label %27

27:                                               ; preds = %21, %23, %25
  %28 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 13
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 %17, i32 %29
  %32 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0
  %33 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %32, i64 0, i32 0, i32 0
  %34 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %36 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %35, align 8
  %37 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, %36
  br i1 %37, label %38, label %66

38:                                               ; preds = %27
  %39 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %39) #9
  %40 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 0, i32 0
  store i32 32000011, i32* %40, align 8
  %41 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 1
  store i32 %17, i32* %41, align 4
  %42 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 2
  store i32 %31, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 3
  store i8 1, i8* %43, align 4
  %44 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 4
  %45 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 4, i32 1
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %3, i64 0, i32 4, i32 2
  %47 = bitcast %"class.std::__1::unique_ptr.52"* %46 to i64*
  store i64 0, i64* %47, align 8
  %48 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %44 to i32*
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %50 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %49, align 8
  %51 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, %50
  br i1 %51, label %52, label %64

52:                                               ; preds = %38
  %53 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* nonnull align 8 %39, i64 13, i1 false) #9
  %54 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, i64 0, i32 4
  %55 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %54 to i8*
  %56 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 20, i1 false) #9
  %57 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, i64 0, i32 4, i32 2
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %46, i64 0, i32 0, i32 0, i32 0
  %59 = load i64, i64* %47, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %58, align 8
  %60 = bitcast %"class.std::__1::unique_ptr.52"* %57 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, i64 1
  %62 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %61 to i64
  %63 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %35 to i64*
  store i64 %62, i64* %63, align 8
  br label %65

64:                                               ; preds = %38
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.50"* %32, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* nonnull dereferenceable(48) %3) #9
  br label %65

65:                                               ; preds = %52, %64
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %44) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %39) #9
  br label %70

66:                                               ; preds = %27
  %67 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %34, i64 0, i32 1
  store i32 %17, i32* %67, align 4
  %68 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %33, align 8
  %69 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %68, i64 0, i32 2
  store i32 %31, i32* %69, align 8
  br label %70

70:                                               ; preds = %2, %65, %66
  %71 = phi i32 [ %12, %66 ], [ %12, %65 ], [ -1, %2 ]
  ret i32 %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder19SetIndirectFunctionEjj(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture readonly, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds i32, i32* %6, i64 %4
  store i32 %2, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder15SetMaxTableSizeEj(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 13
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %5 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %7 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %6, align 8
  %8 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 2
  store i32 %1, i32* %10, align 8
  br label %11

11:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder8AddTableENS1_9ValueTypeEj(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", align 8
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0
  %6 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 1
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 2
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 3
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 4
  %12 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 4, i32 1
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %4, i64 0, i32 4, i32 2
  %14 = bitcast %"class.std::__1::unique_ptr.52"* %13 to i64*
  store i64 0, i64* %14, align 8
  %15 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %11 to i32*
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %17 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %18, align 8
  %20 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %17, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %3
  %22 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %6, i64 13, i1 false) #9
  %23 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %17, i64 0, i32 4
  %24 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %23 to i8*
  %25 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 20, i1 false) #9
  %26 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %17, i64 0, i32 4, i32 2
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %13, i64 0, i32 0, i32 0, i32 0
  %28 = load i64, i64* %14, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %27, align 8
  %29 = bitcast %"class.std::__1::unique_ptr.52"* %26 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %17, i64 1
  %31 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %30 to i64
  %32 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %16 to i64*
  store i64 %31, i64* %32, align 8
  br label %35

33:                                               ; preds = %3
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.50"* %5, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* nonnull dereferenceable(48) %4) #9
  %34 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %16 to i64*
  br label %35

35:                                               ; preds = %21, %33
  %36 = phi i64* [ %32, %21 ], [ %34, %33 ]
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %11) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #9
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.std::__1::vector.50"* %5 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = sdiv exact i64 %40, 48
  %42 = trunc i64 %41 to i32
  %43 = add i32 %42, -1
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder8AddTableENS1_9ValueTypeEjj(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", align 8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0
  %7 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 1
  store i32 %2, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 2
  store i32 %3, i32* %10, align 8
  %11 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 3
  store i8 1, i8* %11, align 4
  %12 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 4
  %13 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 4, i32 1
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %5, i64 0, i32 4, i32 2
  %15 = bitcast %"class.std::__1::unique_ptr.52"* %14 to i64*
  store i64 0, i64* %15, align 8
  %16 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %12 to i32*
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %18 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %19, align 8
  %21 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %18, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %4
  %23 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 8 %7, i64 13, i1 false) #9
  %24 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %18, i64 0, i32 4
  %25 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %24 to i8*
  %26 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 20, i1 false) #9
  %27 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %18, i64 0, i32 4, i32 2
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %14, i64 0, i32 0, i32 0, i32 0
  %29 = load i64, i64* %15, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %28, align 8
  %30 = bitcast %"class.std::__1::unique_ptr.52"* %27 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %18, i64 1
  %32 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %31 to i64
  %33 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %17 to i64*
  store i64 %32, i64* %33, align 8
  br label %36

34:                                               ; preds = %4
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.50"* %6, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* nonnull dereferenceable(48) %5) #9
  %35 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %17 to i64*
  br label %36

36:                                               ; preds = %22, %34
  %37 = phi i64* [ %33, %22 ], [ %35, %34 ]
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %12) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #9
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.50"* %6 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = sdiv exact i64 %41, 48
  %43 = trunc i64 %42 to i32
  %44 = add i32 %43, -1
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder8AddTableENS1_9ValueTypeEjjNS1_12WasmInitExprE(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32, i32, i32, %"class.v8::internal::wasm::WasmInitExpr"* byval(%"class.v8::internal::wasm::WasmInitExpr") align 8) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", align 8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0
  %8 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 0, i32 0
  store i32 %1, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 1
  store i32 %2, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 2
  store i32 %3, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 3
  store i8 1, i8* %12, align 4
  %13 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 4
  %14 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %13 to i8*
  %15 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* nonnull align 8 %15, i64 20, i1 false) #9
  %16 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %6, i64 0, i32 4, i32 2
  %17 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %4, i64 0, i32 2
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::unique_ptr.52"* %17 to i64*
  %20 = load i64, i64* %19, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %18, align 8
  %21 = bitcast %"class.std::__1::unique_ptr.52"* %16 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %23 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %24, align 8
  %26 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %23, %25
  br i1 %26, label %27, label %38

27:                                               ; preds = %5
  %28 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %8, i64 13, i1 false) #9
  %29 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %23, i64 0, i32 4
  %30 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %14, i64 20, i1 false) #9
  %31 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %23, i64 0, i32 4, i32 2
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %16, i64 0, i32 0, i32 0, i32 0
  %33 = load i64, i64* %21, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr.52"* %31 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %23, i64 1
  %36 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %35 to i64
  %37 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %22 to i64*
  store i64 %36, i64* %37, align 8
  br label %40

38:                                               ; preds = %5
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.50"* %7, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* nonnull dereferenceable(48) %6) #9
  %39 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %22 to i64*
  br label %40

40:                                               ; preds = %27, %38
  %41 = phi i64* [ %37, %27 ], [ %39, %38 ]
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %13) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %8) #9
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.50"* %7 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = sdiv exact i64 %45, 48
  %47 = trunc i64 %46 to i32
  %48 = add i32 %47, -1
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* nonnull %4) #9
  ret i32 %48
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.v8::internal::wasm::WasmInitExpr"*, %"class.v8::internal::wasm::WasmInitExpr"** %2, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %2, align 8
  %4 = icmp eq %"class.v8::internal::wasm::WasmInitExpr"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* nonnull %3) #9
  %6 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #11
  ret void

7:                                                ; preds = %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder9AddImportENS0_6VectorIKcEEPNS0_9SignatureINS1_9ValueTypeEEES5_(%"class.v8::internal::wasm::WasmModuleBuilder"*, i8*, i64, %"class.v8::internal::Signature"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0
  %8 = tail call i32 @_ZN2v88internal4wasm17WasmModuleBuilder12AddSignatureEPNS0_9SignatureINS1_9ValueTypeEEE(%"class.v8::internal::wasm::WasmModuleBuilder"* %0, %"class.v8::internal::Signature"* %3)
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %11, align 8
  %13 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, %12
  %14 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %12 to i64
  br i1 %13, label %15, label %26

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 0, i32 0, i32 0
  store i8* %4, i8** %16, align 8
  %17 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 0, i32 0, i32 1
  store i64 %5, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 0, i32 1, i32 0
  store i8* %1, i8** %18, align 8
  %19 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 0, i32 1, i32 1
  store i64 %2, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 0, i32 2
  store i32 %8, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10, i64 1
  %22 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %21 to i64
  %23 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %9 to i64*
  store i64 %22, i64* %23, align 8
  %24 = bitcast %"class.std::__1::vector.22"* %7 to i64*
  %25 = load i64, i64* %24, align 8
  br label %93

26:                                               ; preds = %6
  %27 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %10 to i64
  %28 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %9 to i64*
  %29 = bitcast %"class.std::__1::vector.22"* %7 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %27, %30
  %32 = sdiv exact i64 %31, 40
  %33 = add nsw i64 %32, 1
  %34 = icmp ugt i64 %33, 53687091
  br i1 %34, label %35, label %37

35:                                               ; preds = %26
  %36 = bitcast %"class.std::__1::vector.22"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #10
  unreachable

37:                                               ; preds = %26
  %38 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %11 to i64*
  %39 = sub i64 %14, %30
  %40 = sdiv exact i64 %39, 40
  %41 = icmp ult i64 %40, 26843545
  br i1 %41, label %42, label %47

42:                                               ; preds = %37
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %33
  %45 = select i1 %44, i64 %33, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %42, %37
  %48 = phi i64 [ %45, %42 ], [ 53687091, %37 ]
  %49 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %49, align 8
  %51 = mul i64 %48, 40
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %53
  %57 = icmp ugt i64 %51, %56
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %47
  %59 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %50, i64 %51) #9
  br label %62

60:                                               ; preds = %47
  %61 = add i64 %53, %51
  store i64 %61, i64* %52, align 8
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i64 [ %59, %58 ], [ %53, %60 ]
  %64 = inttoptr i64 %63 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*
  br label %65

65:                                               ; preds = %62, %42
  %66 = phi i64 [ %48, %62 ], [ 0, %42 ]
  %67 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* [ %64, %62 ], [ null, %42 ]
  %68 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %32
  %69 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %66
  %70 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %69 to i64
  %71 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %68, i64 0, i32 0, i32 0
  store i8* %4, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %32, i32 0, i32 1
  store i64 %5, i64* %72, align 8
  %73 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %32, i32 1, i32 0
  store i8* %1, i8** %73, align 8
  %74 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %32, i32 1, i32 1
  store i64 %2, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %67, i64 %32, i32 2
  store i32 %8, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %68, i64 1
  %77 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %7, i64 0, i32 0, i32 0
  %79 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %78, align 8
  %80 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %9, align 8
  %81 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %80, %79
  br i1 %81, label %90, label %82

82:                                               ; preds = %65, %82
  %83 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* [ %85, %82 ], [ %68, %65 ]
  %84 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* [ %86, %82 ], [ %80, %65 ]
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %83, i64 -1
  %86 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %84, i64 -1
  %87 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %85 to i8*
  %88 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 40, i1 false) #9
  %89 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %86, %79
  br i1 %89, label %90, label %82

90:                                               ; preds = %82, %65
  %91 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* [ %68, %65 ], [ %85, %82 ]
  %92 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %91 to i64
  store i64 %92, i64* %29, align 8
  store i64 %77, i64* %28, align 8
  store i64 %70, i64* %38, align 8
  br label %93

93:                                               ; preds = %15, %90
  %94 = phi i64 [ %25, %15 ], [ %92, %90 ]
  %95 = phi i64 [ %22, %15 ], [ %77, %90 ]
  %96 = sub i64 %95, %94
  %97 = sdiv exact i64 %96, 40
  %98 = trunc i64 %97 to i32
  %99 = add i32 %98, -1
  ret i32 %99
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder15AddGlobalImportENS0_6VectorIKcEENS1_9ValueTypeEbS5_(%"class.v8::internal::wasm::WasmModuleBuilder"*, i8*, i64, i32, i1 zeroext, %"class.v8::internal::Vector"* nocapture readonly byval(%"class.v8::internal::Vector") align 8) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::internal::Vector", align 8
  %8 = alloca [6 x i8], align 2
  %9 = zext i1 %4 to i8
  %10 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0
  %11 = bitcast %"class.v8::internal::Vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = getelementptr inbounds [6 x i8], [6 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Vector"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* nonnull align 8 %13, i64 16, i1 false)
  %14 = trunc i32 %3 to i8
  %15 = and i8 %14, 31
  switch i8 %15, label %37 [
    i8 11, label %16
    i8 10, label %21
    i8 0, label %43
    i8 8, label %28
    i8 9, label %29
    i8 1, label %30
    i8 2, label %31
    i8 3, label %32
    i8 4, label %33
    i8 5, label %34
    i8 6, label %35
    i8 7, label %36
    i8 12, label %43
  ]

16:                                               ; preds = %6
  %17 = lshr i32 %3, 5
  %18 = and i32 %17, 1048575
  %19 = add nsw i32 %18, -1000000
  %20 = icmp ult i32 %19, 6
  br i1 %20, label %38, label %43

21:                                               ; preds = %6
  %22 = lshr i32 %3, 5
  %23 = and i32 %22, 1048575
  %24 = icmp eq i32 %23, 1000004
  %25 = select i1 %24, i8 103, i8 107
  %26 = icmp eq i32 %23, 1000003
  %27 = select i1 %26, i8 106, i8 %25
  br label %43

28:                                               ; preds = %6
  br label %43

29:                                               ; preds = %6
  br label %43

30:                                               ; preds = %6
  br label %43

31:                                               ; preds = %6
  br label %43

32:                                               ; preds = %6
  br label %43

33:                                               ; preds = %6
  br label %43

34:                                               ; preds = %6
  br label %43

35:                                               ; preds = %6
  br label %43

36:                                               ; preds = %6
  br label %43

37:                                               ; preds = %6
  unreachable

38:                                               ; preds = %16
  %39 = zext i32 %19 to i48
  %40 = shl nuw nsw i48 %39, 3
  %41 = lshr i48 121411954634608, %40
  %42 = trunc i48 %41 to i8
  br label %43

43:                                               ; preds = %16, %38, %6, %6, %21, %28, %29, %30, %31, %32, %33, %34, %35, %36
  %44 = phi i8 [ 121, %36 ], [ 122, %35 ], [ 123, %34 ], [ 124, %33 ], [ 125, %32 ], [ 126, %31 ], [ 127, %30 ], [ 105, %29 ], [ 104, %28 ], [ %27, %21 ], [ 64, %6 ], [ 64, %6 ], [ %42, %38 ], [ 108, %16 ]
  %45 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %46 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %48 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %47, align 8
  %49 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, %48
  %50 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %48 to i64
  br i1 %49, label %51, label %63

51:                                               ; preds = %43
  %52 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* nonnull align 8 %11, i64 16, i1 false)
  %53 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 0, i32 1, i32 0
  store i8* %1, i8** %53, align 8
  %54 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 0, i32 1, i32 1
  store i64 %2, i64* %54, align 8
  %55 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 0, i32 2
  store i8 %44, i8* %55, align 8
  %56 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 0, i32 3
  store i8 %9, i8* %56, align 1
  %57 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 0, i32 4, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %57, i8* nonnull align 2 %12, i64 6, i1 false)
  %58 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46, i64 1
  %59 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %58 to i64
  %60 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %45 to i64*
  store i64 %59, i64* %60, align 8
  %61 = bitcast %"class.std::__1::vector.29"* %10 to i64*
  %62 = load i64, i64* %61, align 8
  br label %131

63:                                               ; preds = %43
  %64 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %46 to i64
  %65 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %45 to i64*
  %66 = bitcast %"class.std::__1::vector.29"* %10 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %64, %67
  %69 = sdiv exact i64 %68, 40
  %70 = add nsw i64 %69, 1
  %71 = icmp ugt i64 %70, 53687091
  br i1 %71, label %72, label %74

72:                                               ; preds = %63
  %73 = bitcast %"class.std::__1::vector.29"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %73) #10
  unreachable

74:                                               ; preds = %63
  %75 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %47 to i64*
  %76 = sub i64 %50, %67
  %77 = sdiv exact i64 %76, 40
  %78 = icmp ult i64 %77, 26843545
  br i1 %78, label %79, label %84

79:                                               ; preds = %74
  %80 = shl nsw i64 %77, 1
  %81 = icmp ult i64 %80, %70
  %82 = select i1 %81, i64 %70, i64 %80
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %102, label %84

84:                                               ; preds = %79, %74
  %85 = phi i64 [ %82, %79 ], [ 53687091, %74 ]
  %86 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %87 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %86, align 8
  %88 = mul i64 %85, 40
  %89 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %87, i64 0, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %87, i64 0, i32 3
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %92, %90
  %94 = icmp ugt i64 %88, %93
  br i1 %94, label %95, label %97, !prof !2

95:                                               ; preds = %84
  %96 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %87, i64 %88) #9
  br label %99

97:                                               ; preds = %84
  %98 = add i64 %90, %88
  store i64 %98, i64* %89, align 8
  br label %99

99:                                               ; preds = %97, %95
  %100 = phi i64 [ %96, %95 ], [ %90, %97 ]
  %101 = inttoptr i64 %100 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*
  br label %102

102:                                              ; preds = %99, %79
  %103 = phi i64 [ %85, %99 ], [ 0, %79 ]
  %104 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* [ %101, %99 ], [ null, %79 ]
  %105 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69
  %106 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %103
  %107 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %106 to i64
  %108 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* nonnull align 8 %11, i64 16, i1 false)
  %109 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69, i32 1, i32 0
  store i8* %1, i8** %109, align 8
  %110 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69, i32 1, i32 1
  store i64 %2, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69, i32 2
  store i8 %44, i8* %111, align 8
  %112 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69, i32 3
  store i8 %9, i8* %112, align 1
  %113 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %104, i64 %69, i32 4, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %113, i8* nonnull align 2 %12, i64 6, i1 false)
  %114 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %105, i64 1
  %115 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %114 to i64
  %116 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %10, i64 0, i32 0, i32 0
  %117 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %116, align 8
  %118 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %45, align 8
  %119 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %118, %117
  br i1 %119, label %128, label %120

120:                                              ; preds = %102, %120
  %121 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* [ %123, %120 ], [ %105, %102 ]
  %122 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* [ %124, %120 ], [ %118, %102 ]
  %123 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %121, i64 -1
  %124 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %122, i64 -1
  %125 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %123 to i8*
  %126 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 40, i1 false) #9
  %127 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %124, %117
  br i1 %127, label %128, label %120

128:                                              ; preds = %120, %102
  %129 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* [ %105, %102 ], [ %123, %120 ]
  %130 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %129 to i64
  store i64 %130, i64* %66, align 8
  store i64 %115, i64* %65, align 8
  store i64 %107, i64* %75, align 8
  br label %131

131:                                              ; preds = %51, %128
  %132 = phi i64 [ %62, %51 ], [ %130, %128 ]
  %133 = phi i64 [ %59, %51 ], [ %115, %128 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %12)
  %134 = sub i64 %133, %132
  %135 = sdiv exact i64 %134, 40
  %136 = trunc i64 %135 to i32
  %137 = add i32 %136, -1
  ret i32 %137
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder17MarkStartFunctionEPNS1_19WasmFunctionBuilderE(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture, %"class.v8::internal::wasm::WasmFunctionBuilder"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 12
  store i32 %4, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder9AddExportENS0_6VectorIKcEENS1_20ImportExportKindCodeEj(%"class.v8::internal::wasm::WasmModuleBuilder"*, i8*, i64, i8 zeroext, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca [3 x i8], align 1
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0
  %8 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %8)
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %10 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %11, align 8
  %13 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, %12
  %14 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %12 to i64
  br i1 %13, label %15, label %25

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, i64 0, i32 0, i32 0
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, i64 0, i32 0, i32 1
  store i64 %2, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, i64 0, i32 1
  store i8 %3, i8* %18, align 8
  %19 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* nonnull align 1 %8, i64 3, i1 false)
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, i64 0, i32 2
  store i32 %4, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10, i64 1
  %23 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %22 to i64
  %24 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %9 to i64*
  store i64 %23, i64* %24, align 8
  br label %93

25:                                               ; preds = %5
  %26 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %10 to i64
  %27 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %9 to i64*
  %28 = bitcast %"class.std::__1::vector.36"* %7 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = sdiv exact i64 %30, 24
  %32 = add nsw i64 %31, 1
  %33 = icmp ugt i64 %32, 89478485
  br i1 %33, label %34, label %36

34:                                               ; preds = %25
  %35 = bitcast %"class.std::__1::vector.36"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #10
  unreachable

36:                                               ; preds = %25
  %37 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %11 to i64*
  %38 = sub i64 %14, %29
  %39 = sdiv exact i64 %38, 24
  %40 = icmp ult i64 %39, 44739242
  br i1 %40, label %41, label %46

41:                                               ; preds = %36
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %32
  %44 = select i1 %43, i64 %32, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %64, label %46

46:                                               ; preds = %41, %36
  %47 = phi i64 [ %44, %41 ], [ 89478485, %36 ]
  %48 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %49 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %48, align 8
  %50 = mul i64 %47, 24
  %51 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %49, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %49, i64 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %54, %52
  %56 = icmp ugt i64 %50, %55
  br i1 %56, label %57, label %59, !prof !2

57:                                               ; preds = %46
  %58 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %49, i64 %50) #9
  br label %61

59:                                               ; preds = %46
  %60 = add i64 %52, %50
  store i64 %60, i64* %51, align 8
  br label %61

61:                                               ; preds = %59, %57
  %62 = phi i64 [ %58, %57 ], [ %52, %59 ]
  %63 = inttoptr i64 %62 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*
  br label %64

64:                                               ; preds = %61, %41
  %65 = phi i64 [ %47, %61 ], [ 0, %41 ]
  %66 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %63, %61 ], [ null, %41 ]
  %67 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %66, i64 %31
  %68 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %66, i64 %65
  %69 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %68 to i64
  %70 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %67, i64 0, i32 0, i32 0
  store i8* %1, i8** %70, align 8
  %71 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %66, i64 %31, i32 0, i32 1
  store i64 %2, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %66, i64 %31, i32 1
  store i8 %3, i8* %72, align 8
  %73 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %67 to i8*
  %74 = getelementptr inbounds i8, i8* %73, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* nonnull align 1 %8, i64 3, i1 false)
  %75 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %66, i64 %31, i32 2
  store i32 %4, i32* %75, align 4
  %76 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %67, i64 1
  %77 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %7, i64 0, i32 0, i32 0
  %79 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %78, align 8
  %80 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %9, align 8
  %81 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %80, %79
  br i1 %81, label %90, label %82

82:                                               ; preds = %64, %82
  %83 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %85, %82 ], [ %67, %64 ]
  %84 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %86, %82 ], [ %80, %64 ]
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %83, i64 -1
  %86 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %84, i64 -1
  %87 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %85 to i8*
  %88 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 24, i1 false) #9
  %89 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %86, %79
  br i1 %89, label %90, label %82

90:                                               ; preds = %82, %64
  %91 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %67, %64 ], [ %85, %82 ]
  %92 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %91 to i64
  store i64 %92, i64* %28, align 8
  store i64 %77, i64* %27, align 8
  store i64 %69, i64* %37, align 8
  br label %93

93:                                               ; preds = %15, %90
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder17AddExportedGlobalENS1_9ValueTypeEbNS1_12WasmInitExprENS0_6VectorIKcEE(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32, i1 zeroext, %"class.v8::internal::wasm::WasmInitExpr"* byval(%"class.v8::internal::wasm::WasmInitExpr") align 8, i8*, i64) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", align 8
  %8 = alloca %"class.v8::internal::wasm::WasmInitExpr", align 8
  %9 = alloca { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32 }, align 8
  %10 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %3 to i8*
  %11 = bitcast { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32 }* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* nonnull align 8 %10, i64 20, i1 false)
  %12 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %3, i64 0, i32 2
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.std::__1::unique_ptr.52"* %12 to i64*
  %15 = load i64, i64* %14, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %13, align 8
  %16 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* nonnull align 8 %11, i64 24, i1 false)
  %17 = zext i1 %2 to i8
  %18 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0
  %19 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #9
  %20 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %7, i64 0, i32 0, i32 0
  store i32 %1, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %7, i64 0, i32 1
  store i8 %17, i8* %21, align 4
  %22 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %7, i64 0, i32 2
  %23 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 8 %10, i64 20, i1 false)
  %24 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %7, i64 0, i32 2, i32 2
  %25 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %8, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %25, align 8
  %26 = bitcast %"class.std::__1::unique_ptr.52"* %24 to i64*
  store i64 %15, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %28 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 2, i32 0, i32 0
  %30 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %29, align 8
  %31 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %28, %30
  br i1 %31, label %32, label %43

32:                                               ; preds = %6
  %33 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* nonnull align 8 %19, i64 5, i1 false) #9
  %34 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %28, i64 0, i32 2
  %35 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %23, i64 20, i1 false) #9
  %36 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %28, i64 0, i32 2, i32 2
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %24, i64 0, i32 0, i32 0, i32 0
  %38 = load i64, i64* %26, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %37, align 8
  %39 = bitcast %"class.std::__1::unique_ptr.52"* %36 to i64*
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %28, i64 1
  %41 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %40 to i64
  %42 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %27 to i64*
  store i64 %41, i64* %42, align 8
  br label %45

43:                                               ; preds = %6
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder10WasmGlobalENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.84"* %18, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* nonnull dereferenceable(40) %7) #9
  %44 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %27 to i64*
  br label %45

45:                                               ; preds = %32, %43
  %46 = phi i64* [ %42, %32 ], [ %44, %43 ]
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %22) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #9
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.84"* %18 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = sdiv exact i64 %50, 40
  %52 = trunc i64 %51 to i32
  %53 = add i32 %52, -1
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16)
  call void @_ZN2v88internal4wasm17WasmModuleBuilder9AddExportENS0_6VectorIKcEENS1_20ImportExportKindCodeEj(%"class.v8::internal::wasm::WasmModuleBuilder"* %0, i8* %4, i64 %5, i8 zeroext 3, i32 %53)
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* nonnull %3) #9
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm17WasmModuleBuilder9AddGlobalENS1_9ValueTypeEbNS1_12WasmInitExprE(%"class.v8::internal::wasm::WasmModuleBuilder"*, i32, i1 zeroext, %"class.v8::internal::wasm::WasmInitExpr"* byval(%"class.v8::internal::wasm::WasmInitExpr") align 8) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", align 8
  %6 = zext i1 %2 to i8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0
  %8 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %5, i64 0, i32 0, i32 0
  store i32 %1, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %5, i64 0, i32 1
  store i8 %6, i8* %10, align 4
  %11 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %5, i64 0, i32 2
  %12 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %11 to i8*
  %13 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* nonnull align 8 %13, i64 20, i1 false) #9
  %14 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %5, i64 0, i32 2, i32 2
  %15 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %3, i64 0, i32 2
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.std::__1::unique_ptr.52"* %15 to i64*
  %18 = load i64, i64* %17, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %16, align 8
  %19 = bitcast %"class.std::__1::unique_ptr.52"* %14 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %21 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %22, align 8
  %24 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %21, %23
  br i1 %24, label %25, label %36

25:                                               ; preds = %4
  %26 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* nonnull align 8 %8, i64 5, i1 false) #9
  %27 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %21, i64 0, i32 2
  %28 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %12, i64 20, i1 false) #9
  %29 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %21, i64 0, i32 2, i32 2
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %14, i64 0, i32 0, i32 0, i32 0
  %31 = load i64, i64* %19, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %30, align 8
  %32 = bitcast %"class.std::__1::unique_ptr.52"* %29 to i64*
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %21, i64 1
  %34 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %33 to i64
  %35 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %20 to i64*
  store i64 %34, i64* %35, align 8
  br label %38

36:                                               ; preds = %4
  call void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder10WasmGlobalENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.84"* %7, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* nonnull dereferenceable(40) %5) #9
  %37 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %20 to i64*
  br label %38

38:                                               ; preds = %25, %36
  %39 = phi i64* [ %35, %25 ], [ %37, %36 ]
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %11) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #9
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.84"* %7 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = sdiv exact i64 %43, 40
  %45 = trunc i64 %44 to i32
  %46 = add i32 %45, -1
  call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* nonnull %3) #9
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder22ExportImportedFunctionENS0_6VectorIKcEEi(%"class.v8::internal::wasm::WasmModuleBuilder"*, i8*, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca [3 x i8], align 1
  %6 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0
  %7 = getelementptr inbounds [3 x i8], [3 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.22"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 40
  %16 = trunc i64 %15 to i32
  %17 = sub nsw i32 %3, %16
  %18 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %19 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %20, align 8
  %22 = icmp ult %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, %21
  %23 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %21 to i64
  br i1 %22, label %24, label %34

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, i64 0, i32 0, i32 0
  store i8* %1, i8** %25, align 8
  %26 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, i64 0, i32 0, i32 1
  store i64 %2, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, i64 0, i32 1
  store i8 0, i8* %27, align 8
  %28 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19 to i8*
  %29 = getelementptr inbounds i8, i8* %28, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* nonnull align 1 %7, i64 3, i1 false)
  %30 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, i64 0, i32 2
  store i32 %17, i32* %30, align 4
  %31 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19, i64 1
  %32 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %31 to i64
  %33 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %18 to i64*
  store i64 %32, i64* %33, align 8
  br label %102

34:                                               ; preds = %4
  %35 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %19 to i64
  %36 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %18 to i64*
  %37 = bitcast %"class.std::__1::vector.36"* %6 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %35, %38
  %40 = sdiv exact i64 %39, 24
  %41 = add nsw i64 %40, 1
  %42 = icmp ugt i64 %41, 89478485
  br i1 %42, label %43, label %45

43:                                               ; preds = %34
  %44 = bitcast %"class.std::__1::vector.36"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %44) #10
  unreachable

45:                                               ; preds = %34
  %46 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %20 to i64*
  %47 = sub i64 %23, %38
  %48 = sdiv exact i64 %47, 24
  %49 = icmp ult i64 %48, 44739242
  br i1 %49, label %50, label %55

50:                                               ; preds = %45
  %51 = shl nsw i64 %48, 1
  %52 = icmp ult i64 %51, %41
  %53 = select i1 %52, i64 %41, i64 %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %73, label %55

55:                                               ; preds = %50, %45
  %56 = phi i64 [ %53, %50 ], [ 89478485, %45 ]
  %57 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %59 = mul i64 %56, 24
  %60 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %63, %61
  %65 = icmp ugt i64 %59, %64
  br i1 %65, label %66, label %68, !prof !2

66:                                               ; preds = %55
  %67 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 %59) #9
  br label %70

68:                                               ; preds = %55
  %69 = add i64 %61, %59
  store i64 %69, i64* %60, align 8
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi i64 [ %67, %66 ], [ %61, %68 ]
  %72 = inttoptr i64 %71 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*
  br label %73

73:                                               ; preds = %70, %50
  %74 = phi i64 [ %56, %70 ], [ 0, %50 ]
  %75 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %72, %70 ], [ null, %50 ]
  %76 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %75, i64 %40
  %77 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %75, i64 %74
  %78 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %77 to i64
  %79 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %76, i64 0, i32 0, i32 0
  store i8* %1, i8** %79, align 8
  %80 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %75, i64 %40, i32 0, i32 1
  store i64 %2, i64* %80, align 8
  %81 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %75, i64 %40, i32 1
  store i8 0, i8* %81, align 8
  %82 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %76 to i8*
  %83 = getelementptr inbounds i8, i8* %82, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* nonnull align 1 %7, i64 3, i1 false)
  %84 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %75, i64 %40, i32 2
  store i32 %17, i32* %84, align 4
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %76, i64 1
  %86 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %85 to i64
  %87 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %6, i64 0, i32 0, i32 0
  %88 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %87, align 8
  %89 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %18, align 8
  %90 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %89, %88
  br i1 %90, label %99, label %91

91:                                               ; preds = %73, %91
  %92 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %94, %91 ], [ %76, %73 ]
  %93 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %95, %91 ], [ %89, %73 ]
  %94 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %92, i64 -1
  %95 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %93, i64 -1
  %96 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %94 to i8*
  %97 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 24, i1 false) #9
  %98 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %95, %88
  br i1 %98, label %99, label %91

99:                                               ; preds = %91, %73
  %100 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %76, %73 ], [ %94, %91 ]
  %101 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %100 to i64
  store i64 %101, i64* %37, align 8
  store i64 %86, i64* %36, align 8
  store i64 %78, i64* %46, align 8
  br label %102

102:                                              ; preds = %24, %99
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder16SetMinMemorySizeEj(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 14
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder16SetMaxMemorySizeEj(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 16
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 15
  store i32 %1, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal4wasm17WasmModuleBuilder18SetHasSharedMemoryEv(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 17
  store i8 1, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm17WasmModuleBuilder7WriteToEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture readonly, %"class.v8::internal::wasm::ZoneBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::wasm::ValueType", align 4
  %4 = alloca %"class.v8::internal::wasm::ValueType", align 4
  %5 = alloca %"class.v8::internal::wasm::ValueType", align 4
  %6 = alloca %"class.v8::internal::wasm::ValueType", align 4
  %7 = alloca %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", align 8
  %8 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 4
  %11 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ugt i8* %10, %12
  br i1 %13, label %14, label %49

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = ptrtoint i8* %12 to i64
  %19 = sub i64 %18, %17
  %20 = shl nsw i64 %19, 1
  %21 = add i64 %20, 4
  %22 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %24 = add i64 %20, 11
  %25 = and i64 %24, -8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ugt i64 %25, %30
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %14
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %23, i64 %25) #9
  br label %36

34:                                               ; preds = %14
  %35 = add i64 %25, %27
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to i8*
  %39 = load i8*, i8** %15, align 8
  %40 = bitcast i8** %8 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = ptrtoint i8* %39 to i64
  %43 = sub i64 %41, %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %39, i64 %43, i1 false) #9
  %44 = load i64, i64* %40, align 8
  %45 = load i64, i64* %16, align 8
  %46 = sub i64 %44, %45
  %47 = getelementptr inbounds i8, i8* %38, i64 %46
  store i8* %47, i8** %8, align 8
  store i8* %38, i8** %15, align 8
  %48 = getelementptr inbounds i8, i8* %38, i64 %21
  store i8* %48, i8** %11, align 8
  br label %49

49:                                               ; preds = %2, %36
  %50 = phi i8* [ %9, %2 ], [ %47, %36 ]
  %51 = bitcast i8* %50 to i32*
  store i32 1836278016, i32* %51, align 1
  %52 = load i8*, i8** %8, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 4
  store i8* %53, i8** %8, align 8
  %54 = getelementptr inbounds i8, i8* %52, i64 8
  %55 = load i8*, i8** %11, align 8
  %56 = icmp ugt i8* %54, %55
  br i1 %56, label %57, label %92

57:                                               ; preds = %49
  %58 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = ptrtoint i8* %55 to i64
  %62 = sub i64 %61, %60
  %63 = shl nsw i64 %62, 1
  %64 = add i64 %63, 4
  %65 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %66 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %65, align 8
  %67 = add i64 %63, 11
  %68 = and i64 %67, -8
  %69 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %66, i64 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %66, i64 0, i32 3
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %72, %70
  %74 = icmp ugt i64 %68, %73
  br i1 %74, label %75, label %77, !prof !2

75:                                               ; preds = %57
  %76 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %66, i64 %68) #9
  br label %79

77:                                               ; preds = %57
  %78 = add i64 %68, %70
  store i64 %78, i64* %69, align 8
  br label %79

79:                                               ; preds = %77, %75
  %80 = phi i64 [ %76, %75 ], [ %70, %77 ]
  %81 = inttoptr i64 %80 to i8*
  %82 = load i8*, i8** %58, align 8
  %83 = bitcast i8** %8 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = ptrtoint i8* %82 to i64
  %86 = sub i64 %84, %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %82, i64 %86, i1 false) #9
  %87 = load i64, i64* %83, align 8
  %88 = load i64, i64* %59, align 8
  %89 = sub i64 %87, %88
  %90 = getelementptr inbounds i8, i8* %81, i64 %89
  store i8* %90, i8** %8, align 8
  store i8* %81, i8** %58, align 8
  %91 = getelementptr inbounds i8, i8* %81, i64 %64
  store i8* %91, i8** %11, align 8
  br label %92

92:                                               ; preds = %49, %79
  %93 = phi i8* [ %53, %49 ], [ %90, %79 ]
  %94 = bitcast i8* %93 to i32*
  store i32 1, i32* %94, align 1
  %95 = load i8*, i8** %8, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  store i8* %96, i8** %8, align 8
  %97 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0
  %98 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %99 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %100, %102
  br i1 %103, label %724, label %104

104:                                              ; preds = %92
  %105 = getelementptr inbounds i8, i8* %95, i64 5
  %106 = load i8*, i8** %11, align 8
  %107 = icmp ugt i8* %105, %106
  br i1 %107, label %110, label %108

108:                                              ; preds = %104
  %109 = bitcast i8** %8 to i64*
  br label %145

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %112 = bitcast i8** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = ptrtoint i8* %106 to i64
  %115 = sub i64 %114, %113
  %116 = shl nsw i64 %115, 1
  %117 = or i64 %116, 1
  %118 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %119 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %118, align 8
  %120 = add i64 %117, 7
  %121 = and i64 %120, -8
  %122 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %119, i64 0, i32 2
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %119, i64 0, i32 3
  %125 = load i64, i64* %124, align 8
  %126 = sub i64 %125, %123
  %127 = icmp ugt i64 %121, %126
  br i1 %127, label %128, label %130, !prof !2

128:                                              ; preds = %110
  %129 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %119, i64 %121) #9
  br label %132

130:                                              ; preds = %110
  %131 = add i64 %121, %123
  store i64 %131, i64* %122, align 8
  br label %132

132:                                              ; preds = %130, %128
  %133 = phi i64 [ %129, %128 ], [ %123, %130 ]
  %134 = inttoptr i64 %133 to i8*
  %135 = load i8*, i8** %111, align 8
  %136 = bitcast i8** %8 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = ptrtoint i8* %135 to i64
  %139 = sub i64 %137, %138
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* align 1 %135, i64 %139, i1 false) #9
  %140 = load i64, i64* %136, align 8
  %141 = load i64, i64* %112, align 8
  %142 = sub i64 %140, %141
  %143 = getelementptr inbounds i8, i8* %134, i64 %142
  store i8* %143, i8** %8, align 8
  store i8* %134, i8** %111, align 8
  %144 = getelementptr inbounds i8, i8* %134, i64 %117
  store i8* %144, i8** %11, align 8
  br label %145

145:                                              ; preds = %108, %132
  %146 = phi i64* [ %109, %108 ], [ %136, %132 ]
  %147 = phi i8* [ %96, %108 ], [ %143, %132 ]
  %148 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %148, i8** %8, align 8
  store i8 1, i8* %147, align 1
  %149 = load i64, i64* %146, align 8
  %150 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %151 = bitcast i8** %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = sub i64 %149, %152
  %154 = inttoptr i64 %149 to i8*
  %155 = getelementptr inbounds i8, i8* %154, i64 5
  %156 = load i8*, i8** %11, align 8
  %157 = icmp ugt i8* %155, %156
  br i1 %157, label %158, label %189

158:                                              ; preds = %145
  %159 = ptrtoint i8* %156 to i64
  %160 = sub i64 %159, %152
  %161 = shl nsw i64 %160, 1
  %162 = add i64 %161, 5
  %163 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %164 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %163, align 8
  %165 = add i64 %161, 12
  %166 = and i64 %165, -8
  %167 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %164, i64 0, i32 2
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %164, i64 0, i32 3
  %170 = load i64, i64* %169, align 8
  %171 = sub i64 %170, %168
  %172 = icmp ugt i64 %166, %171
  br i1 %172, label %173, label %175, !prof !2

173:                                              ; preds = %158
  %174 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %164, i64 %166) #9
  br label %177

175:                                              ; preds = %158
  %176 = add i64 %168, %166
  store i64 %176, i64* %167, align 8
  br label %177

177:                                              ; preds = %175, %173
  %178 = phi i64 [ %174, %173 ], [ %168, %175 ]
  %179 = inttoptr i64 %178 to i8*
  %180 = load i8*, i8** %150, align 8
  %181 = load i64, i64* %146, align 8
  %182 = ptrtoint i8* %180 to i64
  %183 = sub i64 %181, %182
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %180, i64 %183, i1 false) #9
  %184 = load i64, i64* %146, align 8
  %185 = load i64, i64* %151, align 8
  %186 = sub i64 %184, %185
  %187 = getelementptr inbounds i8, i8* %179, i64 %186
  store i8* %187, i8** %8, align 8
  store i8* %179, i8** %150, align 8
  %188 = getelementptr inbounds i8, i8* %179, i64 %162
  store i8* %188, i8** %11, align 8
  br label %189

189:                                              ; preds = %145, %177
  %190 = phi i64 [ %152, %145 ], [ %178, %177 ]
  %191 = phi i8* [ %156, %145 ], [ %188, %177 ]
  %192 = phi i8* [ %154, %145 ], [ %187, %177 ]
  %193 = getelementptr inbounds i8, i8* %192, i64 5
  store i8* %193, i8** %8, align 8
  %194 = load i64, i64* %99, align 8
  %195 = load i64, i64* %101, align 8
  %196 = sub i64 %194, %195
  %197 = ashr exact i64 %196, 4
  %198 = getelementptr inbounds i8, i8* %192, i64 10
  %199 = icmp ugt i8* %198, %191
  br i1 %199, label %200, label %231

200:                                              ; preds = %189
  %201 = ptrtoint i8* %191 to i64
  %202 = sub i64 %201, %190
  %203 = shl nsw i64 %202, 1
  %204 = add i64 %203, 5
  %205 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %206 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %205, align 8
  %207 = add i64 %203, 12
  %208 = and i64 %207, -8
  %209 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %206, i64 0, i32 2
  %210 = load i64, i64* %209, align 8
  %211 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %206, i64 0, i32 3
  %212 = load i64, i64* %211, align 8
  %213 = sub i64 %212, %210
  %214 = icmp ugt i64 %208, %213
  br i1 %214, label %215, label %217, !prof !2

215:                                              ; preds = %200
  %216 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %206, i64 %208) #9
  br label %219

217:                                              ; preds = %200
  %218 = add i64 %208, %210
  store i64 %218, i64* %209, align 8
  br label %219

219:                                              ; preds = %217, %215
  %220 = phi i64 [ %216, %215 ], [ %210, %217 ]
  %221 = inttoptr i64 %220 to i8*
  %222 = load i8*, i8** %150, align 8
  %223 = load i64, i64* %146, align 8
  %224 = ptrtoint i8* %222 to i64
  %225 = sub i64 %223, %224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %221, i8* align 1 %222, i64 %225, i1 false) #9
  %226 = load i64, i64* %146, align 8
  %227 = load i64, i64* %151, align 8
  %228 = sub i64 %226, %227
  %229 = getelementptr inbounds i8, i8* %221, i64 %228
  store i8* %229, i8** %8, align 8
  store i8* %221, i8** %150, align 8
  %230 = getelementptr inbounds i8, i8* %221, i64 %204
  store i8* %230, i8** %11, align 8
  br label %231

231:                                              ; preds = %219, %189
  %232 = phi i8* [ %193, %189 ], [ %229, %219 ]
  %233 = trunc i64 %197 to i32
  %234 = icmp ugt i32 %233, 127
  %235 = trunc i64 %197 to i8
  br i1 %234, label %236, label %248

236:                                              ; preds = %231, %236
  %237 = phi i8* [ %245, %236 ], [ %232, %231 ]
  %238 = phi i8 [ %244, %236 ], [ %235, %231 ]
  %239 = phi i32 [ %242, %236 ], [ %233, %231 ]
  %240 = or i8 %238, -128
  %241 = getelementptr inbounds i8, i8* %237, i64 1
  store i8* %241, i8** %8, align 8
  store i8 %240, i8* %237, align 1
  %242 = lshr i32 %239, 7
  %243 = icmp ugt i32 %239, 16383
  %244 = trunc i32 %242 to i8
  %245 = load i8*, i8** %8, align 8
  br i1 %243, label %236, label %246

246:                                              ; preds = %236
  %247 = trunc i32 %242 to i8
  br label %248

248:                                              ; preds = %246, %231
  %249 = phi i8* [ %232, %231 ], [ %245, %246 ]
  %250 = phi i8 [ %235, %231 ], [ %247, %246 ]
  %251 = and i8 %250, 127
  %252 = getelementptr inbounds i8, i8* %249, i64 1
  store i8* %252, i8** %8, align 8
  store i8 %251, i8* %249, align 1
  %253 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %97, i64 0, i32 0, i32 0
  %254 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %253, align 8
  %255 = load %"struct.v8::internal::wasm::WasmModuleBuilder::Type"*, %"struct.v8::internal::wasm::WasmModuleBuilder::Type"** %98, align 8
  %256 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %254, %255
  br i1 %256, label %267, label %257

257:                                              ; preds = %248
  %258 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %259 = bitcast %"class.v8::internal::wasm::ValueType"* %6 to i8*
  %260 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %6, i64 0, i32 0
  %261 = bitcast %"class.v8::internal::wasm::ValueType"* %5 to i8*
  %262 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %5, i64 0, i32 0
  %263 = bitcast %"class.v8::internal::wasm::ValueType"* %3 to i8*
  %264 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %3, i64 0, i32 0
  %265 = bitcast %"class.v8::internal::wasm::ValueType"* %4 to i8*
  %266 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %4, i64 0, i32 0
  br label %293

267:                                              ; preds = %721, %248
  %268 = load i64, i64* %146, align 8
  %269 = load i64, i64* %151, align 8
  %270 = sub i64 %268, %153
  %271 = sub i64 %270, %269
  %272 = trunc i64 %271 to i32
  %273 = add i32 %272, -5
  %274 = inttoptr i64 %269 to i8*
  %275 = getelementptr inbounds i8, i8* %274, i64 %153
  %276 = trunc i32 %273 to i8
  %277 = lshr i32 %273, 7
  %278 = or i8 %276, -128
  %279 = getelementptr inbounds i8, i8* %275, i64 1
  store i8 %278, i8* %275, align 1
  %280 = trunc i32 %277 to i8
  %281 = lshr i32 %273, 14
  %282 = or i8 %280, -128
  %283 = getelementptr inbounds i8, i8* %279, i64 1
  store i8 %282, i8* %279, align 1
  %284 = trunc i32 %281 to i8
  %285 = lshr i32 %273, 21
  %286 = or i8 %284, -128
  %287 = getelementptr inbounds i8, i8* %283, i64 1
  store i8 %286, i8* %283, align 1
  %288 = trunc i32 %285 to i8
  %289 = lshr i32 %273, 28
  %290 = or i8 %288, -128
  %291 = getelementptr inbounds i8, i8* %287, i64 1
  store i8 %290, i8* %287, align 1
  %292 = trunc i32 %289 to i8
  store i8 %292, i8* %291, align 1
  br label %724

293:                                              ; preds = %257, %721
  %294 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* [ %254, %257 ], [ %722, %721 ]
  %295 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %294, i64 0, i32 0
  %296 = load i32, i32* %295, align 8
  switch i32 %296, label %721 [
    i32 0, label %297
    i32 1, label %482
    i32 2, label %637
  ]

297:                                              ; preds = %293
  %298 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %294, i64 0, i32 1, i32 0
  %299 = load %"class.v8::internal::Signature"*, %"class.v8::internal::Signature"** %298, align 8
  %300 = load i8*, i8** %8, align 8
  %301 = getelementptr inbounds i8, i8* %300, i64 1
  %302 = load i8*, i8** %11, align 8
  %303 = icmp ugt i8* %301, %302
  br i1 %303, label %304, label %335

304:                                              ; preds = %297
  %305 = load i64, i64* %151, align 8
  %306 = ptrtoint i8* %302 to i64
  %307 = sub i64 %306, %305
  %308 = shl nsw i64 %307, 1
  %309 = or i64 %308, 1
  %310 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %311 = add i64 %309, 7
  %312 = and i64 %311, -8
  %313 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %310, i64 0, i32 2
  %314 = load i64, i64* %313, align 8
  %315 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %310, i64 0, i32 3
  %316 = load i64, i64* %315, align 8
  %317 = sub i64 %316, %314
  %318 = icmp ugt i64 %312, %317
  br i1 %318, label %319, label %321, !prof !2

319:                                              ; preds = %304
  %320 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %310, i64 %312) #9
  br label %323

321:                                              ; preds = %304
  %322 = add i64 %312, %314
  store i64 %322, i64* %313, align 8
  br label %323

323:                                              ; preds = %321, %319
  %324 = phi i64 [ %320, %319 ], [ %314, %321 ]
  %325 = inttoptr i64 %324 to i8*
  %326 = load i8*, i8** %150, align 8
  %327 = load i64, i64* %146, align 8
  %328 = ptrtoint i8* %326 to i64
  %329 = sub i64 %327, %328
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %325, i8* align 1 %326, i64 %329, i1 false) #9
  %330 = load i64, i64* %146, align 8
  %331 = load i64, i64* %151, align 8
  %332 = sub i64 %330, %331
  %333 = getelementptr inbounds i8, i8* %325, i64 %332
  store i8* %333, i8** %8, align 8
  store i8* %325, i8** %150, align 8
  %334 = getelementptr inbounds i8, i8* %325, i64 %309
  store i8* %334, i8** %11, align 8
  br label %335

335:                                              ; preds = %297, %323
  %336 = phi i8* [ %300, %297 ], [ %333, %323 ]
  %337 = getelementptr inbounds i8, i8* %336, i64 1
  store i8* %337, i8** %8, align 8
  store i8 96, i8* %336, align 1
  %338 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %299, i64 0, i32 1
  %339 = load i64, i64* %338, align 8
  %340 = load i8*, i8** %8, align 8
  %341 = getelementptr inbounds i8, i8* %340, i64 5
  %342 = load i8*, i8** %11, align 8
  %343 = icmp ugt i8* %341, %342
  br i1 %343, label %344, label %375

344:                                              ; preds = %335
  %345 = load i64, i64* %151, align 8
  %346 = ptrtoint i8* %342 to i64
  %347 = sub i64 %346, %345
  %348 = shl nsw i64 %347, 1
  %349 = add i64 %348, 5
  %350 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %351 = add i64 %348, 12
  %352 = and i64 %351, -8
  %353 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %350, i64 0, i32 2
  %354 = load i64, i64* %353, align 8
  %355 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %350, i64 0, i32 3
  %356 = load i64, i64* %355, align 8
  %357 = sub i64 %356, %354
  %358 = icmp ugt i64 %352, %357
  br i1 %358, label %359, label %361, !prof !2

359:                                              ; preds = %344
  %360 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %350, i64 %352) #9
  br label %363

361:                                              ; preds = %344
  %362 = add i64 %352, %354
  store i64 %362, i64* %353, align 8
  br label %363

363:                                              ; preds = %361, %359
  %364 = phi i64 [ %360, %359 ], [ %354, %361 ]
  %365 = inttoptr i64 %364 to i8*
  %366 = load i8*, i8** %150, align 8
  %367 = load i64, i64* %146, align 8
  %368 = ptrtoint i8* %366 to i64
  %369 = sub i64 %367, %368
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %365, i8* align 1 %366, i64 %369, i1 false) #9
  %370 = load i64, i64* %146, align 8
  %371 = load i64, i64* %151, align 8
  %372 = sub i64 %370, %371
  %373 = getelementptr inbounds i8, i8* %365, i64 %372
  store i8* %373, i8** %8, align 8
  store i8* %365, i8** %150, align 8
  %374 = getelementptr inbounds i8, i8* %365, i64 %349
  store i8* %374, i8** %11, align 8
  br label %375

375:                                              ; preds = %363, %335
  %376 = phi i8* [ %340, %335 ], [ %373, %363 ]
  %377 = trunc i64 %339 to i32
  %378 = icmp ugt i32 %377, 127
  %379 = trunc i64 %339 to i8
  br i1 %378, label %380, label %392

380:                                              ; preds = %375, %380
  %381 = phi i8* [ %389, %380 ], [ %376, %375 ]
  %382 = phi i8 [ %388, %380 ], [ %379, %375 ]
  %383 = phi i32 [ %386, %380 ], [ %377, %375 ]
  %384 = or i8 %382, -128
  %385 = getelementptr inbounds i8, i8* %381, i64 1
  store i8* %385, i8** %8, align 8
  store i8 %384, i8* %381, align 1
  %386 = lshr i32 %383, 7
  %387 = icmp ugt i32 %383, 16383
  %388 = trunc i32 %386 to i8
  %389 = load i8*, i8** %8, align 8
  br i1 %387, label %380, label %390

390:                                              ; preds = %380
  %391 = trunc i32 %386 to i8
  br label %392

392:                                              ; preds = %390, %375
  %393 = phi i8* [ %376, %375 ], [ %389, %390 ]
  %394 = phi i8 [ %379, %375 ], [ %391, %390 ]
  %395 = and i8 %394, 127
  %396 = getelementptr inbounds i8, i8* %393, i64 1
  store i8* %396, i8** %8, align 8
  store i8 %395, i8* %393, align 1
  %397 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %299, i64 0, i32 2
  %398 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %397, align 8
  %399 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %299, i64 0, i32 0
  %400 = load i64, i64* %399, align 8
  %401 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %398, i64 %400
  %402 = load i64, i64* %338, align 8
  %403 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %401, i64 %402
  %404 = icmp eq i64 %402, 0
  br i1 %404, label %407, label %470

405:                                              ; preds = %470
  %406 = load i64, i64* %399, align 8
  br label %407

407:                                              ; preds = %405, %392
  %408 = phi i64 [ %406, %405 ], [ %400, %392 ]
  %409 = load i8*, i8** %8, align 8
  %410 = getelementptr inbounds i8, i8* %409, i64 5
  %411 = load i8*, i8** %11, align 8
  %412 = icmp ugt i8* %410, %411
  br i1 %412, label %413, label %444

413:                                              ; preds = %407
  %414 = load i64, i64* %151, align 8
  %415 = ptrtoint i8* %411 to i64
  %416 = sub i64 %415, %414
  %417 = shl nsw i64 %416, 1
  %418 = add i64 %417, 5
  %419 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %420 = add i64 %417, 12
  %421 = and i64 %420, -8
  %422 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %419, i64 0, i32 2
  %423 = load i64, i64* %422, align 8
  %424 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %419, i64 0, i32 3
  %425 = load i64, i64* %424, align 8
  %426 = sub i64 %425, %423
  %427 = icmp ugt i64 %421, %426
  br i1 %427, label %428, label %430, !prof !2

428:                                              ; preds = %413
  %429 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %419, i64 %421) #9
  br label %432

430:                                              ; preds = %413
  %431 = add i64 %421, %423
  store i64 %431, i64* %422, align 8
  br label %432

432:                                              ; preds = %430, %428
  %433 = phi i64 [ %429, %428 ], [ %423, %430 ]
  %434 = inttoptr i64 %433 to i8*
  %435 = load i8*, i8** %150, align 8
  %436 = load i64, i64* %146, align 8
  %437 = ptrtoint i8* %435 to i64
  %438 = sub i64 %436, %437
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %434, i8* align 1 %435, i64 %438, i1 false) #9
  %439 = load i64, i64* %146, align 8
  %440 = load i64, i64* %151, align 8
  %441 = sub i64 %439, %440
  %442 = getelementptr inbounds i8, i8* %434, i64 %441
  store i8* %442, i8** %8, align 8
  store i8* %434, i8** %150, align 8
  %443 = getelementptr inbounds i8, i8* %434, i64 %418
  store i8* %443, i8** %11, align 8
  br label %444

444:                                              ; preds = %432, %407
  %445 = phi i8* [ %409, %407 ], [ %442, %432 ]
  %446 = trunc i64 %408 to i32
  %447 = icmp ugt i32 %446, 127
  %448 = trunc i64 %408 to i8
  br i1 %447, label %449, label %461

449:                                              ; preds = %444, %449
  %450 = phi i8* [ %458, %449 ], [ %445, %444 ]
  %451 = phi i8 [ %457, %449 ], [ %448, %444 ]
  %452 = phi i32 [ %455, %449 ], [ %446, %444 ]
  %453 = or i8 %451, -128
  %454 = getelementptr inbounds i8, i8* %450, i64 1
  store i8* %454, i8** %8, align 8
  store i8 %453, i8* %450, align 1
  %455 = lshr i32 %452, 7
  %456 = icmp ugt i32 %452, 16383
  %457 = trunc i32 %455 to i8
  %458 = load i8*, i8** %8, align 8
  br i1 %456, label %449, label %459

459:                                              ; preds = %449
  %460 = trunc i32 %455 to i8
  br label %461

461:                                              ; preds = %459, %444
  %462 = phi i8* [ %445, %444 ], [ %458, %459 ]
  %463 = phi i8 [ %448, %444 ], [ %460, %459 ]
  %464 = and i8 %463, 127
  %465 = getelementptr inbounds i8, i8* %462, i64 1
  store i8* %465, i8** %8, align 8
  store i8 %464, i8* %462, align 1
  %466 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %397, align 8
  %467 = load i64, i64* %399, align 8
  %468 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %466, i64 %467
  %469 = icmp eq i64 %467, 0
  br i1 %469, label %721, label %476

470:                                              ; preds = %392, %470
  %471 = phi %"class.v8::internal::wasm::ValueType"* [ %474, %470 ], [ %401, %392 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %263) #9
  %472 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %471, i64 0, i32 0
  %473 = load i32, i32* %472, align 4
  store i32 %473, i32* %264, align 4
  call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* nonnull dereferenceable(4) %3)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %263) #9
  %474 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %471, i64 1
  %475 = icmp eq %"class.v8::internal::wasm::ValueType"* %474, %403
  br i1 %475, label %405, label %470

476:                                              ; preds = %461, %476
  %477 = phi %"class.v8::internal::wasm::ValueType"* [ %480, %476 ], [ %466, %461 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %265) #9
  %478 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %477, i64 0, i32 0
  %479 = load i32, i32* %478, align 4
  store i32 %479, i32* %266, align 4
  call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* nonnull dereferenceable(4) %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %265) #9
  %480 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %477, i64 1
  %481 = icmp eq %"class.v8::internal::wasm::ValueType"* %480, %468
  br i1 %481, label %721, label %476

482:                                              ; preds = %293
  %483 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %294, i64 0, i32 1
  %484 = bitcast %union.anon* %483 to %"class.v8::internal::wasm::StructType"**
  %485 = load %"class.v8::internal::wasm::StructType"*, %"class.v8::internal::wasm::StructType"** %484, align 8
  %486 = load i8*, i8** %8, align 8
  %487 = getelementptr inbounds i8, i8* %486, i64 1
  %488 = load i8*, i8** %11, align 8
  %489 = icmp ugt i8* %487, %488
  br i1 %489, label %490, label %521

490:                                              ; preds = %482
  %491 = load i64, i64* %151, align 8
  %492 = ptrtoint i8* %488 to i64
  %493 = sub i64 %492, %491
  %494 = shl nsw i64 %493, 1
  %495 = or i64 %494, 1
  %496 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %497 = add i64 %495, 7
  %498 = and i64 %497, -8
  %499 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %496, i64 0, i32 2
  %500 = load i64, i64* %499, align 8
  %501 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %496, i64 0, i32 3
  %502 = load i64, i64* %501, align 8
  %503 = sub i64 %502, %500
  %504 = icmp ugt i64 %498, %503
  br i1 %504, label %505, label %507, !prof !2

505:                                              ; preds = %490
  %506 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %496, i64 %498) #9
  br label %509

507:                                              ; preds = %490
  %508 = add i64 %498, %500
  store i64 %508, i64* %499, align 8
  br label %509

509:                                              ; preds = %507, %505
  %510 = phi i64 [ %506, %505 ], [ %500, %507 ]
  %511 = inttoptr i64 %510 to i8*
  %512 = load i8*, i8** %150, align 8
  %513 = load i64, i64* %146, align 8
  %514 = ptrtoint i8* %512 to i64
  %515 = sub i64 %513, %514
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %511, i8* align 1 %512, i64 %515, i1 false) #9
  %516 = load i64, i64* %146, align 8
  %517 = load i64, i64* %151, align 8
  %518 = sub i64 %516, %517
  %519 = getelementptr inbounds i8, i8* %511, i64 %518
  store i8* %519, i8** %8, align 8
  store i8* %511, i8** %150, align 8
  %520 = getelementptr inbounds i8, i8* %511, i64 %495
  store i8* %520, i8** %11, align 8
  br label %521

521:                                              ; preds = %482, %509
  %522 = phi i8* [ %486, %482 ], [ %519, %509 ]
  %523 = getelementptr inbounds i8, i8* %522, i64 1
  store i8* %523, i8** %8, align 8
  store i8 95, i8* %522, align 1
  %524 = getelementptr inbounds %"class.v8::internal::wasm::StructType", %"class.v8::internal::wasm::StructType"* %485, i64 0, i32 0
  %525 = load i32, i32* %524, align 8
  %526 = trunc i32 %525 to i8
  %527 = load i8*, i8** %8, align 8
  %528 = getelementptr inbounds i8, i8* %527, i64 5
  %529 = load i8*, i8** %11, align 8
  %530 = icmp ugt i8* %528, %529
  br i1 %530, label %531, label %562

531:                                              ; preds = %521
  %532 = load i64, i64* %151, align 8
  %533 = ptrtoint i8* %529 to i64
  %534 = sub i64 %533, %532
  %535 = shl nsw i64 %534, 1
  %536 = add i64 %535, 5
  %537 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %538 = add i64 %535, 12
  %539 = and i64 %538, -8
  %540 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %537, i64 0, i32 2
  %541 = load i64, i64* %540, align 8
  %542 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %537, i64 0, i32 3
  %543 = load i64, i64* %542, align 8
  %544 = sub i64 %543, %541
  %545 = icmp ugt i64 %539, %544
  br i1 %545, label %546, label %548, !prof !2

546:                                              ; preds = %531
  %547 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %537, i64 %539) #9
  br label %550

548:                                              ; preds = %531
  %549 = add i64 %539, %541
  store i64 %549, i64* %540, align 8
  br label %550

550:                                              ; preds = %548, %546
  %551 = phi i64 [ %547, %546 ], [ %541, %548 ]
  %552 = inttoptr i64 %551 to i8*
  %553 = load i8*, i8** %150, align 8
  %554 = load i64, i64* %146, align 8
  %555 = ptrtoint i8* %553 to i64
  %556 = sub i64 %554, %555
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %552, i8* align 1 %553, i64 %556, i1 false) #9
  %557 = load i64, i64* %146, align 8
  %558 = load i64, i64* %151, align 8
  %559 = sub i64 %557, %558
  %560 = getelementptr inbounds i8, i8* %552, i64 %559
  store i8* %560, i8** %8, align 8
  store i8* %552, i8** %150, align 8
  %561 = getelementptr inbounds i8, i8* %552, i64 %536
  store i8* %561, i8** %11, align 8
  br label %562

562:                                              ; preds = %550, %521
  %563 = phi i8* [ %527, %521 ], [ %560, %550 ]
  %564 = icmp ugt i32 %525, 127
  br i1 %564, label %565, label %577

565:                                              ; preds = %562, %565
  %566 = phi i8* [ %574, %565 ], [ %563, %562 ]
  %567 = phi i8 [ %573, %565 ], [ %526, %562 ]
  %568 = phi i32 [ %571, %565 ], [ %525, %562 ]
  %569 = or i8 %567, -128
  %570 = getelementptr inbounds i8, i8* %566, i64 1
  store i8* %570, i8** %8, align 8
  store i8 %569, i8* %566, align 1
  %571 = lshr i32 %568, 7
  %572 = icmp ugt i32 %568, 16383
  %573 = trunc i32 %571 to i8
  %574 = load i8*, i8** %8, align 8
  br i1 %572, label %565, label %575

575:                                              ; preds = %565
  %576 = trunc i32 %571 to i8
  br label %577

577:                                              ; preds = %575, %562
  %578 = phi i8* [ %563, %562 ], [ %574, %575 ]
  %579 = phi i8 [ %526, %562 ], [ %576, %575 ]
  %580 = and i8 %579, 127
  %581 = getelementptr inbounds i8, i8* %578, i64 1
  store i8* %581, i8** %8, align 8
  store i8 %580, i8* %578, align 1
  %582 = load i32, i32* %524, align 8
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %721, label %584

584:                                              ; preds = %577
  %585 = getelementptr inbounds %"class.v8::internal::wasm::StructType", %"class.v8::internal::wasm::StructType"* %485, i64 0, i32 2
  %586 = getelementptr inbounds %"class.v8::internal::wasm::StructType", %"class.v8::internal::wasm::StructType"* %485, i64 0, i32 3
  br label %587

587:                                              ; preds = %584, %630
  %588 = phi i64 [ 0, %584 ], [ %633, %630 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %261) #9
  %589 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %585, align 8
  %590 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %589, i64 %588, i32 0
  %591 = load i32, i32* %590, align 4
  store i32 %591, i32* %262, align 4
  call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* nonnull dereferenceable(4) %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %261) #9
  %592 = load i8*, i8** %586, align 8
  %593 = getelementptr inbounds i8, i8* %592, i64 %588
  %594 = load i8, i8* %593, align 1, !range !34
  %595 = load i8*, i8** %8, align 8
  %596 = getelementptr inbounds i8, i8* %595, i64 1
  %597 = load i8*, i8** %11, align 8
  %598 = icmp ugt i8* %596, %597
  br i1 %598, label %599, label %630

599:                                              ; preds = %587
  %600 = load i64, i64* %151, align 8
  %601 = ptrtoint i8* %597 to i64
  %602 = sub i64 %601, %600
  %603 = shl nsw i64 %602, 1
  %604 = or i64 %603, 1
  %605 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %606 = add i64 %604, 7
  %607 = and i64 %606, -8
  %608 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %605, i64 0, i32 2
  %609 = load i64, i64* %608, align 8
  %610 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %605, i64 0, i32 3
  %611 = load i64, i64* %610, align 8
  %612 = sub i64 %611, %609
  %613 = icmp ugt i64 %607, %612
  br i1 %613, label %614, label %616, !prof !2

614:                                              ; preds = %599
  %615 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %605, i64 %607) #9
  br label %618

616:                                              ; preds = %599
  %617 = add i64 %607, %609
  store i64 %617, i64* %608, align 8
  br label %618

618:                                              ; preds = %616, %614
  %619 = phi i64 [ %615, %614 ], [ %609, %616 ]
  %620 = inttoptr i64 %619 to i8*
  %621 = load i8*, i8** %150, align 8
  %622 = load i64, i64* %146, align 8
  %623 = ptrtoint i8* %621 to i64
  %624 = sub i64 %622, %623
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %620, i8* align 1 %621, i64 %624, i1 false) #9
  %625 = load i64, i64* %146, align 8
  %626 = load i64, i64* %151, align 8
  %627 = sub i64 %625, %626
  %628 = getelementptr inbounds i8, i8* %620, i64 %627
  store i8* %628, i8** %8, align 8
  store i8* %620, i8** %150, align 8
  %629 = getelementptr inbounds i8, i8* %620, i64 %604
  store i8* %629, i8** %11, align 8
  br label %630

630:                                              ; preds = %587, %618
  %631 = phi i8* [ %595, %587 ], [ %628, %618 ]
  %632 = getelementptr inbounds i8, i8* %631, i64 1
  store i8* %632, i8** %8, align 8
  store i8 %594, i8* %631, align 1
  %633 = add nuw nsw i64 %588, 1
  %634 = load i32, i32* %524, align 8
  %635 = zext i32 %634 to i64
  %636 = icmp ult i64 %633, %635
  br i1 %636, label %587, label %721

637:                                              ; preds = %293
  %638 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %294, i64 0, i32 1
  %639 = bitcast %union.anon* %638 to %"class.v8::internal::wasm::ArrayType"**
  %640 = load %"class.v8::internal::wasm::ArrayType"*, %"class.v8::internal::wasm::ArrayType"** %639, align 8
  %641 = load i8*, i8** %8, align 8
  %642 = getelementptr inbounds i8, i8* %641, i64 1
  %643 = load i8*, i8** %11, align 8
  %644 = icmp ugt i8* %642, %643
  br i1 %644, label %645, label %676

645:                                              ; preds = %637
  %646 = load i64, i64* %151, align 8
  %647 = ptrtoint i8* %643 to i64
  %648 = sub i64 %647, %646
  %649 = shl nsw i64 %648, 1
  %650 = or i64 %649, 1
  %651 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %652 = add i64 %650, 7
  %653 = and i64 %652, -8
  %654 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %651, i64 0, i32 2
  %655 = load i64, i64* %654, align 8
  %656 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %651, i64 0, i32 3
  %657 = load i64, i64* %656, align 8
  %658 = sub i64 %657, %655
  %659 = icmp ugt i64 %653, %658
  br i1 %659, label %660, label %662, !prof !2

660:                                              ; preds = %645
  %661 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %651, i64 %653) #9
  br label %664

662:                                              ; preds = %645
  %663 = add i64 %653, %655
  store i64 %663, i64* %654, align 8
  br label %664

664:                                              ; preds = %662, %660
  %665 = phi i64 [ %661, %660 ], [ %655, %662 ]
  %666 = inttoptr i64 %665 to i8*
  %667 = load i8*, i8** %150, align 8
  %668 = load i64, i64* %146, align 8
  %669 = ptrtoint i8* %667 to i64
  %670 = sub i64 %668, %669
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %666, i8* align 1 %667, i64 %670, i1 false) #9
  %671 = load i64, i64* %146, align 8
  %672 = load i64, i64* %151, align 8
  %673 = sub i64 %671, %672
  %674 = getelementptr inbounds i8, i8* %666, i64 %673
  store i8* %674, i8** %8, align 8
  store i8* %666, i8** %150, align 8
  %675 = getelementptr inbounds i8, i8* %666, i64 %650
  store i8* %675, i8** %11, align 8
  br label %676

676:                                              ; preds = %637, %664
  %677 = phi i8* [ %641, %637 ], [ %674, %664 ]
  %678 = getelementptr inbounds i8, i8* %677, i64 1
  store i8* %678, i8** %8, align 8
  store i8 94, i8* %677, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %259) #9
  %679 = getelementptr inbounds %"class.v8::internal::wasm::ArrayType", %"class.v8::internal::wasm::ArrayType"* %640, i64 0, i32 0, i32 0
  %680 = load i32, i32* %679, align 4
  store i32 %680, i32* %260, align 4
  call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %259) #9
  %681 = getelementptr inbounds %"class.v8::internal::wasm::ArrayType", %"class.v8::internal::wasm::ArrayType"* %640, i64 0, i32 1
  %682 = load i8, i8* %681, align 4, !range !34
  %683 = load i8*, i8** %8, align 8
  %684 = getelementptr inbounds i8, i8* %683, i64 1
  %685 = load i8*, i8** %11, align 8
  %686 = icmp ugt i8* %684, %685
  br i1 %686, label %687, label %718

687:                                              ; preds = %676
  %688 = load i64, i64* %151, align 8
  %689 = ptrtoint i8* %685 to i64
  %690 = sub i64 %689, %688
  %691 = shl nsw i64 %690, 1
  %692 = or i64 %691, 1
  %693 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %258, align 8
  %694 = add i64 %692, 7
  %695 = and i64 %694, -8
  %696 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %693, i64 0, i32 2
  %697 = load i64, i64* %696, align 8
  %698 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %693, i64 0, i32 3
  %699 = load i64, i64* %698, align 8
  %700 = sub i64 %699, %697
  %701 = icmp ugt i64 %695, %700
  br i1 %701, label %702, label %704, !prof !2

702:                                              ; preds = %687
  %703 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %693, i64 %695) #9
  br label %706

704:                                              ; preds = %687
  %705 = add i64 %695, %697
  store i64 %705, i64* %696, align 8
  br label %706

706:                                              ; preds = %704, %702
  %707 = phi i64 [ %703, %702 ], [ %697, %704 ]
  %708 = inttoptr i64 %707 to i8*
  %709 = load i8*, i8** %150, align 8
  %710 = load i64, i64* %146, align 8
  %711 = ptrtoint i8* %709 to i64
  %712 = sub i64 %710, %711
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %708, i8* align 1 %709, i64 %712, i1 false) #9
  %713 = load i64, i64* %146, align 8
  %714 = load i64, i64* %151, align 8
  %715 = sub i64 %713, %714
  %716 = getelementptr inbounds i8, i8* %708, i64 %715
  store i8* %716, i8** %8, align 8
  store i8* %708, i8** %150, align 8
  %717 = getelementptr inbounds i8, i8* %708, i64 %692
  store i8* %717, i8** %11, align 8
  br label %718

718:                                              ; preds = %676, %706
  %719 = phi i8* [ %683, %676 ], [ %716, %706 ]
  %720 = getelementptr inbounds i8, i8* %719, i64 1
  store i8* %720, i8** %8, align 8
  store i8 %682, i8* %719, align 1
  br label %721

721:                                              ; preds = %630, %476, %577, %461, %293, %718
  %722 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::Type", %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %294, i64 1
  %723 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::Type"* %722, %255
  br i1 %723, label %267, label %293

724:                                              ; preds = %92, %267
  %725 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0
  %726 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %727 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %726 to i64*
  %728 = load i64, i64* %727, align 8
  %729 = bitcast %"class.std::__1::vector.29"* %725 to i64*
  %730 = load i64, i64* %729, align 8
  %731 = sub i64 %728, %730
  %732 = sdiv exact i64 %731, 40
  %733 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0
  %734 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %735 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %734 to i64*
  %736 = load i64, i64* %735, align 8
  %737 = bitcast %"class.std::__1::vector.22"* %733 to i64*
  %738 = load i64, i64* %737, align 8
  %739 = sub i64 %736, %738
  %740 = sdiv exact i64 %739, -40
  %741 = icmp eq i64 %732, %740
  br i1 %741, label %1175, label %742

742:                                              ; preds = %724
  %743 = load i8*, i8** %8, align 8
  %744 = getelementptr inbounds i8, i8* %743, i64 1
  %745 = load i8*, i8** %11, align 8
  %746 = icmp ugt i8* %744, %745
  br i1 %746, label %749, label %747

747:                                              ; preds = %742
  %748 = bitcast i8** %8 to i64*
  br label %784

749:                                              ; preds = %742
  %750 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %751 = bitcast i8** %750 to i64*
  %752 = load i64, i64* %751, align 8
  %753 = ptrtoint i8* %745 to i64
  %754 = sub i64 %753, %752
  %755 = shl nsw i64 %754, 1
  %756 = or i64 %755, 1
  %757 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %758 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %757, align 8
  %759 = add i64 %756, 7
  %760 = and i64 %759, -8
  %761 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %758, i64 0, i32 2
  %762 = load i64, i64* %761, align 8
  %763 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %758, i64 0, i32 3
  %764 = load i64, i64* %763, align 8
  %765 = sub i64 %764, %762
  %766 = icmp ugt i64 %760, %765
  br i1 %766, label %767, label %769, !prof !2

767:                                              ; preds = %749
  %768 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %758, i64 %760) #9
  br label %771

769:                                              ; preds = %749
  %770 = add i64 %760, %762
  store i64 %770, i64* %761, align 8
  br label %771

771:                                              ; preds = %769, %767
  %772 = phi i64 [ %768, %767 ], [ %762, %769 ]
  %773 = inttoptr i64 %772 to i8*
  %774 = load i8*, i8** %750, align 8
  %775 = bitcast i8** %8 to i64*
  %776 = load i64, i64* %775, align 8
  %777 = ptrtoint i8* %774 to i64
  %778 = sub i64 %776, %777
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %773, i8* align 1 %774, i64 %778, i1 false) #9
  %779 = load i64, i64* %775, align 8
  %780 = load i64, i64* %751, align 8
  %781 = sub i64 %779, %780
  %782 = getelementptr inbounds i8, i8* %773, i64 %781
  store i8* %782, i8** %8, align 8
  store i8* %773, i8** %750, align 8
  %783 = getelementptr inbounds i8, i8* %773, i64 %756
  store i8* %783, i8** %11, align 8
  br label %784

784:                                              ; preds = %747, %771
  %785 = phi i64* [ %748, %747 ], [ %775, %771 ]
  %786 = phi i8* [ %743, %747 ], [ %782, %771 ]
  %787 = getelementptr inbounds i8, i8* %786, i64 1
  store i8* %787, i8** %8, align 8
  store i8 2, i8* %786, align 1
  %788 = load i64, i64* %785, align 8
  %789 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %790 = bitcast i8** %789 to i64*
  %791 = load i64, i64* %790, align 8
  %792 = sub i64 %788, %791
  %793 = inttoptr i64 %788 to i8*
  %794 = getelementptr inbounds i8, i8* %793, i64 5
  %795 = load i8*, i8** %11, align 8
  %796 = icmp ugt i8* %794, %795
  br i1 %796, label %797, label %828

797:                                              ; preds = %784
  %798 = ptrtoint i8* %795 to i64
  %799 = sub i64 %798, %791
  %800 = shl nsw i64 %799, 1
  %801 = add i64 %800, 5
  %802 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %803 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %802, align 8
  %804 = add i64 %800, 12
  %805 = and i64 %804, -8
  %806 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %803, i64 0, i32 2
  %807 = load i64, i64* %806, align 8
  %808 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %803, i64 0, i32 3
  %809 = load i64, i64* %808, align 8
  %810 = sub i64 %809, %807
  %811 = icmp ugt i64 %805, %810
  br i1 %811, label %812, label %814, !prof !2

812:                                              ; preds = %797
  %813 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %803, i64 %805) #9
  br label %816

814:                                              ; preds = %797
  %815 = add i64 %807, %805
  store i64 %815, i64* %806, align 8
  br label %816

816:                                              ; preds = %814, %812
  %817 = phi i64 [ %813, %812 ], [ %807, %814 ]
  %818 = inttoptr i64 %817 to i8*
  %819 = load i8*, i8** %789, align 8
  %820 = load i64, i64* %785, align 8
  %821 = ptrtoint i8* %819 to i64
  %822 = sub i64 %820, %821
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %818, i8* align 1 %819, i64 %822, i1 false) #9
  %823 = load i64, i64* %785, align 8
  %824 = load i64, i64* %790, align 8
  %825 = sub i64 %823, %824
  %826 = getelementptr inbounds i8, i8* %818, i64 %825
  store i8* %826, i8** %8, align 8
  store i8* %818, i8** %789, align 8
  %827 = getelementptr inbounds i8, i8* %818, i64 %801
  store i8* %827, i8** %11, align 8
  br label %828

828:                                              ; preds = %784, %816
  %829 = phi i64 [ %791, %784 ], [ %817, %816 ]
  %830 = phi i8* [ %795, %784 ], [ %827, %816 ]
  %831 = phi i8* [ %793, %784 ], [ %826, %816 ]
  %832 = getelementptr inbounds i8, i8* %831, i64 5
  store i8* %832, i8** %8, align 8
  %833 = load i64, i64* %727, align 8
  %834 = load i64, i64* %729, align 8
  %835 = sub i64 %833, %834
  %836 = sdiv exact i64 %835, 40
  %837 = load i64, i64* %735, align 8
  %838 = load i64, i64* %737, align 8
  %839 = sub i64 %837, %838
  %840 = sdiv exact i64 %839, 40
  %841 = add nsw i64 %840, %836
  %842 = getelementptr inbounds i8, i8* %831, i64 10
  %843 = icmp ugt i8* %842, %830
  br i1 %843, label %844, label %875

844:                                              ; preds = %828
  %845 = ptrtoint i8* %830 to i64
  %846 = sub i64 %845, %829
  %847 = shl nsw i64 %846, 1
  %848 = add i64 %847, 5
  %849 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %850 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %849, align 8
  %851 = add i64 %847, 12
  %852 = and i64 %851, -8
  %853 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %850, i64 0, i32 2
  %854 = load i64, i64* %853, align 8
  %855 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %850, i64 0, i32 3
  %856 = load i64, i64* %855, align 8
  %857 = sub i64 %856, %854
  %858 = icmp ugt i64 %852, %857
  br i1 %858, label %859, label %861, !prof !2

859:                                              ; preds = %844
  %860 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %850, i64 %852) #9
  br label %863

861:                                              ; preds = %844
  %862 = add i64 %852, %854
  store i64 %862, i64* %853, align 8
  br label %863

863:                                              ; preds = %861, %859
  %864 = phi i64 [ %860, %859 ], [ %854, %861 ]
  %865 = inttoptr i64 %864 to i8*
  %866 = load i8*, i8** %789, align 8
  %867 = load i64, i64* %785, align 8
  %868 = ptrtoint i8* %866 to i64
  %869 = sub i64 %867, %868
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %865, i8* align 1 %866, i64 %869, i1 false) #9
  %870 = load i64, i64* %785, align 8
  %871 = load i64, i64* %790, align 8
  %872 = sub i64 %870, %871
  %873 = getelementptr inbounds i8, i8* %865, i64 %872
  store i8* %873, i8** %8, align 8
  store i8* %865, i8** %789, align 8
  %874 = getelementptr inbounds i8, i8* %865, i64 %848
  store i8* %874, i8** %11, align 8
  br label %875

875:                                              ; preds = %863, %828
  %876 = phi i8* [ %832, %828 ], [ %873, %863 ]
  %877 = trunc i64 %841 to i32
  %878 = icmp ugt i32 %877, 127
  %879 = trunc i64 %841 to i8
  br i1 %878, label %880, label %892

880:                                              ; preds = %875, %880
  %881 = phi i8* [ %889, %880 ], [ %876, %875 ]
  %882 = phi i8 [ %888, %880 ], [ %879, %875 ]
  %883 = phi i32 [ %886, %880 ], [ %877, %875 ]
  %884 = or i8 %882, -128
  %885 = getelementptr inbounds i8, i8* %881, i64 1
  store i8* %885, i8** %8, align 8
  store i8 %884, i8* %881, align 1
  %886 = lshr i32 %883, 7
  %887 = icmp ugt i32 %883, 16383
  %888 = trunc i32 %886 to i8
  %889 = load i8*, i8** %8, align 8
  br i1 %887, label %880, label %890

890:                                              ; preds = %880
  %891 = trunc i32 %886 to i8
  br label %892

892:                                              ; preds = %890, %875
  %893 = phi i8* [ %876, %875 ], [ %889, %890 ]
  %894 = phi i8 [ %879, %875 ], [ %891, %890 ]
  %895 = and i8 %894, 127
  %896 = getelementptr inbounds i8, i8* %893, i64 1
  store i8* %896, i8** %8, align 8
  store i8 %895, i8* %893, align 1
  %897 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %725, i64 0, i32 0, i32 0
  %898 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %897, align 8
  %899 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"** %726, align 8
  %900 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %898, %899
  br i1 %900, label %903, label %901

901:                                              ; preds = %892
  %902 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %910

903:                                              ; preds = %1036, %892
  %904 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %733, i64 0, i32 0, i32 0
  %905 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %904, align 8
  %906 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %734, align 8
  %907 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %905, %906
  br i1 %907, label %1041, label %908

908:                                              ; preds = %903
  %909 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %1067

910:                                              ; preds = %901, %1036
  %911 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* [ %898, %901 ], [ %1039, %1036 ]
  %912 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 0, i32 0
  %913 = load i8*, i8** %912, align 8
  %914 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 0, i32 1
  %915 = load i64, i64* %914, align 8
  %916 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 1, i32 0
  %917 = load i8*, i8** %916, align 8
  %918 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 1, i32 1
  %919 = load i64, i64* %918, align 8
  %920 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 2
  %921 = load i8, i8* %920, align 8
  %922 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 0, i32 3
  %923 = load i8, i8* %922, align 1
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %913, i64 %915)
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %917, i64 %919)
  %924 = load i8*, i8** %8, align 8
  %925 = getelementptr inbounds i8, i8* %924, i64 1
  %926 = load i8*, i8** %11, align 8
  %927 = icmp ugt i8* %925, %926
  br i1 %927, label %928, label %959

928:                                              ; preds = %910
  %929 = load i64, i64* %790, align 8
  %930 = ptrtoint i8* %926 to i64
  %931 = sub i64 %930, %929
  %932 = shl nsw i64 %931, 1
  %933 = or i64 %932, 1
  %934 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %902, align 8
  %935 = add i64 %933, 7
  %936 = and i64 %935, -8
  %937 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %934, i64 0, i32 2
  %938 = load i64, i64* %937, align 8
  %939 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %934, i64 0, i32 3
  %940 = load i64, i64* %939, align 8
  %941 = sub i64 %940, %938
  %942 = icmp ugt i64 %936, %941
  br i1 %942, label %943, label %945, !prof !2

943:                                              ; preds = %928
  %944 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %934, i64 %936) #9
  br label %947

945:                                              ; preds = %928
  %946 = add i64 %936, %938
  store i64 %946, i64* %937, align 8
  br label %947

947:                                              ; preds = %945, %943
  %948 = phi i64 [ %944, %943 ], [ %938, %945 ]
  %949 = inttoptr i64 %948 to i8*
  %950 = load i8*, i8** %789, align 8
  %951 = load i64, i64* %785, align 8
  %952 = ptrtoint i8* %950 to i64
  %953 = sub i64 %951, %952
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %949, i8* align 1 %950, i64 %953, i1 false) #9
  %954 = load i64, i64* %785, align 8
  %955 = load i64, i64* %790, align 8
  %956 = sub i64 %954, %955
  %957 = getelementptr inbounds i8, i8* %949, i64 %956
  store i8* %957, i8** %8, align 8
  store i8* %949, i8** %789, align 8
  %958 = getelementptr inbounds i8, i8* %949, i64 %933
  store i8* %958, i8** %11, align 8
  br label %959

959:                                              ; preds = %910, %947
  %960 = phi i8* [ %924, %910 ], [ %957, %947 ]
  %961 = getelementptr inbounds i8, i8* %960, i64 1
  store i8* %961, i8** %8, align 8
  store i8 3, i8* %960, align 1
  %962 = load i8*, i8** %8, align 8
  %963 = getelementptr inbounds i8, i8* %962, i64 1
  %964 = load i8*, i8** %11, align 8
  %965 = icmp ugt i8* %963, %964
  br i1 %965, label %966, label %997

966:                                              ; preds = %959
  %967 = load i64, i64* %790, align 8
  %968 = ptrtoint i8* %964 to i64
  %969 = sub i64 %968, %967
  %970 = shl nsw i64 %969, 1
  %971 = or i64 %970, 1
  %972 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %902, align 8
  %973 = add i64 %971, 7
  %974 = and i64 %973, -8
  %975 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %972, i64 0, i32 2
  %976 = load i64, i64* %975, align 8
  %977 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %972, i64 0, i32 3
  %978 = load i64, i64* %977, align 8
  %979 = sub i64 %978, %976
  %980 = icmp ugt i64 %974, %979
  br i1 %980, label %981, label %983, !prof !2

981:                                              ; preds = %966
  %982 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %972, i64 %974) #9
  br label %985

983:                                              ; preds = %966
  %984 = add i64 %974, %976
  store i64 %984, i64* %975, align 8
  br label %985

985:                                              ; preds = %983, %981
  %986 = phi i64 [ %982, %981 ], [ %976, %983 ]
  %987 = inttoptr i64 %986 to i8*
  %988 = load i8*, i8** %789, align 8
  %989 = load i64, i64* %785, align 8
  %990 = ptrtoint i8* %988 to i64
  %991 = sub i64 %989, %990
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %987, i8* align 1 %988, i64 %991, i1 false) #9
  %992 = load i64, i64* %785, align 8
  %993 = load i64, i64* %790, align 8
  %994 = sub i64 %992, %993
  %995 = getelementptr inbounds i8, i8* %987, i64 %994
  store i8* %995, i8** %8, align 8
  store i8* %987, i8** %789, align 8
  %996 = getelementptr inbounds i8, i8* %987, i64 %971
  store i8* %996, i8** %11, align 8
  br label %997

997:                                              ; preds = %959, %985
  %998 = phi i8* [ %962, %959 ], [ %995, %985 ]
  %999 = getelementptr inbounds i8, i8* %998, i64 1
  store i8* %999, i8** %8, align 8
  store i8 %921, i8* %998, align 1
  %1000 = and i8 %923, 1
  %1001 = load i8*, i8** %8, align 8
  %1002 = getelementptr inbounds i8, i8* %1001, i64 1
  %1003 = load i8*, i8** %11, align 8
  %1004 = icmp ugt i8* %1002, %1003
  br i1 %1004, label %1005, label %1036

1005:                                             ; preds = %997
  %1006 = load i64, i64* %790, align 8
  %1007 = ptrtoint i8* %1003 to i64
  %1008 = sub i64 %1007, %1006
  %1009 = shl nsw i64 %1008, 1
  %1010 = or i64 %1009, 1
  %1011 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %902, align 8
  %1012 = add i64 %1010, 7
  %1013 = and i64 %1012, -8
  %1014 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1011, i64 0, i32 2
  %1015 = load i64, i64* %1014, align 8
  %1016 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1011, i64 0, i32 3
  %1017 = load i64, i64* %1016, align 8
  %1018 = sub i64 %1017, %1015
  %1019 = icmp ugt i64 %1013, %1018
  br i1 %1019, label %1020, label %1022, !prof !2

1020:                                             ; preds = %1005
  %1021 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1011, i64 %1013) #9
  br label %1024

1022:                                             ; preds = %1005
  %1023 = add i64 %1013, %1015
  store i64 %1023, i64* %1014, align 8
  br label %1024

1024:                                             ; preds = %1022, %1020
  %1025 = phi i64 [ %1021, %1020 ], [ %1015, %1022 ]
  %1026 = inttoptr i64 %1025 to i8*
  %1027 = load i8*, i8** %789, align 8
  %1028 = load i64, i64* %785, align 8
  %1029 = ptrtoint i8* %1027 to i64
  %1030 = sub i64 %1028, %1029
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1026, i8* align 1 %1027, i64 %1030, i1 false) #9
  %1031 = load i64, i64* %785, align 8
  %1032 = load i64, i64* %790, align 8
  %1033 = sub i64 %1031, %1032
  %1034 = getelementptr inbounds i8, i8* %1026, i64 %1033
  store i8* %1034, i8** %8, align 8
  store i8* %1026, i8** %789, align 8
  %1035 = getelementptr inbounds i8, i8* %1026, i64 %1010
  store i8* %1035, i8** %11, align 8
  br label %1036

1036:                                             ; preds = %997, %1024
  %1037 = phi i8* [ %1001, %997 ], [ %1034, %1024 ]
  %1038 = getelementptr inbounds i8, i8* %1037, i64 1
  store i8* %1038, i8** %8, align 8
  store i8 %1000, i8* %1037, align 1
  %1039 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %911, i64 1
  %1040 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobalImport"* %1039, %899
  br i1 %1040, label %903, label %910

1041:                                             ; preds = %1168, %903
  %1042 = load i64, i64* %785, align 8
  %1043 = load i64, i64* %790, align 8
  %1044 = sub i64 %1042, %792
  %1045 = sub i64 %1044, %1043
  %1046 = trunc i64 %1045 to i32
  %1047 = add i32 %1046, -5
  %1048 = inttoptr i64 %1043 to i8*
  %1049 = getelementptr inbounds i8, i8* %1048, i64 %792
  %1050 = trunc i32 %1047 to i8
  %1051 = lshr i32 %1047, 7
  %1052 = or i8 %1050, -128
  %1053 = getelementptr inbounds i8, i8* %1049, i64 1
  store i8 %1052, i8* %1049, align 1
  %1054 = trunc i32 %1051 to i8
  %1055 = lshr i32 %1047, 14
  %1056 = or i8 %1054, -128
  %1057 = getelementptr inbounds i8, i8* %1053, i64 1
  store i8 %1056, i8* %1053, align 1
  %1058 = trunc i32 %1055 to i8
  %1059 = lshr i32 %1047, 21
  %1060 = or i8 %1058, -128
  %1061 = getelementptr inbounds i8, i8* %1057, i64 1
  store i8 %1060, i8* %1057, align 1
  %1062 = trunc i32 %1059 to i8
  %1063 = lshr i32 %1047, 28
  %1064 = or i8 %1062, -128
  %1065 = getelementptr inbounds i8, i8* %1061, i64 1
  store i8 %1064, i8* %1061, align 1
  %1066 = trunc i32 %1063 to i8
  store i8 %1066, i8* %1065, align 1
  br label %1175

1067:                                             ; preds = %908, %1168
  %1068 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* [ %905, %908 ], [ %1173, %1168 ]
  %1069 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 0, i32 0, i32 0
  %1070 = load i8*, i8** %1069, align 8
  %1071 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 0, i32 0, i32 1
  %1072 = load i64, i64* %1071, align 8
  %1073 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 0, i32 1, i32 0
  %1074 = load i8*, i8** %1073, align 8
  %1075 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 0, i32 1, i32 1
  %1076 = load i64, i64* %1075, align 8
  %1077 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 0, i32 2
  %1078 = load i32, i32* %1077, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %1070, i64 %1072)
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %1074, i64 %1076)
  %1079 = load i8*, i8** %8, align 8
  %1080 = getelementptr inbounds i8, i8* %1079, i64 1
  %1081 = load i8*, i8** %11, align 8
  %1082 = icmp ugt i8* %1080, %1081
  br i1 %1082, label %1083, label %1114

1083:                                             ; preds = %1067
  %1084 = load i64, i64* %790, align 8
  %1085 = ptrtoint i8* %1081 to i64
  %1086 = sub i64 %1085, %1084
  %1087 = shl nsw i64 %1086, 1
  %1088 = or i64 %1087, 1
  %1089 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %909, align 8
  %1090 = add i64 %1088, 7
  %1091 = and i64 %1090, -8
  %1092 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1089, i64 0, i32 2
  %1093 = load i64, i64* %1092, align 8
  %1094 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1089, i64 0, i32 3
  %1095 = load i64, i64* %1094, align 8
  %1096 = sub i64 %1095, %1093
  %1097 = icmp ugt i64 %1091, %1096
  br i1 %1097, label %1098, label %1100, !prof !2

1098:                                             ; preds = %1083
  %1099 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1089, i64 %1091) #9
  br label %1102

1100:                                             ; preds = %1083
  %1101 = add i64 %1091, %1093
  store i64 %1101, i64* %1092, align 8
  br label %1102

1102:                                             ; preds = %1100, %1098
  %1103 = phi i64 [ %1099, %1098 ], [ %1093, %1100 ]
  %1104 = inttoptr i64 %1103 to i8*
  %1105 = load i8*, i8** %789, align 8
  %1106 = load i64, i64* %785, align 8
  %1107 = ptrtoint i8* %1105 to i64
  %1108 = sub i64 %1106, %1107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1104, i8* align 1 %1105, i64 %1108, i1 false) #9
  %1109 = load i64, i64* %785, align 8
  %1110 = load i64, i64* %790, align 8
  %1111 = sub i64 %1109, %1110
  %1112 = getelementptr inbounds i8, i8* %1104, i64 %1111
  store i8* %1112, i8** %8, align 8
  store i8* %1104, i8** %789, align 8
  %1113 = getelementptr inbounds i8, i8* %1104, i64 %1088
  store i8* %1113, i8** %11, align 8
  br label %1114

1114:                                             ; preds = %1067, %1102
  %1115 = phi i8* [ %1079, %1067 ], [ %1112, %1102 ]
  %1116 = getelementptr inbounds i8, i8* %1115, i64 1
  store i8* %1116, i8** %8, align 8
  store i8 0, i8* %1115, align 1
  %1117 = load i8*, i8** %8, align 8
  %1118 = getelementptr inbounds i8, i8* %1117, i64 5
  %1119 = load i8*, i8** %11, align 8
  %1120 = icmp ugt i8* %1118, %1119
  br i1 %1120, label %1121, label %1152

1121:                                             ; preds = %1114
  %1122 = load i64, i64* %790, align 8
  %1123 = ptrtoint i8* %1119 to i64
  %1124 = sub i64 %1123, %1122
  %1125 = shl nsw i64 %1124, 1
  %1126 = add i64 %1125, 5
  %1127 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %909, align 8
  %1128 = add i64 %1125, 12
  %1129 = and i64 %1128, -8
  %1130 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1127, i64 0, i32 2
  %1131 = load i64, i64* %1130, align 8
  %1132 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1127, i64 0, i32 3
  %1133 = load i64, i64* %1132, align 8
  %1134 = sub i64 %1133, %1131
  %1135 = icmp ugt i64 %1129, %1134
  br i1 %1135, label %1136, label %1138, !prof !2

1136:                                             ; preds = %1121
  %1137 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1127, i64 %1129) #9
  br label %1140

1138:                                             ; preds = %1121
  %1139 = add i64 %1129, %1131
  store i64 %1139, i64* %1130, align 8
  br label %1140

1140:                                             ; preds = %1138, %1136
  %1141 = phi i64 [ %1137, %1136 ], [ %1131, %1138 ]
  %1142 = inttoptr i64 %1141 to i8*
  %1143 = load i8*, i8** %789, align 8
  %1144 = load i64, i64* %785, align 8
  %1145 = ptrtoint i8* %1143 to i64
  %1146 = sub i64 %1144, %1145
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1142, i8* align 1 %1143, i64 %1146, i1 false) #9
  %1147 = load i64, i64* %785, align 8
  %1148 = load i64, i64* %790, align 8
  %1149 = sub i64 %1147, %1148
  %1150 = getelementptr inbounds i8, i8* %1142, i64 %1149
  store i8* %1150, i8** %8, align 8
  store i8* %1142, i8** %789, align 8
  %1151 = getelementptr inbounds i8, i8* %1142, i64 %1126
  store i8* %1151, i8** %11, align 8
  br label %1152

1152:                                             ; preds = %1140, %1114
  %1153 = phi i8* [ %1117, %1114 ], [ %1150, %1140 ]
  %1154 = icmp ugt i32 %1078, 127
  %1155 = trunc i32 %1078 to i8
  br i1 %1154, label %1156, label %1168

1156:                                             ; preds = %1152, %1156
  %1157 = phi i8* [ %1165, %1156 ], [ %1153, %1152 ]
  %1158 = phi i8 [ %1164, %1156 ], [ %1155, %1152 ]
  %1159 = phi i32 [ %1162, %1156 ], [ %1078, %1152 ]
  %1160 = or i8 %1158, -128
  %1161 = getelementptr inbounds i8, i8* %1157, i64 1
  store i8* %1161, i8** %8, align 8
  store i8 %1160, i8* %1157, align 1
  %1162 = lshr i32 %1159, 7
  %1163 = icmp ugt i32 %1159, 16383
  %1164 = trunc i32 %1162 to i8
  %1165 = load i8*, i8** %8, align 8
  br i1 %1163, label %1156, label %1166

1166:                                             ; preds = %1156
  %1167 = trunc i32 %1162 to i8
  br label %1168

1168:                                             ; preds = %1166, %1152
  %1169 = phi i8* [ %1153, %1152 ], [ %1165, %1166 ]
  %1170 = phi i8 [ %1155, %1152 ], [ %1167, %1166 ]
  %1171 = and i8 %1170, 127
  %1172 = getelementptr inbounds i8, i8* %1169, i64 1
  store i8* %1172, i8** %8, align 8
  store i8 %1171, i8* %1169, align 1
  %1173 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1068, i64 1
  %1174 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %1173, %906
  br i1 %1174, label %1041, label %1067

1175:                                             ; preds = %724, %1041
  %1176 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0
  %1177 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %1178 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177 to i64*
  %1179 = load i64, i64* %1178, align 8
  %1180 = bitcast %"class.std::__1::vector.43"* %1176 to i64*
  %1181 = load i64, i64* %1180, align 8
  %1182 = icmp eq i64 %1179, %1181
  br i1 %1182, label %1435, label %1183

1183:                                             ; preds = %1175
  %1184 = load i8*, i8** %8, align 8
  %1185 = getelementptr inbounds i8, i8* %1184, i64 1
  %1186 = load i8*, i8** %11, align 8
  %1187 = icmp ugt i8* %1185, %1186
  br i1 %1187, label %1190, label %1188

1188:                                             ; preds = %1183
  %1189 = bitcast i8** %8 to i64*
  br label %1225

1190:                                             ; preds = %1183
  %1191 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1192 = bitcast i8** %1191 to i64*
  %1193 = load i64, i64* %1192, align 8
  %1194 = ptrtoint i8* %1186 to i64
  %1195 = sub i64 %1194, %1193
  %1196 = shl nsw i64 %1195, 1
  %1197 = or i64 %1196, 1
  %1198 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1199 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1198, align 8
  %1200 = add i64 %1197, 7
  %1201 = and i64 %1200, -8
  %1202 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1199, i64 0, i32 2
  %1203 = load i64, i64* %1202, align 8
  %1204 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1199, i64 0, i32 3
  %1205 = load i64, i64* %1204, align 8
  %1206 = sub i64 %1205, %1203
  %1207 = icmp ugt i64 %1201, %1206
  br i1 %1207, label %1208, label %1210, !prof !2

1208:                                             ; preds = %1190
  %1209 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1199, i64 %1201) #9
  br label %1212

1210:                                             ; preds = %1190
  %1211 = add i64 %1201, %1203
  store i64 %1211, i64* %1202, align 8
  br label %1212

1212:                                             ; preds = %1210, %1208
  %1213 = phi i64 [ %1209, %1208 ], [ %1203, %1210 ]
  %1214 = inttoptr i64 %1213 to i8*
  %1215 = load i8*, i8** %1191, align 8
  %1216 = bitcast i8** %8 to i64*
  %1217 = load i64, i64* %1216, align 8
  %1218 = ptrtoint i8* %1215 to i64
  %1219 = sub i64 %1217, %1218
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1214, i8* align 1 %1215, i64 %1219, i1 false) #9
  %1220 = load i64, i64* %1216, align 8
  %1221 = load i64, i64* %1192, align 8
  %1222 = sub i64 %1220, %1221
  %1223 = getelementptr inbounds i8, i8* %1214, i64 %1222
  store i8* %1223, i8** %8, align 8
  store i8* %1214, i8** %1191, align 8
  %1224 = getelementptr inbounds i8, i8* %1214, i64 %1197
  store i8* %1224, i8** %11, align 8
  br label %1225

1225:                                             ; preds = %1188, %1212
  %1226 = phi i64* [ %1189, %1188 ], [ %1216, %1212 ]
  %1227 = phi i8* [ %1184, %1188 ], [ %1223, %1212 ]
  %1228 = getelementptr inbounds i8, i8* %1227, i64 1
  store i8* %1228, i8** %8, align 8
  store i8 3, i8* %1227, align 1
  %1229 = load i64, i64* %1226, align 8
  %1230 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1231 = bitcast i8** %1230 to i64*
  %1232 = load i64, i64* %1231, align 8
  %1233 = sub i64 %1229, %1232
  %1234 = inttoptr i64 %1229 to i8*
  %1235 = getelementptr inbounds i8, i8* %1234, i64 5
  %1236 = load i8*, i8** %11, align 8
  %1237 = icmp ugt i8* %1235, %1236
  br i1 %1237, label %1238, label %1269

1238:                                             ; preds = %1225
  %1239 = ptrtoint i8* %1236 to i64
  %1240 = sub i64 %1239, %1232
  %1241 = shl nsw i64 %1240, 1
  %1242 = add i64 %1241, 5
  %1243 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1244 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1243, align 8
  %1245 = add i64 %1241, 12
  %1246 = and i64 %1245, -8
  %1247 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1244, i64 0, i32 2
  %1248 = load i64, i64* %1247, align 8
  %1249 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1244, i64 0, i32 3
  %1250 = load i64, i64* %1249, align 8
  %1251 = sub i64 %1250, %1248
  %1252 = icmp ugt i64 %1246, %1251
  br i1 %1252, label %1253, label %1255, !prof !2

1253:                                             ; preds = %1238
  %1254 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1244, i64 %1246) #9
  br label %1257

1255:                                             ; preds = %1238
  %1256 = add i64 %1248, %1246
  store i64 %1256, i64* %1247, align 8
  br label %1257

1257:                                             ; preds = %1255, %1253
  %1258 = phi i64 [ %1254, %1253 ], [ %1248, %1255 ]
  %1259 = inttoptr i64 %1258 to i8*
  %1260 = load i8*, i8** %1230, align 8
  %1261 = load i64, i64* %1226, align 8
  %1262 = ptrtoint i8* %1260 to i64
  %1263 = sub i64 %1261, %1262
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1259, i8* align 1 %1260, i64 %1263, i1 false) #9
  %1264 = load i64, i64* %1226, align 8
  %1265 = load i64, i64* %1231, align 8
  %1266 = sub i64 %1264, %1265
  %1267 = getelementptr inbounds i8, i8* %1259, i64 %1266
  store i8* %1267, i8** %8, align 8
  store i8* %1259, i8** %1230, align 8
  %1268 = getelementptr inbounds i8, i8* %1259, i64 %1242
  store i8* %1268, i8** %11, align 8
  br label %1269

1269:                                             ; preds = %1225, %1257
  %1270 = phi i64 [ %1232, %1225 ], [ %1258, %1257 ]
  %1271 = phi i8* [ %1236, %1225 ], [ %1268, %1257 ]
  %1272 = phi i8* [ %1234, %1225 ], [ %1267, %1257 ]
  %1273 = getelementptr inbounds i8, i8* %1272, i64 5
  store i8* %1273, i8** %8, align 8
  %1274 = load i64, i64* %1178, align 8
  %1275 = load i64, i64* %1180, align 8
  %1276 = sub i64 %1274, %1275
  %1277 = ashr exact i64 %1276, 3
  %1278 = getelementptr inbounds i8, i8* %1272, i64 10
  %1279 = icmp ugt i8* %1278, %1271
  br i1 %1279, label %1280, label %1311

1280:                                             ; preds = %1269
  %1281 = ptrtoint i8* %1271 to i64
  %1282 = sub i64 %1281, %1270
  %1283 = shl nsw i64 %1282, 1
  %1284 = add i64 %1283, 5
  %1285 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1286 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1285, align 8
  %1287 = add i64 %1283, 12
  %1288 = and i64 %1287, -8
  %1289 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1286, i64 0, i32 2
  %1290 = load i64, i64* %1289, align 8
  %1291 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1286, i64 0, i32 3
  %1292 = load i64, i64* %1291, align 8
  %1293 = sub i64 %1292, %1290
  %1294 = icmp ugt i64 %1288, %1293
  br i1 %1294, label %1295, label %1297, !prof !2

1295:                                             ; preds = %1280
  %1296 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1286, i64 %1288) #9
  br label %1299

1297:                                             ; preds = %1280
  %1298 = add i64 %1288, %1290
  store i64 %1298, i64* %1289, align 8
  br label %1299

1299:                                             ; preds = %1297, %1295
  %1300 = phi i64 [ %1296, %1295 ], [ %1290, %1297 ]
  %1301 = inttoptr i64 %1300 to i8*
  %1302 = load i8*, i8** %1230, align 8
  %1303 = load i64, i64* %1226, align 8
  %1304 = ptrtoint i8* %1302 to i64
  %1305 = sub i64 %1303, %1304
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1301, i8* align 1 %1302, i64 %1305, i1 false) #9
  %1306 = load i64, i64* %1226, align 8
  %1307 = load i64, i64* %1231, align 8
  %1308 = sub i64 %1306, %1307
  %1309 = getelementptr inbounds i8, i8* %1301, i64 %1308
  store i8* %1309, i8** %8, align 8
  store i8* %1301, i8** %1230, align 8
  %1310 = getelementptr inbounds i8, i8* %1301, i64 %1284
  store i8* %1310, i8** %11, align 8
  br label %1311

1311:                                             ; preds = %1299, %1269
  %1312 = phi i8* [ %1273, %1269 ], [ %1309, %1299 ]
  %1313 = trunc i64 %1277 to i32
  %1314 = icmp ugt i32 %1313, 127
  %1315 = trunc i64 %1277 to i8
  br i1 %1314, label %1316, label %1328

1316:                                             ; preds = %1311, %1316
  %1317 = phi i8* [ %1325, %1316 ], [ %1312, %1311 ]
  %1318 = phi i8 [ %1324, %1316 ], [ %1315, %1311 ]
  %1319 = phi i32 [ %1322, %1316 ], [ %1313, %1311 ]
  %1320 = or i8 %1318, -128
  %1321 = getelementptr inbounds i8, i8* %1317, i64 1
  store i8* %1321, i8** %8, align 8
  store i8 %1320, i8* %1317, align 1
  %1322 = lshr i32 %1319, 7
  %1323 = icmp ugt i32 %1319, 16383
  %1324 = trunc i32 %1322 to i8
  %1325 = load i8*, i8** %8, align 8
  br i1 %1323, label %1316, label %1326

1326:                                             ; preds = %1316
  %1327 = trunc i32 %1322 to i8
  br label %1328

1328:                                             ; preds = %1326, %1311
  %1329 = phi i8* [ %1312, %1311 ], [ %1325, %1326 ]
  %1330 = phi i8 [ %1315, %1311 ], [ %1327, %1326 ]
  %1331 = and i8 %1330, 127
  %1332 = getelementptr inbounds i8, i8* %1329, i64 1
  store i8* %1332, i8** %8, align 8
  store i8 %1331, i8* %1329, align 1
  %1333 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1176, i64 0, i32 0, i32 0
  %1334 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1333, align 8
  %1335 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177, align 8
  %1336 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %1334, %1335
  br i1 %1336, label %1339, label %1337

1337:                                             ; preds = %1328
  %1338 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %1366

1339:                                             ; preds = %1423, %1328
  %1340 = phi i32 [ 0, %1328 ], [ %1432, %1423 ]
  %1341 = load i64, i64* %1226, align 8
  %1342 = load i64, i64* %1231, align 8
  %1343 = sub i64 %1341, %1233
  %1344 = sub i64 %1343, %1342
  %1345 = trunc i64 %1344 to i32
  %1346 = add i32 %1345, -5
  %1347 = inttoptr i64 %1342 to i8*
  %1348 = getelementptr inbounds i8, i8* %1347, i64 %1233
  %1349 = trunc i32 %1346 to i8
  %1350 = lshr i32 %1346, 7
  %1351 = or i8 %1349, -128
  %1352 = getelementptr inbounds i8, i8* %1348, i64 1
  store i8 %1351, i8* %1348, align 1
  %1353 = trunc i32 %1350 to i8
  %1354 = lshr i32 %1346, 14
  %1355 = or i8 %1353, -128
  %1356 = getelementptr inbounds i8, i8* %1352, i64 1
  store i8 %1355, i8* %1352, align 1
  %1357 = trunc i32 %1354 to i8
  %1358 = lshr i32 %1346, 21
  %1359 = or i8 %1357, -128
  %1360 = getelementptr inbounds i8, i8* %1356, i64 1
  store i8 %1359, i8* %1356, align 1
  %1361 = trunc i32 %1358 to i8
  %1362 = lshr i32 %1346, 28
  %1363 = or i8 %1361, -128
  %1364 = getelementptr inbounds i8, i8* %1360, i64 1
  store i8 %1363, i8* %1360, align 1
  %1365 = trunc i32 %1362 to i8
  store i8 %1365, i8* %1364, align 1
  br label %1435

1366:                                             ; preds = %1337, %1423
  %1367 = phi i32 [ 0, %1337 ], [ %1432, %1423 ]
  %1368 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %1334, %1337 ], [ %1433, %1423 ]
  %1369 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %1368, align 8
  %1370 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %1369, i64 0, i32 2
  %1371 = load i32, i32* %1370, align 8
  %1372 = load i8*, i8** %8, align 8
  %1373 = getelementptr inbounds i8, i8* %1372, i64 5
  %1374 = load i8*, i8** %11, align 8
  %1375 = icmp ugt i8* %1373, %1374
  br i1 %1375, label %1376, label %1407

1376:                                             ; preds = %1366
  %1377 = load i64, i64* %1231, align 8
  %1378 = ptrtoint i8* %1374 to i64
  %1379 = sub i64 %1378, %1377
  %1380 = shl nsw i64 %1379, 1
  %1381 = add i64 %1380, 5
  %1382 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1338, align 8
  %1383 = add i64 %1380, 12
  %1384 = and i64 %1383, -8
  %1385 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1382, i64 0, i32 2
  %1386 = load i64, i64* %1385, align 8
  %1387 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1382, i64 0, i32 3
  %1388 = load i64, i64* %1387, align 8
  %1389 = sub i64 %1388, %1386
  %1390 = icmp ugt i64 %1384, %1389
  br i1 %1390, label %1391, label %1393, !prof !2

1391:                                             ; preds = %1376
  %1392 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1382, i64 %1384) #9
  br label %1395

1393:                                             ; preds = %1376
  %1394 = add i64 %1384, %1386
  store i64 %1394, i64* %1385, align 8
  br label %1395

1395:                                             ; preds = %1393, %1391
  %1396 = phi i64 [ %1392, %1391 ], [ %1386, %1393 ]
  %1397 = inttoptr i64 %1396 to i8*
  %1398 = load i8*, i8** %1230, align 8
  %1399 = load i64, i64* %1226, align 8
  %1400 = ptrtoint i8* %1398 to i64
  %1401 = sub i64 %1399, %1400
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1397, i8* align 1 %1398, i64 %1401, i1 false) #9
  %1402 = load i64, i64* %1226, align 8
  %1403 = load i64, i64* %1231, align 8
  %1404 = sub i64 %1402, %1403
  %1405 = getelementptr inbounds i8, i8* %1397, i64 %1404
  store i8* %1405, i8** %8, align 8
  store i8* %1397, i8** %1230, align 8
  %1406 = getelementptr inbounds i8, i8* %1397, i64 %1381
  store i8* %1406, i8** %11, align 8
  br label %1407

1407:                                             ; preds = %1395, %1366
  %1408 = phi i8* [ %1372, %1366 ], [ %1405, %1395 ]
  %1409 = icmp ugt i32 %1371, 127
  %1410 = trunc i32 %1371 to i8
  br i1 %1409, label %1411, label %1423

1411:                                             ; preds = %1407, %1411
  %1412 = phi i8* [ %1420, %1411 ], [ %1408, %1407 ]
  %1413 = phi i8 [ %1419, %1411 ], [ %1410, %1407 ]
  %1414 = phi i32 [ %1417, %1411 ], [ %1371, %1407 ]
  %1415 = or i8 %1413, -128
  %1416 = getelementptr inbounds i8, i8* %1412, i64 1
  store i8* %1416, i8** %8, align 8
  store i8 %1415, i8* %1412, align 1
  %1417 = lshr i32 %1414, 7
  %1418 = icmp ugt i32 %1414, 16383
  %1419 = trunc i32 %1417 to i8
  %1420 = load i8*, i8** %8, align 8
  br i1 %1418, label %1411, label %1421

1421:                                             ; preds = %1411
  %1422 = trunc i32 %1417 to i8
  br label %1423

1423:                                             ; preds = %1421, %1407
  %1424 = phi i8* [ %1408, %1407 ], [ %1420, %1421 ]
  %1425 = phi i8 [ %1410, %1407 ], [ %1422, %1421 ]
  %1426 = and i8 %1425, 127
  %1427 = getelementptr inbounds i8, i8* %1424, i64 1
  store i8* %1427, i8** %8, align 8
  store i8 %1426, i8* %1424, align 1
  %1428 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %1369, i64 0, i32 5, i32 1
  %1429 = load i64, i64* %1428, align 8
  %1430 = icmp ne i64 %1429, 0
  %1431 = zext i1 %1430 to i32
  %1432 = add i32 %1367, %1431
  %1433 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %1368, i64 1
  %1434 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %1433, %1335
  br i1 %1434, label %1339, label %1366

1435:                                             ; preds = %1175, %1339
  %1436 = phi i32 [ %1340, %1339 ], [ 0, %1175 ]
  %1437 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0
  %1438 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %1439 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %1438 to i64*
  %1440 = load i64, i64* %1439, align 8
  %1441 = bitcast %"class.std::__1::vector.50"* %1437 to i64*
  %1442 = load i64, i64* %1441, align 8
  %1443 = icmp eq i64 %1440, %1442
  br i1 %1443, label %1799, label %1444

1444:                                             ; preds = %1435
  %1445 = load i8*, i8** %8, align 8
  %1446 = getelementptr inbounds i8, i8* %1445, i64 1
  %1447 = load i8*, i8** %11, align 8
  %1448 = icmp ugt i8* %1446, %1447
  br i1 %1448, label %1451, label %1449

1449:                                             ; preds = %1444
  %1450 = bitcast i8** %8 to i64*
  br label %1486

1451:                                             ; preds = %1444
  %1452 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1453 = bitcast i8** %1452 to i64*
  %1454 = load i64, i64* %1453, align 8
  %1455 = ptrtoint i8* %1447 to i64
  %1456 = sub i64 %1455, %1454
  %1457 = shl nsw i64 %1456, 1
  %1458 = or i64 %1457, 1
  %1459 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1460 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1459, align 8
  %1461 = add i64 %1458, 7
  %1462 = and i64 %1461, -8
  %1463 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1460, i64 0, i32 2
  %1464 = load i64, i64* %1463, align 8
  %1465 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1460, i64 0, i32 3
  %1466 = load i64, i64* %1465, align 8
  %1467 = sub i64 %1466, %1464
  %1468 = icmp ugt i64 %1462, %1467
  br i1 %1468, label %1469, label %1471, !prof !2

1469:                                             ; preds = %1451
  %1470 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1460, i64 %1462) #9
  br label %1473

1471:                                             ; preds = %1451
  %1472 = add i64 %1462, %1464
  store i64 %1472, i64* %1463, align 8
  br label %1473

1473:                                             ; preds = %1471, %1469
  %1474 = phi i64 [ %1470, %1469 ], [ %1464, %1471 ]
  %1475 = inttoptr i64 %1474 to i8*
  %1476 = load i8*, i8** %1452, align 8
  %1477 = bitcast i8** %8 to i64*
  %1478 = load i64, i64* %1477, align 8
  %1479 = ptrtoint i8* %1476 to i64
  %1480 = sub i64 %1478, %1479
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1475, i8* align 1 %1476, i64 %1480, i1 false) #9
  %1481 = load i64, i64* %1477, align 8
  %1482 = load i64, i64* %1453, align 8
  %1483 = sub i64 %1481, %1482
  %1484 = getelementptr inbounds i8, i8* %1475, i64 %1483
  store i8* %1484, i8** %8, align 8
  store i8* %1475, i8** %1452, align 8
  %1485 = getelementptr inbounds i8, i8* %1475, i64 %1458
  store i8* %1485, i8** %11, align 8
  br label %1486

1486:                                             ; preds = %1449, %1473
  %1487 = phi i64* [ %1450, %1449 ], [ %1477, %1473 ]
  %1488 = phi i8* [ %1445, %1449 ], [ %1484, %1473 ]
  %1489 = getelementptr inbounds i8, i8* %1488, i64 1
  store i8* %1489, i8** %8, align 8
  store i8 4, i8* %1488, align 1
  %1490 = load i64, i64* %1487, align 8
  %1491 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1492 = bitcast i8** %1491 to i64*
  %1493 = load i64, i64* %1492, align 8
  %1494 = sub i64 %1490, %1493
  %1495 = inttoptr i64 %1490 to i8*
  %1496 = getelementptr inbounds i8, i8* %1495, i64 5
  %1497 = load i8*, i8** %11, align 8
  %1498 = icmp ugt i8* %1496, %1497
  br i1 %1498, label %1499, label %1530

1499:                                             ; preds = %1486
  %1500 = ptrtoint i8* %1497 to i64
  %1501 = sub i64 %1500, %1493
  %1502 = shl nsw i64 %1501, 1
  %1503 = add i64 %1502, 5
  %1504 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1505 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1504, align 8
  %1506 = add i64 %1502, 12
  %1507 = and i64 %1506, -8
  %1508 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1505, i64 0, i32 2
  %1509 = load i64, i64* %1508, align 8
  %1510 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1505, i64 0, i32 3
  %1511 = load i64, i64* %1510, align 8
  %1512 = sub i64 %1511, %1509
  %1513 = icmp ugt i64 %1507, %1512
  br i1 %1513, label %1514, label %1516, !prof !2

1514:                                             ; preds = %1499
  %1515 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1505, i64 %1507) #9
  br label %1518

1516:                                             ; preds = %1499
  %1517 = add i64 %1509, %1507
  store i64 %1517, i64* %1508, align 8
  br label %1518

1518:                                             ; preds = %1516, %1514
  %1519 = phi i64 [ %1515, %1514 ], [ %1509, %1516 ]
  %1520 = inttoptr i64 %1519 to i8*
  %1521 = load i8*, i8** %1491, align 8
  %1522 = load i64, i64* %1487, align 8
  %1523 = ptrtoint i8* %1521 to i64
  %1524 = sub i64 %1522, %1523
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1520, i8* align 1 %1521, i64 %1524, i1 false) #9
  %1525 = load i64, i64* %1487, align 8
  %1526 = load i64, i64* %1492, align 8
  %1527 = sub i64 %1525, %1526
  %1528 = getelementptr inbounds i8, i8* %1520, i64 %1527
  store i8* %1528, i8** %8, align 8
  store i8* %1520, i8** %1491, align 8
  %1529 = getelementptr inbounds i8, i8* %1520, i64 %1503
  store i8* %1529, i8** %11, align 8
  br label %1530

1530:                                             ; preds = %1486, %1518
  %1531 = phi i64 [ %1493, %1486 ], [ %1519, %1518 ]
  %1532 = phi i8* [ %1497, %1486 ], [ %1529, %1518 ]
  %1533 = phi i8* [ %1495, %1486 ], [ %1528, %1518 ]
  %1534 = getelementptr inbounds i8, i8* %1533, i64 5
  store i8* %1534, i8** %8, align 8
  %1535 = load i64, i64* %1439, align 8
  %1536 = load i64, i64* %1441, align 8
  %1537 = sub i64 %1535, %1536
  %1538 = sdiv exact i64 %1537, 48
  %1539 = getelementptr inbounds i8, i8* %1533, i64 10
  %1540 = icmp ugt i8* %1539, %1532
  br i1 %1540, label %1541, label %1572

1541:                                             ; preds = %1530
  %1542 = ptrtoint i8* %1532 to i64
  %1543 = sub i64 %1542, %1531
  %1544 = shl nsw i64 %1543, 1
  %1545 = add i64 %1544, 5
  %1546 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1547 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1546, align 8
  %1548 = add i64 %1544, 12
  %1549 = and i64 %1548, -8
  %1550 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1547, i64 0, i32 2
  %1551 = load i64, i64* %1550, align 8
  %1552 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1547, i64 0, i32 3
  %1553 = load i64, i64* %1552, align 8
  %1554 = sub i64 %1553, %1551
  %1555 = icmp ugt i64 %1549, %1554
  br i1 %1555, label %1556, label %1558, !prof !2

1556:                                             ; preds = %1541
  %1557 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1547, i64 %1549) #9
  br label %1560

1558:                                             ; preds = %1541
  %1559 = add i64 %1549, %1551
  store i64 %1559, i64* %1550, align 8
  br label %1560

1560:                                             ; preds = %1558, %1556
  %1561 = phi i64 [ %1557, %1556 ], [ %1551, %1558 ]
  %1562 = inttoptr i64 %1561 to i8*
  %1563 = load i8*, i8** %1491, align 8
  %1564 = load i64, i64* %1487, align 8
  %1565 = ptrtoint i8* %1563 to i64
  %1566 = sub i64 %1564, %1565
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1562, i8* align 1 %1563, i64 %1566, i1 false) #9
  %1567 = load i64, i64* %1487, align 8
  %1568 = load i64, i64* %1492, align 8
  %1569 = sub i64 %1567, %1568
  %1570 = getelementptr inbounds i8, i8* %1562, i64 %1569
  store i8* %1570, i8** %8, align 8
  store i8* %1562, i8** %1491, align 8
  %1571 = getelementptr inbounds i8, i8* %1562, i64 %1545
  store i8* %1571, i8** %11, align 8
  br label %1572

1572:                                             ; preds = %1560, %1530
  %1573 = phi i8* [ %1534, %1530 ], [ %1570, %1560 ]
  %1574 = trunc i64 %1538 to i32
  %1575 = icmp ugt i32 %1574, 127
  %1576 = trunc i64 %1538 to i8
  br i1 %1575, label %1577, label %1589

1577:                                             ; preds = %1572, %1577
  %1578 = phi i8* [ %1586, %1577 ], [ %1573, %1572 ]
  %1579 = phi i8 [ %1585, %1577 ], [ %1576, %1572 ]
  %1580 = phi i32 [ %1583, %1577 ], [ %1574, %1572 ]
  %1581 = or i8 %1579, -128
  %1582 = getelementptr inbounds i8, i8* %1578, i64 1
  store i8* %1582, i8** %8, align 8
  store i8 %1581, i8* %1578, align 1
  %1583 = lshr i32 %1580, 7
  %1584 = icmp ugt i32 %1580, 16383
  %1585 = trunc i32 %1583 to i8
  %1586 = load i8*, i8** %8, align 8
  br i1 %1584, label %1577, label %1587

1587:                                             ; preds = %1577
  %1588 = trunc i32 %1583 to i8
  br label %1589

1589:                                             ; preds = %1587, %1572
  %1590 = phi i8* [ %1573, %1572 ], [ %1586, %1587 ]
  %1591 = phi i8 [ %1576, %1572 ], [ %1588, %1587 ]
  %1592 = and i8 %1591, 127
  %1593 = getelementptr inbounds i8, i8* %1590, i64 1
  store i8* %1593, i8** %8, align 8
  store i8 %1592, i8* %1590, align 1
  %1594 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %1437, i64 0, i32 0, i32 0
  %1595 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %1594, align 8
  %1596 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %1438, align 8
  %1597 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1595, %1596
  br i1 %1597, label %1600, label %1598

1598:                                             ; preds = %1589
  %1599 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %1626

1600:                                             ; preds = %1796, %1589
  %1601 = load i64, i64* %1487, align 8
  %1602 = load i64, i64* %1492, align 8
  %1603 = sub i64 %1601, %1494
  %1604 = sub i64 %1603, %1602
  %1605 = trunc i64 %1604 to i32
  %1606 = add i32 %1605, -5
  %1607 = inttoptr i64 %1602 to i8*
  %1608 = getelementptr inbounds i8, i8* %1607, i64 %1494
  %1609 = trunc i32 %1606 to i8
  %1610 = lshr i32 %1606, 7
  %1611 = or i8 %1609, -128
  %1612 = getelementptr inbounds i8, i8* %1608, i64 1
  store i8 %1611, i8* %1608, align 1
  %1613 = trunc i32 %1610 to i8
  %1614 = lshr i32 %1606, 14
  %1615 = or i8 %1613, -128
  %1616 = getelementptr inbounds i8, i8* %1612, i64 1
  store i8 %1615, i8* %1612, align 1
  %1617 = trunc i32 %1614 to i8
  %1618 = lshr i32 %1606, 21
  %1619 = or i8 %1617, -128
  %1620 = getelementptr inbounds i8, i8* %1616, i64 1
  store i8 %1619, i8* %1616, align 1
  %1621 = trunc i32 %1618 to i8
  %1622 = lshr i32 %1606, 28
  %1623 = or i8 %1621, -128
  %1624 = getelementptr inbounds i8, i8* %1620, i64 1
  store i8 %1623, i8* %1620, align 1
  %1625 = trunc i32 %1622 to i8
  store i8 %1625, i8* %1624, align 1
  br label %1799

1626:                                             ; preds = %1598, %1796
  %1627 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %1595, %1598 ], [ %1797, %1796 ]
  %1628 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 0
  tail call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* dereferenceable(4) %1628)
  %1629 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 3
  %1630 = load i8, i8* %1629, align 4, !range !34
  %1631 = load i8*, i8** %8, align 8
  %1632 = getelementptr inbounds i8, i8* %1631, i64 1
  %1633 = load i8*, i8** %11, align 8
  %1634 = icmp ugt i8* %1632, %1633
  br i1 %1634, label %1635, label %1666

1635:                                             ; preds = %1626
  %1636 = load i64, i64* %1492, align 8
  %1637 = ptrtoint i8* %1633 to i64
  %1638 = sub i64 %1637, %1636
  %1639 = shl nsw i64 %1638, 1
  %1640 = or i64 %1639, 1
  %1641 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1599, align 8
  %1642 = add i64 %1640, 7
  %1643 = and i64 %1642, -8
  %1644 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1641, i64 0, i32 2
  %1645 = load i64, i64* %1644, align 8
  %1646 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1641, i64 0, i32 3
  %1647 = load i64, i64* %1646, align 8
  %1648 = sub i64 %1647, %1645
  %1649 = icmp ugt i64 %1643, %1648
  br i1 %1649, label %1650, label %1652, !prof !2

1650:                                             ; preds = %1635
  %1651 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1641, i64 %1643) #9
  br label %1654

1652:                                             ; preds = %1635
  %1653 = add i64 %1643, %1645
  store i64 %1653, i64* %1644, align 8
  br label %1654

1654:                                             ; preds = %1652, %1650
  %1655 = phi i64 [ %1651, %1650 ], [ %1645, %1652 ]
  %1656 = inttoptr i64 %1655 to i8*
  %1657 = load i8*, i8** %1491, align 8
  %1658 = load i64, i64* %1487, align 8
  %1659 = ptrtoint i8* %1657 to i64
  %1660 = sub i64 %1658, %1659
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1656, i8* align 1 %1657, i64 %1660, i1 false) #9
  %1661 = load i64, i64* %1487, align 8
  %1662 = load i64, i64* %1492, align 8
  %1663 = sub i64 %1661, %1662
  %1664 = getelementptr inbounds i8, i8* %1656, i64 %1663
  store i8* %1664, i8** %8, align 8
  store i8* %1656, i8** %1491, align 8
  %1665 = getelementptr inbounds i8, i8* %1656, i64 %1640
  store i8* %1665, i8** %11, align 8
  br label %1666

1666:                                             ; preds = %1626, %1654
  %1667 = phi i8* [ %1631, %1626 ], [ %1664, %1654 ]
  %1668 = getelementptr inbounds i8, i8* %1667, i64 1
  store i8* %1668, i8** %8, align 8
  store i8 %1630, i8* %1667, align 1
  %1669 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 1
  %1670 = load i32, i32* %1669, align 4
  %1671 = trunc i32 %1670 to i8
  %1672 = load i8*, i8** %8, align 8
  %1673 = getelementptr inbounds i8, i8* %1672, i64 5
  %1674 = load i8*, i8** %11, align 8
  %1675 = icmp ugt i8* %1673, %1674
  br i1 %1675, label %1676, label %1707

1676:                                             ; preds = %1666
  %1677 = load i64, i64* %1492, align 8
  %1678 = ptrtoint i8* %1674 to i64
  %1679 = sub i64 %1678, %1677
  %1680 = shl nsw i64 %1679, 1
  %1681 = add i64 %1680, 5
  %1682 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1599, align 8
  %1683 = add i64 %1680, 12
  %1684 = and i64 %1683, -8
  %1685 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1682, i64 0, i32 2
  %1686 = load i64, i64* %1685, align 8
  %1687 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1682, i64 0, i32 3
  %1688 = load i64, i64* %1687, align 8
  %1689 = sub i64 %1688, %1686
  %1690 = icmp ugt i64 %1684, %1689
  br i1 %1690, label %1691, label %1693, !prof !2

1691:                                             ; preds = %1676
  %1692 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1682, i64 %1684) #9
  br label %1695

1693:                                             ; preds = %1676
  %1694 = add i64 %1684, %1686
  store i64 %1694, i64* %1685, align 8
  br label %1695

1695:                                             ; preds = %1693, %1691
  %1696 = phi i64 [ %1692, %1691 ], [ %1686, %1693 ]
  %1697 = inttoptr i64 %1696 to i8*
  %1698 = load i8*, i8** %1491, align 8
  %1699 = load i64, i64* %1487, align 8
  %1700 = ptrtoint i8* %1698 to i64
  %1701 = sub i64 %1699, %1700
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1697, i8* align 1 %1698, i64 %1701, i1 false) #9
  %1702 = load i64, i64* %1487, align 8
  %1703 = load i64, i64* %1492, align 8
  %1704 = sub i64 %1702, %1703
  %1705 = getelementptr inbounds i8, i8* %1697, i64 %1704
  store i8* %1705, i8** %8, align 8
  store i8* %1697, i8** %1491, align 8
  %1706 = getelementptr inbounds i8, i8* %1697, i64 %1681
  store i8* %1706, i8** %11, align 8
  br label %1707

1707:                                             ; preds = %1695, %1666
  %1708 = phi i8* [ %1672, %1666 ], [ %1705, %1695 ]
  %1709 = icmp ugt i32 %1670, 127
  br i1 %1709, label %1710, label %1722

1710:                                             ; preds = %1707, %1710
  %1711 = phi i8* [ %1719, %1710 ], [ %1708, %1707 ]
  %1712 = phi i8 [ %1718, %1710 ], [ %1671, %1707 ]
  %1713 = phi i32 [ %1716, %1710 ], [ %1670, %1707 ]
  %1714 = or i8 %1712, -128
  %1715 = getelementptr inbounds i8, i8* %1711, i64 1
  store i8* %1715, i8** %8, align 8
  store i8 %1714, i8* %1711, align 1
  %1716 = lshr i32 %1713, 7
  %1717 = icmp ugt i32 %1713, 16383
  %1718 = trunc i32 %1716 to i8
  %1719 = load i8*, i8** %8, align 8
  br i1 %1717, label %1710, label %1720

1720:                                             ; preds = %1710
  %1721 = trunc i32 %1716 to i8
  br label %1722

1722:                                             ; preds = %1720, %1707
  %1723 = phi i8* [ %1708, %1707 ], [ %1719, %1720 ]
  %1724 = phi i8 [ %1671, %1707 ], [ %1721, %1720 ]
  %1725 = and i8 %1724, 127
  %1726 = getelementptr inbounds i8, i8* %1723, i64 1
  store i8* %1726, i8** %8, align 8
  store i8 %1725, i8* %1723, align 1
  %1727 = load i8, i8* %1629, align 4, !range !34
  %1728 = icmp eq i8 %1727, 0
  br i1 %1728, label %1788, label %1729

1729:                                             ; preds = %1722
  %1730 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 2
  %1731 = load i32, i32* %1730, align 8
  %1732 = trunc i32 %1731 to i8
  %1733 = load i8*, i8** %8, align 8
  %1734 = getelementptr inbounds i8, i8* %1733, i64 5
  %1735 = load i8*, i8** %11, align 8
  %1736 = icmp ugt i8* %1734, %1735
  br i1 %1736, label %1737, label %1768

1737:                                             ; preds = %1729
  %1738 = load i64, i64* %1492, align 8
  %1739 = ptrtoint i8* %1735 to i64
  %1740 = sub i64 %1739, %1738
  %1741 = shl nsw i64 %1740, 1
  %1742 = add i64 %1741, 5
  %1743 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1599, align 8
  %1744 = add i64 %1741, 12
  %1745 = and i64 %1744, -8
  %1746 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1743, i64 0, i32 2
  %1747 = load i64, i64* %1746, align 8
  %1748 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1743, i64 0, i32 3
  %1749 = load i64, i64* %1748, align 8
  %1750 = sub i64 %1749, %1747
  %1751 = icmp ugt i64 %1745, %1750
  br i1 %1751, label %1752, label %1754, !prof !2

1752:                                             ; preds = %1737
  %1753 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1743, i64 %1745) #9
  br label %1756

1754:                                             ; preds = %1737
  %1755 = add i64 %1745, %1747
  store i64 %1755, i64* %1746, align 8
  br label %1756

1756:                                             ; preds = %1754, %1752
  %1757 = phi i64 [ %1753, %1752 ], [ %1747, %1754 ]
  %1758 = inttoptr i64 %1757 to i8*
  %1759 = load i8*, i8** %1491, align 8
  %1760 = load i64, i64* %1487, align 8
  %1761 = ptrtoint i8* %1759 to i64
  %1762 = sub i64 %1760, %1761
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1758, i8* align 1 %1759, i64 %1762, i1 false) #9
  %1763 = load i64, i64* %1487, align 8
  %1764 = load i64, i64* %1492, align 8
  %1765 = sub i64 %1763, %1764
  %1766 = getelementptr inbounds i8, i8* %1758, i64 %1765
  store i8* %1766, i8** %8, align 8
  store i8* %1758, i8** %1491, align 8
  %1767 = getelementptr inbounds i8, i8* %1758, i64 %1742
  store i8* %1767, i8** %11, align 8
  br label %1768

1768:                                             ; preds = %1756, %1729
  %1769 = phi i8* [ %1733, %1729 ], [ %1766, %1756 ]
  %1770 = icmp ugt i32 %1731, 127
  br i1 %1770, label %1771, label %1783

1771:                                             ; preds = %1768, %1771
  %1772 = phi i8* [ %1780, %1771 ], [ %1769, %1768 ]
  %1773 = phi i8 [ %1779, %1771 ], [ %1732, %1768 ]
  %1774 = phi i32 [ %1777, %1771 ], [ %1731, %1768 ]
  %1775 = or i8 %1773, -128
  %1776 = getelementptr inbounds i8, i8* %1772, i64 1
  store i8* %1776, i8** %8, align 8
  store i8 %1775, i8* %1772, align 1
  %1777 = lshr i32 %1774, 7
  %1778 = icmp ugt i32 %1774, 16383
  %1779 = trunc i32 %1777 to i8
  %1780 = load i8*, i8** %8, align 8
  br i1 %1778, label %1771, label %1781

1781:                                             ; preds = %1771
  %1782 = trunc i32 %1777 to i8
  br label %1783

1783:                                             ; preds = %1781, %1768
  %1784 = phi i8* [ %1769, %1768 ], [ %1780, %1781 ]
  %1785 = phi i8 [ %1732, %1768 ], [ %1782, %1781 ]
  %1786 = and i8 %1785, 127
  %1787 = getelementptr inbounds i8, i8* %1784, i64 1
  store i8* %1787, i8** %8, align 8
  store i8 %1786, i8* %1784, align 1
  br label %1788

1788:                                             ; preds = %1722, %1783
  %1789 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 4, i32 1
  %1790 = load i32, i32* %1789, align 8
  %1791 = icmp eq i32 %1790, 0
  br i1 %1791, label %1796, label %1792

1792:                                             ; preds = %1788
  %1793 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 4
  %1794 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 0, i32 0, i32 0
  %1795 = load i32, i32* %1794, align 8
  tail call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::WasmInitExpr"* dereferenceable(32) %1793, i32 %1795)
  br label %1796

1796:                                             ; preds = %1788, %1792
  %1797 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1627, i64 1
  %1798 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1797, %1596
  br i1 %1798, label %1600, label %1626

1799:                                             ; preds = %1435, %1600
  %1800 = load i8*, i8** %8, align 8
  %1801 = getelementptr inbounds i8, i8* %1800, i64 1
  %1802 = load i8*, i8** %11, align 8
  %1803 = icmp ugt i8* %1801, %1802
  br i1 %1803, label %1806, label %1804

1804:                                             ; preds = %1799
  %1805 = bitcast i8** %8 to i64*
  br label %1841

1806:                                             ; preds = %1799
  %1807 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1808 = bitcast i8** %1807 to i64*
  %1809 = load i64, i64* %1808, align 8
  %1810 = ptrtoint i8* %1802 to i64
  %1811 = sub i64 %1810, %1809
  %1812 = shl nsw i64 %1811, 1
  %1813 = or i64 %1812, 1
  %1814 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1815 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1814, align 8
  %1816 = add i64 %1813, 7
  %1817 = and i64 %1816, -8
  %1818 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1815, i64 0, i32 2
  %1819 = load i64, i64* %1818, align 8
  %1820 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1815, i64 0, i32 3
  %1821 = load i64, i64* %1820, align 8
  %1822 = sub i64 %1821, %1819
  %1823 = icmp ugt i64 %1817, %1822
  br i1 %1823, label %1824, label %1826, !prof !2

1824:                                             ; preds = %1806
  %1825 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1815, i64 %1817) #9
  br label %1828

1826:                                             ; preds = %1806
  %1827 = add i64 %1817, %1819
  store i64 %1827, i64* %1818, align 8
  br label %1828

1828:                                             ; preds = %1826, %1824
  %1829 = phi i64 [ %1825, %1824 ], [ %1819, %1826 ]
  %1830 = inttoptr i64 %1829 to i8*
  %1831 = load i8*, i8** %1807, align 8
  %1832 = bitcast i8** %8 to i64*
  %1833 = load i64, i64* %1832, align 8
  %1834 = ptrtoint i8* %1831 to i64
  %1835 = sub i64 %1833, %1834
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1830, i8* align 1 %1831, i64 %1835, i1 false) #9
  %1836 = load i64, i64* %1832, align 8
  %1837 = load i64, i64* %1808, align 8
  %1838 = sub i64 %1836, %1837
  %1839 = getelementptr inbounds i8, i8* %1830, i64 %1838
  store i8* %1839, i8** %8, align 8
  store i8* %1830, i8** %1807, align 8
  %1840 = getelementptr inbounds i8, i8* %1830, i64 %1813
  store i8* %1840, i8** %11, align 8
  br label %1841

1841:                                             ; preds = %1804, %1828
  %1842 = phi i64* [ %1805, %1804 ], [ %1832, %1828 ]
  %1843 = phi i8* [ %1800, %1804 ], [ %1839, %1828 ]
  %1844 = getelementptr inbounds i8, i8* %1843, i64 1
  store i8* %1844, i8** %8, align 8
  store i8 5, i8* %1843, align 1
  %1845 = load i64, i64* %1842, align 8
  %1846 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %1847 = bitcast i8** %1846 to i64*
  %1848 = load i64, i64* %1847, align 8
  %1849 = sub i64 %1845, %1848
  %1850 = inttoptr i64 %1845 to i8*
  %1851 = getelementptr inbounds i8, i8* %1850, i64 5
  %1852 = load i8*, i8** %11, align 8
  %1853 = icmp ugt i8* %1851, %1852
  br i1 %1853, label %1854, label %1885

1854:                                             ; preds = %1841
  %1855 = ptrtoint i8* %1852 to i64
  %1856 = sub i64 %1855, %1848
  %1857 = shl nsw i64 %1856, 1
  %1858 = add i64 %1857, 5
  %1859 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1860 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1859, align 8
  %1861 = add i64 %1857, 12
  %1862 = and i64 %1861, -8
  %1863 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1860, i64 0, i32 2
  %1864 = load i64, i64* %1863, align 8
  %1865 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1860, i64 0, i32 3
  %1866 = load i64, i64* %1865, align 8
  %1867 = sub i64 %1866, %1864
  %1868 = icmp ugt i64 %1862, %1867
  br i1 %1868, label %1869, label %1871, !prof !2

1869:                                             ; preds = %1854
  %1870 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1860, i64 %1862) #9
  br label %1873

1871:                                             ; preds = %1854
  %1872 = add i64 %1864, %1862
  store i64 %1872, i64* %1863, align 8
  br label %1873

1873:                                             ; preds = %1871, %1869
  %1874 = phi i64 [ %1870, %1869 ], [ %1864, %1871 ]
  %1875 = inttoptr i64 %1874 to i8*
  %1876 = load i8*, i8** %1846, align 8
  %1877 = load i64, i64* %1842, align 8
  %1878 = ptrtoint i8* %1876 to i64
  %1879 = sub i64 %1877, %1878
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1875, i8* align 1 %1876, i64 %1879, i1 false) #9
  %1880 = load i64, i64* %1842, align 8
  %1881 = load i64, i64* %1847, align 8
  %1882 = sub i64 %1880, %1881
  %1883 = getelementptr inbounds i8, i8* %1875, i64 %1882
  store i8* %1883, i8** %8, align 8
  store i8* %1875, i8** %1846, align 8
  %1884 = getelementptr inbounds i8, i8* %1875, i64 %1858
  store i8* %1884, i8** %11, align 8
  br label %1885

1885:                                             ; preds = %1841, %1873
  %1886 = phi i64 [ %1848, %1841 ], [ %1874, %1873 ]
  %1887 = phi i8* [ %1852, %1841 ], [ %1884, %1873 ]
  %1888 = phi i8* [ %1850, %1841 ], [ %1883, %1873 ]
  %1889 = getelementptr inbounds i8, i8* %1888, i64 5
  store i8* %1889, i8** %8, align 8
  %1890 = getelementptr inbounds i8, i8* %1888, i64 6
  %1891 = icmp ugt i8* %1890, %1887
  br i1 %1891, label %1892, label %1923

1892:                                             ; preds = %1885
  %1893 = ptrtoint i8* %1887 to i64
  %1894 = sub i64 %1893, %1886
  %1895 = shl nsw i64 %1894, 1
  %1896 = or i64 %1895, 1
  %1897 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1898 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1897, align 8
  %1899 = add i64 %1896, 7
  %1900 = and i64 %1899, -8
  %1901 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1898, i64 0, i32 2
  %1902 = load i64, i64* %1901, align 8
  %1903 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1898, i64 0, i32 3
  %1904 = load i64, i64* %1903, align 8
  %1905 = sub i64 %1904, %1902
  %1906 = icmp ugt i64 %1900, %1905
  br i1 %1906, label %1907, label %1909, !prof !2

1907:                                             ; preds = %1892
  %1908 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1898, i64 %1900) #9
  br label %1911

1909:                                             ; preds = %1892
  %1910 = add i64 %1900, %1902
  store i64 %1910, i64* %1901, align 8
  br label %1911

1911:                                             ; preds = %1909, %1907
  %1912 = phi i64 [ %1908, %1907 ], [ %1902, %1909 ]
  %1913 = inttoptr i64 %1912 to i8*
  %1914 = load i8*, i8** %1846, align 8
  %1915 = load i64, i64* %1842, align 8
  %1916 = ptrtoint i8* %1914 to i64
  %1917 = sub i64 %1915, %1916
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1913, i8* align 1 %1914, i64 %1917, i1 false) #9
  %1918 = load i64, i64* %1842, align 8
  %1919 = load i64, i64* %1847, align 8
  %1920 = sub i64 %1918, %1919
  %1921 = getelementptr inbounds i8, i8* %1913, i64 %1920
  store i8* %1921, i8** %8, align 8
  store i8* %1913, i8** %1846, align 8
  %1922 = getelementptr inbounds i8, i8* %1913, i64 %1896
  store i8* %1922, i8** %11, align 8
  br label %1923

1923:                                             ; preds = %1885, %1911
  %1924 = phi i8* [ %1889, %1885 ], [ %1921, %1911 ]
  %1925 = getelementptr inbounds i8, i8* %1924, i64 1
  store i8* %1925, i8** %8, align 8
  store i8 1, i8* %1924, align 1
  %1926 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 17
  %1927 = load i8, i8* %1926, align 1, !range !34
  %1928 = icmp eq i8 %1927, 0
  %1929 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 16
  %1930 = load i8, i8* %1929, align 8, !range !34
  br i1 %1928, label %1973, label %1931

1931:                                             ; preds = %1923
  %1932 = icmp eq i8 %1930, 0
  %1933 = select i1 %1932, i8 2, i8 3
  %1934 = load i8*, i8** %8, align 8
  %1935 = getelementptr inbounds i8, i8* %1934, i64 1
  %1936 = load i8*, i8** %11, align 8
  %1937 = icmp ugt i8* %1935, %1936
  br i1 %1937, label %1938, label %1970

1938:                                             ; preds = %1931
  %1939 = load i64, i64* %1847, align 8
  %1940 = ptrtoint i8* %1936 to i64
  %1941 = sub i64 %1940, %1939
  %1942 = shl nsw i64 %1941, 1
  %1943 = or i64 %1942, 1
  %1944 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1945 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1944, align 8
  %1946 = add i64 %1943, 7
  %1947 = and i64 %1946, -8
  %1948 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1945, i64 0, i32 2
  %1949 = load i64, i64* %1948, align 8
  %1950 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1945, i64 0, i32 3
  %1951 = load i64, i64* %1950, align 8
  %1952 = sub i64 %1951, %1949
  %1953 = icmp ugt i64 %1947, %1952
  br i1 %1953, label %1954, label %1956, !prof !2

1954:                                             ; preds = %1938
  %1955 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1945, i64 %1947) #9
  br label %1958

1956:                                             ; preds = %1938
  %1957 = add i64 %1947, %1949
  store i64 %1957, i64* %1948, align 8
  br label %1958

1958:                                             ; preds = %1956, %1954
  %1959 = phi i64 [ %1955, %1954 ], [ %1949, %1956 ]
  %1960 = inttoptr i64 %1959 to i8*
  %1961 = load i8*, i8** %1846, align 8
  %1962 = load i64, i64* %1842, align 8
  %1963 = ptrtoint i8* %1961 to i64
  %1964 = sub i64 %1962, %1963
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1960, i8* align 1 %1961, i64 %1964, i1 false) #9
  %1965 = load i64, i64* %1842, align 8
  %1966 = load i64, i64* %1847, align 8
  %1967 = sub i64 %1965, %1966
  %1968 = getelementptr inbounds i8, i8* %1960, i64 %1967
  store i8* %1968, i8** %8, align 8
  store i8* %1960, i8** %1846, align 8
  %1969 = getelementptr inbounds i8, i8* %1960, i64 %1943
  store i8* %1969, i8** %11, align 8
  br label %1970

1970:                                             ; preds = %1931, %1958
  %1971 = phi i8* [ %1934, %1931 ], [ %1968, %1958 ]
  %1972 = getelementptr inbounds i8, i8* %1971, i64 1
  store i8* %1972, i8** %8, align 8
  store i8 %1933, i8* %1971, align 1
  br label %2013

1973:                                             ; preds = %1923
  %1974 = load i8*, i8** %8, align 8
  %1975 = getelementptr inbounds i8, i8* %1974, i64 1
  %1976 = load i8*, i8** %11, align 8
  %1977 = icmp ugt i8* %1975, %1976
  br i1 %1977, label %1978, label %2010

1978:                                             ; preds = %1973
  %1979 = load i64, i64* %1847, align 8
  %1980 = ptrtoint i8* %1976 to i64
  %1981 = sub i64 %1980, %1979
  %1982 = shl nsw i64 %1981, 1
  %1983 = or i64 %1982, 1
  %1984 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %1985 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1984, align 8
  %1986 = add i64 %1983, 7
  %1987 = and i64 %1986, -8
  %1988 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1985, i64 0, i32 2
  %1989 = load i64, i64* %1988, align 8
  %1990 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1985, i64 0, i32 3
  %1991 = load i64, i64* %1990, align 8
  %1992 = sub i64 %1991, %1989
  %1993 = icmp ugt i64 %1987, %1992
  br i1 %1993, label %1994, label %1996, !prof !2

1994:                                             ; preds = %1978
  %1995 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1985, i64 %1987) #9
  br label %1998

1996:                                             ; preds = %1978
  %1997 = add i64 %1987, %1989
  store i64 %1997, i64* %1988, align 8
  br label %1998

1998:                                             ; preds = %1996, %1994
  %1999 = phi i64 [ %1995, %1994 ], [ %1989, %1996 ]
  %2000 = inttoptr i64 %1999 to i8*
  %2001 = load i8*, i8** %1846, align 8
  %2002 = load i64, i64* %1842, align 8
  %2003 = ptrtoint i8* %2001 to i64
  %2004 = sub i64 %2002, %2003
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2000, i8* align 1 %2001, i64 %2004, i1 false) #9
  %2005 = load i64, i64* %1842, align 8
  %2006 = load i64, i64* %1847, align 8
  %2007 = sub i64 %2005, %2006
  %2008 = getelementptr inbounds i8, i8* %2000, i64 %2007
  store i8* %2008, i8** %8, align 8
  store i8* %2000, i8** %1846, align 8
  %2009 = getelementptr inbounds i8, i8* %2000, i64 %1983
  store i8* %2009, i8** %11, align 8
  br label %2010

2010:                                             ; preds = %1973, %1998
  %2011 = phi i8* [ %1974, %1973 ], [ %2008, %1998 ]
  %2012 = getelementptr inbounds i8, i8* %2011, i64 1
  store i8* %2012, i8** %8, align 8
  store i8 %1930, i8* %2011, align 1
  br label %2013

2013:                                             ; preds = %2010, %1970
  %2014 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 14
  %2015 = load i32, i32* %2014, align 8
  %2016 = load i8*, i8** %8, align 8
  %2017 = getelementptr inbounds i8, i8* %2016, i64 5
  %2018 = load i8*, i8** %11, align 8
  %2019 = icmp ugt i8* %2017, %2018
  br i1 %2019, label %2020, label %2052

2020:                                             ; preds = %2013
  %2021 = load i64, i64* %1847, align 8
  %2022 = ptrtoint i8* %2018 to i64
  %2023 = sub i64 %2022, %2021
  %2024 = shl nsw i64 %2023, 1
  %2025 = add i64 %2024, 5
  %2026 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2027 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2026, align 8
  %2028 = add i64 %2024, 12
  %2029 = and i64 %2028, -8
  %2030 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2027, i64 0, i32 2
  %2031 = load i64, i64* %2030, align 8
  %2032 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2027, i64 0, i32 3
  %2033 = load i64, i64* %2032, align 8
  %2034 = sub i64 %2033, %2031
  %2035 = icmp ugt i64 %2029, %2034
  br i1 %2035, label %2036, label %2038, !prof !2

2036:                                             ; preds = %2020
  %2037 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2027, i64 %2029) #9
  br label %2040

2038:                                             ; preds = %2020
  %2039 = add i64 %2029, %2031
  store i64 %2039, i64* %2030, align 8
  br label %2040

2040:                                             ; preds = %2038, %2036
  %2041 = phi i64 [ %2037, %2036 ], [ %2031, %2038 ]
  %2042 = inttoptr i64 %2041 to i8*
  %2043 = load i8*, i8** %1846, align 8
  %2044 = load i64, i64* %1842, align 8
  %2045 = ptrtoint i8* %2043 to i64
  %2046 = sub i64 %2044, %2045
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2042, i8* align 1 %2043, i64 %2046, i1 false) #9
  %2047 = load i64, i64* %1842, align 8
  %2048 = load i64, i64* %1847, align 8
  %2049 = sub i64 %2047, %2048
  %2050 = getelementptr inbounds i8, i8* %2042, i64 %2049
  store i8* %2050, i8** %8, align 8
  store i8* %2042, i8** %1846, align 8
  %2051 = getelementptr inbounds i8, i8* %2042, i64 %2025
  store i8* %2051, i8** %11, align 8
  br label %2052

2052:                                             ; preds = %2040, %2013
  %2053 = phi i8* [ %2016, %2013 ], [ %2050, %2040 ]
  %2054 = icmp ugt i32 %2015, 127
  %2055 = trunc i32 %2015 to i8
  br i1 %2054, label %2056, label %2068

2056:                                             ; preds = %2052, %2056
  %2057 = phi i8* [ %2065, %2056 ], [ %2053, %2052 ]
  %2058 = phi i8 [ %2064, %2056 ], [ %2055, %2052 ]
  %2059 = phi i32 [ %2062, %2056 ], [ %2015, %2052 ]
  %2060 = or i8 %2058, -128
  %2061 = getelementptr inbounds i8, i8* %2057, i64 1
  store i8* %2061, i8** %8, align 8
  store i8 %2060, i8* %2057, align 1
  %2062 = lshr i32 %2059, 7
  %2063 = icmp ugt i32 %2059, 16383
  %2064 = trunc i32 %2062 to i8
  %2065 = load i8*, i8** %8, align 8
  br i1 %2063, label %2056, label %2066

2066:                                             ; preds = %2056
  %2067 = trunc i32 %2062 to i8
  br label %2068

2068:                                             ; preds = %2066, %2052
  %2069 = phi i8* [ %2053, %2052 ], [ %2065, %2066 ]
  %2070 = phi i8 [ %2055, %2052 ], [ %2067, %2066 ]
  %2071 = and i8 %2070, 127
  %2072 = getelementptr inbounds i8, i8* %2069, i64 1
  store i8* %2072, i8** %8, align 8
  store i8 %2071, i8* %2069, align 1
  %2073 = load i8, i8* %1929, align 8, !range !34
  %2074 = icmp eq i8 %2073, 0
  br i1 %2074, label %2135, label %2075

2075:                                             ; preds = %2068
  %2076 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 15
  %2077 = load i32, i32* %2076, align 4
  %2078 = load i8*, i8** %8, align 8
  %2079 = getelementptr inbounds i8, i8* %2078, i64 5
  %2080 = load i8*, i8** %11, align 8
  %2081 = icmp ugt i8* %2079, %2080
  br i1 %2081, label %2082, label %2114

2082:                                             ; preds = %2075
  %2083 = load i64, i64* %1847, align 8
  %2084 = ptrtoint i8* %2080 to i64
  %2085 = sub i64 %2084, %2083
  %2086 = shl nsw i64 %2085, 1
  %2087 = add i64 %2086, 5
  %2088 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2089 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2088, align 8
  %2090 = add i64 %2086, 12
  %2091 = and i64 %2090, -8
  %2092 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2089, i64 0, i32 2
  %2093 = load i64, i64* %2092, align 8
  %2094 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2089, i64 0, i32 3
  %2095 = load i64, i64* %2094, align 8
  %2096 = sub i64 %2095, %2093
  %2097 = icmp ugt i64 %2091, %2096
  br i1 %2097, label %2098, label %2100, !prof !2

2098:                                             ; preds = %2082
  %2099 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2089, i64 %2091) #9
  br label %2102

2100:                                             ; preds = %2082
  %2101 = add i64 %2091, %2093
  store i64 %2101, i64* %2092, align 8
  br label %2102

2102:                                             ; preds = %2100, %2098
  %2103 = phi i64 [ %2099, %2098 ], [ %2093, %2100 ]
  %2104 = inttoptr i64 %2103 to i8*
  %2105 = load i8*, i8** %1846, align 8
  %2106 = load i64, i64* %1842, align 8
  %2107 = ptrtoint i8* %2105 to i64
  %2108 = sub i64 %2106, %2107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2104, i8* align 1 %2105, i64 %2108, i1 false) #9
  %2109 = load i64, i64* %1842, align 8
  %2110 = load i64, i64* %1847, align 8
  %2111 = sub i64 %2109, %2110
  %2112 = getelementptr inbounds i8, i8* %2104, i64 %2111
  store i8* %2112, i8** %8, align 8
  store i8* %2104, i8** %1846, align 8
  %2113 = getelementptr inbounds i8, i8* %2104, i64 %2087
  store i8* %2113, i8** %11, align 8
  br label %2114

2114:                                             ; preds = %2102, %2075
  %2115 = phi i8* [ %2078, %2075 ], [ %2112, %2102 ]
  %2116 = icmp ugt i32 %2077, 127
  %2117 = trunc i32 %2077 to i8
  br i1 %2116, label %2118, label %2130

2118:                                             ; preds = %2114, %2118
  %2119 = phi i8* [ %2127, %2118 ], [ %2115, %2114 ]
  %2120 = phi i8 [ %2126, %2118 ], [ %2117, %2114 ]
  %2121 = phi i32 [ %2124, %2118 ], [ %2077, %2114 ]
  %2122 = or i8 %2120, -128
  %2123 = getelementptr inbounds i8, i8* %2119, i64 1
  store i8* %2123, i8** %8, align 8
  store i8 %2122, i8* %2119, align 1
  %2124 = lshr i32 %2121, 7
  %2125 = icmp ugt i32 %2121, 16383
  %2126 = trunc i32 %2124 to i8
  %2127 = load i8*, i8** %8, align 8
  br i1 %2125, label %2118, label %2128

2128:                                             ; preds = %2118
  %2129 = trunc i32 %2124 to i8
  br label %2130

2130:                                             ; preds = %2128, %2114
  %2131 = phi i8* [ %2115, %2114 ], [ %2127, %2128 ]
  %2132 = phi i8 [ %2117, %2114 ], [ %2129, %2128 ]
  %2133 = and i8 %2132, 127
  %2134 = getelementptr inbounds i8, i8* %2131, i64 1
  store i8* %2134, i8** %8, align 8
  store i8 %2133, i8* %2131, align 1
  br label %2135

2135:                                             ; preds = %2068, %2130
  %2136 = load i64, i64* %1842, align 8
  %2137 = load i64, i64* %1847, align 8
  %2138 = sub i64 %2136, %1849
  %2139 = sub i64 %2138, %2137
  %2140 = trunc i64 %2139 to i32
  %2141 = add i32 %2140, -5
  %2142 = inttoptr i64 %2137 to i8*
  %2143 = getelementptr inbounds i8, i8* %2142, i64 %1849
  %2144 = trunc i32 %2141 to i8
  %2145 = lshr i32 %2141, 7
  %2146 = or i8 %2144, -128
  %2147 = getelementptr inbounds i8, i8* %2143, i64 1
  store i8 %2146, i8* %2143, align 1
  %2148 = trunc i32 %2145 to i8
  %2149 = lshr i32 %2141, 14
  %2150 = or i8 %2148, -128
  %2151 = getelementptr inbounds i8, i8* %2147, i64 1
  store i8 %2150, i8* %2147, align 1
  %2152 = trunc i32 %2149 to i8
  %2153 = lshr i32 %2141, 21
  %2154 = or i8 %2152, -128
  %2155 = getelementptr inbounds i8, i8* %2151, i64 1
  store i8 %2154, i8* %2151, align 1
  %2156 = trunc i32 %2153 to i8
  %2157 = lshr i32 %2141, 28
  %2158 = or i8 %2156, -128
  %2159 = getelementptr inbounds i8, i8* %2155, i64 1
  store i8 %2158, i8* %2155, align 1
  %2160 = trunc i32 %2157 to i8
  store i8 %2160, i8* %2159, align 1
  %2161 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0
  %2162 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %2163 = bitcast i32** %2162 to i64*
  %2164 = load i64, i64* %2163, align 8
  %2165 = bitcast %"class.std::__1::vector.91"* %2161 to i64*
  %2166 = load i64, i64* %2165, align 8
  %2167 = icmp eq i64 %2164, %2166
  br i1 %2167, label %2441, label %2168

2168:                                             ; preds = %2135
  %2169 = load i8*, i8** %8, align 8
  %2170 = getelementptr inbounds i8, i8* %2169, i64 1
  %2171 = load i8*, i8** %11, align 8
  %2172 = icmp ugt i8* %2170, %2171
  br i1 %2172, label %2173, label %2205

2173:                                             ; preds = %2168
  %2174 = load i64, i64* %1847, align 8
  %2175 = ptrtoint i8* %2171 to i64
  %2176 = sub i64 %2175, %2174
  %2177 = shl nsw i64 %2176, 1
  %2178 = or i64 %2177, 1
  %2179 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2180 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2179, align 8
  %2181 = add i64 %2178, 7
  %2182 = and i64 %2181, -8
  %2183 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2180, i64 0, i32 2
  %2184 = load i64, i64* %2183, align 8
  %2185 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2180, i64 0, i32 3
  %2186 = load i64, i64* %2185, align 8
  %2187 = sub i64 %2186, %2184
  %2188 = icmp ugt i64 %2182, %2187
  br i1 %2188, label %2189, label %2191, !prof !2

2189:                                             ; preds = %2173
  %2190 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2180, i64 %2182) #9
  br label %2193

2191:                                             ; preds = %2173
  %2192 = add i64 %2182, %2184
  store i64 %2192, i64* %2183, align 8
  br label %2193

2193:                                             ; preds = %2191, %2189
  %2194 = phi i64 [ %2190, %2189 ], [ %2184, %2191 ]
  %2195 = inttoptr i64 %2194 to i8*
  %2196 = load i8*, i8** %1846, align 8
  %2197 = load i64, i64* %1842, align 8
  %2198 = ptrtoint i8* %2196 to i64
  %2199 = sub i64 %2197, %2198
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2195, i8* align 1 %2196, i64 %2199, i1 false) #9
  %2200 = load i64, i64* %1842, align 8
  %2201 = load i64, i64* %1847, align 8
  %2202 = sub i64 %2200, %2201
  %2203 = getelementptr inbounds i8, i8* %2195, i64 %2202
  store i8* %2203, i8** %8, align 8
  store i8* %2195, i8** %1846, align 8
  %2204 = getelementptr inbounds i8, i8* %2195, i64 %2178
  store i8* %2204, i8** %11, align 8
  br label %2205

2205:                                             ; preds = %2168, %2193
  %2206 = phi i8* [ %2169, %2168 ], [ %2203, %2193 ]
  %2207 = getelementptr inbounds i8, i8* %2206, i64 1
  store i8* %2207, i8** %8, align 8
  store i8 13, i8* %2206, align 1
  %2208 = load i64, i64* %1842, align 8
  %2209 = load i64, i64* %1847, align 8
  %2210 = sub i64 %2208, %2209
  %2211 = inttoptr i64 %2208 to i8*
  %2212 = getelementptr inbounds i8, i8* %2211, i64 5
  %2213 = load i8*, i8** %11, align 8
  %2214 = icmp ugt i8* %2212, %2213
  br i1 %2214, label %2215, label %2246

2215:                                             ; preds = %2205
  %2216 = ptrtoint i8* %2213 to i64
  %2217 = sub i64 %2216, %2209
  %2218 = shl nsw i64 %2217, 1
  %2219 = add i64 %2218, 5
  %2220 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2221 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2220, align 8
  %2222 = add i64 %2218, 12
  %2223 = and i64 %2222, -8
  %2224 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2221, i64 0, i32 2
  %2225 = load i64, i64* %2224, align 8
  %2226 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2221, i64 0, i32 3
  %2227 = load i64, i64* %2226, align 8
  %2228 = sub i64 %2227, %2225
  %2229 = icmp ugt i64 %2223, %2228
  br i1 %2229, label %2230, label %2232, !prof !2

2230:                                             ; preds = %2215
  %2231 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2221, i64 %2223) #9
  br label %2234

2232:                                             ; preds = %2215
  %2233 = add i64 %2225, %2223
  store i64 %2233, i64* %2224, align 8
  br label %2234

2234:                                             ; preds = %2232, %2230
  %2235 = phi i64 [ %2231, %2230 ], [ %2225, %2232 ]
  %2236 = inttoptr i64 %2235 to i8*
  %2237 = load i8*, i8** %1846, align 8
  %2238 = load i64, i64* %1842, align 8
  %2239 = ptrtoint i8* %2237 to i64
  %2240 = sub i64 %2238, %2239
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2236, i8* align 1 %2237, i64 %2240, i1 false) #9
  %2241 = load i64, i64* %1842, align 8
  %2242 = load i64, i64* %1847, align 8
  %2243 = sub i64 %2241, %2242
  %2244 = getelementptr inbounds i8, i8* %2236, i64 %2243
  store i8* %2244, i8** %8, align 8
  store i8* %2236, i8** %1846, align 8
  %2245 = getelementptr inbounds i8, i8* %2236, i64 %2219
  store i8* %2245, i8** %11, align 8
  br label %2246

2246:                                             ; preds = %2205, %2234
  %2247 = phi i64 [ %2209, %2205 ], [ %2235, %2234 ]
  %2248 = phi i8* [ %2213, %2205 ], [ %2245, %2234 ]
  %2249 = phi i8* [ %2211, %2205 ], [ %2244, %2234 ]
  %2250 = getelementptr inbounds i8, i8* %2249, i64 5
  store i8* %2250, i8** %8, align 8
  %2251 = load i64, i64* %2163, align 8
  %2252 = load i64, i64* %2165, align 8
  %2253 = sub i64 %2251, %2252
  %2254 = ashr exact i64 %2253, 2
  %2255 = getelementptr inbounds i8, i8* %2249, i64 10
  %2256 = icmp ugt i8* %2255, %2248
  br i1 %2256, label %2257, label %2288

2257:                                             ; preds = %2246
  %2258 = ptrtoint i8* %2248 to i64
  %2259 = sub i64 %2258, %2247
  %2260 = shl nsw i64 %2259, 1
  %2261 = add i64 %2260, 5
  %2262 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2263 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2262, align 8
  %2264 = add i64 %2260, 12
  %2265 = and i64 %2264, -8
  %2266 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2263, i64 0, i32 2
  %2267 = load i64, i64* %2266, align 8
  %2268 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2263, i64 0, i32 3
  %2269 = load i64, i64* %2268, align 8
  %2270 = sub i64 %2269, %2267
  %2271 = icmp ugt i64 %2265, %2270
  br i1 %2271, label %2272, label %2274, !prof !2

2272:                                             ; preds = %2257
  %2273 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2263, i64 %2265) #9
  br label %2276

2274:                                             ; preds = %2257
  %2275 = add i64 %2265, %2267
  store i64 %2275, i64* %2266, align 8
  br label %2276

2276:                                             ; preds = %2274, %2272
  %2277 = phi i64 [ %2273, %2272 ], [ %2267, %2274 ]
  %2278 = inttoptr i64 %2277 to i8*
  %2279 = load i8*, i8** %1846, align 8
  %2280 = load i64, i64* %1842, align 8
  %2281 = ptrtoint i8* %2279 to i64
  %2282 = sub i64 %2280, %2281
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2278, i8* align 1 %2279, i64 %2282, i1 false) #9
  %2283 = load i64, i64* %1842, align 8
  %2284 = load i64, i64* %1847, align 8
  %2285 = sub i64 %2283, %2284
  %2286 = getelementptr inbounds i8, i8* %2278, i64 %2285
  store i8* %2286, i8** %8, align 8
  store i8* %2278, i8** %1846, align 8
  %2287 = getelementptr inbounds i8, i8* %2278, i64 %2261
  store i8* %2287, i8** %11, align 8
  br label %2288

2288:                                             ; preds = %2276, %2246
  %2289 = phi i8* [ %2250, %2246 ], [ %2286, %2276 ]
  %2290 = trunc i64 %2254 to i32
  %2291 = icmp ugt i32 %2290, 127
  %2292 = trunc i64 %2254 to i8
  br i1 %2291, label %2293, label %2305

2293:                                             ; preds = %2288, %2293
  %2294 = phi i8* [ %2302, %2293 ], [ %2289, %2288 ]
  %2295 = phi i8 [ %2301, %2293 ], [ %2292, %2288 ]
  %2296 = phi i32 [ %2299, %2293 ], [ %2290, %2288 ]
  %2297 = or i8 %2295, -128
  %2298 = getelementptr inbounds i8, i8* %2294, i64 1
  store i8* %2298, i8** %8, align 8
  store i8 %2297, i8* %2294, align 1
  %2299 = lshr i32 %2296, 7
  %2300 = icmp ugt i32 %2296, 16383
  %2301 = trunc i32 %2299 to i8
  %2302 = load i8*, i8** %8, align 8
  br i1 %2300, label %2293, label %2303

2303:                                             ; preds = %2293
  %2304 = trunc i32 %2299 to i8
  br label %2305

2305:                                             ; preds = %2303, %2288
  %2306 = phi i8* [ %2289, %2288 ], [ %2302, %2303 ]
  %2307 = phi i8 [ %2292, %2288 ], [ %2304, %2303 ]
  %2308 = and i8 %2307, 127
  %2309 = getelementptr inbounds i8, i8* %2306, i64 1
  store i8* %2309, i8** %8, align 8
  store i8 %2308, i8* %2306, align 1
  %2310 = getelementptr inbounds %"class.std::__1::vector.91", %"class.std::__1::vector.91"* %2161, i64 0, i32 0, i32 0
  %2311 = load i32*, i32** %2310, align 8
  %2312 = load i32*, i32** %2162, align 8
  %2313 = icmp eq i32* %2311, %2312
  br i1 %2313, label %2316, label %2314

2314:                                             ; preds = %2305
  %2315 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %2342

2316:                                             ; preds = %2434, %2305
  %2317 = load i64, i64* %1842, align 8
  %2318 = load i64, i64* %1847, align 8
  %2319 = sub i64 %2317, %2210
  %2320 = sub i64 %2319, %2318
  %2321 = trunc i64 %2320 to i32
  %2322 = add i32 %2321, -5
  %2323 = inttoptr i64 %2318 to i8*
  %2324 = getelementptr inbounds i8, i8* %2323, i64 %2210
  %2325 = trunc i32 %2322 to i8
  %2326 = lshr i32 %2322, 7
  %2327 = or i8 %2325, -128
  %2328 = getelementptr inbounds i8, i8* %2324, i64 1
  store i8 %2327, i8* %2324, align 1
  %2329 = trunc i32 %2326 to i8
  %2330 = lshr i32 %2322, 14
  %2331 = or i8 %2329, -128
  %2332 = getelementptr inbounds i8, i8* %2328, i64 1
  store i8 %2331, i8* %2328, align 1
  %2333 = trunc i32 %2330 to i8
  %2334 = lshr i32 %2322, 21
  %2335 = or i8 %2333, -128
  %2336 = getelementptr inbounds i8, i8* %2332, i64 1
  store i8 %2335, i8* %2332, align 1
  %2337 = trunc i32 %2334 to i8
  %2338 = lshr i32 %2322, 28
  %2339 = or i8 %2337, -128
  %2340 = getelementptr inbounds i8, i8* %2336, i64 1
  store i8 %2339, i8* %2336, align 1
  %2341 = trunc i32 %2338 to i8
  store i8 %2341, i8* %2340, align 1
  br label %2441

2342:                                             ; preds = %2314, %2434
  %2343 = phi i32* [ %2311, %2314 ], [ %2439, %2434 ]
  %2344 = load i32, i32* %2343, align 4
  %2345 = load i8*, i8** %8, align 8
  %2346 = getelementptr inbounds i8, i8* %2345, i64 5
  %2347 = load i8*, i8** %11, align 8
  %2348 = icmp ugt i8* %2346, %2347
  br i1 %2348, label %2349, label %2380

2349:                                             ; preds = %2342
  %2350 = load i64, i64* %1847, align 8
  %2351 = ptrtoint i8* %2347 to i64
  %2352 = sub i64 %2351, %2350
  %2353 = shl nsw i64 %2352, 1
  %2354 = add i64 %2353, 5
  %2355 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2315, align 8
  %2356 = add i64 %2353, 12
  %2357 = and i64 %2356, -8
  %2358 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2355, i64 0, i32 2
  %2359 = load i64, i64* %2358, align 8
  %2360 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2355, i64 0, i32 3
  %2361 = load i64, i64* %2360, align 8
  %2362 = sub i64 %2361, %2359
  %2363 = icmp ugt i64 %2357, %2362
  br i1 %2363, label %2364, label %2366, !prof !2

2364:                                             ; preds = %2349
  %2365 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2355, i64 %2357) #9
  br label %2368

2366:                                             ; preds = %2349
  %2367 = add i64 %2357, %2359
  store i64 %2367, i64* %2358, align 8
  br label %2368

2368:                                             ; preds = %2366, %2364
  %2369 = phi i64 [ %2365, %2364 ], [ %2359, %2366 ]
  %2370 = inttoptr i64 %2369 to i8*
  %2371 = load i8*, i8** %1846, align 8
  %2372 = load i64, i64* %1842, align 8
  %2373 = ptrtoint i8* %2371 to i64
  %2374 = sub i64 %2372, %2373
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2370, i8* align 1 %2371, i64 %2374, i1 false) #9
  %2375 = load i64, i64* %1842, align 8
  %2376 = load i64, i64* %1847, align 8
  %2377 = sub i64 %2375, %2376
  %2378 = getelementptr inbounds i8, i8* %2370, i64 %2377
  store i8* %2378, i8** %8, align 8
  store i8* %2370, i8** %1846, align 8
  %2379 = getelementptr inbounds i8, i8* %2370, i64 %2354
  store i8* %2379, i8** %11, align 8
  br label %2380

2380:                                             ; preds = %2342, %2368
  %2381 = phi i8* [ %2345, %2342 ], [ %2378, %2368 ]
  %2382 = getelementptr inbounds i8, i8* %2381, i64 1
  store i8* %2382, i8** %8, align 8
  store i8 0, i8* %2381, align 1
  %2383 = load i8*, i8** %8, align 8
  %2384 = getelementptr inbounds i8, i8* %2383, i64 5
  %2385 = load i8*, i8** %11, align 8
  %2386 = icmp ugt i8* %2384, %2385
  br i1 %2386, label %2387, label %2418

2387:                                             ; preds = %2380
  %2388 = load i64, i64* %1847, align 8
  %2389 = ptrtoint i8* %2385 to i64
  %2390 = sub i64 %2389, %2388
  %2391 = shl nsw i64 %2390, 1
  %2392 = add i64 %2391, 5
  %2393 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2315, align 8
  %2394 = add i64 %2391, 12
  %2395 = and i64 %2394, -8
  %2396 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2393, i64 0, i32 2
  %2397 = load i64, i64* %2396, align 8
  %2398 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2393, i64 0, i32 3
  %2399 = load i64, i64* %2398, align 8
  %2400 = sub i64 %2399, %2397
  %2401 = icmp ugt i64 %2395, %2400
  br i1 %2401, label %2402, label %2404, !prof !2

2402:                                             ; preds = %2387
  %2403 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2393, i64 %2395) #9
  br label %2406

2404:                                             ; preds = %2387
  %2405 = add i64 %2395, %2397
  store i64 %2405, i64* %2396, align 8
  br label %2406

2406:                                             ; preds = %2404, %2402
  %2407 = phi i64 [ %2403, %2402 ], [ %2397, %2404 ]
  %2408 = inttoptr i64 %2407 to i8*
  %2409 = load i8*, i8** %1846, align 8
  %2410 = load i64, i64* %1842, align 8
  %2411 = ptrtoint i8* %2409 to i64
  %2412 = sub i64 %2410, %2411
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2408, i8* align 1 %2409, i64 %2412, i1 false) #9
  %2413 = load i64, i64* %1842, align 8
  %2414 = load i64, i64* %1847, align 8
  %2415 = sub i64 %2413, %2414
  %2416 = getelementptr inbounds i8, i8* %2408, i64 %2415
  store i8* %2416, i8** %8, align 8
  store i8* %2408, i8** %1846, align 8
  %2417 = getelementptr inbounds i8, i8* %2408, i64 %2392
  store i8* %2417, i8** %11, align 8
  br label %2418

2418:                                             ; preds = %2406, %2380
  %2419 = phi i8* [ %2383, %2380 ], [ %2416, %2406 ]
  %2420 = icmp ugt i32 %2344, 127
  %2421 = trunc i32 %2344 to i8
  br i1 %2420, label %2422, label %2434

2422:                                             ; preds = %2418, %2422
  %2423 = phi i8* [ %2431, %2422 ], [ %2419, %2418 ]
  %2424 = phi i8 [ %2430, %2422 ], [ %2421, %2418 ]
  %2425 = phi i32 [ %2428, %2422 ], [ %2344, %2418 ]
  %2426 = or i8 %2424, -128
  %2427 = getelementptr inbounds i8, i8* %2423, i64 1
  store i8* %2427, i8** %8, align 8
  store i8 %2426, i8* %2423, align 1
  %2428 = lshr i32 %2425, 7
  %2429 = icmp ugt i32 %2425, 16383
  %2430 = trunc i32 %2428 to i8
  %2431 = load i8*, i8** %8, align 8
  br i1 %2429, label %2422, label %2432

2432:                                             ; preds = %2422
  %2433 = trunc i32 %2428 to i8
  br label %2434

2434:                                             ; preds = %2432, %2418
  %2435 = phi i8* [ %2419, %2418 ], [ %2431, %2432 ]
  %2436 = phi i8 [ %2421, %2418 ], [ %2433, %2432 ]
  %2437 = and i8 %2436, 127
  %2438 = getelementptr inbounds i8, i8* %2435, i64 1
  store i8* %2438, i8** %8, align 8
  store i8 %2437, i8* %2435, align 1
  %2439 = getelementptr inbounds i32, i32* %2343, i64 1
  %2440 = icmp eq i32* %2439, %2312
  br i1 %2440, label %2316, label %2342

2441:                                             ; preds = %2135, %2316
  %2442 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0
  %2443 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %2444 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %2443 to i64*
  %2445 = load i64, i64* %2444, align 8
  %2446 = bitcast %"class.std::__1::vector.84"* %2442 to i64*
  %2447 = load i64, i64* %2446, align 8
  %2448 = icmp eq i64 %2445, %2447
  br i1 %2448, label %2709, label %2449

2449:                                             ; preds = %2441
  %2450 = load i8*, i8** %8, align 8
  %2451 = getelementptr inbounds i8, i8* %2450, i64 1
  %2452 = load i8*, i8** %11, align 8
  %2453 = icmp ugt i8* %2451, %2452
  br i1 %2453, label %2454, label %2486

2454:                                             ; preds = %2449
  %2455 = load i64, i64* %1847, align 8
  %2456 = ptrtoint i8* %2452 to i64
  %2457 = sub i64 %2456, %2455
  %2458 = shl nsw i64 %2457, 1
  %2459 = or i64 %2458, 1
  %2460 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2461 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2460, align 8
  %2462 = add i64 %2459, 7
  %2463 = and i64 %2462, -8
  %2464 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2461, i64 0, i32 2
  %2465 = load i64, i64* %2464, align 8
  %2466 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2461, i64 0, i32 3
  %2467 = load i64, i64* %2466, align 8
  %2468 = sub i64 %2467, %2465
  %2469 = icmp ugt i64 %2463, %2468
  br i1 %2469, label %2470, label %2472, !prof !2

2470:                                             ; preds = %2454
  %2471 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2461, i64 %2463) #9
  br label %2474

2472:                                             ; preds = %2454
  %2473 = add i64 %2463, %2465
  store i64 %2473, i64* %2464, align 8
  br label %2474

2474:                                             ; preds = %2472, %2470
  %2475 = phi i64 [ %2471, %2470 ], [ %2465, %2472 ]
  %2476 = inttoptr i64 %2475 to i8*
  %2477 = load i8*, i8** %1846, align 8
  %2478 = load i64, i64* %1842, align 8
  %2479 = ptrtoint i8* %2477 to i64
  %2480 = sub i64 %2478, %2479
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2476, i8* align 1 %2477, i64 %2480, i1 false) #9
  %2481 = load i64, i64* %1842, align 8
  %2482 = load i64, i64* %1847, align 8
  %2483 = sub i64 %2481, %2482
  %2484 = getelementptr inbounds i8, i8* %2476, i64 %2483
  store i8* %2484, i8** %8, align 8
  store i8* %2476, i8** %1846, align 8
  %2485 = getelementptr inbounds i8, i8* %2476, i64 %2459
  store i8* %2485, i8** %11, align 8
  br label %2486

2486:                                             ; preds = %2449, %2474
  %2487 = phi i8* [ %2450, %2449 ], [ %2484, %2474 ]
  %2488 = getelementptr inbounds i8, i8* %2487, i64 1
  store i8* %2488, i8** %8, align 8
  store i8 6, i8* %2487, align 1
  %2489 = load i64, i64* %1842, align 8
  %2490 = load i64, i64* %1847, align 8
  %2491 = sub i64 %2489, %2490
  %2492 = inttoptr i64 %2489 to i8*
  %2493 = getelementptr inbounds i8, i8* %2492, i64 5
  %2494 = load i8*, i8** %11, align 8
  %2495 = icmp ugt i8* %2493, %2494
  br i1 %2495, label %2496, label %2527

2496:                                             ; preds = %2486
  %2497 = ptrtoint i8* %2494 to i64
  %2498 = sub i64 %2497, %2490
  %2499 = shl nsw i64 %2498, 1
  %2500 = add i64 %2499, 5
  %2501 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2502 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2501, align 8
  %2503 = add i64 %2499, 12
  %2504 = and i64 %2503, -8
  %2505 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2502, i64 0, i32 2
  %2506 = load i64, i64* %2505, align 8
  %2507 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2502, i64 0, i32 3
  %2508 = load i64, i64* %2507, align 8
  %2509 = sub i64 %2508, %2506
  %2510 = icmp ugt i64 %2504, %2509
  br i1 %2510, label %2511, label %2513, !prof !2

2511:                                             ; preds = %2496
  %2512 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2502, i64 %2504) #9
  br label %2515

2513:                                             ; preds = %2496
  %2514 = add i64 %2506, %2504
  store i64 %2514, i64* %2505, align 8
  br label %2515

2515:                                             ; preds = %2513, %2511
  %2516 = phi i64 [ %2512, %2511 ], [ %2506, %2513 ]
  %2517 = inttoptr i64 %2516 to i8*
  %2518 = load i8*, i8** %1846, align 8
  %2519 = load i64, i64* %1842, align 8
  %2520 = ptrtoint i8* %2518 to i64
  %2521 = sub i64 %2519, %2520
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2517, i8* align 1 %2518, i64 %2521, i1 false) #9
  %2522 = load i64, i64* %1842, align 8
  %2523 = load i64, i64* %1847, align 8
  %2524 = sub i64 %2522, %2523
  %2525 = getelementptr inbounds i8, i8* %2517, i64 %2524
  store i8* %2525, i8** %8, align 8
  store i8* %2517, i8** %1846, align 8
  %2526 = getelementptr inbounds i8, i8* %2517, i64 %2500
  store i8* %2526, i8** %11, align 8
  br label %2527

2527:                                             ; preds = %2486, %2515
  %2528 = phi i64 [ %2490, %2486 ], [ %2516, %2515 ]
  %2529 = phi i8* [ %2494, %2486 ], [ %2526, %2515 ]
  %2530 = phi i8* [ %2492, %2486 ], [ %2525, %2515 ]
  %2531 = getelementptr inbounds i8, i8* %2530, i64 5
  store i8* %2531, i8** %8, align 8
  %2532 = load i64, i64* %2444, align 8
  %2533 = load i64, i64* %2446, align 8
  %2534 = sub i64 %2532, %2533
  %2535 = sdiv exact i64 %2534, 40
  %2536 = getelementptr inbounds i8, i8* %2530, i64 10
  %2537 = icmp ugt i8* %2536, %2529
  br i1 %2537, label %2538, label %2569

2538:                                             ; preds = %2527
  %2539 = ptrtoint i8* %2529 to i64
  %2540 = sub i64 %2539, %2528
  %2541 = shl nsw i64 %2540, 1
  %2542 = add i64 %2541, 5
  %2543 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2544 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2543, align 8
  %2545 = add i64 %2541, 12
  %2546 = and i64 %2545, -8
  %2547 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2544, i64 0, i32 2
  %2548 = load i64, i64* %2547, align 8
  %2549 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2544, i64 0, i32 3
  %2550 = load i64, i64* %2549, align 8
  %2551 = sub i64 %2550, %2548
  %2552 = icmp ugt i64 %2546, %2551
  br i1 %2552, label %2553, label %2555, !prof !2

2553:                                             ; preds = %2538
  %2554 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2544, i64 %2546) #9
  br label %2557

2555:                                             ; preds = %2538
  %2556 = add i64 %2546, %2548
  store i64 %2556, i64* %2547, align 8
  br label %2557

2557:                                             ; preds = %2555, %2553
  %2558 = phi i64 [ %2554, %2553 ], [ %2548, %2555 ]
  %2559 = inttoptr i64 %2558 to i8*
  %2560 = load i8*, i8** %1846, align 8
  %2561 = load i64, i64* %1842, align 8
  %2562 = ptrtoint i8* %2560 to i64
  %2563 = sub i64 %2561, %2562
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2559, i8* align 1 %2560, i64 %2563, i1 false) #9
  %2564 = load i64, i64* %1842, align 8
  %2565 = load i64, i64* %1847, align 8
  %2566 = sub i64 %2564, %2565
  %2567 = getelementptr inbounds i8, i8* %2559, i64 %2566
  store i8* %2567, i8** %8, align 8
  store i8* %2559, i8** %1846, align 8
  %2568 = getelementptr inbounds i8, i8* %2559, i64 %2542
  store i8* %2568, i8** %11, align 8
  br label %2569

2569:                                             ; preds = %2557, %2527
  %2570 = phi i8* [ %2531, %2527 ], [ %2567, %2557 ]
  %2571 = trunc i64 %2535 to i32
  %2572 = icmp ugt i32 %2571, 127
  %2573 = trunc i64 %2535 to i8
  br i1 %2572, label %2574, label %2586

2574:                                             ; preds = %2569, %2574
  %2575 = phi i8* [ %2583, %2574 ], [ %2570, %2569 ]
  %2576 = phi i8 [ %2582, %2574 ], [ %2573, %2569 ]
  %2577 = phi i32 [ %2580, %2574 ], [ %2571, %2569 ]
  %2578 = or i8 %2576, -128
  %2579 = getelementptr inbounds i8, i8* %2575, i64 1
  store i8* %2579, i8** %8, align 8
  store i8 %2578, i8* %2575, align 1
  %2580 = lshr i32 %2577, 7
  %2581 = icmp ugt i32 %2577, 16383
  %2582 = trunc i32 %2580 to i8
  %2583 = load i8*, i8** %8, align 8
  br i1 %2581, label %2574, label %2584

2584:                                             ; preds = %2574
  %2585 = trunc i32 %2580 to i8
  br label %2586

2586:                                             ; preds = %2584, %2569
  %2587 = phi i8* [ %2570, %2569 ], [ %2583, %2584 ]
  %2588 = phi i8 [ %2573, %2569 ], [ %2585, %2584 ]
  %2589 = and i8 %2588, 127
  %2590 = getelementptr inbounds i8, i8* %2587, i64 1
  store i8* %2590, i8** %8, align 8
  store i8 %2589, i8* %2587, align 1
  %2591 = getelementptr inbounds %"class.std::__1::vector.84", %"class.std::__1::vector.84"* %2442, i64 0, i32 0, i32 0
  %2592 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %2591, align 8
  %2593 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %2443, align 8
  %2594 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2592, %2593
  br i1 %2594, label %2597, label %2595

2595:                                             ; preds = %2586
  %2596 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %2623

2597:                                             ; preds = %2704, %2586
  %2598 = load i64, i64* %1842, align 8
  %2599 = load i64, i64* %1847, align 8
  %2600 = sub i64 %2598, %2491
  %2601 = sub i64 %2600, %2599
  %2602 = trunc i64 %2601 to i32
  %2603 = add i32 %2602, -5
  %2604 = inttoptr i64 %2599 to i8*
  %2605 = getelementptr inbounds i8, i8* %2604, i64 %2491
  %2606 = trunc i32 %2603 to i8
  %2607 = lshr i32 %2603, 7
  %2608 = or i8 %2606, -128
  %2609 = getelementptr inbounds i8, i8* %2605, i64 1
  store i8 %2608, i8* %2605, align 1
  %2610 = trunc i32 %2607 to i8
  %2611 = lshr i32 %2603, 14
  %2612 = or i8 %2610, -128
  %2613 = getelementptr inbounds i8, i8* %2609, i64 1
  store i8 %2612, i8* %2609, align 1
  %2614 = trunc i32 %2611 to i8
  %2615 = lshr i32 %2603, 21
  %2616 = or i8 %2614, -128
  %2617 = getelementptr inbounds i8, i8* %2613, i64 1
  store i8 %2616, i8* %2613, align 1
  %2618 = trunc i32 %2615 to i8
  %2619 = lshr i32 %2603, 28
  %2620 = or i8 %2618, -128
  %2621 = getelementptr inbounds i8, i8* %2617, i64 1
  store i8 %2620, i8* %2617, align 1
  %2622 = trunc i32 %2619 to i8
  store i8 %2622, i8* %2621, align 1
  br label %2709

2623:                                             ; preds = %2595, %2704
  %2624 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %2592, %2595 ], [ %2707, %2704 ]
  %2625 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2624, i64 0, i32 0
  tail call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::ValueType"* dereferenceable(4) %2625)
  %2626 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2624, i64 0, i32 1
  %2627 = load i8, i8* %2626, align 4, !range !34
  %2628 = load i8*, i8** %8, align 8
  %2629 = getelementptr inbounds i8, i8* %2628, i64 1
  %2630 = load i8*, i8** %11, align 8
  %2631 = icmp ugt i8* %2629, %2630
  br i1 %2631, label %2632, label %2663

2632:                                             ; preds = %2623
  %2633 = load i64, i64* %1847, align 8
  %2634 = ptrtoint i8* %2630 to i64
  %2635 = sub i64 %2634, %2633
  %2636 = shl nsw i64 %2635, 1
  %2637 = or i64 %2636, 1
  %2638 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2596, align 8
  %2639 = add i64 %2637, 7
  %2640 = and i64 %2639, -8
  %2641 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2638, i64 0, i32 2
  %2642 = load i64, i64* %2641, align 8
  %2643 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2638, i64 0, i32 3
  %2644 = load i64, i64* %2643, align 8
  %2645 = sub i64 %2644, %2642
  %2646 = icmp ugt i64 %2640, %2645
  br i1 %2646, label %2647, label %2649, !prof !2

2647:                                             ; preds = %2632
  %2648 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2638, i64 %2640) #9
  br label %2651

2649:                                             ; preds = %2632
  %2650 = add i64 %2640, %2642
  store i64 %2650, i64* %2641, align 8
  br label %2651

2651:                                             ; preds = %2649, %2647
  %2652 = phi i64 [ %2648, %2647 ], [ %2642, %2649 ]
  %2653 = inttoptr i64 %2652 to i8*
  %2654 = load i8*, i8** %1846, align 8
  %2655 = load i64, i64* %1842, align 8
  %2656 = ptrtoint i8* %2654 to i64
  %2657 = sub i64 %2655, %2656
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2653, i8* align 1 %2654, i64 %2657, i1 false) #9
  %2658 = load i64, i64* %1842, align 8
  %2659 = load i64, i64* %1847, align 8
  %2660 = sub i64 %2658, %2659
  %2661 = getelementptr inbounds i8, i8* %2653, i64 %2660
  store i8* %2661, i8** %8, align 8
  store i8* %2653, i8** %1846, align 8
  %2662 = getelementptr inbounds i8, i8* %2653, i64 %2637
  store i8* %2662, i8** %11, align 8
  br label %2663

2663:                                             ; preds = %2623, %2651
  %2664 = phi i8* [ %2628, %2623 ], [ %2661, %2651 ]
  %2665 = getelementptr inbounds i8, i8* %2664, i64 1
  store i8* %2665, i8** %8, align 8
  store i8 %2627, i8* %2664, align 1
  %2666 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2624, i64 0, i32 2
  %2667 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2624, i64 0, i32 0, i32 0
  %2668 = load i32, i32* %2667, align 8
  tail call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %1, %"class.v8::internal::wasm::WasmInitExpr"* dereferenceable(32) %2666, i32 %2668)
  %2669 = load i8*, i8** %8, align 8
  %2670 = getelementptr inbounds i8, i8* %2669, i64 1
  %2671 = load i8*, i8** %11, align 8
  %2672 = icmp ugt i8* %2670, %2671
  br i1 %2672, label %2673, label %2704

2673:                                             ; preds = %2663
  %2674 = load i64, i64* %1847, align 8
  %2675 = ptrtoint i8* %2671 to i64
  %2676 = sub i64 %2675, %2674
  %2677 = shl nsw i64 %2676, 1
  %2678 = or i64 %2677, 1
  %2679 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2596, align 8
  %2680 = add i64 %2678, 7
  %2681 = and i64 %2680, -8
  %2682 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2679, i64 0, i32 2
  %2683 = load i64, i64* %2682, align 8
  %2684 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2679, i64 0, i32 3
  %2685 = load i64, i64* %2684, align 8
  %2686 = sub i64 %2685, %2683
  %2687 = icmp ugt i64 %2681, %2686
  br i1 %2687, label %2688, label %2690, !prof !2

2688:                                             ; preds = %2673
  %2689 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2679, i64 %2681) #9
  br label %2692

2690:                                             ; preds = %2673
  %2691 = add i64 %2681, %2683
  store i64 %2691, i64* %2682, align 8
  br label %2692

2692:                                             ; preds = %2690, %2688
  %2693 = phi i64 [ %2689, %2688 ], [ %2683, %2690 ]
  %2694 = inttoptr i64 %2693 to i8*
  %2695 = load i8*, i8** %1846, align 8
  %2696 = load i64, i64* %1842, align 8
  %2697 = ptrtoint i8* %2695 to i64
  %2698 = sub i64 %2696, %2697
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2694, i8* align 1 %2695, i64 %2698, i1 false) #9
  %2699 = load i64, i64* %1842, align 8
  %2700 = load i64, i64* %1847, align 8
  %2701 = sub i64 %2699, %2700
  %2702 = getelementptr inbounds i8, i8* %2694, i64 %2701
  store i8* %2702, i8** %8, align 8
  store i8* %2694, i8** %1846, align 8
  %2703 = getelementptr inbounds i8, i8* %2694, i64 %2678
  store i8* %2703, i8** %11, align 8
  br label %2704

2704:                                             ; preds = %2663, %2692
  %2705 = phi i8* [ %2669, %2663 ], [ %2702, %2692 ]
  %2706 = getelementptr inbounds i8, i8* %2705, i64 1
  store i8* %2706, i8** %8, align 8
  store i8 11, i8* %2705, align 1
  %2707 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2624, i64 1
  %2708 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %2707, %2593
  br i1 %2708, label %2597, label %2623

2709:                                             ; preds = %2441, %2597
  %2710 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0
  %2711 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %2712 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %2711 to i64*
  %2713 = load i64, i64* %2712, align 8
  %2714 = bitcast %"class.std::__1::vector.36"* %2710 to i64*
  %2715 = load i64, i64* %2714, align 8
  %2716 = icmp eq i64 %2713, %2715
  br i1 %2716, label %3118, label %2717

2717:                                             ; preds = %2709
  %2718 = load i8*, i8** %8, align 8
  %2719 = getelementptr inbounds i8, i8* %2718, i64 1
  %2720 = load i8*, i8** %11, align 8
  %2721 = icmp ugt i8* %2719, %2720
  br i1 %2721, label %2722, label %2754

2722:                                             ; preds = %2717
  %2723 = load i64, i64* %1847, align 8
  %2724 = ptrtoint i8* %2720 to i64
  %2725 = sub i64 %2724, %2723
  %2726 = shl nsw i64 %2725, 1
  %2727 = or i64 %2726, 1
  %2728 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2729 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2728, align 8
  %2730 = add i64 %2727, 7
  %2731 = and i64 %2730, -8
  %2732 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2729, i64 0, i32 2
  %2733 = load i64, i64* %2732, align 8
  %2734 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2729, i64 0, i32 3
  %2735 = load i64, i64* %2734, align 8
  %2736 = sub i64 %2735, %2733
  %2737 = icmp ugt i64 %2731, %2736
  br i1 %2737, label %2738, label %2740, !prof !2

2738:                                             ; preds = %2722
  %2739 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2729, i64 %2731) #9
  br label %2742

2740:                                             ; preds = %2722
  %2741 = add i64 %2731, %2733
  store i64 %2741, i64* %2732, align 8
  br label %2742

2742:                                             ; preds = %2740, %2738
  %2743 = phi i64 [ %2739, %2738 ], [ %2733, %2740 ]
  %2744 = inttoptr i64 %2743 to i8*
  %2745 = load i8*, i8** %1846, align 8
  %2746 = load i64, i64* %1842, align 8
  %2747 = ptrtoint i8* %2745 to i64
  %2748 = sub i64 %2746, %2747
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2744, i8* align 1 %2745, i64 %2748, i1 false) #9
  %2749 = load i64, i64* %1842, align 8
  %2750 = load i64, i64* %1847, align 8
  %2751 = sub i64 %2749, %2750
  %2752 = getelementptr inbounds i8, i8* %2744, i64 %2751
  store i8* %2752, i8** %8, align 8
  store i8* %2744, i8** %1846, align 8
  %2753 = getelementptr inbounds i8, i8* %2744, i64 %2727
  store i8* %2753, i8** %11, align 8
  br label %2754

2754:                                             ; preds = %2717, %2742
  %2755 = phi i8* [ %2718, %2717 ], [ %2752, %2742 ]
  %2756 = getelementptr inbounds i8, i8* %2755, i64 1
  store i8* %2756, i8** %8, align 8
  store i8 7, i8* %2755, align 1
  %2757 = load i64, i64* %1842, align 8
  %2758 = load i64, i64* %1847, align 8
  %2759 = sub i64 %2757, %2758
  %2760 = inttoptr i64 %2757 to i8*
  %2761 = getelementptr inbounds i8, i8* %2760, i64 5
  %2762 = load i8*, i8** %11, align 8
  %2763 = icmp ugt i8* %2761, %2762
  br i1 %2763, label %2764, label %2795

2764:                                             ; preds = %2754
  %2765 = ptrtoint i8* %2762 to i64
  %2766 = sub i64 %2765, %2758
  %2767 = shl nsw i64 %2766, 1
  %2768 = add i64 %2767, 5
  %2769 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2770 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2769, align 8
  %2771 = add i64 %2767, 12
  %2772 = and i64 %2771, -8
  %2773 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2770, i64 0, i32 2
  %2774 = load i64, i64* %2773, align 8
  %2775 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2770, i64 0, i32 3
  %2776 = load i64, i64* %2775, align 8
  %2777 = sub i64 %2776, %2774
  %2778 = icmp ugt i64 %2772, %2777
  br i1 %2778, label %2779, label %2781, !prof !2

2779:                                             ; preds = %2764
  %2780 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2770, i64 %2772) #9
  br label %2783

2781:                                             ; preds = %2764
  %2782 = add i64 %2774, %2772
  store i64 %2782, i64* %2773, align 8
  br label %2783

2783:                                             ; preds = %2781, %2779
  %2784 = phi i64 [ %2780, %2779 ], [ %2774, %2781 ]
  %2785 = inttoptr i64 %2784 to i8*
  %2786 = load i8*, i8** %1846, align 8
  %2787 = load i64, i64* %1842, align 8
  %2788 = ptrtoint i8* %2786 to i64
  %2789 = sub i64 %2787, %2788
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2785, i8* align 1 %2786, i64 %2789, i1 false) #9
  %2790 = load i64, i64* %1842, align 8
  %2791 = load i64, i64* %1847, align 8
  %2792 = sub i64 %2790, %2791
  %2793 = getelementptr inbounds i8, i8* %2785, i64 %2792
  store i8* %2793, i8** %8, align 8
  store i8* %2785, i8** %1846, align 8
  %2794 = getelementptr inbounds i8, i8* %2785, i64 %2768
  store i8* %2794, i8** %11, align 8
  br label %2795

2795:                                             ; preds = %2754, %2783
  %2796 = phi i64 [ %2758, %2754 ], [ %2784, %2783 ]
  %2797 = phi i8* [ %2762, %2754 ], [ %2794, %2783 ]
  %2798 = phi i8* [ %2760, %2754 ], [ %2793, %2783 ]
  %2799 = getelementptr inbounds i8, i8* %2798, i64 5
  store i8* %2799, i8** %8, align 8
  %2800 = load i64, i64* %2712, align 8
  %2801 = load i64, i64* %2714, align 8
  %2802 = sub i64 %2800, %2801
  %2803 = sdiv exact i64 %2802, 24
  %2804 = getelementptr inbounds i8, i8* %2798, i64 10
  %2805 = icmp ugt i8* %2804, %2797
  br i1 %2805, label %2806, label %2837

2806:                                             ; preds = %2795
  %2807 = ptrtoint i8* %2797 to i64
  %2808 = sub i64 %2807, %2796
  %2809 = shl nsw i64 %2808, 1
  %2810 = add i64 %2809, 5
  %2811 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %2812 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2811, align 8
  %2813 = add i64 %2809, 12
  %2814 = and i64 %2813, -8
  %2815 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2812, i64 0, i32 2
  %2816 = load i64, i64* %2815, align 8
  %2817 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2812, i64 0, i32 3
  %2818 = load i64, i64* %2817, align 8
  %2819 = sub i64 %2818, %2816
  %2820 = icmp ugt i64 %2814, %2819
  br i1 %2820, label %2821, label %2823, !prof !2

2821:                                             ; preds = %2806
  %2822 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2812, i64 %2814) #9
  br label %2825

2823:                                             ; preds = %2806
  %2824 = add i64 %2814, %2816
  store i64 %2824, i64* %2815, align 8
  br label %2825

2825:                                             ; preds = %2823, %2821
  %2826 = phi i64 [ %2822, %2821 ], [ %2816, %2823 ]
  %2827 = inttoptr i64 %2826 to i8*
  %2828 = load i8*, i8** %1846, align 8
  %2829 = load i64, i64* %1842, align 8
  %2830 = ptrtoint i8* %2828 to i64
  %2831 = sub i64 %2829, %2830
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2827, i8* align 1 %2828, i64 %2831, i1 false) #9
  %2832 = load i64, i64* %1842, align 8
  %2833 = load i64, i64* %1847, align 8
  %2834 = sub i64 %2832, %2833
  %2835 = getelementptr inbounds i8, i8* %2827, i64 %2834
  store i8* %2835, i8** %8, align 8
  store i8* %2827, i8** %1846, align 8
  %2836 = getelementptr inbounds i8, i8* %2827, i64 %2810
  store i8* %2836, i8** %11, align 8
  br label %2837

2837:                                             ; preds = %2825, %2795
  %2838 = phi i8* [ %2799, %2795 ], [ %2835, %2825 ]
  %2839 = trunc i64 %2803 to i32
  %2840 = icmp ugt i32 %2839, 127
  %2841 = trunc i64 %2803 to i8
  br i1 %2840, label %2842, label %2854

2842:                                             ; preds = %2837, %2842
  %2843 = phi i8* [ %2851, %2842 ], [ %2838, %2837 ]
  %2844 = phi i8 [ %2850, %2842 ], [ %2841, %2837 ]
  %2845 = phi i32 [ %2848, %2842 ], [ %2839, %2837 ]
  %2846 = or i8 %2844, -128
  %2847 = getelementptr inbounds i8, i8* %2843, i64 1
  store i8* %2847, i8** %8, align 8
  store i8 %2846, i8* %2843, align 1
  %2848 = lshr i32 %2845, 7
  %2849 = icmp ugt i32 %2845, 16383
  %2850 = trunc i32 %2848 to i8
  %2851 = load i8*, i8** %8, align 8
  br i1 %2849, label %2842, label %2852

2852:                                             ; preds = %2842
  %2853 = trunc i32 %2848 to i8
  br label %2854

2854:                                             ; preds = %2852, %2837
  %2855 = phi i8* [ %2838, %2837 ], [ %2851, %2852 ]
  %2856 = phi i8 [ %2841, %2837 ], [ %2853, %2852 ]
  %2857 = and i8 %2856, 127
  %2858 = getelementptr inbounds i8, i8* %2855, i64 1
  store i8* %2858, i8** %8, align 8
  store i8 %2857, i8* %2855, align 1
  %2859 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2710, i64 0, i32 0, i32 0
  %2860 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %2859, align 8
  %2861 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"** %2711, align 8
  %2862 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2860, %2861
  br i1 %2862, label %2865, label %2863

2863:                                             ; preds = %2854
  %2864 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %2891

2865:                                             ; preds = %3115, %2854
  %2866 = load i64, i64* %1842, align 8
  %2867 = load i64, i64* %1847, align 8
  %2868 = sub i64 %2866, %2759
  %2869 = sub i64 %2868, %2867
  %2870 = trunc i64 %2869 to i32
  %2871 = add i32 %2870, -5
  %2872 = inttoptr i64 %2867 to i8*
  %2873 = getelementptr inbounds i8, i8* %2872, i64 %2759
  %2874 = trunc i32 %2871 to i8
  %2875 = lshr i32 %2871, 7
  %2876 = or i8 %2874, -128
  %2877 = getelementptr inbounds i8, i8* %2873, i64 1
  store i8 %2876, i8* %2873, align 1
  %2878 = trunc i32 %2875 to i8
  %2879 = lshr i32 %2871, 14
  %2880 = or i8 %2878, -128
  %2881 = getelementptr inbounds i8, i8* %2877, i64 1
  store i8 %2880, i8* %2877, align 1
  %2882 = trunc i32 %2879 to i8
  %2883 = lshr i32 %2871, 21
  %2884 = or i8 %2882, -128
  %2885 = getelementptr inbounds i8, i8* %2881, i64 1
  store i8 %2884, i8* %2881, align 1
  %2886 = trunc i32 %2883 to i8
  %2887 = lshr i32 %2871, 28
  %2888 = or i8 %2886, -128
  %2889 = getelementptr inbounds i8, i8* %2885, i64 1
  store i8 %2888, i8* %2885, align 1
  %2890 = trunc i32 %2887 to i8
  store i8 %2890, i8* %2889, align 1
  br label %3118

2891:                                             ; preds = %2863, %3115
  %2892 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* [ %2860, %2863 ], [ %3116, %3115 ]
  %2893 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2892, i64 0, i32 0, i32 0
  %2894 = load i8*, i8** %2893, align 8
  %2895 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2892, i64 0, i32 0, i32 1
  %2896 = load i64, i64* %2895, align 8
  %2897 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2892, i64 0, i32 1
  %2898 = load i8, i8* %2897, align 8
  %2899 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2892, i64 0, i32 2
  %2900 = load i32, i32* %2899, align 4
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %2894, i64 %2896)
  %2901 = load i8*, i8** %8, align 8
  %2902 = getelementptr inbounds i8, i8* %2901, i64 1
  %2903 = load i8*, i8** %11, align 8
  %2904 = icmp ugt i8* %2902, %2903
  br i1 %2904, label %2905, label %2936

2905:                                             ; preds = %2891
  %2906 = load i64, i64* %1847, align 8
  %2907 = ptrtoint i8* %2903 to i64
  %2908 = sub i64 %2907, %2906
  %2909 = shl nsw i64 %2908, 1
  %2910 = or i64 %2909, 1
  %2911 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2864, align 8
  %2912 = add i64 %2910, 7
  %2913 = and i64 %2912, -8
  %2914 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2911, i64 0, i32 2
  %2915 = load i64, i64* %2914, align 8
  %2916 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2911, i64 0, i32 3
  %2917 = load i64, i64* %2916, align 8
  %2918 = sub i64 %2917, %2915
  %2919 = icmp ugt i64 %2913, %2918
  br i1 %2919, label %2920, label %2922, !prof !2

2920:                                             ; preds = %2905
  %2921 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2911, i64 %2913) #9
  br label %2924

2922:                                             ; preds = %2905
  %2923 = add i64 %2913, %2915
  store i64 %2923, i64* %2914, align 8
  br label %2924

2924:                                             ; preds = %2922, %2920
  %2925 = phi i64 [ %2921, %2920 ], [ %2915, %2922 ]
  %2926 = inttoptr i64 %2925 to i8*
  %2927 = load i8*, i8** %1846, align 8
  %2928 = load i64, i64* %1842, align 8
  %2929 = ptrtoint i8* %2927 to i64
  %2930 = sub i64 %2928, %2929
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2926, i8* align 1 %2927, i64 %2930, i1 false) #9
  %2931 = load i64, i64* %1842, align 8
  %2932 = load i64, i64* %1847, align 8
  %2933 = sub i64 %2931, %2932
  %2934 = getelementptr inbounds i8, i8* %2926, i64 %2933
  store i8* %2934, i8** %8, align 8
  store i8* %2926, i8** %1846, align 8
  %2935 = getelementptr inbounds i8, i8* %2926, i64 %2910
  store i8* %2935, i8** %11, align 8
  br label %2936

2936:                                             ; preds = %2891, %2924
  %2937 = phi i8* [ %2901, %2891 ], [ %2934, %2924 ]
  %2938 = getelementptr inbounds i8, i8* %2937, i64 1
  store i8* %2938, i8** %8, align 8
  store i8 %2898, i8* %2937, align 1
  switch i8 %2898, label %3115 [
    i8 0, label %2939
    i8 3, label %2998
    i8 2, label %3057
    i8 1, label %3057
    i8 4, label %3109
  ]

2939:                                             ; preds = %2936
  %2940 = sext i32 %2900 to i64
  %2941 = load i64, i64* %735, align 8
  %2942 = load i64, i64* %737, align 8
  %2943 = sub i64 %2941, %2942
  %2944 = sdiv exact i64 %2943, 40
  %2945 = add nsw i64 %2944, %2940
  %2946 = load i8*, i8** %8, align 8
  %2947 = getelementptr inbounds i8, i8* %2946, i64 5
  %2948 = load i8*, i8** %11, align 8
  %2949 = icmp ugt i8* %2947, %2948
  br i1 %2949, label %2950, label %2981

2950:                                             ; preds = %2939
  %2951 = load i64, i64* %1847, align 8
  %2952 = ptrtoint i8* %2948 to i64
  %2953 = sub i64 %2952, %2951
  %2954 = shl nsw i64 %2953, 1
  %2955 = add i64 %2954, 5
  %2956 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2864, align 8
  %2957 = add i64 %2954, 12
  %2958 = and i64 %2957, -8
  %2959 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2956, i64 0, i32 2
  %2960 = load i64, i64* %2959, align 8
  %2961 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2956, i64 0, i32 3
  %2962 = load i64, i64* %2961, align 8
  %2963 = sub i64 %2962, %2960
  %2964 = icmp ugt i64 %2958, %2963
  br i1 %2964, label %2965, label %2967, !prof !2

2965:                                             ; preds = %2950
  %2966 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2956, i64 %2958) #9
  br label %2969

2967:                                             ; preds = %2950
  %2968 = add i64 %2958, %2960
  store i64 %2968, i64* %2959, align 8
  br label %2969

2969:                                             ; preds = %2967, %2965
  %2970 = phi i64 [ %2966, %2965 ], [ %2960, %2967 ]
  %2971 = inttoptr i64 %2970 to i8*
  %2972 = load i8*, i8** %1846, align 8
  %2973 = load i64, i64* %1842, align 8
  %2974 = ptrtoint i8* %2972 to i64
  %2975 = sub i64 %2973, %2974
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2971, i8* align 1 %2972, i64 %2975, i1 false) #9
  %2976 = load i64, i64* %1842, align 8
  %2977 = load i64, i64* %1847, align 8
  %2978 = sub i64 %2976, %2977
  %2979 = getelementptr inbounds i8, i8* %2971, i64 %2978
  store i8* %2979, i8** %8, align 8
  store i8* %2971, i8** %1846, align 8
  %2980 = getelementptr inbounds i8, i8* %2971, i64 %2955
  store i8* %2980, i8** %11, align 8
  br label %2981

2981:                                             ; preds = %2969, %2939
  %2982 = phi i8* [ %2946, %2939 ], [ %2979, %2969 ]
  %2983 = trunc i64 %2945 to i32
  %2984 = icmp ugt i32 %2983, 127
  %2985 = trunc i64 %2945 to i8
  br i1 %2984, label %2986, label %3110

2986:                                             ; preds = %2981, %2986
  %2987 = phi i8* [ %2995, %2986 ], [ %2982, %2981 ]
  %2988 = phi i8 [ %2994, %2986 ], [ %2985, %2981 ]
  %2989 = phi i32 [ %2992, %2986 ], [ %2983, %2981 ]
  %2990 = or i8 %2988, -128
  %2991 = getelementptr inbounds i8, i8* %2987, i64 1
  store i8* %2991, i8** %8, align 8
  store i8 %2990, i8* %2987, align 1
  %2992 = lshr i32 %2989, 7
  %2993 = icmp ugt i32 %2989, 16383
  %2994 = trunc i32 %2992 to i8
  %2995 = load i8*, i8** %8, align 8
  br i1 %2993, label %2986, label %2996

2996:                                             ; preds = %2986
  %2997 = trunc i32 %2992 to i8
  br label %3110

2998:                                             ; preds = %2936
  %2999 = sext i32 %2900 to i64
  %3000 = load i64, i64* %727, align 8
  %3001 = load i64, i64* %729, align 8
  %3002 = sub i64 %3000, %3001
  %3003 = sdiv exact i64 %3002, 40
  %3004 = add nsw i64 %3003, %2999
  %3005 = load i8*, i8** %8, align 8
  %3006 = getelementptr inbounds i8, i8* %3005, i64 5
  %3007 = load i8*, i8** %11, align 8
  %3008 = icmp ugt i8* %3006, %3007
  br i1 %3008, label %3009, label %3040

3009:                                             ; preds = %2998
  %3010 = load i64, i64* %1847, align 8
  %3011 = ptrtoint i8* %3007 to i64
  %3012 = sub i64 %3011, %3010
  %3013 = shl nsw i64 %3012, 1
  %3014 = add i64 %3013, 5
  %3015 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2864, align 8
  %3016 = add i64 %3013, 12
  %3017 = and i64 %3016, -8
  %3018 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3015, i64 0, i32 2
  %3019 = load i64, i64* %3018, align 8
  %3020 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3015, i64 0, i32 3
  %3021 = load i64, i64* %3020, align 8
  %3022 = sub i64 %3021, %3019
  %3023 = icmp ugt i64 %3017, %3022
  br i1 %3023, label %3024, label %3026, !prof !2

3024:                                             ; preds = %3009
  %3025 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3015, i64 %3017) #9
  br label %3028

3026:                                             ; preds = %3009
  %3027 = add i64 %3017, %3019
  store i64 %3027, i64* %3018, align 8
  br label %3028

3028:                                             ; preds = %3026, %3024
  %3029 = phi i64 [ %3025, %3024 ], [ %3019, %3026 ]
  %3030 = inttoptr i64 %3029 to i8*
  %3031 = load i8*, i8** %1846, align 8
  %3032 = load i64, i64* %1842, align 8
  %3033 = ptrtoint i8* %3031 to i64
  %3034 = sub i64 %3032, %3033
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3030, i8* align 1 %3031, i64 %3034, i1 false) #9
  %3035 = load i64, i64* %1842, align 8
  %3036 = load i64, i64* %1847, align 8
  %3037 = sub i64 %3035, %3036
  %3038 = getelementptr inbounds i8, i8* %3030, i64 %3037
  store i8* %3038, i8** %8, align 8
  store i8* %3030, i8** %1846, align 8
  %3039 = getelementptr inbounds i8, i8* %3030, i64 %3014
  store i8* %3039, i8** %11, align 8
  br label %3040

3040:                                             ; preds = %3028, %2998
  %3041 = phi i8* [ %3005, %2998 ], [ %3038, %3028 ]
  %3042 = trunc i64 %3004 to i32
  %3043 = icmp ugt i32 %3042, 127
  %3044 = trunc i64 %3004 to i8
  br i1 %3043, label %3045, label %3110

3045:                                             ; preds = %3040, %3045
  %3046 = phi i8* [ %3054, %3045 ], [ %3041, %3040 ]
  %3047 = phi i8 [ %3053, %3045 ], [ %3044, %3040 ]
  %3048 = phi i32 [ %3051, %3045 ], [ %3042, %3040 ]
  %3049 = or i8 %3047, -128
  %3050 = getelementptr inbounds i8, i8* %3046, i64 1
  store i8* %3050, i8** %8, align 8
  store i8 %3049, i8* %3046, align 1
  %3051 = lshr i32 %3048, 7
  %3052 = icmp ugt i32 %3048, 16383
  %3053 = trunc i32 %3051 to i8
  %3054 = load i8*, i8** %8, align 8
  br i1 %3052, label %3045, label %3055

3055:                                             ; preds = %3045
  %3056 = trunc i32 %3051 to i8
  br label %3110

3057:                                             ; preds = %2936, %2936
  %3058 = trunc i32 %2900 to i8
  %3059 = load i8*, i8** %8, align 8
  %3060 = getelementptr inbounds i8, i8* %3059, i64 5
  %3061 = load i8*, i8** %11, align 8
  %3062 = icmp ugt i8* %3060, %3061
  br i1 %3062, label %3063, label %3094

3063:                                             ; preds = %3057
  %3064 = load i64, i64* %1847, align 8
  %3065 = ptrtoint i8* %3061 to i64
  %3066 = sub i64 %3065, %3064
  %3067 = shl nsw i64 %3066, 1
  %3068 = add i64 %3067, 5
  %3069 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2864, align 8
  %3070 = add i64 %3067, 12
  %3071 = and i64 %3070, -8
  %3072 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3069, i64 0, i32 2
  %3073 = load i64, i64* %3072, align 8
  %3074 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3069, i64 0, i32 3
  %3075 = load i64, i64* %3074, align 8
  %3076 = sub i64 %3075, %3073
  %3077 = icmp ugt i64 %3071, %3076
  br i1 %3077, label %3078, label %3080, !prof !2

3078:                                             ; preds = %3063
  %3079 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3069, i64 %3071) #9
  br label %3082

3080:                                             ; preds = %3063
  %3081 = add i64 %3071, %3073
  store i64 %3081, i64* %3072, align 8
  br label %3082

3082:                                             ; preds = %3080, %3078
  %3083 = phi i64 [ %3079, %3078 ], [ %3073, %3080 ]
  %3084 = inttoptr i64 %3083 to i8*
  %3085 = load i8*, i8** %1846, align 8
  %3086 = load i64, i64* %1842, align 8
  %3087 = ptrtoint i8* %3085 to i64
  %3088 = sub i64 %3086, %3087
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3084, i8* align 1 %3085, i64 %3088, i1 false) #9
  %3089 = load i64, i64* %1842, align 8
  %3090 = load i64, i64* %1847, align 8
  %3091 = sub i64 %3089, %3090
  %3092 = getelementptr inbounds i8, i8* %3084, i64 %3091
  store i8* %3092, i8** %8, align 8
  store i8* %3084, i8** %1846, align 8
  %3093 = getelementptr inbounds i8, i8* %3084, i64 %3068
  store i8* %3093, i8** %11, align 8
  br label %3094

3094:                                             ; preds = %3082, %3057
  %3095 = phi i8* [ %3059, %3057 ], [ %3092, %3082 ]
  %3096 = icmp ugt i32 %2900, 127
  br i1 %3096, label %3097, label %3110

3097:                                             ; preds = %3094, %3097
  %3098 = phi i8* [ %3106, %3097 ], [ %3095, %3094 ]
  %3099 = phi i8 [ %3105, %3097 ], [ %3058, %3094 ]
  %3100 = phi i32 [ %3103, %3097 ], [ %2900, %3094 ]
  %3101 = or i8 %3099, -128
  %3102 = getelementptr inbounds i8, i8* %3098, i64 1
  store i8* %3102, i8** %8, align 8
  store i8 %3101, i8* %3098, align 1
  %3103 = lshr i32 %3100, 7
  %3104 = icmp ugt i32 %3100, 16383
  %3105 = trunc i32 %3103 to i8
  %3106 = load i8*, i8** %8, align 8
  br i1 %3104, label %3097, label %3107

3107:                                             ; preds = %3097
  %3108 = trunc i32 %3103 to i8
  br label %3110

3109:                                             ; preds = %2936
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #10
  unreachable

3110:                                             ; preds = %3094, %3107, %3040, %3055, %2981, %2996
  %3111 = phi i8 [ %2985, %2981 ], [ %2997, %2996 ], [ %3044, %3040 ], [ %3056, %3055 ], [ %3058, %3094 ], [ %3108, %3107 ]
  %3112 = phi i8* [ %2982, %2981 ], [ %2995, %2996 ], [ %3041, %3040 ], [ %3054, %3055 ], [ %3095, %3094 ], [ %3106, %3107 ]
  %3113 = and i8 %3111, 127
  %3114 = getelementptr inbounds i8, i8* %3112, i64 1
  store i8* %3114, i8** %8, align 8
  store i8 %3113, i8* %3112, align 1
  br label %3115

3115:                                             ; preds = %3110, %2936
  %3116 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %2892, i64 1
  %3117 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmExport"* %3116, %2861
  br i1 %3117, label %2865, label %2891

3118:                                             ; preds = %2709, %2865
  %3119 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 12
  %3120 = load i32, i32* %3119, align 8
  %3121 = icmp sgt i32 %3120, -1
  br i1 %3121, label %3122, label %3292

3122:                                             ; preds = %3118
  %3123 = load i8*, i8** %8, align 8
  %3124 = getelementptr inbounds i8, i8* %3123, i64 1
  %3125 = load i8*, i8** %11, align 8
  %3126 = icmp ugt i8* %3124, %3125
  br i1 %3126, label %3127, label %3159

3127:                                             ; preds = %3122
  %3128 = load i64, i64* %1847, align 8
  %3129 = ptrtoint i8* %3125 to i64
  %3130 = sub i64 %3129, %3128
  %3131 = shl nsw i64 %3130, 1
  %3132 = or i64 %3131, 1
  %3133 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3134 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3133, align 8
  %3135 = add i64 %3132, 7
  %3136 = and i64 %3135, -8
  %3137 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3134, i64 0, i32 2
  %3138 = load i64, i64* %3137, align 8
  %3139 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3134, i64 0, i32 3
  %3140 = load i64, i64* %3139, align 8
  %3141 = sub i64 %3140, %3138
  %3142 = icmp ugt i64 %3136, %3141
  br i1 %3142, label %3143, label %3145, !prof !2

3143:                                             ; preds = %3127
  %3144 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3134, i64 %3136) #9
  br label %3147

3145:                                             ; preds = %3127
  %3146 = add i64 %3136, %3138
  store i64 %3146, i64* %3137, align 8
  br label %3147

3147:                                             ; preds = %3145, %3143
  %3148 = phi i64 [ %3144, %3143 ], [ %3138, %3145 ]
  %3149 = inttoptr i64 %3148 to i8*
  %3150 = load i8*, i8** %1846, align 8
  %3151 = load i64, i64* %1842, align 8
  %3152 = ptrtoint i8* %3150 to i64
  %3153 = sub i64 %3151, %3152
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3149, i8* align 1 %3150, i64 %3153, i1 false) #9
  %3154 = load i64, i64* %1842, align 8
  %3155 = load i64, i64* %1847, align 8
  %3156 = sub i64 %3154, %3155
  %3157 = getelementptr inbounds i8, i8* %3149, i64 %3156
  store i8* %3157, i8** %8, align 8
  store i8* %3149, i8** %1846, align 8
  %3158 = getelementptr inbounds i8, i8* %3149, i64 %3132
  store i8* %3158, i8** %11, align 8
  br label %3159

3159:                                             ; preds = %3122, %3147
  %3160 = phi i8* [ %3123, %3122 ], [ %3157, %3147 ]
  %3161 = getelementptr inbounds i8, i8* %3160, i64 1
  store i8* %3161, i8** %8, align 8
  store i8 8, i8* %3160, align 1
  %3162 = load i64, i64* %1842, align 8
  %3163 = load i64, i64* %1847, align 8
  %3164 = sub i64 %3162, %3163
  %3165 = inttoptr i64 %3162 to i8*
  %3166 = getelementptr inbounds i8, i8* %3165, i64 5
  %3167 = load i8*, i8** %11, align 8
  %3168 = icmp ugt i8* %3166, %3167
  br i1 %3168, label %3169, label %3200

3169:                                             ; preds = %3159
  %3170 = ptrtoint i8* %3167 to i64
  %3171 = sub i64 %3170, %3163
  %3172 = shl nsw i64 %3171, 1
  %3173 = add i64 %3172, 5
  %3174 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3175 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3174, align 8
  %3176 = add i64 %3172, 12
  %3177 = and i64 %3176, -8
  %3178 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3175, i64 0, i32 2
  %3179 = load i64, i64* %3178, align 8
  %3180 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3175, i64 0, i32 3
  %3181 = load i64, i64* %3180, align 8
  %3182 = sub i64 %3181, %3179
  %3183 = icmp ugt i64 %3177, %3182
  br i1 %3183, label %3184, label %3186, !prof !2

3184:                                             ; preds = %3169
  %3185 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3175, i64 %3177) #9
  br label %3188

3186:                                             ; preds = %3169
  %3187 = add i64 %3179, %3177
  store i64 %3187, i64* %3178, align 8
  br label %3188

3188:                                             ; preds = %3186, %3184
  %3189 = phi i64 [ %3185, %3184 ], [ %3179, %3186 ]
  %3190 = inttoptr i64 %3189 to i8*
  %3191 = load i8*, i8** %1846, align 8
  %3192 = load i64, i64* %1842, align 8
  %3193 = ptrtoint i8* %3191 to i64
  %3194 = sub i64 %3192, %3193
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3190, i8* align 1 %3191, i64 %3194, i1 false) #9
  %3195 = load i64, i64* %1842, align 8
  %3196 = load i64, i64* %1847, align 8
  %3197 = sub i64 %3195, %3196
  %3198 = getelementptr inbounds i8, i8* %3190, i64 %3197
  store i8* %3198, i8** %8, align 8
  store i8* %3190, i8** %1846, align 8
  %3199 = getelementptr inbounds i8, i8* %3190, i64 %3173
  store i8* %3199, i8** %11, align 8
  br label %3200

3200:                                             ; preds = %3159, %3188
  %3201 = phi i64 [ %3163, %3159 ], [ %3189, %3188 ]
  %3202 = phi i8* [ %3167, %3159 ], [ %3199, %3188 ]
  %3203 = phi i8* [ %3165, %3159 ], [ %3198, %3188 ]
  %3204 = getelementptr inbounds i8, i8* %3203, i64 5
  store i8* %3204, i8** %8, align 8
  %3205 = load i32, i32* %3119, align 8
  %3206 = sext i32 %3205 to i64
  %3207 = load i64, i64* %735, align 8
  %3208 = load i64, i64* %737, align 8
  %3209 = sub i64 %3207, %3208
  %3210 = sdiv exact i64 %3209, 40
  %3211 = add nsw i64 %3210, %3206
  %3212 = getelementptr inbounds i8, i8* %3203, i64 10
  %3213 = icmp ugt i8* %3212, %3202
  br i1 %3213, label %3214, label %3245

3214:                                             ; preds = %3200
  %3215 = ptrtoint i8* %3202 to i64
  %3216 = sub i64 %3215, %3201
  %3217 = shl nsw i64 %3216, 1
  %3218 = add i64 %3217, 5
  %3219 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3220 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3219, align 8
  %3221 = add i64 %3217, 12
  %3222 = and i64 %3221, -8
  %3223 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3220, i64 0, i32 2
  %3224 = load i64, i64* %3223, align 8
  %3225 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3220, i64 0, i32 3
  %3226 = load i64, i64* %3225, align 8
  %3227 = sub i64 %3226, %3224
  %3228 = icmp ugt i64 %3222, %3227
  br i1 %3228, label %3229, label %3231, !prof !2

3229:                                             ; preds = %3214
  %3230 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3220, i64 %3222) #9
  br label %3233

3231:                                             ; preds = %3214
  %3232 = add i64 %3222, %3224
  store i64 %3232, i64* %3223, align 8
  br label %3233

3233:                                             ; preds = %3231, %3229
  %3234 = phi i64 [ %3230, %3229 ], [ %3224, %3231 ]
  %3235 = inttoptr i64 %3234 to i8*
  %3236 = load i8*, i8** %1846, align 8
  %3237 = load i64, i64* %1842, align 8
  %3238 = ptrtoint i8* %3236 to i64
  %3239 = sub i64 %3237, %3238
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3235, i8* align 1 %3236, i64 %3239, i1 false) #9
  %3240 = load i64, i64* %1842, align 8
  %3241 = load i64, i64* %1847, align 8
  %3242 = sub i64 %3240, %3241
  %3243 = getelementptr inbounds i8, i8* %3235, i64 %3242
  store i8* %3243, i8** %8, align 8
  store i8* %3235, i8** %1846, align 8
  %3244 = getelementptr inbounds i8, i8* %3235, i64 %3218
  store i8* %3244, i8** %11, align 8
  br label %3245

3245:                                             ; preds = %3233, %3200
  %3246 = phi i8* [ %3204, %3200 ], [ %3243, %3233 ]
  %3247 = trunc i64 %3211 to i32
  %3248 = icmp ugt i32 %3247, 127
  %3249 = trunc i64 %3211 to i8
  br i1 %3248, label %3250, label %3262

3250:                                             ; preds = %3245, %3250
  %3251 = phi i8* [ %3259, %3250 ], [ %3246, %3245 ]
  %3252 = phi i8 [ %3258, %3250 ], [ %3249, %3245 ]
  %3253 = phi i32 [ %3256, %3250 ], [ %3247, %3245 ]
  %3254 = or i8 %3252, -128
  %3255 = getelementptr inbounds i8, i8* %3251, i64 1
  store i8* %3255, i8** %8, align 8
  store i8 %3254, i8* %3251, align 1
  %3256 = lshr i32 %3253, 7
  %3257 = icmp ugt i32 %3253, 16383
  %3258 = trunc i32 %3256 to i8
  %3259 = load i8*, i8** %8, align 8
  br i1 %3257, label %3250, label %3260

3260:                                             ; preds = %3250
  %3261 = trunc i32 %3256 to i8
  br label %3262

3262:                                             ; preds = %3260, %3245
  %3263 = phi i8* [ %3246, %3245 ], [ %3259, %3260 ]
  %3264 = phi i8 [ %3249, %3245 ], [ %3261, %3260 ]
  %3265 = and i8 %3264, 127
  %3266 = getelementptr inbounds i8, i8* %3263, i64 1
  store i8* %3266, i8** %8, align 8
  store i8 %3265, i8* %3263, align 1
  %3267 = load i64, i64* %1842, align 8
  %3268 = load i64, i64* %1847, align 8
  %3269 = sub i64 %3267, %3164
  %3270 = sub i64 %3269, %3268
  %3271 = trunc i64 %3270 to i32
  %3272 = add i32 %3271, -5
  %3273 = inttoptr i64 %3268 to i8*
  %3274 = getelementptr inbounds i8, i8* %3273, i64 %3164
  %3275 = trunc i32 %3272 to i8
  %3276 = lshr i32 %3272, 7
  %3277 = or i8 %3275, -128
  %3278 = getelementptr inbounds i8, i8* %3274, i64 1
  store i8 %3277, i8* %3274, align 1
  %3279 = trunc i32 %3276 to i8
  %3280 = lshr i32 %3272, 14
  %3281 = or i8 %3279, -128
  %3282 = getelementptr inbounds i8, i8* %3278, i64 1
  store i8 %3281, i8* %3278, align 1
  %3283 = trunc i32 %3280 to i8
  %3284 = lshr i32 %3272, 21
  %3285 = or i8 %3283, -128
  %3286 = getelementptr inbounds i8, i8* %3282, i64 1
  store i8 %3285, i8* %3282, align 1
  %3287 = trunc i32 %3284 to i8
  %3288 = lshr i32 %3272, 28
  %3289 = or i8 %3287, -128
  %3290 = getelementptr inbounds i8, i8* %3286, i64 1
  store i8 %3289, i8* %3286, align 1
  %3291 = trunc i32 %3288 to i8
  store i8 %3291, i8* %3290, align 1
  br label %3292

3292:                                             ; preds = %3262, %3118
  %3293 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0
  %3294 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %3295 = bitcast i32** %3294 to i64*
  %3296 = load i64, i64* %3295, align 8
  %3297 = bitcast %"class.std::__1::vector.77"* %3293 to i64*
  %3298 = load i64, i64* %3297, align 8
  %3299 = icmp eq i64 %3296, %3298
  br i1 %3299, label %3781, label %3300

3300:                                             ; preds = %3292
  %3301 = load i8*, i8** %8, align 8
  %3302 = getelementptr inbounds i8, i8* %3301, i64 1
  %3303 = load i8*, i8** %11, align 8
  %3304 = icmp ugt i8* %3302, %3303
  br i1 %3304, label %3305, label %3337

3305:                                             ; preds = %3300
  %3306 = load i64, i64* %1847, align 8
  %3307 = ptrtoint i8* %3303 to i64
  %3308 = sub i64 %3307, %3306
  %3309 = shl nsw i64 %3308, 1
  %3310 = or i64 %3309, 1
  %3311 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3312 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3311, align 8
  %3313 = add i64 %3310, 7
  %3314 = and i64 %3313, -8
  %3315 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3312, i64 0, i32 2
  %3316 = load i64, i64* %3315, align 8
  %3317 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3312, i64 0, i32 3
  %3318 = load i64, i64* %3317, align 8
  %3319 = sub i64 %3318, %3316
  %3320 = icmp ugt i64 %3314, %3319
  br i1 %3320, label %3321, label %3323, !prof !2

3321:                                             ; preds = %3305
  %3322 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3312, i64 %3314) #9
  br label %3325

3323:                                             ; preds = %3305
  %3324 = add i64 %3314, %3316
  store i64 %3324, i64* %3315, align 8
  br label %3325

3325:                                             ; preds = %3323, %3321
  %3326 = phi i64 [ %3322, %3321 ], [ %3316, %3323 ]
  %3327 = inttoptr i64 %3326 to i8*
  %3328 = load i8*, i8** %1846, align 8
  %3329 = load i64, i64* %1842, align 8
  %3330 = ptrtoint i8* %3328 to i64
  %3331 = sub i64 %3329, %3330
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3327, i8* align 1 %3328, i64 %3331, i1 false) #9
  %3332 = load i64, i64* %1842, align 8
  %3333 = load i64, i64* %1847, align 8
  %3334 = sub i64 %3332, %3333
  %3335 = getelementptr inbounds i8, i8* %3327, i64 %3334
  store i8* %3335, i8** %8, align 8
  store i8* %3327, i8** %1846, align 8
  %3336 = getelementptr inbounds i8, i8* %3327, i64 %3310
  store i8* %3336, i8** %11, align 8
  br label %3337

3337:                                             ; preds = %3300, %3325
  %3338 = phi i8* [ %3301, %3300 ], [ %3335, %3325 ]
  %3339 = getelementptr inbounds i8, i8* %3338, i64 1
  store i8* %3339, i8** %8, align 8
  store i8 9, i8* %3338, align 1
  %3340 = load i64, i64* %1842, align 8
  %3341 = load i64, i64* %1847, align 8
  %3342 = sub i64 %3340, %3341
  %3343 = inttoptr i64 %3340 to i8*
  %3344 = getelementptr inbounds i8, i8* %3343, i64 5
  %3345 = load i8*, i8** %11, align 8
  %3346 = icmp ugt i8* %3344, %3345
  br i1 %3346, label %3347, label %3378

3347:                                             ; preds = %3337
  %3348 = ptrtoint i8* %3345 to i64
  %3349 = sub i64 %3348, %3341
  %3350 = shl nsw i64 %3349, 1
  %3351 = add i64 %3350, 5
  %3352 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3353 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3352, align 8
  %3354 = add i64 %3350, 12
  %3355 = and i64 %3354, -8
  %3356 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3353, i64 0, i32 2
  %3357 = load i64, i64* %3356, align 8
  %3358 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3353, i64 0, i32 3
  %3359 = load i64, i64* %3358, align 8
  %3360 = sub i64 %3359, %3357
  %3361 = icmp ugt i64 %3355, %3360
  br i1 %3361, label %3362, label %3364, !prof !2

3362:                                             ; preds = %3347
  %3363 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3353, i64 %3355) #9
  br label %3366

3364:                                             ; preds = %3347
  %3365 = add i64 %3357, %3355
  store i64 %3365, i64* %3356, align 8
  br label %3366

3366:                                             ; preds = %3364, %3362
  %3367 = phi i64 [ %3363, %3362 ], [ %3357, %3364 ]
  %3368 = inttoptr i64 %3367 to i8*
  %3369 = load i8*, i8** %1846, align 8
  %3370 = load i64, i64* %1842, align 8
  %3371 = ptrtoint i8* %3369 to i64
  %3372 = sub i64 %3370, %3371
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3368, i8* align 1 %3369, i64 %3372, i1 false) #9
  %3373 = load i64, i64* %1842, align 8
  %3374 = load i64, i64* %1847, align 8
  %3375 = sub i64 %3373, %3374
  %3376 = getelementptr inbounds i8, i8* %3368, i64 %3375
  store i8* %3376, i8** %8, align 8
  store i8* %3368, i8** %1846, align 8
  %3377 = getelementptr inbounds i8, i8* %3368, i64 %3351
  store i8* %3377, i8** %11, align 8
  br label %3378

3378:                                             ; preds = %3337, %3366
  %3379 = phi i64 [ %3341, %3337 ], [ %3367, %3366 ]
  %3380 = phi i8* [ %3345, %3337 ], [ %3377, %3366 ]
  %3381 = phi i8* [ %3343, %3337 ], [ %3376, %3366 ]
  %3382 = getelementptr inbounds i8, i8* %3381, i64 5
  store i8* %3382, i8** %8, align 8
  %3383 = getelementptr inbounds i8, i8* %3381, i64 6
  %3384 = icmp ugt i8* %3383, %3380
  br i1 %3384, label %3385, label %3416

3385:                                             ; preds = %3378
  %3386 = ptrtoint i8* %3380 to i64
  %3387 = sub i64 %3386, %3379
  %3388 = shl nsw i64 %3387, 1
  %3389 = or i64 %3388, 1
  %3390 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3391 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3390, align 8
  %3392 = add i64 %3389, 7
  %3393 = and i64 %3392, -8
  %3394 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3391, i64 0, i32 2
  %3395 = load i64, i64* %3394, align 8
  %3396 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3391, i64 0, i32 3
  %3397 = load i64, i64* %3396, align 8
  %3398 = sub i64 %3397, %3395
  %3399 = icmp ugt i64 %3393, %3398
  br i1 %3399, label %3400, label %3402, !prof !2

3400:                                             ; preds = %3385
  %3401 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3391, i64 %3393) #9
  br label %3404

3402:                                             ; preds = %3385
  %3403 = add i64 %3393, %3395
  store i64 %3403, i64* %3394, align 8
  br label %3404

3404:                                             ; preds = %3402, %3400
  %3405 = phi i64 [ %3401, %3400 ], [ %3395, %3402 ]
  %3406 = inttoptr i64 %3405 to i8*
  %3407 = load i8*, i8** %1846, align 8
  %3408 = load i64, i64* %1842, align 8
  %3409 = ptrtoint i8* %3407 to i64
  %3410 = sub i64 %3408, %3409
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3406, i8* align 1 %3407, i64 %3410, i1 false) #9
  %3411 = load i64, i64* %1842, align 8
  %3412 = load i64, i64* %1847, align 8
  %3413 = sub i64 %3411, %3412
  %3414 = getelementptr inbounds i8, i8* %3406, i64 %3413
  store i8* %3414, i8** %8, align 8
  store i8* %3406, i8** %1846, align 8
  %3415 = getelementptr inbounds i8, i8* %3406, i64 %3389
  store i8* %3415, i8** %11, align 8
  br label %3416

3416:                                             ; preds = %3378, %3404
  %3417 = phi i8* [ %3382, %3378 ], [ %3414, %3404 ]
  %3418 = getelementptr inbounds i8, i8* %3417, i64 1
  store i8* %3418, i8** %8, align 8
  store i8 1, i8* %3417, align 1
  %3419 = load i8*, i8** %8, align 8
  %3420 = getelementptr inbounds i8, i8* %3419, i64 1
  %3421 = load i8*, i8** %11, align 8
  %3422 = icmp ugt i8* %3420, %3421
  br i1 %3422, label %3423, label %3455

3423:                                             ; preds = %3416
  %3424 = load i64, i64* %1847, align 8
  %3425 = ptrtoint i8* %3421 to i64
  %3426 = sub i64 %3425, %3424
  %3427 = shl nsw i64 %3426, 1
  %3428 = or i64 %3427, 1
  %3429 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3430 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3429, align 8
  %3431 = add i64 %3428, 7
  %3432 = and i64 %3431, -8
  %3433 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3430, i64 0, i32 2
  %3434 = load i64, i64* %3433, align 8
  %3435 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3430, i64 0, i32 3
  %3436 = load i64, i64* %3435, align 8
  %3437 = sub i64 %3436, %3434
  %3438 = icmp ugt i64 %3432, %3437
  br i1 %3438, label %3439, label %3441, !prof !2

3439:                                             ; preds = %3423
  %3440 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3430, i64 %3432) #9
  br label %3443

3441:                                             ; preds = %3423
  %3442 = add i64 %3432, %3434
  store i64 %3442, i64* %3433, align 8
  br label %3443

3443:                                             ; preds = %3441, %3439
  %3444 = phi i64 [ %3440, %3439 ], [ %3434, %3441 ]
  %3445 = inttoptr i64 %3444 to i8*
  %3446 = load i8*, i8** %1846, align 8
  %3447 = load i64, i64* %1842, align 8
  %3448 = ptrtoint i8* %3446 to i64
  %3449 = sub i64 %3447, %3448
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3445, i8* align 1 %3446, i64 %3449, i1 false) #9
  %3450 = load i64, i64* %1842, align 8
  %3451 = load i64, i64* %1847, align 8
  %3452 = sub i64 %3450, %3451
  %3453 = getelementptr inbounds i8, i8* %3445, i64 %3452
  store i8* %3453, i8** %8, align 8
  store i8* %3445, i8** %1846, align 8
  %3454 = getelementptr inbounds i8, i8* %3445, i64 %3428
  store i8* %3454, i8** %11, align 8
  br label %3455

3455:                                             ; preds = %3416, %3443
  %3456 = phi i8* [ %3419, %3416 ], [ %3453, %3443 ]
  %3457 = getelementptr inbounds i8, i8* %3456, i64 1
  store i8* %3457, i8** %8, align 8
  store i8 0, i8* %3456, align 1
  %3458 = load i64, i64* %3295, align 8
  %3459 = load i64, i64* %3297, align 8
  %3460 = sub i64 %3458, %3459
  %3461 = ashr exact i64 %3460, 2
  %3462 = icmp eq i64 %3460, 0
  %3463 = inttoptr i64 %3459 to i32*
  br i1 %3462, label %3474, label %3464

3464:                                             ; preds = %3455, %3470
  %3465 = phi i64 [ %3472, %3470 ], [ 0, %3455 ]
  %3466 = phi i32 [ %3471, %3470 ], [ 0, %3455 ]
  %3467 = getelementptr inbounds i32, i32* %3463, i64 %3465
  %3468 = load i32, i32* %3467, align 4
  %3469 = icmp eq i32 %3468, -1
  br i1 %3469, label %3470, label %3474

3470:                                             ; preds = %3464
  %3471 = add i32 %3466, 1
  %3472 = zext i32 %3471 to i64
  %3473 = icmp ugt i64 %3461, %3472
  br i1 %3473, label %3464, label %3474

3474:                                             ; preds = %3464, %3470, %3455
  %3475 = phi i32 [ 0, %3455 ], [ %3471, %3470 ], [ %3466, %3464 ]
  %3476 = trunc i64 %3461 to i32
  %3477 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %3293, i64 0, i32 0, i32 0
  br label %3478

3478:                                             ; preds = %3482, %3474
  %3479 = phi i32 [ %3476, %3474 ], [ %3480, %3482 ]
  %3480 = add i32 %3479, -1
  %3481 = icmp ult i32 %3480, %3475
  br i1 %3481, label %3487, label %3482

3482:                                             ; preds = %3478
  %3483 = zext i32 %3480 to i64
  %3484 = getelementptr inbounds i32, i32* %3463, i64 %3483
  %3485 = load i32, i32* %3484, align 4
  %3486 = icmp eq i32 %3485, -1
  br i1 %3486, label %3478, label %3487

3487:                                             ; preds = %3478, %3482
  %3488 = load i8*, i8** %8, align 8
  %3489 = getelementptr inbounds i8, i8* %3488, i64 1
  %3490 = load i8*, i8** %11, align 8
  %3491 = icmp ugt i8* %3489, %3490
  br i1 %3491, label %3492, label %3524

3492:                                             ; preds = %3487
  %3493 = load i64, i64* %1847, align 8
  %3494 = ptrtoint i8* %3490 to i64
  %3495 = sub i64 %3494, %3493
  %3496 = shl nsw i64 %3495, 1
  %3497 = or i64 %3496, 1
  %3498 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3499 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3498, align 8
  %3500 = add i64 %3497, 7
  %3501 = and i64 %3500, -8
  %3502 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3499, i64 0, i32 2
  %3503 = load i64, i64* %3502, align 8
  %3504 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3499, i64 0, i32 3
  %3505 = load i64, i64* %3504, align 8
  %3506 = sub i64 %3505, %3503
  %3507 = icmp ugt i64 %3501, %3506
  br i1 %3507, label %3508, label %3510, !prof !2

3508:                                             ; preds = %3492
  %3509 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3499, i64 %3501) #9
  br label %3512

3510:                                             ; preds = %3492
  %3511 = add i64 %3501, %3503
  store i64 %3511, i64* %3502, align 8
  br label %3512

3512:                                             ; preds = %3510, %3508
  %3513 = phi i64 [ %3509, %3508 ], [ %3503, %3510 ]
  %3514 = inttoptr i64 %3513 to i8*
  %3515 = load i8*, i8** %1846, align 8
  %3516 = load i64, i64* %1842, align 8
  %3517 = ptrtoint i8* %3515 to i64
  %3518 = sub i64 %3516, %3517
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3514, i8* align 1 %3515, i64 %3518, i1 false) #9
  %3519 = load i64, i64* %1842, align 8
  %3520 = load i64, i64* %1847, align 8
  %3521 = sub i64 %3519, %3520
  %3522 = getelementptr inbounds i8, i8* %3514, i64 %3521
  store i8* %3522, i8** %8, align 8
  store i8* %3514, i8** %1846, align 8
  %3523 = getelementptr inbounds i8, i8* %3514, i64 %3497
  store i8* %3523, i8** %11, align 8
  br label %3524

3524:                                             ; preds = %3487, %3512
  %3525 = phi i8* [ %3488, %3487 ], [ %3522, %3512 ]
  %3526 = getelementptr inbounds i8, i8* %3525, i64 1
  store i8* %3526, i8** %8, align 8
  store i8 65, i8* %3525, align 1
  %3527 = load i8*, i8** %8, align 8
  %3528 = getelementptr inbounds i8, i8* %3527, i64 5
  %3529 = load i8*, i8** %11, align 8
  %3530 = icmp ugt i8* %3528, %3529
  br i1 %3530, label %3531, label %3563

3531:                                             ; preds = %3524
  %3532 = load i64, i64* %1847, align 8
  %3533 = ptrtoint i8* %3529 to i64
  %3534 = sub i64 %3533, %3532
  %3535 = shl nsw i64 %3534, 1
  %3536 = add i64 %3535, 5
  %3537 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3538 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3537, align 8
  %3539 = add i64 %3535, 12
  %3540 = and i64 %3539, -8
  %3541 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3538, i64 0, i32 2
  %3542 = load i64, i64* %3541, align 8
  %3543 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3538, i64 0, i32 3
  %3544 = load i64, i64* %3543, align 8
  %3545 = sub i64 %3544, %3542
  %3546 = icmp ugt i64 %3540, %3545
  br i1 %3546, label %3547, label %3549, !prof !2

3547:                                             ; preds = %3531
  %3548 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3538, i64 %3540) #9
  br label %3551

3549:                                             ; preds = %3531
  %3550 = add i64 %3540, %3542
  store i64 %3550, i64* %3541, align 8
  br label %3551

3551:                                             ; preds = %3549, %3547
  %3552 = phi i64 [ %3548, %3547 ], [ %3542, %3549 ]
  %3553 = inttoptr i64 %3552 to i8*
  %3554 = load i8*, i8** %1846, align 8
  %3555 = load i64, i64* %1842, align 8
  %3556 = ptrtoint i8* %3554 to i64
  %3557 = sub i64 %3555, %3556
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3553, i8* align 1 %3554, i64 %3557, i1 false) #9
  %3558 = load i64, i64* %1842, align 8
  %3559 = load i64, i64* %1847, align 8
  %3560 = sub i64 %3558, %3559
  %3561 = getelementptr inbounds i8, i8* %3553, i64 %3560
  store i8* %3561, i8** %8, align 8
  store i8* %3553, i8** %1846, align 8
  %3562 = getelementptr inbounds i8, i8* %3553, i64 %3536
  store i8* %3562, i8** %11, align 8
  br label %3563

3563:                                             ; preds = %3551, %3524
  %3564 = phi i8* [ %3527, %3524 ], [ %3561, %3551 ]
  %3565 = icmp ugt i32 %3475, 127
  %3566 = trunc i32 %3475 to i8
  br i1 %3565, label %3567, label %3579

3567:                                             ; preds = %3563, %3567
  %3568 = phi i8* [ %3576, %3567 ], [ %3564, %3563 ]
  %3569 = phi i8 [ %3575, %3567 ], [ %3566, %3563 ]
  %3570 = phi i32 [ %3573, %3567 ], [ %3475, %3563 ]
  %3571 = or i8 %3569, -128
  %3572 = getelementptr inbounds i8, i8* %3568, i64 1
  store i8* %3572, i8** %8, align 8
  store i8 %3571, i8* %3568, align 1
  %3573 = lshr i32 %3570, 7
  %3574 = icmp ugt i32 %3570, 16383
  %3575 = trunc i32 %3573 to i8
  %3576 = load i8*, i8** %8, align 8
  br i1 %3574, label %3567, label %3577

3577:                                             ; preds = %3567
  %3578 = trunc i32 %3573 to i8
  br label %3579

3579:                                             ; preds = %3577, %3563
  %3580 = phi i8* [ %3564, %3563 ], [ %3576, %3577 ]
  %3581 = phi i8 [ %3566, %3563 ], [ %3578, %3577 ]
  %3582 = and i8 %3581, 127
  %3583 = getelementptr inbounds i8, i8* %3580, i64 1
  store i8* %3583, i8** %8, align 8
  store i8 %3582, i8* %3580, align 1
  %3584 = load i8*, i8** %8, align 8
  %3585 = getelementptr inbounds i8, i8* %3584, i64 1
  %3586 = load i8*, i8** %11, align 8
  %3587 = icmp ugt i8* %3585, %3586
  br i1 %3587, label %3588, label %3620

3588:                                             ; preds = %3579
  %3589 = load i64, i64* %1847, align 8
  %3590 = ptrtoint i8* %3586 to i64
  %3591 = sub i64 %3590, %3589
  %3592 = shl nsw i64 %3591, 1
  %3593 = or i64 %3592, 1
  %3594 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3595 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3594, align 8
  %3596 = add i64 %3593, 7
  %3597 = and i64 %3596, -8
  %3598 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3595, i64 0, i32 2
  %3599 = load i64, i64* %3598, align 8
  %3600 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3595, i64 0, i32 3
  %3601 = load i64, i64* %3600, align 8
  %3602 = sub i64 %3601, %3599
  %3603 = icmp ugt i64 %3597, %3602
  br i1 %3603, label %3604, label %3606, !prof !2

3604:                                             ; preds = %3588
  %3605 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3595, i64 %3597) #9
  br label %3608

3606:                                             ; preds = %3588
  %3607 = add i64 %3597, %3599
  store i64 %3607, i64* %3598, align 8
  br label %3608

3608:                                             ; preds = %3606, %3604
  %3609 = phi i64 [ %3605, %3604 ], [ %3599, %3606 ]
  %3610 = inttoptr i64 %3609 to i8*
  %3611 = load i8*, i8** %1846, align 8
  %3612 = load i64, i64* %1842, align 8
  %3613 = ptrtoint i8* %3611 to i64
  %3614 = sub i64 %3612, %3613
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3610, i8* align 1 %3611, i64 %3614, i1 false) #9
  %3615 = load i64, i64* %1842, align 8
  %3616 = load i64, i64* %1847, align 8
  %3617 = sub i64 %3615, %3616
  %3618 = getelementptr inbounds i8, i8* %3610, i64 %3617
  store i8* %3618, i8** %8, align 8
  store i8* %3610, i8** %1846, align 8
  %3619 = getelementptr inbounds i8, i8* %3610, i64 %3593
  store i8* %3619, i8** %11, align 8
  br label %3620

3620:                                             ; preds = %3579, %3608
  %3621 = phi i8* [ %3584, %3579 ], [ %3618, %3608 ]
  %3622 = getelementptr inbounds i8, i8* %3621, i64 1
  store i8* %3622, i8** %8, align 8
  store i8 11, i8* %3621, align 1
  %3623 = sub i32 %3480, %3475
  %3624 = add i32 %3623, 1
  %3625 = trunc i32 %3624 to i8
  %3626 = load i8*, i8** %8, align 8
  %3627 = getelementptr inbounds i8, i8* %3626, i64 5
  %3628 = load i8*, i8** %11, align 8
  %3629 = icmp ugt i8* %3627, %3628
  br i1 %3629, label %3630, label %3662

3630:                                             ; preds = %3620
  %3631 = load i64, i64* %1847, align 8
  %3632 = ptrtoint i8* %3628 to i64
  %3633 = sub i64 %3632, %3631
  %3634 = shl nsw i64 %3633, 1
  %3635 = add i64 %3634, 5
  %3636 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3637 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3636, align 8
  %3638 = add i64 %3634, 12
  %3639 = and i64 %3638, -8
  %3640 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3637, i64 0, i32 2
  %3641 = load i64, i64* %3640, align 8
  %3642 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3637, i64 0, i32 3
  %3643 = load i64, i64* %3642, align 8
  %3644 = sub i64 %3643, %3641
  %3645 = icmp ugt i64 %3639, %3644
  br i1 %3645, label %3646, label %3648, !prof !2

3646:                                             ; preds = %3630
  %3647 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3637, i64 %3639) #9
  br label %3650

3648:                                             ; preds = %3630
  %3649 = add i64 %3639, %3641
  store i64 %3649, i64* %3640, align 8
  br label %3650

3650:                                             ; preds = %3648, %3646
  %3651 = phi i64 [ %3647, %3646 ], [ %3641, %3648 ]
  %3652 = inttoptr i64 %3651 to i8*
  %3653 = load i8*, i8** %1846, align 8
  %3654 = load i64, i64* %1842, align 8
  %3655 = ptrtoint i8* %3653 to i64
  %3656 = sub i64 %3654, %3655
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3652, i8* align 1 %3653, i64 %3656, i1 false) #9
  %3657 = load i64, i64* %1842, align 8
  %3658 = load i64, i64* %1847, align 8
  %3659 = sub i64 %3657, %3658
  %3660 = getelementptr inbounds i8, i8* %3652, i64 %3659
  store i8* %3660, i8** %8, align 8
  store i8* %3652, i8** %1846, align 8
  %3661 = getelementptr inbounds i8, i8* %3652, i64 %3635
  store i8* %3661, i8** %11, align 8
  br label %3662

3662:                                             ; preds = %3650, %3620
  %3663 = phi i8* [ %3626, %3620 ], [ %3660, %3650 ]
  %3664 = icmp ugt i32 %3624, 127
  br i1 %3664, label %3665, label %3677

3665:                                             ; preds = %3662, %3665
  %3666 = phi i8* [ %3674, %3665 ], [ %3663, %3662 ]
  %3667 = phi i8 [ %3673, %3665 ], [ %3625, %3662 ]
  %3668 = phi i32 [ %3671, %3665 ], [ %3624, %3662 ]
  %3669 = or i8 %3667, -128
  %3670 = getelementptr inbounds i8, i8* %3666, i64 1
  store i8* %3670, i8** %8, align 8
  store i8 %3669, i8* %3666, align 1
  %3671 = lshr i32 %3668, 7
  %3672 = icmp ugt i32 %3668, 16383
  %3673 = trunc i32 %3671 to i8
  %3674 = load i8*, i8** %8, align 8
  br i1 %3672, label %3665, label %3675

3675:                                             ; preds = %3665
  %3676 = trunc i32 %3671 to i8
  br label %3677

3677:                                             ; preds = %3675, %3662
  %3678 = phi i8* [ %3663, %3662 ], [ %3674, %3675 ]
  %3679 = phi i8 [ %3625, %3662 ], [ %3676, %3675 ]
  %3680 = and i8 %3679, 127
  %3681 = getelementptr inbounds i8, i8* %3678, i64 1
  store i8* %3681, i8** %8, align 8
  store i8 %3680, i8* %3678, align 1
  br i1 %3481, label %3684, label %3682

3682:                                             ; preds = %3677
  %3683 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %3710

3684:                                             ; preds = %3774, %3677
  %3685 = load i64, i64* %1842, align 8
  %3686 = load i64, i64* %1847, align 8
  %3687 = sub i64 %3685, %3342
  %3688 = sub i64 %3687, %3686
  %3689 = trunc i64 %3688 to i32
  %3690 = add i32 %3689, -5
  %3691 = inttoptr i64 %3686 to i8*
  %3692 = getelementptr inbounds i8, i8* %3691, i64 %3342
  %3693 = trunc i32 %3690 to i8
  %3694 = lshr i32 %3690, 7
  %3695 = or i8 %3693, -128
  %3696 = getelementptr inbounds i8, i8* %3692, i64 1
  store i8 %3695, i8* %3692, align 1
  %3697 = trunc i32 %3694 to i8
  %3698 = lshr i32 %3690, 14
  %3699 = or i8 %3697, -128
  %3700 = getelementptr inbounds i8, i8* %3696, i64 1
  store i8 %3699, i8* %3696, align 1
  %3701 = trunc i32 %3698 to i8
  %3702 = lshr i32 %3690, 21
  %3703 = or i8 %3701, -128
  %3704 = getelementptr inbounds i8, i8* %3700, i64 1
  store i8 %3703, i8* %3700, align 1
  %3705 = trunc i32 %3702 to i8
  %3706 = lshr i32 %3690, 28
  %3707 = or i8 %3705, -128
  %3708 = getelementptr inbounds i8, i8* %3704, i64 1
  store i8 %3707, i8* %3704, align 1
  %3709 = trunc i32 %3706 to i8
  store i8 %3709, i8* %3708, align 1
  br label %3781

3710:                                             ; preds = %3682, %3774
  %3711 = phi i32 [ %3475, %3682 ], [ %3779, %3774 ]
  %3712 = zext i32 %3711 to i64
  %3713 = load i32*, i32** %3477, align 8
  %3714 = getelementptr inbounds i32, i32* %3713, i64 %3712
  %3715 = load i32, i32* %3714, align 4
  %3716 = zext i32 %3715 to i64
  %3717 = load i64, i64* %735, align 8
  %3718 = load i64, i64* %737, align 8
  %3719 = sub i64 %3717, %3718
  %3720 = sdiv exact i64 %3719, 40
  %3721 = add nsw i64 %3720, %3716
  %3722 = load i8*, i8** %8, align 8
  %3723 = getelementptr inbounds i8, i8* %3722, i64 5
  %3724 = load i8*, i8** %11, align 8
  %3725 = icmp ugt i8* %3723, %3724
  br i1 %3725, label %3726, label %3757

3726:                                             ; preds = %3710
  %3727 = load i64, i64* %1847, align 8
  %3728 = ptrtoint i8* %3724 to i64
  %3729 = sub i64 %3728, %3727
  %3730 = shl nsw i64 %3729, 1
  %3731 = add i64 %3730, 5
  %3732 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3683, align 8
  %3733 = add i64 %3730, 12
  %3734 = and i64 %3733, -8
  %3735 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3732, i64 0, i32 2
  %3736 = load i64, i64* %3735, align 8
  %3737 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3732, i64 0, i32 3
  %3738 = load i64, i64* %3737, align 8
  %3739 = sub i64 %3738, %3736
  %3740 = icmp ugt i64 %3734, %3739
  br i1 %3740, label %3741, label %3743, !prof !2

3741:                                             ; preds = %3726
  %3742 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3732, i64 %3734) #9
  br label %3745

3743:                                             ; preds = %3726
  %3744 = add i64 %3734, %3736
  store i64 %3744, i64* %3735, align 8
  br label %3745

3745:                                             ; preds = %3743, %3741
  %3746 = phi i64 [ %3742, %3741 ], [ %3736, %3743 ]
  %3747 = inttoptr i64 %3746 to i8*
  %3748 = load i8*, i8** %1846, align 8
  %3749 = load i64, i64* %1842, align 8
  %3750 = ptrtoint i8* %3748 to i64
  %3751 = sub i64 %3749, %3750
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3747, i8* align 1 %3748, i64 %3751, i1 false) #9
  %3752 = load i64, i64* %1842, align 8
  %3753 = load i64, i64* %1847, align 8
  %3754 = sub i64 %3752, %3753
  %3755 = getelementptr inbounds i8, i8* %3747, i64 %3754
  store i8* %3755, i8** %8, align 8
  store i8* %3747, i8** %1846, align 8
  %3756 = getelementptr inbounds i8, i8* %3747, i64 %3731
  store i8* %3756, i8** %11, align 8
  br label %3757

3757:                                             ; preds = %3745, %3710
  %3758 = phi i8* [ %3722, %3710 ], [ %3755, %3745 ]
  %3759 = trunc i64 %3721 to i32
  %3760 = icmp ugt i32 %3759, 127
  %3761 = trunc i64 %3721 to i8
  br i1 %3760, label %3762, label %3774

3762:                                             ; preds = %3757, %3762
  %3763 = phi i8* [ %3771, %3762 ], [ %3758, %3757 ]
  %3764 = phi i8 [ %3770, %3762 ], [ %3761, %3757 ]
  %3765 = phi i32 [ %3768, %3762 ], [ %3759, %3757 ]
  %3766 = or i8 %3764, -128
  %3767 = getelementptr inbounds i8, i8* %3763, i64 1
  store i8* %3767, i8** %8, align 8
  store i8 %3766, i8* %3763, align 1
  %3768 = lshr i32 %3765, 7
  %3769 = icmp ugt i32 %3765, 16383
  %3770 = trunc i32 %3768 to i8
  %3771 = load i8*, i8** %8, align 8
  br i1 %3769, label %3762, label %3772

3772:                                             ; preds = %3762
  %3773 = trunc i32 %3768 to i8
  br label %3774

3774:                                             ; preds = %3772, %3757
  %3775 = phi i8* [ %3758, %3757 ], [ %3771, %3772 ]
  %3776 = phi i8 [ %3761, %3757 ], [ %3773, %3772 ]
  %3777 = and i8 %3776, 127
  %3778 = getelementptr inbounds i8, i8* %3775, i64 1
  store i8* %3778, i8** %8, align 8
  store i8 %3777, i8* %3775, align 1
  %3779 = add i32 %3711, 1
  %3780 = icmp ugt i32 %3779, %3480
  br i1 %3780, label %3684, label %3710

3781:                                             ; preds = %3292, %3684
  %3782 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1176, i64 0, i32 0, i32 0
  %3783 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %3782, align 8
  %3784 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177, align 8
  %3785 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %3783, %3784
  %3786 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %3784 to i64
  %3787 = ptrtoint %"class.v8::internal::wasm::WasmFunctionBuilder"** %3783 to i64
  br i1 %3785, label %4026, label %3788

3788:                                             ; preds = %3781, %3788
  %3789 = phi i8 [ %3795, %3788 ], [ 0, %3781 ]
  %3790 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %3796, %3788 ], [ %3783, %3781 ]
  %3791 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %3790, align 8
  %3792 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %3791, i64 0, i32 15
  %3793 = load i8, i8* %3792, align 4
  %3794 = icmp eq i8 %3793, -1
  %3795 = select i1 %3794, i8 %3789, i8 1
  %3796 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %3790, i64 1
  %3797 = xor i1 %3794, true
  %3798 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %3796, %3784
  %3799 = or i1 %3798, %3797
  br i1 %3799, label %3800, label %3788

3800:                                             ; preds = %3788
  %3801 = and i8 %3795, 1
  %3802 = icmp eq i8 %3801, 0
  br i1 %3802, label %4026, label %3803

3803:                                             ; preds = %3800
  %3804 = load i8*, i8** %8, align 8
  %3805 = getelementptr inbounds i8, i8* %3804, i64 1
  %3806 = load i8*, i8** %11, align 8
  %3807 = icmp ugt i8* %3805, %3806
  br i1 %3807, label %3808, label %3840

3808:                                             ; preds = %3803
  %3809 = load i64, i64* %1847, align 8
  %3810 = ptrtoint i8* %3806 to i64
  %3811 = sub i64 %3810, %3809
  %3812 = shl nsw i64 %3811, 1
  %3813 = or i64 %3812, 1
  %3814 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3815 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3814, align 8
  %3816 = add i64 %3813, 7
  %3817 = and i64 %3816, -8
  %3818 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3815, i64 0, i32 2
  %3819 = load i64, i64* %3818, align 8
  %3820 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3815, i64 0, i32 3
  %3821 = load i64, i64* %3820, align 8
  %3822 = sub i64 %3821, %3819
  %3823 = icmp ugt i64 %3817, %3822
  br i1 %3823, label %3824, label %3826, !prof !2

3824:                                             ; preds = %3808
  %3825 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3815, i64 %3817) #9
  br label %3828

3826:                                             ; preds = %3808
  %3827 = add i64 %3817, %3819
  store i64 %3827, i64* %3818, align 8
  br label %3828

3828:                                             ; preds = %3826, %3824
  %3829 = phi i64 [ %3825, %3824 ], [ %3819, %3826 ]
  %3830 = inttoptr i64 %3829 to i8*
  %3831 = load i8*, i8** %1846, align 8
  %3832 = load i64, i64* %1842, align 8
  %3833 = ptrtoint i8* %3831 to i64
  %3834 = sub i64 %3832, %3833
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3830, i8* align 1 %3831, i64 %3834, i1 false) #9
  %3835 = load i64, i64* %1842, align 8
  %3836 = load i64, i64* %1847, align 8
  %3837 = sub i64 %3835, %3836
  %3838 = getelementptr inbounds i8, i8* %3830, i64 %3837
  store i8* %3838, i8** %8, align 8
  store i8* %3830, i8** %1846, align 8
  %3839 = getelementptr inbounds i8, i8* %3830, i64 %3813
  store i8* %3839, i8** %11, align 8
  br label %3840

3840:                                             ; preds = %3803, %3828
  %3841 = phi i8* [ %3804, %3803 ], [ %3838, %3828 ]
  %3842 = getelementptr inbounds i8, i8* %3841, i64 1
  store i8* %3842, i8** %8, align 8
  store i8 0, i8* %3841, align 1
  %3843 = load i64, i64* %1842, align 8
  %3844 = load i64, i64* %1847, align 8
  %3845 = sub i64 %3843, %3844
  %3846 = inttoptr i64 %3843 to i8*
  %3847 = getelementptr inbounds i8, i8* %3846, i64 5
  %3848 = load i8*, i8** %11, align 8
  %3849 = icmp ugt i8* %3847, %3848
  br i1 %3849, label %3850, label %3881

3850:                                             ; preds = %3840
  %3851 = ptrtoint i8* %3848 to i64
  %3852 = sub i64 %3851, %3844
  %3853 = shl nsw i64 %3852, 1
  %3854 = add i64 %3853, 5
  %3855 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3856 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3855, align 8
  %3857 = add i64 %3853, 12
  %3858 = and i64 %3857, -8
  %3859 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3856, i64 0, i32 2
  %3860 = load i64, i64* %3859, align 8
  %3861 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3856, i64 0, i32 3
  %3862 = load i64, i64* %3861, align 8
  %3863 = sub i64 %3862, %3860
  %3864 = icmp ugt i64 %3858, %3863
  br i1 %3864, label %3865, label %3867, !prof !2

3865:                                             ; preds = %3850
  %3866 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3856, i64 %3858) #9
  br label %3869

3867:                                             ; preds = %3850
  %3868 = add i64 %3860, %3858
  store i64 %3868, i64* %3859, align 8
  br label %3869

3869:                                             ; preds = %3867, %3865
  %3870 = phi i64 [ %3866, %3865 ], [ %3860, %3867 ]
  %3871 = inttoptr i64 %3870 to i8*
  %3872 = load i8*, i8** %1846, align 8
  %3873 = load i64, i64* %1842, align 8
  %3874 = ptrtoint i8* %3872 to i64
  %3875 = sub i64 %3873, %3874
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3871, i8* align 1 %3872, i64 %3875, i1 false) #9
  %3876 = load i64, i64* %1842, align 8
  %3877 = load i64, i64* %1847, align 8
  %3878 = sub i64 %3876, %3877
  %3879 = getelementptr inbounds i8, i8* %3871, i64 %3878
  store i8* %3879, i8** %8, align 8
  store i8* %3871, i8** %1846, align 8
  %3880 = getelementptr inbounds i8, i8* %3871, i64 %3854
  store i8* %3880, i8** %11, align 8
  br label %3881

3881:                                             ; preds = %3840, %3869
  %3882 = phi i8* [ %3846, %3840 ], [ %3879, %3869 ]
  %3883 = getelementptr inbounds i8, i8* %3882, i64 5
  store i8* %3883, i8** %8, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i64 16)
  %3884 = load i64, i64* %1178, align 8
  %3885 = load i64, i64* %1180, align 8
  %3886 = sub i64 %3884, %3885
  %3887 = ashr exact i64 %3886, 3
  %3888 = load i8*, i8** %8, align 8
  %3889 = getelementptr inbounds i8, i8* %3888, i64 5
  %3890 = load i8*, i8** %11, align 8
  %3891 = icmp ugt i8* %3889, %3890
  br i1 %3891, label %3892, label %3924

3892:                                             ; preds = %3881
  %3893 = load i64, i64* %1847, align 8
  %3894 = ptrtoint i8* %3890 to i64
  %3895 = sub i64 %3894, %3893
  %3896 = shl nsw i64 %3895, 1
  %3897 = add i64 %3896, 5
  %3898 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %3899 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3898, align 8
  %3900 = add i64 %3896, 12
  %3901 = and i64 %3900, -8
  %3902 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3899, i64 0, i32 2
  %3903 = load i64, i64* %3902, align 8
  %3904 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3899, i64 0, i32 3
  %3905 = load i64, i64* %3904, align 8
  %3906 = sub i64 %3905, %3903
  %3907 = icmp ugt i64 %3901, %3906
  br i1 %3907, label %3908, label %3910, !prof !2

3908:                                             ; preds = %3892
  %3909 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3899, i64 %3901) #9
  br label %3912

3910:                                             ; preds = %3892
  %3911 = add i64 %3901, %3903
  store i64 %3911, i64* %3902, align 8
  br label %3912

3912:                                             ; preds = %3910, %3908
  %3913 = phi i64 [ %3909, %3908 ], [ %3903, %3910 ]
  %3914 = inttoptr i64 %3913 to i8*
  %3915 = load i8*, i8** %1846, align 8
  %3916 = load i64, i64* %1842, align 8
  %3917 = ptrtoint i8* %3915 to i64
  %3918 = sub i64 %3916, %3917
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3914, i8* align 1 %3915, i64 %3918, i1 false) #9
  %3919 = load i64, i64* %1842, align 8
  %3920 = load i64, i64* %1847, align 8
  %3921 = sub i64 %3919, %3920
  %3922 = getelementptr inbounds i8, i8* %3914, i64 %3921
  store i8* %3922, i8** %8, align 8
  store i8* %3914, i8** %1846, align 8
  %3923 = getelementptr inbounds i8, i8* %3914, i64 %3897
  store i8* %3923, i8** %11, align 8
  br label %3924

3924:                                             ; preds = %3912, %3881
  %3925 = phi i8* [ %3888, %3881 ], [ %3922, %3912 ]
  %3926 = trunc i64 %3887 to i32
  %3927 = icmp ugt i32 %3926, 127
  %3928 = trunc i64 %3887 to i8
  br i1 %3927, label %3929, label %3941

3929:                                             ; preds = %3924, %3929
  %3930 = phi i8* [ %3938, %3929 ], [ %3925, %3924 ]
  %3931 = phi i8 [ %3937, %3929 ], [ %3928, %3924 ]
  %3932 = phi i32 [ %3935, %3929 ], [ %3926, %3924 ]
  %3933 = or i8 %3931, -128
  %3934 = getelementptr inbounds i8, i8* %3930, i64 1
  store i8* %3934, i8** %8, align 8
  store i8 %3933, i8* %3930, align 1
  %3935 = lshr i32 %3932, 7
  %3936 = icmp ugt i32 %3932, 16383
  %3937 = trunc i32 %3935 to i8
  %3938 = load i8*, i8** %8, align 8
  br i1 %3936, label %3929, label %3939

3939:                                             ; preds = %3929
  %3940 = trunc i32 %3935 to i8
  br label %3941

3941:                                             ; preds = %3939, %3924
  %3942 = phi i8* [ %3925, %3924 ], [ %3938, %3939 ]
  %3943 = phi i8 [ %3928, %3924 ], [ %3940, %3939 ]
  %3944 = and i8 %3943, 127
  %3945 = getelementptr inbounds i8, i8* %3942, i64 1
  store i8* %3945, i8** %8, align 8
  store i8 %3944, i8* %3942, align 1
  %3946 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %3782, align 8
  %3947 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177, align 8
  %3948 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %3946, %3947
  br i1 %3948, label %3951, label %3949

3949:                                             ; preds = %3941
  %3950 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %3979

3951:                                             ; preds = %4021, %3941
  %3952 = load i64, i64* %1842, align 8
  %3953 = load i64, i64* %1847, align 8
  %3954 = sub i64 %3952, %3845
  %3955 = sub i64 %3954, %3953
  %3956 = trunc i64 %3955 to i32
  %3957 = add i32 %3956, -5
  %3958 = inttoptr i64 %3953 to i8*
  %3959 = getelementptr inbounds i8, i8* %3958, i64 %3845
  %3960 = trunc i32 %3957 to i8
  %3961 = lshr i32 %3957, 7
  %3962 = or i8 %3960, -128
  %3963 = getelementptr inbounds i8, i8* %3959, i64 1
  store i8 %3962, i8* %3959, align 1
  %3964 = trunc i32 %3961 to i8
  %3965 = lshr i32 %3957, 14
  %3966 = or i8 %3964, -128
  %3967 = getelementptr inbounds i8, i8* %3963, i64 1
  store i8 %3966, i8* %3963, align 1
  %3968 = trunc i32 %3965 to i8
  %3969 = lshr i32 %3957, 21
  %3970 = or i8 %3968, -128
  %3971 = getelementptr inbounds i8, i8* %3967, i64 1
  store i8 %3970, i8* %3967, align 1
  %3972 = trunc i32 %3969 to i8
  %3973 = lshr i32 %3957, 28
  %3974 = or i8 %3972, -128
  %3975 = getelementptr inbounds i8, i8* %3971, i64 1
  store i8 %3974, i8* %3971, align 1
  %3976 = trunc i32 %3973 to i8
  store i8 %3976, i8* %3975, align 1
  %3977 = load i64, i64* %1178, align 8
  %3978 = load i64, i64* %1180, align 8
  br label %4026

3979:                                             ; preds = %3949, %4021
  %3980 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %3946, %3949 ], [ %4024, %4021 ]
  %3981 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %3980, align 8
  %3982 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %3981, i64 0, i32 15
  %3983 = load i8, i8* %3982, align 4
  %3984 = icmp eq i8 %3983, -1
  %3985 = select i1 %3984, i8 0, i8 %3983
  %3986 = load i8*, i8** %8, align 8
  %3987 = getelementptr inbounds i8, i8* %3986, i64 1
  %3988 = load i8*, i8** %11, align 8
  %3989 = icmp ugt i8* %3987, %3988
  br i1 %3989, label %3990, label %4021

3990:                                             ; preds = %3979
  %3991 = load i64, i64* %1847, align 8
  %3992 = ptrtoint i8* %3988 to i64
  %3993 = sub i64 %3992, %3991
  %3994 = shl nsw i64 %3993, 1
  %3995 = or i64 %3994, 1
  %3996 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3950, align 8
  %3997 = add i64 %3995, 7
  %3998 = and i64 %3997, -8
  %3999 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3996, i64 0, i32 2
  %4000 = load i64, i64* %3999, align 8
  %4001 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3996, i64 0, i32 3
  %4002 = load i64, i64* %4001, align 8
  %4003 = sub i64 %4002, %4000
  %4004 = icmp ugt i64 %3998, %4003
  br i1 %4004, label %4005, label %4007, !prof !2

4005:                                             ; preds = %3990
  %4006 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3996, i64 %3998) #9
  br label %4009

4007:                                             ; preds = %3990
  %4008 = add i64 %3998, %4000
  store i64 %4008, i64* %3999, align 8
  br label %4009

4009:                                             ; preds = %4007, %4005
  %4010 = phi i64 [ %4006, %4005 ], [ %4000, %4007 ]
  %4011 = inttoptr i64 %4010 to i8*
  %4012 = load i8*, i8** %1846, align 8
  %4013 = load i64, i64* %1842, align 8
  %4014 = ptrtoint i8* %4012 to i64
  %4015 = sub i64 %4013, %4014
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4011, i8* align 1 %4012, i64 %4015, i1 false) #9
  %4016 = load i64, i64* %1842, align 8
  %4017 = load i64, i64* %1847, align 8
  %4018 = sub i64 %4016, %4017
  %4019 = getelementptr inbounds i8, i8* %4011, i64 %4018
  store i8* %4019, i8** %8, align 8
  store i8* %4011, i8** %1846, align 8
  %4020 = getelementptr inbounds i8, i8* %4011, i64 %3995
  store i8* %4020, i8** %11, align 8
  br label %4021

4021:                                             ; preds = %3979, %4009
  %4022 = phi i8* [ %3986, %3979 ], [ %4019, %4009 ]
  %4023 = getelementptr inbounds i8, i8* %4022, i64 1
  store i8* %4023, i8** %8, align 8
  store i8 %3985, i8* %4022, align 1
  %4024 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %3980, i64 1
  %4025 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %4024, %3947
  br i1 %4025, label %3951, label %3979

4026:                                             ; preds = %3781, %3800, %3951
  %4027 = phi i64 [ %3787, %3800 ], [ %3978, %3951 ], [ %3787, %3781 ]
  %4028 = phi i64 [ %3786, %3800 ], [ %3977, %3951 ], [ %3786, %3781 ]
  %4029 = icmp eq i64 %4028, %4027
  br i1 %4029, label %4206, label %4030

4030:                                             ; preds = %4026
  %4031 = load i8*, i8** %8, align 8
  %4032 = getelementptr inbounds i8, i8* %4031, i64 1
  %4033 = load i8*, i8** %11, align 8
  %4034 = icmp ugt i8* %4032, %4033
  br i1 %4034, label %4035, label %4067

4035:                                             ; preds = %4030
  %4036 = load i64, i64* %1847, align 8
  %4037 = ptrtoint i8* %4033 to i64
  %4038 = sub i64 %4037, %4036
  %4039 = shl nsw i64 %4038, 1
  %4040 = or i64 %4039, 1
  %4041 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4042 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4041, align 8
  %4043 = add i64 %4040, 7
  %4044 = and i64 %4043, -8
  %4045 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4042, i64 0, i32 2
  %4046 = load i64, i64* %4045, align 8
  %4047 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4042, i64 0, i32 3
  %4048 = load i64, i64* %4047, align 8
  %4049 = sub i64 %4048, %4046
  %4050 = icmp ugt i64 %4044, %4049
  br i1 %4050, label %4051, label %4053, !prof !2

4051:                                             ; preds = %4035
  %4052 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4042, i64 %4044) #9
  br label %4055

4053:                                             ; preds = %4035
  %4054 = add i64 %4044, %4046
  store i64 %4054, i64* %4045, align 8
  br label %4055

4055:                                             ; preds = %4053, %4051
  %4056 = phi i64 [ %4052, %4051 ], [ %4046, %4053 ]
  %4057 = inttoptr i64 %4056 to i8*
  %4058 = load i8*, i8** %1846, align 8
  %4059 = load i64, i64* %1842, align 8
  %4060 = ptrtoint i8* %4058 to i64
  %4061 = sub i64 %4059, %4060
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4057, i8* align 1 %4058, i64 %4061, i1 false) #9
  %4062 = load i64, i64* %1842, align 8
  %4063 = load i64, i64* %1847, align 8
  %4064 = sub i64 %4062, %4063
  %4065 = getelementptr inbounds i8, i8* %4057, i64 %4064
  store i8* %4065, i8** %8, align 8
  store i8* %4057, i8** %1846, align 8
  %4066 = getelementptr inbounds i8, i8* %4057, i64 %4040
  store i8* %4066, i8** %11, align 8
  br label %4067

4067:                                             ; preds = %4030, %4055
  %4068 = phi i8* [ %4031, %4030 ], [ %4065, %4055 ]
  %4069 = getelementptr inbounds i8, i8* %4068, i64 1
  store i8* %4069, i8** %8, align 8
  store i8 10, i8* %4068, align 1
  %4070 = load i64, i64* %1842, align 8
  %4071 = load i64, i64* %1847, align 8
  %4072 = sub i64 %4070, %4071
  %4073 = inttoptr i64 %4070 to i8*
  %4074 = getelementptr inbounds i8, i8* %4073, i64 5
  %4075 = load i8*, i8** %11, align 8
  %4076 = icmp ugt i8* %4074, %4075
  br i1 %4076, label %4077, label %4108

4077:                                             ; preds = %4067
  %4078 = ptrtoint i8* %4075 to i64
  %4079 = sub i64 %4078, %4071
  %4080 = shl nsw i64 %4079, 1
  %4081 = add i64 %4080, 5
  %4082 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4083 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4082, align 8
  %4084 = add i64 %4080, 12
  %4085 = and i64 %4084, -8
  %4086 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4083, i64 0, i32 2
  %4087 = load i64, i64* %4086, align 8
  %4088 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4083, i64 0, i32 3
  %4089 = load i64, i64* %4088, align 8
  %4090 = sub i64 %4089, %4087
  %4091 = icmp ugt i64 %4085, %4090
  br i1 %4091, label %4092, label %4094, !prof !2

4092:                                             ; preds = %4077
  %4093 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4083, i64 %4085) #9
  br label %4096

4094:                                             ; preds = %4077
  %4095 = add i64 %4087, %4085
  store i64 %4095, i64* %4086, align 8
  br label %4096

4096:                                             ; preds = %4094, %4092
  %4097 = phi i64 [ %4093, %4092 ], [ %4087, %4094 ]
  %4098 = inttoptr i64 %4097 to i8*
  %4099 = load i8*, i8** %1846, align 8
  %4100 = load i64, i64* %1842, align 8
  %4101 = ptrtoint i8* %4099 to i64
  %4102 = sub i64 %4100, %4101
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4098, i8* align 1 %4099, i64 %4102, i1 false) #9
  %4103 = load i64, i64* %1842, align 8
  %4104 = load i64, i64* %1847, align 8
  %4105 = sub i64 %4103, %4104
  %4106 = getelementptr inbounds i8, i8* %4098, i64 %4105
  store i8* %4106, i8** %8, align 8
  store i8* %4098, i8** %1846, align 8
  %4107 = getelementptr inbounds i8, i8* %4098, i64 %4081
  store i8* %4107, i8** %11, align 8
  br label %4108

4108:                                             ; preds = %4067, %4096
  %4109 = phi i64 [ %4071, %4067 ], [ %4097, %4096 ]
  %4110 = phi i8* [ %4075, %4067 ], [ %4107, %4096 ]
  %4111 = phi i8* [ %4073, %4067 ], [ %4106, %4096 ]
  %4112 = getelementptr inbounds i8, i8* %4111, i64 5
  store i8* %4112, i8** %8, align 8
  %4113 = load i64, i64* %1178, align 8
  %4114 = load i64, i64* %1180, align 8
  %4115 = sub i64 %4113, %4114
  %4116 = ashr exact i64 %4115, 3
  %4117 = getelementptr inbounds i8, i8* %4111, i64 10
  %4118 = icmp ugt i8* %4117, %4110
  br i1 %4118, label %4119, label %4150

4119:                                             ; preds = %4108
  %4120 = ptrtoint i8* %4110 to i64
  %4121 = sub i64 %4120, %4109
  %4122 = shl nsw i64 %4121, 1
  %4123 = add i64 %4122, 5
  %4124 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4125 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4124, align 8
  %4126 = add i64 %4122, 12
  %4127 = and i64 %4126, -8
  %4128 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4125, i64 0, i32 2
  %4129 = load i64, i64* %4128, align 8
  %4130 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4125, i64 0, i32 3
  %4131 = load i64, i64* %4130, align 8
  %4132 = sub i64 %4131, %4129
  %4133 = icmp ugt i64 %4127, %4132
  br i1 %4133, label %4134, label %4136, !prof !2

4134:                                             ; preds = %4119
  %4135 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4125, i64 %4127) #9
  br label %4138

4136:                                             ; preds = %4119
  %4137 = add i64 %4127, %4129
  store i64 %4137, i64* %4128, align 8
  br label %4138

4138:                                             ; preds = %4136, %4134
  %4139 = phi i64 [ %4135, %4134 ], [ %4129, %4136 ]
  %4140 = inttoptr i64 %4139 to i8*
  %4141 = load i8*, i8** %1846, align 8
  %4142 = load i64, i64* %1842, align 8
  %4143 = ptrtoint i8* %4141 to i64
  %4144 = sub i64 %4142, %4143
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4140, i8* align 1 %4141, i64 %4144, i1 false) #9
  %4145 = load i64, i64* %1842, align 8
  %4146 = load i64, i64* %1847, align 8
  %4147 = sub i64 %4145, %4146
  %4148 = getelementptr inbounds i8, i8* %4140, i64 %4147
  store i8* %4148, i8** %8, align 8
  store i8* %4140, i8** %1846, align 8
  %4149 = getelementptr inbounds i8, i8* %4140, i64 %4123
  store i8* %4149, i8** %11, align 8
  br label %4150

4150:                                             ; preds = %4138, %4108
  %4151 = phi i8* [ %4112, %4108 ], [ %4148, %4138 ]
  %4152 = trunc i64 %4116 to i32
  %4153 = icmp ugt i32 %4152, 127
  %4154 = trunc i64 %4116 to i8
  br i1 %4153, label %4155, label %4167

4155:                                             ; preds = %4150, %4155
  %4156 = phi i8* [ %4164, %4155 ], [ %4151, %4150 ]
  %4157 = phi i8 [ %4163, %4155 ], [ %4154, %4150 ]
  %4158 = phi i32 [ %4161, %4155 ], [ %4152, %4150 ]
  %4159 = or i8 %4157, -128
  %4160 = getelementptr inbounds i8, i8* %4156, i64 1
  store i8* %4160, i8** %8, align 8
  store i8 %4159, i8* %4156, align 1
  %4161 = lshr i32 %4158, 7
  %4162 = icmp ugt i32 %4158, 16383
  %4163 = trunc i32 %4161 to i8
  %4164 = load i8*, i8** %8, align 8
  br i1 %4162, label %4155, label %4165

4165:                                             ; preds = %4155
  %4166 = trunc i32 %4161 to i8
  br label %4167

4167:                                             ; preds = %4165, %4150
  %4168 = phi i8* [ %4151, %4150 ], [ %4164, %4165 ]
  %4169 = phi i8 [ %4154, %4150 ], [ %4166, %4165 ]
  %4170 = and i8 %4169, 127
  %4171 = getelementptr inbounds i8, i8* %4168, i64 1
  store i8* %4171, i8** %8, align 8
  store i8 %4170, i8* %4168, align 1
  %4172 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %3782, align 8
  %4173 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177, align 8
  %4174 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %4172, %4173
  br i1 %4174, label %4175, label %4201

4175:                                             ; preds = %4201, %4167
  %4176 = load i64, i64* %1842, align 8
  %4177 = load i64, i64* %1847, align 8
  %4178 = sub i64 %4176, %4072
  %4179 = sub i64 %4178, %4177
  %4180 = trunc i64 %4179 to i32
  %4181 = add i32 %4180, -5
  %4182 = inttoptr i64 %4177 to i8*
  %4183 = getelementptr inbounds i8, i8* %4182, i64 %4072
  %4184 = trunc i32 %4181 to i8
  %4185 = lshr i32 %4181, 7
  %4186 = or i8 %4184, -128
  %4187 = getelementptr inbounds i8, i8* %4183, i64 1
  store i8 %4186, i8* %4183, align 1
  %4188 = trunc i32 %4185 to i8
  %4189 = lshr i32 %4181, 14
  %4190 = or i8 %4188, -128
  %4191 = getelementptr inbounds i8, i8* %4187, i64 1
  store i8 %4190, i8* %4187, align 1
  %4192 = trunc i32 %4189 to i8
  %4193 = lshr i32 %4181, 21
  %4194 = or i8 %4192, -128
  %4195 = getelementptr inbounds i8, i8* %4191, i64 1
  store i8 %4194, i8* %4191, align 1
  %4196 = trunc i32 %4193 to i8
  %4197 = lshr i32 %4181, 28
  %4198 = or i8 %4196, -128
  %4199 = getelementptr inbounds i8, i8* %4195, i64 1
  store i8 %4198, i8* %4195, align 1
  %4200 = trunc i32 %4197 to i8
  store i8 %4200, i8* %4199, align 1
  br label %4206

4201:                                             ; preds = %4167, %4201
  %4202 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %4204, %4201 ], [ %4172, %4167 ]
  %4203 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %4202, align 8
  tail call void @_ZNK2v88internal4wasm19WasmFunctionBuilder9WriteBodyEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmFunctionBuilder"* %4203, %"class.v8::internal::wasm::ZoneBuffer"* %1)
  %4204 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %4202, i64 1
  %4205 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %4204, %4173
  br i1 %4205, label %4175, label %4201

4206:                                             ; preds = %4026, %4175
  %4207 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0
  %4208 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %4209 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %4208 to i64*
  %4210 = load i64, i64* %4209, align 8
  %4211 = bitcast %"class.std::__1::vector.63"* %4207 to i64*
  %4212 = load i64, i64* %4211, align 8
  %4213 = icmp eq i64 %4210, %4212
  br i1 %4213, label %4828, label %4214

4214:                                             ; preds = %4206
  %4215 = load i8*, i8** %8, align 8
  %4216 = getelementptr inbounds i8, i8* %4215, i64 1
  %4217 = load i8*, i8** %11, align 8
  %4218 = icmp ugt i8* %4216, %4217
  br i1 %4218, label %4219, label %4251

4219:                                             ; preds = %4214
  %4220 = load i64, i64* %1847, align 8
  %4221 = ptrtoint i8* %4217 to i64
  %4222 = sub i64 %4221, %4220
  %4223 = shl nsw i64 %4222, 1
  %4224 = or i64 %4223, 1
  %4225 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4226 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4225, align 8
  %4227 = add i64 %4224, 7
  %4228 = and i64 %4227, -8
  %4229 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4226, i64 0, i32 2
  %4230 = load i64, i64* %4229, align 8
  %4231 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4226, i64 0, i32 3
  %4232 = load i64, i64* %4231, align 8
  %4233 = sub i64 %4232, %4230
  %4234 = icmp ugt i64 %4228, %4233
  br i1 %4234, label %4235, label %4237, !prof !2

4235:                                             ; preds = %4219
  %4236 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4226, i64 %4228) #9
  br label %4239

4237:                                             ; preds = %4219
  %4238 = add i64 %4228, %4230
  store i64 %4238, i64* %4229, align 8
  br label %4239

4239:                                             ; preds = %4237, %4235
  %4240 = phi i64 [ %4236, %4235 ], [ %4230, %4237 ]
  %4241 = inttoptr i64 %4240 to i8*
  %4242 = load i8*, i8** %1846, align 8
  %4243 = load i64, i64* %1842, align 8
  %4244 = ptrtoint i8* %4242 to i64
  %4245 = sub i64 %4243, %4244
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4241, i8* align 1 %4242, i64 %4245, i1 false) #9
  %4246 = load i64, i64* %1842, align 8
  %4247 = load i64, i64* %1847, align 8
  %4248 = sub i64 %4246, %4247
  %4249 = getelementptr inbounds i8, i8* %4241, i64 %4248
  store i8* %4249, i8** %8, align 8
  store i8* %4241, i8** %1846, align 8
  %4250 = getelementptr inbounds i8, i8* %4241, i64 %4224
  store i8* %4250, i8** %11, align 8
  br label %4251

4251:                                             ; preds = %4214, %4239
  %4252 = phi i8* [ %4215, %4214 ], [ %4249, %4239 ]
  %4253 = getelementptr inbounds i8, i8* %4252, i64 1
  store i8* %4253, i8** %8, align 8
  store i8 11, i8* %4252, align 1
  %4254 = load i64, i64* %1842, align 8
  %4255 = load i64, i64* %1847, align 8
  %4256 = sub i64 %4254, %4255
  %4257 = inttoptr i64 %4254 to i8*
  %4258 = getelementptr inbounds i8, i8* %4257, i64 5
  %4259 = load i8*, i8** %11, align 8
  %4260 = icmp ugt i8* %4258, %4259
  br i1 %4260, label %4261, label %4292

4261:                                             ; preds = %4251
  %4262 = ptrtoint i8* %4259 to i64
  %4263 = sub i64 %4262, %4255
  %4264 = shl nsw i64 %4263, 1
  %4265 = add i64 %4264, 5
  %4266 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4267 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4266, align 8
  %4268 = add i64 %4264, 12
  %4269 = and i64 %4268, -8
  %4270 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4267, i64 0, i32 2
  %4271 = load i64, i64* %4270, align 8
  %4272 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4267, i64 0, i32 3
  %4273 = load i64, i64* %4272, align 8
  %4274 = sub i64 %4273, %4271
  %4275 = icmp ugt i64 %4269, %4274
  br i1 %4275, label %4276, label %4278, !prof !2

4276:                                             ; preds = %4261
  %4277 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4267, i64 %4269) #9
  br label %4280

4278:                                             ; preds = %4261
  %4279 = add i64 %4271, %4269
  store i64 %4279, i64* %4270, align 8
  br label %4280

4280:                                             ; preds = %4278, %4276
  %4281 = phi i64 [ %4277, %4276 ], [ %4271, %4278 ]
  %4282 = inttoptr i64 %4281 to i8*
  %4283 = load i8*, i8** %1846, align 8
  %4284 = load i64, i64* %1842, align 8
  %4285 = ptrtoint i8* %4283 to i64
  %4286 = sub i64 %4284, %4285
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4282, i8* align 1 %4283, i64 %4286, i1 false) #9
  %4287 = load i64, i64* %1842, align 8
  %4288 = load i64, i64* %1847, align 8
  %4289 = sub i64 %4287, %4288
  %4290 = getelementptr inbounds i8, i8* %4282, i64 %4289
  store i8* %4290, i8** %8, align 8
  store i8* %4282, i8** %1846, align 8
  %4291 = getelementptr inbounds i8, i8* %4282, i64 %4265
  store i8* %4291, i8** %11, align 8
  br label %4292

4292:                                             ; preds = %4251, %4280
  %4293 = phi i64 [ %4255, %4251 ], [ %4281, %4280 ]
  %4294 = phi i8* [ %4259, %4251 ], [ %4291, %4280 ]
  %4295 = phi i8* [ %4257, %4251 ], [ %4290, %4280 ]
  %4296 = getelementptr inbounds i8, i8* %4295, i64 5
  store i8* %4296, i8** %8, align 8
  %4297 = load i64, i64* %4209, align 8
  %4298 = load i64, i64* %4211, align 8
  %4299 = sub i64 %4297, %4298
  %4300 = sdiv exact i64 %4299, 40
  %4301 = getelementptr inbounds i8, i8* %4295, i64 10
  %4302 = icmp ugt i8* %4301, %4294
  br i1 %4302, label %4303, label %4334

4303:                                             ; preds = %4292
  %4304 = ptrtoint i8* %4294 to i64
  %4305 = sub i64 %4304, %4293
  %4306 = shl nsw i64 %4305, 1
  %4307 = add i64 %4306, 5
  %4308 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4309 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4308, align 8
  %4310 = add i64 %4306, 12
  %4311 = and i64 %4310, -8
  %4312 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4309, i64 0, i32 2
  %4313 = load i64, i64* %4312, align 8
  %4314 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4309, i64 0, i32 3
  %4315 = load i64, i64* %4314, align 8
  %4316 = sub i64 %4315, %4313
  %4317 = icmp ugt i64 %4311, %4316
  br i1 %4317, label %4318, label %4320, !prof !2

4318:                                             ; preds = %4303
  %4319 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4309, i64 %4311) #9
  br label %4322

4320:                                             ; preds = %4303
  %4321 = add i64 %4311, %4313
  store i64 %4321, i64* %4312, align 8
  br label %4322

4322:                                             ; preds = %4320, %4318
  %4323 = phi i64 [ %4319, %4318 ], [ %4313, %4320 ]
  %4324 = inttoptr i64 %4323 to i8*
  %4325 = load i8*, i8** %1846, align 8
  %4326 = load i64, i64* %1842, align 8
  %4327 = ptrtoint i8* %4325 to i64
  %4328 = sub i64 %4326, %4327
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4324, i8* align 1 %4325, i64 %4328, i1 false) #9
  %4329 = load i64, i64* %1842, align 8
  %4330 = load i64, i64* %1847, align 8
  %4331 = sub i64 %4329, %4330
  %4332 = getelementptr inbounds i8, i8* %4324, i64 %4331
  store i8* %4332, i8** %8, align 8
  store i8* %4324, i8** %1846, align 8
  %4333 = getelementptr inbounds i8, i8* %4324, i64 %4307
  store i8* %4333, i8** %11, align 8
  br label %4334

4334:                                             ; preds = %4322, %4292
  %4335 = phi i8* [ %4296, %4292 ], [ %4332, %4322 ]
  %4336 = trunc i64 %4300 to i32
  %4337 = icmp ugt i32 %4336, 127
  %4338 = trunc i64 %4300 to i8
  br i1 %4337, label %4339, label %4351

4339:                                             ; preds = %4334, %4339
  %4340 = phi i8* [ %4348, %4339 ], [ %4335, %4334 ]
  %4341 = phi i8 [ %4347, %4339 ], [ %4338, %4334 ]
  %4342 = phi i32 [ %4345, %4339 ], [ %4336, %4334 ]
  %4343 = or i8 %4341, -128
  %4344 = getelementptr inbounds i8, i8* %4340, i64 1
  store i8* %4344, i8** %8, align 8
  store i8 %4343, i8* %4340, align 1
  %4345 = lshr i32 %4342, 7
  %4346 = icmp ugt i32 %4342, 16383
  %4347 = trunc i32 %4345 to i8
  %4348 = load i8*, i8** %8, align 8
  br i1 %4346, label %4339, label %4349

4349:                                             ; preds = %4339
  %4350 = trunc i32 %4345 to i8
  br label %4351

4351:                                             ; preds = %4349, %4334
  %4352 = phi i8* [ %4335, %4334 ], [ %4348, %4349 ]
  %4353 = phi i8 [ %4338, %4334 ], [ %4350, %4349 ]
  %4354 = and i8 %4353, 127
  %4355 = getelementptr inbounds i8, i8* %4352, i64 1
  store i8* %4355, i8** %8, align 8
  store i8 %4354, i8* %4352, align 1
  %4356 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4207, i64 0, i32 0, i32 0
  %4357 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %4356, align 8
  %4358 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %4208, align 8
  %4359 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4357, %4358
  br i1 %4359, label %4371, label %4360

4360:                                             ; preds = %4351
  %4361 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7 to i8*
  %4362 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %4363 = bitcast %"struct.std::__1::__compressed_pair_elem.70"* %4362 to i64*
  %4364 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %4365 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %4366 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4367 = bitcast i8** %4364 to i64*
  %4368 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7, i64 0, i32 1
  %4369 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4370 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7 to i64*
  br label %4397

4371:                                             ; preds = %4825, %4351
  %4372 = load i64, i64* %1842, align 8
  %4373 = load i64, i64* %1847, align 8
  %4374 = sub i64 %4372, %4256
  %4375 = sub i64 %4374, %4373
  %4376 = trunc i64 %4375 to i32
  %4377 = add i32 %4376, -5
  %4378 = inttoptr i64 %4373 to i8*
  %4379 = getelementptr inbounds i8, i8* %4378, i64 %4256
  %4380 = trunc i32 %4377 to i8
  %4381 = lshr i32 %4377, 7
  %4382 = or i8 %4380, -128
  %4383 = getelementptr inbounds i8, i8* %4379, i64 1
  store i8 %4382, i8* %4379, align 1
  %4384 = trunc i32 %4381 to i8
  %4385 = lshr i32 %4377, 14
  %4386 = or i8 %4384, -128
  %4387 = getelementptr inbounds i8, i8* %4383, i64 1
  store i8 %4386, i8* %4383, align 1
  %4388 = trunc i32 %4385 to i8
  %4389 = lshr i32 %4377, 21
  %4390 = or i8 %4388, -128
  %4391 = getelementptr inbounds i8, i8* %4387, i64 1
  store i8 %4390, i8* %4387, align 1
  %4392 = trunc i32 %4389 to i8
  %4393 = lshr i32 %4377, 28
  %4394 = or i8 %4392, -128
  %4395 = getelementptr inbounds i8, i8* %4391, i64 1
  store i8 %4394, i8* %4391, align 1
  %4396 = trunc i32 %4393 to i8
  store i8 %4396, i8* %4395, align 1
  br label %4828

4397:                                             ; preds = %4360, %4825
  %4398 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %4357, %4360 ], [ %4826, %4825 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4361) #9
  %4399 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %4400 = bitcast %"class.v8::internal::Zone"** %4399 to i64*
  %4401 = load i64, i64* %4400, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4361, i8 0, i64 24, i1 false) #9
  store i64 %4401, i64* %4363, align 8
  %4402 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398, i64 0, i32 0, i32 0, i32 0, i32 1
  %4403 = bitcast i8** %4402 to i64*
  %4404 = load i64, i64* %4403, align 8
  %4405 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398 to i64*
  %4406 = load i64, i64* %4405, align 8
  %4407 = sub i64 %4404, %4406
  %4408 = icmp eq i64 %4407, 0
  %4409 = inttoptr i64 %4401 to %"class.v8::internal::Zone"*
  br i1 %4408, label %4543, label %4410

4410:                                             ; preds = %4397
  %4411 = icmp ugt i64 %4407, 2147483647
  br i1 %4411, label %4412, label %4414

4412:                                             ; preds = %4410
  %4413 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %4413) #10
  unreachable

4414:                                             ; preds = %4410
  %4415 = add nuw nsw i64 %4407, 7
  %4416 = and i64 %4415, -8
  %4417 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4409, i64 0, i32 2
  %4418 = load i64, i64* %4417, align 8
  %4419 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4409, i64 0, i32 3
  %4420 = load i64, i64* %4419, align 8
  %4421 = sub i64 %4420, %4418
  %4422 = icmp ugt i64 %4416, %4421
  br i1 %4422, label %4423, label %4425, !prof !2

4423:                                             ; preds = %4414
  %4424 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4409, i64 %4416) #9
  br label %4427

4425:                                             ; preds = %4414
  %4426 = add i64 %4418, %4416
  store i64 %4426, i64* %4417, align 8
  br label %4427

4427:                                             ; preds = %4425, %4423
  %4428 = phi i64 [ %4424, %4423 ], [ %4418, %4425 ]
  %4429 = inttoptr i64 %4428 to i8*
  store i8* %4429, i8** %4364, align 8
  store i8* %4429, i8** %4365, align 8
  %4430 = getelementptr inbounds i8, i8* %4429, i64 %4407
  store i8* %4430, i8** %4366, align 8
  %4431 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398, i64 0, i32 0, i32 0, i32 0, i32 0
  %4432 = load i8*, i8** %4431, align 8
  %4433 = ptrtoint i8* %4432 to i64
  %4434 = load i8*, i8** %4402, align 8
  %4435 = icmp eq i8* %4432, %4434
  br i1 %4435, label %4541, label %4436

4436:                                             ; preds = %4427
  %4437 = ptrtoint i8* %4434 to i64
  %4438 = sub i64 %4437, %4433
  %4439 = icmp ult i64 %4438, 32
  br i1 %4439, label %4528, label %4440

4440:                                             ; preds = %4436
  %4441 = ptrtoint i8* %4434 to i64
  %4442 = sub i64 %4441, %4433
  %4443 = getelementptr i8, i8* %4429, i64 %4442
  %4444 = icmp ugt i8* %4434, %4429
  %4445 = icmp ult i8* %4432, %4443
  %4446 = and i1 %4444, %4445
  br i1 %4446, label %4528, label %4447

4447:                                             ; preds = %4440
  %4448 = and i64 %4438, -32
  %4449 = getelementptr i8, i8* %4429, i64 %4448
  %4450 = getelementptr i8, i8* %4432, i64 %4448
  %4451 = add i64 %4448, -32
  %4452 = lshr exact i64 %4451, 5
  %4453 = add nuw nsw i64 %4452, 1
  %4454 = and i64 %4453, 3
  %4455 = icmp ult i64 %4451, 96
  br i1 %4455, label %4507, label %4456

4456:                                             ; preds = %4447
  %4457 = sub nsw i64 %4453, %4454
  br label %4458

4458:                                             ; preds = %4458, %4456
  %4459 = phi i64 [ 0, %4456 ], [ %4504, %4458 ]
  %4460 = phi i64 [ %4457, %4456 ], [ %4505, %4458 ]
  %4461 = getelementptr i8, i8* %4429, i64 %4459
  %4462 = getelementptr i8, i8* %4432, i64 %4459
  %4463 = bitcast i8* %4462 to <16 x i8>*
  %4464 = load <16 x i8>, <16 x i8>* %4463, align 1, !alias.scope !35
  %4465 = getelementptr i8, i8* %4462, i64 16
  %4466 = bitcast i8* %4465 to <16 x i8>*
  %4467 = load <16 x i8>, <16 x i8>* %4466, align 1, !alias.scope !35
  %4468 = bitcast i8* %4461 to <16 x i8>*
  store <16 x i8> %4464, <16 x i8>* %4468, align 1, !alias.scope !38, !noalias !35
  %4469 = getelementptr i8, i8* %4461, i64 16
  %4470 = bitcast i8* %4469 to <16 x i8>*
  store <16 x i8> %4467, <16 x i8>* %4470, align 1, !alias.scope !38, !noalias !35
  %4471 = or i64 %4459, 32
  %4472 = getelementptr i8, i8* %4429, i64 %4471
  %4473 = getelementptr i8, i8* %4432, i64 %4471
  %4474 = bitcast i8* %4473 to <16 x i8>*
  %4475 = load <16 x i8>, <16 x i8>* %4474, align 1, !alias.scope !35
  %4476 = getelementptr i8, i8* %4473, i64 16
  %4477 = bitcast i8* %4476 to <16 x i8>*
  %4478 = load <16 x i8>, <16 x i8>* %4477, align 1, !alias.scope !35
  %4479 = bitcast i8* %4472 to <16 x i8>*
  store <16 x i8> %4475, <16 x i8>* %4479, align 1, !alias.scope !38, !noalias !35
  %4480 = getelementptr i8, i8* %4472, i64 16
  %4481 = bitcast i8* %4480 to <16 x i8>*
  store <16 x i8> %4478, <16 x i8>* %4481, align 1, !alias.scope !38, !noalias !35
  %4482 = or i64 %4459, 64
  %4483 = getelementptr i8, i8* %4429, i64 %4482
  %4484 = getelementptr i8, i8* %4432, i64 %4482
  %4485 = bitcast i8* %4484 to <16 x i8>*
  %4486 = load <16 x i8>, <16 x i8>* %4485, align 1, !alias.scope !35
  %4487 = getelementptr i8, i8* %4484, i64 16
  %4488 = bitcast i8* %4487 to <16 x i8>*
  %4489 = load <16 x i8>, <16 x i8>* %4488, align 1, !alias.scope !35
  %4490 = bitcast i8* %4483 to <16 x i8>*
  store <16 x i8> %4486, <16 x i8>* %4490, align 1, !alias.scope !38, !noalias !35
  %4491 = getelementptr i8, i8* %4483, i64 16
  %4492 = bitcast i8* %4491 to <16 x i8>*
  store <16 x i8> %4489, <16 x i8>* %4492, align 1, !alias.scope !38, !noalias !35
  %4493 = or i64 %4459, 96
  %4494 = getelementptr i8, i8* %4429, i64 %4493
  %4495 = getelementptr i8, i8* %4432, i64 %4493
  %4496 = bitcast i8* %4495 to <16 x i8>*
  %4497 = load <16 x i8>, <16 x i8>* %4496, align 1, !alias.scope !35
  %4498 = getelementptr i8, i8* %4495, i64 16
  %4499 = bitcast i8* %4498 to <16 x i8>*
  %4500 = load <16 x i8>, <16 x i8>* %4499, align 1, !alias.scope !35
  %4501 = bitcast i8* %4494 to <16 x i8>*
  store <16 x i8> %4497, <16 x i8>* %4501, align 1, !alias.scope !38, !noalias !35
  %4502 = getelementptr i8, i8* %4494, i64 16
  %4503 = bitcast i8* %4502 to <16 x i8>*
  store <16 x i8> %4500, <16 x i8>* %4503, align 1, !alias.scope !38, !noalias !35
  %4504 = add i64 %4459, 128
  %4505 = add i64 %4460, -4
  %4506 = icmp eq i64 %4505, 0
  br i1 %4506, label %4507, label %4458, !llvm.loop !40

4507:                                             ; preds = %4458, %4447
  %4508 = phi i64 [ 0, %4447 ], [ %4504, %4458 ]
  %4509 = icmp eq i64 %4454, 0
  br i1 %4509, label %4526, label %4510

4510:                                             ; preds = %4507, %4510
  %4511 = phi i64 [ %4523, %4510 ], [ %4508, %4507 ]
  %4512 = phi i64 [ %4524, %4510 ], [ %4454, %4507 ]
  %4513 = getelementptr i8, i8* %4429, i64 %4511
  %4514 = getelementptr i8, i8* %4432, i64 %4511
  %4515 = bitcast i8* %4514 to <16 x i8>*
  %4516 = load <16 x i8>, <16 x i8>* %4515, align 1, !alias.scope !35
  %4517 = getelementptr i8, i8* %4514, i64 16
  %4518 = bitcast i8* %4517 to <16 x i8>*
  %4519 = load <16 x i8>, <16 x i8>* %4518, align 1, !alias.scope !35
  %4520 = bitcast i8* %4513 to <16 x i8>*
  store <16 x i8> %4516, <16 x i8>* %4520, align 1, !alias.scope !38, !noalias !35
  %4521 = getelementptr i8, i8* %4513, i64 16
  %4522 = bitcast i8* %4521 to <16 x i8>*
  store <16 x i8> %4519, <16 x i8>* %4522, align 1, !alias.scope !38, !noalias !35
  %4523 = add i64 %4511, 32
  %4524 = add i64 %4512, -1
  %4525 = icmp eq i64 %4524, 0
  br i1 %4525, label %4526, label %4510, !llvm.loop !41

4526:                                             ; preds = %4510, %4507
  %4527 = icmp eq i64 %4438, %4448
  br i1 %4527, label %4538, label %4528

4528:                                             ; preds = %4526, %4440, %4436
  %4529 = phi i8* [ %4429, %4440 ], [ %4429, %4436 ], [ %4449, %4526 ]
  %4530 = phi i8* [ %4432, %4440 ], [ %4432, %4436 ], [ %4450, %4526 ]
  br label %4531

4531:                                             ; preds = %4528, %4531
  %4532 = phi i8* [ %4536, %4531 ], [ %4529, %4528 ]
  %4533 = phi i8* [ %4535, %4531 ], [ %4530, %4528 ]
  %4534 = load i8, i8* %4533, align 1
  store i8 %4534, i8* %4532, align 1
  %4535 = getelementptr inbounds i8, i8* %4533, i64 1
  %4536 = getelementptr inbounds i8, i8* %4532, i64 1
  %4537 = icmp eq i8* %4535, %4434
  br i1 %4537, label %4538, label %4531, !llvm.loop !42

4538:                                             ; preds = %4531, %4526
  %4539 = phi i8* [ %4449, %4526 ], [ %4536, %4531 ]
  %4540 = ptrtoint i8* %4539 to i64
  br label %4541

4541:                                             ; preds = %4538, %4427
  %4542 = phi i64 [ %4428, %4427 ], [ %4540, %4538 ]
  store i64 %4542, i64* %4367, align 8
  br label %4543

4543:                                             ; preds = %4397, %4541
  %4544 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398, i64 0, i32 1
  %4545 = load i32, i32* %4544, align 8
  store i32 %4545, i32* %4368, align 8
  %4546 = load i8*, i8** %8, align 8
  %4547 = getelementptr inbounds i8, i8* %4546, i64 1
  %4548 = load i8*, i8** %11, align 8
  %4549 = icmp ugt i8* %4547, %4548
  br i1 %4549, label %4550, label %4581

4550:                                             ; preds = %4543
  %4551 = load i64, i64* %1847, align 8
  %4552 = ptrtoint i8* %4548 to i64
  %4553 = sub i64 %4552, %4551
  %4554 = shl nsw i64 %4553, 1
  %4555 = or i64 %4554, 1
  %4556 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4557 = add i64 %4555, 7
  %4558 = and i64 %4557, -8
  %4559 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4556, i64 0, i32 2
  %4560 = load i64, i64* %4559, align 8
  %4561 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4556, i64 0, i32 3
  %4562 = load i64, i64* %4561, align 8
  %4563 = sub i64 %4562, %4560
  %4564 = icmp ugt i64 %4558, %4563
  br i1 %4564, label %4565, label %4567, !prof !2

4565:                                             ; preds = %4550
  %4566 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4556, i64 %4558) #9
  br label %4569

4567:                                             ; preds = %4550
  %4568 = add i64 %4558, %4560
  store i64 %4568, i64* %4559, align 8
  br label %4569

4569:                                             ; preds = %4567, %4565
  %4570 = phi i64 [ %4566, %4565 ], [ %4560, %4567 ]
  %4571 = inttoptr i64 %4570 to i8*
  %4572 = load i8*, i8** %1846, align 8
  %4573 = load i64, i64* %1842, align 8
  %4574 = ptrtoint i8* %4572 to i64
  %4575 = sub i64 %4573, %4574
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4571, i8* align 1 %4572, i64 %4575, i1 false) #9
  %4576 = load i64, i64* %1842, align 8
  %4577 = load i64, i64* %1847, align 8
  %4578 = sub i64 %4576, %4577
  %4579 = getelementptr inbounds i8, i8* %4571, i64 %4578
  store i8* %4579, i8** %8, align 8
  store i8* %4571, i8** %1846, align 8
  %4580 = getelementptr inbounds i8, i8* %4571, i64 %4555
  store i8* %4580, i8** %11, align 8
  br label %4581

4581:                                             ; preds = %4543, %4569
  %4582 = phi i8* [ %4546, %4543 ], [ %4579, %4569 ]
  %4583 = getelementptr inbounds i8, i8* %4582, i64 1
  store i8* %4583, i8** %8, align 8
  store i8 0, i8* %4582, align 1
  %4584 = load i8*, i8** %8, align 8
  %4585 = getelementptr inbounds i8, i8* %4584, i64 1
  %4586 = load i8*, i8** %11, align 8
  %4587 = icmp ugt i8* %4585, %4586
  br i1 %4587, label %4588, label %4619

4588:                                             ; preds = %4581
  %4589 = load i64, i64* %1847, align 8
  %4590 = ptrtoint i8* %4586 to i64
  %4591 = sub i64 %4590, %4589
  %4592 = shl nsw i64 %4591, 1
  %4593 = or i64 %4592, 1
  %4594 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4595 = add i64 %4593, 7
  %4596 = and i64 %4595, -8
  %4597 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4594, i64 0, i32 2
  %4598 = load i64, i64* %4597, align 8
  %4599 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4594, i64 0, i32 3
  %4600 = load i64, i64* %4599, align 8
  %4601 = sub i64 %4600, %4598
  %4602 = icmp ugt i64 %4596, %4601
  br i1 %4602, label %4603, label %4605, !prof !2

4603:                                             ; preds = %4588
  %4604 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4594, i64 %4596) #9
  br label %4607

4605:                                             ; preds = %4588
  %4606 = add i64 %4596, %4598
  store i64 %4606, i64* %4597, align 8
  br label %4607

4607:                                             ; preds = %4605, %4603
  %4608 = phi i64 [ %4604, %4603 ], [ %4598, %4605 ]
  %4609 = inttoptr i64 %4608 to i8*
  %4610 = load i8*, i8** %1846, align 8
  %4611 = load i64, i64* %1842, align 8
  %4612 = ptrtoint i8* %4610 to i64
  %4613 = sub i64 %4611, %4612
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4609, i8* align 1 %4610, i64 %4613, i1 false) #9
  %4614 = load i64, i64* %1842, align 8
  %4615 = load i64, i64* %1847, align 8
  %4616 = sub i64 %4614, %4615
  %4617 = getelementptr inbounds i8, i8* %4609, i64 %4616
  store i8* %4617, i8** %8, align 8
  store i8* %4609, i8** %1846, align 8
  %4618 = getelementptr inbounds i8, i8* %4609, i64 %4593
  store i8* %4618, i8** %11, align 8
  br label %4619

4619:                                             ; preds = %4581, %4607
  %4620 = phi i8* [ %4584, %4581 ], [ %4617, %4607 ]
  %4621 = getelementptr inbounds i8, i8* %4620, i64 1
  store i8* %4621, i8** %8, align 8
  store i8 65, i8* %4620, align 1
  %4622 = load i32, i32* %4368, align 8
  %4623 = load i8*, i8** %8, align 8
  %4624 = getelementptr inbounds i8, i8* %4623, i64 5
  %4625 = load i8*, i8** %11, align 8
  %4626 = icmp ugt i8* %4624, %4625
  br i1 %4626, label %4627, label %4658

4627:                                             ; preds = %4619
  %4628 = load i64, i64* %1847, align 8
  %4629 = ptrtoint i8* %4625 to i64
  %4630 = sub i64 %4629, %4628
  %4631 = shl nsw i64 %4630, 1
  %4632 = add i64 %4631, 5
  %4633 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4634 = add i64 %4631, 12
  %4635 = and i64 %4634, -8
  %4636 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4633, i64 0, i32 2
  %4637 = load i64, i64* %4636, align 8
  %4638 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4633, i64 0, i32 3
  %4639 = load i64, i64* %4638, align 8
  %4640 = sub i64 %4639, %4637
  %4641 = icmp ugt i64 %4635, %4640
  br i1 %4641, label %4642, label %4644, !prof !2

4642:                                             ; preds = %4627
  %4643 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4633, i64 %4635) #9
  br label %4646

4644:                                             ; preds = %4627
  %4645 = add i64 %4635, %4637
  store i64 %4645, i64* %4636, align 8
  br label %4646

4646:                                             ; preds = %4644, %4642
  %4647 = phi i64 [ %4643, %4642 ], [ %4637, %4644 ]
  %4648 = inttoptr i64 %4647 to i8*
  %4649 = load i8*, i8** %1846, align 8
  %4650 = load i64, i64* %1842, align 8
  %4651 = ptrtoint i8* %4649 to i64
  %4652 = sub i64 %4650, %4651
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4648, i8* align 1 %4649, i64 %4652, i1 false) #9
  %4653 = load i64, i64* %1842, align 8
  %4654 = load i64, i64* %1847, align 8
  %4655 = sub i64 %4653, %4654
  %4656 = getelementptr inbounds i8, i8* %4648, i64 %4655
  store i8* %4656, i8** %8, align 8
  store i8* %4648, i8** %1846, align 8
  %4657 = getelementptr inbounds i8, i8* %4648, i64 %4632
  store i8* %4657, i8** %11, align 8
  br label %4658

4658:                                             ; preds = %4646, %4619
  %4659 = phi i8* [ %4623, %4619 ], [ %4656, %4646 ]
  %4660 = icmp ugt i32 %4622, 127
  %4661 = trunc i32 %4622 to i8
  br i1 %4660, label %4662, label %4674

4662:                                             ; preds = %4658, %4662
  %4663 = phi i8* [ %4671, %4662 ], [ %4659, %4658 ]
  %4664 = phi i8 [ %4670, %4662 ], [ %4661, %4658 ]
  %4665 = phi i32 [ %4668, %4662 ], [ %4622, %4658 ]
  %4666 = or i8 %4664, -128
  %4667 = getelementptr inbounds i8, i8* %4663, i64 1
  store i8* %4667, i8** %8, align 8
  store i8 %4666, i8* %4663, align 1
  %4668 = lshr i32 %4665, 7
  %4669 = icmp ugt i32 %4665, 16383
  %4670 = trunc i32 %4668 to i8
  %4671 = load i8*, i8** %8, align 8
  br i1 %4669, label %4662, label %4672

4672:                                             ; preds = %4662
  %4673 = trunc i32 %4668 to i8
  br label %4674

4674:                                             ; preds = %4672, %4658
  %4675 = phi i8* [ %4659, %4658 ], [ %4671, %4672 ]
  %4676 = phi i8 [ %4661, %4658 ], [ %4673, %4672 ]
  %4677 = and i8 %4676, 127
  %4678 = getelementptr inbounds i8, i8* %4675, i64 1
  store i8* %4678, i8** %8, align 8
  store i8 %4677, i8* %4675, align 1
  %4679 = load i8*, i8** %8, align 8
  %4680 = getelementptr inbounds i8, i8* %4679, i64 1
  %4681 = load i8*, i8** %11, align 8
  %4682 = icmp ugt i8* %4680, %4681
  br i1 %4682, label %4683, label %4714

4683:                                             ; preds = %4674
  %4684 = load i64, i64* %1847, align 8
  %4685 = ptrtoint i8* %4681 to i64
  %4686 = sub i64 %4685, %4684
  %4687 = shl nsw i64 %4686, 1
  %4688 = or i64 %4687, 1
  %4689 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4690 = add i64 %4688, 7
  %4691 = and i64 %4690, -8
  %4692 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4689, i64 0, i32 2
  %4693 = load i64, i64* %4692, align 8
  %4694 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4689, i64 0, i32 3
  %4695 = load i64, i64* %4694, align 8
  %4696 = sub i64 %4695, %4693
  %4697 = icmp ugt i64 %4691, %4696
  br i1 %4697, label %4698, label %4700, !prof !2

4698:                                             ; preds = %4683
  %4699 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4689, i64 %4691) #9
  br label %4702

4700:                                             ; preds = %4683
  %4701 = add i64 %4691, %4693
  store i64 %4701, i64* %4692, align 8
  br label %4702

4702:                                             ; preds = %4700, %4698
  %4703 = phi i64 [ %4699, %4698 ], [ %4693, %4700 ]
  %4704 = inttoptr i64 %4703 to i8*
  %4705 = load i8*, i8** %1846, align 8
  %4706 = load i64, i64* %1842, align 8
  %4707 = ptrtoint i8* %4705 to i64
  %4708 = sub i64 %4706, %4707
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4704, i8* align 1 %4705, i64 %4708, i1 false) #9
  %4709 = load i64, i64* %1842, align 8
  %4710 = load i64, i64* %1847, align 8
  %4711 = sub i64 %4709, %4710
  %4712 = getelementptr inbounds i8, i8* %4704, i64 %4711
  store i8* %4712, i8** %8, align 8
  store i8* %4704, i8** %1846, align 8
  %4713 = getelementptr inbounds i8, i8* %4704, i64 %4688
  store i8* %4713, i8** %11, align 8
  br label %4714

4714:                                             ; preds = %4674, %4702
  %4715 = phi i8* [ %4679, %4674 ], [ %4712, %4702 ]
  %4716 = getelementptr inbounds i8, i8* %4715, i64 1
  store i8* %4716, i8** %8, align 8
  store i8 11, i8* %4715, align 1
  %4717 = load i64, i64* %4367, align 8
  %4718 = load i64, i64* %4370, align 8
  %4719 = sub i64 %4717, %4718
  %4720 = trunc i64 %4719 to i32
  %4721 = load i8*, i8** %8, align 8
  %4722 = getelementptr inbounds i8, i8* %4721, i64 5
  %4723 = load i8*, i8** %11, align 8
  %4724 = icmp ugt i8* %4722, %4723
  br i1 %4724, label %4725, label %4756

4725:                                             ; preds = %4714
  %4726 = load i64, i64* %1847, align 8
  %4727 = ptrtoint i8* %4723 to i64
  %4728 = sub i64 %4727, %4726
  %4729 = shl nsw i64 %4728, 1
  %4730 = add i64 %4729, 5
  %4731 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4732 = add i64 %4729, 12
  %4733 = and i64 %4732, -8
  %4734 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4731, i64 0, i32 2
  %4735 = load i64, i64* %4734, align 8
  %4736 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4731, i64 0, i32 3
  %4737 = load i64, i64* %4736, align 8
  %4738 = sub i64 %4737, %4735
  %4739 = icmp ugt i64 %4733, %4738
  br i1 %4739, label %4740, label %4742, !prof !2

4740:                                             ; preds = %4725
  %4741 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4731, i64 %4733) #9
  br label %4744

4742:                                             ; preds = %4725
  %4743 = add i64 %4733, %4735
  store i64 %4743, i64* %4734, align 8
  br label %4744

4744:                                             ; preds = %4742, %4740
  %4745 = phi i64 [ %4741, %4740 ], [ %4735, %4742 ]
  %4746 = inttoptr i64 %4745 to i8*
  %4747 = load i8*, i8** %1846, align 8
  %4748 = load i64, i64* %1842, align 8
  %4749 = ptrtoint i8* %4747 to i64
  %4750 = sub i64 %4748, %4749
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4746, i8* align 1 %4747, i64 %4750, i1 false) #9
  %4751 = load i64, i64* %1842, align 8
  %4752 = load i64, i64* %1847, align 8
  %4753 = sub i64 %4751, %4752
  %4754 = getelementptr inbounds i8, i8* %4746, i64 %4753
  store i8* %4754, i8** %8, align 8
  store i8* %4746, i8** %1846, align 8
  %4755 = getelementptr inbounds i8, i8* %4746, i64 %4730
  store i8* %4755, i8** %11, align 8
  br label %4756

4756:                                             ; preds = %4744, %4714
  %4757 = phi i8* [ %4721, %4714 ], [ %4754, %4744 ]
  %4758 = icmp ugt i32 %4720, 127
  %4759 = trunc i64 %4719 to i8
  br i1 %4758, label %4760, label %4772

4760:                                             ; preds = %4756, %4760
  %4761 = phi i8* [ %4769, %4760 ], [ %4757, %4756 ]
  %4762 = phi i8 [ %4768, %4760 ], [ %4759, %4756 ]
  %4763 = phi i32 [ %4766, %4760 ], [ %4720, %4756 ]
  %4764 = or i8 %4762, -128
  %4765 = getelementptr inbounds i8, i8* %4761, i64 1
  store i8* %4765, i8** %8, align 8
  store i8 %4764, i8* %4761, align 1
  %4766 = lshr i32 %4763, 7
  %4767 = icmp ugt i32 %4763, 16383
  %4768 = trunc i32 %4766 to i8
  %4769 = load i8*, i8** %8, align 8
  br i1 %4767, label %4760, label %4770

4770:                                             ; preds = %4760
  %4771 = trunc i32 %4766 to i8
  br label %4772

4772:                                             ; preds = %4770, %4756
  %4773 = phi i8* [ %4757, %4756 ], [ %4769, %4770 ]
  %4774 = phi i8 [ %4759, %4756 ], [ %4771, %4770 ]
  %4775 = and i8 %4774, 127
  %4776 = getelementptr inbounds i8, i8* %4773, i64 1
  store i8* %4776, i8** %8, align 8
  store i8 %4775, i8* %4773, align 1
  %4777 = load i8*, i8** %4365, align 8
  %4778 = load i64, i64* %4367, align 8
  %4779 = ptrtoint i8* %4777 to i64
  %4780 = sub i64 %4778, %4779
  %4781 = icmp eq i64 %4780, 0
  br i1 %4781, label %4822, label %4782

4782:                                             ; preds = %4772
  %4783 = load i8*, i8** %8, align 8
  %4784 = getelementptr inbounds i8, i8* %4783, i64 %4780
  %4785 = load i8*, i8** %11, align 8
  %4786 = icmp ugt i8* %4784, %4785
  br i1 %4786, label %4787, label %4818

4787:                                             ; preds = %4782
  %4788 = load i64, i64* %1847, align 8
  %4789 = ptrtoint i8* %4785 to i64
  %4790 = sub i64 %4789, %4788
  %4791 = shl nsw i64 %4790, 1
  %4792 = add i64 %4791, %4780
  %4793 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4369, align 8
  %4794 = add i64 %4792, 7
  %4795 = and i64 %4794, -8
  %4796 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4793, i64 0, i32 2
  %4797 = load i64, i64* %4796, align 8
  %4798 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4793, i64 0, i32 3
  %4799 = load i64, i64* %4798, align 8
  %4800 = sub i64 %4799, %4797
  %4801 = icmp ugt i64 %4795, %4800
  br i1 %4801, label %4802, label %4804, !prof !2

4802:                                             ; preds = %4787
  %4803 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4793, i64 %4795) #9
  br label %4806

4804:                                             ; preds = %4787
  %4805 = add i64 %4795, %4797
  store i64 %4805, i64* %4796, align 8
  br label %4806

4806:                                             ; preds = %4804, %4802
  %4807 = phi i64 [ %4803, %4802 ], [ %4797, %4804 ]
  %4808 = inttoptr i64 %4807 to i8*
  %4809 = load i8*, i8** %1846, align 8
  %4810 = load i64, i64* %1842, align 8
  %4811 = ptrtoint i8* %4809 to i64
  %4812 = sub i64 %4810, %4811
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4808, i8* align 1 %4809, i64 %4812, i1 false) #9
  %4813 = load i64, i64* %1842, align 8
  %4814 = load i64, i64* %1847, align 8
  %4815 = sub i64 %4813, %4814
  %4816 = getelementptr inbounds i8, i8* %4808, i64 %4815
  store i8* %4816, i8** %8, align 8
  store i8* %4808, i8** %1846, align 8
  %4817 = getelementptr inbounds i8, i8* %4808, i64 %4792
  store i8* %4817, i8** %11, align 8
  br label %4818

4818:                                             ; preds = %4806, %4782
  %4819 = phi i8* [ %4783, %4782 ], [ %4816, %4806 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4819, i8* align 1 %4777, i64 %4780, i1 false) #9
  %4820 = load i8*, i8** %8, align 8
  %4821 = getelementptr inbounds i8, i8* %4820, i64 %4780
  store i8* %4821, i8** %8, align 8
  br label %4822

4822:                                             ; preds = %4772, %4818
  %4823 = icmp eq i8* %4777, null
  br i1 %4823, label %4825, label %4824

4824:                                             ; preds = %4822
  store i64 %4779, i64* %4367, align 8
  br label %4825

4825:                                             ; preds = %4822, %4824
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4361) #9
  %4826 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4398, i64 1
  %4827 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %4826, %4358
  br i1 %4827, label %4371, label %4397

4828:                                             ; preds = %4206, %4371
  %4829 = icmp ne i32 %1436, 0
  br i1 %4829, label %4835, label %4830

4830:                                             ; preds = %4828
  %4831 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %733, i64 0, i32 0, i32 0
  %4832 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %4831, align 8
  %4833 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %734, align 8
  %4834 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %4832, %4833
  br i1 %4834, label %5259, label %4835

4835:                                             ; preds = %4830, %4828
  %4836 = load i8*, i8** %8, align 8
  %4837 = getelementptr inbounds i8, i8* %4836, i64 1
  %4838 = load i8*, i8** %11, align 8
  %4839 = icmp ugt i8* %4837, %4838
  br i1 %4839, label %4840, label %4872

4840:                                             ; preds = %4835
  %4841 = load i64, i64* %1847, align 8
  %4842 = ptrtoint i8* %4838 to i64
  %4843 = sub i64 %4842, %4841
  %4844 = shl nsw i64 %4843, 1
  %4845 = or i64 %4844, 1
  %4846 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4847 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4846, align 8
  %4848 = add i64 %4845, 7
  %4849 = and i64 %4848, -8
  %4850 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4847, i64 0, i32 2
  %4851 = load i64, i64* %4850, align 8
  %4852 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4847, i64 0, i32 3
  %4853 = load i64, i64* %4852, align 8
  %4854 = sub i64 %4853, %4851
  %4855 = icmp ugt i64 %4849, %4854
  br i1 %4855, label %4856, label %4858, !prof !2

4856:                                             ; preds = %4840
  %4857 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4847, i64 %4849) #9
  br label %4860

4858:                                             ; preds = %4840
  %4859 = add i64 %4849, %4851
  store i64 %4859, i64* %4850, align 8
  br label %4860

4860:                                             ; preds = %4858, %4856
  %4861 = phi i64 [ %4857, %4856 ], [ %4851, %4858 ]
  %4862 = inttoptr i64 %4861 to i8*
  %4863 = load i8*, i8** %1846, align 8
  %4864 = load i64, i64* %1842, align 8
  %4865 = ptrtoint i8* %4863 to i64
  %4866 = sub i64 %4864, %4865
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4862, i8* align 1 %4863, i64 %4866, i1 false) #9
  %4867 = load i64, i64* %1842, align 8
  %4868 = load i64, i64* %1847, align 8
  %4869 = sub i64 %4867, %4868
  %4870 = getelementptr inbounds i8, i8* %4862, i64 %4869
  store i8* %4870, i8** %8, align 8
  store i8* %4862, i8** %1846, align 8
  %4871 = getelementptr inbounds i8, i8* %4862, i64 %4845
  store i8* %4871, i8** %11, align 8
  br label %4872

4872:                                             ; preds = %4835, %4860
  %4873 = phi i8* [ %4836, %4835 ], [ %4870, %4860 ]
  %4874 = getelementptr inbounds i8, i8* %4873, i64 1
  store i8* %4874, i8** %8, align 8
  store i8 0, i8* %4873, align 1
  %4875 = load i64, i64* %1842, align 8
  %4876 = load i64, i64* %1847, align 8
  %4877 = sub i64 %4875, %4876
  %4878 = inttoptr i64 %4875 to i8*
  %4879 = getelementptr inbounds i8, i8* %4878, i64 5
  %4880 = load i8*, i8** %11, align 8
  %4881 = icmp ugt i8* %4879, %4880
  br i1 %4881, label %4882, label %4913

4882:                                             ; preds = %4872
  %4883 = ptrtoint i8* %4880 to i64
  %4884 = sub i64 %4883, %4876
  %4885 = shl nsw i64 %4884, 1
  %4886 = add i64 %4885, 5
  %4887 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4888 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4887, align 8
  %4889 = add i64 %4885, 12
  %4890 = and i64 %4889, -8
  %4891 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4888, i64 0, i32 2
  %4892 = load i64, i64* %4891, align 8
  %4893 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4888, i64 0, i32 3
  %4894 = load i64, i64* %4893, align 8
  %4895 = sub i64 %4894, %4892
  %4896 = icmp ugt i64 %4890, %4895
  br i1 %4896, label %4897, label %4899, !prof !2

4897:                                             ; preds = %4882
  %4898 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4888, i64 %4890) #9
  br label %4901

4899:                                             ; preds = %4882
  %4900 = add i64 %4892, %4890
  store i64 %4900, i64* %4891, align 8
  br label %4901

4901:                                             ; preds = %4899, %4897
  %4902 = phi i64 [ %4898, %4897 ], [ %4892, %4899 ]
  %4903 = inttoptr i64 %4902 to i8*
  %4904 = load i8*, i8** %1846, align 8
  %4905 = load i64, i64* %1842, align 8
  %4906 = ptrtoint i8* %4904 to i64
  %4907 = sub i64 %4905, %4906
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4903, i8* align 1 %4904, i64 %4907, i1 false) #9
  %4908 = load i64, i64* %1842, align 8
  %4909 = load i64, i64* %1847, align 8
  %4910 = sub i64 %4908, %4909
  %4911 = getelementptr inbounds i8, i8* %4903, i64 %4910
  store i8* %4911, i8** %8, align 8
  store i8* %4903, i8** %1846, align 8
  %4912 = getelementptr inbounds i8, i8* %4903, i64 %4886
  store i8* %4912, i8** %11, align 8
  br label %4913

4913:                                             ; preds = %4872, %4901
  %4914 = phi i8* [ %4878, %4872 ], [ %4911, %4901 ]
  %4915 = getelementptr inbounds i8, i8* %4914, i64 5
  store i8* %4915, i8** %8, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4)
  %4916 = load i8*, i8** %8, align 8
  %4917 = getelementptr inbounds i8, i8* %4916, i64 1
  %4918 = load i8*, i8** %11, align 8
  %4919 = icmp ugt i8* %4917, %4918
  br i1 %4919, label %4920, label %4952

4920:                                             ; preds = %4913
  %4921 = load i64, i64* %1847, align 8
  %4922 = ptrtoint i8* %4918 to i64
  %4923 = sub i64 %4922, %4921
  %4924 = shl nsw i64 %4923, 1
  %4925 = or i64 %4924, 1
  %4926 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4927 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4926, align 8
  %4928 = add i64 %4925, 7
  %4929 = and i64 %4928, -8
  %4930 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4927, i64 0, i32 2
  %4931 = load i64, i64* %4930, align 8
  %4932 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4927, i64 0, i32 3
  %4933 = load i64, i64* %4932, align 8
  %4934 = sub i64 %4933, %4931
  %4935 = icmp ugt i64 %4929, %4934
  br i1 %4935, label %4936, label %4938, !prof !2

4936:                                             ; preds = %4920
  %4937 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4927, i64 %4929) #9
  br label %4940

4938:                                             ; preds = %4920
  %4939 = add i64 %4929, %4931
  store i64 %4939, i64* %4930, align 8
  br label %4940

4940:                                             ; preds = %4938, %4936
  %4941 = phi i64 [ %4937, %4936 ], [ %4931, %4938 ]
  %4942 = inttoptr i64 %4941 to i8*
  %4943 = load i8*, i8** %1846, align 8
  %4944 = load i64, i64* %1842, align 8
  %4945 = ptrtoint i8* %4943 to i64
  %4946 = sub i64 %4944, %4945
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4942, i8* align 1 %4943, i64 %4946, i1 false) #9
  %4947 = load i64, i64* %1842, align 8
  %4948 = load i64, i64* %1847, align 8
  %4949 = sub i64 %4947, %4948
  %4950 = getelementptr inbounds i8, i8* %4942, i64 %4949
  store i8* %4950, i8** %8, align 8
  store i8* %4942, i8** %1846, align 8
  %4951 = getelementptr inbounds i8, i8* %4942, i64 %4925
  store i8* %4951, i8** %11, align 8
  br label %4952

4952:                                             ; preds = %4913, %4940
  %4953 = phi i8* [ %4916, %4913 ], [ %4950, %4940 ]
  %4954 = getelementptr inbounds i8, i8* %4953, i64 1
  store i8* %4954, i8** %8, align 8
  store i8 1, i8* %4953, align 1
  %4955 = load i64, i64* %1842, align 8
  %4956 = load i64, i64* %1847, align 8
  %4957 = sub i64 %4955, %4956
  %4958 = inttoptr i64 %4955 to i8*
  %4959 = getelementptr inbounds i8, i8* %4958, i64 5
  %4960 = load i8*, i8** %11, align 8
  %4961 = icmp ugt i8* %4959, %4960
  br i1 %4961, label %4962, label %4993

4962:                                             ; preds = %4952
  %4963 = ptrtoint i8* %4960 to i64
  %4964 = sub i64 %4963, %4956
  %4965 = shl nsw i64 %4964, 1
  %4966 = add i64 %4965, 5
  %4967 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %4968 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4967, align 8
  %4969 = add i64 %4965, 12
  %4970 = and i64 %4969, -8
  %4971 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4968, i64 0, i32 2
  %4972 = load i64, i64* %4971, align 8
  %4973 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4968, i64 0, i32 3
  %4974 = load i64, i64* %4973, align 8
  %4975 = sub i64 %4974, %4972
  %4976 = icmp ugt i64 %4970, %4975
  br i1 %4976, label %4977, label %4979, !prof !2

4977:                                             ; preds = %4962
  %4978 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4968, i64 %4970) #9
  br label %4981

4979:                                             ; preds = %4962
  %4980 = add i64 %4972, %4970
  store i64 %4980, i64* %4971, align 8
  br label %4981

4981:                                             ; preds = %4979, %4977
  %4982 = phi i64 [ %4978, %4977 ], [ %4972, %4979 ]
  %4983 = inttoptr i64 %4982 to i8*
  %4984 = load i8*, i8** %1846, align 8
  %4985 = load i64, i64* %1842, align 8
  %4986 = ptrtoint i8* %4984 to i64
  %4987 = sub i64 %4985, %4986
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4983, i8* align 1 %4984, i64 %4987, i1 false) #9
  %4988 = load i64, i64* %1842, align 8
  %4989 = load i64, i64* %1847, align 8
  %4990 = sub i64 %4988, %4989
  %4991 = getelementptr inbounds i8, i8* %4983, i64 %4990
  store i8* %4991, i8** %8, align 8
  store i8* %4983, i8** %1846, align 8
  %4992 = getelementptr inbounds i8, i8* %4983, i64 %4966
  store i8* %4992, i8** %11, align 8
  br label %4993

4993:                                             ; preds = %4952, %4981
  %4994 = phi i64 [ %4956, %4952 ], [ %4982, %4981 ]
  %4995 = phi i8* [ %4960, %4952 ], [ %4992, %4981 ]
  %4996 = phi i8* [ %4958, %4952 ], [ %4991, %4981 ]
  %4997 = getelementptr inbounds i8, i8* %4996, i64 5
  store i8* %4997, i8** %8, align 8
  %4998 = load i64, i64* %735, align 8
  %4999 = load i64, i64* %737, align 8
  %5000 = sub i64 %4998, %4999
  %5001 = sdiv exact i64 %5000, 40
  %5002 = trunc i64 %5001 to i32
  %5003 = add i32 %1436, %5002
  %5004 = trunc i32 %5003 to i8
  %5005 = getelementptr inbounds i8, i8* %4996, i64 10
  %5006 = icmp ugt i8* %5005, %4995
  br i1 %5006, label %5007, label %5038

5007:                                             ; preds = %4993
  %5008 = ptrtoint i8* %4995 to i64
  %5009 = sub i64 %5008, %4994
  %5010 = shl nsw i64 %5009, 1
  %5011 = add i64 %5010, 5
  %5012 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %5013 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5012, align 8
  %5014 = add i64 %5010, 12
  %5015 = and i64 %5014, -8
  %5016 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5013, i64 0, i32 2
  %5017 = load i64, i64* %5016, align 8
  %5018 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5013, i64 0, i32 3
  %5019 = load i64, i64* %5018, align 8
  %5020 = sub i64 %5019, %5017
  %5021 = icmp ugt i64 %5015, %5020
  br i1 %5021, label %5022, label %5024, !prof !2

5022:                                             ; preds = %5007
  %5023 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5013, i64 %5015) #9
  br label %5026

5024:                                             ; preds = %5007
  %5025 = add i64 %5015, %5017
  store i64 %5025, i64* %5016, align 8
  br label %5026

5026:                                             ; preds = %5024, %5022
  %5027 = phi i64 [ %5023, %5022 ], [ %5017, %5024 ]
  %5028 = inttoptr i64 %5027 to i8*
  %5029 = load i8*, i8** %1846, align 8
  %5030 = load i64, i64* %1842, align 8
  %5031 = ptrtoint i8* %5029 to i64
  %5032 = sub i64 %5030, %5031
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5028, i8* align 1 %5029, i64 %5032, i1 false) #9
  %5033 = load i64, i64* %1842, align 8
  %5034 = load i64, i64* %1847, align 8
  %5035 = sub i64 %5033, %5034
  %5036 = getelementptr inbounds i8, i8* %5028, i64 %5035
  store i8* %5036, i8** %8, align 8
  store i8* %5028, i8** %1846, align 8
  %5037 = getelementptr inbounds i8, i8* %5028, i64 %5011
  store i8* %5037, i8** %11, align 8
  br label %5038

5038:                                             ; preds = %5026, %4993
  %5039 = phi i8* [ %4997, %4993 ], [ %5036, %5026 ]
  %5040 = icmp ugt i32 %5003, 127
  br i1 %5040, label %5041, label %5053

5041:                                             ; preds = %5038, %5041
  %5042 = phi i8* [ %5050, %5041 ], [ %5039, %5038 ]
  %5043 = phi i8 [ %5049, %5041 ], [ %5004, %5038 ]
  %5044 = phi i32 [ %5047, %5041 ], [ %5003, %5038 ]
  %5045 = or i8 %5043, -128
  %5046 = getelementptr inbounds i8, i8* %5042, i64 1
  store i8* %5046, i8** %8, align 8
  store i8 %5045, i8* %5042, align 1
  %5047 = lshr i32 %5044, 7
  %5048 = icmp ugt i32 %5044, 16383
  %5049 = trunc i32 %5047 to i8
  %5050 = load i8*, i8** %8, align 8
  br i1 %5048, label %5041, label %5051

5051:                                             ; preds = %5041
  %5052 = trunc i32 %5047 to i8
  br label %5053

5053:                                             ; preds = %5051, %5038
  %5054 = phi i8* [ %5039, %5038 ], [ %5050, %5051 ]
  %5055 = phi i8 [ %5004, %5038 ], [ %5052, %5051 ]
  %5056 = and i8 %5055, 127
  %5057 = getelementptr inbounds i8, i8* %5054, i64 1
  store i8* %5057, i8** %8, align 8
  store i8 %5056, i8* %5054, align 1
  %5058 = icmp eq i32 %5002, 0
  br i1 %5058, label %5130, label %5059

5059:                                             ; preds = %5053
  %5060 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %733, i64 0, i32 0, i32 0
  %5061 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %5062 = and i64 %5001, 4294967295
  br label %5063

5063:                                             ; preds = %5119, %5059
  %5064 = phi i64 [ 0, %5059 ], [ %5128, %5119 ]
  %5065 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"** %5060, align 8
  %5066 = load i8*, i8** %8, align 8
  %5067 = getelementptr inbounds i8, i8* %5066, i64 5
  %5068 = load i8*, i8** %11, align 8
  %5069 = icmp ugt i8* %5067, %5068
  br i1 %5069, label %5070, label %5101

5070:                                             ; preds = %5063
  %5071 = load i64, i64* %1847, align 8
  %5072 = ptrtoint i8* %5068 to i64
  %5073 = sub i64 %5072, %5071
  %5074 = shl nsw i64 %5073, 1
  %5075 = add i64 %5074, 5
  %5076 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5061, align 8
  %5077 = add i64 %5074, 12
  %5078 = and i64 %5077, -8
  %5079 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5076, i64 0, i32 2
  %5080 = load i64, i64* %5079, align 8
  %5081 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5076, i64 0, i32 3
  %5082 = load i64, i64* %5081, align 8
  %5083 = sub i64 %5082, %5080
  %5084 = icmp ugt i64 %5078, %5083
  br i1 %5084, label %5085, label %5087, !prof !2

5085:                                             ; preds = %5070
  %5086 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5076, i64 %5078) #9
  br label %5089

5087:                                             ; preds = %5070
  %5088 = add i64 %5078, %5080
  store i64 %5088, i64* %5079, align 8
  br label %5089

5089:                                             ; preds = %5087, %5085
  %5090 = phi i64 [ %5086, %5085 ], [ %5080, %5087 ]
  %5091 = inttoptr i64 %5090 to i8*
  %5092 = load i8*, i8** %1846, align 8
  %5093 = load i64, i64* %1842, align 8
  %5094 = ptrtoint i8* %5092 to i64
  %5095 = sub i64 %5093, %5094
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5091, i8* align 1 %5092, i64 %5095, i1 false) #9
  %5096 = load i64, i64* %1842, align 8
  %5097 = load i64, i64* %1847, align 8
  %5098 = sub i64 %5096, %5097
  %5099 = getelementptr inbounds i8, i8* %5091, i64 %5098
  store i8* %5099, i8** %8, align 8
  store i8* %5091, i8** %1846, align 8
  %5100 = getelementptr inbounds i8, i8* %5091, i64 %5075
  store i8* %5100, i8** %11, align 8
  br label %5101

5101:                                             ; preds = %5089, %5063
  %5102 = phi i8* [ %5066, %5063 ], [ %5099, %5089 ]
  %5103 = icmp ugt i64 %5064, 127
  %5104 = trunc i64 %5064 to i8
  br i1 %5103, label %5105, label %5119

5105:                                             ; preds = %5101
  %5106 = trunc i64 %5064 to i32
  br label %5107

5107:                                             ; preds = %5105, %5107
  %5108 = phi i8* [ %5116, %5107 ], [ %5102, %5105 ]
  %5109 = phi i8 [ %5115, %5107 ], [ %5104, %5105 ]
  %5110 = phi i32 [ %5113, %5107 ], [ %5106, %5105 ]
  %5111 = or i8 %5109, -128
  %5112 = getelementptr inbounds i8, i8* %5108, i64 1
  store i8* %5112, i8** %8, align 8
  store i8 %5111, i8* %5108, align 1
  %5113 = lshr i32 %5110, 7
  %5114 = icmp ugt i32 %5110, 16383
  %5115 = trunc i32 %5113 to i8
  %5116 = load i8*, i8** %8, align 8
  br i1 %5114, label %5107, label %5117

5117:                                             ; preds = %5107
  %5118 = trunc i32 %5113 to i8
  br label %5119

5119:                                             ; preds = %5117, %5101
  %5120 = phi i8* [ %5102, %5101 ], [ %5116, %5117 ]
  %5121 = phi i8 [ %5104, %5101 ], [ %5118, %5117 ]
  %5122 = and i8 %5121, 127
  %5123 = getelementptr inbounds i8, i8* %5120, i64 1
  store i8* %5123, i8** %8, align 8
  store i8 %5122, i8* %5120, align 1
  %5124 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %5065, i64 %5064, i32 1, i32 0
  %5125 = load i8*, i8** %5124, align 8
  %5126 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmFunctionImport"* %5065, i64 %5064, i32 1, i32 1
  %5127 = load i64, i64* %5126, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %5125, i64 %5127)
  %5128 = add nuw nsw i64 %5064, 1
  %5129 = icmp eq i64 %5128, %5062
  br i1 %5129, label %5130, label %5063

5130:                                             ; preds = %5119, %5053
  br i1 %4829, label %5131, label %5208

5131:                                             ; preds = %5130
  %5132 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %3782, align 8
  %5133 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %1177, align 8
  %5134 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %5132, %5133
  br i1 %5134, label %5208, label %5135

5135:                                             ; preds = %5131
  %5136 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  br label %5137

5137:                                             ; preds = %5135, %5204
  %5138 = phi i32 [ %5002, %5135 ], [ %5205, %5204 ]
  %5139 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %5132, %5135 ], [ %5206, %5204 ]
  %5140 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %5139, align 8
  %5141 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %5140, i64 0, i32 5, i32 1
  %5142 = load i64, i64* %5141, align 8
  %5143 = icmp eq i64 %5142, 0
  br i1 %5143, label %5204, label %5144

5144:                                             ; preds = %5137
  %5145 = load i8*, i8** %8, align 8
  %5146 = getelementptr inbounds i8, i8* %5145, i64 5
  %5147 = load i8*, i8** %11, align 8
  %5148 = icmp ugt i8* %5146, %5147
  br i1 %5148, label %5149, label %5180

5149:                                             ; preds = %5144
  %5150 = load i64, i64* %1847, align 8
  %5151 = ptrtoint i8* %5147 to i64
  %5152 = sub i64 %5151, %5150
  %5153 = shl nsw i64 %5152, 1
  %5154 = add i64 %5153, 5
  %5155 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5136, align 8
  %5156 = add i64 %5153, 12
  %5157 = and i64 %5156, -8
  %5158 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5155, i64 0, i32 2
  %5159 = load i64, i64* %5158, align 8
  %5160 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5155, i64 0, i32 3
  %5161 = load i64, i64* %5160, align 8
  %5162 = sub i64 %5161, %5159
  %5163 = icmp ugt i64 %5157, %5162
  br i1 %5163, label %5164, label %5166, !prof !2

5164:                                             ; preds = %5149
  %5165 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5155, i64 %5157) #9
  br label %5168

5166:                                             ; preds = %5149
  %5167 = add i64 %5157, %5159
  store i64 %5167, i64* %5158, align 8
  br label %5168

5168:                                             ; preds = %5166, %5164
  %5169 = phi i64 [ %5165, %5164 ], [ %5159, %5166 ]
  %5170 = inttoptr i64 %5169 to i8*
  %5171 = load i8*, i8** %1846, align 8
  %5172 = load i64, i64* %1842, align 8
  %5173 = ptrtoint i8* %5171 to i64
  %5174 = sub i64 %5172, %5173
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5170, i8* align 1 %5171, i64 %5174, i1 false) #9
  %5175 = load i64, i64* %1842, align 8
  %5176 = load i64, i64* %1847, align 8
  %5177 = sub i64 %5175, %5176
  %5178 = getelementptr inbounds i8, i8* %5170, i64 %5177
  store i8* %5178, i8** %8, align 8
  store i8* %5170, i8** %1846, align 8
  %5179 = getelementptr inbounds i8, i8* %5170, i64 %5154
  store i8* %5179, i8** %11, align 8
  br label %5180

5180:                                             ; preds = %5168, %5144
  %5181 = phi i8* [ %5145, %5144 ], [ %5178, %5168 ]
  %5182 = icmp ugt i32 %5138, 127
  %5183 = trunc i32 %5138 to i8
  br i1 %5182, label %5184, label %5196

5184:                                             ; preds = %5180, %5184
  %5185 = phi i8* [ %5193, %5184 ], [ %5181, %5180 ]
  %5186 = phi i8 [ %5192, %5184 ], [ %5183, %5180 ]
  %5187 = phi i32 [ %5190, %5184 ], [ %5138, %5180 ]
  %5188 = or i8 %5186, -128
  %5189 = getelementptr inbounds i8, i8* %5185, i64 1
  store i8* %5189, i8** %8, align 8
  store i8 %5188, i8* %5185, align 1
  %5190 = lshr i32 %5187, 7
  %5191 = icmp ugt i32 %5187, 16383
  %5192 = trunc i32 %5190 to i8
  %5193 = load i8*, i8** %8, align 8
  br i1 %5191, label %5184, label %5194

5194:                                             ; preds = %5184
  %5195 = trunc i32 %5190 to i8
  br label %5196

5196:                                             ; preds = %5194, %5180
  %5197 = phi i8* [ %5181, %5180 ], [ %5193, %5194 ]
  %5198 = phi i8 [ %5183, %5180 ], [ %5195, %5194 ]
  %5199 = and i8 %5198, 127
  %5200 = getelementptr inbounds i8, i8* %5197, i64 1
  store i8* %5200, i8** %8, align 8
  store i8 %5199, i8* %5197, align 1
  %5201 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder", %"class.v8::internal::wasm::WasmFunctionBuilder"* %5140, i64 0, i32 5, i32 0
  %5202 = load i8*, i8** %5201, align 8
  %5203 = load i64, i64* %5141, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"* %1, i8* %5202, i64 %5203)
  br label %5204

5204:                                             ; preds = %5196, %5137
  %5205 = add i32 %5138, 1
  %5206 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %5139, i64 1
  %5207 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %5206, %5133
  br i1 %5207, label %5208, label %5137

5208:                                             ; preds = %5204, %5131, %5130
  %5209 = load i64, i64* %1842, align 8
  %5210 = load i64, i64* %1847, align 8
  %5211 = sub i64 %5209, %4957
  %5212 = sub i64 %5211, %5210
  %5213 = trunc i64 %5212 to i32
  %5214 = add i32 %5213, -5
  %5215 = inttoptr i64 %5210 to i8*
  %5216 = getelementptr inbounds i8, i8* %5215, i64 %4957
  %5217 = trunc i32 %5214 to i8
  %5218 = lshr i32 %5214, 7
  %5219 = or i8 %5217, -128
  %5220 = getelementptr inbounds i8, i8* %5216, i64 1
  store i8 %5219, i8* %5216, align 1
  %5221 = trunc i32 %5218 to i8
  %5222 = lshr i32 %5214, 14
  %5223 = or i8 %5221, -128
  %5224 = getelementptr inbounds i8, i8* %5220, i64 1
  store i8 %5223, i8* %5220, align 1
  %5225 = trunc i32 %5222 to i8
  %5226 = lshr i32 %5214, 21
  %5227 = or i8 %5225, -128
  %5228 = getelementptr inbounds i8, i8* %5224, i64 1
  store i8 %5227, i8* %5224, align 1
  %5229 = trunc i32 %5226 to i8
  %5230 = lshr i32 %5214, 28
  %5231 = or i8 %5229, -128
  %5232 = getelementptr inbounds i8, i8* %5228, i64 1
  store i8 %5231, i8* %5228, align 1
  %5233 = trunc i32 %5230 to i8
  store i8 %5233, i8* %5232, align 1
  %5234 = load i64, i64* %1842, align 8
  %5235 = load i64, i64* %1847, align 8
  %5236 = sub i64 %5234, %4877
  %5237 = sub i64 %5236, %5235
  %5238 = trunc i64 %5237 to i32
  %5239 = add i32 %5238, -5
  %5240 = inttoptr i64 %5235 to i8*
  %5241 = getelementptr inbounds i8, i8* %5240, i64 %4877
  %5242 = trunc i32 %5239 to i8
  %5243 = lshr i32 %5239, 7
  %5244 = or i8 %5242, -128
  %5245 = getelementptr inbounds i8, i8* %5241, i64 1
  store i8 %5244, i8* %5241, align 1
  %5246 = trunc i32 %5243 to i8
  %5247 = lshr i32 %5239, 14
  %5248 = or i8 %5246, -128
  %5249 = getelementptr inbounds i8, i8* %5245, i64 1
  store i8 %5248, i8* %5245, align 1
  %5250 = trunc i32 %5247 to i8
  %5251 = lshr i32 %5239, 21
  %5252 = or i8 %5250, -128
  %5253 = getelementptr inbounds i8, i8* %5249, i64 1
  store i8 %5252, i8* %5249, align 1
  %5254 = trunc i32 %5251 to i8
  %5255 = lshr i32 %5239, 28
  %5256 = or i8 %5254, -128
  %5257 = getelementptr inbounds i8, i8* %5253, i64 1
  store i8 %5256, i8* %5253, align 1
  %5258 = trunc i32 %5255 to i8
  store i8 %5258, i8* %5257, align 1
  br label %5259

5259:                                             ; preds = %5208, %4830
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_114WriteValueTypeEPNS1_10ZoneBufferERKNS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"*, %"class.v8::internal::wasm::ValueType"* nocapture readonly dereferenceable(4)) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = and i8 %5, 31
  switch i8 %6, label %28 [
    i8 11, label %7
    i8 10, label %12
    i8 0, label %34
    i8 8, label %19
    i8 9, label %20
    i8 1, label %21
    i8 2, label %22
    i8 3, label %23
    i8 4, label %24
    i8 5, label %25
    i8 6, label %26
    i8 7, label %27
    i8 12, label %34
  ]

7:                                                ; preds = %2
  %8 = lshr i32 %4, 5
  %9 = and i32 %8, 1048575
  %10 = add nsw i32 %9, -1000000
  %11 = icmp ult i32 %10, 6
  br i1 %11, label %29, label %34

12:                                               ; preds = %2
  %13 = lshr i32 %4, 5
  %14 = and i32 %13, 1048575
  %15 = icmp eq i32 %14, 1000004
  %16 = select i1 %15, i8 103, i8 107
  %17 = icmp eq i32 %14, 1000003
  %18 = select i1 %17, i8 106, i8 %16
  br label %34

19:                                               ; preds = %2
  br label %34

20:                                               ; preds = %2
  br label %34

21:                                               ; preds = %2
  br label %34

22:                                               ; preds = %2
  br label %34

23:                                               ; preds = %2
  br label %34

24:                                               ; preds = %2
  br label %34

25:                                               ; preds = %2
  br label %34

26:                                               ; preds = %2
  br label %34

27:                                               ; preds = %2
  br label %34

28:                                               ; preds = %2
  unreachable

29:                                               ; preds = %7
  %30 = zext i32 %10 to i48
  %31 = shl nuw nsw i48 %30, 3
  %32 = lshr i48 121411954634608, %31
  %33 = trunc i48 %32 to i8
  br label %34

34:                                               ; preds = %7, %29, %2, %2, %12, %19, %20, %21, %22, %23, %24, %25, %26, %27
  %35 = phi i8 [ 121, %27 ], [ 122, %26 ], [ 123, %25 ], [ 124, %24 ], [ 125, %23 ], [ 126, %22 ], [ 127, %21 ], [ 105, %20 ], [ 104, %19 ], [ %18, %12 ], [ 64, %2 ], [ 64, %2 ], [ %33, %29 ], [ 108, %7 ]
  %36 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %40 = load i8*, i8** %39, align 8
  %41 = icmp ugt i8* %38, %40
  br i1 %41, label %42, label %77

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = ptrtoint i8* %40 to i64
  %47 = sub i64 %46, %45
  %48 = shl nsw i64 %47, 1
  %49 = or i64 %48, 1
  %50 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %51 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %50, align 8
  %52 = add i64 %49, 7
  %53 = and i64 %52, -8
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %51, i64 0, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %51, i64 0, i32 3
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %57, %55
  %59 = icmp ugt i64 %53, %58
  br i1 %59, label %60, label %62, !prof !2

60:                                               ; preds = %42
  %61 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %51, i64 %53) #9
  br label %64

62:                                               ; preds = %42
  %63 = add i64 %53, %55
  store i64 %63, i64* %54, align 8
  br label %64

64:                                               ; preds = %62, %60
  %65 = phi i64 [ %61, %60 ], [ %55, %62 ]
  %66 = inttoptr i64 %65 to i8*
  %67 = load i8*, i8** %43, align 8
  %68 = bitcast i8** %36 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = ptrtoint i8* %67 to i64
  %71 = sub i64 %69, %70
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 %71, i1 false) #9
  %72 = load i64, i64* %68, align 8
  %73 = load i64, i64* %44, align 8
  %74 = sub i64 %72, %73
  %75 = getelementptr inbounds i8, i8* %66, i64 %74
  store i8* %75, i8** %36, align 8
  store i8* %66, i8** %43, align 8
  %76 = getelementptr inbounds i8, i8* %66, i64 %49
  store i8* %76, i8** %39, align 8
  br label %77

77:                                               ; preds = %34, %64
  %78 = phi i8* [ %37, %34 ], [ %75, %64 ]
  %79 = getelementptr inbounds i8, i8* %78, i64 1
  store i8* %79, i8** %36, align 8
  store i8 %35, i8* %78, align 1
  %80 = load i32, i32* %3, align 4
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 31
  switch i8 %82, label %107 [
    i8 10, label %90
    i8 11, label %83
  ]

83:                                               ; preds = %77
  %84 = lshr i32 %80, 5
  %85 = and i32 %84, 1048575
  %86 = icmp ult i32 %85, 1000000
  %87 = add nsw i32 %85, -1000003
  %88 = icmp ult i32 %87, 2
  %89 = or i1 %86, %88
  br i1 %89, label %95, label %107

90:                                               ; preds = %77
  %91 = lshr i32 %80, 5
  %92 = and i32 %91, 1048575
  %93 = add nsw i32 %92, -1000003
  %94 = icmp ugt i32 %93, 1
  br i1 %94, label %95, label %107

95:                                               ; preds = %83, %90
  %96 = phi i32 [ %85, %83 ], [ %92, %90 ]
  %97 = add nsw i32 %96, -1000000
  %98 = icmp ult i32 %97, 6
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = sext i32 %97 to i64
  %101 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table._ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  br label %103

103:                                              ; preds = %95, %99
  %104 = phi i32 [ %102, %99 ], [ %96, %95 ]
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %0, i32 %104)
  %105 = load i32, i32* %3, align 4
  %106 = trunc i32 %105 to i8
  br label %107

107:                                              ; preds = %77, %83, %103, %90
  %108 = phi i8 [ %81, %77 ], [ %81, %83 ], [ %106, %103 ], [ %81, %90 ]
  %109 = phi i32 [ %80, %77 ], [ %80, %83 ], [ %105, %103 ], [ %80, %90 ]
  %110 = and i8 %108, 30
  %111 = or i8 %110, 1
  %112 = icmp eq i8 %111, 9
  br i1 %112, label %113, label %227

113:                                              ; preds = %107
  %114 = and i32 %109, 31
  %115 = icmp eq i32 %114, 9
  br i1 %115, label %116, label %163

116:                                              ; preds = %113
  %117 = lshr i32 %109, 25
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 63
  %120 = load i8*, i8** %36, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 5
  %122 = load i8*, i8** %39, align 8
  %123 = icmp ugt i8* %121, %122
  br i1 %123, label %124, label %159

124:                                              ; preds = %116
  %125 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %126 = bitcast i8** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = ptrtoint i8* %122 to i64
  %129 = sub i64 %128, %127
  %130 = shl nsw i64 %129, 1
  %131 = add i64 %130, 5
  %132 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %133 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %132, align 8
  %134 = add i64 %130, 12
  %135 = and i64 %134, -8
  %136 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %133, i64 0, i32 2
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %133, i64 0, i32 3
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %139, %137
  %141 = icmp ugt i64 %135, %140
  br i1 %141, label %142, label %144, !prof !2

142:                                              ; preds = %124
  %143 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %133, i64 %135) #9
  br label %146

144:                                              ; preds = %124
  %145 = add i64 %135, %137
  store i64 %145, i64* %136, align 8
  br label %146

146:                                              ; preds = %144, %142
  %147 = phi i64 [ %143, %142 ], [ %137, %144 ]
  %148 = inttoptr i64 %147 to i8*
  %149 = load i8*, i8** %125, align 8
  %150 = bitcast i8** %36 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = ptrtoint i8* %149 to i64
  %153 = sub i64 %151, %152
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %149, i64 %153, i1 false) #9
  %154 = load i64, i64* %150, align 8
  %155 = load i64, i64* %126, align 8
  %156 = sub i64 %154, %155
  %157 = getelementptr inbounds i8, i8* %148, i64 %156
  store i8* %157, i8** %36, align 8
  store i8* %148, i8** %125, align 8
  %158 = getelementptr inbounds i8, i8* %148, i64 %131
  store i8* %158, i8** %39, align 8
  br label %159

159:                                              ; preds = %116, %146
  %160 = phi i8* [ %120, %116 ], [ %157, %146 ]
  %161 = getelementptr inbounds i8, i8* %160, i64 1
  store i8* %161, i8** %36, align 8
  store i8 %119, i8* %160, align 1
  %162 = load i32, i32* %3, align 4
  br label %163

163:                                              ; preds = %159, %113
  %164 = phi i32 [ %162, %159 ], [ %109, %113 ]
  %165 = lshr i32 %164, 5
  %166 = and i32 %165, 1048575
  %167 = load i8*, i8** %36, align 8
  %168 = getelementptr inbounds i8, i8* %167, i64 5
  %169 = load i8*, i8** %39, align 8
  %170 = icmp ugt i8* %168, %169
  br i1 %170, label %171, label %206

171:                                              ; preds = %163
  %172 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %173 = bitcast i8** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = ptrtoint i8* %169 to i64
  %176 = sub i64 %175, %174
  %177 = shl nsw i64 %176, 1
  %178 = add i64 %177, 5
  %179 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %180 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %179, align 8
  %181 = add i64 %177, 12
  %182 = and i64 %181, -8
  %183 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %180, i64 0, i32 2
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %180, i64 0, i32 3
  %186 = load i64, i64* %185, align 8
  %187 = sub i64 %186, %184
  %188 = icmp ugt i64 %182, %187
  br i1 %188, label %189, label %191, !prof !2

189:                                              ; preds = %171
  %190 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %180, i64 %182) #9
  br label %193

191:                                              ; preds = %171
  %192 = add i64 %182, %184
  store i64 %192, i64* %183, align 8
  br label %193

193:                                              ; preds = %191, %189
  %194 = phi i64 [ %190, %189 ], [ %184, %191 ]
  %195 = inttoptr i64 %194 to i8*
  %196 = load i8*, i8** %172, align 8
  %197 = bitcast i8** %36 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = ptrtoint i8* %196 to i64
  %200 = sub i64 %198, %199
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %196, i64 %200, i1 false) #9
  %201 = load i64, i64* %197, align 8
  %202 = load i64, i64* %173, align 8
  %203 = sub i64 %201, %202
  %204 = getelementptr inbounds i8, i8* %195, i64 %203
  store i8* %204, i8** %36, align 8
  store i8* %195, i8** %172, align 8
  %205 = getelementptr inbounds i8, i8* %195, i64 %178
  store i8* %205, i8** %39, align 8
  br label %206

206:                                              ; preds = %193, %163
  %207 = phi i8* [ %167, %163 ], [ %204, %193 ]
  %208 = icmp ugt i32 %166, 127
  %209 = trunc i32 %165 to i8
  br i1 %208, label %210, label %222

210:                                              ; preds = %206, %210
  %211 = phi i8* [ %219, %210 ], [ %207, %206 ]
  %212 = phi i8 [ %218, %210 ], [ %209, %206 ]
  %213 = phi i32 [ %216, %210 ], [ %166, %206 ]
  %214 = or i8 %212, -128
  %215 = getelementptr inbounds i8, i8* %211, i64 1
  store i8* %215, i8** %36, align 8
  store i8 %214, i8* %211, align 1
  %216 = lshr i32 %213, 7
  %217 = icmp ugt i32 %213, 16383
  %218 = trunc i32 %216 to i8
  %219 = load i8*, i8** %36, align 8
  br i1 %217, label %210, label %220

220:                                              ; preds = %210
  %221 = trunc i32 %216 to i8
  br label %222

222:                                              ; preds = %220, %206
  %223 = phi i8* [ %207, %206 ], [ %219, %220 ]
  %224 = phi i8 [ %209, %206 ], [ %221, %220 ]
  %225 = and i8 %224, 127
  %226 = getelementptr inbounds i8, i8* %223, i64 1
  store i8* %226, i8** %36, align 8
  store i8 %225, i8* %223, align 1
  br label %227

227:                                              ; preds = %222, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm10ZoneBuffer12write_stringENS0_6VectorIKcEE(%"class.v8::internal::wasm::ZoneBuffer"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = trunc i64 %2 to i32
  %5 = shl i64 %2, 32
  %6 = ashr exact i64 %5, 32
  %7 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 5
  %10 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %48

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i8* %11 to i64
  %18 = sub i64 %17, %16
  %19 = shl nsw i64 %18, 1
  %20 = add i64 %19, 5
  %21 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  %23 = add i64 %19, 12
  %24 = and i64 %23, -8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %13
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 %24) #9
  br label %35

33:                                               ; preds = %13
  %34 = add i64 %24, %26
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8*, i8** %14, align 8
  %39 = bitcast i8** %7 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = ptrtoint i8* %38 to i64
  %42 = sub i64 %40, %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %42, i1 false) #9
  %43 = load i64, i64* %39, align 8
  %44 = load i64, i64* %15, align 8
  %45 = sub i64 %43, %44
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8* %46, i8** %7, align 8
  store i8* %37, i8** %14, align 8
  %47 = getelementptr inbounds i8, i8* %37, i64 %20
  store i8* %47, i8** %10, align 8
  br label %48

48:                                               ; preds = %35, %3
  %49 = phi i8* [ %8, %3 ], [ %46, %35 ]
  %50 = icmp ugt i32 %4, 127
  %51 = trunc i64 %6 to i8
  br i1 %50, label %52, label %64

52:                                               ; preds = %48, %52
  %53 = phi i8* [ %61, %52 ], [ %49, %48 ]
  %54 = phi i8 [ %60, %52 ], [ %51, %48 ]
  %55 = phi i32 [ %58, %52 ], [ %4, %48 ]
  %56 = or i8 %54, -128
  %57 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %57, i8** %7, align 8
  store i8 %56, i8* %53, align 1
  %58 = lshr i32 %55, 7
  %59 = icmp ugt i32 %55, 16383
  %60 = trunc i32 %58 to i8
  %61 = load i8*, i8** %7, align 8
  br i1 %59, label %52, label %62

62:                                               ; preds = %52
  %63 = trunc i32 %58 to i8
  br label %64

64:                                               ; preds = %62, %48
  %65 = phi i8* [ %49, %48 ], [ %61, %62 ]
  %66 = phi i8 [ %51, %48 ], [ %63, %62 ]
  %67 = and i8 %66, 127
  %68 = getelementptr inbounds i8, i8* %65, i64 1
  store i8* %68, i8** %7, align 8
  store i8 %67, i8* %65, align 1
  %69 = icmp eq i64 %5, 0
  br i1 %69, label %114, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %7, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 %6
  %73 = load i8*, i8** %10, align 8
  %74 = icmp ugt i8* %72, %73
  br i1 %74, label %75, label %110

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = ptrtoint i8* %73 to i64
  %80 = sub i64 %79, %78
  %81 = shl nsw i64 %80, 1
  %82 = add i64 %81, %6
  %83 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %84 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %83, align 8
  %85 = add i64 %82, 7
  %86 = and i64 %85, -8
  %87 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %84, i64 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %84, i64 0, i32 3
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %90, %88
  %92 = icmp ugt i64 %86, %91
  br i1 %92, label %93, label %95, !prof !2

93:                                               ; preds = %75
  %94 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %84, i64 %86) #9
  br label %97

95:                                               ; preds = %75
  %96 = add i64 %86, %88
  store i64 %96, i64* %87, align 8
  br label %97

97:                                               ; preds = %95, %93
  %98 = phi i64 [ %94, %93 ], [ %88, %95 ]
  %99 = inttoptr i64 %98 to i8*
  %100 = load i8*, i8** %76, align 8
  %101 = bitcast i8** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = ptrtoint i8* %100 to i64
  %104 = sub i64 %102, %103
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %104, i1 false) #9
  %105 = load i64, i64* %101, align 8
  %106 = load i64, i64* %77, align 8
  %107 = sub i64 %105, %106
  %108 = getelementptr inbounds i8, i8* %99, i64 %107
  store i8* %108, i8** %7, align 8
  store i8* %99, i8** %76, align 8
  %109 = getelementptr inbounds i8, i8* %99, i64 %82
  store i8* %109, i8** %10, align 8
  br label %110

110:                                              ; preds = %97, %70
  %111 = phi i8* [ %71, %70 ], [ %108, %97 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %1, i64 %6, i1 false) #9
  %112 = load i8*, i8** %7, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 %6
  store i8* %113, i8** %7, align 8
  br label %114

114:                                              ; preds = %64, %110
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"*, %"class.v8::internal::wasm::WasmInitExpr"* readonly dereferenceable(32), i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %1272 [
    i32 2, label %6
    i32 3, label %54
    i32 4, label %101
    i32 5, label %193
    i32 6, label %284
    i32 1, label %417
    i32 7, label %525
    i32 8, label %581
    i32 0, label %689
    i32 9, label %1090
    i32 10, label %1180
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %48

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i8* %11 to i64
  %18 = sub i64 %17, %16
  %19 = shl nsw i64 %18, 1
  %20 = or i64 %19, 1
  %21 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  %23 = add i64 %20, 7
  %24 = and i64 %23, -8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %13
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 %24) #9
  br label %35

33:                                               ; preds = %13
  %34 = add i64 %24, %26
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8*, i8** %14, align 8
  %39 = bitcast i8** %7 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = ptrtoint i8* %38 to i64
  %42 = sub i64 %40, %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %42, i1 false) #9
  %43 = load i64, i64* %39, align 8
  %44 = load i64, i64* %15, align 8
  %45 = sub i64 %43, %44
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8* %46, i8** %7, align 8
  store i8* %37, i8** %14, align 8
  %47 = getelementptr inbounds i8, i8* %37, i64 %20
  store i8* %47, i8** %10, align 8
  br label %48

48:                                               ; preds = %6, %35
  %49 = phi i8* [ %8, %6 ], [ %46, %35 ]
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %50, i8** %7, align 8
  store i8 65, i8* %49, align 1
  %51 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = trunc i64 %52 to i32
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %0, i32 %53)
  br label %1272

54:                                               ; preds = %3
  %55 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  %58 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ugt i8* %57, %59
  br i1 %60, label %61, label %96

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %63 = bitcast i8** %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = ptrtoint i8* %59 to i64
  %66 = sub i64 %65, %64
  %67 = shl nsw i64 %66, 1
  %68 = or i64 %67, 1
  %69 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %70 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %71 = add i64 %68, 7
  %72 = and i64 %71, -8
  %73 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %70, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %70, i64 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %74
  %78 = icmp ugt i64 %72, %77
  br i1 %78, label %79, label %81, !prof !2

79:                                               ; preds = %61
  %80 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %70, i64 %72) #9
  br label %83

81:                                               ; preds = %61
  %82 = add i64 %72, %74
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %81, %79
  %84 = phi i64 [ %80, %79 ], [ %74, %81 ]
  %85 = inttoptr i64 %84 to i8*
  %86 = load i8*, i8** %62, align 8
  %87 = bitcast i8** %55 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = ptrtoint i8* %86 to i64
  %90 = sub i64 %88, %89
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 %90, i1 false) #9
  %91 = load i64, i64* %87, align 8
  %92 = load i64, i64* %63, align 8
  %93 = sub i64 %91, %92
  %94 = getelementptr inbounds i8, i8* %85, i64 %93
  store i8* %94, i8** %55, align 8
  store i8* %85, i8** %62, align 8
  %95 = getelementptr inbounds i8, i8* %85, i64 %68
  store i8* %95, i8** %58, align 8
  br label %96

96:                                               ; preds = %54, %83
  %97 = phi i8* [ %56, %54 ], [ %94, %83 ]
  %98 = getelementptr inbounds i8, i8* %97, i64 1
  store i8* %98, i8** %55, align 8
  store i8 66, i8* %97, align 1
  %99 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %100 = load i64, i64* %99, align 8
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i64vEl(%"class.v8::internal::wasm::ZoneBuffer"* %0, i64 %100)
  br label %1272

101:                                              ; preds = %3
  %102 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  %105 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %106 = load i8*, i8** %105, align 8
  %107 = icmp ugt i8* %104, %106
  br i1 %107, label %108, label %143

108:                                              ; preds = %101
  %109 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %110 = bitcast i8** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = ptrtoint i8* %106 to i64
  %113 = sub i64 %112, %111
  %114 = shl nsw i64 %113, 1
  %115 = or i64 %114, 1
  %116 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %117 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %116, align 8
  %118 = add i64 %115, 7
  %119 = and i64 %118, -8
  %120 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 3
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %123, %121
  %125 = icmp ugt i64 %119, %124
  br i1 %125, label %126, label %128, !prof !2

126:                                              ; preds = %108
  %127 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %117, i64 %119) #9
  br label %130

128:                                              ; preds = %108
  %129 = add i64 %119, %121
  store i64 %129, i64* %120, align 8
  br label %130

130:                                              ; preds = %128, %126
  %131 = phi i64 [ %127, %126 ], [ %121, %128 ]
  %132 = inttoptr i64 %131 to i8*
  %133 = load i8*, i8** %109, align 8
  %134 = bitcast i8** %102 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = ptrtoint i8* %133 to i64
  %137 = sub i64 %135, %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %133, i64 %137, i1 false) #9
  %138 = load i64, i64* %134, align 8
  %139 = load i64, i64* %110, align 8
  %140 = sub i64 %138, %139
  %141 = getelementptr inbounds i8, i8* %132, i64 %140
  store i8* %141, i8** %102, align 8
  store i8* %132, i8** %109, align 8
  %142 = getelementptr inbounds i8, i8* %132, i64 %115
  store i8* %142, i8** %105, align 8
  br label %143

143:                                              ; preds = %101, %130
  %144 = phi i8* [ %103, %101 ], [ %141, %130 ]
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  store i8* %145, i8** %102, align 8
  store i8 67, i8* %144, align 1
  %146 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %147 = load i64, i64* %146, align 8
  %148 = trunc i64 %147 to i32
  %149 = load i8*, i8** %102, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 4
  %151 = load i8*, i8** %105, align 8
  %152 = icmp ugt i8* %150, %151
  br i1 %152, label %153, label %188

153:                                              ; preds = %143
  %154 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %155 = bitcast i8** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = ptrtoint i8* %151 to i64
  %158 = sub i64 %157, %156
  %159 = shl nsw i64 %158, 1
  %160 = add i64 %159, 4
  %161 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %162 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %161, align 8
  %163 = add i64 %159, 11
  %164 = and i64 %163, -8
  %165 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %162, i64 0, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %162, i64 0, i32 3
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %168, %166
  %170 = icmp ugt i64 %164, %169
  br i1 %170, label %171, label %173, !prof !2

171:                                              ; preds = %153
  %172 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %162, i64 %164) #9
  br label %175

173:                                              ; preds = %153
  %174 = add i64 %164, %166
  store i64 %174, i64* %165, align 8
  br label %175

175:                                              ; preds = %173, %171
  %176 = phi i64 [ %172, %171 ], [ %166, %173 ]
  %177 = inttoptr i64 %176 to i8*
  %178 = load i8*, i8** %154, align 8
  %179 = bitcast i8** %102 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = ptrtoint i8* %178 to i64
  %182 = sub i64 %180, %181
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %178, i64 %182, i1 false) #9
  %183 = load i64, i64* %179, align 8
  %184 = load i64, i64* %155, align 8
  %185 = sub i64 %183, %184
  %186 = getelementptr inbounds i8, i8* %177, i64 %185
  store i8* %186, i8** %102, align 8
  store i8* %177, i8** %154, align 8
  %187 = getelementptr inbounds i8, i8* %177, i64 %160
  store i8* %187, i8** %105, align 8
  br label %188

188:                                              ; preds = %143, %175
  %189 = phi i8* [ %149, %143 ], [ %186, %175 ]
  %190 = bitcast i8* %189 to i32*
  store i32 %148, i32* %190, align 1
  %191 = load i8*, i8** %102, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 4
  store i8* %192, i8** %102, align 8
  br label %1272

193:                                              ; preds = %3
  %194 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  %197 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %198 = load i8*, i8** %197, align 8
  %199 = icmp ugt i8* %196, %198
  br i1 %199, label %200, label %235

200:                                              ; preds = %193
  %201 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %202 = bitcast i8** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = ptrtoint i8* %198 to i64
  %205 = sub i64 %204, %203
  %206 = shl nsw i64 %205, 1
  %207 = or i64 %206, 1
  %208 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %209 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %208, align 8
  %210 = add i64 %207, 7
  %211 = and i64 %210, -8
  %212 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %209, i64 0, i32 2
  %213 = load i64, i64* %212, align 8
  %214 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %209, i64 0, i32 3
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %215, %213
  %217 = icmp ugt i64 %211, %216
  br i1 %217, label %218, label %220, !prof !2

218:                                              ; preds = %200
  %219 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %209, i64 %211) #9
  br label %222

220:                                              ; preds = %200
  %221 = add i64 %211, %213
  store i64 %221, i64* %212, align 8
  br label %222

222:                                              ; preds = %220, %218
  %223 = phi i64 [ %219, %218 ], [ %213, %220 ]
  %224 = inttoptr i64 %223 to i8*
  %225 = load i8*, i8** %201, align 8
  %226 = bitcast i8** %194 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = ptrtoint i8* %225 to i64
  %229 = sub i64 %227, %228
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %224, i8* align 1 %225, i64 %229, i1 false) #9
  %230 = load i64, i64* %226, align 8
  %231 = load i64, i64* %202, align 8
  %232 = sub i64 %230, %231
  %233 = getelementptr inbounds i8, i8* %224, i64 %232
  store i8* %233, i8** %194, align 8
  store i8* %224, i8** %201, align 8
  %234 = getelementptr inbounds i8, i8* %224, i64 %207
  store i8* %234, i8** %197, align 8
  br label %235

235:                                              ; preds = %193, %222
  %236 = phi i8* [ %195, %193 ], [ %233, %222 ]
  %237 = getelementptr inbounds i8, i8* %236, i64 1
  store i8* %237, i8** %194, align 8
  store i8 68, i8* %236, align 1
  %238 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %239 = load i64, i64* %238, align 8
  %240 = load i8*, i8** %194, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 8
  %242 = load i8*, i8** %197, align 8
  %243 = icmp ugt i8* %241, %242
  br i1 %243, label %244, label %279

244:                                              ; preds = %235
  %245 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %246 = bitcast i8** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = ptrtoint i8* %242 to i64
  %249 = sub i64 %248, %247
  %250 = shl nsw i64 %249, 1
  %251 = add i64 %250, 8
  %252 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %253 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %252, align 8
  %254 = add i64 %250, 15
  %255 = and i64 %254, -8
  %256 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %253, i64 0, i32 2
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %253, i64 0, i32 3
  %259 = load i64, i64* %258, align 8
  %260 = sub i64 %259, %257
  %261 = icmp ugt i64 %255, %260
  br i1 %261, label %262, label %264, !prof !2

262:                                              ; preds = %244
  %263 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %253, i64 %255) #9
  br label %266

264:                                              ; preds = %244
  %265 = add i64 %255, %257
  store i64 %265, i64* %256, align 8
  br label %266

266:                                              ; preds = %264, %262
  %267 = phi i64 [ %263, %262 ], [ %257, %264 ]
  %268 = inttoptr i64 %267 to i8*
  %269 = load i8*, i8** %245, align 8
  %270 = bitcast i8** %194 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = ptrtoint i8* %269 to i64
  %273 = sub i64 %271, %272
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %268, i8* align 1 %269, i64 %273, i1 false) #9
  %274 = load i64, i64* %270, align 8
  %275 = load i64, i64* %246, align 8
  %276 = sub i64 %274, %275
  %277 = getelementptr inbounds i8, i8* %268, i64 %276
  store i8* %277, i8** %194, align 8
  store i8* %268, i8** %245, align 8
  %278 = getelementptr inbounds i8, i8* %268, i64 %251
  store i8* %278, i8** %197, align 8
  br label %279

279:                                              ; preds = %235, %266
  %280 = phi i8* [ %240, %235 ], [ %277, %266 ]
  %281 = bitcast i8* %280 to i64*
  store i64 %239, i64* %281, align 1
  %282 = load i8*, i8** %194, align 8
  %283 = getelementptr inbounds i8, i8* %282, i64 8
  store i8* %283, i8** %194, align 8
  br label %1272

284:                                              ; preds = %3
  %285 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %286 = load i8*, i8** %285, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 1
  %288 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %289 = load i8*, i8** %288, align 8
  %290 = icmp ugt i8* %287, %289
  br i1 %290, label %291, label %326

291:                                              ; preds = %284
  %292 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %293 = bitcast i8** %292 to i64*
  %294 = load i64, i64* %293, align 8
  %295 = ptrtoint i8* %289 to i64
  %296 = sub i64 %295, %294
  %297 = shl nsw i64 %296, 1
  %298 = or i64 %297, 1
  %299 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %300 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %299, align 8
  %301 = add i64 %298, 7
  %302 = and i64 %301, -8
  %303 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %300, i64 0, i32 2
  %304 = load i64, i64* %303, align 8
  %305 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %300, i64 0, i32 3
  %306 = load i64, i64* %305, align 8
  %307 = sub i64 %306, %304
  %308 = icmp ugt i64 %302, %307
  br i1 %308, label %309, label %311, !prof !2

309:                                              ; preds = %291
  %310 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %300, i64 %302) #9
  br label %313

311:                                              ; preds = %291
  %312 = add i64 %302, %304
  store i64 %312, i64* %303, align 8
  br label %313

313:                                              ; preds = %311, %309
  %314 = phi i64 [ %310, %309 ], [ %304, %311 ]
  %315 = inttoptr i64 %314 to i8*
  %316 = load i8*, i8** %292, align 8
  %317 = bitcast i8** %285 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = ptrtoint i8* %316 to i64
  %320 = sub i64 %318, %319
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %315, i8* align 1 %316, i64 %320, i1 false) #9
  %321 = load i64, i64* %317, align 8
  %322 = load i64, i64* %293, align 8
  %323 = sub i64 %321, %322
  %324 = getelementptr inbounds i8, i8* %315, i64 %323
  store i8* %324, i8** %285, align 8
  store i8* %315, i8** %292, align 8
  %325 = getelementptr inbounds i8, i8* %315, i64 %298
  store i8* %325, i8** %288, align 8
  br label %326

326:                                              ; preds = %284, %313
  %327 = phi i8* [ %286, %284 ], [ %324, %313 ]
  %328 = getelementptr inbounds i8, i8* %327, i64 1
  store i8* %328, i8** %285, align 8
  store i8 -3, i8* %327, align 1
  %329 = load i8*, i8** %285, align 8
  %330 = getelementptr inbounds i8, i8* %329, i64 1
  %331 = load i8*, i8** %288, align 8
  %332 = icmp ugt i8* %330, %331
  br i1 %332, label %333, label %368

333:                                              ; preds = %326
  %334 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %335 = bitcast i8** %334 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = ptrtoint i8* %331 to i64
  %338 = sub i64 %337, %336
  %339 = shl nsw i64 %338, 1
  %340 = or i64 %339, 1
  %341 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %342 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %341, align 8
  %343 = add i64 %340, 7
  %344 = and i64 %343, -8
  %345 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %342, i64 0, i32 2
  %346 = load i64, i64* %345, align 8
  %347 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %342, i64 0, i32 3
  %348 = load i64, i64* %347, align 8
  %349 = sub i64 %348, %346
  %350 = icmp ugt i64 %344, %349
  br i1 %350, label %351, label %353, !prof !2

351:                                              ; preds = %333
  %352 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %342, i64 %344) #9
  br label %355

353:                                              ; preds = %333
  %354 = add i64 %344, %346
  store i64 %354, i64* %345, align 8
  br label %355

355:                                              ; preds = %353, %351
  %356 = phi i64 [ %352, %351 ], [ %346, %353 ]
  %357 = inttoptr i64 %356 to i8*
  %358 = load i8*, i8** %334, align 8
  %359 = bitcast i8** %285 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = ptrtoint i8* %358 to i64
  %362 = sub i64 %360, %361
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %357, i8* align 1 %358, i64 %362, i1 false) #9
  %363 = load i64, i64* %359, align 8
  %364 = load i64, i64* %335, align 8
  %365 = sub i64 %363, %364
  %366 = getelementptr inbounds i8, i8* %357, i64 %365
  store i8* %366, i8** %285, align 8
  store i8* %357, i8** %334, align 8
  %367 = getelementptr inbounds i8, i8* %357, i64 %340
  store i8* %367, i8** %288, align 8
  br label %368

368:                                              ; preds = %326, %355
  %369 = phi i8* [ %329, %326 ], [ %366, %355 ]
  %370 = getelementptr inbounds i8, i8* %369, i64 1
  store i8* %370, i8** %285, align 8
  store i8 12, i8* %369, align 1
  %371 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %1 to <2 x i64>*
  %372 = load <2 x i64>, <2 x i64>* %371, align 8
  %373 = load i8*, i8** %285, align 8
  %374 = getelementptr inbounds i8, i8* %373, i64 16
  %375 = load i8*, i8** %288, align 8
  %376 = icmp ugt i8* %374, %375
  br i1 %376, label %377, label %412

377:                                              ; preds = %368
  %378 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %379 = bitcast i8** %378 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = ptrtoint i8* %375 to i64
  %382 = sub i64 %381, %380
  %383 = shl nsw i64 %382, 1
  %384 = add i64 %383, 16
  %385 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %386 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %385, align 8
  %387 = add i64 %383, 23
  %388 = and i64 %387, -8
  %389 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %386, i64 0, i32 2
  %390 = load i64, i64* %389, align 8
  %391 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %386, i64 0, i32 3
  %392 = load i64, i64* %391, align 8
  %393 = sub i64 %392, %390
  %394 = icmp ugt i64 %388, %393
  br i1 %394, label %395, label %397, !prof !2

395:                                              ; preds = %377
  %396 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %386, i64 %388) #9
  br label %399

397:                                              ; preds = %377
  %398 = add i64 %388, %390
  store i64 %398, i64* %389, align 8
  br label %399

399:                                              ; preds = %397, %395
  %400 = phi i64 [ %396, %395 ], [ %390, %397 ]
  %401 = inttoptr i64 %400 to i8*
  %402 = load i8*, i8** %378, align 8
  %403 = bitcast i8** %285 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = ptrtoint i8* %402 to i64
  %406 = sub i64 %404, %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %401, i8* align 1 %402, i64 %406, i1 false) #9
  %407 = load i64, i64* %403, align 8
  %408 = load i64, i64* %379, align 8
  %409 = sub i64 %407, %408
  %410 = getelementptr inbounds i8, i8* %401, i64 %409
  store i8* %410, i8** %285, align 8
  store i8* %401, i8** %378, align 8
  %411 = getelementptr inbounds i8, i8* %401, i64 %384
  store i8* %411, i8** %288, align 8
  br label %412

412:                                              ; preds = %368, %399
  %413 = phi i8* [ %373, %368 ], [ %410, %399 ]
  %414 = bitcast i8* %413 to <2 x i64>*
  store <2 x i64> %372, <2 x i64>* %414, align 1
  %415 = load i8*, i8** %285, align 8
  %416 = getelementptr inbounds i8, i8* %415, i64 16
  store i8* %416, i8** %285, align 8
  br label %1272

417:                                              ; preds = %3
  %418 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %419 = load i8*, i8** %418, align 8
  %420 = getelementptr inbounds i8, i8* %419, i64 1
  %421 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %422 = load i8*, i8** %421, align 8
  %423 = icmp ugt i8* %420, %422
  br i1 %423, label %424, label %459

424:                                              ; preds = %417
  %425 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %426 = bitcast i8** %425 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = ptrtoint i8* %422 to i64
  %429 = sub i64 %428, %427
  %430 = shl nsw i64 %429, 1
  %431 = or i64 %430, 1
  %432 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %433 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %432, align 8
  %434 = add i64 %431, 7
  %435 = and i64 %434, -8
  %436 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %433, i64 0, i32 2
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %433, i64 0, i32 3
  %439 = load i64, i64* %438, align 8
  %440 = sub i64 %439, %437
  %441 = icmp ugt i64 %435, %440
  br i1 %441, label %442, label %444, !prof !2

442:                                              ; preds = %424
  %443 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %433, i64 %435) #9
  br label %446

444:                                              ; preds = %424
  %445 = add i64 %435, %437
  store i64 %445, i64* %436, align 8
  br label %446

446:                                              ; preds = %444, %442
  %447 = phi i64 [ %443, %442 ], [ %437, %444 ]
  %448 = inttoptr i64 %447 to i8*
  %449 = load i8*, i8** %425, align 8
  %450 = bitcast i8** %418 to i64*
  %451 = load i64, i64* %450, align 8
  %452 = ptrtoint i8* %449 to i64
  %453 = sub i64 %451, %452
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %448, i8* align 1 %449, i64 %453, i1 false) #9
  %454 = load i64, i64* %450, align 8
  %455 = load i64, i64* %426, align 8
  %456 = sub i64 %454, %455
  %457 = getelementptr inbounds i8, i8* %448, i64 %456
  store i8* %457, i8** %418, align 8
  store i8* %448, i8** %425, align 8
  %458 = getelementptr inbounds i8, i8* %448, i64 %431
  store i8* %458, i8** %421, align 8
  br label %459

459:                                              ; preds = %417, %446
  %460 = phi i8* [ %419, %417 ], [ %457, %446 ]
  %461 = getelementptr inbounds i8, i8* %460, i64 1
  store i8* %461, i8** %418, align 8
  store i8 35, i8* %460, align 1
  %462 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %463 = load i64, i64* %462, align 8
  %464 = trunc i64 %463 to i32
  %465 = load i8*, i8** %418, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 5
  %467 = load i8*, i8** %421, align 8
  %468 = icmp ugt i8* %466, %467
  br i1 %468, label %469, label %504

469:                                              ; preds = %459
  %470 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %471 = bitcast i8** %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = ptrtoint i8* %467 to i64
  %474 = sub i64 %473, %472
  %475 = shl nsw i64 %474, 1
  %476 = add i64 %475, 5
  %477 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %478 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %477, align 8
  %479 = add i64 %475, 12
  %480 = and i64 %479, -8
  %481 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %478, i64 0, i32 2
  %482 = load i64, i64* %481, align 8
  %483 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %478, i64 0, i32 3
  %484 = load i64, i64* %483, align 8
  %485 = sub i64 %484, %482
  %486 = icmp ugt i64 %480, %485
  br i1 %486, label %487, label %489, !prof !2

487:                                              ; preds = %469
  %488 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %478, i64 %480) #9
  br label %491

489:                                              ; preds = %469
  %490 = add i64 %480, %482
  store i64 %490, i64* %481, align 8
  br label %491

491:                                              ; preds = %489, %487
  %492 = phi i64 [ %488, %487 ], [ %482, %489 ]
  %493 = inttoptr i64 %492 to i8*
  %494 = load i8*, i8** %470, align 8
  %495 = bitcast i8** %418 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = ptrtoint i8* %494 to i64
  %498 = sub i64 %496, %497
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %493, i8* align 1 %494, i64 %498, i1 false) #9
  %499 = load i64, i64* %495, align 8
  %500 = load i64, i64* %471, align 8
  %501 = sub i64 %499, %500
  %502 = getelementptr inbounds i8, i8* %493, i64 %501
  store i8* %502, i8** %418, align 8
  store i8* %493, i8** %470, align 8
  %503 = getelementptr inbounds i8, i8* %493, i64 %476
  store i8* %503, i8** %421, align 8
  br label %504

504:                                              ; preds = %491, %459
  %505 = phi i8* [ %465, %459 ], [ %502, %491 ]
  %506 = icmp ugt i32 %464, 127
  %507 = trunc i64 %463 to i8
  br i1 %506, label %508, label %520

508:                                              ; preds = %504, %508
  %509 = phi i8* [ %517, %508 ], [ %505, %504 ]
  %510 = phi i8 [ %516, %508 ], [ %507, %504 ]
  %511 = phi i32 [ %514, %508 ], [ %464, %504 ]
  %512 = or i8 %510, -128
  %513 = getelementptr inbounds i8, i8* %509, i64 1
  store i8* %513, i8** %418, align 8
  store i8 %512, i8* %509, align 1
  %514 = lshr i32 %511, 7
  %515 = icmp ugt i32 %511, 16383
  %516 = trunc i32 %514 to i8
  %517 = load i8*, i8** %418, align 8
  br i1 %515, label %508, label %518

518:                                              ; preds = %508
  %519 = trunc i32 %514 to i8
  br label %520

520:                                              ; preds = %518, %504
  %521 = phi i8* [ %505, %504 ], [ %517, %518 ]
  %522 = phi i8 [ %507, %504 ], [ %519, %518 ]
  %523 = and i8 %522, 127
  %524 = getelementptr inbounds i8, i8* %521, i64 1
  store i8* %524, i8** %418, align 8
  store i8 %523, i8* %521, align 1
  br label %1272

525:                                              ; preds = %3
  %526 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %527 = load i8*, i8** %526, align 8
  %528 = getelementptr inbounds i8, i8* %527, i64 1
  %529 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %530 = load i8*, i8** %529, align 8
  %531 = icmp ugt i8* %528, %530
  br i1 %531, label %532, label %567

532:                                              ; preds = %525
  %533 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %534 = bitcast i8** %533 to i64*
  %535 = load i64, i64* %534, align 8
  %536 = ptrtoint i8* %530 to i64
  %537 = sub i64 %536, %535
  %538 = shl nsw i64 %537, 1
  %539 = or i64 %538, 1
  %540 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %541 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %540, align 8
  %542 = add i64 %539, 7
  %543 = and i64 %542, -8
  %544 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %541, i64 0, i32 2
  %545 = load i64, i64* %544, align 8
  %546 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %541, i64 0, i32 3
  %547 = load i64, i64* %546, align 8
  %548 = sub i64 %547, %545
  %549 = icmp ugt i64 %543, %548
  br i1 %549, label %550, label %552, !prof !2

550:                                              ; preds = %532
  %551 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %541, i64 %543) #9
  br label %554

552:                                              ; preds = %532
  %553 = add i64 %543, %545
  store i64 %553, i64* %544, align 8
  br label %554

554:                                              ; preds = %552, %550
  %555 = phi i64 [ %551, %550 ], [ %545, %552 ]
  %556 = inttoptr i64 %555 to i8*
  %557 = load i8*, i8** %533, align 8
  %558 = bitcast i8** %526 to i64*
  %559 = load i64, i64* %558, align 8
  %560 = ptrtoint i8* %557 to i64
  %561 = sub i64 %559, %560
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %556, i8* align 1 %557, i64 %561, i1 false) #9
  %562 = load i64, i64* %558, align 8
  %563 = load i64, i64* %534, align 8
  %564 = sub i64 %562, %563
  %565 = getelementptr inbounds i8, i8* %556, i64 %564
  store i8* %565, i8** %526, align 8
  store i8* %556, i8** %533, align 8
  %566 = getelementptr inbounds i8, i8* %556, i64 %539
  store i8* %566, i8** %529, align 8
  br label %567

567:                                              ; preds = %525, %554
  %568 = phi i8* [ %527, %525 ], [ %565, %554 ]
  %569 = getelementptr inbounds i8, i8* %568, i64 1
  store i8* %569, i8** %526, align 8
  store i8 -48, i8* %568, align 1
  %570 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %571 = load i64, i64* %570, align 8
  %572 = trunc i64 %571 to i32
  %573 = add i32 %572, -1000000
  %574 = icmp ult i32 %573, 6
  br i1 %574, label %575, label %579

575:                                              ; preds = %567
  %576 = sext i32 %573 to i64
  %577 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table._ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE, i64 0, i64 %576
  %578 = load i32, i32* %577, align 4
  br label %579

579:                                              ; preds = %567, %575
  %580 = phi i32 [ %578, %575 ], [ %572, %567 ]
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %0, i32 %580)
  br label %1272

581:                                              ; preds = %3
  %582 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %583 = load i8*, i8** %582, align 8
  %584 = getelementptr inbounds i8, i8* %583, i64 1
  %585 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %586 = load i8*, i8** %585, align 8
  %587 = icmp ugt i8* %584, %586
  br i1 %587, label %588, label %623

588:                                              ; preds = %581
  %589 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %590 = bitcast i8** %589 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = ptrtoint i8* %586 to i64
  %593 = sub i64 %592, %591
  %594 = shl nsw i64 %593, 1
  %595 = or i64 %594, 1
  %596 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %597 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %596, align 8
  %598 = add i64 %595, 7
  %599 = and i64 %598, -8
  %600 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %597, i64 0, i32 2
  %601 = load i64, i64* %600, align 8
  %602 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %597, i64 0, i32 3
  %603 = load i64, i64* %602, align 8
  %604 = sub i64 %603, %601
  %605 = icmp ugt i64 %599, %604
  br i1 %605, label %606, label %608, !prof !2

606:                                              ; preds = %588
  %607 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %597, i64 %599) #9
  br label %610

608:                                              ; preds = %588
  %609 = add i64 %599, %601
  store i64 %609, i64* %600, align 8
  br label %610

610:                                              ; preds = %608, %606
  %611 = phi i64 [ %607, %606 ], [ %601, %608 ]
  %612 = inttoptr i64 %611 to i8*
  %613 = load i8*, i8** %589, align 8
  %614 = bitcast i8** %582 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = ptrtoint i8* %613 to i64
  %617 = sub i64 %615, %616
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %612, i8* align 1 %613, i64 %617, i1 false) #9
  %618 = load i64, i64* %614, align 8
  %619 = load i64, i64* %590, align 8
  %620 = sub i64 %618, %619
  %621 = getelementptr inbounds i8, i8* %612, i64 %620
  store i8* %621, i8** %582, align 8
  store i8* %612, i8** %589, align 8
  %622 = getelementptr inbounds i8, i8* %612, i64 %595
  store i8* %622, i8** %585, align 8
  br label %623

623:                                              ; preds = %581, %610
  %624 = phi i8* [ %583, %581 ], [ %621, %610 ]
  %625 = getelementptr inbounds i8, i8* %624, i64 1
  store i8* %625, i8** %582, align 8
  store i8 -46, i8* %624, align 1
  %626 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %627 = load i64, i64* %626, align 8
  %628 = trunc i64 %627 to i32
  %629 = load i8*, i8** %582, align 8
  %630 = getelementptr inbounds i8, i8* %629, i64 5
  %631 = load i8*, i8** %585, align 8
  %632 = icmp ugt i8* %630, %631
  br i1 %632, label %633, label %668

633:                                              ; preds = %623
  %634 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %635 = bitcast i8** %634 to i64*
  %636 = load i64, i64* %635, align 8
  %637 = ptrtoint i8* %631 to i64
  %638 = sub i64 %637, %636
  %639 = shl nsw i64 %638, 1
  %640 = add i64 %639, 5
  %641 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %642 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %641, align 8
  %643 = add i64 %639, 12
  %644 = and i64 %643, -8
  %645 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %642, i64 0, i32 2
  %646 = load i64, i64* %645, align 8
  %647 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %642, i64 0, i32 3
  %648 = load i64, i64* %647, align 8
  %649 = sub i64 %648, %646
  %650 = icmp ugt i64 %644, %649
  br i1 %650, label %651, label %653, !prof !2

651:                                              ; preds = %633
  %652 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %642, i64 %644) #9
  br label %655

653:                                              ; preds = %633
  %654 = add i64 %644, %646
  store i64 %654, i64* %645, align 8
  br label %655

655:                                              ; preds = %653, %651
  %656 = phi i64 [ %652, %651 ], [ %646, %653 ]
  %657 = inttoptr i64 %656 to i8*
  %658 = load i8*, i8** %634, align 8
  %659 = bitcast i8** %582 to i64*
  %660 = load i64, i64* %659, align 8
  %661 = ptrtoint i8* %658 to i64
  %662 = sub i64 %660, %661
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %658, i64 %662, i1 false) #9
  %663 = load i64, i64* %659, align 8
  %664 = load i64, i64* %635, align 8
  %665 = sub i64 %663, %664
  %666 = getelementptr inbounds i8, i8* %657, i64 %665
  store i8* %666, i8** %582, align 8
  store i8* %657, i8** %634, align 8
  %667 = getelementptr inbounds i8, i8* %657, i64 %640
  store i8* %667, i8** %585, align 8
  br label %668

668:                                              ; preds = %655, %623
  %669 = phi i8* [ %629, %623 ], [ %666, %655 ]
  %670 = icmp ugt i32 %628, 127
  %671 = trunc i64 %627 to i8
  br i1 %670, label %672, label %684

672:                                              ; preds = %668, %672
  %673 = phi i8* [ %681, %672 ], [ %669, %668 ]
  %674 = phi i8 [ %680, %672 ], [ %671, %668 ]
  %675 = phi i32 [ %678, %672 ], [ %628, %668 ]
  %676 = or i8 %674, -128
  %677 = getelementptr inbounds i8, i8* %673, i64 1
  store i8* %677, i8** %582, align 8
  store i8 %676, i8* %673, align 1
  %678 = lshr i32 %675, 7
  %679 = icmp ugt i32 %675, 16383
  %680 = trunc i32 %678 to i8
  %681 = load i8*, i8** %582, align 8
  br i1 %679, label %672, label %682

682:                                              ; preds = %672
  %683 = trunc i32 %678 to i8
  br label %684

684:                                              ; preds = %682, %668
  %685 = phi i8* [ %669, %668 ], [ %681, %682 ]
  %686 = phi i8 [ %671, %668 ], [ %683, %682 ]
  %687 = and i8 %686, 127
  %688 = getelementptr inbounds i8, i8* %685, i64 1
  store i8* %688, i8** %582, align 8
  store i8 %687, i8* %685, align 1
  br label %1272

689:                                              ; preds = %3
  %690 = trunc i32 %2 to i8
  %691 = and i8 %690, 31
  switch i8 %691, label %1272 [
    i8 1, label %692
    i8 2, label %779
    i8 3, label %866
    i8 4, label %955
    i8 11, label %1044
    i8 6, label %1089
    i8 7, label %1089
    i8 0, label %1089
    i8 5, label %1089
    i8 12, label %1089
    i8 10, label %1089
    i8 8, label %1089
    i8 9, label %1089
  ]

692:                                              ; preds = %689
  %693 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %694 = load i8*, i8** %693, align 8
  %695 = getelementptr inbounds i8, i8* %694, i64 1
  %696 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %697 = load i8*, i8** %696, align 8
  %698 = icmp ugt i8* %695, %697
  br i1 %698, label %699, label %734

699:                                              ; preds = %692
  %700 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %701 = bitcast i8** %700 to i64*
  %702 = load i64, i64* %701, align 8
  %703 = ptrtoint i8* %697 to i64
  %704 = sub i64 %703, %702
  %705 = shl nsw i64 %704, 1
  %706 = or i64 %705, 1
  %707 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %708 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %707, align 8
  %709 = add i64 %706, 7
  %710 = and i64 %709, -8
  %711 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %708, i64 0, i32 2
  %712 = load i64, i64* %711, align 8
  %713 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %708, i64 0, i32 3
  %714 = load i64, i64* %713, align 8
  %715 = sub i64 %714, %712
  %716 = icmp ugt i64 %710, %715
  br i1 %716, label %717, label %719, !prof !2

717:                                              ; preds = %699
  %718 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %708, i64 %710) #9
  br label %721

719:                                              ; preds = %699
  %720 = add i64 %710, %712
  store i64 %720, i64* %711, align 8
  br label %721

721:                                              ; preds = %719, %717
  %722 = phi i64 [ %718, %717 ], [ %712, %719 ]
  %723 = inttoptr i64 %722 to i8*
  %724 = load i8*, i8** %700, align 8
  %725 = bitcast i8** %693 to i64*
  %726 = load i64, i64* %725, align 8
  %727 = ptrtoint i8* %724 to i64
  %728 = sub i64 %726, %727
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %723, i8* align 1 %724, i64 %728, i1 false) #9
  %729 = load i64, i64* %725, align 8
  %730 = load i64, i64* %701, align 8
  %731 = sub i64 %729, %730
  %732 = getelementptr inbounds i8, i8* %723, i64 %731
  store i8* %732, i8** %693, align 8
  store i8* %723, i8** %700, align 8
  %733 = getelementptr inbounds i8, i8* %723, i64 %706
  store i8* %733, i8** %696, align 8
  br label %734

734:                                              ; preds = %692, %721
  %735 = phi i8* [ %694, %692 ], [ %732, %721 ]
  %736 = getelementptr inbounds i8, i8* %735, i64 1
  store i8* %736, i8** %693, align 8
  store i8 65, i8* %735, align 1
  %737 = load i8*, i8** %693, align 8
  %738 = getelementptr inbounds i8, i8* %737, i64 1
  %739 = load i8*, i8** %696, align 8
  %740 = icmp ugt i8* %738, %739
  br i1 %740, label %741, label %776

741:                                              ; preds = %734
  %742 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %743 = bitcast i8** %742 to i64*
  %744 = load i64, i64* %743, align 8
  %745 = ptrtoint i8* %739 to i64
  %746 = sub i64 %745, %744
  %747 = shl nsw i64 %746, 1
  %748 = or i64 %747, 1
  %749 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %750 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %749, align 8
  %751 = add i64 %748, 7
  %752 = and i64 %751, -8
  %753 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %750, i64 0, i32 2
  %754 = load i64, i64* %753, align 8
  %755 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %750, i64 0, i32 3
  %756 = load i64, i64* %755, align 8
  %757 = sub i64 %756, %754
  %758 = icmp ugt i64 %752, %757
  br i1 %758, label %759, label %761, !prof !2

759:                                              ; preds = %741
  %760 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %750, i64 %752) #9
  br label %763

761:                                              ; preds = %741
  %762 = add i64 %752, %754
  store i64 %762, i64* %753, align 8
  br label %763

763:                                              ; preds = %761, %759
  %764 = phi i64 [ %760, %759 ], [ %754, %761 ]
  %765 = inttoptr i64 %764 to i8*
  %766 = load i8*, i8** %742, align 8
  %767 = bitcast i8** %693 to i64*
  %768 = load i64, i64* %767, align 8
  %769 = ptrtoint i8* %766 to i64
  %770 = sub i64 %768, %769
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %765, i8* align 1 %766, i64 %770, i1 false) #9
  %771 = load i64, i64* %767, align 8
  %772 = load i64, i64* %743, align 8
  %773 = sub i64 %771, %772
  %774 = getelementptr inbounds i8, i8* %765, i64 %773
  store i8* %774, i8** %693, align 8
  store i8* %765, i8** %742, align 8
  %775 = getelementptr inbounds i8, i8* %765, i64 %748
  store i8* %775, i8** %696, align 8
  br label %776

776:                                              ; preds = %734, %763
  %777 = phi i8* [ %737, %734 ], [ %774, %763 ]
  %778 = getelementptr inbounds i8, i8* %777, i64 1
  store i8* %778, i8** %693, align 8
  store i8 0, i8* %777, align 1
  br label %1272

779:                                              ; preds = %689
  %780 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %781 = load i8*, i8** %780, align 8
  %782 = getelementptr inbounds i8, i8* %781, i64 1
  %783 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %784 = load i8*, i8** %783, align 8
  %785 = icmp ugt i8* %782, %784
  br i1 %785, label %786, label %821

786:                                              ; preds = %779
  %787 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %788 = bitcast i8** %787 to i64*
  %789 = load i64, i64* %788, align 8
  %790 = ptrtoint i8* %784 to i64
  %791 = sub i64 %790, %789
  %792 = shl nsw i64 %791, 1
  %793 = or i64 %792, 1
  %794 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %795 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %794, align 8
  %796 = add i64 %793, 7
  %797 = and i64 %796, -8
  %798 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %795, i64 0, i32 2
  %799 = load i64, i64* %798, align 8
  %800 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %795, i64 0, i32 3
  %801 = load i64, i64* %800, align 8
  %802 = sub i64 %801, %799
  %803 = icmp ugt i64 %797, %802
  br i1 %803, label %804, label %806, !prof !2

804:                                              ; preds = %786
  %805 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %795, i64 %797) #9
  br label %808

806:                                              ; preds = %786
  %807 = add i64 %797, %799
  store i64 %807, i64* %798, align 8
  br label %808

808:                                              ; preds = %806, %804
  %809 = phi i64 [ %805, %804 ], [ %799, %806 ]
  %810 = inttoptr i64 %809 to i8*
  %811 = load i8*, i8** %787, align 8
  %812 = bitcast i8** %780 to i64*
  %813 = load i64, i64* %812, align 8
  %814 = ptrtoint i8* %811 to i64
  %815 = sub i64 %813, %814
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %810, i8* align 1 %811, i64 %815, i1 false) #9
  %816 = load i64, i64* %812, align 8
  %817 = load i64, i64* %788, align 8
  %818 = sub i64 %816, %817
  %819 = getelementptr inbounds i8, i8* %810, i64 %818
  store i8* %819, i8** %780, align 8
  store i8* %810, i8** %787, align 8
  %820 = getelementptr inbounds i8, i8* %810, i64 %793
  store i8* %820, i8** %783, align 8
  br label %821

821:                                              ; preds = %779, %808
  %822 = phi i8* [ %781, %779 ], [ %819, %808 ]
  %823 = getelementptr inbounds i8, i8* %822, i64 1
  store i8* %823, i8** %780, align 8
  store i8 66, i8* %822, align 1
  %824 = load i8*, i8** %780, align 8
  %825 = getelementptr inbounds i8, i8* %824, i64 1
  %826 = load i8*, i8** %783, align 8
  %827 = icmp ugt i8* %825, %826
  br i1 %827, label %828, label %863

828:                                              ; preds = %821
  %829 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %830 = bitcast i8** %829 to i64*
  %831 = load i64, i64* %830, align 8
  %832 = ptrtoint i8* %826 to i64
  %833 = sub i64 %832, %831
  %834 = shl nsw i64 %833, 1
  %835 = or i64 %834, 1
  %836 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %837 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %836, align 8
  %838 = add i64 %835, 7
  %839 = and i64 %838, -8
  %840 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %837, i64 0, i32 2
  %841 = load i64, i64* %840, align 8
  %842 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %837, i64 0, i32 3
  %843 = load i64, i64* %842, align 8
  %844 = sub i64 %843, %841
  %845 = icmp ugt i64 %839, %844
  br i1 %845, label %846, label %848, !prof !2

846:                                              ; preds = %828
  %847 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %837, i64 %839) #9
  br label %850

848:                                              ; preds = %828
  %849 = add i64 %839, %841
  store i64 %849, i64* %840, align 8
  br label %850

850:                                              ; preds = %848, %846
  %851 = phi i64 [ %847, %846 ], [ %841, %848 ]
  %852 = inttoptr i64 %851 to i8*
  %853 = load i8*, i8** %829, align 8
  %854 = bitcast i8** %780 to i64*
  %855 = load i64, i64* %854, align 8
  %856 = ptrtoint i8* %853 to i64
  %857 = sub i64 %855, %856
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %852, i8* align 1 %853, i64 %857, i1 false) #9
  %858 = load i64, i64* %854, align 8
  %859 = load i64, i64* %830, align 8
  %860 = sub i64 %858, %859
  %861 = getelementptr inbounds i8, i8* %852, i64 %860
  store i8* %861, i8** %780, align 8
  store i8* %852, i8** %829, align 8
  %862 = getelementptr inbounds i8, i8* %852, i64 %835
  store i8* %862, i8** %783, align 8
  br label %863

863:                                              ; preds = %821, %850
  %864 = phi i8* [ %824, %821 ], [ %861, %850 ]
  %865 = getelementptr inbounds i8, i8* %864, i64 1
  store i8* %865, i8** %780, align 8
  store i8 0, i8* %864, align 1
  br label %1272

866:                                              ; preds = %689
  %867 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %868 = load i8*, i8** %867, align 8
  %869 = getelementptr inbounds i8, i8* %868, i64 1
  %870 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %871 = load i8*, i8** %870, align 8
  %872 = icmp ugt i8* %869, %871
  br i1 %872, label %873, label %908

873:                                              ; preds = %866
  %874 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %875 = bitcast i8** %874 to i64*
  %876 = load i64, i64* %875, align 8
  %877 = ptrtoint i8* %871 to i64
  %878 = sub i64 %877, %876
  %879 = shl nsw i64 %878, 1
  %880 = or i64 %879, 1
  %881 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %882 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %881, align 8
  %883 = add i64 %880, 7
  %884 = and i64 %883, -8
  %885 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %882, i64 0, i32 2
  %886 = load i64, i64* %885, align 8
  %887 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %882, i64 0, i32 3
  %888 = load i64, i64* %887, align 8
  %889 = sub i64 %888, %886
  %890 = icmp ugt i64 %884, %889
  br i1 %890, label %891, label %893, !prof !2

891:                                              ; preds = %873
  %892 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %882, i64 %884) #9
  br label %895

893:                                              ; preds = %873
  %894 = add i64 %884, %886
  store i64 %894, i64* %885, align 8
  br label %895

895:                                              ; preds = %893, %891
  %896 = phi i64 [ %892, %891 ], [ %886, %893 ]
  %897 = inttoptr i64 %896 to i8*
  %898 = load i8*, i8** %874, align 8
  %899 = bitcast i8** %867 to i64*
  %900 = load i64, i64* %899, align 8
  %901 = ptrtoint i8* %898 to i64
  %902 = sub i64 %900, %901
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %897, i8* align 1 %898, i64 %902, i1 false) #9
  %903 = load i64, i64* %899, align 8
  %904 = load i64, i64* %875, align 8
  %905 = sub i64 %903, %904
  %906 = getelementptr inbounds i8, i8* %897, i64 %905
  store i8* %906, i8** %867, align 8
  store i8* %897, i8** %874, align 8
  %907 = getelementptr inbounds i8, i8* %897, i64 %880
  store i8* %907, i8** %870, align 8
  br label %908

908:                                              ; preds = %866, %895
  %909 = phi i8* [ %868, %866 ], [ %906, %895 ]
  %910 = getelementptr inbounds i8, i8* %909, i64 1
  store i8* %910, i8** %867, align 8
  store i8 67, i8* %909, align 1
  %911 = load i8*, i8** %867, align 8
  %912 = getelementptr inbounds i8, i8* %911, i64 4
  %913 = load i8*, i8** %870, align 8
  %914 = icmp ugt i8* %912, %913
  br i1 %914, label %915, label %950

915:                                              ; preds = %908
  %916 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %917 = bitcast i8** %916 to i64*
  %918 = load i64, i64* %917, align 8
  %919 = ptrtoint i8* %913 to i64
  %920 = sub i64 %919, %918
  %921 = shl nsw i64 %920, 1
  %922 = add i64 %921, 4
  %923 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %924 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %923, align 8
  %925 = add i64 %921, 11
  %926 = and i64 %925, -8
  %927 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %924, i64 0, i32 2
  %928 = load i64, i64* %927, align 8
  %929 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %924, i64 0, i32 3
  %930 = load i64, i64* %929, align 8
  %931 = sub i64 %930, %928
  %932 = icmp ugt i64 %926, %931
  br i1 %932, label %933, label %935, !prof !2

933:                                              ; preds = %915
  %934 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %924, i64 %926) #9
  br label %937

935:                                              ; preds = %915
  %936 = add i64 %926, %928
  store i64 %936, i64* %927, align 8
  br label %937

937:                                              ; preds = %935, %933
  %938 = phi i64 [ %934, %933 ], [ %928, %935 ]
  %939 = inttoptr i64 %938 to i8*
  %940 = load i8*, i8** %916, align 8
  %941 = bitcast i8** %867 to i64*
  %942 = load i64, i64* %941, align 8
  %943 = ptrtoint i8* %940 to i64
  %944 = sub i64 %942, %943
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %939, i8* align 1 %940, i64 %944, i1 false) #9
  %945 = load i64, i64* %941, align 8
  %946 = load i64, i64* %917, align 8
  %947 = sub i64 %945, %946
  %948 = getelementptr inbounds i8, i8* %939, i64 %947
  store i8* %948, i8** %867, align 8
  store i8* %939, i8** %916, align 8
  %949 = getelementptr inbounds i8, i8* %939, i64 %922
  store i8* %949, i8** %870, align 8
  br label %950

950:                                              ; preds = %908, %937
  %951 = phi i8* [ %911, %908 ], [ %948, %937 ]
  %952 = bitcast i8* %951 to float*
  store float 0.000000e+00, float* %952, align 1
  %953 = load i8*, i8** %867, align 8
  %954 = getelementptr inbounds i8, i8* %953, i64 4
  store i8* %954, i8** %867, align 8
  br label %1272

955:                                              ; preds = %689
  %956 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %957 = load i8*, i8** %956, align 8
  %958 = getelementptr inbounds i8, i8* %957, i64 1
  %959 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %960 = load i8*, i8** %959, align 8
  %961 = icmp ugt i8* %958, %960
  br i1 %961, label %962, label %997

962:                                              ; preds = %955
  %963 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %964 = bitcast i8** %963 to i64*
  %965 = load i64, i64* %964, align 8
  %966 = ptrtoint i8* %960 to i64
  %967 = sub i64 %966, %965
  %968 = shl nsw i64 %967, 1
  %969 = or i64 %968, 1
  %970 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %971 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %970, align 8
  %972 = add i64 %969, 7
  %973 = and i64 %972, -8
  %974 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %971, i64 0, i32 2
  %975 = load i64, i64* %974, align 8
  %976 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %971, i64 0, i32 3
  %977 = load i64, i64* %976, align 8
  %978 = sub i64 %977, %975
  %979 = icmp ugt i64 %973, %978
  br i1 %979, label %980, label %982, !prof !2

980:                                              ; preds = %962
  %981 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %971, i64 %973) #9
  br label %984

982:                                              ; preds = %962
  %983 = add i64 %973, %975
  store i64 %983, i64* %974, align 8
  br label %984

984:                                              ; preds = %982, %980
  %985 = phi i64 [ %981, %980 ], [ %975, %982 ]
  %986 = inttoptr i64 %985 to i8*
  %987 = load i8*, i8** %963, align 8
  %988 = bitcast i8** %956 to i64*
  %989 = load i64, i64* %988, align 8
  %990 = ptrtoint i8* %987 to i64
  %991 = sub i64 %989, %990
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %986, i8* align 1 %987, i64 %991, i1 false) #9
  %992 = load i64, i64* %988, align 8
  %993 = load i64, i64* %964, align 8
  %994 = sub i64 %992, %993
  %995 = getelementptr inbounds i8, i8* %986, i64 %994
  store i8* %995, i8** %956, align 8
  store i8* %986, i8** %963, align 8
  %996 = getelementptr inbounds i8, i8* %986, i64 %969
  store i8* %996, i8** %959, align 8
  br label %997

997:                                              ; preds = %955, %984
  %998 = phi i8* [ %957, %955 ], [ %995, %984 ]
  %999 = getelementptr inbounds i8, i8* %998, i64 1
  store i8* %999, i8** %956, align 8
  store i8 68, i8* %998, align 1
  %1000 = load i8*, i8** %956, align 8
  %1001 = getelementptr inbounds i8, i8* %1000, i64 8
  %1002 = load i8*, i8** %959, align 8
  %1003 = icmp ugt i8* %1001, %1002
  br i1 %1003, label %1004, label %1039

1004:                                             ; preds = %997
  %1005 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1006 = bitcast i8** %1005 to i64*
  %1007 = load i64, i64* %1006, align 8
  %1008 = ptrtoint i8* %1002 to i64
  %1009 = sub i64 %1008, %1007
  %1010 = shl nsw i64 %1009, 1
  %1011 = add i64 %1010, 8
  %1012 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1013 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1012, align 8
  %1014 = add i64 %1010, 15
  %1015 = and i64 %1014, -8
  %1016 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1013, i64 0, i32 2
  %1017 = load i64, i64* %1016, align 8
  %1018 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1013, i64 0, i32 3
  %1019 = load i64, i64* %1018, align 8
  %1020 = sub i64 %1019, %1017
  %1021 = icmp ugt i64 %1015, %1020
  br i1 %1021, label %1022, label %1024, !prof !2

1022:                                             ; preds = %1004
  %1023 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1013, i64 %1015) #9
  br label %1026

1024:                                             ; preds = %1004
  %1025 = add i64 %1015, %1017
  store i64 %1025, i64* %1016, align 8
  br label %1026

1026:                                             ; preds = %1024, %1022
  %1027 = phi i64 [ %1023, %1022 ], [ %1017, %1024 ]
  %1028 = inttoptr i64 %1027 to i8*
  %1029 = load i8*, i8** %1005, align 8
  %1030 = bitcast i8** %956 to i64*
  %1031 = load i64, i64* %1030, align 8
  %1032 = ptrtoint i8* %1029 to i64
  %1033 = sub i64 %1031, %1032
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1028, i8* align 1 %1029, i64 %1033, i1 false) #9
  %1034 = load i64, i64* %1030, align 8
  %1035 = load i64, i64* %1006, align 8
  %1036 = sub i64 %1034, %1035
  %1037 = getelementptr inbounds i8, i8* %1028, i64 %1036
  store i8* %1037, i8** %956, align 8
  store i8* %1028, i8** %1005, align 8
  %1038 = getelementptr inbounds i8, i8* %1028, i64 %1011
  store i8* %1038, i8** %959, align 8
  br label %1039

1039:                                             ; preds = %997, %1026
  %1040 = phi i8* [ %1000, %997 ], [ %1037, %1026 ]
  %1041 = bitcast i8* %1040 to double*
  store double 0.000000e+00, double* %1041, align 1
  %1042 = load i8*, i8** %956, align 8
  %1043 = getelementptr inbounds i8, i8* %1042, i64 8
  store i8* %1043, i8** %956, align 8
  br label %1272

1044:                                             ; preds = %689
  %1045 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %1046 = load i8*, i8** %1045, align 8
  %1047 = getelementptr inbounds i8, i8* %1046, i64 1
  %1048 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %1049 = load i8*, i8** %1048, align 8
  %1050 = icmp ugt i8* %1047, %1049
  br i1 %1050, label %1051, label %1086

1051:                                             ; preds = %1044
  %1052 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1053 = bitcast i8** %1052 to i64*
  %1054 = load i64, i64* %1053, align 8
  %1055 = ptrtoint i8* %1049 to i64
  %1056 = sub i64 %1055, %1054
  %1057 = shl nsw i64 %1056, 1
  %1058 = or i64 %1057, 1
  %1059 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1060 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1059, align 8
  %1061 = add i64 %1058, 7
  %1062 = and i64 %1061, -8
  %1063 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1060, i64 0, i32 2
  %1064 = load i64, i64* %1063, align 8
  %1065 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1060, i64 0, i32 3
  %1066 = load i64, i64* %1065, align 8
  %1067 = sub i64 %1066, %1064
  %1068 = icmp ugt i64 %1062, %1067
  br i1 %1068, label %1069, label %1071, !prof !2

1069:                                             ; preds = %1051
  %1070 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1060, i64 %1062) #9
  br label %1073

1071:                                             ; preds = %1051
  %1072 = add i64 %1062, %1064
  store i64 %1072, i64* %1063, align 8
  br label %1073

1073:                                             ; preds = %1071, %1069
  %1074 = phi i64 [ %1070, %1069 ], [ %1064, %1071 ]
  %1075 = inttoptr i64 %1074 to i8*
  %1076 = load i8*, i8** %1052, align 8
  %1077 = bitcast i8** %1045 to i64*
  %1078 = load i64, i64* %1077, align 8
  %1079 = ptrtoint i8* %1076 to i64
  %1080 = sub i64 %1078, %1079
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1075, i8* align 1 %1076, i64 %1080, i1 false) #9
  %1081 = load i64, i64* %1077, align 8
  %1082 = load i64, i64* %1053, align 8
  %1083 = sub i64 %1081, %1082
  %1084 = getelementptr inbounds i8, i8* %1075, i64 %1083
  store i8* %1084, i8** %1045, align 8
  store i8* %1075, i8** %1052, align 8
  %1085 = getelementptr inbounds i8, i8* %1075, i64 %1058
  store i8* %1085, i8** %1048, align 8
  br label %1086

1086:                                             ; preds = %1044, %1073
  %1087 = phi i8* [ %1046, %1044 ], [ %1084, %1073 ]
  %1088 = getelementptr inbounds i8, i8* %1087, i64 1
  store i8* %1088, i8** %1045, align 8
  store i8 -48, i8* %1087, align 1
  br label %1272

1089:                                             ; preds = %689, %689, %689, %689, %689, %689, %689, %689
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #10
  unreachable

1090:                                             ; preds = %3
  %1091 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %1092 = load i8*, i8** %1091, align 8
  %1093 = getelementptr inbounds i8, i8* %1092, i64 1
  %1094 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %1095 = load i8*, i8** %1094, align 8
  %1096 = icmp ugt i8* %1093, %1095
  br i1 %1096, label %1097, label %1132

1097:                                             ; preds = %1090
  %1098 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1099 = bitcast i8** %1098 to i64*
  %1100 = load i64, i64* %1099, align 8
  %1101 = ptrtoint i8* %1095 to i64
  %1102 = sub i64 %1101, %1100
  %1103 = shl nsw i64 %1102, 1
  %1104 = or i64 %1103, 1
  %1105 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1106 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1105, align 8
  %1107 = add i64 %1104, 7
  %1108 = and i64 %1107, -8
  %1109 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1106, i64 0, i32 2
  %1110 = load i64, i64* %1109, align 8
  %1111 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1106, i64 0, i32 3
  %1112 = load i64, i64* %1111, align 8
  %1113 = sub i64 %1112, %1110
  %1114 = icmp ugt i64 %1108, %1113
  br i1 %1114, label %1115, label %1117, !prof !2

1115:                                             ; preds = %1097
  %1116 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1106, i64 %1108) #9
  br label %1119

1117:                                             ; preds = %1097
  %1118 = add i64 %1108, %1110
  store i64 %1118, i64* %1109, align 8
  br label %1119

1119:                                             ; preds = %1117, %1115
  %1120 = phi i64 [ %1116, %1115 ], [ %1110, %1117 ]
  %1121 = inttoptr i64 %1120 to i8*
  %1122 = load i8*, i8** %1098, align 8
  %1123 = bitcast i8** %1091 to i64*
  %1124 = load i64, i64* %1123, align 8
  %1125 = ptrtoint i8* %1122 to i64
  %1126 = sub i64 %1124, %1125
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1121, i8* align 1 %1122, i64 %1126, i1 false) #9
  %1127 = load i64, i64* %1123, align 8
  %1128 = load i64, i64* %1099, align 8
  %1129 = sub i64 %1127, %1128
  %1130 = getelementptr inbounds i8, i8* %1121, i64 %1129
  store i8* %1130, i8** %1091, align 8
  store i8* %1121, i8** %1098, align 8
  %1131 = getelementptr inbounds i8, i8* %1121, i64 %1104
  store i8* %1131, i8** %1094, align 8
  br label %1132

1132:                                             ; preds = %1090, %1119
  %1133 = phi i8* [ %1092, %1090 ], [ %1130, %1119 ]
  %1134 = getelementptr inbounds i8, i8* %1133, i64 1
  store i8* %1134, i8** %1091, align 8
  store i8 -5, i8* %1133, align 1
  %1135 = load i8*, i8** %1091, align 8
  %1136 = getelementptr inbounds i8, i8* %1135, i64 1
  %1137 = load i8*, i8** %1094, align 8
  %1138 = icmp ugt i8* %1136, %1137
  br i1 %1138, label %1139, label %1174

1139:                                             ; preds = %1132
  %1140 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1141 = bitcast i8** %1140 to i64*
  %1142 = load i64, i64* %1141, align 8
  %1143 = ptrtoint i8* %1137 to i64
  %1144 = sub i64 %1143, %1142
  %1145 = shl nsw i64 %1144, 1
  %1146 = or i64 %1145, 1
  %1147 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1148 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1147, align 8
  %1149 = add i64 %1146, 7
  %1150 = and i64 %1149, -8
  %1151 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1148, i64 0, i32 2
  %1152 = load i64, i64* %1151, align 8
  %1153 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1148, i64 0, i32 3
  %1154 = load i64, i64* %1153, align 8
  %1155 = sub i64 %1154, %1152
  %1156 = icmp ugt i64 %1150, %1155
  br i1 %1156, label %1157, label %1159, !prof !2

1157:                                             ; preds = %1139
  %1158 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1148, i64 %1150) #9
  br label %1161

1159:                                             ; preds = %1139
  %1160 = add i64 %1150, %1152
  store i64 %1160, i64* %1151, align 8
  br label %1161

1161:                                             ; preds = %1159, %1157
  %1162 = phi i64 [ %1158, %1157 ], [ %1152, %1159 ]
  %1163 = inttoptr i64 %1162 to i8*
  %1164 = load i8*, i8** %1140, align 8
  %1165 = bitcast i8** %1091 to i64*
  %1166 = load i64, i64* %1165, align 8
  %1167 = ptrtoint i8* %1164 to i64
  %1168 = sub i64 %1166, %1167
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1163, i8* align 1 %1164, i64 %1168, i1 false) #9
  %1169 = load i64, i64* %1165, align 8
  %1170 = load i64, i64* %1141, align 8
  %1171 = sub i64 %1169, %1170
  %1172 = getelementptr inbounds i8, i8* %1163, i64 %1171
  store i8* %1172, i8** %1091, align 8
  store i8* %1163, i8** %1140, align 8
  %1173 = getelementptr inbounds i8, i8* %1163, i64 %1146
  store i8* %1173, i8** %1094, align 8
  br label %1174

1174:                                             ; preds = %1132, %1161
  %1175 = phi i8* [ %1135, %1132 ], [ %1172, %1161 ]
  %1176 = getelementptr inbounds i8, i8* %1175, i64 1
  store i8* %1176, i8** %1091, align 8
  store i8 48, i8* %1175, align 1
  %1177 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %1178 = load i64, i64* %1177, align 8
  %1179 = trunc i64 %1178 to i32
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %0, i32 %1179)
  br label %1272

1180:                                             ; preds = %3
  %1181 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %1182 = load %"class.v8::internal::wasm::WasmInitExpr"*, %"class.v8::internal::wasm::WasmInitExpr"** %1181, align 8
  tail call fastcc void @_ZN2v88internal4wasm12_GLOBAL__N_126WriteInitializerExpressionEPNS1_10ZoneBufferERKNS1_12WasmInitExprENS1_9ValueTypeE(%"class.v8::internal::wasm::ZoneBuffer"* %0, %"class.v8::internal::wasm::WasmInitExpr"* dereferenceable(32) %1182, i32 12)
  %1183 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 2
  %1184 = load i8*, i8** %1183, align 8
  %1185 = getelementptr inbounds i8, i8* %1184, i64 1
  %1186 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 3
  %1187 = load i8*, i8** %1186, align 8
  %1188 = icmp ugt i8* %1185, %1187
  br i1 %1188, label %1189, label %1224

1189:                                             ; preds = %1180
  %1190 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1191 = bitcast i8** %1190 to i64*
  %1192 = load i64, i64* %1191, align 8
  %1193 = ptrtoint i8* %1187 to i64
  %1194 = sub i64 %1193, %1192
  %1195 = shl nsw i64 %1194, 1
  %1196 = or i64 %1195, 1
  %1197 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1198 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1197, align 8
  %1199 = add i64 %1196, 7
  %1200 = and i64 %1199, -8
  %1201 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1198, i64 0, i32 2
  %1202 = load i64, i64* %1201, align 8
  %1203 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1198, i64 0, i32 3
  %1204 = load i64, i64* %1203, align 8
  %1205 = sub i64 %1204, %1202
  %1206 = icmp ugt i64 %1200, %1205
  br i1 %1206, label %1207, label %1209, !prof !2

1207:                                             ; preds = %1189
  %1208 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1198, i64 %1200) #9
  br label %1211

1209:                                             ; preds = %1189
  %1210 = add i64 %1200, %1202
  store i64 %1210, i64* %1201, align 8
  br label %1211

1211:                                             ; preds = %1209, %1207
  %1212 = phi i64 [ %1208, %1207 ], [ %1202, %1209 ]
  %1213 = inttoptr i64 %1212 to i8*
  %1214 = load i8*, i8** %1190, align 8
  %1215 = bitcast i8** %1183 to i64*
  %1216 = load i64, i64* %1215, align 8
  %1217 = ptrtoint i8* %1214 to i64
  %1218 = sub i64 %1216, %1217
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1213, i8* align 1 %1214, i64 %1218, i1 false) #9
  %1219 = load i64, i64* %1215, align 8
  %1220 = load i64, i64* %1191, align 8
  %1221 = sub i64 %1219, %1220
  %1222 = getelementptr inbounds i8, i8* %1213, i64 %1221
  store i8* %1222, i8** %1183, align 8
  store i8* %1213, i8** %1190, align 8
  %1223 = getelementptr inbounds i8, i8* %1213, i64 %1196
  store i8* %1223, i8** %1186, align 8
  br label %1224

1224:                                             ; preds = %1180, %1211
  %1225 = phi i8* [ %1184, %1180 ], [ %1222, %1211 ]
  %1226 = getelementptr inbounds i8, i8* %1225, i64 1
  store i8* %1226, i8** %1183, align 8
  store i8 -5, i8* %1225, align 1
  %1227 = load i8*, i8** %1183, align 8
  %1228 = getelementptr inbounds i8, i8* %1227, i64 1
  %1229 = load i8*, i8** %1186, align 8
  %1230 = icmp ugt i8* %1228, %1229
  br i1 %1230, label %1231, label %1266

1231:                                             ; preds = %1224
  %1232 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 1
  %1233 = bitcast i8** %1232 to i64*
  %1234 = load i64, i64* %1233, align 8
  %1235 = ptrtoint i8* %1229 to i64
  %1236 = sub i64 %1235, %1234
  %1237 = shl nsw i64 %1236, 1
  %1238 = or i64 %1237, 1
  %1239 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %0, i64 0, i32 0
  %1240 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1239, align 8
  %1241 = add i64 %1238, 7
  %1242 = and i64 %1241, -8
  %1243 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1240, i64 0, i32 2
  %1244 = load i64, i64* %1243, align 8
  %1245 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1240, i64 0, i32 3
  %1246 = load i64, i64* %1245, align 8
  %1247 = sub i64 %1246, %1244
  %1248 = icmp ugt i64 %1242, %1247
  br i1 %1248, label %1249, label %1251, !prof !2

1249:                                             ; preds = %1231
  %1250 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1240, i64 %1242) #9
  br label %1253

1251:                                             ; preds = %1231
  %1252 = add i64 %1242, %1244
  store i64 %1252, i64* %1243, align 8
  br label %1253

1253:                                             ; preds = %1251, %1249
  %1254 = phi i64 [ %1250, %1249 ], [ %1244, %1251 ]
  %1255 = inttoptr i64 %1254 to i8*
  %1256 = load i8*, i8** %1232, align 8
  %1257 = bitcast i8** %1183 to i64*
  %1258 = load i64, i64* %1257, align 8
  %1259 = ptrtoint i8* %1256 to i64
  %1260 = sub i64 %1258, %1259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1255, i8* align 1 %1256, i64 %1260, i1 false) #9
  %1261 = load i64, i64* %1257, align 8
  %1262 = load i64, i64* %1233, align 8
  %1263 = sub i64 %1261, %1262
  %1264 = getelementptr inbounds i8, i8* %1255, i64 %1263
  store i8* %1264, i8** %1183, align 8
  store i8* %1255, i8** %1232, align 8
  %1265 = getelementptr inbounds i8, i8* %1255, i64 %1238
  store i8* %1265, i8** %1186, align 8
  br label %1266

1266:                                             ; preds = %1224, %1253
  %1267 = phi i8* [ %1227, %1224 ], [ %1264, %1253 ]
  %1268 = getelementptr inbounds i8, i8* %1267, i64 1
  store i8* %1268, i8** %1183, align 8
  store i8 49, i8* %1267, align 1
  %1269 = getelementptr inbounds %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WasmInitExpr"* %1, i64 0, i32 0, i32 0
  %1270 = load i64, i64* %1269, align 8
  %1271 = trunc i64 %1270 to i32
  tail call void @_ZN2v88internal4wasm10ZoneBuffer10write_i32vEi(%"class.v8::internal::wasm::ZoneBuffer"* %0, i32 %1271)
  br label %1272

1272:                                             ; preds = %776, %863, %950, %1039, %1086, %689, %3, %1266, %1174, %684, %579, %520, %412, %279, %188, %96, %48
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm17WasmModuleBuilder21WriteAsmJsOffsetTableEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmModuleBuilder"* nocapture readonly, %"class.v8::internal::wasm::ZoneBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::wasm::WasmModuleBuilder", %"class.v8::internal::wasm::WasmModuleBuilder"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = bitcast %"class.v8::internal::wasm::WasmFunctionBuilder"*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.43"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 5
  %14 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %13, %15
  br i1 %16, label %17, label %52

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 1
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = ptrtoint i8* %15 to i64
  %22 = sub i64 %21, %20
  %23 = shl nsw i64 %22, 1
  %24 = add i64 %23, 5
  %25 = getelementptr inbounds %"class.v8::internal::wasm::ZoneBuffer", %"class.v8::internal::wasm::ZoneBuffer"* %1, i64 0, i32 0
  %26 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %25, align 8
  %27 = add i64 %23, 12
  %28 = and i64 %27, -8
  %29 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %30
  %34 = icmp ugt i64 %28, %33
  br i1 %34, label %35, label %37, !prof !2

35:                                               ; preds = %17
  %36 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %26, i64 %28) #9
  br label %39

37:                                               ; preds = %17
  %38 = add i64 %28, %30
  store i64 %38, i64* %29, align 8
  br label %39

39:                                               ; preds = %37, %35
  %40 = phi i64 [ %36, %35 ], [ %30, %37 ]
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8*, i8** %18, align 8
  %43 = bitcast i8** %11 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = ptrtoint i8* %42 to i64
  %46 = sub i64 %44, %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %42, i64 %46, i1 false) #9
  %47 = load i64, i64* %43, align 8
  %48 = load i64, i64* %19, align 8
  %49 = sub i64 %47, %48
  %50 = getelementptr inbounds i8, i8* %41, i64 %49
  store i8* %50, i8** %11, align 8
  store i8* %41, i8** %18, align 8
  %51 = getelementptr inbounds i8, i8* %41, i64 %24
  store i8* %51, i8** %14, align 8
  br label %52

52:                                               ; preds = %39, %2
  %53 = phi i8* [ %12, %2 ], [ %50, %39 ]
  %54 = trunc i64 %10 to i32
  %55 = icmp ugt i32 %54, 127
  %56 = trunc i64 %10 to i8
  br i1 %55, label %57, label %69

57:                                               ; preds = %52, %57
  %58 = phi i8* [ %66, %57 ], [ %53, %52 ]
  %59 = phi i8 [ %65, %57 ], [ %56, %52 ]
  %60 = phi i32 [ %63, %57 ], [ %54, %52 ]
  %61 = or i8 %59, -128
  %62 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %62, i8** %11, align 8
  store i8 %61, i8* %58, align 1
  %63 = lshr i32 %60, 7
  %64 = icmp ugt i32 %60, 16383
  %65 = trunc i32 %63 to i8
  %66 = load i8*, i8** %11, align 8
  br i1 %64, label %57, label %67

67:                                               ; preds = %57
  %68 = trunc i32 %63 to i8
  br label %69

69:                                               ; preds = %67, %52
  %70 = phi i8* [ %53, %52 ], [ %66, %67 ]
  %71 = phi i8 [ %56, %52 ], [ %68, %67 ]
  %72 = and i8 %71, 127
  %73 = getelementptr inbounds i8, i8* %70, i64 1
  store i8* %73, i8** %11, align 8
  store i8 %72, i8* %70, align 1
  %74 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %3, i64 0, i32 0, i32 0
  %75 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %74, align 8
  %76 = load %"class.v8::internal::wasm::WasmFunctionBuilder"**, %"class.v8::internal::wasm::WasmFunctionBuilder"*** %4, align 8
  %77 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %75, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %79, %69
  ret void

79:                                               ; preds = %69, %79
  %80 = phi %"class.v8::internal::wasm::WasmFunctionBuilder"** [ %82, %79 ], [ %75, %69 ]
  %81 = load %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %80, align 8
  tail call void @_ZNK2v88internal4wasm19WasmFunctionBuilder23WriteAsmWasmOffsetTableEPNS1_10ZoneBufferE(%"class.v8::internal::wasm::WasmFunctionBuilder"* %81, %"class.v8::internal::wasm::ZoneBuffer"* %1)
  %82 = getelementptr inbounds %"class.v8::internal::wasm::WasmFunctionBuilder"*, %"class.v8::internal::wasm::WasmFunctionBuilder"** %80, i64 1
  %83 = icmp eq %"class.v8::internal::wasm::WasmFunctionBuilder"** %82, %76
  br i1 %83, label %78, label %79
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !6
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #9
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #9, !range !6
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #9
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #9, !range !6
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #9
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %264, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = shl i64 %1, 3
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  %13 = icmp ugt i64 %7, %12
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %4
  %15 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %7) #9
  br label %18

16:                                               ; preds = %4
  %17 = add i64 %9, %7
  store i64 %17, i64* %8, align 8
  br label %18

18:                                               ; preds = %16, %14
  %19 = phi i64 [ %15, %14 ], [ %9, %16 ]
  %20 = inttoptr i64 %19 to %"struct.std::__1::__hash_node_base"**
  %21 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base"** %20, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %22, align 8
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %20, align 8
  %23 = icmp eq i64 %1, 1
  br i1 %23, label %42, label %24

24:                                               ; preds = %18
  %25 = add i64 %1, -1
  %26 = add i64 %1, -2
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub i64 %25, %27
  br label %47

31:                                               ; preds = %47, %24
  %32 = phi i64 [ 1, %24 ], [ %61, %47 ]
  %33 = icmp eq i64 %27, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %31, %34
  %35 = phi i64 [ %39, %34 ], [ %32, %31 ]
  %36 = phi i64 [ %40, %34 ], [ %27, %31 ]
  %37 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %38 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, i64 %35
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %38, align 8
  %39 = add nuw i64 %35, 1
  %40 = add i64 %36, -1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %34, !llvm.loop !43

42:                                               ; preds = %31, %34, %18
  %43 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %43, i64 0, i32 0
  %45 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %44, align 8
  %46 = icmp eq %"struct.std::__1::__hash_node_base"* %45, null
  br i1 %46, label %266, label %64

47:                                               ; preds = %47, %29
  %48 = phi i64 [ 1, %29 ], [ %61, %47 ]
  %49 = phi i64 [ %30, %29 ], [ %62, %47 ]
  %50 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %51 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %50, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %51, align 8
  %52 = add nuw nsw i64 %48, 1
  %53 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %54 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %53, i64 %52
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %54, align 8
  %55 = add nuw nsw i64 %48, 2
  %56 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %57 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %56, i64 %55
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %57, align 8
  %58 = add nuw i64 %48, 3
  %59 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %60 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %59, i64 %58
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %60, align 8
  %61 = add nuw i64 %48, 4
  %62 = add i64 %49, -4
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %31, label %47

64:                                               ; preds = %42
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 1
  %66 = bitcast %"struct.std::__1::__hash_node_base"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = tail call i64 @llvm.ctpop.i64(i64 %1) #9, !range !6
  %69 = icmp ugt i64 %68, 1
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = add i64 %1, -1
  %72 = and i64 %67, %71
  br label %77

73:                                               ; preds = %64
  %74 = icmp ult i64 %67, %1
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = urem i64 %67, %1
  br label %77

77:                                               ; preds = %70, %73, %75
  %78 = phi i64 [ %72, %70 ], [ %76, %75 ], [ %67, %73 ]
  %79 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %79, i64 %78
  store %"struct.std::__1::__hash_node_base"* %43, %"struct.std::__1::__hash_node_base"** %80, align 8
  %81 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 0, i32 0
  %82 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %81, align 8
  %83 = icmp eq %"struct.std::__1::__hash_node_base"* %82, null
  br i1 %83, label %266, label %84

84:                                               ; preds = %77
  %85 = add i64 %1, -1
  br i1 %69, label %86, label %177

86:                                               ; preds = %84, %160
  %87 = phi %"struct.std::__1::__hash_node_base"* [ %164, %160 ], [ %82, %84 ]
  %88 = phi i64 [ %162, %160 ], [ %78, %84 ]
  %89 = phi %"struct.std::__1::__hash_node_base"* [ %161, %160 ], [ %45, %84 ]
  %90 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %87, i64 1
  %91 = bitcast %"struct.std::__1::__hash_node_base"* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = icmp ult i64 %92, %1
  br i1 %93, label %96, label %94

94:                                               ; preds = %86
  %95 = urem i64 %92, %1
  br label %96

96:                                               ; preds = %94, %86
  %97 = phi i64 [ %95, %94 ], [ %92, %86 ]
  %98 = icmp eq i64 %97, %88
  br i1 %98, label %160, label %99

99:                                               ; preds = %96
  %100 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %100, i64 %97
  %102 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %101, align 8
  %103 = icmp eq %"struct.std::__1::__hash_node_base"* %102, null
  br i1 %103, label %159, label %166

104:                                              ; preds = %170, %141
  %105 = phi %"struct.std::__1::__hash_node_base"* [ %168, %170 ], [ %143, %141 ]
  %106 = phi %"struct.std::__1::__hash_node_base"* [ %87, %170 ], [ %105, %141 ]
  %107 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 2
  %108 = icmp eq %"struct.std::__1::__hash_node_base"* %87, %105
  br i1 %108, label %141, label %109

109:                                              ; preds = %104
  %110 = load i64, i64* %173, align 8
  %111 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 3
  %112 = bitcast %"struct.std::__1::__hash_node_base"* %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %110, %113
  br i1 %114, label %115, label %145

115:                                              ; preds = %109
  %116 = load i64, i64* %174, align 8
  %117 = bitcast %"struct.std::__1::__hash_node_base"* %107 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = icmp eq i64 %116, %118
  br i1 %119, label %120, label %145

120:                                              ; preds = %115
  %121 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %176, align 8
  %122 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %121, i64 %116
  %123 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %122, i64 %110
  %124 = icmp eq %"class.v8::internal::wasm::ValueType"* %121, %123
  br i1 %124, label %141, label %125

125:                                              ; preds = %120
  %126 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 4
  %127 = bitcast %"struct.std::__1::__hash_node_base"* %126 to %"class.v8::internal::wasm::ValueType"**
  %128 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %127, align 8
  br label %129

129:                                              ; preds = %137, %125
  %130 = phi %"class.v8::internal::wasm::ValueType"* [ %139, %137 ], [ %128, %125 ]
  %131 = phi %"class.v8::internal::wasm::ValueType"* [ %138, %137 ], [ %121, %125 ]
  %132 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %130, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %131, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, %133
  br i1 %136, label %137, label %145

137:                                              ; preds = %129
  %138 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %131, i64 1
  %139 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %130, i64 1
  %140 = icmp eq %"class.v8::internal::wasm::ValueType"* %138, %123
  br i1 %140, label %141, label %129

141:                                              ; preds = %137, %120, %104
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 0, i32 0
  %143 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %142, align 8
  %144 = icmp eq %"struct.std::__1::__hash_node_base"* %143, null
  br i1 %144, label %145, label %104

145:                                              ; preds = %115, %109, %141, %129, %166
  %146 = phi %"struct.std::__1::__hash_node_base"* [ %87, %166 ], [ %106, %129 ], [ %105, %141 ], [ %106, %109 ], [ %106, %115 ]
  %147 = bitcast %"struct.std::__1::__hash_node_base"* %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"struct.std::__1::__hash_node_base"* %89 to i64*
  store i64 %148, i64* %149, align 8
  %150 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %151 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %150, i64 %97
  %152 = bitcast %"struct.std::__1::__hash_node_base"** %151 to i64**
  %153 = load i64*, i64** %152, align 8
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %147, align 8
  %155 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %156 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %155, i64 %97
  %157 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %156, align 8
  %158 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %157, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %87, %"struct.std::__1::__hash_node_base"** %158, align 8
  br label %160

159:                                              ; preds = %99
  store %"struct.std::__1::__hash_node_base"* %89, %"struct.std::__1::__hash_node_base"** %101, align 8
  br label %160

160:                                              ; preds = %159, %145, %96
  %161 = phi %"struct.std::__1::__hash_node_base"* [ %87, %159 ], [ %89, %145 ], [ %87, %96 ]
  %162 = phi i64 [ %97, %159 ], [ %88, %145 ], [ %88, %96 ]
  %163 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %161, i64 0, i32 0
  %164 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %163, align 8
  %165 = icmp eq %"struct.std::__1::__hash_node_base"* %164, null
  br i1 %165, label %266, label %86

166:                                              ; preds = %99
  %167 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %87, i64 0, i32 0
  %168 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %167, align 8
  %169 = icmp eq %"struct.std::__1::__hash_node_base"* %168, null
  br i1 %169, label %145, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %87, i64 2
  %172 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %87, i64 3
  %173 = bitcast %"struct.std::__1::__hash_node_base"* %172 to i64*
  %174 = bitcast %"struct.std::__1::__hash_node_base"* %171 to i64*
  %175 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %87, i64 4
  %176 = bitcast %"struct.std::__1::__hash_node_base"* %175 to %"class.v8::internal::wasm::ValueType"**
  br label %104

177:                                              ; preds = %84, %258
  %178 = phi %"struct.std::__1::__hash_node_base"* [ %262, %258 ], [ %82, %84 ]
  %179 = phi i64 [ %260, %258 ], [ %78, %84 ]
  %180 = phi %"struct.std::__1::__hash_node_base"* [ %259, %258 ], [ %45, %84 ]
  %181 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 1
  %182 = bitcast %"struct.std::__1::__hash_node_base"* %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = and i64 %183, %85
  %185 = icmp eq i64 %184, %179
  br i1 %185, label %258, label %186

186:                                              ; preds = %177
  %187 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %188 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %187, i64 %184
  %189 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %188, align 8
  %190 = icmp eq %"struct.std::__1::__hash_node_base"* %189, null
  br i1 %190, label %202, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 0, i32 0
  %193 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %192, align 8
  %194 = icmp eq %"struct.std::__1::__hash_node_base"* %193, null
  br i1 %194, label %244, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 2
  %197 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 3
  %198 = bitcast %"struct.std::__1::__hash_node_base"* %197 to i64*
  %199 = bitcast %"struct.std::__1::__hash_node_base"* %196 to i64*
  %200 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 4
  %201 = bitcast %"struct.std::__1::__hash_node_base"* %200 to %"class.v8::internal::wasm::ValueType"**
  br label %203

202:                                              ; preds = %186
  store %"struct.std::__1::__hash_node_base"* %180, %"struct.std::__1::__hash_node_base"** %188, align 8
  br label %258

203:                                              ; preds = %195, %240
  %204 = phi %"struct.std::__1::__hash_node_base"* [ %193, %195 ], [ %242, %240 ]
  %205 = phi %"struct.std::__1::__hash_node_base"* [ %178, %195 ], [ %204, %240 ]
  %206 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %204, i64 2
  %207 = icmp eq %"struct.std::__1::__hash_node_base"* %178, %204
  br i1 %207, label %240, label %208

208:                                              ; preds = %203
  %209 = load i64, i64* %198, align 8
  %210 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %204, i64 3
  %211 = bitcast %"struct.std::__1::__hash_node_base"* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = icmp eq i64 %209, %212
  br i1 %213, label %214, label %244

214:                                              ; preds = %208
  %215 = load i64, i64* %199, align 8
  %216 = bitcast %"struct.std::__1::__hash_node_base"* %206 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = icmp eq i64 %215, %217
  br i1 %218, label %219, label %244

219:                                              ; preds = %214
  %220 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %201, align 8
  %221 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %220, i64 %215
  %222 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %221, i64 %209
  %223 = icmp eq %"class.v8::internal::wasm::ValueType"* %220, %222
  br i1 %223, label %240, label %224

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %204, i64 4
  %226 = bitcast %"struct.std::__1::__hash_node_base"* %225 to %"class.v8::internal::wasm::ValueType"**
  %227 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %226, align 8
  br label %228

228:                                              ; preds = %236, %224
  %229 = phi %"class.v8::internal::wasm::ValueType"* [ %238, %236 ], [ %227, %224 ]
  %230 = phi %"class.v8::internal::wasm::ValueType"* [ %237, %236 ], [ %220, %224 ]
  %231 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %229, i64 0, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %230, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, %232
  br i1 %235, label %236, label %244

236:                                              ; preds = %228
  %237 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %230, i64 1
  %238 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %229, i64 1
  %239 = icmp eq %"class.v8::internal::wasm::ValueType"* %237, %222
  br i1 %239, label %240, label %228

240:                                              ; preds = %236, %203, %219
  %241 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %204, i64 0, i32 0
  %242 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %241, align 8
  %243 = icmp eq %"struct.std::__1::__hash_node_base"* %242, null
  br i1 %243, label %244, label %203

244:                                              ; preds = %240, %208, %214, %228, %191
  %245 = phi %"struct.std::__1::__hash_node_base"* [ %178, %191 ], [ %205, %228 ], [ %204, %240 ], [ %205, %208 ], [ %205, %214 ]
  %246 = bitcast %"struct.std::__1::__hash_node_base"* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"struct.std::__1::__hash_node_base"* %180 to i64*
  store i64 %247, i64* %248, align 8
  %249 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %250 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %249, i64 %184
  %251 = bitcast %"struct.std::__1::__hash_node_base"** %250 to i64**
  %252 = load i64*, i64** %251, align 8
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %246, align 8
  %254 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %255 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %254, i64 %184
  %256 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %255, align 8
  %257 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %256, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %178, %"struct.std::__1::__hash_node_base"** %257, align 8
  br label %258

258:                                              ; preds = %177, %244, %202
  %259 = phi %"struct.std::__1::__hash_node_base"* [ %178, %202 ], [ %180, %244 ], [ %178, %177 ]
  %260 = phi i64 [ %184, %202 ], [ %179, %244 ], [ %179, %177 ]
  %261 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %259, i64 0, i32 0
  %262 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %261, align 8
  %263 = icmp eq %"struct.std::__1::__hash_node_base"* %262, null
  br i1 %263, label %266, label %177

264:                                              ; preds = %2
  %265 = bitcast %"class.std::__1::__hash_table"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %265, i8 0, i64 16, i1 false)
  br label %266

266:                                              ; preds = %258, %160, %77, %42, %264
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder15WasmDataSegmentENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.63"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* dereferenceable(40)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.63"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 53687091
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.63"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 26843545
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %44, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 53687091, %14 ]
  %28 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %29 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %28, align 8
  %30 = mul i64 %27, 40
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %34, %32
  %36 = icmp ugt i64 %30, %35
  br i1 %36, label %37, label %39, !prof !2

37:                                               ; preds = %26
  %38 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %29, i64 %30) #9
  br label %41

39:                                               ; preds = %26
  %40 = add i64 %32, %30
  store i64 %40, i64* %31, align 8
  br label %41

41:                                               ; preds = %39, %37
  %42 = phi i64 [ %38, %37 ], [ %32, %39 ]
  %43 = inttoptr i64 %42 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*
  br label %44

44:                                               ; preds = %21, %41
  %45 = phi i64 [ %27, %41 ], [ 0, %21 ]
  %46 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %43, %41 ], [ null, %21 ]
  %47 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %9
  %48 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %45
  %49 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %48 to i64
  %50 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0
  %51 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %9, i32 0, i32 0, i32 0, i32 2, i32 1
  %52 = bitcast %"class.v8::internal::ZoneAllocator.71"* %50 to i64*
  %53 = bitcast %"struct.std::__1::__compressed_pair_elem.70"* %51 to i64*
  %54 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #9
  %55 = load i64, i64* %52, align 8
  store i64 %55, i64* %53, align 8
  %56 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %47 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %9, i32 0, i32 0, i32 0, i32 1
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %65 = bitcast i8** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %9, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 24, i1 false) #9
  %70 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %46, i64 %9, i32 1
  %71 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %1, i64 0, i32 1
  %72 = load i32, i32* %71, align 8
  store i32 %72, i32* %70, align 8
  %73 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %47, i64 1
  %74 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %73 to i64
  %75 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 0
  %76 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %75, align 8
  %77 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %3, align 8
  %78 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %77, %76
  br i1 %78, label %79, label %81

79:                                               ; preds = %44
  %80 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %76 to i64
  br label %113

81:                                               ; preds = %44, %81
  %82 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %84, %81 ], [ %47, %44 ]
  %83 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %85, %81 ], [ %77, %44 ]
  %84 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %82, i64 -1
  %85 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %83, i64 -1
  %86 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %83, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0
  %87 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %82, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 1
  %88 = bitcast %"class.v8::internal::ZoneAllocator.71"* %86 to i64*
  %89 = bitcast %"struct.std::__1::__compressed_pair_elem.70"* %87 to i64*
  %90 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #9
  %91 = load i64, i64* %88, align 8
  store i64 %91, i64* %89, align 8
  %92 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %85 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %84 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %83, i64 -1, i32 0, i32 0, i32 0, i32 1
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %82, i64 -1, i32 0, i32 0, i32 0, i32 1
  %99 = bitcast i8** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %83, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast i8** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %82, i64 -1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %104 = bitcast i8** %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 24, i1 false) #9
  %106 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %82, i64 -1, i32 1
  %107 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %83, i64 -1, i32 1
  %108 = load i32, i32* %107, align 8
  store i32 %108, i32* %106, align 8
  %109 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %85, %76
  br i1 %109, label %110, label %81

110:                                              ; preds = %81
  %111 = load i64, i64* %6, align 8
  %112 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"** %3, align 8
  br label %113

113:                                              ; preds = %79, %110
  %114 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %76, %79 ], [ %112, %110 ]
  %115 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %47, %79 ], [ %84, %110 ]
  %116 = phi i64 [ %80, %79 ], [ %111, %110 ]
  %117 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %115 to i64
  store i64 %117, i64* %6, align 8
  store i64 %74, i64* %4, align 8
  store i64 %49, i64* %16, align 8
  %118 = inttoptr i64 %116 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"*
  %119 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %114, %118
  br i1 %119, label %132, label %120

120:                                              ; preds = %113, %130
  %121 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* [ %122, %130 ], [ %114, %113 ]
  %122 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %121, i64 -1
  %123 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %122, i64 0, i32 0, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %130, label %126

126:                                              ; preds = %120
  %127 = ptrtoint i8* %124 to i64
  %128 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %121, i64 -1, i32 0, i32 0, i32 0, i32 1
  %129 = bitcast i8** %128 to i64*
  store i64 %127, i64* %129, align 8
  br label %130

130:                                              ; preds = %126, %120
  %131 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmDataSegment"* %122, %118
  br i1 %131, label %132, label %120

132:                                              ; preds = %130, %113
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_(%"class.std::__1::__hash_table"*, %"class.v8::internal::Signature"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 %4, i64 %6) #9
  %8 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 2
  %9 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %8, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %9, i64 %10
  %12 = load i64, i64* %3, align 8
  %13 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %11, i64 %12
  %14 = icmp eq %"class.v8::internal::wasm::ValueType"* %9, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %2, %15
  %16 = phi %"class.v8::internal::wasm::ValueType"* [ %25, %15 ], [ %9, %2 ]
  %17 = phi i64 [ %24, %15 ], [ %7, %2 ]
  %18 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %16, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 31
  %21 = zext i32 %20 to i64
  %22 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 0, i64 %21) #9
  %23 = tail call i64 @_ZN2v84base10hash_valueEm(i64 %17) #9
  %24 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 %22, i64 %23) #9
  %25 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %16, i64 1
  %26 = icmp eq %"class.v8::internal::wasm::ValueType"* %25, %13
  br i1 %26, label %27, label %15

27:                                               ; preds = %15, %2
  %28 = phi i64 [ %7, %2 ], [ %24, %15 ]
  %29 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %152, label %32

32:                                               ; preds = %27
  %33 = tail call i64 @llvm.ctpop.i64(i64 %30) #9, !range !6
  %34 = icmp ugt i64 %33, 1
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = add i64 %30, -1
  %37 = and i64 %36, %28
  br label %42

38:                                               ; preds = %32
  %39 = icmp ult i64 %28, %30
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = urem i64 %28, %30
  br label %42

42:                                               ; preds = %35, %38, %40
  %43 = phi i64 [ %37, %35 ], [ %41, %40 ], [ %28, %38 ]
  %44 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %44, align 8
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %45, i64 %43
  %47 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, align 8
  %48 = icmp eq %"struct.std::__1::__hash_node_base"* %47, null
  br i1 %48, label %152, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %47, i64 0, i32 0
  %51 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %50, align 8
  %52 = icmp eq %"struct.std::__1::__hash_node_base"* %51, null
  br i1 %52, label %152, label %53

53:                                               ; preds = %49
  %54 = add i64 %30, -1
  %55 = load i64, i64* %3, align 8
  %56 = load i64, i64* %5, align 8
  %57 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %8, align 8
  br i1 %34, label %58, label %107

58:                                               ; preds = %53, %99
  %59 = phi %"struct.std::__1::__hash_node_base"* [ %101, %99 ], [ %51, %53 ]
  %60 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 1
  %61 = bitcast %"struct.std::__1::__hash_node_base"* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = icmp eq i64 %62, %28
  br i1 %63, label %71, label %64

64:                                               ; preds = %58
  %65 = icmp ult i64 %62, %30
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = urem i64 %62, %30
  br label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ %67, %66 ], [ %62, %64 ]
  %70 = icmp eq i64 %69, %43
  br i1 %70, label %99, label %152

71:                                               ; preds = %58
  %72 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 2
  %73 = bitcast %"struct.std::__1::__hash_node_base"* %72 to %"class.v8::internal::Signature"*
  %74 = icmp eq %"class.v8::internal::Signature"* %73, %1
  br i1 %74, label %152, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 3
  %77 = bitcast %"struct.std::__1::__hash_node_base"* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %78, %55
  br i1 %79, label %80, label %99

80:                                               ; preds = %75
  %81 = bitcast %"struct.std::__1::__hash_node_base"* %72 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %82, %56
  br i1 %83, label %84, label %99

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 4
  %86 = bitcast %"struct.std::__1::__hash_node_base"* %85 to %"class.v8::internal::wasm::ValueType"**
  %87 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %86, align 8
  %88 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %87, i64 %56
  %89 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %88, i64 %55
  %90 = icmp eq %"class.v8::internal::wasm::ValueType"* %87, %89
  br i1 %90, label %152, label %91

91:                                               ; preds = %84, %103
  %92 = phi %"class.v8::internal::wasm::ValueType"* [ %105, %103 ], [ %57, %84 ]
  %93 = phi %"class.v8::internal::wasm::ValueType"* [ %104, %103 ], [ %87, %84 ]
  %94 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %92, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %93, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, %95
  br i1 %98, label %103, label %99

99:                                               ; preds = %91, %80, %75, %68
  %100 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 0, i32 0
  %101 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %100, align 8
  %102 = icmp eq %"struct.std::__1::__hash_node_base"* %101, null
  br i1 %102, label %152, label %58

103:                                              ; preds = %91
  %104 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %93, i64 1
  %105 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %92, i64 1
  %106 = icmp eq %"class.v8::internal::wasm::ValueType"* %104, %89
  br i1 %106, label %152, label %91

107:                                              ; preds = %53, %148
  %108 = phi %"struct.std::__1::__hash_node_base"* [ %150, %148 ], [ %51, %53 ]
  %109 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 1
  %110 = bitcast %"struct.std::__1::__hash_node_base"* %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, %28
  br i1 %112, label %116, label %113

113:                                              ; preds = %107
  %114 = and i64 %111, %54
  %115 = icmp eq i64 %114, %43
  br i1 %115, label %148, label %152

116:                                              ; preds = %107
  %117 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 2
  %118 = bitcast %"struct.std::__1::__hash_node_base"* %117 to %"class.v8::internal::Signature"*
  %119 = icmp eq %"class.v8::internal::Signature"* %118, %1
  br i1 %119, label %152, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 3
  %122 = bitcast %"struct.std::__1::__hash_node_base"* %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i64 %123, %55
  br i1 %124, label %125, label %148

125:                                              ; preds = %120
  %126 = bitcast %"struct.std::__1::__hash_node_base"* %117 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %127, %56
  br i1 %128, label %129, label %148

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 4
  %131 = bitcast %"struct.std::__1::__hash_node_base"* %130 to %"class.v8::internal::wasm::ValueType"**
  %132 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %131, align 8
  %133 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %132, i64 %56
  %134 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %133, i64 %55
  %135 = icmp eq %"class.v8::internal::wasm::ValueType"* %132, %134
  br i1 %135, label %152, label %136

136:                                              ; preds = %129, %144
  %137 = phi %"class.v8::internal::wasm::ValueType"* [ %146, %144 ], [ %57, %129 ]
  %138 = phi %"class.v8::internal::wasm::ValueType"* [ %145, %144 ], [ %132, %129 ]
  %139 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %137, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %138, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, %140
  br i1 %143, label %144, label %148

144:                                              ; preds = %136
  %145 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %138, i64 1
  %146 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %137, i64 1
  %147 = icmp eq %"class.v8::internal::wasm::ValueType"* %145, %134
  br i1 %147, label %152, label %136

148:                                              ; preds = %136, %125, %120, %113
  %149 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 0, i32 0
  %150 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %149, align 8
  %151 = icmp eq %"struct.std::__1::__hash_node_base"* %150, null
  br i1 %151, label %152, label %107

152:                                              ; preds = %116, %129, %148, %113, %144, %71, %84, %99, %68, %103, %49, %27, %42
  %153 = phi %"struct.std::__1::__hash_node_base"* [ null, %42 ], [ null, %27 ], [ null, %49 ], [ %59, %103 ], [ %59, %71 ], [ %59, %84 ], [ null, %99 ], [ null, %68 ], [ %108, %144 ], [ %108, %116 ], [ %108, %129 ], [ null, %148 ], [ null, %113 ]
  ret %"struct.std::__1::__hash_node_base"* %153
}

declare i64 @_ZN2v84base12hash_combineEmm(i64, i64) local_unnamed_addr #1

declare i64 @_ZN2v84base10hash_valueEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE25__emplace_unique_key_argsIS7_JRS7_RjEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, %"class.v8::internal::Signature"* dereferenceable(24), %"class.v8::internal::Signature"* dereferenceable(24), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 %6, i64 %8) #9
  %10 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 2
  %11 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %10, align 8
  %12 = load i64, i64* %7, align 8
  %13 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %11, i64 %12
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %13, i64 %14
  %16 = icmp eq %"class.v8::internal::wasm::ValueType"* %11, %15
  br i1 %16, label %29, label %17

17:                                               ; preds = %4, %17
  %18 = phi %"class.v8::internal::wasm::ValueType"* [ %27, %17 ], [ %11, %4 ]
  %19 = phi i64 [ %26, %17 ], [ %9, %4 ]
  %20 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %18, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 31
  %23 = zext i32 %22 to i64
  %24 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 0, i64 %23) #9
  %25 = tail call i64 @_ZN2v84base10hash_valueEm(i64 %19) #9
  %26 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 %24, i64 %25) #9
  %27 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %18, i64 1
  %28 = icmp eq %"class.v8::internal::wasm::ValueType"* %27, %15
  br i1 %28, label %29, label %17

29:                                               ; preds = %17, %4
  %30 = phi i64 [ %9, %4 ], [ %26, %17 ]
  %31 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %154, label %34

34:                                               ; preds = %29
  %35 = tail call i64 @llvm.ctpop.i64(i64 %32) #9, !range !6
  %36 = icmp ugt i64 %35, 1
  br i1 %36, label %40, label %37

37:                                               ; preds = %34
  %38 = add i64 %32, -1
  %39 = and i64 %38, %30
  br label %44

40:                                               ; preds = %34
  %41 = icmp ult i64 %30, %32
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = urem i64 %30, %32
  br label %44

44:                                               ; preds = %37, %40, %42
  %45 = phi i64 [ %39, %37 ], [ %43, %42 ], [ %30, %40 ]
  %46 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %46, align 8
  %48 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %47, i64 %45
  %49 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %48, align 8
  %50 = icmp eq %"struct.std::__1::__hash_node_base"* %49, null
  br i1 %50, label %154, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %49, i64 0, i32 0
  %53 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, align 8
  %54 = icmp eq %"struct.std::__1::__hash_node_base"* %53, null
  br i1 %54, label %154, label %55

55:                                               ; preds = %51
  %56 = add i64 %32, -1
  %57 = load i64, i64* %5, align 8
  %58 = load i64, i64* %7, align 8
  %59 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %10, align 8
  br i1 %36, label %60, label %109

60:                                               ; preds = %55, %101
  %61 = phi %"struct.std::__1::__hash_node_base"* [ %103, %101 ], [ %53, %55 ]
  %62 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %61, i64 1
  %63 = bitcast %"struct.std::__1::__hash_node_base"* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, %30
  br i1 %65, label %73, label %66

66:                                               ; preds = %60
  %67 = icmp ult i64 %64, %32
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %64, %32
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi i64 [ %69, %68 ], [ %64, %66 ]
  %72 = icmp eq i64 %71, %45
  br i1 %72, label %73, label %154

73:                                               ; preds = %70, %60
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %61, i64 2
  %75 = bitcast %"struct.std::__1::__hash_node_base"* %74 to %"class.v8::internal::Signature"*
  %76 = icmp eq %"class.v8::internal::Signature"* %75, %1
  br i1 %76, label %257, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %61, i64 3
  %79 = bitcast %"struct.std::__1::__hash_node_base"* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %80, %57
  br i1 %81, label %82, label %101

82:                                               ; preds = %77
  %83 = bitcast %"struct.std::__1::__hash_node_base"* %74 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %84, %58
  br i1 %85, label %86, label %101

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %61, i64 4
  %88 = bitcast %"struct.std::__1::__hash_node_base"* %87 to %"class.v8::internal::wasm::ValueType"**
  %89 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %89, i64 %58
  %91 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %90, i64 %57
  %92 = icmp eq %"class.v8::internal::wasm::ValueType"* %89, %91
  br i1 %92, label %257, label %93

93:                                               ; preds = %86, %105
  %94 = phi %"class.v8::internal::wasm::ValueType"* [ %107, %105 ], [ %59, %86 ]
  %95 = phi %"class.v8::internal::wasm::ValueType"* [ %106, %105 ], [ %89, %86 ]
  %96 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %94, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %95, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, %97
  br i1 %100, label %105, label %101

101:                                              ; preds = %93, %82, %77
  %102 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %61, i64 0, i32 0
  %103 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %102, align 8
  %104 = icmp eq %"struct.std::__1::__hash_node_base"* %103, null
  br i1 %104, label %154, label %60

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %95, i64 1
  %107 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %94, i64 1
  %108 = icmp eq %"class.v8::internal::wasm::ValueType"* %106, %91
  br i1 %108, label %257, label %93

109:                                              ; preds = %55, %150
  %110 = phi %"struct.std::__1::__hash_node_base"* [ %152, %150 ], [ %53, %55 ]
  %111 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %110, i64 1
  %112 = bitcast %"struct.std::__1::__hash_node_base"* %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %113, %30
  %115 = and i64 %113, %56
  %116 = icmp eq i64 %115, %45
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %154

118:                                              ; preds = %109
  %119 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %110, i64 2
  %120 = bitcast %"struct.std::__1::__hash_node_base"* %119 to %"class.v8::internal::Signature"*
  %121 = icmp eq %"class.v8::internal::Signature"* %120, %1
  br i1 %121, label %257, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %110, i64 3
  %124 = bitcast %"struct.std::__1::__hash_node_base"* %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = icmp eq i64 %125, %57
  br i1 %126, label %127, label %150

127:                                              ; preds = %122
  %128 = bitcast %"struct.std::__1::__hash_node_base"* %119 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = icmp eq i64 %129, %58
  br i1 %130, label %131, label %150

131:                                              ; preds = %127
  %132 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %110, i64 4
  %133 = bitcast %"struct.std::__1::__hash_node_base"* %132 to %"class.v8::internal::wasm::ValueType"**
  %134 = load %"class.v8::internal::wasm::ValueType"*, %"class.v8::internal::wasm::ValueType"** %133, align 8
  %135 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %134, i64 %58
  %136 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %135, i64 %57
  %137 = icmp eq %"class.v8::internal::wasm::ValueType"* %134, %136
  br i1 %137, label %257, label %138

138:                                              ; preds = %131, %146
  %139 = phi %"class.v8::internal::wasm::ValueType"* [ %148, %146 ], [ %59, %131 ]
  %140 = phi %"class.v8::internal::wasm::ValueType"* [ %147, %146 ], [ %134, %131 ]
  %141 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %139, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %140, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, %142
  br i1 %145, label %146, label %150

146:                                              ; preds = %138
  %147 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %140, i64 1
  %148 = getelementptr inbounds %"class.v8::internal::wasm::ValueType", %"class.v8::internal::wasm::ValueType"* %139, i64 1
  %149 = icmp eq %"class.v8::internal::wasm::ValueType"* %147, %136
  br i1 %149, label %257, label %138

150:                                              ; preds = %138, %122, %127
  %151 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %110, i64 0, i32 0
  %152 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %151, align 8
  %153 = icmp eq %"struct.std::__1::__hash_node_base"* %152, null
  br i1 %153, label %154, label %109

154:                                              ; preds = %109, %150, %70, %101, %51, %44, %29
  %155 = phi i64 [ %45, %44 ], [ undef, %29 ], [ %45, %51 ], [ %45, %101 ], [ %45, %70 ], [ %45, %150 ], [ %45, %109 ]
  %156 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %157 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %156, align 8, !noalias !44
  %158 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %157, i64 0, i32 2
  %159 = load i64, i64* %158, align 8, !noalias !44
  %160 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %157, i64 0, i32 3
  %161 = load i64, i64* %160, align 8, !noalias !44
  %162 = sub i64 %161, %159
  %163 = icmp ult i64 %162, 48
  br i1 %163, label %164, label %166, !prof !2

164:                                              ; preds = %154
  %165 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %157, i64 48) #9, !noalias !44
  br label %168

166:                                              ; preds = %154
  %167 = add i64 %159, 48
  store i64 %167, i64* %158, align 8, !noalias !44
  br label %168

168:                                              ; preds = %164, %166
  %169 = phi i64 [ %165, %164 ], [ %159, %166 ]
  %170 = inttoptr i64 %169 to %"struct.std::__1::__hash_node"*
  %171 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 2, i32 0
  %172 = bitcast %"struct.std::__1::pair.127"* %171 to i8*
  %173 = bitcast %"class.v8::internal::Signature"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 24, i1 false) #9, !noalias !44
  %174 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 2, i32 0, i32 1
  %175 = load i32, i32* %3, align 4, !noalias !44
  store i32 %175, i32* %174, align 8, !noalias !44
  %176 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 1
  store i64 %30, i64* %176, align 8, !noalias !44
  %177 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %177, align 8, !noalias !44
  %178 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %179 = load i64, i64* %178, align 8
  %180 = add i64 %179, 1
  %181 = uitofp i64 %180 to float
  %182 = uitofp i64 %32 to float
  %183 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %184 = load float, float* %183, align 4
  %185 = fmul float %184, %182
  %186 = fcmp olt float %185, %181
  %187 = or i1 %33, %186
  br i1 %187, label %188, label %211

188:                                              ; preds = %168
  %189 = shl i64 %32, 1
  %190 = icmp ult i64 %32, 3
  %191 = tail call i64 @llvm.ctpop.i64(i64 %32) #9, !range !6
  %192 = icmp ugt i64 %191, 1
  %193 = or i1 %190, %192
  %194 = zext i1 %193 to i64
  %195 = or i64 %189, %194
  %196 = fdiv float %181, %184
  %197 = tail call float @llvm.ceil.f32(float %196) #9
  %198 = fptoui float %197 to i64
  %199 = icmp ult i64 %195, %198
  %200 = select i1 %199, i64 %198, i64 %195
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %200)
  %201 = load i64, i64* %31, align 8
  %202 = tail call i64 @llvm.ctpop.i64(i64 %201) #9, !range !6
  %203 = icmp ugt i64 %202, 1
  br i1 %203, label %207, label %204

204:                                              ; preds = %188
  %205 = add i64 %201, -1
  %206 = and i64 %205, %30
  br label %211

207:                                              ; preds = %188
  %208 = icmp ult i64 %30, %201
  br i1 %208, label %211, label %209

209:                                              ; preds = %207
  %210 = urem i64 %30, %201
  br label %211

211:                                              ; preds = %209, %207, %204, %168
  %212 = phi i64 [ %32, %168 ], [ %201, %204 ], [ %201, %207 ], [ %201, %209 ]
  %213 = phi i64 [ %155, %168 ], [ %206, %204 ], [ %30, %207 ], [ %210, %209 ]
  %214 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %215 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %214, align 8
  %216 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %215, i64 %213
  %217 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %216, align 8
  %218 = icmp eq %"struct.std::__1::__hash_node_base"* %217, null
  br i1 %218, label %219, label %247

219:                                              ; preds = %211
  %220 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %221 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %220, i64 0, i32 0
  %222 = bitcast %"struct.std::__1::__hash_node_base"* %220 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = inttoptr i64 %169 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %225, %"struct.std::__1::__hash_node_base"** %221, align 8
  %226 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %214, align 8
  %227 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %226, i64 %213
  store %"struct.std::__1::__hash_node_base"* %220, %"struct.std::__1::__hash_node_base"** %227, align 8
  %228 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %177, align 8
  %229 = icmp eq %"struct.std::__1::__hash_node_base"* %228, null
  br i1 %229, label %253, label %230

230:                                              ; preds = %219
  %231 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %228, i64 1
  %232 = bitcast %"struct.std::__1::__hash_node_base"* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = tail call i64 @llvm.ctpop.i64(i64 %212) #9, !range !6
  %235 = icmp ugt i64 %234, 1
  br i1 %235, label %239, label %236

236:                                              ; preds = %230
  %237 = add i64 %212, -1
  %238 = and i64 %233, %237
  br label %243

239:                                              ; preds = %230
  %240 = icmp ult i64 %233, %212
  br i1 %240, label %243, label %241

241:                                              ; preds = %239
  %242 = urem i64 %233, %212
  br label %243

243:                                              ; preds = %236, %239, %241
  %244 = phi i64 [ %238, %236 ], [ %242, %241 ], [ %233, %239 ]
  %245 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %214, align 8
  %246 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %245, i64 %244
  store %"struct.std::__1::__hash_node_base"* %225, %"struct.std::__1::__hash_node_base"** %246, align 8
  br label %253

247:                                              ; preds = %211
  %248 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %217, i64 0, i32 0
  %249 = bitcast %"struct.std::__1::__hash_node_base"* %217 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = inttoptr i64 %169 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %252, %"struct.std::__1::__hash_node_base"** %248, align 8
  br label %253

253:                                              ; preds = %219, %243, %247
  %254 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %170, i64 0, i32 0
  %255 = load i64, i64* %178, align 8
  %256 = add i64 %255, 1
  store i64 %256, i64* %178, align 8
  br label %257

257:                                              ; preds = %131, %118, %146, %86, %73, %105, %253
  %258 = phi i8 [ 1, %253 ], [ 0, %105 ], [ 0, %73 ], [ 0, %86 ], [ 0, %146 ], [ 0, %118 ], [ 0, %131 ]
  %259 = phi %"struct.std::__1::__hash_node_base"* [ %254, %253 ], [ %61, %105 ], [ %61, %73 ], [ %61, %86 ], [ %110, %146 ], [ %110, %118 ], [ %110, %131 ]
  %260 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %259, 0
  %261 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %260, i8 %258, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %261
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjN2v88internal13ZoneAllocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.77"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !47

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !48
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !48
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !51, !noalias !48
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !51, !noalias !48
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !51, !noalias !48
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !51, !noalias !48
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !53

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !48
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !51, !noalias !48
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !51, !noalias !48
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !54

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  ret void

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.77"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 536870911
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.77"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #10
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 268435455
  br i1 %142, label %143, label %148

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %168, label %148

148:                                              ; preds = %139, %143
  %149 = phi i64 [ %146, %143 ], [ 536870911, %139 ]
  %150 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %151 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %150, align 8
  %152 = shl i64 %149, 2
  %153 = add i64 %152, 7
  %154 = and i64 %153, -8
  %155 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %151, i64 0, i32 2
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %151, i64 0, i32 3
  %158 = load i64, i64* %157, align 8
  %159 = sub i64 %158, %156
  %160 = icmp ugt i64 %154, %159
  br i1 %160, label %161, label %163, !prof !2

161:                                              ; preds = %148
  %162 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %151, i64 %154) #9
  br label %165

163:                                              ; preds = %148
  %164 = add i64 %154, %156
  store i64 %164, i64* %155, align 8
  br label %165

165:                                              ; preds = %163, %161
  %166 = phi i64 [ %162, %161 ], [ %156, %163 ]
  %167 = inttoptr i64 %166 to i32*
  br label %168

168:                                              ; preds = %143, %165
  %169 = phi i64 [ %149, %165 ], [ 0, %143 ]
  %170 = phi i32* [ %167, %165 ], [ null, %143 ]
  %171 = getelementptr inbounds i32, i32* %170, i64 %134
  %172 = getelementptr inbounds i32, i32* %170, i64 %169
  %173 = getelementptr inbounds i32, i32* %171, i64 %1
  %174 = shl nsw i64 %1, 2
  %175 = add i64 %174, -4
  %176 = lshr exact i64 %175, 2
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 8
  br i1 %178, label %241, label %179

179:                                              ; preds = %168
  %180 = bitcast i32* %171 to i8*
  %181 = shl nsw i64 %1, 2
  %182 = add i64 %181, -4
  %183 = lshr exact i64 %182, 2
  %184 = add nsw i64 %134, %183
  %185 = add i64 %184, 1
  %186 = getelementptr i32, i32* %170, i64 %185
  %187 = getelementptr i8, i8* %4, i64 1
  %188 = icmp ugt i8* %187, %180
  %189 = icmp ugt i32* %186, %2
  %190 = and i1 %188, %189
  br i1 %190, label %241, label %191

191:                                              ; preds = %179
  %192 = and i64 %177, 9223372036854775800
  %193 = getelementptr i32, i32* %171, i64 %192
  %194 = add nsw i64 %192, -8
  %195 = lshr exact i64 %194, 3
  %196 = add nuw nsw i64 %195, 1
  %197 = and i64 %196, 1
  %198 = icmp eq i64 %194, 0
  br i1 %198, label %226, label %199

199:                                              ; preds = %191
  %200 = sub nuw nsw i64 %196, %197
  %201 = load i32, i32* %2, align 4, !alias.scope !55
  %202 = insertelement <4 x i32> undef, i32 %201, i32 0
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> zeroinitializer
  %204 = insertelement <4 x i32> undef, i32 %201, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  %206 = load i32, i32* %2, align 4, !alias.scope !55
  %207 = insertelement <4 x i32> undef, i32 %206, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  %209 = insertelement <4 x i32> undef, i32 %206, i32 0
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %211

211:                                              ; preds = %211, %199
  %212 = phi i64 [ 0, %199 ], [ %223, %211 ]
  %213 = phi i64 [ %200, %199 ], [ %224, %211 ]
  %214 = getelementptr i32, i32* %171, i64 %212
  %215 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %215, align 4, !alias.scope !58, !noalias !55
  %216 = getelementptr i32, i32* %214, i64 4
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %217, align 4, !alias.scope !58, !noalias !55
  %218 = or i64 %212, 8
  %219 = getelementptr i32, i32* %171, i64 %218
  %220 = bitcast i32* %219 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %220, align 4, !alias.scope !58, !noalias !55
  %221 = getelementptr i32, i32* %219, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %222, align 4, !alias.scope !58, !noalias !55
  %223 = add i64 %212, 16
  %224 = add i64 %213, -2
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %211, !llvm.loop !60

226:                                              ; preds = %211, %191
  %227 = phi i64 [ 0, %191 ], [ %223, %211 ]
  %228 = icmp eq i64 %197, 0
  br i1 %228, label %239, label %229

229:                                              ; preds = %226
  %230 = getelementptr i32, i32* %171, i64 %227
  %231 = load i32, i32* %2, align 4, !alias.scope !55
  %232 = insertelement <4 x i32> undef, i32 %231, i32 0
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> zeroinitializer
  %234 = insertelement <4 x i32> undef, i32 %231, i32 0
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %236 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4, !alias.scope !58, !noalias !55
  %237 = getelementptr i32, i32* %230, i64 4
  %238 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %238, align 4, !alias.scope !58, !noalias !55
  br label %239

239:                                              ; preds = %226, %229
  %240 = icmp eq i64 %177, %192
  br i1 %240, label %282, label %241

241:                                              ; preds = %239, %179, %168
  %242 = phi i32* [ %171, %179 ], [ %171, %168 ], [ %193, %239 ]
  %243 = ptrtoint i32* %242 to i64
  %244 = add i64 %134, %1
  %245 = add i64 %244, -1
  %246 = getelementptr i32, i32* %170, i64 %245
  %247 = ptrtoint i32* %246 to i64
  %248 = sub i64 %247, %243
  %249 = lshr i64 %248, 2
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 7
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %260, label %253

253:                                              ; preds = %241, %253
  %254 = phi i32* [ %257, %253 ], [ %242, %241 ]
  %255 = phi i64 [ %258, %253 ], [ %251, %241 ]
  %256 = load i32, i32* %2, align 4
  store i32 %256, i32* %254, align 4
  %257 = getelementptr inbounds i32, i32* %254, i64 1
  %258 = add i64 %255, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %253, !llvm.loop !61

260:                                              ; preds = %253, %241
  %261 = phi i32* [ %242, %241 ], [ %257, %253 ]
  %262 = icmp ult i64 %248, 28
  br i1 %262, label %282, label %263

263:                                              ; preds = %260, %263
  %264 = phi i32* [ %280, %263 ], [ %261, %260 ]
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %264, i64 1
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %264, i64 2
  %269 = load i32, i32* %2, align 4
  store i32 %269, i32* %268, align 4
  %270 = getelementptr inbounds i32, i32* %264, i64 3
  %271 = load i32, i32* %2, align 4
  store i32 %271, i32* %270, align 4
  %272 = getelementptr inbounds i32, i32* %264, i64 4
  %273 = load i32, i32* %2, align 4
  store i32 %273, i32* %272, align 4
  %274 = getelementptr inbounds i32, i32* %264, i64 5
  %275 = load i32, i32* %2, align 4
  store i32 %275, i32* %274, align 4
  %276 = getelementptr inbounds i32, i32* %264, i64 6
  %277 = load i32, i32* %2, align 4
  store i32 %277, i32* %276, align 4
  %278 = getelementptr inbounds i32, i32* %264, i64 7
  %279 = load i32, i32* %2, align 4
  store i32 %279, i32* %278, align 4
  %280 = getelementptr inbounds i32, i32* %264, i64 8
  %281 = icmp eq i32* %173, %280
  br i1 %281, label %282, label %263, !llvm.loop !62

282:                                              ; preds = %260, %263, %239
  %283 = ptrtoint i32* %172 to i64
  %284 = ptrtoint i32* %173 to i64
  %285 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 0
  %286 = load i32*, i32** %285, align 8
  %287 = ptrtoint i32* %286 to i64
  %288 = load i32*, i32** %9, align 8
  %289 = icmp eq i32* %288, %286
  br i1 %289, label %441, label %290

290:                                              ; preds = %282
  %291 = getelementptr i32, i32* %288, i64 -1
  %292 = ptrtoint i32* %291 to i64
  %293 = sub i64 %292, %287
  %294 = lshr i64 %293, 2
  %295 = add nuw nsw i64 %294, 1
  %296 = icmp ult i64 %295, 8
  br i1 %296, label %389, label %297

297:                                              ; preds = %290
  %298 = getelementptr i32, i32* %288, i64 -1
  %299 = ptrtoint i32* %298 to i64
  %300 = sub i64 %299, %287
  %301 = lshr i64 %300, 2
  %302 = xor i64 %301, -1
  %303 = add nsw i64 %134, %302
  %304 = getelementptr i32, i32* %170, i64 %303
  %305 = xor i64 %301, -1
  %306 = getelementptr i32, i32* %288, i64 %305
  %307 = icmp ult i32* %304, %288
  %308 = icmp ult i32* %306, %171
  %309 = and i1 %307, %308
  br i1 %309, label %389, label %310

310:                                              ; preds = %297
  %311 = and i64 %295, 9223372036854775800
  %312 = sub nsw i64 0, %311
  %313 = getelementptr i32, i32* %171, i64 %312
  %314 = sub nsw i64 0, %311
  %315 = getelementptr i32, i32* %288, i64 %314
  %316 = add nsw i64 %311, -8
  %317 = lshr exact i64 %316, 3
  %318 = add nuw nsw i64 %317, 1
  %319 = and i64 %318, 1
  %320 = icmp eq i64 %316, 0
  br i1 %320, label %367, label %321

321:                                              ; preds = %310
  %322 = sub nuw nsw i64 %318, %319
  %323 = getelementptr i32, i32* %171, i64 -1
  %324 = getelementptr i32, i32* %288, i64 -1
  %325 = getelementptr i32, i32* %171, i64 -1
  %326 = getelementptr i32, i32* %288, i64 -1
  br label %327

327:                                              ; preds = %327, %321
  %328 = phi i64 [ 0, %321 ], [ %362, %327 ]
  %329 = phi i64 [ %322, %321 ], [ %363, %327 ]
  %330 = sub i64 0, %328
  %331 = sub i64 0, %328
  %332 = getelementptr inbounds i32, i32* %323, i64 %330
  %333 = getelementptr inbounds i32, i32* %324, i64 %331
  %334 = getelementptr inbounds i32, i32* %333, i64 -3
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4, !alias.scope !63
  %337 = getelementptr inbounds i32, i32* %333, i64 -4
  %338 = getelementptr inbounds i32, i32* %337, i64 -3
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4, !alias.scope !63
  %341 = getelementptr inbounds i32, i32* %332, i64 -3
  %342 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %336, <4 x i32>* %342, align 4, !alias.scope !66, !noalias !63
  %343 = getelementptr inbounds i32, i32* %332, i64 -4
  %344 = getelementptr inbounds i32, i32* %343, i64 -3
  %345 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> %340, <4 x i32>* %345, align 4, !alias.scope !66, !noalias !63
  %346 = sub nuw nsw i64 -8, %328
  %347 = sub nuw nsw i64 -8, %328
  %348 = getelementptr inbounds i32, i32* %325, i64 %346
  %349 = getelementptr inbounds i32, i32* %326, i64 %347
  %350 = getelementptr inbounds i32, i32* %349, i64 -3
  %351 = bitcast i32* %350 to <4 x i32>*
  %352 = load <4 x i32>, <4 x i32>* %351, align 4, !alias.scope !63
  %353 = getelementptr inbounds i32, i32* %349, i64 -4
  %354 = getelementptr inbounds i32, i32* %353, i64 -3
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 4, !alias.scope !63
  %357 = getelementptr inbounds i32, i32* %348, i64 -3
  %358 = bitcast i32* %357 to <4 x i32>*
  store <4 x i32> %352, <4 x i32>* %358, align 4, !alias.scope !66, !noalias !63
  %359 = getelementptr inbounds i32, i32* %348, i64 -4
  %360 = getelementptr inbounds i32, i32* %359, i64 -3
  %361 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> %356, <4 x i32>* %361, align 4, !alias.scope !66, !noalias !63
  %362 = add i64 %328, 16
  %363 = add i64 %329, -2
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %327, !llvm.loop !68

365:                                              ; preds = %327
  %366 = sub nuw nsw i64 -16, %328
  br label %367

367:                                              ; preds = %365, %310
  %368 = phi i64 [ 0, %310 ], [ %366, %365 ]
  %369 = icmp eq i64 %319, 0
  br i1 %369, label %387, label %370

370:                                              ; preds = %367
  %371 = getelementptr i32, i32* %171, i64 -1
  %372 = getelementptr i32, i32* %288, i64 -1
  %373 = getelementptr inbounds i32, i32* %371, i64 %368
  %374 = getelementptr inbounds i32, i32* %372, i64 %368
  %375 = getelementptr inbounds i32, i32* %374, i64 -3
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4, !alias.scope !63
  %378 = getelementptr inbounds i32, i32* %374, i64 -4
  %379 = getelementptr inbounds i32, i32* %378, i64 -3
  %380 = bitcast i32* %379 to <4 x i32>*
  %381 = load <4 x i32>, <4 x i32>* %380, align 4, !alias.scope !63
  %382 = getelementptr inbounds i32, i32* %373, i64 -3
  %383 = bitcast i32* %382 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %383, align 4, !alias.scope !66, !noalias !63
  %384 = getelementptr inbounds i32, i32* %373, i64 -4
  %385 = getelementptr inbounds i32, i32* %384, i64 -3
  %386 = bitcast i32* %385 to <4 x i32>*
  store <4 x i32> %381, <4 x i32>* %386, align 4, !alias.scope !66, !noalias !63
  br label %387

387:                                              ; preds = %367, %370
  %388 = icmp eq i64 %295, %311
  br i1 %388, label %441, label %389

389:                                              ; preds = %387, %297, %290
  %390 = phi i32* [ %171, %297 ], [ %171, %290 ], [ %313, %387 ]
  %391 = phi i32* [ %288, %297 ], [ %288, %290 ], [ %315, %387 ]
  %392 = getelementptr i32, i32* %391, i64 -1
  %393 = ptrtoint i32* %392 to i64
  %394 = sub i64 %393, %287
  %395 = lshr i64 %394, 2
  %396 = add nuw nsw i64 %395, 1
  %397 = and i64 %396, 7
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %408, label %399

399:                                              ; preds = %389, %399
  %400 = phi i32* [ %403, %399 ], [ %390, %389 ]
  %401 = phi i32* [ %404, %399 ], [ %391, %389 ]
  %402 = phi i64 [ %406, %399 ], [ %397, %389 ]
  %403 = getelementptr inbounds i32, i32* %400, i64 -1
  %404 = getelementptr inbounds i32, i32* %401, i64 -1
  %405 = load i32, i32* %404, align 4
  store i32 %405, i32* %403, align 4
  %406 = add i64 %402, -1
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %408, label %399, !llvm.loop !69

408:                                              ; preds = %399, %389
  %409 = phi i32* [ undef, %389 ], [ %403, %399 ]
  %410 = phi i32* [ %390, %389 ], [ %403, %399 ]
  %411 = phi i32* [ %391, %389 ], [ %404, %399 ]
  %412 = icmp ult i64 %394, 28
  br i1 %412, label %441, label %413

413:                                              ; preds = %408, %413
  %414 = phi i32* [ %437, %413 ], [ %410, %408 ]
  %415 = phi i32* [ %438, %413 ], [ %411, %408 ]
  %416 = getelementptr inbounds i32, i32* %414, i64 -1
  %417 = getelementptr inbounds i32, i32* %415, i64 -1
  %418 = load i32, i32* %417, align 4
  store i32 %418, i32* %416, align 4
  %419 = getelementptr inbounds i32, i32* %414, i64 -2
  %420 = getelementptr inbounds i32, i32* %415, i64 -2
  %421 = load i32, i32* %420, align 4
  store i32 %421, i32* %419, align 4
  %422 = getelementptr inbounds i32, i32* %414, i64 -3
  %423 = getelementptr inbounds i32, i32* %415, i64 -3
  %424 = load i32, i32* %423, align 4
  store i32 %424, i32* %422, align 4
  %425 = getelementptr inbounds i32, i32* %414, i64 -4
  %426 = getelementptr inbounds i32, i32* %415, i64 -4
  %427 = load i32, i32* %426, align 4
  store i32 %427, i32* %425, align 4
  %428 = getelementptr inbounds i32, i32* %414, i64 -5
  %429 = getelementptr inbounds i32, i32* %415, i64 -5
  %430 = load i32, i32* %429, align 4
  store i32 %430, i32* %428, align 4
  %431 = getelementptr inbounds i32, i32* %414, i64 -6
  %432 = getelementptr inbounds i32, i32* %415, i64 -6
  %433 = load i32, i32* %432, align 4
  store i32 %433, i32* %431, align 4
  %434 = getelementptr inbounds i32, i32* %414, i64 -7
  %435 = getelementptr inbounds i32, i32* %415, i64 -7
  %436 = load i32, i32* %435, align 4
  store i32 %436, i32* %434, align 4
  %437 = getelementptr inbounds i32, i32* %414, i64 -8
  %438 = getelementptr inbounds i32, i32* %415, i64 -8
  %439 = load i32, i32* %438, align 4
  store i32 %439, i32* %437, align 4
  %440 = icmp eq i32* %438, %286
  br i1 %440, label %441, label %413, !llvm.loop !70

441:                                              ; preds = %408, %413, %387, %282
  %442 = phi i32* [ %171, %282 ], [ %313, %387 ], [ %409, %408 ], [ %437, %413 ]
  %443 = ptrtoint i32* %442 to i64
  store i64 %443, i64* %131, align 8
  store i64 %284, i64* %10, align 8
  store i64 %283, i64* %7, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder9WasmTableENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.50"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* dereferenceable(48)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.50"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 48
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 44739242
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.50"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 48
  %20 = icmp ult i64 %19, 22369621
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %44, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 44739242, %14 ]
  %28 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %29 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %28, align 8
  %30 = mul i64 %27, 48
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %34, %32
  %36 = icmp ugt i64 %30, %35
  br i1 %36, label %37, label %39, !prof !2

37:                                               ; preds = %26
  %38 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %29, i64 %30) #9
  br label %41

39:                                               ; preds = %26
  %40 = add i64 %32, %30
  store i64 %40, i64* %31, align 8
  br label %41

41:                                               ; preds = %39, %37
  %42 = phi i64 [ %38, %37 ], [ %32, %39 ]
  %43 = inttoptr i64 %42 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*
  br label %44

44:                                               ; preds = %21, %41
  %45 = phi i64 [ %27, %41 ], [ 0, %21 ]
  %46 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %43, %41 ], [ null, %21 ]
  %47 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %46, i64 %9
  %48 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %46, i64 %45
  %49 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %48 to i64
  %50 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %47 to i8*
  %51 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 13, i1 false) #9
  %52 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %46, i64 %9, i32 4
  %53 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1, i64 0, i32 4
  %54 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %52 to i8*
  %55 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 20, i1 false) #9
  %56 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %46, i64 %9, i32 4, i32 2
  %57 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %1, i64 0, i32 4, i32 2
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = bitcast %"class.std::__1::unique_ptr.52"* %57 to i64*
  %60 = load i64, i64* %59, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %58, align 8
  %61 = bitcast %"class.std::__1::unique_ptr.52"* %56 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %47, i64 1
  %63 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %62 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %64, align 8
  %66 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %3, align 8
  %67 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %66, %65
  br i1 %67, label %68, label %70

68:                                               ; preds = %44
  %69 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %65 to i64
  br label %91

70:                                               ; preds = %44, %70
  %71 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %73, %70 ], [ %47, %44 ]
  %72 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %74, %70 ], [ %66, %44 ]
  %73 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %71, i64 -1
  %74 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %72, i64 -1
  %75 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %73 to i8*
  %76 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 13, i1 false) #9
  %77 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %71, i64 -1, i32 4
  %78 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %72, i64 -1, i32 4
  %79 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %77 to i8*
  %80 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 20, i1 false) #9
  %81 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %71, i64 -1, i32 4, i32 2
  %82 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %72, i64 -1, i32 4, i32 2
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::unique_ptr.52"* %82 to i64*
  %85 = load i64, i64* %84, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %83, align 8
  %86 = bitcast %"class.std::__1::unique_ptr.52"* %81 to i64*
  store i64 %85, i64* %86, align 8
  %87 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %74, %65
  br i1 %87, label %88, label %70

88:                                               ; preds = %70
  %89 = load i64, i64* %6, align 8
  %90 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"** %3, align 8
  br label %91

91:                                               ; preds = %68, %88
  %92 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %65, %68 ], [ %90, %88 ]
  %93 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %47, %68 ], [ %73, %88 ]
  %94 = phi i64 [ %69, %68 ], [ %89, %88 ]
  %95 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %93 to i64
  store i64 %95, i64* %6, align 8
  store i64 %63, i64* %4, align 8
  store i64 %49, i64* %16, align 8
  %96 = inttoptr i64 %94 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"*
  %97 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %92, %96
  br i1 %97, label %103, label %98

98:                                               ; preds = %91, %98
  %99 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* [ %100, %98 ], [ %92, %91 ]
  %100 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %99, i64 -1
  %101 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %99, i64 -1, i32 4
  tail call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %101) #9
  %102 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmTable"* %100, %96
  br i1 %102, label %103, label %98

103:                                              ; preds = %98, %91
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal4wasm17WasmModuleBuilder10WasmGlobalENS2_13ZoneAllocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.84"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* dereferenceable(40)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.84", %"class.std::__1::vector.84"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.84"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 53687091
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.84"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.84", %"class.std::__1::vector.84"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 26843545
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %44, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 53687091, %14 ]
  %28 = getelementptr inbounds %"class.std::__1::vector.84", %"class.std::__1::vector.84"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %29 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %28, align 8
  %30 = mul i64 %27, 40
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %29, i64 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %34, %32
  %36 = icmp ugt i64 %30, %35
  br i1 %36, label %37, label %39, !prof !2

37:                                               ; preds = %26
  %38 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %29, i64 %30) #9
  br label %41

39:                                               ; preds = %26
  %40 = add i64 %32, %30
  store i64 %40, i64* %31, align 8
  br label %41

41:                                               ; preds = %39, %37
  %42 = phi i64 [ %38, %37 ], [ %32, %39 ]
  %43 = inttoptr i64 %42 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*
  br label %44

44:                                               ; preds = %21, %41
  %45 = phi i64 [ %27, %41 ], [ 0, %21 ]
  %46 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %43, %41 ], [ null, %21 ]
  %47 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %46, i64 %9
  %48 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %46, i64 %45
  %49 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %48 to i64
  %50 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %47 to i8*
  %51 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 5, i1 false) #9
  %52 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %46, i64 %9, i32 2
  %53 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %1, i64 0, i32 2
  %54 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %52 to i8*
  %55 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 20, i1 false) #9
  %56 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %46, i64 %9, i32 2, i32 2
  %57 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %1, i64 0, i32 2, i32 2
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = bitcast %"class.std::__1::unique_ptr.52"* %57 to i64*
  %60 = load i64, i64* %59, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %58, align 8
  %61 = bitcast %"class.std::__1::unique_ptr.52"* %56 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %47, i64 1
  %63 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %62 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.84", %"class.std::__1::vector.84"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %64, align 8
  %66 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %3, align 8
  %67 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %66, %65
  br i1 %67, label %68, label %70

68:                                               ; preds = %44
  %69 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %65 to i64
  br label %91

70:                                               ; preds = %44, %70
  %71 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %73, %70 ], [ %47, %44 ]
  %72 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %74, %70 ], [ %66, %44 ]
  %73 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %71, i64 -1
  %74 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %72, i64 -1
  %75 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %73 to i8*
  %76 = bitcast %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 5, i1 false) #9
  %77 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %71, i64 -1, i32 2
  %78 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %72, i64 -1, i32 2
  %79 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %77 to i8*
  %80 = bitcast %"class.v8::internal::wasm::WasmInitExpr"* %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 20, i1 false) #9
  %81 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %71, i64 -1, i32 2, i32 2
  %82 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %72, i64 -1, i32 2, i32 2
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::unique_ptr.52"* %82 to i64*
  %85 = load i64, i64* %84, align 8
  store %"class.v8::internal::wasm::WasmInitExpr"* null, %"class.v8::internal::wasm::WasmInitExpr"** %83, align 8
  %86 = bitcast %"class.std::__1::unique_ptr.52"* %81 to i64*
  store i64 %85, i64* %86, align 8
  %87 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %74, %65
  br i1 %87, label %88, label %70

88:                                               ; preds = %70
  %89 = load i64, i64* %6, align 8
  %90 = load %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*, %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"** %3, align 8
  br label %91

91:                                               ; preds = %68, %88
  %92 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %65, %68 ], [ %90, %88 ]
  %93 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %47, %68 ], [ %73, %88 ]
  %94 = phi i64 [ %69, %68 ], [ %89, %88 ]
  %95 = ptrtoint %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %93 to i64
  store i64 %95, i64* %6, align 8
  store i64 %63, i64* %4, align 8
  store i64 %49, i64* %16, align 8
  %96 = inttoptr i64 %94 to %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"*
  %97 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %92, %96
  br i1 %97, label %103, label %98

98:                                               ; preds = %91, %98
  %99 = phi %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* [ %100, %98 ], [ %92, %91 ]
  %100 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %99, i64 -1
  %101 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal", %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %99, i64 -1, i32 2
  tail call void @_ZN2v88internal4wasm12WasmInitExprD2Ev(%"class.v8::internal::wasm::WasmInitExpr"* %101) #9
  %102 = icmp eq %"struct.v8::internal::wasm::WasmModuleBuilder::WasmGlobal"* %100, %96
  br i1 %102, label %103, label %98

103:                                              ; preds = %98, %91
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = !{i64 0, i64 65}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !13}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !4}
!23 = distinct !{!23, !13}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !4}
!31 = distinct !{!31, !13}
!32 = distinct !{!32, !4}
!33 = distinct !{!33, !4}
!34 = !{i8 0, i8 2}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !13}
!41 = distinct !{!41, !4}
!42 = distinct !{!42, !13}
!43 = distinct !{!43, !4}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE21__construct_node_hashIRS7_JRjEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINSI_ISR_EEEEEEmOT_DpOT0_: argument 0"}
!46 = distinct !{!46, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIN2v88internal9SignatureINS3_4wasm9ValueTypeEEEjEENS_22__unordered_map_hasherIS7_S8_NS2_4base4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_SE_SC_Lb1EEENS3_13ZoneAllocatorIS8_EEE21__construct_node_hashIRS7_JRjEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINSI_ISR_EEEEEEmOT_DpOT0_"}
!47 = distinct !{!47, !4}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !13}
!54 = distinct !{!54, !13}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !13}
!61 = distinct !{!61, !4}
!62 = distinct !{!62, !13}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !13}
!69 = distinct !{!69, !4}
!70 = distinct !{!70, !13}
