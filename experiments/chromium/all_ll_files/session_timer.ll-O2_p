; ModuleID = '../../content/browser/xr/metrics/session_timer.cc'
source_filename = "../../content/browser/xr/metrics/session_timer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::SessionTimer" = type { i32 (...)**, i8*, %"class.base::Time", %"class.base::Time", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZTVN7content12SessionTimerE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.content::SessionTimer"*)* @_ZN7content12SessionTimerD2Ev to i8*), i8* bitcast (void (%"class.content::SessionTimer"*)* @_ZN7content12SessionTimerD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN7content12SessionTimerC1EPKcN4base9TimeDeltaES4_ = hidden unnamed_addr alias void (%"class.content::SessionTimer"*, i8*, i64, i64), void (%"class.content::SessionTimer"*, i8*, i64, i64)* @_ZN7content12SessionTimerC2EPKcN4base9TimeDeltaES4_
@_ZN7content12SessionTimerD1Ev = hidden unnamed_addr alias void (%"class.content::SessionTimer"*), void (%"class.content::SessionTimer"*)* @_ZN7content12SessionTimerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content12SessionTimerC2EPKcN4base9TimeDeltaES4_(%"class.content::SessionTimer"* nocapture, i8*, i64, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7content12SessionTimerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 5, i32 0
  %9 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false)
  store i64 %2, i64* %8, align 8
  %10 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 6, i32 0
  store i64 %3, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content12SessionTimerD2Ev(%"class.content::SessionTimer"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7content12SessionTimerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call i64 @_ZN4base4Time3NowEv() #7
  tail call void @_ZN7content12SessionTimer11StopSessionEbN4base4TimeE(%"class.content::SessionTimer"* %0, i1 zeroext false, i64 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content12SessionTimer11StopSessionEbN4base4TimeE(%"class.content::SessionTimer"* nocapture, i1 zeroext, i64) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

9:                                                ; preds = %3
  %10 = sub nsw i64 %2, %7
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %38, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 6, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %10, %14
  br i1 %15, label %16, label %38

16:                                               ; preds = %12
  %17 = add i64 %10, -9223372036854775807
  %18 = icmp ult i64 %17, 2
  %19 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 4, i32 0
  %20 = load i64, i64* %19, align 8
  br i1 %18, label %28, label %21

21:                                               ; preds = %16
  %22 = icmp slt i64 %10, 0
  %23 = select i1 %22, i64 -9223372036854775808, i64 9223372036854775807
  %24 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 %10) #7
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 %23, i64 %26, !prof !2
  br label %36

28:                                               ; preds = %16
  %29 = add i64 %20, -9223372036854775807
  %30 = icmp ugt i64 %29, 1
  %31 = icmp eq i64 %20, %10
  %32 = or i1 %31, %30
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #7
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #7
  br label %36

36:                                               ; preds = %21, %28, %33
  %37 = phi i64 [ %27, %21 ], [ %10, %28 ], [ %10, %33 ]
  store i64 %37, i64* %19, align 8
  br label %38

38:                                               ; preds = %3, %36, %12, %9
  br i1 %1, label %39, label %65

39:                                               ; preds = %38
  %40 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 2, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = sub nsw i64 %2, %41
  %43 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 4, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, -9223372036854775807
  %46 = icmp ult i64 %45, 2
  br i1 %46, label %54, label %47

47:                                               ; preds = %39
  %48 = icmp slt i64 %44, 0
  %49 = select i1 %48, i64 -9223372036854775808, i64 9223372036854775807
  %50 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %42, i64 %44) #7
  %51 = extractvalue { i64, i1 } %50, 1
  %52 = extractvalue { i64, i1 } %50, 0
  %53 = select i1 %51, i64 %49, i64 %52, !prof !2
  br label %62

54:                                               ; preds = %39
  %55 = add i64 %42, -9223372036854775807
  %56 = icmp ugt i64 %55, 1
  %57 = icmp eq i64 %42, %44
  %58 = or i1 %57, %56
  br i1 %58, label %62, label %59

59:                                               ; preds = %54
  %60 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #7
  %61 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #7
  br label %62

62:                                               ; preds = %47, %54, %59
  %63 = phi i64 [ %53, %47 ], [ %44, %54 ], [ %44, %59 ]
  store i64 %63, i64* %43, align 8
  %64 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %2, i64* %64, align 8
  store i64 0, i64* %6, align 8
  br label %74

65:                                               ; preds = %38
  %66 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 4, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 1
  %71 = load i8*, i8** %70, align 8
  call void @_ZN4base23UmaHistogramCustomTimesEPKcNS_9TimeDeltaES2_S2_i(i8* %71, i64 %67, i64 0, i64 18000000000, i32 100) #7
  br label %72

72:                                               ; preds = %65, %69
  %73 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false)
  br label %74

74:                                               ; preds = %72, %62
  ret void
}

declare i64 @_ZN4base4Time3NowEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content12SessionTimerD0Ev(%"class.content::SessionTimer"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7content12SessionTimerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call i64 @_ZN4base4Time3NowEv() #7
  tail call void @_ZN7content12SessionTimer11StopSessionEbN4base4TimeE(%"class.content::SessionTimer"* %0, i1 zeroext false, i64 %3) #7
  %4 = bitcast %"class.content::SessionTimer"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content12SessionTimer12StartSessionEN4base4TimeE(%"class.content::SessionTimer"* nocapture, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = sub nsw i64 %1, %4
  %8 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 5, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp sgt i64 %7, %9
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @_ZN7content12SessionTimer11StopSessionEbN4base4TimeE(%"class.content::SessionTimer"* %0, i1 zeroext false, i64 %4)
  br label %12

12:                                               ; preds = %6, %2, %11
  %13 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 2, i32 0, i32 0
  store i64 %1, i64* %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content12SessionTimer26SendAccumulatedSessionTimeEv(%"class.content::SessionTimer"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 4, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.content::SessionTimer", %"class.content::SessionTimer"* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  tail call void @_ZN4base23UmaHistogramCustomTimesEPKcNS_9TimeDeltaES2_S2_i(i8* %7, i64 %3, i64 0, i64 18000000000, i32 100) #7
  br label %8

8:                                                ; preds = %5, %1
  ret void
}

declare void @_ZN4base23UmaHistogramCustomTimesEPKcNS_9TimeDeltaES2_S2_i(i8*, i64, i64, i64, i32) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
