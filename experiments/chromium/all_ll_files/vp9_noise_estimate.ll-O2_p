; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_noise_estimate.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_noise_estimate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_noise_estimate_init(%struct.noise_estimate* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = mul nsw i32 %2, %1
  %6 = icmp sgt i32 %5, 921599
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 2
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 5
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 3
  store i32 90, i32* %11, align 4
  %12 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 6
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 7
  store i32 0, i32* %13, align 4
  %14 = icmp sgt i32 %5, 2073599
  %15 = select i1 %14, i32 200, i32 140
  %16 = select i1 %14, i32 300, i32 210
  br i1 %6, label %19, label %17

17:                                               ; preds = %3
  %18 = icmp sgt i32 %5, 230399
  br i1 %18, label %19, label %22

19:                                               ; preds = %3, %17
  %20 = phi i32 [ %15, %3 ], [ 115, %17 ]
  %21 = phi i32 [ %16, %3 ], [ 172, %17 ]
  store i32 %20, i32* %11, align 4
  br label %22

22:                                               ; preds = %19, %17
  %23 = phi i32 [ 135, %17 ], [ %21, %19 ]
  %24 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 8
  store i32 15, i32* %24, align 4
  %25 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 4
  store i32 %23, i32* %25, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_noise_estimate_extract_level(%struct.noise_estimate* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 %5, 1
  %7 = icmp sgt i32 %3, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = icmp sgt i32 %3, %5
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = ashr i32 %5, 1
  %12 = icmp sgt i32 %3, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %10, %8, %1
  %15 = phi i32 [ 3, %1 ], [ 2, %8 ], [ %13, %10 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_update_noise_estimate(%struct.VP9_COMP*) local_unnamed_addr #3 {
  %2 = alloca [20 x i32], align 16
  %3 = alloca [20 x i32], align 16
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %6 = load i32, i32* %5, align 16
  %7 = icmp slt i32 %6, 353
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 288
  %12 = select i1 %11, i32 40, i32 60
  br label %13

13:                                               ; preds = %8, %1
  %14 = phi i32 [ 40, %1 ], [ %12, %8 ]
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 77
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 13
  %18 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %17, align 16
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 9
  %20 = load i32, i32* %19, align 16
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %38

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %28 = load i32, i32* %27, align 16
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, -1
  %32 = icmp eq i32 %28, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %26, %22
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2
  %35 = add i32 %6, -641
  %36 = icmp ult i32 %35, 1280
  %37 = select i1 %36, i32 2, i32 6
  br label %38

38:                                               ; preds = %26, %33, %13
  %39 = phi i32 [ 6, %26 ], [ 6, %13 ], [ %37, %33 ]
  %40 = phi %struct.yv12_buffer_config* [ %18, %26 ], [ %18, %13 ], [ %34, %33 ]
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %42 = load i32, i32* %41, align 16
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %102

44:                                               ; preds = %38
  br i1 %21, label %45, label %64

45:                                               ; preds = %44
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %51 = load i32, i32* %50, align 16
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = add nsw i32 %53, -1
  %55 = icmp eq i32 %51, %54
  %56 = icmp sgt i32 %6, 319
  %57 = and i1 %56, %55
  br i1 %57, label %60, label %64

58:                                               ; preds = %45
  %59 = icmp sgt i32 %6, 319
  br i1 %59, label %60, label %64

60:                                               ; preds = %49, %58
  %61 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %62, 179
  br i1 %63, label %102, label %64

64:                                               ; preds = %60, %58, %49, %44
  %65 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %101

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %101

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 3
  br i1 %75, label %76, label %101

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %78 = load i32, i32* %77, align 8
  %79 = icmp sgt i32 %78, 4
  br i1 %79, label %80, label %101

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 119
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %101

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %86 = load i32, i32* %85, align 16
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %101

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %101

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %101, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %98 = load i32, i32* %97, align 4
  %99 = mul nsw i32 %98, %6
  %100 = icmp sgt i32 %99, 230399
  br i1 %100, label %102, label %101

101:                                              ; preds = %96, %92, %88, %84, %80, %76, %72, %68, %64
  br label %102

102:                                              ; preds = %38, %60, %96, %101
  %103 = phi i32 [ 0, %101 ], [ 0, %38 ], [ 1, %60 ], [ 1, %96 ]
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 0
  store i32 %103, i32* %104, align 4
  %105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %106 = load i32, i32* %105, align 8
  %107 = icmp sgt i32 %106, 1
  br i1 %107, label %108, label %111

108:                                              ; preds = %102
  %109 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 22
  %110 = load i32, i32* %109, align 8
  br label %111

111:                                              ; preds = %108, %102
  %112 = phi i32 [ %110, %108 ], [ %16, %102 ]
  %113 = icmp eq i32 %103, 0
  br i1 %113, label %131, label %114

114:                                              ; preds = %111
  %115 = and i32 %112, 7
  %116 = icmp ne i32 %115, 0
  %117 = icmp eq %struct.yv12_buffer_config* %40, null
  %118 = or i1 %117, %116
  br i1 %118, label %131, label %119

119:                                              ; preds = %114
  %120 = icmp eq i32 %106, 1
  br i1 %120, label %121, label %178

121:                                              ; preds = %119
  %122 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 6
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, %6
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 7
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %127, %129
  br i1 %130, label %178, label %131

131:                                              ; preds = %125, %121, %111, %114
  br i1 %21, label %132, label %170

132:                                              ; preds = %131
  %133 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %141, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %138 = load i32, i32* %137, align 16
  %139 = add nsw i32 %106, -1
  %140 = icmp eq i32 %138, %139
  br i1 %140, label %141, label %170

141:                                              ; preds = %136, %132
  %142 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %143 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %142, align 8
  %144 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %147, label %170

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 13
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 0, i32 13
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 0
  %153 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 4
  %154 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 0, i32 4
  br label %155

155:                                              ; preds = %155, %147
  %156 = phi i8* [ %149, %147 ], [ %163, %155 ]
  %157 = phi i8* [ %151, %147 ], [ %166, %155 ]
  %158 = phi i32 [ 0, %147 ], [ %167, %155 ]
  %159 = load i32, i32* %152, align 8
  %160 = sext i32 %159 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %160, i1 false) #5
  %161 = load i32, i32* %153, align 8
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %156, i64 %162
  %164 = load i32, i32* %154, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %157, i64 %165
  %167 = add nuw nsw i32 %158, 1
  %168 = load i32, i32* %144, align 4
  %169 = icmp slt i32 %167, %168
  br i1 %169, label %155, label %170

170:                                              ; preds = %155, %136, %141, %131
  %171 = icmp eq %struct.yv12_buffer_config* %40, null
  br i1 %171, label %691, label %172

172:                                              ; preds = %170
  %173 = load i32, i32* %5, align 16
  %174 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 6
  store i32 %173, i32* %174, align 4
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 7
  store i32 %176, i32* %177, align 4
  br label %691

178:                                              ; preds = %125, %119
  %179 = icmp sgt i32 %112, 60
  br i1 %179, label %180, label %234

180:                                              ; preds = %178
  %181 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 67
  %182 = load i32, i32* %181, align 8
  %183 = icmp sgt i32 %182, 1
  br i1 %183, label %184, label %234

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %186 = load i32, i32* %185, align 8
  %187 = icmp sgt i32 %186, %106
  br i1 %187, label %188, label %234

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %190 = load i32, i32* %189, align 16
  %191 = add nsw i32 %106, -1
  %192 = icmp eq i32 %190, %191
  br i1 %192, label %193, label %234

193:                                              ; preds = %188
  %194 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %195 = load i32, i32* %194, align 8
  %196 = icmp slt i32 %195, %14
  br i1 %196, label %197, label %234

197:                                              ; preds = %193
  %198 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  store i32 0, i32* %198, align 4
  %199 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 5
  store i32 0, i32* %199, align 4
  %200 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 8
  store i32 10, i32* %200, align 4
  br i1 %21, label %201, label %691

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 22
  %203 = load i32, i32* %202, align 8
  %204 = icmp sgt i32 %203, 1
  br i1 %204, label %205, label %691

205:                                              ; preds = %201
  tail call void @vp9_denoiser_set_noise_level(%struct.VP9_COMP* %0, i32 0) #5
  %206 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %207 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %206, align 8
  %208 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 1
  %209 = load i32, i32* %208, align 4
  %210 = icmp sgt i32 %209, 0
  br i1 %210, label %211, label %691

211:                                              ; preds = %205
  %212 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 13
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %207, i64 0, i32 13
  %215 = load i8*, i8** %214, align 8
  %216 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 0
  %217 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 4
  %218 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %207, i64 0, i32 4
  br label %219

219:                                              ; preds = %219, %211
  %220 = phi i8* [ %213, %211 ], [ %227, %219 ]
  %221 = phi i8* [ %215, %211 ], [ %230, %219 ]
  %222 = phi i32 [ 0, %211 ], [ %231, %219 ]
  %223 = load i32, i32* %216, align 8
  %224 = sext i32 %223 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %220, i8* align 1 %221, i64 %224, i1 false) #5
  %225 = load i32, i32* %217, align 8
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %220, i64 %226
  %228 = load i32, i32* %218, align 8
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %221, i64 %229
  %231 = add nuw nsw i32 %222, 1
  %232 = load i32, i32* %208, align 4
  %233 = icmp slt i32 %231, %232
  br i1 %233, label %219, label %691

234:                                              ; preds = %193, %188, %184, %180, %178
  %235 = bitcast [20 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %235) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %235, i8 0, i64 80, i1 false)
  %236 = bitcast [20 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %236) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %236, i8 -86, i64 80, i1 false)
  %237 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %238 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %237, align 8
  %239 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %238, i64 0, i32 13
  %240 = load i8*, i8** %239, align 8
  %241 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %238, i64 0, i32 4
  %242 = load i32, i32* %241, align 8
  %243 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 0, i32 13
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 0, i32 4
  %246 = load i32, i32* %245, align 8
  %247 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %238, i64 0, i32 14
  %248 = load i8*, i8** %247, align 8
  %249 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %238, i64 0, i32 15
  %250 = load i8*, i8** %249, align 8
  %251 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %238, i64 0, i32 9
  %252 = load i32, i32* %251, align 4
  %253 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %254 = load i32, i32* %253, align 16
  %255 = icmp sgt i32 %254, 0
  br i1 %255, label %256, label %509

256:                                              ; preds = %234
  %257 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %258 = load i32, i32* %257, align 8
  %259 = icmp sgt i32 %258, 0
  %260 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  %261 = add i32 %258, -8
  %262 = lshr i32 %261, 3
  %263 = add nuw nsw i32 %262, 1
  %264 = icmp ult i32 %258, 8
  %265 = and i32 %258, -8
  %266 = insertelement <4 x i32> undef, i32 %39, i32 0
  %267 = shufflevector <4 x i32> %266, <4 x i32> undef, <4 x i32> zeroinitializer
  %268 = insertelement <4 x i32> undef, i32 %39, i32 0
  %269 = shufflevector <4 x i32> %268, <4 x i32> undef, <4 x i32> zeroinitializer
  %270 = and i32 %263, 1
  %271 = icmp eq i32 %262, 0
  %272 = sub nuw nsw i32 %263, %270
  %273 = icmp eq i32 %270, 0
  %274 = icmp eq i32 %258, %265
  br label %275

275:                                              ; preds = %256, %372
  %276 = phi i32 [ 0, %256 ], [ %373, %372 ]
  %277 = phi i32 [ 0, %256 ], [ %374, %372 ]
  br i1 %259, label %278, label %372

278:                                              ; preds = %275
  %279 = load i8*, i8** %260, align 16
  %280 = mul nsw i32 %258, %277
  br i1 %264, label %356, label %281

281:                                              ; preds = %278
  %282 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %276, i32 0
  br i1 %271, label %324, label %283

283:                                              ; preds = %281, %283
  %284 = phi i32 [ %321, %283 ], [ 0, %281 ]
  %285 = phi <4 x i32> [ %319, %283 ], [ %282, %281 ]
  %286 = phi <4 x i32> [ %320, %283 ], [ zeroinitializer, %281 ]
  %287 = phi i32 [ %322, %283 ], [ %272, %281 ]
  %288 = add nsw i32 %280, %284
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %279, i64 %289
  %291 = bitcast i8* %290 to <4 x i8>*
  %292 = load <4 x i8>, <4 x i8>* %291, align 1
  %293 = getelementptr inbounds i8, i8* %290, i64 4
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %292 to <4 x i32>
  %297 = zext <4 x i8> %295 to <4 x i32>
  %298 = icmp ult <4 x i32> %267, %296
  %299 = icmp ult <4 x i32> %269, %297
  %300 = zext <4 x i1> %298 to <4 x i32>
  %301 = zext <4 x i1> %299 to <4 x i32>
  %302 = add nsw <4 x i32> %285, %300
  %303 = add nuw nsw <4 x i32> %286, %301
  %304 = or i32 %284, 8
  %305 = add nsw i32 %280, %304
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %279, i64 %306
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = getelementptr inbounds i8, i8* %307, i64 4
  %311 = bitcast i8* %310 to <4 x i8>*
  %312 = load <4 x i8>, <4 x i8>* %311, align 1
  %313 = zext <4 x i8> %309 to <4 x i32>
  %314 = zext <4 x i8> %312 to <4 x i32>
  %315 = icmp ult <4 x i32> %267, %313
  %316 = icmp ult <4 x i32> %269, %314
  %317 = zext <4 x i1> %315 to <4 x i32>
  %318 = zext <4 x i1> %316 to <4 x i32>
  %319 = add nsw <4 x i32> %302, %317
  %320 = add nuw nsw <4 x i32> %303, %318
  %321 = add i32 %284, 16
  %322 = add i32 %287, -2
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %283, !llvm.loop !2

324:                                              ; preds = %283, %281
  %325 = phi <4 x i32> [ undef, %281 ], [ %319, %283 ]
  %326 = phi <4 x i32> [ undef, %281 ], [ %320, %283 ]
  %327 = phi i32 [ 0, %281 ], [ %321, %283 ]
  %328 = phi <4 x i32> [ %282, %281 ], [ %319, %283 ]
  %329 = phi <4 x i32> [ zeroinitializer, %281 ], [ %320, %283 ]
  br i1 %273, label %347, label %330

330:                                              ; preds = %324
  %331 = add nsw i32 %280, %327
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %279, i64 %332
  %334 = getelementptr inbounds i8, i8* %333, i64 4
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = icmp ult <4 x i32> %269, %337
  %339 = zext <4 x i1> %338 to <4 x i32>
  %340 = add nuw nsw <4 x i32> %329, %339
  %341 = bitcast i8* %333 to <4 x i8>*
  %342 = load <4 x i8>, <4 x i8>* %341, align 1
  %343 = zext <4 x i8> %342 to <4 x i32>
  %344 = icmp ult <4 x i32> %267, %343
  %345 = zext <4 x i1> %344 to <4 x i32>
  %346 = add nsw <4 x i32> %328, %345
  br label %347

347:                                              ; preds = %324, %330
  %348 = phi <4 x i32> [ %325, %324 ], [ %346, %330 ]
  %349 = phi <4 x i32> [ %326, %324 ], [ %340, %330 ]
  %350 = add <4 x i32> %349, %348
  %351 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %352 = add <4 x i32> %350, %351
  %353 = shufflevector <4 x i32> %352, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %354 = add <4 x i32> %352, %353
  %355 = extractelement <4 x i32> %354, i32 0
  br i1 %274, label %372, label %356

356:                                              ; preds = %347, %278
  %357 = phi i32 [ %276, %278 ], [ %355, %347 ]
  %358 = phi i32 [ 0, %278 ], [ %265, %347 ]
  br label %359

359:                                              ; preds = %356, %359
  %360 = phi i32 [ %369, %359 ], [ %357, %356 ]
  %361 = phi i32 [ %370, %359 ], [ %358, %356 ]
  %362 = add nsw i32 %280, %361
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8, i8* %279, i64 %363
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = icmp ult i32 %39, %366
  %368 = zext i1 %367 to i32
  %369 = add nsw i32 %360, %368
  %370 = add nuw nsw i32 %361, 1
  %371 = icmp slt i32 %370, %258
  br i1 %371, label %359, label %372, !llvm.loop !4

372:                                              ; preds = %359, %347, %275
  %373 = phi i32 [ %276, %275 ], [ %355, %347 ], [ %369, %359 ]
  %374 = add nuw nsw i32 %277, 1
  %375 = icmp slt i32 %374, %254
  br i1 %375, label %275, label %376

376:                                              ; preds = %372
  %377 = mul nsw i32 %254, 3
  %378 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %379 = mul nsw i32 %377, %258
  %380 = ashr i32 %379, 3
  %381 = icmp sge i32 %373, %380
  br i1 %255, label %382, label %509

382:                                              ; preds = %376
  %383 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  %384 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %385 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %386 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 126
  %387 = bitcast i32* %4 to i8*
  %388 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 6, i32 2
  %389 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 19
  %390 = shl i32 %242, 3
  %391 = shl i32 %246, 3
  br label %392

392:                                              ; preds = %382, %484
  %393 = phi i32 [ %254, %382 ], [ %485, %484 ]
  %394 = phi i32 [ %258, %382 ], [ %486, %484 ]
  %395 = phi i32 [ 0, %382 ], [ %503, %484 ]
  %396 = phi i8* [ %250, %382 ], [ %502, %484 ]
  %397 = phi i8* [ %248, %382 ], [ %501, %484 ]
  %398 = phi i8* [ %244, %382 ], [ %497, %484 ]
  %399 = phi i8* [ %240, %382 ], [ %494, %484 ]
  %400 = icmp sgt i32 %394, 0
  br i1 %400, label %401, label %484

401:                                              ; preds = %392, %474
  %402 = phi i32 [ %480, %474 ], [ %394, %392 ]
  %403 = phi i32 [ %479, %474 ], [ 0, %392 ]
  %404 = phi i8* [ %478, %474 ], [ %396, %392 ]
  %405 = phi i8* [ %477, %474 ], [ %397, %392 ]
  %406 = phi i8* [ %476, %474 ], [ %398, %392 ]
  %407 = phi i8* [ %475, %474 ], [ %399, %392 ]
  %408 = or i32 %403, %395
  %409 = and i32 %408, 3
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %411, label %474

411:                                              ; preds = %401
  %412 = load i32, i32* %253, align 16
  %413 = add nsw i32 %412, -1
  %414 = icmp slt i32 %395, %413
  %415 = add nsw i32 %402, -1
  %416 = icmp slt i32 %403, %415
  %417 = and i1 %416, %414
  br i1 %417, label %418, label %474

418:                                              ; preds = %411
  %419 = mul nsw i32 %402, %395
  %420 = add nsw i32 %419, %403
  %421 = add nsw i32 %420, 1
  %422 = add nsw i32 %420, %402
  %423 = add nsw i32 %422, 1
  %424 = load i8*, i8** %383, align 16
  %425 = sext i32 %420 to i64
  %426 = getelementptr inbounds i8, i8* %424, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = sext i32 %421 to i64
  %429 = getelementptr inbounds i8, i8* %424, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = sext i32 %422 to i64
  %432 = getelementptr inbounds i8, i8* %424, i64 %431
  %433 = load i8, i8* %432, align 1
  %434 = sext i32 %423 to i64
  %435 = getelementptr inbounds i8, i8* %424, i64 %434
  %436 = load i8, i8* %435, align 1
  %437 = icmp ult i8 %433, %436
  %438 = select i1 %437, i8 %433, i8 %436
  %439 = icmp ult i8 %430, %438
  %440 = select i1 %439, i8 %430, i8 %438
  %441 = icmp ult i8 %427, %440
  %442 = select i1 %441, i8 %427, i8 %440
  %443 = zext i8 %442 to i32
  %444 = icmp ult i32 %39, %443
  %445 = and i1 %381, %444
  br i1 %445, label %446, label %474

446:                                              ; preds = %418
  %447 = load i32, i32* %384, align 8
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %474

449:                                              ; preds = %446
  %450 = load i32, i32* %385, align 8
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %474

452:                                              ; preds = %449
  %453 = load i32, i32* %386, align 16
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %458, label %455

455:                                              ; preds = %452
  %456 = call i32 @vp9_compute_skin_block(i8* %407, i8* %405, i8* %404, i32 %242, i32 %252, i32 6, i32 %443, i32 0) #5
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %474

458:                                              ; preds = %452, %455
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %387) #5
  store i32 -1431655766, i32* %4, align 4
  %459 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %388, align 8
  %460 = call i32 %459(i8* %407, i32 %242, i8* %406, i32 %246, i32* nonnull %4) #5
  %461 = icmp ult i32 %460, 2000
  br i1 %461, label %462, label %467

462:                                              ; preds = %458
  %463 = trunc i32 %460 to i16
  %464 = udiv i16 %463, 100
  %465 = zext i16 %464 to i64
  %466 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %465
  br label %469

467:                                              ; preds = %458
  %468 = icmp ult i32 %460, 3000
  br i1 %468, label %469, label %473

469:                                              ; preds = %467, %462
  %470 = phi i32* [ %466, %462 ], [ %389, %467 ]
  %471 = load i32, i32* %470, align 4
  %472 = add i32 %471, 1
  store i32 %472, i32* %470, align 4
  br label %473

473:                                              ; preds = %469, %467
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %387) #5
  br label %474

474:                                              ; preds = %446, %449, %418, %455, %473, %411, %401
  %475 = getelementptr inbounds i8, i8* %407, i64 8
  %476 = getelementptr inbounds i8, i8* %406, i64 8
  %477 = getelementptr inbounds i8, i8* %405, i64 4
  %478 = getelementptr inbounds i8, i8* %404, i64 4
  %479 = add nuw nsw i32 %403, 1
  %480 = load i32, i32* %378, align 8
  %481 = icmp slt i32 %479, %480
  br i1 %481, label %401, label %482

482:                                              ; preds = %474
  %483 = load i32, i32* %253, align 16
  br label %484

484:                                              ; preds = %482, %392
  %485 = phi i32 [ %393, %392 ], [ %483, %482 ]
  %486 = phi i32 [ %394, %392 ], [ %480, %482 ]
  %487 = phi i8* [ %399, %392 ], [ %475, %482 ]
  %488 = phi i8* [ %398, %392 ], [ %476, %482 ]
  %489 = phi i8* [ %397, %392 ], [ %477, %482 ]
  %490 = phi i8* [ %396, %392 ], [ %478, %482 ]
  %491 = shl i32 %486, 3
  %492 = sub nsw i32 %390, %491
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i8, i8* %487, i64 %493
  %495 = sub nsw i32 %391, %491
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %488, i64 %496
  %498 = sub i32 %252, %486
  %499 = shl i32 %498, 2
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds i8, i8* %489, i64 %500
  %502 = getelementptr inbounds i8, i8* %490, i64 %500
  %503 = add nuw nsw i32 %395, 1
  %504 = icmp slt i32 %503, %485
  br i1 %504, label %392, label %505

505:                                              ; preds = %484
  %506 = load i32, i32* %5, align 16
  %507 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 0
  %508 = load i32, i32* %507, align 16
  br label %509

509:                                              ; preds = %234, %505, %376
  %510 = phi i32 [ %508, %505 ], [ 0, %376 ], [ 0, %234 ]
  %511 = phi i32 [ %506, %505 ], [ %6, %376 ], [ %6, %234 ]
  %512 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 6
  store i32 %511, i32* %512, align 4
  %513 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %514 = load i32, i32* %513, align 4
  %515 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 7
  store i32 %514, i32* %515, align 4
  %516 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 0
  %517 = icmp ugt i32 %510, 10
  %518 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 19
  %519 = load i32, i32* %518, align 4
  %520 = lshr i32 %510, 2
  %521 = icmp ugt i32 %519, %520
  %522 = and i1 %517, %521
  br i1 %522, label %523, label %544

523:                                              ; preds = %509
  store i32 0, i32* %516, align 16
  %524 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 1
  %525 = load i32, i32* %524, align 4
  %526 = lshr i32 %525, 2
  store i32 %526, i32* %524, align 4
  %527 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 2
  %528 = load i32, i32* %527, align 8
  %529 = lshr i32 %528, 2
  store i32 %529, i32* %527, align 8
  %530 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 3
  %531 = load i32, i32* %530, align 4
  %532 = lshr i32 %531, 2
  store i32 %532, i32* %530, align 4
  %533 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 4
  %534 = load i32, i32* %533, align 16
  %535 = lshr i32 %534, 1
  store i32 %535, i32* %533, align 16
  %536 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 5
  %537 = load i32, i32* %536, align 4
  %538 = lshr i32 %537, 1
  store i32 %538, i32* %536, align 4
  %539 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 6
  %540 = load i32, i32* %539, align 8
  %541 = mul i32 %540, 3
  %542 = lshr i32 %541, 1
  store i32 %542, i32* %539, align 8
  %543 = lshr i32 %519, 1
  store i32 %543, i32* %518, align 4
  br label %544

544:                                              ; preds = %509, %523
  %545 = phi i32 [ %543, %523 ], [ %519, %509 ]
  %546 = lshr i32 %545, 2
  %547 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 19
  %548 = load i32, i32* %516, align 16
  %549 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 1
  %550 = load i32, i32* %549, align 4
  %551 = add i32 %550, %548
  %552 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 2
  %553 = load i32, i32* %552, align 8
  %554 = add i32 %551, %553
  %555 = udiv i32 %554, 3
  %556 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 0
  %557 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 18
  br label %558

558:                                              ; preds = %588, %544
  %559 = phi i64 [ 0, %544 ], [ %594, %588 ]
  %560 = phi i32 [ 0, %544 ], [ %593, %588 ]
  %561 = phi i32 [ 0, %544 ], [ %592, %588 ]
  %562 = trunc i64 %559 to i32
  switch i32 %562, label %565 [
    i32 0, label %563
    i32 19, label %564
  ]

563:                                              ; preds = %558
  store i32 %555, i32* %556, align 16
  br label %588

564:                                              ; preds = %558
  store i32 %546, i32* %547, align 4
  br label %588

565:                                              ; preds = %558
  %566 = icmp eq i64 %559, 18
  %567 = add nuw i64 %559, 4294967295
  %568 = and i64 %567, 4294967295
  %569 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %568
  %570 = load i32, i32* %569, align 4
  %571 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %559
  %572 = load i32, i32* %571, align 4
  %573 = shl i32 %572, 1
  %574 = add i32 %573, %570
  %575 = add nuw nsw i64 %559, 1
  %576 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %575
  %577 = load i32, i32* %576, align 4
  br i1 %566, label %578, label %583

578:                                              ; preds = %565
  %579 = lshr i32 %577, 1
  %580 = add i32 %574, 2
  %581 = add i32 %580, %579
  %582 = lshr i32 %581, 2
  store i32 %582, i32* %557, align 8
  br label %588

583:                                              ; preds = %565
  %584 = add i32 %574, 2
  %585 = add i32 %584, %577
  %586 = lshr i32 %585, 2
  %587 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %559
  store i32 %586, i32* %587, align 4
  br label %588

588:                                              ; preds = %564, %583, %578, %563
  %589 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %559
  %590 = load i32, i32* %589, align 4
  %591 = icmp ugt i32 %590, %560
  %592 = select i1 %591, i32 %562, i32 %561
  %593 = select i1 %591, i32 %590, i32 %560
  %594 = add nuw nsw i64 %559, 1
  %595 = icmp eq i64 %594, 20
  br i1 %595, label %596, label %558

596:                                              ; preds = %588
  %597 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 2
  %598 = load i32, i32* %597, align 4
  %599 = mul nsw i32 %598, 3
  %600 = mul i32 %592, 40
  %601 = add i32 %599, %600
  %602 = lshr i32 %601, 2
  store i32 %602, i32* %597, align 4
  %603 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  %604 = load i32, i32* %603, align 4
  %605 = icmp ult i32 %604, 2
  br i1 %605, label %606, label %614

606:                                              ; preds = %596
  %607 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 4
  %608 = load i32, i32* %607, align 4
  %609 = icmp sgt i32 %602, %608
  br i1 %609, label %610, label %614

610:                                              ; preds = %606
  %611 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 8
  %612 = load i32, i32* %611, align 4
  %613 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 5
  store i32 %612, i32* %613, align 4
  br label %621

614:                                              ; preds = %596, %606
  %615 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 5
  %616 = load i32, i32* %615, align 4
  %617 = add nsw i32 %616, 1
  store i32 %617, i32* %615, align 4
  %618 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 8
  %619 = load i32, i32* %618, align 4
  %620 = icmp eq i32 %617, %619
  br i1 %620, label %621, label %650

621:                                              ; preds = %610, %614
  %622 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 8
  %623 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 5
  store i32 30, i32* %622, align 4
  store i32 0, i32* %623, align 4
  %624 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 3
  %625 = load i32, i32* %624, align 4
  %626 = shl i32 %625, 1
  %627 = icmp sgt i32 %602, %626
  br i1 %627, label %634, label %628

628:                                              ; preds = %621
  %629 = icmp sgt i32 %602, %625
  br i1 %629, label %634, label %630

630:                                              ; preds = %628
  %631 = ashr i32 %625, 1
  %632 = icmp sgt i32 %602, %631
  %633 = zext i1 %632 to i32
  br label %634

634:                                              ; preds = %621, %628, %630
  %635 = phi i32 [ 3, %621 ], [ 2, %628 ], [ %633, %630 ]
  store i32 %635, i32* %603, align 4
  %636 = load i32, i32* %19, align 16
  %637 = icmp sgt i32 %636, 0
  br i1 %637, label %639, label %638

638:                                              ; preds = %634
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %236) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %235) #5
  br label %691

639:                                              ; preds = %634
  %640 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %641 = load i32, i32* %640, align 4
  %642 = icmp eq i32 %641, 0
  br i1 %642, label %649, label %643

643:                                              ; preds = %639
  %644 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %645 = load i32, i32* %644, align 16
  %646 = load i32, i32* %105, align 8
  %647 = add nsw i32 %646, -1
  %648 = icmp eq i32 %645, %647
  br i1 %648, label %649, label %650

649:                                              ; preds = %643, %639
  call void @vp9_denoiser_set_noise_level(%struct.VP9_COMP* %0, i32 %635) #5
  br label %650

650:                                              ; preds = %643, %649, %614
  %651 = load i32, i32* %19, align 16
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %236) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %235) #5
  %652 = icmp sgt i32 %651, 0
  br i1 %652, label %653, label %691

653:                                              ; preds = %650
  %654 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %655 = load i32, i32* %654, align 4
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %663, label %657

657:                                              ; preds = %653
  %658 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %659 = load i32, i32* %658, align 16
  %660 = load i32, i32* %105, align 8
  %661 = add nsw i32 %660, -1
  %662 = icmp eq i32 %659, %661
  br i1 %662, label %663, label %691

663:                                              ; preds = %657, %653
  %664 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %237, align 8
  %665 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 1
  %666 = load i32, i32* %665, align 4
  %667 = icmp sgt i32 %666, 0
  br i1 %667, label %668, label %691

668:                                              ; preds = %663
  %669 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 13
  %670 = load i8*, i8** %669, align 8
  %671 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %664, i64 0, i32 13
  %672 = load i8*, i8** %671, align 8
  %673 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 0
  %674 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 2, i32 4
  %675 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %664, i64 0, i32 4
  br label %676

676:                                              ; preds = %676, %668
  %677 = phi i8* [ %670, %668 ], [ %684, %676 ]
  %678 = phi i8* [ %672, %668 ], [ %687, %676 ]
  %679 = phi i32 [ 0, %668 ], [ %688, %676 ]
  %680 = load i32, i32* %673, align 8
  %681 = sext i32 %680 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %677, i8* align 1 %678, i64 %681, i1 false) #5
  %682 = load i32, i32* %674, align 8
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i8, i8* %677, i64 %683
  %685 = load i32, i32* %675, align 8
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i8, i8* %678, i64 %686
  %688 = add nuw nsw i32 %679, 1
  %689 = load i32, i32* %665, align 4
  %690 = icmp slt i32 %688, %689
  br i1 %690, label %676, label %691

691:                                              ; preds = %676, %219, %657, %663, %638, %205, %650, %197, %201, %172, %170
  ret void
}

declare void @vp9_denoiser_set_noise_level(%struct.VP9_COMP*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @vp9_compute_skin_block(i8*, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
