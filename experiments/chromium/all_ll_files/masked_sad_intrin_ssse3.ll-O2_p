; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/masked_sad_intrin_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/masked_sad_intrin_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x128_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %238

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %232, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %233, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %234, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %235, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %236, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %231, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 64
  %125 = bitcast i8* %124 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1
  %127 = getelementptr inbounds i8, i8* %15, i64 64
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1
  %130 = getelementptr inbounds i8, i8* %16, i64 64
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = getelementptr inbounds i8, i8* %17, i64 64
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %135
  %137 = shufflevector <16 x i8> %129, <16 x i8> %132, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = shufflevector <16 x i8> %135, <16 x i8> %136, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %137, <16 x i8> %138) #2
  %140 = lshr <8 x i16> %139, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %141 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %140, <8 x i16> zeroinitializer) #2
  %142 = shufflevector <16 x i8> %129, <16 x i8> %132, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = shufflevector <16 x i8> %135, <16 x i8> %136, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #2
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #2
  %147 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> %146) #2
  %148 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %147, <16 x i8> %126) #2
  %149 = bitcast <2 x i64> %148 to <4 x i32>
  %150 = add <4 x i32> %123, %149
  %151 = getelementptr inbounds i8, i8* %14, i64 80
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = getelementptr inbounds i8, i8* %15, i64 80
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1
  %157 = getelementptr inbounds i8, i8* %16, i64 80
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1
  %160 = getelementptr inbounds i8, i8* %17, i64 80
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %162
  %164 = shufflevector <16 x i8> %156, <16 x i8> %159, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %164, <16 x i8> %165) #2
  %167 = lshr <8 x i16> %166, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %168 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %167, <8 x i16> zeroinitializer) #2
  %169 = shufflevector <16 x i8> %156, <16 x i8> %159, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %170 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %169, <16 x i8> %170) #2
  %172 = lshr <8 x i16> %171, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %173 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %172, <8 x i16> zeroinitializer) #2
  %174 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %168, <8 x i16> %173) #2
  %175 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %174, <16 x i8> %153) #2
  %176 = bitcast <2 x i64> %175 to <4 x i32>
  %177 = add <4 x i32> %150, %176
  %178 = getelementptr inbounds i8, i8* %14, i64 96
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = getelementptr inbounds i8, i8* %15, i64 96
  %182 = bitcast i8* %181 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = getelementptr inbounds i8, i8* %16, i64 96
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = getelementptr inbounds i8, i8* %17, i64 96
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %183, <16 x i8> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #2
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #2
  %196 = shufflevector <16 x i8> %183, <16 x i8> %186, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #2
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #2
  %201 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> %200) #2
  %202 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %201, <16 x i8> %180) #2
  %203 = bitcast <2 x i64> %202 to <4 x i32>
  %204 = add <4 x i32> %177, %203
  %205 = getelementptr inbounds i8, i8* %14, i64 112
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1
  %208 = getelementptr inbounds i8, i8* %15, i64 112
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1
  %211 = getelementptr inbounds i8, i8* %16, i64 112
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1
  %214 = getelementptr inbounds i8, i8* %17, i64 112
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %216
  %218 = shufflevector <16 x i8> %210, <16 x i8> %213, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %219 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %218, <16 x i8> %219) #2
  %221 = lshr <8 x i16> %220, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %222 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %221, <8 x i16> zeroinitializer) #2
  %223 = shufflevector <16 x i8> %210, <16 x i8> %213, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %225 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %224) #2
  %226 = lshr <8 x i16> %225, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %227 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %226, <8 x i16> zeroinitializer) #2
  %228 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> %227) #2
  %229 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %228, <16 x i8> %207) #2
  %230 = bitcast <2 x i64> %229 to <4 x i32>
  %231 = add <4 x i32> %204, %230
  %232 = getelementptr inbounds i8, i8* %14, i64 %10
  %233 = getelementptr inbounds i8, i8* %15, i64 %11
  %234 = getelementptr inbounds i8, i8* %16, i64 128
  %235 = getelementptr inbounds i8, i8* %17, i64 %12
  %236 = add nuw nsw i32 %18, 1
  %237 = icmp eq i32 %236, 128
  br i1 %237, label %463, label %13

238:                                              ; preds = %8, %238
  %239 = phi i8* [ %457, %238 ], [ %0, %8 ]
  %240 = phi i8* [ %458, %238 ], [ %4, %8 ]
  %241 = phi i8* [ %459, %238 ], [ %2, %8 ]
  %242 = phi i8* [ %460, %238 ], [ %5, %8 ]
  %243 = phi i32 [ %461, %238 ], [ 0, %8 ]
  %244 = phi <4 x i32> [ %456, %238 ], [ zeroinitializer, %8 ]
  %245 = bitcast i8* %239 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = bitcast i8* %240 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 1
  %249 = bitcast i8* %241 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1
  %251 = bitcast i8* %242 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %252
  %254 = shufflevector <16 x i8> %248, <16 x i8> %250, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %255 = shufflevector <16 x i8> %252, <16 x i8> %253, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %256 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %254, <16 x i8> %255) #2
  %257 = lshr <8 x i16> %256, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %258 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %257, <8 x i16> zeroinitializer) #2
  %259 = shufflevector <16 x i8> %248, <16 x i8> %250, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %260 = shufflevector <16 x i8> %252, <16 x i8> %253, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %261 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %259, <16 x i8> %260) #2
  %262 = lshr <8 x i16> %261, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %263 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %262, <8 x i16> zeroinitializer) #2
  %264 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %258, <8 x i16> %263) #2
  %265 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %264, <16 x i8> %246) #2
  %266 = bitcast <2 x i64> %265 to <4 x i32>
  %267 = add <4 x i32> %244, %266
  %268 = getelementptr inbounds i8, i8* %239, i64 16
  %269 = bitcast i8* %268 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1
  %271 = getelementptr inbounds i8, i8* %240, i64 16
  %272 = bitcast i8* %271 to <16 x i8>*
  %273 = load <16 x i8>, <16 x i8>* %272, align 1
  %274 = getelementptr inbounds i8, i8* %241, i64 16
  %275 = bitcast i8* %274 to <16 x i8>*
  %276 = load <16 x i8>, <16 x i8>* %275, align 1
  %277 = getelementptr inbounds i8, i8* %242, i64 16
  %278 = bitcast i8* %277 to <16 x i8>*
  %279 = load <16 x i8>, <16 x i8>* %278, align 1
  %280 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %279
  %281 = shufflevector <16 x i8> %273, <16 x i8> %276, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %282 = shufflevector <16 x i8> %279, <16 x i8> %280, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %283 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %281, <16 x i8> %282) #2
  %284 = lshr <8 x i16> %283, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %285 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %284, <8 x i16> zeroinitializer) #2
  %286 = shufflevector <16 x i8> %273, <16 x i8> %276, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %287 = shufflevector <16 x i8> %279, <16 x i8> %280, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %288 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %286, <16 x i8> %287) #2
  %289 = lshr <8 x i16> %288, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %290 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %289, <8 x i16> zeroinitializer) #2
  %291 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %285, <8 x i16> %290) #2
  %292 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %291, <16 x i8> %270) #2
  %293 = bitcast <2 x i64> %292 to <4 x i32>
  %294 = add <4 x i32> %267, %293
  %295 = getelementptr inbounds i8, i8* %239, i64 32
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %240, i64 32
  %299 = bitcast i8* %298 to <16 x i8>*
  %300 = load <16 x i8>, <16 x i8>* %299, align 1
  %301 = getelementptr inbounds i8, i8* %241, i64 32
  %302 = bitcast i8* %301 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1
  %304 = getelementptr inbounds i8, i8* %242, i64 32
  %305 = bitcast i8* %304 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 1
  %307 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %306
  %308 = shufflevector <16 x i8> %300, <16 x i8> %303, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %309 = shufflevector <16 x i8> %306, <16 x i8> %307, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %308, <16 x i8> %309) #2
  %311 = lshr <8 x i16> %310, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %312 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %311, <8 x i16> zeroinitializer) #2
  %313 = shufflevector <16 x i8> %300, <16 x i8> %303, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %314 = shufflevector <16 x i8> %306, <16 x i8> %307, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %315 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %313, <16 x i8> %314) #2
  %316 = lshr <8 x i16> %315, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %317 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %316, <8 x i16> zeroinitializer) #2
  %318 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %312, <8 x i16> %317) #2
  %319 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %318, <16 x i8> %297) #2
  %320 = bitcast <2 x i64> %319 to <4 x i32>
  %321 = add <4 x i32> %294, %320
  %322 = getelementptr inbounds i8, i8* %239, i64 48
  %323 = bitcast i8* %322 to <16 x i8>*
  %324 = load <16 x i8>, <16 x i8>* %323, align 1
  %325 = getelementptr inbounds i8, i8* %240, i64 48
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1
  %328 = getelementptr inbounds i8, i8* %241, i64 48
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1
  %331 = getelementptr inbounds i8, i8* %242, i64 48
  %332 = bitcast i8* %331 to <16 x i8>*
  %333 = load <16 x i8>, <16 x i8>* %332, align 1
  %334 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %333
  %335 = shufflevector <16 x i8> %327, <16 x i8> %330, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %336 = shufflevector <16 x i8> %333, <16 x i8> %334, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %337 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %335, <16 x i8> %336) #2
  %338 = lshr <8 x i16> %337, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %339 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %338, <8 x i16> zeroinitializer) #2
  %340 = shufflevector <16 x i8> %327, <16 x i8> %330, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %341 = shufflevector <16 x i8> %333, <16 x i8> %334, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %342 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %340, <16 x i8> %341) #2
  %343 = lshr <8 x i16> %342, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %344 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %343, <8 x i16> zeroinitializer) #2
  %345 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %339, <8 x i16> %344) #2
  %346 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %345, <16 x i8> %324) #2
  %347 = bitcast <2 x i64> %346 to <4 x i32>
  %348 = add <4 x i32> %321, %347
  %349 = getelementptr inbounds i8, i8* %239, i64 64
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = getelementptr inbounds i8, i8* %240, i64 64
  %353 = bitcast i8* %352 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1
  %355 = getelementptr inbounds i8, i8* %241, i64 64
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1
  %358 = getelementptr inbounds i8, i8* %242, i64 64
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1
  %361 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %360
  %362 = shufflevector <16 x i8> %354, <16 x i8> %357, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %363 = shufflevector <16 x i8> %360, <16 x i8> %361, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %364 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %362, <16 x i8> %363) #2
  %365 = lshr <8 x i16> %364, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %366 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %365, <8 x i16> zeroinitializer) #2
  %367 = shufflevector <16 x i8> %354, <16 x i8> %357, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %368 = shufflevector <16 x i8> %360, <16 x i8> %361, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %369 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %367, <16 x i8> %368) #2
  %370 = lshr <8 x i16> %369, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %371 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %370, <8 x i16> zeroinitializer) #2
  %372 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %366, <8 x i16> %371) #2
  %373 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %372, <16 x i8> %351) #2
  %374 = bitcast <2 x i64> %373 to <4 x i32>
  %375 = add <4 x i32> %348, %374
  %376 = getelementptr inbounds i8, i8* %239, i64 80
  %377 = bitcast i8* %376 to <16 x i8>*
  %378 = load <16 x i8>, <16 x i8>* %377, align 1
  %379 = getelementptr inbounds i8, i8* %240, i64 80
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1
  %382 = getelementptr inbounds i8, i8* %241, i64 80
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1
  %385 = getelementptr inbounds i8, i8* %242, i64 80
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1
  %388 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %387
  %389 = shufflevector <16 x i8> %381, <16 x i8> %384, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %390 = shufflevector <16 x i8> %387, <16 x i8> %388, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %391 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %389, <16 x i8> %390) #2
  %392 = lshr <8 x i16> %391, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %393 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %392, <8 x i16> zeroinitializer) #2
  %394 = shufflevector <16 x i8> %381, <16 x i8> %384, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %395 = shufflevector <16 x i8> %387, <16 x i8> %388, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %396 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %394, <16 x i8> %395) #2
  %397 = lshr <8 x i16> %396, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %398 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %397, <8 x i16> zeroinitializer) #2
  %399 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %393, <8 x i16> %398) #2
  %400 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %399, <16 x i8> %378) #2
  %401 = bitcast <2 x i64> %400 to <4 x i32>
  %402 = add <4 x i32> %375, %401
  %403 = getelementptr inbounds i8, i8* %239, i64 96
  %404 = bitcast i8* %403 to <16 x i8>*
  %405 = load <16 x i8>, <16 x i8>* %404, align 1
  %406 = getelementptr inbounds i8, i8* %240, i64 96
  %407 = bitcast i8* %406 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1
  %409 = getelementptr inbounds i8, i8* %241, i64 96
  %410 = bitcast i8* %409 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1
  %412 = getelementptr inbounds i8, i8* %242, i64 96
  %413 = bitcast i8* %412 to <16 x i8>*
  %414 = load <16 x i8>, <16 x i8>* %413, align 1
  %415 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %414
  %416 = shufflevector <16 x i8> %408, <16 x i8> %411, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %417 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %418 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %416, <16 x i8> %417) #2
  %419 = lshr <8 x i16> %418, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %420 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %419, <8 x i16> zeroinitializer) #2
  %421 = shufflevector <16 x i8> %408, <16 x i8> %411, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %422 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %423 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %421, <16 x i8> %422) #2
  %424 = lshr <8 x i16> %423, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %425 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %424, <8 x i16> zeroinitializer) #2
  %426 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %420, <8 x i16> %425) #2
  %427 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %426, <16 x i8> %405) #2
  %428 = bitcast <2 x i64> %427 to <4 x i32>
  %429 = add <4 x i32> %402, %428
  %430 = getelementptr inbounds i8, i8* %239, i64 112
  %431 = bitcast i8* %430 to <16 x i8>*
  %432 = load <16 x i8>, <16 x i8>* %431, align 1
  %433 = getelementptr inbounds i8, i8* %240, i64 112
  %434 = bitcast i8* %433 to <16 x i8>*
  %435 = load <16 x i8>, <16 x i8>* %434, align 1
  %436 = getelementptr inbounds i8, i8* %241, i64 112
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1
  %439 = getelementptr inbounds i8, i8* %242, i64 112
  %440 = bitcast i8* %439 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1
  %442 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %441
  %443 = shufflevector <16 x i8> %435, <16 x i8> %438, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %444 = shufflevector <16 x i8> %441, <16 x i8> %442, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %445 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %443, <16 x i8> %444) #2
  %446 = lshr <8 x i16> %445, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %447 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %446, <8 x i16> zeroinitializer) #2
  %448 = shufflevector <16 x i8> %435, <16 x i8> %438, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %449 = shufflevector <16 x i8> %441, <16 x i8> %442, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %450 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %448, <16 x i8> %449) #2
  %451 = lshr <8 x i16> %450, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %452 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %451, <8 x i16> zeroinitializer) #2
  %453 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %447, <8 x i16> %452) #2
  %454 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %453, <16 x i8> %432) #2
  %455 = bitcast <2 x i64> %454 to <4 x i32>
  %456 = add <4 x i32> %429, %455
  %457 = getelementptr inbounds i8, i8* %239, i64 %10
  %458 = getelementptr inbounds i8, i8* %240, i64 128
  %459 = getelementptr inbounds i8, i8* %241, i64 %11
  %460 = getelementptr inbounds i8, i8* %242, i64 %12
  %461 = add nuw nsw i32 %243, 1
  %462 = icmp eq i32 %461, 128
  br i1 %462, label %463, label %238

463:                                              ; preds = %238, %13
  %464 = phi <4 x i32> [ %231, %13 ], [ %456, %238 ]
  %465 = extractelement <4 x i32> %464, i32 0
  %466 = bitcast <4 x i32> %464 to <16 x i8>
  %467 = shufflevector <16 x i8> %466, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %468 = bitcast <16 x i8> %467 to <4 x i32>
  %469 = extractelement <4 x i32> %468, i32 0
  %470 = add nsw i32 %469, %465
  ret i32 %470
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x64_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %238

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %232, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %233, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %234, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %235, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %236, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %231, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 64
  %125 = bitcast i8* %124 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1
  %127 = getelementptr inbounds i8, i8* %15, i64 64
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1
  %130 = getelementptr inbounds i8, i8* %16, i64 64
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = getelementptr inbounds i8, i8* %17, i64 64
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %135
  %137 = shufflevector <16 x i8> %129, <16 x i8> %132, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = shufflevector <16 x i8> %135, <16 x i8> %136, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %137, <16 x i8> %138) #2
  %140 = lshr <8 x i16> %139, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %141 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %140, <8 x i16> zeroinitializer) #2
  %142 = shufflevector <16 x i8> %129, <16 x i8> %132, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = shufflevector <16 x i8> %135, <16 x i8> %136, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #2
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #2
  %147 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> %146) #2
  %148 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %147, <16 x i8> %126) #2
  %149 = bitcast <2 x i64> %148 to <4 x i32>
  %150 = add <4 x i32> %123, %149
  %151 = getelementptr inbounds i8, i8* %14, i64 80
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = getelementptr inbounds i8, i8* %15, i64 80
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1
  %157 = getelementptr inbounds i8, i8* %16, i64 80
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1
  %160 = getelementptr inbounds i8, i8* %17, i64 80
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %162
  %164 = shufflevector <16 x i8> %156, <16 x i8> %159, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %164, <16 x i8> %165) #2
  %167 = lshr <8 x i16> %166, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %168 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %167, <8 x i16> zeroinitializer) #2
  %169 = shufflevector <16 x i8> %156, <16 x i8> %159, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %170 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %169, <16 x i8> %170) #2
  %172 = lshr <8 x i16> %171, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %173 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %172, <8 x i16> zeroinitializer) #2
  %174 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %168, <8 x i16> %173) #2
  %175 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %174, <16 x i8> %153) #2
  %176 = bitcast <2 x i64> %175 to <4 x i32>
  %177 = add <4 x i32> %150, %176
  %178 = getelementptr inbounds i8, i8* %14, i64 96
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = getelementptr inbounds i8, i8* %15, i64 96
  %182 = bitcast i8* %181 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = getelementptr inbounds i8, i8* %16, i64 96
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = getelementptr inbounds i8, i8* %17, i64 96
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %183, <16 x i8> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #2
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #2
  %196 = shufflevector <16 x i8> %183, <16 x i8> %186, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #2
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #2
  %201 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> %200) #2
  %202 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %201, <16 x i8> %180) #2
  %203 = bitcast <2 x i64> %202 to <4 x i32>
  %204 = add <4 x i32> %177, %203
  %205 = getelementptr inbounds i8, i8* %14, i64 112
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1
  %208 = getelementptr inbounds i8, i8* %15, i64 112
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1
  %211 = getelementptr inbounds i8, i8* %16, i64 112
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1
  %214 = getelementptr inbounds i8, i8* %17, i64 112
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %216
  %218 = shufflevector <16 x i8> %210, <16 x i8> %213, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %219 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %218, <16 x i8> %219) #2
  %221 = lshr <8 x i16> %220, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %222 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %221, <8 x i16> zeroinitializer) #2
  %223 = shufflevector <16 x i8> %210, <16 x i8> %213, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %225 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %224) #2
  %226 = lshr <8 x i16> %225, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %227 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %226, <8 x i16> zeroinitializer) #2
  %228 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> %227) #2
  %229 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %228, <16 x i8> %207) #2
  %230 = bitcast <2 x i64> %229 to <4 x i32>
  %231 = add <4 x i32> %204, %230
  %232 = getelementptr inbounds i8, i8* %14, i64 %10
  %233 = getelementptr inbounds i8, i8* %15, i64 %11
  %234 = getelementptr inbounds i8, i8* %16, i64 128
  %235 = getelementptr inbounds i8, i8* %17, i64 %12
  %236 = add nuw nsw i32 %18, 1
  %237 = icmp eq i32 %236, 64
  br i1 %237, label %463, label %13

238:                                              ; preds = %8, %238
  %239 = phi i8* [ %457, %238 ], [ %0, %8 ]
  %240 = phi i8* [ %458, %238 ], [ %4, %8 ]
  %241 = phi i8* [ %459, %238 ], [ %2, %8 ]
  %242 = phi i8* [ %460, %238 ], [ %5, %8 ]
  %243 = phi i32 [ %461, %238 ], [ 0, %8 ]
  %244 = phi <4 x i32> [ %456, %238 ], [ zeroinitializer, %8 ]
  %245 = bitcast i8* %239 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = bitcast i8* %240 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 1
  %249 = bitcast i8* %241 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1
  %251 = bitcast i8* %242 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %252
  %254 = shufflevector <16 x i8> %248, <16 x i8> %250, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %255 = shufflevector <16 x i8> %252, <16 x i8> %253, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %256 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %254, <16 x i8> %255) #2
  %257 = lshr <8 x i16> %256, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %258 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %257, <8 x i16> zeroinitializer) #2
  %259 = shufflevector <16 x i8> %248, <16 x i8> %250, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %260 = shufflevector <16 x i8> %252, <16 x i8> %253, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %261 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %259, <16 x i8> %260) #2
  %262 = lshr <8 x i16> %261, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %263 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %262, <8 x i16> zeroinitializer) #2
  %264 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %258, <8 x i16> %263) #2
  %265 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %264, <16 x i8> %246) #2
  %266 = bitcast <2 x i64> %265 to <4 x i32>
  %267 = add <4 x i32> %244, %266
  %268 = getelementptr inbounds i8, i8* %239, i64 16
  %269 = bitcast i8* %268 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1
  %271 = getelementptr inbounds i8, i8* %240, i64 16
  %272 = bitcast i8* %271 to <16 x i8>*
  %273 = load <16 x i8>, <16 x i8>* %272, align 1
  %274 = getelementptr inbounds i8, i8* %241, i64 16
  %275 = bitcast i8* %274 to <16 x i8>*
  %276 = load <16 x i8>, <16 x i8>* %275, align 1
  %277 = getelementptr inbounds i8, i8* %242, i64 16
  %278 = bitcast i8* %277 to <16 x i8>*
  %279 = load <16 x i8>, <16 x i8>* %278, align 1
  %280 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %279
  %281 = shufflevector <16 x i8> %273, <16 x i8> %276, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %282 = shufflevector <16 x i8> %279, <16 x i8> %280, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %283 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %281, <16 x i8> %282) #2
  %284 = lshr <8 x i16> %283, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %285 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %284, <8 x i16> zeroinitializer) #2
  %286 = shufflevector <16 x i8> %273, <16 x i8> %276, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %287 = shufflevector <16 x i8> %279, <16 x i8> %280, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %288 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %286, <16 x i8> %287) #2
  %289 = lshr <8 x i16> %288, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %290 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %289, <8 x i16> zeroinitializer) #2
  %291 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %285, <8 x i16> %290) #2
  %292 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %291, <16 x i8> %270) #2
  %293 = bitcast <2 x i64> %292 to <4 x i32>
  %294 = add <4 x i32> %267, %293
  %295 = getelementptr inbounds i8, i8* %239, i64 32
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %240, i64 32
  %299 = bitcast i8* %298 to <16 x i8>*
  %300 = load <16 x i8>, <16 x i8>* %299, align 1
  %301 = getelementptr inbounds i8, i8* %241, i64 32
  %302 = bitcast i8* %301 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1
  %304 = getelementptr inbounds i8, i8* %242, i64 32
  %305 = bitcast i8* %304 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 1
  %307 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %306
  %308 = shufflevector <16 x i8> %300, <16 x i8> %303, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %309 = shufflevector <16 x i8> %306, <16 x i8> %307, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %308, <16 x i8> %309) #2
  %311 = lshr <8 x i16> %310, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %312 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %311, <8 x i16> zeroinitializer) #2
  %313 = shufflevector <16 x i8> %300, <16 x i8> %303, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %314 = shufflevector <16 x i8> %306, <16 x i8> %307, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %315 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %313, <16 x i8> %314) #2
  %316 = lshr <8 x i16> %315, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %317 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %316, <8 x i16> zeroinitializer) #2
  %318 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %312, <8 x i16> %317) #2
  %319 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %318, <16 x i8> %297) #2
  %320 = bitcast <2 x i64> %319 to <4 x i32>
  %321 = add <4 x i32> %294, %320
  %322 = getelementptr inbounds i8, i8* %239, i64 48
  %323 = bitcast i8* %322 to <16 x i8>*
  %324 = load <16 x i8>, <16 x i8>* %323, align 1
  %325 = getelementptr inbounds i8, i8* %240, i64 48
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1
  %328 = getelementptr inbounds i8, i8* %241, i64 48
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1
  %331 = getelementptr inbounds i8, i8* %242, i64 48
  %332 = bitcast i8* %331 to <16 x i8>*
  %333 = load <16 x i8>, <16 x i8>* %332, align 1
  %334 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %333
  %335 = shufflevector <16 x i8> %327, <16 x i8> %330, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %336 = shufflevector <16 x i8> %333, <16 x i8> %334, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %337 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %335, <16 x i8> %336) #2
  %338 = lshr <8 x i16> %337, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %339 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %338, <8 x i16> zeroinitializer) #2
  %340 = shufflevector <16 x i8> %327, <16 x i8> %330, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %341 = shufflevector <16 x i8> %333, <16 x i8> %334, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %342 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %340, <16 x i8> %341) #2
  %343 = lshr <8 x i16> %342, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %344 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %343, <8 x i16> zeroinitializer) #2
  %345 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %339, <8 x i16> %344) #2
  %346 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %345, <16 x i8> %324) #2
  %347 = bitcast <2 x i64> %346 to <4 x i32>
  %348 = add <4 x i32> %321, %347
  %349 = getelementptr inbounds i8, i8* %239, i64 64
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = getelementptr inbounds i8, i8* %240, i64 64
  %353 = bitcast i8* %352 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1
  %355 = getelementptr inbounds i8, i8* %241, i64 64
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1
  %358 = getelementptr inbounds i8, i8* %242, i64 64
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1
  %361 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %360
  %362 = shufflevector <16 x i8> %354, <16 x i8> %357, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %363 = shufflevector <16 x i8> %360, <16 x i8> %361, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %364 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %362, <16 x i8> %363) #2
  %365 = lshr <8 x i16> %364, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %366 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %365, <8 x i16> zeroinitializer) #2
  %367 = shufflevector <16 x i8> %354, <16 x i8> %357, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %368 = shufflevector <16 x i8> %360, <16 x i8> %361, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %369 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %367, <16 x i8> %368) #2
  %370 = lshr <8 x i16> %369, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %371 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %370, <8 x i16> zeroinitializer) #2
  %372 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %366, <8 x i16> %371) #2
  %373 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %372, <16 x i8> %351) #2
  %374 = bitcast <2 x i64> %373 to <4 x i32>
  %375 = add <4 x i32> %348, %374
  %376 = getelementptr inbounds i8, i8* %239, i64 80
  %377 = bitcast i8* %376 to <16 x i8>*
  %378 = load <16 x i8>, <16 x i8>* %377, align 1
  %379 = getelementptr inbounds i8, i8* %240, i64 80
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1
  %382 = getelementptr inbounds i8, i8* %241, i64 80
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1
  %385 = getelementptr inbounds i8, i8* %242, i64 80
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1
  %388 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %387
  %389 = shufflevector <16 x i8> %381, <16 x i8> %384, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %390 = shufflevector <16 x i8> %387, <16 x i8> %388, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %391 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %389, <16 x i8> %390) #2
  %392 = lshr <8 x i16> %391, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %393 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %392, <8 x i16> zeroinitializer) #2
  %394 = shufflevector <16 x i8> %381, <16 x i8> %384, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %395 = shufflevector <16 x i8> %387, <16 x i8> %388, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %396 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %394, <16 x i8> %395) #2
  %397 = lshr <8 x i16> %396, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %398 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %397, <8 x i16> zeroinitializer) #2
  %399 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %393, <8 x i16> %398) #2
  %400 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %399, <16 x i8> %378) #2
  %401 = bitcast <2 x i64> %400 to <4 x i32>
  %402 = add <4 x i32> %375, %401
  %403 = getelementptr inbounds i8, i8* %239, i64 96
  %404 = bitcast i8* %403 to <16 x i8>*
  %405 = load <16 x i8>, <16 x i8>* %404, align 1
  %406 = getelementptr inbounds i8, i8* %240, i64 96
  %407 = bitcast i8* %406 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1
  %409 = getelementptr inbounds i8, i8* %241, i64 96
  %410 = bitcast i8* %409 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1
  %412 = getelementptr inbounds i8, i8* %242, i64 96
  %413 = bitcast i8* %412 to <16 x i8>*
  %414 = load <16 x i8>, <16 x i8>* %413, align 1
  %415 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %414
  %416 = shufflevector <16 x i8> %408, <16 x i8> %411, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %417 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %418 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %416, <16 x i8> %417) #2
  %419 = lshr <8 x i16> %418, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %420 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %419, <8 x i16> zeroinitializer) #2
  %421 = shufflevector <16 x i8> %408, <16 x i8> %411, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %422 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %423 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %421, <16 x i8> %422) #2
  %424 = lshr <8 x i16> %423, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %425 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %424, <8 x i16> zeroinitializer) #2
  %426 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %420, <8 x i16> %425) #2
  %427 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %426, <16 x i8> %405) #2
  %428 = bitcast <2 x i64> %427 to <4 x i32>
  %429 = add <4 x i32> %402, %428
  %430 = getelementptr inbounds i8, i8* %239, i64 112
  %431 = bitcast i8* %430 to <16 x i8>*
  %432 = load <16 x i8>, <16 x i8>* %431, align 1
  %433 = getelementptr inbounds i8, i8* %240, i64 112
  %434 = bitcast i8* %433 to <16 x i8>*
  %435 = load <16 x i8>, <16 x i8>* %434, align 1
  %436 = getelementptr inbounds i8, i8* %241, i64 112
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1
  %439 = getelementptr inbounds i8, i8* %242, i64 112
  %440 = bitcast i8* %439 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1
  %442 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %441
  %443 = shufflevector <16 x i8> %435, <16 x i8> %438, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %444 = shufflevector <16 x i8> %441, <16 x i8> %442, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %445 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %443, <16 x i8> %444) #2
  %446 = lshr <8 x i16> %445, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %447 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %446, <8 x i16> zeroinitializer) #2
  %448 = shufflevector <16 x i8> %435, <16 x i8> %438, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %449 = shufflevector <16 x i8> %441, <16 x i8> %442, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %450 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %448, <16 x i8> %449) #2
  %451 = lshr <8 x i16> %450, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %452 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %451, <8 x i16> zeroinitializer) #2
  %453 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %447, <8 x i16> %452) #2
  %454 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %453, <16 x i8> %432) #2
  %455 = bitcast <2 x i64> %454 to <4 x i32>
  %456 = add <4 x i32> %429, %455
  %457 = getelementptr inbounds i8, i8* %239, i64 %10
  %458 = getelementptr inbounds i8, i8* %240, i64 128
  %459 = getelementptr inbounds i8, i8* %241, i64 %11
  %460 = getelementptr inbounds i8, i8* %242, i64 %12
  %461 = add nuw nsw i32 %243, 1
  %462 = icmp eq i32 %461, 64
  br i1 %462, label %463, label %238

463:                                              ; preds = %238, %13
  %464 = phi <4 x i32> [ %231, %13 ], [ %456, %238 ]
  %465 = extractelement <4 x i32> %464, i32 0
  %466 = bitcast <4 x i32> %464 to <16 x i8>
  %467 = shufflevector <16 x i8> %466, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %468 = bitcast <16 x i8> %467 to <4 x i32>
  %469 = extractelement <4 x i32> %468, i32 0
  %470 = add nsw i32 %469, %465
  ret i32 %470
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x128_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %130

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %124, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %125, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %126, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %127, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %128, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %123, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 %10
  %125 = getelementptr inbounds i8, i8* %15, i64 %11
  %126 = getelementptr inbounds i8, i8* %16, i64 64
  %127 = getelementptr inbounds i8, i8* %17, i64 %12
  %128 = add nuw nsw i32 %18, 1
  %129 = icmp eq i32 %128, 128
  br i1 %129, label %247, label %13

130:                                              ; preds = %8, %130
  %131 = phi i8* [ %241, %130 ], [ %0, %8 ]
  %132 = phi i8* [ %242, %130 ], [ %4, %8 ]
  %133 = phi i8* [ %243, %130 ], [ %2, %8 ]
  %134 = phi i8* [ %244, %130 ], [ %5, %8 ]
  %135 = phi i32 [ %245, %130 ], [ 0, %8 ]
  %136 = phi <4 x i32> [ %240, %130 ], [ zeroinitializer, %8 ]
  %137 = bitcast i8* %131 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %132 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = bitcast i8* %133 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1
  %143 = bitcast i8* %134 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %147) #2
  %149 = lshr <8 x i16> %148, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %150 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %149, <8 x i16> zeroinitializer) #2
  %151 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %151, <16 x i8> %152) #2
  %154 = lshr <8 x i16> %153, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %155 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %154, <8 x i16> zeroinitializer) #2
  %156 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> %155) #2
  %157 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %156, <16 x i8> %138) #2
  %158 = bitcast <2 x i64> %157 to <4 x i32>
  %159 = add <4 x i32> %136, %158
  %160 = getelementptr inbounds i8, i8* %131, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %132, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = getelementptr inbounds i8, i8* %133, i64 16
  %167 = bitcast i8* %166 to <16 x i8>*
  %168 = load <16 x i8>, <16 x i8>* %167, align 1
  %169 = getelementptr inbounds i8, i8* %134, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %171
  %173 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %174) #2
  %176 = lshr <8 x i16> %175, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %177 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %176, <8 x i16> zeroinitializer) #2
  %178 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %179) #2
  %181 = lshr <8 x i16> %180, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #2
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %177, <8 x i16> %182) #2
  %184 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %183, <16 x i8> %162) #2
  %185 = bitcast <2 x i64> %184 to <4 x i32>
  %186 = add <4 x i32> %159, %185
  %187 = getelementptr inbounds i8, i8* %131, i64 32
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = getelementptr inbounds i8, i8* %132, i64 32
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %133, i64 32
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %134, i64 32
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %198
  %200 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #2
  %203 = lshr <8 x i16> %202, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %203, <8 x i16> zeroinitializer) #2
  %205 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %206 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %207 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %205, <16 x i8> %206) #2
  %208 = lshr <8 x i16> %207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %209 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %208, <8 x i16> zeroinitializer) #2
  %210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %204, <8 x i16> %209) #2
  %211 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %210, <16 x i8> %189) #2
  %212 = bitcast <2 x i64> %211 to <4 x i32>
  %213 = add <4 x i32> %186, %212
  %214 = getelementptr inbounds i8, i8* %131, i64 48
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %132, i64 48
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %133, i64 48
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %134, i64 48
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #2
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #2
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #2
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #2
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> %236) #2
  %238 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %237, <16 x i8> %216) #2
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = add <4 x i32> %213, %239
  %241 = getelementptr inbounds i8, i8* %131, i64 %10
  %242 = getelementptr inbounds i8, i8* %132, i64 64
  %243 = getelementptr inbounds i8, i8* %133, i64 %11
  %244 = getelementptr inbounds i8, i8* %134, i64 %12
  %245 = add nuw nsw i32 %135, 1
  %246 = icmp eq i32 %245, 128
  br i1 %246, label %247, label %130

247:                                              ; preds = %130, %13
  %248 = phi <4 x i32> [ %123, %13 ], [ %240, %130 ]
  %249 = extractelement <4 x i32> %248, i32 0
  %250 = bitcast <4 x i32> %248 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  %254 = add nsw i32 %253, %249
  ret i32 %254
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x64_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %130

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %124, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %125, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %126, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %127, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %128, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %123, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 %10
  %125 = getelementptr inbounds i8, i8* %15, i64 %11
  %126 = getelementptr inbounds i8, i8* %16, i64 64
  %127 = getelementptr inbounds i8, i8* %17, i64 %12
  %128 = add nuw nsw i32 %18, 1
  %129 = icmp eq i32 %128, 64
  br i1 %129, label %247, label %13

130:                                              ; preds = %8, %130
  %131 = phi i8* [ %241, %130 ], [ %0, %8 ]
  %132 = phi i8* [ %242, %130 ], [ %4, %8 ]
  %133 = phi i8* [ %243, %130 ], [ %2, %8 ]
  %134 = phi i8* [ %244, %130 ], [ %5, %8 ]
  %135 = phi i32 [ %245, %130 ], [ 0, %8 ]
  %136 = phi <4 x i32> [ %240, %130 ], [ zeroinitializer, %8 ]
  %137 = bitcast i8* %131 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %132 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = bitcast i8* %133 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1
  %143 = bitcast i8* %134 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %147) #2
  %149 = lshr <8 x i16> %148, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %150 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %149, <8 x i16> zeroinitializer) #2
  %151 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %151, <16 x i8> %152) #2
  %154 = lshr <8 x i16> %153, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %155 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %154, <8 x i16> zeroinitializer) #2
  %156 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> %155) #2
  %157 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %156, <16 x i8> %138) #2
  %158 = bitcast <2 x i64> %157 to <4 x i32>
  %159 = add <4 x i32> %136, %158
  %160 = getelementptr inbounds i8, i8* %131, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %132, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = getelementptr inbounds i8, i8* %133, i64 16
  %167 = bitcast i8* %166 to <16 x i8>*
  %168 = load <16 x i8>, <16 x i8>* %167, align 1
  %169 = getelementptr inbounds i8, i8* %134, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %171
  %173 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %174) #2
  %176 = lshr <8 x i16> %175, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %177 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %176, <8 x i16> zeroinitializer) #2
  %178 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %179) #2
  %181 = lshr <8 x i16> %180, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #2
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %177, <8 x i16> %182) #2
  %184 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %183, <16 x i8> %162) #2
  %185 = bitcast <2 x i64> %184 to <4 x i32>
  %186 = add <4 x i32> %159, %185
  %187 = getelementptr inbounds i8, i8* %131, i64 32
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = getelementptr inbounds i8, i8* %132, i64 32
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %133, i64 32
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %134, i64 32
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %198
  %200 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #2
  %203 = lshr <8 x i16> %202, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %203, <8 x i16> zeroinitializer) #2
  %205 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %206 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %207 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %205, <16 x i8> %206) #2
  %208 = lshr <8 x i16> %207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %209 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %208, <8 x i16> zeroinitializer) #2
  %210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %204, <8 x i16> %209) #2
  %211 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %210, <16 x i8> %189) #2
  %212 = bitcast <2 x i64> %211 to <4 x i32>
  %213 = add <4 x i32> %186, %212
  %214 = getelementptr inbounds i8, i8* %131, i64 48
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %132, i64 48
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %133, i64 48
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %134, i64 48
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #2
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #2
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #2
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #2
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> %236) #2
  %238 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %237, <16 x i8> %216) #2
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = add <4 x i32> %213, %239
  %241 = getelementptr inbounds i8, i8* %131, i64 %10
  %242 = getelementptr inbounds i8, i8* %132, i64 64
  %243 = getelementptr inbounds i8, i8* %133, i64 %11
  %244 = getelementptr inbounds i8, i8* %134, i64 %12
  %245 = add nuw nsw i32 %135, 1
  %246 = icmp eq i32 %245, 64
  br i1 %246, label %247, label %130

247:                                              ; preds = %130, %13
  %248 = phi <4 x i32> [ %123, %13 ], [ %240, %130 ]
  %249 = extractelement <4 x i32> %248, i32 0
  %250 = bitcast <4 x i32> %248 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  %254 = add nsw i32 %253, %249
  ret i32 %254
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x32_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %130

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %124, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %125, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %126, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %127, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %128, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %123, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 %10
  %125 = getelementptr inbounds i8, i8* %15, i64 %11
  %126 = getelementptr inbounds i8, i8* %16, i64 64
  %127 = getelementptr inbounds i8, i8* %17, i64 %12
  %128 = add nuw nsw i32 %18, 1
  %129 = icmp eq i32 %128, 32
  br i1 %129, label %247, label %13

130:                                              ; preds = %8, %130
  %131 = phi i8* [ %241, %130 ], [ %0, %8 ]
  %132 = phi i8* [ %242, %130 ], [ %4, %8 ]
  %133 = phi i8* [ %243, %130 ], [ %2, %8 ]
  %134 = phi i8* [ %244, %130 ], [ %5, %8 ]
  %135 = phi i32 [ %245, %130 ], [ 0, %8 ]
  %136 = phi <4 x i32> [ %240, %130 ], [ zeroinitializer, %8 ]
  %137 = bitcast i8* %131 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %132 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = bitcast i8* %133 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1
  %143 = bitcast i8* %134 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %147) #2
  %149 = lshr <8 x i16> %148, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %150 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %149, <8 x i16> zeroinitializer) #2
  %151 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %151, <16 x i8> %152) #2
  %154 = lshr <8 x i16> %153, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %155 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %154, <8 x i16> zeroinitializer) #2
  %156 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> %155) #2
  %157 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %156, <16 x i8> %138) #2
  %158 = bitcast <2 x i64> %157 to <4 x i32>
  %159 = add <4 x i32> %136, %158
  %160 = getelementptr inbounds i8, i8* %131, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %132, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = getelementptr inbounds i8, i8* %133, i64 16
  %167 = bitcast i8* %166 to <16 x i8>*
  %168 = load <16 x i8>, <16 x i8>* %167, align 1
  %169 = getelementptr inbounds i8, i8* %134, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %171
  %173 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %174) #2
  %176 = lshr <8 x i16> %175, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %177 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %176, <8 x i16> zeroinitializer) #2
  %178 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %179) #2
  %181 = lshr <8 x i16> %180, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #2
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %177, <8 x i16> %182) #2
  %184 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %183, <16 x i8> %162) #2
  %185 = bitcast <2 x i64> %184 to <4 x i32>
  %186 = add <4 x i32> %159, %185
  %187 = getelementptr inbounds i8, i8* %131, i64 32
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = getelementptr inbounds i8, i8* %132, i64 32
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %133, i64 32
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %134, i64 32
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %198
  %200 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #2
  %203 = lshr <8 x i16> %202, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %203, <8 x i16> zeroinitializer) #2
  %205 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %206 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %207 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %205, <16 x i8> %206) #2
  %208 = lshr <8 x i16> %207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %209 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %208, <8 x i16> zeroinitializer) #2
  %210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %204, <8 x i16> %209) #2
  %211 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %210, <16 x i8> %189) #2
  %212 = bitcast <2 x i64> %211 to <4 x i32>
  %213 = add <4 x i32> %186, %212
  %214 = getelementptr inbounds i8, i8* %131, i64 48
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %132, i64 48
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %133, i64 48
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %134, i64 48
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #2
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #2
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #2
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #2
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> %236) #2
  %238 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %237, <16 x i8> %216) #2
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = add <4 x i32> %213, %239
  %241 = getelementptr inbounds i8, i8* %131, i64 %10
  %242 = getelementptr inbounds i8, i8* %132, i64 64
  %243 = getelementptr inbounds i8, i8* %133, i64 %11
  %244 = getelementptr inbounds i8, i8* %134, i64 %12
  %245 = add nuw nsw i32 %135, 1
  %246 = icmp eq i32 %245, 32
  br i1 %246, label %247, label %130

247:                                              ; preds = %130, %13
  %248 = phi <4 x i32> [ %123, %13 ], [ %240, %130 ]
  %249 = extractelement <4 x i32> %248, i32 0
  %250 = bitcast <4 x i32> %248 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  %254 = add nsw i32 %253, %249
  ret i32 %254
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x64_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %76

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %70, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %71, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %72, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %73, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %74, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %69, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 %10
  %71 = getelementptr inbounds i8, i8* %15, i64 %11
  %72 = getelementptr inbounds i8, i8* %16, i64 32
  %73 = getelementptr inbounds i8, i8* %17, i64 %12
  %74 = add nuw nsw i32 %18, 1
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %139, label %13

76:                                               ; preds = %8, %76
  %77 = phi i8* [ %133, %76 ], [ %0, %8 ]
  %78 = phi i8* [ %134, %76 ], [ %4, %8 ]
  %79 = phi i8* [ %135, %76 ], [ %2, %8 ]
  %80 = phi i8* [ %136, %76 ], [ %5, %8 ]
  %81 = phi i32 [ %137, %76 ], [ 0, %8 ]
  %82 = phi <4 x i32> [ %132, %76 ], [ zeroinitializer, %8 ]
  %83 = bitcast i8* %77 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1
  %85 = bitcast i8* %78 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %79 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast i8* %80 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %90
  %92 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %92, <16 x i8> %93) #2
  %95 = lshr <8 x i16> %94, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %96 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %95, <8 x i16> zeroinitializer) #2
  %97 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %98) #2
  %100 = lshr <8 x i16> %99, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %100, <8 x i16> zeroinitializer) #2
  %102 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %96, <8 x i16> %101) #2
  %103 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %102, <16 x i8> %84) #2
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = add <4 x i32> %82, %104
  %106 = getelementptr inbounds i8, i8* %77, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %78, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = getelementptr inbounds i8, i8* %79, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1
  %115 = getelementptr inbounds i8, i8* %80, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #2
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #2
  %124 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #2
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #2
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %128) #2
  %130 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %129, <16 x i8> %108) #2
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = add <4 x i32> %105, %131
  %133 = getelementptr inbounds i8, i8* %77, i64 %10
  %134 = getelementptr inbounds i8, i8* %78, i64 32
  %135 = getelementptr inbounds i8, i8* %79, i64 %11
  %136 = getelementptr inbounds i8, i8* %80, i64 %12
  %137 = add nuw nsw i32 %81, 1
  %138 = icmp eq i32 %137, 64
  br i1 %138, label %139, label %76

139:                                              ; preds = %76, %13
  %140 = phi <4 x i32> [ %69, %13 ], [ %132, %76 ]
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = bitcast <4 x i32> %140 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = add nsw i32 %145, %141
  ret i32 %146
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x32_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %76

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %70, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %71, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %72, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %73, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %74, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %69, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 %10
  %71 = getelementptr inbounds i8, i8* %15, i64 %11
  %72 = getelementptr inbounds i8, i8* %16, i64 32
  %73 = getelementptr inbounds i8, i8* %17, i64 %12
  %74 = add nuw nsw i32 %18, 1
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %139, label %13

76:                                               ; preds = %8, %76
  %77 = phi i8* [ %133, %76 ], [ %0, %8 ]
  %78 = phi i8* [ %134, %76 ], [ %4, %8 ]
  %79 = phi i8* [ %135, %76 ], [ %2, %8 ]
  %80 = phi i8* [ %136, %76 ], [ %5, %8 ]
  %81 = phi i32 [ %137, %76 ], [ 0, %8 ]
  %82 = phi <4 x i32> [ %132, %76 ], [ zeroinitializer, %8 ]
  %83 = bitcast i8* %77 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1
  %85 = bitcast i8* %78 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %79 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast i8* %80 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %90
  %92 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %92, <16 x i8> %93) #2
  %95 = lshr <8 x i16> %94, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %96 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %95, <8 x i16> zeroinitializer) #2
  %97 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %98) #2
  %100 = lshr <8 x i16> %99, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %100, <8 x i16> zeroinitializer) #2
  %102 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %96, <8 x i16> %101) #2
  %103 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %102, <16 x i8> %84) #2
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = add <4 x i32> %82, %104
  %106 = getelementptr inbounds i8, i8* %77, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %78, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = getelementptr inbounds i8, i8* %79, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1
  %115 = getelementptr inbounds i8, i8* %80, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #2
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #2
  %124 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #2
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #2
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %128) #2
  %130 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %129, <16 x i8> %108) #2
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = add <4 x i32> %105, %131
  %133 = getelementptr inbounds i8, i8* %77, i64 %10
  %134 = getelementptr inbounds i8, i8* %78, i64 32
  %135 = getelementptr inbounds i8, i8* %79, i64 %11
  %136 = getelementptr inbounds i8, i8* %80, i64 %12
  %137 = add nuw nsw i32 %81, 1
  %138 = icmp eq i32 %137, 32
  br i1 %138, label %139, label %76

139:                                              ; preds = %76, %13
  %140 = phi <4 x i32> [ %69, %13 ], [ %132, %76 ]
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = bitcast <4 x i32> %140 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = add nsw i32 %145, %141
  ret i32 %146
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x16_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %76

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %70, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %71, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %72, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %73, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %74, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %69, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 %10
  %71 = getelementptr inbounds i8, i8* %15, i64 %11
  %72 = getelementptr inbounds i8, i8* %16, i64 32
  %73 = getelementptr inbounds i8, i8* %17, i64 %12
  %74 = add nuw nsw i32 %18, 1
  %75 = icmp eq i32 %74, 16
  br i1 %75, label %139, label %13

76:                                               ; preds = %8, %76
  %77 = phi i8* [ %133, %76 ], [ %0, %8 ]
  %78 = phi i8* [ %134, %76 ], [ %4, %8 ]
  %79 = phi i8* [ %135, %76 ], [ %2, %8 ]
  %80 = phi i8* [ %136, %76 ], [ %5, %8 ]
  %81 = phi i32 [ %137, %76 ], [ 0, %8 ]
  %82 = phi <4 x i32> [ %132, %76 ], [ zeroinitializer, %8 ]
  %83 = bitcast i8* %77 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1
  %85 = bitcast i8* %78 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %79 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast i8* %80 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %90
  %92 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %92, <16 x i8> %93) #2
  %95 = lshr <8 x i16> %94, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %96 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %95, <8 x i16> zeroinitializer) #2
  %97 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %98) #2
  %100 = lshr <8 x i16> %99, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %100, <8 x i16> zeroinitializer) #2
  %102 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %96, <8 x i16> %101) #2
  %103 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %102, <16 x i8> %84) #2
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = add <4 x i32> %82, %104
  %106 = getelementptr inbounds i8, i8* %77, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %78, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = getelementptr inbounds i8, i8* %79, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1
  %115 = getelementptr inbounds i8, i8* %80, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #2
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #2
  %124 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #2
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #2
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %128) #2
  %130 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %129, <16 x i8> %108) #2
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = add <4 x i32> %105, %131
  %133 = getelementptr inbounds i8, i8* %77, i64 %10
  %134 = getelementptr inbounds i8, i8* %78, i64 32
  %135 = getelementptr inbounds i8, i8* %79, i64 %11
  %136 = getelementptr inbounds i8, i8* %80, i64 %12
  %137 = add nuw nsw i32 %81, 1
  %138 = icmp eq i32 %137, 16
  br i1 %138, label %139, label %76

139:                                              ; preds = %76, %13
  %140 = phi <4 x i32> [ %69, %13 ], [ %132, %76 ]
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = bitcast <4 x i32> %140 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = add nsw i32 %145, %141
  ret i32 %146
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x32_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %49

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %43, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %44, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %45, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %46, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %47, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %42, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 %10
  %44 = getelementptr inbounds i8, i8* %15, i64 %11
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = getelementptr inbounds i8, i8* %17, i64 %12
  %47 = add nuw nsw i32 %18, 1
  %48 = icmp eq i32 %47, 32
  br i1 %48, label %85, label %13

49:                                               ; preds = %8, %49
  %50 = phi i8* [ %79, %49 ], [ %0, %8 ]
  %51 = phi i8* [ %80, %49 ], [ %4, %8 ]
  %52 = phi i8* [ %81, %49 ], [ %2, %8 ]
  %53 = phi i8* [ %82, %49 ], [ %5, %8 ]
  %54 = phi i32 [ %83, %49 ], [ 0, %8 ]
  %55 = phi <4 x i32> [ %78, %49 ], [ zeroinitializer, %8 ]
  %56 = bitcast i8* %50 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = bitcast i8* %51 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = bitcast i8* %52 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = bitcast i8* %53 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1
  %64 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %63
  %65 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #2
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #2
  %75 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %74) #2
  %76 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %75, <16 x i8> %57) #2
  %77 = bitcast <2 x i64> %76 to <4 x i32>
  %78 = add <4 x i32> %55, %77
  %79 = getelementptr inbounds i8, i8* %50, i64 %10
  %80 = getelementptr inbounds i8, i8* %51, i64 16
  %81 = getelementptr inbounds i8, i8* %52, i64 %11
  %82 = getelementptr inbounds i8, i8* %53, i64 %12
  %83 = add nuw nsw i32 %54, 1
  %84 = icmp eq i32 %83, 32
  br i1 %84, label %85, label %49

85:                                               ; preds = %49, %13
  %86 = phi <4 x i32> [ %42, %13 ], [ %78, %49 ]
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = bitcast <4 x i32> %86 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = add nsw i32 %91, %87
  ret i32 %92
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x16_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %49

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %43, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %44, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %45, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %46, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %47, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %42, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 %10
  %44 = getelementptr inbounds i8, i8* %15, i64 %11
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = getelementptr inbounds i8, i8* %17, i64 %12
  %47 = add nuw nsw i32 %18, 1
  %48 = icmp eq i32 %47, 16
  br i1 %48, label %85, label %13

49:                                               ; preds = %8, %49
  %50 = phi i8* [ %79, %49 ], [ %0, %8 ]
  %51 = phi i8* [ %80, %49 ], [ %4, %8 ]
  %52 = phi i8* [ %81, %49 ], [ %2, %8 ]
  %53 = phi i8* [ %82, %49 ], [ %5, %8 ]
  %54 = phi i32 [ %83, %49 ], [ 0, %8 ]
  %55 = phi <4 x i32> [ %78, %49 ], [ zeroinitializer, %8 ]
  %56 = bitcast i8* %50 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = bitcast i8* %51 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = bitcast i8* %52 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = bitcast i8* %53 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1
  %64 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %63
  %65 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #2
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #2
  %75 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %74) #2
  %76 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %75, <16 x i8> %57) #2
  %77 = bitcast <2 x i64> %76 to <4 x i32>
  %78 = add <4 x i32> %55, %77
  %79 = getelementptr inbounds i8, i8* %50, i64 %10
  %80 = getelementptr inbounds i8, i8* %51, i64 16
  %81 = getelementptr inbounds i8, i8* %52, i64 %11
  %82 = getelementptr inbounds i8, i8* %53, i64 %12
  %83 = add nuw nsw i32 %54, 1
  %84 = icmp eq i32 %83, 16
  br i1 %84, label %85, label %49

85:                                               ; preds = %49, %13
  %86 = phi <4 x i32> [ %42, %13 ], [ %78, %49 ]
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = bitcast <4 x i32> %86 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = add nsw i32 %91, %87
  ret i32 %92
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x8_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = bitcast i8* %0 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  br i1 %9, label %215, label %15

15:                                               ; preds = %8
  %16 = bitcast i8* %4 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = bitcast i8* %2 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = bitcast i8* %5 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %21
  %23 = shufflevector <16 x i8> %17, <16 x i8> %19, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %21, <16 x i8> %22, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %23, <16 x i8> %24) #2
  %26 = lshr <8 x i16> %25, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %26, <8 x i16> zeroinitializer) #2
  %28 = shufflevector <16 x i8> %17, <16 x i8> %19, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = shufflevector <16 x i8> %21, <16 x i8> %22, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %28, <16 x i8> %29) #2
  %31 = lshr <8 x i16> %30, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %32 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %31, <8 x i16> zeroinitializer) #2
  %33 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %27, <8 x i16> %32) #2
  %34 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %33, <16 x i8> %14) #2
  %35 = bitcast <2 x i64> %34 to <4 x i32>
  %36 = getelementptr inbounds i8, i8* %0, i64 %10
  %37 = getelementptr inbounds i8, i8* %4, i64 16
  %38 = getelementptr inbounds i8, i8* %2, i64 %11
  %39 = getelementptr inbounds i8, i8* %5, i64 %12
  %40 = bitcast i8* %36 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = bitcast i8* %37 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1
  %44 = bitcast i8* %38 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = bitcast i8* %39 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %47
  %49 = shufflevector <16 x i8> %43, <16 x i8> %45, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %49, <16 x i8> %50) #2
  %52 = lshr <8 x i16> %51, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %53 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %52, <8 x i16> zeroinitializer) #2
  %54 = shufflevector <16 x i8> %43, <16 x i8> %45, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %56 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %54, <16 x i8> %55) #2
  %57 = lshr <8 x i16> %56, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #2
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %53, <8 x i16> %58) #2
  %60 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %59, <16 x i8> %41) #2
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = add <4 x i32> %35, %61
  %63 = getelementptr inbounds i8, i8* %36, i64 %10
  %64 = getelementptr inbounds i8, i8* %4, i64 32
  %65 = getelementptr inbounds i8, i8* %38, i64 %11
  %66 = getelementptr inbounds i8, i8* %39, i64 %12
  %67 = bitcast i8* %63 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = bitcast i8* %64 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = bitcast i8* %65 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = bitcast i8* %66 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %74
  %76 = shufflevector <16 x i8> %70, <16 x i8> %72, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %76, <16 x i8> %77) #2
  %79 = lshr <8 x i16> %78, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %80 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %79, <8 x i16> zeroinitializer) #2
  %81 = shufflevector <16 x i8> %70, <16 x i8> %72, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %82) #2
  %84 = lshr <8 x i16> %83, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %85 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %84, <8 x i16> zeroinitializer) #2
  %86 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %85) #2
  %87 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %86, <16 x i8> %68) #2
  %88 = bitcast <2 x i64> %87 to <4 x i32>
  %89 = add <4 x i32> %62, %88
  %90 = getelementptr inbounds i8, i8* %63, i64 %10
  %91 = getelementptr inbounds i8, i8* %4, i64 48
  %92 = getelementptr inbounds i8, i8* %65, i64 %11
  %93 = getelementptr inbounds i8, i8* %66, i64 %12
  %94 = bitcast i8* %90 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = bitcast i8* %91 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = bitcast i8* %92 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = bitcast i8* %93 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %101
  %103 = shufflevector <16 x i8> %97, <16 x i8> %99, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %103, <16 x i8> %104) #2
  %106 = lshr <8 x i16> %105, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %106, <8 x i16> zeroinitializer) #2
  %108 = shufflevector <16 x i8> %97, <16 x i8> %99, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %108, <16 x i8> %109) #2
  %111 = lshr <8 x i16> %110, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %112 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %111, <8 x i16> zeroinitializer) #2
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %107, <8 x i16> %112) #2
  %114 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %113, <16 x i8> %95) #2
  %115 = bitcast <2 x i64> %114 to <4 x i32>
  %116 = add <4 x i32> %89, %115
  %117 = getelementptr inbounds i8, i8* %90, i64 %10
  %118 = getelementptr inbounds i8, i8* %4, i64 64
  %119 = getelementptr inbounds i8, i8* %92, i64 %11
  %120 = getelementptr inbounds i8, i8* %93, i64 %12
  %121 = bitcast i8* %117 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1
  %123 = bitcast i8* %118 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = bitcast i8* %119 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1
  %127 = bitcast i8* %120 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1
  %129 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %128
  %130 = shufflevector <16 x i8> %124, <16 x i8> %126, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %131 = shufflevector <16 x i8> %128, <16 x i8> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %132 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %130, <16 x i8> %131) #2
  %133 = lshr <8 x i16> %132, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %134 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %133, <8 x i16> zeroinitializer) #2
  %135 = shufflevector <16 x i8> %124, <16 x i8> %126, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %136 = shufflevector <16 x i8> %128, <16 x i8> %129, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %137 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %135, <16 x i8> %136) #2
  %138 = lshr <8 x i16> %137, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %139 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %138, <8 x i16> zeroinitializer) #2
  %140 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %134, <8 x i16> %139) #2
  %141 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %140, <16 x i8> %122) #2
  %142 = bitcast <2 x i64> %141 to <4 x i32>
  %143 = add <4 x i32> %116, %142
  %144 = getelementptr inbounds i8, i8* %117, i64 %10
  %145 = getelementptr inbounds i8, i8* %4, i64 80
  %146 = getelementptr inbounds i8, i8* %119, i64 %11
  %147 = getelementptr inbounds i8, i8* %120, i64 %12
  %148 = bitcast i8* %144 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1
  %150 = bitcast i8* %145 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1
  %152 = bitcast i8* %146 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = bitcast i8* %147 to <16 x i8>*
  %155 = load <16 x i8>, <16 x i8>* %154, align 1
  %156 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %155
  %157 = shufflevector <16 x i8> %151, <16 x i8> %153, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %158 = shufflevector <16 x i8> %155, <16 x i8> %156, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %159 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %157, <16 x i8> %158) #2
  %160 = lshr <8 x i16> %159, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %161 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %160, <8 x i16> zeroinitializer) #2
  %162 = shufflevector <16 x i8> %151, <16 x i8> %153, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %163 = shufflevector <16 x i8> %155, <16 x i8> %156, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %164 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %162, <16 x i8> %163) #2
  %165 = lshr <8 x i16> %164, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %166 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %165, <8 x i16> zeroinitializer) #2
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %161, <8 x i16> %166) #2
  %168 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %167, <16 x i8> %149) #2
  %169 = bitcast <2 x i64> %168 to <4 x i32>
  %170 = add <4 x i32> %143, %169
  %171 = getelementptr inbounds i8, i8* %144, i64 %10
  %172 = getelementptr inbounds i8, i8* %4, i64 96
  %173 = getelementptr inbounds i8, i8* %146, i64 %11
  %174 = getelementptr inbounds i8, i8* %147, i64 %12
  %175 = bitcast i8* %171 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1
  %177 = bitcast i8* %172 to <16 x i8>*
  %178 = load <16 x i8>, <16 x i8>* %177, align 1
  %179 = bitcast i8* %173 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = bitcast i8* %174 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 1
  %183 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %182
  %184 = shufflevector <16 x i8> %178, <16 x i8> %180, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %185 = shufflevector <16 x i8> %182, <16 x i8> %183, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %185) #2
  %187 = lshr <8 x i16> %186, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %188 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %187, <8 x i16> zeroinitializer) #2
  %189 = shufflevector <16 x i8> %178, <16 x i8> %180, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = shufflevector <16 x i8> %182, <16 x i8> %183, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %191 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %189, <16 x i8> %190) #2
  %192 = lshr <8 x i16> %191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %193 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %192, <8 x i16> zeroinitializer) #2
  %194 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> %193) #2
  %195 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %194, <16 x i8> %176) #2
  %196 = bitcast <2 x i64> %195 to <4 x i32>
  %197 = add <4 x i32> %170, %196
  %198 = getelementptr inbounds i8, i8* %4, i64 112
  %199 = getelementptr inbounds i8, i8* %173, i64 %11
  %200 = getelementptr inbounds i8, i8* %174, i64 %12
  %201 = bitcast i8* %198 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1
  %203 = bitcast i8* %199 to <16 x i8>*
  %204 = load <16 x i8>, <16 x i8>* %203, align 1
  %205 = bitcast i8* %200 to <16 x i8>*
  %206 = load <16 x i8>, <16 x i8>* %205, align 1
  %207 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %206
  %208 = shufflevector <16 x i8> %202, <16 x i8> %204, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %209 = shufflevector <16 x i8> %206, <16 x i8> %207, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %210 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %208, <16 x i8> %209) #2
  %211 = lshr <8 x i16> %210, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %212 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %211, <8 x i16> zeroinitializer) #2
  %213 = shufflevector <16 x i8> %202, <16 x i8> %204, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %214 = shufflevector <16 x i8> %206, <16 x i8> %207, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %415

215:                                              ; preds = %8
  %216 = bitcast i8* %2 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1
  %218 = bitcast i8* %4 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = bitcast i8* %5 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 1
  %222 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %221
  %223 = shufflevector <16 x i8> %217, <16 x i8> %219, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %224 = shufflevector <16 x i8> %221, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %225 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %224) #2
  %226 = lshr <8 x i16> %225, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %227 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %226, <8 x i16> zeroinitializer) #2
  %228 = shufflevector <16 x i8> %217, <16 x i8> %219, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %229 = shufflevector <16 x i8> %221, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %230 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %228, <16 x i8> %229) #2
  %231 = lshr <8 x i16> %230, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %232 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %231, <8 x i16> zeroinitializer) #2
  %233 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %227, <8 x i16> %232) #2
  %234 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %233, <16 x i8> %14) #2
  %235 = bitcast <2 x i64> %234 to <4 x i32>
  %236 = getelementptr inbounds i8, i8* %0, i64 %10
  %237 = getelementptr inbounds i8, i8* %2, i64 %11
  %238 = getelementptr inbounds i8, i8* %4, i64 16
  %239 = getelementptr inbounds i8, i8* %5, i64 %12
  %240 = bitcast i8* %236 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1
  %242 = bitcast i8* %237 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1
  %244 = bitcast i8* %238 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1
  %246 = bitcast i8* %239 to <16 x i8>*
  %247 = load <16 x i8>, <16 x i8>* %246, align 1
  %248 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %247
  %249 = shufflevector <16 x i8> %243, <16 x i8> %245, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %250 = shufflevector <16 x i8> %247, <16 x i8> %248, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %251 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %249, <16 x i8> %250) #2
  %252 = lshr <8 x i16> %251, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %253 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %252, <8 x i16> zeroinitializer) #2
  %254 = shufflevector <16 x i8> %243, <16 x i8> %245, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %255 = shufflevector <16 x i8> %247, <16 x i8> %248, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %256 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %254, <16 x i8> %255) #2
  %257 = lshr <8 x i16> %256, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %258 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %257, <8 x i16> zeroinitializer) #2
  %259 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %253, <8 x i16> %258) #2
  %260 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %259, <16 x i8> %241) #2
  %261 = bitcast <2 x i64> %260 to <4 x i32>
  %262 = add <4 x i32> %235, %261
  %263 = getelementptr inbounds i8, i8* %236, i64 %10
  %264 = getelementptr inbounds i8, i8* %237, i64 %11
  %265 = getelementptr inbounds i8, i8* %4, i64 32
  %266 = getelementptr inbounds i8, i8* %239, i64 %12
  %267 = bitcast i8* %263 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1
  %269 = bitcast i8* %264 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1
  %271 = bitcast i8* %265 to <16 x i8>*
  %272 = load <16 x i8>, <16 x i8>* %271, align 1
  %273 = bitcast i8* %266 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 1
  %275 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %274
  %276 = shufflevector <16 x i8> %270, <16 x i8> %272, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %277 = shufflevector <16 x i8> %274, <16 x i8> %275, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %278 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %276, <16 x i8> %277) #2
  %279 = lshr <8 x i16> %278, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %280 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %279, <8 x i16> zeroinitializer) #2
  %281 = shufflevector <16 x i8> %270, <16 x i8> %272, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %282 = shufflevector <16 x i8> %274, <16 x i8> %275, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %283 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %281, <16 x i8> %282) #2
  %284 = lshr <8 x i16> %283, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %285 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %284, <8 x i16> zeroinitializer) #2
  %286 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %280, <8 x i16> %285) #2
  %287 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %286, <16 x i8> %268) #2
  %288 = bitcast <2 x i64> %287 to <4 x i32>
  %289 = add <4 x i32> %262, %288
  %290 = getelementptr inbounds i8, i8* %263, i64 %10
  %291 = getelementptr inbounds i8, i8* %264, i64 %11
  %292 = getelementptr inbounds i8, i8* %4, i64 48
  %293 = getelementptr inbounds i8, i8* %266, i64 %12
  %294 = bitcast i8* %290 to <16 x i8>*
  %295 = load <16 x i8>, <16 x i8>* %294, align 1
  %296 = bitcast i8* %291 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = bitcast i8* %292 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1
  %300 = bitcast i8* %293 to <16 x i8>*
  %301 = load <16 x i8>, <16 x i8>* %300, align 1
  %302 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %301
  %303 = shufflevector <16 x i8> %297, <16 x i8> %299, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %304 = shufflevector <16 x i8> %301, <16 x i8> %302, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %305 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %303, <16 x i8> %304) #2
  %306 = lshr <8 x i16> %305, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %307 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %306, <8 x i16> zeroinitializer) #2
  %308 = shufflevector <16 x i8> %297, <16 x i8> %299, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %309 = shufflevector <16 x i8> %301, <16 x i8> %302, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %310 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %308, <16 x i8> %309) #2
  %311 = lshr <8 x i16> %310, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %312 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %311, <8 x i16> zeroinitializer) #2
  %313 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %307, <8 x i16> %312) #2
  %314 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %313, <16 x i8> %295) #2
  %315 = bitcast <2 x i64> %314 to <4 x i32>
  %316 = add <4 x i32> %289, %315
  %317 = getelementptr inbounds i8, i8* %290, i64 %10
  %318 = getelementptr inbounds i8, i8* %291, i64 %11
  %319 = getelementptr inbounds i8, i8* %4, i64 64
  %320 = getelementptr inbounds i8, i8* %293, i64 %12
  %321 = bitcast i8* %317 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1
  %323 = bitcast i8* %318 to <16 x i8>*
  %324 = load <16 x i8>, <16 x i8>* %323, align 1
  %325 = bitcast i8* %319 to <16 x i8>*
  %326 = load <16 x i8>, <16 x i8>* %325, align 1
  %327 = bitcast i8* %320 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1
  %329 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %328
  %330 = shufflevector <16 x i8> %324, <16 x i8> %326, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %331 = shufflevector <16 x i8> %328, <16 x i8> %329, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %332 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %330, <16 x i8> %331) #2
  %333 = lshr <8 x i16> %332, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %334 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %333, <8 x i16> zeroinitializer) #2
  %335 = shufflevector <16 x i8> %324, <16 x i8> %326, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %336 = shufflevector <16 x i8> %328, <16 x i8> %329, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %337 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %335, <16 x i8> %336) #2
  %338 = lshr <8 x i16> %337, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %339 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %338, <8 x i16> zeroinitializer) #2
  %340 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %334, <8 x i16> %339) #2
  %341 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %340, <16 x i8> %322) #2
  %342 = bitcast <2 x i64> %341 to <4 x i32>
  %343 = add <4 x i32> %316, %342
  %344 = getelementptr inbounds i8, i8* %317, i64 %10
  %345 = getelementptr inbounds i8, i8* %318, i64 %11
  %346 = getelementptr inbounds i8, i8* %4, i64 80
  %347 = getelementptr inbounds i8, i8* %320, i64 %12
  %348 = bitcast i8* %344 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1
  %350 = bitcast i8* %345 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = bitcast i8* %346 to <16 x i8>*
  %353 = load <16 x i8>, <16 x i8>* %352, align 1
  %354 = bitcast i8* %347 to <16 x i8>*
  %355 = load <16 x i8>, <16 x i8>* %354, align 1
  %356 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %355
  %357 = shufflevector <16 x i8> %351, <16 x i8> %353, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %358 = shufflevector <16 x i8> %355, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %359 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %357, <16 x i8> %358) #2
  %360 = lshr <8 x i16> %359, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %361 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %360, <8 x i16> zeroinitializer) #2
  %362 = shufflevector <16 x i8> %351, <16 x i8> %353, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %363 = shufflevector <16 x i8> %355, <16 x i8> %356, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %364 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %362, <16 x i8> %363) #2
  %365 = lshr <8 x i16> %364, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %366 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %365, <8 x i16> zeroinitializer) #2
  %367 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %361, <8 x i16> %366) #2
  %368 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %367, <16 x i8> %349) #2
  %369 = bitcast <2 x i64> %368 to <4 x i32>
  %370 = add <4 x i32> %343, %369
  %371 = getelementptr inbounds i8, i8* %344, i64 %10
  %372 = getelementptr inbounds i8, i8* %345, i64 %11
  %373 = getelementptr inbounds i8, i8* %4, i64 96
  %374 = getelementptr inbounds i8, i8* %347, i64 %12
  %375 = bitcast i8* %371 to <16 x i8>*
  %376 = load <16 x i8>, <16 x i8>* %375, align 1
  %377 = bitcast i8* %372 to <16 x i8>*
  %378 = load <16 x i8>, <16 x i8>* %377, align 1
  %379 = bitcast i8* %373 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 1
  %381 = bitcast i8* %374 to <16 x i8>*
  %382 = load <16 x i8>, <16 x i8>* %381, align 1
  %383 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %382
  %384 = shufflevector <16 x i8> %378, <16 x i8> %380, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %385 = shufflevector <16 x i8> %382, <16 x i8> %383, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %386 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %384, <16 x i8> %385) #2
  %387 = lshr <8 x i16> %386, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %388 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %387, <8 x i16> zeroinitializer) #2
  %389 = shufflevector <16 x i8> %378, <16 x i8> %380, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %390 = shufflevector <16 x i8> %382, <16 x i8> %383, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %391 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %389, <16 x i8> %390) #2
  %392 = lshr <8 x i16> %391, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %393 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %392, <8 x i16> zeroinitializer) #2
  %394 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %388, <8 x i16> %393) #2
  %395 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %394, <16 x i8> %376) #2
  %396 = bitcast <2 x i64> %395 to <4 x i32>
  %397 = add <4 x i32> %370, %396
  %398 = getelementptr inbounds i8, i8* %372, i64 %11
  %399 = getelementptr inbounds i8, i8* %4, i64 112
  %400 = getelementptr inbounds i8, i8* %374, i64 %12
  %401 = bitcast i8* %398 to <16 x i8>*
  %402 = load <16 x i8>, <16 x i8>* %401, align 1
  %403 = bitcast i8* %399 to <16 x i8>*
  %404 = load <16 x i8>, <16 x i8>* %403, align 1
  %405 = bitcast i8* %400 to <16 x i8>*
  %406 = load <16 x i8>, <16 x i8>* %405, align 1
  %407 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %406
  %408 = shufflevector <16 x i8> %402, <16 x i8> %404, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %409 = shufflevector <16 x i8> %406, <16 x i8> %407, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %410 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %408, <16 x i8> %409) #2
  %411 = lshr <8 x i16> %410, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %412 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %411, <8 x i16> zeroinitializer) #2
  %413 = shufflevector <16 x i8> %402, <16 x i8> %404, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %414 = shufflevector <16 x i8> %406, <16 x i8> %407, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %415

415:                                              ; preds = %15, %215
  %416 = phi <16 x i8> [ %214, %15 ], [ %414, %215 ]
  %417 = phi <16 x i8> [ %213, %15 ], [ %413, %215 ]
  %418 = phi <8 x i16> [ %212, %15 ], [ %412, %215 ]
  %419 = phi i8* [ %90, %15 ], [ %290, %215 ]
  %420 = phi <4 x i32> [ %197, %15 ], [ %397, %215 ]
  %421 = getelementptr inbounds i8, i8* %419, i64 %10
  %422 = getelementptr inbounds i8, i8* %421, i64 %10
  %423 = getelementptr inbounds i8, i8* %422, i64 %10
  %424 = getelementptr inbounds i8, i8* %423, i64 %10
  %425 = bitcast i8* %424 to <16 x i8>*
  %426 = load <16 x i8>, <16 x i8>* %425, align 1
  %427 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %417, <16 x i8> %416) #2
  %428 = lshr <8 x i16> %427, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %429 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %428, <8 x i16> zeroinitializer) #2
  %430 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %418, <8 x i16> %429) #2
  %431 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %430, <16 x i8> %426) #2
  %432 = bitcast <2 x i64> %431 to <4 x i32>
  %433 = add <4 x i32> %420, %432
  %434 = extractelement <4 x i32> %433, i32 0
  %435 = bitcast <4 x i32> %433 to <16 x i8>
  %436 = shufflevector <16 x i8> %435, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %437 = bitcast <16 x i8> %436 to <4 x i32>
  %438 = extractelement <4 x i32> %437, i32 0
  %439 = add nsw i32 %438, %434
  ret i32 %439
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x16_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %81

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %75, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %76, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %77, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %78, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %79, %19 ], [ 0, %8 ]
  %25 = phi <4 x i32> [ %74, %19 ], [ zeroinitializer, %8 ]
  %26 = bitcast i8* %20 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i8, i8* %20, i64 %10
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> %28, i64 %31, i32 1
  %33 = bitcast i8* %21 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = getelementptr inbounds i8, i8* %21, i64 %11
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast i8* %22 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i8, i8* %22, i64 8
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = bitcast i8* %23 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = getelementptr inbounds i8, i8* %23, i64 %12
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> %49, i64 %52, i32 1
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = bitcast <2 x i64> %35 to <16 x i8>
  %57 = bitcast <2 x i64> %42 to <16 x i8>
  %58 = shufflevector <16 x i8> %56, <16 x i8> %57, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %58, <16 x i8> %59) #2
  %61 = lshr <8 x i16> %60, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %62 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %61, <8 x i16> zeroinitializer) #2
  %63 = bitcast <2 x i64> %39 to <16 x i8>
  %64 = bitcast <2 x i64> %46 to <16 x i8>
  %65 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %69) #2
  %71 = bitcast <2 x i64> %32 to <16 x i8>
  %72 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %70, <16 x i8> %71) #2
  %73 = bitcast <2 x i64> %72 to <4 x i32>
  %74 = add <4 x i32> %25, %73
  %75 = getelementptr inbounds i8, i8* %20, i64 %14
  %76 = getelementptr inbounds i8, i8* %21, i64 %16
  %77 = getelementptr inbounds i8, i8* %22, i64 16
  %78 = getelementptr inbounds i8, i8* %23, i64 %18
  %79 = add nuw nsw i32 %24, 2
  %80 = icmp ult i32 %79, 16
  br i1 %80, label %19, label %143

81:                                               ; preds = %8, %81
  %82 = phi i8* [ %137, %81 ], [ %0, %8 ]
  %83 = phi i8* [ %138, %81 ], [ %4, %8 ]
  %84 = phi i8* [ %139, %81 ], [ %2, %8 ]
  %85 = phi i8* [ %140, %81 ], [ %5, %8 ]
  %86 = phi i32 [ %141, %81 ], [ 0, %8 ]
  %87 = phi <4 x i32> [ %136, %81 ], [ zeroinitializer, %8 ]
  %88 = bitcast i8* %82 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = getelementptr inbounds i8, i8* %82, i64 %10
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> %90, i64 %93, i32 1
  %95 = bitcast i8* %83 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = getelementptr inbounds i8, i8* %83, i64 8
  %99 = bitcast i8* %98 to i64*
  %100 = load i64, i64* %99, align 1
  %101 = insertelement <2 x i64> undef, i64 %100, i32 0
  %102 = bitcast i8* %84 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i8, i8* %84, i64 %11
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = insertelement <2 x i64> undef, i64 %107, i32 0
  %109 = bitcast i8* %85 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = insertelement <2 x i64> undef, i64 %110, i32 0
  %112 = getelementptr inbounds i8, i8* %85, i64 %12
  %113 = bitcast i8* %112 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = insertelement <2 x i64> %111, i64 %114, i32 1
  %116 = bitcast <2 x i64> %115 to <16 x i8>
  %117 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %116
  %118 = bitcast <2 x i64> %97 to <16 x i8>
  %119 = bitcast <2 x i64> %104 to <16 x i8>
  %120 = shufflevector <16 x i8> %118, <16 x i8> %119, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = shufflevector <16 x i8> %116, <16 x i8> %117, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %120, <16 x i8> %121) #2
  %123 = lshr <8 x i16> %122, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %124 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %123, <8 x i16> zeroinitializer) #2
  %125 = bitcast <2 x i64> %101 to <16 x i8>
  %126 = bitcast <2 x i64> %108 to <16 x i8>
  %127 = shufflevector <16 x i8> %125, <16 x i8> %126, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = shufflevector <16 x i8> %116, <16 x i8> %117, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %127, <16 x i8> %128) #2
  %130 = lshr <8 x i16> %129, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %131 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %130, <8 x i16> zeroinitializer) #2
  %132 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %124, <8 x i16> %131) #2
  %133 = bitcast <2 x i64> %94 to <16 x i8>
  %134 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %132, <16 x i8> %133) #2
  %135 = bitcast <2 x i64> %134 to <4 x i32>
  %136 = add <4 x i32> %87, %135
  %137 = getelementptr inbounds i8, i8* %82, i64 %14
  %138 = getelementptr inbounds i8, i8* %83, i64 16
  %139 = getelementptr inbounds i8, i8* %84, i64 %16
  %140 = getelementptr inbounds i8, i8* %85, i64 %18
  %141 = add nuw nsw i32 %86, 2
  %142 = icmp ult i32 %141, 16
  br i1 %142, label %81, label %143

143:                                              ; preds = %81, %19
  %144 = phi <4 x i32> [ %74, %19 ], [ %136, %81 ]
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = extractelement <4 x i32> %144, i32 0
  %147 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = extractelement <4 x i32> %148, i32 0
  %150 = add nsw i32 %149, %146
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8xh_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %88

11:                                               ; preds = %9
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = sext i32 %5 to i64
  %15 = sext i32 %7 to i64
  %16 = shl nsw i32 %1, 1
  %17 = sext i32 %16 to i64
  %18 = shl nsw i32 %3, 1
  %19 = sext i32 %18 to i64
  %20 = shl nsw i32 %5, 1
  %21 = sext i32 %20 to i64
  %22 = shl nsw i32 %7, 1
  %23 = sext i32 %22 to i64
  br label %24

24:                                               ; preds = %11, %24
  %25 = phi i8* [ %0, %11 ], [ %80, %24 ]
  %26 = phi i8* [ %2, %11 ], [ %81, %24 ]
  %27 = phi i8* [ %4, %11 ], [ %82, %24 ]
  %28 = phi i8* [ %6, %11 ], [ %83, %24 ]
  %29 = phi i32 [ 0, %11 ], [ %84, %24 ]
  %30 = phi <4 x i32> [ zeroinitializer, %11 ], [ %79, %24 ]
  %31 = bitcast i8* %25 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %25, i64 %12
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> %33, i64 %36, i32 1
  %38 = bitcast i8* %26 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = getelementptr inbounds i8, i8* %26, i64 %13
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast i8* %27 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = getelementptr inbounds i8, i8* %27, i64 %14
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = bitcast i8* %28 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = getelementptr inbounds i8, i8* %28, i64 %15
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> %54, i64 %57, i32 1
  %59 = bitcast <2 x i64> %58 to <16 x i8>
  %60 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %59
  %61 = bitcast <2 x i64> %40 to <16 x i8>
  %62 = bitcast <2 x i64> %47 to <16 x i8>
  %63 = shufflevector <16 x i8> %61, <16 x i8> %62, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %63, <16 x i8> %64) #2
  %66 = lshr <8 x i16> %65, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %67 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %66, <8 x i16> zeroinitializer) #2
  %68 = bitcast <2 x i64> %44 to <16 x i8>
  %69 = bitcast <2 x i64> %51 to <16 x i8>
  %70 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #2
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #2
  %75 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %67, <8 x i16> %74) #2
  %76 = bitcast <2 x i64> %37 to <16 x i8>
  %77 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %75, <16 x i8> %76) #2
  %78 = bitcast <2 x i64> %77 to <4 x i32>
  %79 = add <4 x i32> %30, %78
  %80 = getelementptr inbounds i8, i8* %25, i64 %17
  %81 = getelementptr inbounds i8, i8* %26, i64 %19
  %82 = getelementptr inbounds i8, i8* %27, i64 %21
  %83 = getelementptr inbounds i8, i8* %28, i64 %23
  %84 = add nuw nsw i32 %29, 2
  %85 = icmp slt i32 %84, %8
  br i1 %85, label %24, label %86

86:                                               ; preds = %24
  %87 = bitcast <4 x i32> %79 to <16 x i8>
  br label %88

88:                                               ; preds = %86, %9
  %89 = phi <4 x i32> [ %79, %86 ], [ zeroinitializer, %9 ]
  %90 = phi <16 x i8> [ %87, %86 ], [ zeroinitializer, %9 ]
  %91 = extractelement <4 x i32> %89, i32 0
  %92 = shufflevector <16 x i8> %90, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = bitcast <16 x i8> %92 to <4 x i32>
  %94 = extractelement <4 x i32> %93, i32 0
  %95 = add nsw i32 %94, %91
  ret i32 %95
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x8_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = bitcast i8* %0 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %0, i64 %10
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> %21, i64 %24, i32 1
  br i1 %9, label %219, label %26

26:                                               ; preds = %8
  %27 = bitcast i8* %4 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = getelementptr inbounds i8, i8* %4, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast i8* %2 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %2, i64 %11
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = bitcast i8* %5 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %5, i64 %12
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> %43, i64 %46, i32 1
  %48 = bitcast <2 x i64> %47 to <16 x i8>
  %49 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %48
  %50 = bitcast <2 x i64> %29 to <16 x i8>
  %51 = bitcast <2 x i64> %36 to <16 x i8>
  %52 = shufflevector <16 x i8> %50, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %52, <16 x i8> %53) #2
  %55 = lshr <8 x i16> %54, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %56 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %55, <8 x i16> zeroinitializer) #2
  %57 = bitcast <2 x i64> %33 to <16 x i8>
  %58 = bitcast <2 x i64> %40 to <16 x i8>
  %59 = shufflevector <16 x i8> %57, <16 x i8> %58, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %59, <16 x i8> %60) #2
  %62 = lshr <8 x i16> %61, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %63 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %62, <8 x i16> zeroinitializer) #2
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %56, <8 x i16> %63) #2
  %65 = bitcast <2 x i64> %25 to <16 x i8>
  %66 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %64, <16 x i8> %65) #2
  %67 = bitcast <2 x i64> %66 to <4 x i32>
  %68 = getelementptr inbounds i8, i8* %0, i64 %14
  %69 = getelementptr inbounds i8, i8* %4, i64 16
  %70 = getelementptr inbounds i8, i8* %2, i64 %16
  %71 = getelementptr inbounds i8, i8* %5, i64 %18
  %72 = bitcast i8* %68 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %68, i64 %10
  %76 = bitcast i8* %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = insertelement <2 x i64> %74, i64 %77, i32 1
  %79 = bitcast i8* %69 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = getelementptr inbounds i8, i8* %4, i64 24
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 1
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = bitcast i8* %70 to i64*
  %87 = load i64, i64* %86, align 1
  %88 = insertelement <2 x i64> undef, i64 %87, i32 0
  %89 = getelementptr inbounds i8, i8* %70, i64 %11
  %90 = bitcast i8* %89 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> undef, i64 %91, i32 0
  %93 = bitcast i8* %71 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> undef, i64 %94, i32 0
  %96 = getelementptr inbounds i8, i8* %71, i64 %12
  %97 = bitcast i8* %96 to i64*
  %98 = load i64, i64* %97, align 1
  %99 = insertelement <2 x i64> %95, i64 %98, i32 1
  %100 = bitcast <2 x i64> %99 to <16 x i8>
  %101 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %100
  %102 = bitcast <2 x i64> %81 to <16 x i8>
  %103 = bitcast <2 x i64> %88 to <16 x i8>
  %104 = shufflevector <16 x i8> %102, <16 x i8> %103, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %104, <16 x i8> %105) #2
  %107 = lshr <8 x i16> %106, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %108 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %107, <8 x i16> zeroinitializer) #2
  %109 = bitcast <2 x i64> %85 to <16 x i8>
  %110 = bitcast <2 x i64> %92 to <16 x i8>
  %111 = shufflevector <16 x i8> %109, <16 x i8> %110, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %112) #2
  %114 = lshr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %114, <8 x i16> zeroinitializer) #2
  %116 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %115) #2
  %117 = bitcast <2 x i64> %78 to <16 x i8>
  %118 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %116, <16 x i8> %117) #2
  %119 = bitcast <2 x i64> %118 to <4 x i32>
  %120 = add <4 x i32> %67, %119
  %121 = getelementptr inbounds i8, i8* %68, i64 %14
  %122 = getelementptr inbounds i8, i8* %4, i64 32
  %123 = getelementptr inbounds i8, i8* %70, i64 %16
  %124 = getelementptr inbounds i8, i8* %71, i64 %18
  %125 = bitcast i8* %121 to i64*
  %126 = load i64, i64* %125, align 1
  %127 = insertelement <2 x i64> undef, i64 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %121, i64 %10
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> %127, i64 %130, i32 1
  %132 = bitcast i8* %122 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = insertelement <2 x i64> undef, i64 %133, i32 0
  %135 = getelementptr inbounds i8, i8* %4, i64 40
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast i8* %123 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> undef, i64 %140, i32 0
  %142 = getelementptr inbounds i8, i8* %123, i64 %11
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = insertelement <2 x i64> undef, i64 %144, i32 0
  %146 = bitcast i8* %124 to i64*
  %147 = load i64, i64* %146, align 1
  %148 = insertelement <2 x i64> undef, i64 %147, i32 0
  %149 = getelementptr inbounds i8, i8* %124, i64 %12
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> %148, i64 %151, i32 1
  %153 = bitcast <2 x i64> %152 to <16 x i8>
  %154 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %153
  %155 = bitcast <2 x i64> %134 to <16 x i8>
  %156 = bitcast <2 x i64> %141 to <16 x i8>
  %157 = shufflevector <16 x i8> %155, <16 x i8> %156, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %158 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %159 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %157, <16 x i8> %158) #2
  %160 = lshr <8 x i16> %159, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %161 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %160, <8 x i16> zeroinitializer) #2
  %162 = bitcast <2 x i64> %138 to <16 x i8>
  %163 = bitcast <2 x i64> %145 to <16 x i8>
  %164 = shufflevector <16 x i8> %162, <16 x i8> %163, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %166 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %164, <16 x i8> %165) #2
  %167 = lshr <8 x i16> %166, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %168 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %167, <8 x i16> zeroinitializer) #2
  %169 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %161, <8 x i16> %168) #2
  %170 = bitcast <2 x i64> %131 to <16 x i8>
  %171 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %169, <16 x i8> %170) #2
  %172 = bitcast <2 x i64> %171 to <4 x i32>
  %173 = add <4 x i32> %120, %172
  %174 = getelementptr inbounds i8, i8* %121, i64 %14
  %175 = getelementptr inbounds i8, i8* %4, i64 48
  %176 = getelementptr inbounds i8, i8* %123, i64 %16
  %177 = getelementptr inbounds i8, i8* %124, i64 %18
  %178 = bitcast i8* %174 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = getelementptr inbounds i8, i8* %174, i64 %10
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = insertelement <2 x i64> %180, i64 %183, i32 1
  %185 = bitcast i8* %175 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> undef, i64 %186, i32 0
  %188 = getelementptr inbounds i8, i8* %4, i64 56
  %189 = bitcast i8* %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = insertelement <2 x i64> undef, i64 %190, i32 0
  %192 = bitcast i8* %176 to i64*
  %193 = load i64, i64* %192, align 1
  %194 = insertelement <2 x i64> undef, i64 %193, i32 0
  %195 = getelementptr inbounds i8, i8* %176, i64 %11
  %196 = bitcast i8* %195 to i64*
  %197 = load i64, i64* %196, align 1
  %198 = insertelement <2 x i64> undef, i64 %197, i32 0
  %199 = bitcast i8* %177 to i64*
  %200 = load i64, i64* %199, align 1
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = getelementptr inbounds i8, i8* %177, i64 %12
  %203 = bitcast i8* %202 to i64*
  %204 = load i64, i64* %203, align 1
  %205 = insertelement <2 x i64> %201, i64 %204, i32 1
  %206 = bitcast <2 x i64> %205 to <16 x i8>
  %207 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %206
  %208 = bitcast <2 x i64> %187 to <16 x i8>
  %209 = bitcast <2 x i64> %194 to <16 x i8>
  %210 = shufflevector <16 x i8> %208, <16 x i8> %209, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %211 = shufflevector <16 x i8> %206, <16 x i8> %207, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %212 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %210, <16 x i8> %211) #2
  %213 = lshr <8 x i16> %212, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %214 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %213, <8 x i16> zeroinitializer) #2
  %215 = bitcast <2 x i64> %191 to <16 x i8>
  %216 = bitcast <2 x i64> %198 to <16 x i8>
  %217 = shufflevector <16 x i8> %215, <16 x i8> %216, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %218 = shufflevector <16 x i8> %206, <16 x i8> %207, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %412

219:                                              ; preds = %8
  %220 = bitcast i8* %2 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> undef, i64 %221, i32 0
  %223 = getelementptr inbounds i8, i8* %2, i64 %11
  %224 = bitcast i8* %223 to i64*
  %225 = load i64, i64* %224, align 1
  %226 = insertelement <2 x i64> undef, i64 %225, i32 0
  %227 = bitcast i8* %4 to i64*
  %228 = load i64, i64* %227, align 1
  %229 = insertelement <2 x i64> undef, i64 %228, i32 0
  %230 = getelementptr inbounds i8, i8* %4, i64 8
  %231 = bitcast i8* %230 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast i8* %5 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = insertelement <2 x i64> undef, i64 %235, i32 0
  %237 = getelementptr inbounds i8, i8* %5, i64 %12
  %238 = bitcast i8* %237 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = insertelement <2 x i64> %236, i64 %239, i32 1
  %241 = bitcast <2 x i64> %240 to <16 x i8>
  %242 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %241
  %243 = bitcast <2 x i64> %222 to <16 x i8>
  %244 = bitcast <2 x i64> %229 to <16 x i8>
  %245 = shufflevector <16 x i8> %243, <16 x i8> %244, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %246 = shufflevector <16 x i8> %241, <16 x i8> %242, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %247 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %245, <16 x i8> %246) #2
  %248 = lshr <8 x i16> %247, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %249 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %248, <8 x i16> zeroinitializer) #2
  %250 = bitcast <2 x i64> %226 to <16 x i8>
  %251 = bitcast <2 x i64> %233 to <16 x i8>
  %252 = shufflevector <16 x i8> %250, <16 x i8> %251, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %253 = shufflevector <16 x i8> %241, <16 x i8> %242, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %254 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %252, <16 x i8> %253) #2
  %255 = lshr <8 x i16> %254, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %256 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %255, <8 x i16> zeroinitializer) #2
  %257 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %249, <8 x i16> %256) #2
  %258 = bitcast <2 x i64> %25 to <16 x i8>
  %259 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %257, <16 x i8> %258) #2
  %260 = bitcast <2 x i64> %259 to <4 x i32>
  %261 = getelementptr inbounds i8, i8* %0, i64 %14
  %262 = getelementptr inbounds i8, i8* %2, i64 %16
  %263 = getelementptr inbounds i8, i8* %4, i64 16
  %264 = getelementptr inbounds i8, i8* %5, i64 %18
  %265 = bitcast i8* %261 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = getelementptr inbounds i8, i8* %261, i64 %10
  %269 = bitcast i8* %268 to i64*
  %270 = load i64, i64* %269, align 1
  %271 = insertelement <2 x i64> %267, i64 %270, i32 1
  %272 = bitcast i8* %262 to i64*
  %273 = load i64, i64* %272, align 1
  %274 = insertelement <2 x i64> undef, i64 %273, i32 0
  %275 = getelementptr inbounds i8, i8* %262, i64 %11
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> undef, i64 %277, i32 0
  %279 = bitcast i8* %263 to i64*
  %280 = load i64, i64* %279, align 1
  %281 = insertelement <2 x i64> undef, i64 %280, i32 0
  %282 = getelementptr inbounds i8, i8* %4, i64 24
  %283 = bitcast i8* %282 to i64*
  %284 = load i64, i64* %283, align 1
  %285 = insertelement <2 x i64> undef, i64 %284, i32 0
  %286 = bitcast i8* %264 to i64*
  %287 = load i64, i64* %286, align 1
  %288 = insertelement <2 x i64> undef, i64 %287, i32 0
  %289 = getelementptr inbounds i8, i8* %264, i64 %12
  %290 = bitcast i8* %289 to i64*
  %291 = load i64, i64* %290, align 1
  %292 = insertelement <2 x i64> %288, i64 %291, i32 1
  %293 = bitcast <2 x i64> %292 to <16 x i8>
  %294 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %293
  %295 = bitcast <2 x i64> %274 to <16 x i8>
  %296 = bitcast <2 x i64> %281 to <16 x i8>
  %297 = shufflevector <16 x i8> %295, <16 x i8> %296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %298 = shufflevector <16 x i8> %293, <16 x i8> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %299 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %297, <16 x i8> %298) #2
  %300 = lshr <8 x i16> %299, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %301 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %300, <8 x i16> zeroinitializer) #2
  %302 = bitcast <2 x i64> %278 to <16 x i8>
  %303 = bitcast <2 x i64> %285 to <16 x i8>
  %304 = shufflevector <16 x i8> %302, <16 x i8> %303, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %305 = shufflevector <16 x i8> %293, <16 x i8> %294, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %305) #2
  %307 = lshr <8 x i16> %306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %308 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %307, <8 x i16> zeroinitializer) #2
  %309 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %301, <8 x i16> %308) #2
  %310 = bitcast <2 x i64> %271 to <16 x i8>
  %311 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %309, <16 x i8> %310) #2
  %312 = bitcast <2 x i64> %311 to <4 x i32>
  %313 = add <4 x i32> %260, %312
  %314 = getelementptr inbounds i8, i8* %261, i64 %14
  %315 = getelementptr inbounds i8, i8* %262, i64 %16
  %316 = getelementptr inbounds i8, i8* %4, i64 32
  %317 = getelementptr inbounds i8, i8* %264, i64 %18
  %318 = bitcast i8* %314 to i64*
  %319 = load i64, i64* %318, align 1
  %320 = insertelement <2 x i64> undef, i64 %319, i32 0
  %321 = getelementptr inbounds i8, i8* %314, i64 %10
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %322, align 1
  %324 = insertelement <2 x i64> %320, i64 %323, i32 1
  %325 = bitcast i8* %315 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = insertelement <2 x i64> undef, i64 %326, i32 0
  %328 = getelementptr inbounds i8, i8* %315, i64 %11
  %329 = bitcast i8* %328 to i64*
  %330 = load i64, i64* %329, align 1
  %331 = insertelement <2 x i64> undef, i64 %330, i32 0
  %332 = bitcast i8* %316 to i64*
  %333 = load i64, i64* %332, align 1
  %334 = insertelement <2 x i64> undef, i64 %333, i32 0
  %335 = getelementptr inbounds i8, i8* %4, i64 40
  %336 = bitcast i8* %335 to i64*
  %337 = load i64, i64* %336, align 1
  %338 = insertelement <2 x i64> undef, i64 %337, i32 0
  %339 = bitcast i8* %317 to i64*
  %340 = load i64, i64* %339, align 1
  %341 = insertelement <2 x i64> undef, i64 %340, i32 0
  %342 = getelementptr inbounds i8, i8* %317, i64 %12
  %343 = bitcast i8* %342 to i64*
  %344 = load i64, i64* %343, align 1
  %345 = insertelement <2 x i64> %341, i64 %344, i32 1
  %346 = bitcast <2 x i64> %345 to <16 x i8>
  %347 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %346
  %348 = bitcast <2 x i64> %327 to <16 x i8>
  %349 = bitcast <2 x i64> %334 to <16 x i8>
  %350 = shufflevector <16 x i8> %348, <16 x i8> %349, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %351 = shufflevector <16 x i8> %346, <16 x i8> %347, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %352 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %350, <16 x i8> %351) #2
  %353 = lshr <8 x i16> %352, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %354 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %353, <8 x i16> zeroinitializer) #2
  %355 = bitcast <2 x i64> %331 to <16 x i8>
  %356 = bitcast <2 x i64> %338 to <16 x i8>
  %357 = shufflevector <16 x i8> %355, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %358 = shufflevector <16 x i8> %346, <16 x i8> %347, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %359 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %357, <16 x i8> %358) #2
  %360 = lshr <8 x i16> %359, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %361 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %360, <8 x i16> zeroinitializer) #2
  %362 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %354, <8 x i16> %361) #2
  %363 = bitcast <2 x i64> %324 to <16 x i8>
  %364 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %362, <16 x i8> %363) #2
  %365 = bitcast <2 x i64> %364 to <4 x i32>
  %366 = add <4 x i32> %313, %365
  %367 = getelementptr inbounds i8, i8* %314, i64 %14
  %368 = getelementptr inbounds i8, i8* %315, i64 %16
  %369 = getelementptr inbounds i8, i8* %4, i64 48
  %370 = getelementptr inbounds i8, i8* %317, i64 %18
  %371 = bitcast i8* %367 to i64*
  %372 = load i64, i64* %371, align 1
  %373 = insertelement <2 x i64> undef, i64 %372, i32 0
  %374 = getelementptr inbounds i8, i8* %367, i64 %10
  %375 = bitcast i8* %374 to i64*
  %376 = load i64, i64* %375, align 1
  %377 = insertelement <2 x i64> %373, i64 %376, i32 1
  %378 = bitcast i8* %368 to i64*
  %379 = load i64, i64* %378, align 1
  %380 = insertelement <2 x i64> undef, i64 %379, i32 0
  %381 = getelementptr inbounds i8, i8* %368, i64 %11
  %382 = bitcast i8* %381 to i64*
  %383 = load i64, i64* %382, align 1
  %384 = insertelement <2 x i64> undef, i64 %383, i32 0
  %385 = bitcast i8* %369 to i64*
  %386 = load i64, i64* %385, align 1
  %387 = insertelement <2 x i64> undef, i64 %386, i32 0
  %388 = getelementptr inbounds i8, i8* %4, i64 56
  %389 = bitcast i8* %388 to i64*
  %390 = load i64, i64* %389, align 1
  %391 = insertelement <2 x i64> undef, i64 %390, i32 0
  %392 = bitcast i8* %370 to i64*
  %393 = load i64, i64* %392, align 1
  %394 = insertelement <2 x i64> undef, i64 %393, i32 0
  %395 = getelementptr inbounds i8, i8* %370, i64 %12
  %396 = bitcast i8* %395 to i64*
  %397 = load i64, i64* %396, align 1
  %398 = insertelement <2 x i64> %394, i64 %397, i32 1
  %399 = bitcast <2 x i64> %398 to <16 x i8>
  %400 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %399
  %401 = bitcast <2 x i64> %380 to <16 x i8>
  %402 = bitcast <2 x i64> %387 to <16 x i8>
  %403 = shufflevector <16 x i8> %401, <16 x i8> %402, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %404 = shufflevector <16 x i8> %399, <16 x i8> %400, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %405 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %403, <16 x i8> %404) #2
  %406 = lshr <8 x i16> %405, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %407 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %406, <8 x i16> zeroinitializer) #2
  %408 = bitcast <2 x i64> %384 to <16 x i8>
  %409 = bitcast <2 x i64> %391 to <16 x i8>
  %410 = shufflevector <16 x i8> %408, <16 x i8> %409, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %411 = shufflevector <16 x i8> %399, <16 x i8> %400, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %412

412:                                              ; preds = %26, %219
  %413 = phi <16 x i8> [ %218, %26 ], [ %411, %219 ]
  %414 = phi <16 x i8> [ %217, %26 ], [ %410, %219 ]
  %415 = phi <8 x i16> [ %214, %26 ], [ %407, %219 ]
  %416 = phi <2 x i64> [ %184, %26 ], [ %377, %219 ]
  %417 = phi <4 x i32> [ %173, %26 ], [ %366, %219 ]
  %418 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %414, <16 x i8> %413) #2
  %419 = lshr <8 x i16> %418, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %420 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %419, <8 x i16> zeroinitializer) #2
  %421 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %415, <8 x i16> %420) #2
  %422 = bitcast <2 x i64> %416 to <16 x i8>
  %423 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %421, <16 x i8> %422) #2
  %424 = bitcast <2 x i64> %423 to <4 x i32>
  %425 = add <4 x i32> %417, %424
  %426 = bitcast <4 x i32> %425 to <16 x i8>
  %427 = extractelement <4 x i32> %425, i32 0
  %428 = shufflevector <16 x i8> %426, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %429 = bitcast <16 x i8> %428 to <4 x i32>
  %430 = extractelement <4 x i32> %429, i32 0
  %431 = add nsw i32 %430, %427
  ret i32 %431
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x4_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = bitcast i8* %0 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %0, i64 %10
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> %21, i64 %24, i32 1
  br i1 %9, label %112, label %26

26:                                               ; preds = %8
  %27 = bitcast i8* %4 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = getelementptr inbounds i8, i8* %4, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast i8* %2 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %2, i64 %11
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = bitcast i8* %5 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %5, i64 %12
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> %43, i64 %46, i32 1
  %48 = bitcast <2 x i64> %47 to <16 x i8>
  %49 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %48
  %50 = bitcast <2 x i64> %29 to <16 x i8>
  %51 = bitcast <2 x i64> %36 to <16 x i8>
  %52 = shufflevector <16 x i8> %50, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %52, <16 x i8> %53) #2
  %55 = lshr <8 x i16> %54, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %56 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %55, <8 x i16> zeroinitializer) #2
  %57 = bitcast <2 x i64> %33 to <16 x i8>
  %58 = bitcast <2 x i64> %40 to <16 x i8>
  %59 = shufflevector <16 x i8> %57, <16 x i8> %58, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %59, <16 x i8> %60) #2
  %62 = lshr <8 x i16> %61, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %63 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %62, <8 x i16> zeroinitializer) #2
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %56, <8 x i16> %63) #2
  %65 = bitcast <2 x i64> %25 to <16 x i8>
  %66 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %64, <16 x i8> %65) #2
  %67 = getelementptr inbounds i8, i8* %0, i64 %14
  %68 = getelementptr inbounds i8, i8* %4, i64 16
  %69 = getelementptr inbounds i8, i8* %2, i64 %16
  %70 = getelementptr inbounds i8, i8* %5, i64 %18
  %71 = bitcast i8* %67 to i64*
  %72 = load i64, i64* %71, align 1
  %73 = insertelement <2 x i64> undef, i64 %72, i32 0
  %74 = getelementptr inbounds i8, i8* %67, i64 %10
  %75 = bitcast i8* %74 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> %73, i64 %76, i32 1
  %78 = bitcast i8* %68 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = getelementptr inbounds i8, i8* %4, i64 24
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = insertelement <2 x i64> undef, i64 %83, i32 0
  %85 = bitcast i8* %69 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = insertelement <2 x i64> undef, i64 %86, i32 0
  %88 = getelementptr inbounds i8, i8* %69, i64 %11
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = insertelement <2 x i64> undef, i64 %90, i32 0
  %92 = bitcast i8* %70 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = getelementptr inbounds i8, i8* %70, i64 %12
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> %94, i64 %97, i32 1
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %99
  %101 = bitcast <2 x i64> %80 to <16 x i8>
  %102 = bitcast <2 x i64> %87 to <16 x i8>
  %103 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %99, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %103, <16 x i8> %104) #2
  %106 = lshr <8 x i16> %105, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %106, <8 x i16> zeroinitializer) #2
  %108 = bitcast <2 x i64> %84 to <16 x i8>
  %109 = bitcast <2 x i64> %91 to <16 x i8>
  %110 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %99, <16 x i8> %100, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %198

112:                                              ; preds = %8
  %113 = bitcast i8* %2 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = insertelement <2 x i64> undef, i64 %114, i32 0
  %116 = getelementptr inbounds i8, i8* %2, i64 %11
  %117 = bitcast i8* %116 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = insertelement <2 x i64> undef, i64 %118, i32 0
  %120 = bitcast i8* %4 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = getelementptr inbounds i8, i8* %4, i64 8
  %124 = bitcast i8* %123 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = bitcast i8* %5 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = insertelement <2 x i64> undef, i64 %128, i32 0
  %130 = getelementptr inbounds i8, i8* %5, i64 %12
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> %129, i64 %132, i32 1
  %134 = bitcast <2 x i64> %133 to <16 x i8>
  %135 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %134
  %136 = bitcast <2 x i64> %115 to <16 x i8>
  %137 = bitcast <2 x i64> %122 to <16 x i8>
  %138 = shufflevector <16 x i8> %136, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = shufflevector <16 x i8> %134, <16 x i8> %135, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %138, <16 x i8> %139) #2
  %141 = lshr <8 x i16> %140, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %142 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %141, <8 x i16> zeroinitializer) #2
  %143 = bitcast <2 x i64> %119 to <16 x i8>
  %144 = bitcast <2 x i64> %126 to <16 x i8>
  %145 = shufflevector <16 x i8> %143, <16 x i8> %144, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %146 = shufflevector <16 x i8> %134, <16 x i8> %135, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %145, <16 x i8> %146) #2
  %148 = lshr <8 x i16> %147, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %149 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %148, <8 x i16> zeroinitializer) #2
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %149) #2
  %151 = bitcast <2 x i64> %25 to <16 x i8>
  %152 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %150, <16 x i8> %151) #2
  %153 = getelementptr inbounds i8, i8* %0, i64 %14
  %154 = getelementptr inbounds i8, i8* %2, i64 %16
  %155 = getelementptr inbounds i8, i8* %4, i64 16
  %156 = getelementptr inbounds i8, i8* %5, i64 %18
  %157 = bitcast i8* %153 to i64*
  %158 = load i64, i64* %157, align 1
  %159 = insertelement <2 x i64> undef, i64 %158, i32 0
  %160 = getelementptr inbounds i8, i8* %153, i64 %10
  %161 = bitcast i8* %160 to i64*
  %162 = load i64, i64* %161, align 1
  %163 = insertelement <2 x i64> %159, i64 %162, i32 1
  %164 = bitcast i8* %154 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> undef, i64 %165, i32 0
  %167 = getelementptr inbounds i8, i8* %154, i64 %11
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> undef, i64 %169, i32 0
  %171 = bitcast i8* %155 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> undef, i64 %172, i32 0
  %174 = getelementptr inbounds i8, i8* %4, i64 24
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 1
  %177 = insertelement <2 x i64> undef, i64 %176, i32 0
  %178 = bitcast i8* %156 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = getelementptr inbounds i8, i8* %156, i64 %12
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = insertelement <2 x i64> %180, i64 %183, i32 1
  %185 = bitcast <2 x i64> %184 to <16 x i8>
  %186 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %185
  %187 = bitcast <2 x i64> %166 to <16 x i8>
  %188 = bitcast <2 x i64> %173 to <16 x i8>
  %189 = shufflevector <16 x i8> %187, <16 x i8> %188, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = shufflevector <16 x i8> %185, <16 x i8> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %189, <16 x i8> %190) #2
  %192 = lshr <8 x i16> %191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %193 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %192, <8 x i16> zeroinitializer) #2
  %194 = bitcast <2 x i64> %170 to <16 x i8>
  %195 = bitcast <2 x i64> %177 to <16 x i8>
  %196 = shufflevector <16 x i8> %194, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = shufflevector <16 x i8> %185, <16 x i8> %186, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %198

198:                                              ; preds = %26, %112
  %199 = phi <16 x i8> [ %111, %26 ], [ %197, %112 ]
  %200 = phi <16 x i8> [ %110, %26 ], [ %196, %112 ]
  %201 = phi <8 x i16> [ %107, %26 ], [ %193, %112 ]
  %202 = phi <2 x i64> [ %77, %26 ], [ %163, %112 ]
  %203 = phi <2 x i64> [ %66, %26 ], [ %152, %112 ]
  %204 = bitcast <2 x i64> %203 to <4 x i32>
  %205 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %199) #2
  %206 = lshr <8 x i16> %205, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %207 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %206, <8 x i16> zeroinitializer) #2
  %208 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %201, <8 x i16> %207) #2
  %209 = bitcast <2 x i64> %202 to <16 x i8>
  %210 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %208, <16 x i8> %209) #2
  %211 = bitcast <2 x i64> %210 to <4 x i32>
  %212 = add <4 x i32> %204, %211
  %213 = bitcast <4 x i32> %212 to <16 x i8>
  %214 = extractelement <4 x i32> %212, i32 0
  %215 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %216 = bitcast <16 x i8> %215 to <4 x i32>
  %217 = extractelement <4 x i32> %216, i32 0
  %218 = add nsw i32 %217, %214
  ret i32 %218
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x8_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = bitcast i8* %0 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %0, i64 %10
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %24, i32 0
  %26 = shufflevector <4 x i32> %21, <4 x i32> %25, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  br i1 %9, label %165, label %27

27:                                               ; preds = %8
  %28 = bitcast i8* %4 to <2 x i32>*
  %29 = load <2 x i32>, <2 x i32>* %28, align 4
  %30 = shufflevector <2 x i32> %29, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast i8* %2 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %2, i64 %11
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <4 x i32> %33, i32 %36, i32 1
  %38 = bitcast i8* %5 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %39, i32 0
  %41 = getelementptr inbounds i8, i8* %5, i64 %12
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %40, <4 x i32> %44, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %46
  %48 = bitcast <4 x i32> %30 to <16 x i8>
  %49 = bitcast <4 x i32> %37 to <16 x i8>
  %50 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %46, <16 x i8> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %50, <16 x i8> %51) #2
  %53 = lshr <8 x i16> %52, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %54 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %53, <8 x i16> zeroinitializer) #2
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> zeroinitializer) #2
  %56 = bitcast <4 x i32> %26 to <16 x i8>
  %57 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %55, <16 x i8> %56) #2
  %58 = bitcast <2 x i64> %57 to <4 x i32>
  %59 = getelementptr inbounds i8, i8* %0, i64 %14
  %60 = getelementptr inbounds i8, i8* %4, i64 8
  %61 = getelementptr inbounds i8, i8* %2, i64 %16
  %62 = getelementptr inbounds i8, i8* %5, i64 %18
  %63 = bitcast i8* %59 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %64, i32 0
  %66 = getelementptr inbounds i8, i8* %59, i64 %10
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %68, i32 0
  %70 = shufflevector <4 x i32> %65, <4 x i32> %69, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %71 = bitcast i8* %60 to <2 x i32>*
  %72 = load <2 x i32>, <2 x i32>* %71, align 4
  %73 = shufflevector <2 x i32> %72, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = bitcast i8* %61 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = insertelement <4 x i32> undef, i32 %75, i32 0
  %77 = getelementptr inbounds i8, i8* %61, i64 %11
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = insertelement <4 x i32> %76, i32 %79, i32 1
  %81 = bitcast i8* %62 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %82, i32 0
  %84 = getelementptr inbounds i8, i8* %62, i64 %12
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %86, i32 0
  %88 = shufflevector <4 x i32> %83, <4 x i32> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = bitcast <4 x i32> %88 to <16 x i8>
  %90 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %89
  %91 = bitcast <4 x i32> %73 to <16 x i8>
  %92 = bitcast <4 x i32> %80 to <16 x i8>
  %93 = shufflevector <16 x i8> %91, <16 x i8> %92, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %89, <16 x i8> %90, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %95 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %93, <16 x i8> %94) #2
  %96 = lshr <8 x i16> %95, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %97 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %96, <8 x i16> zeroinitializer) #2
  %98 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> zeroinitializer) #2
  %99 = bitcast <4 x i32> %70 to <16 x i8>
  %100 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %98, <16 x i8> %99) #2
  %101 = bitcast <2 x i64> %100 to <4 x i32>
  %102 = add <4 x i32> %58, %101
  %103 = getelementptr inbounds i8, i8* %59, i64 %14
  %104 = getelementptr inbounds i8, i8* %4, i64 16
  %105 = getelementptr inbounds i8, i8* %61, i64 %16
  %106 = getelementptr inbounds i8, i8* %62, i64 %18
  %107 = bitcast i8* %103 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %108, i32 0
  %110 = getelementptr inbounds i8, i8* %103, i64 %10
  %111 = bitcast i8* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %112, i32 0
  %114 = shufflevector <4 x i32> %109, <4 x i32> %113, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %115 = bitcast i8* %104 to <2 x i32>*
  %116 = load <2 x i32>, <2 x i32>* %115, align 4
  %117 = shufflevector <2 x i32> %116, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = bitcast i8* %105 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = insertelement <4 x i32> undef, i32 %119, i32 0
  %121 = getelementptr inbounds i8, i8* %105, i64 %11
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = insertelement <4 x i32> %120, i32 %123, i32 1
  %125 = bitcast i8* %106 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %106, i64 %12
  %129 = bitcast i8* %128 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %130, i32 0
  %132 = shufflevector <4 x i32> %127, <4 x i32> %131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %133
  %135 = bitcast <4 x i32> %117 to <16 x i8>
  %136 = bitcast <4 x i32> %124 to <16 x i8>
  %137 = shufflevector <16 x i8> %135, <16 x i8> %136, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %137, <16 x i8> %138) #2
  %140 = lshr <8 x i16> %139, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %141 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %140, <8 x i16> zeroinitializer) #2
  %142 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> zeroinitializer) #2
  %143 = bitcast <4 x i32> %114 to <16 x i8>
  %144 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %142, <16 x i8> %143) #2
  %145 = bitcast <2 x i64> %144 to <4 x i32>
  %146 = add <4 x i32> %102, %145
  %147 = getelementptr inbounds i8, i8* %103, i64 %14
  %148 = getelementptr inbounds i8, i8* %4, i64 24
  %149 = getelementptr inbounds i8, i8* %105, i64 %16
  %150 = bitcast i8* %147 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %151, i32 0
  %153 = getelementptr inbounds i8, i8* %147, i64 %10
  %154 = bitcast i8* %153 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %155, i32 0
  %157 = shufflevector <4 x i32> %152, <4 x i32> %156, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %158 = bitcast i8* %148 to <2 x i32>*
  %159 = load <2 x i32>, <2 x i32>* %158, align 4
  %160 = shufflevector <2 x i32> %159, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = bitcast i8* %149 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = insertelement <4 x i32> undef, i32 %162, i32 0
  %164 = getelementptr inbounds i8, i8* %149, i64 %11
  br label %307

165:                                              ; preds = %8
  %166 = bitcast i8* %2 to i32*
  %167 = load i32, i32* %166, align 4
  %168 = insertelement <4 x i32> undef, i32 %167, i32 0
  %169 = getelementptr inbounds i8, i8* %2, i64 %11
  %170 = bitcast i8* %169 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = insertelement <4 x i32> %168, i32 %171, i32 1
  %173 = bitcast i8* %4 to <2 x i32>*
  %174 = load <2 x i32>, <2 x i32>* %173, align 4
  %175 = shufflevector <2 x i32> %174, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = bitcast i8* %5 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %177, i32 0
  %179 = getelementptr inbounds i8, i8* %5, i64 %12
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %181, i32 0
  %183 = shufflevector <4 x i32> %178, <4 x i32> %182, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %184 = bitcast <4 x i32> %183 to <16 x i8>
  %185 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %184
  %186 = bitcast <4 x i32> %172 to <16 x i8>
  %187 = bitcast <4 x i32> %175 to <16 x i8>
  %188 = shufflevector <16 x i8> %186, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %189 = shufflevector <16 x i8> %184, <16 x i8> %185, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %188, <16 x i8> %189) #2
  %191 = lshr <8 x i16> %190, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %192 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %191, <8 x i16> zeroinitializer) #2
  %193 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %192, <8 x i16> zeroinitializer) #2
  %194 = bitcast <4 x i32> %26 to <16 x i8>
  %195 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %193, <16 x i8> %194) #2
  %196 = bitcast <2 x i64> %195 to <4 x i32>
  %197 = getelementptr inbounds i8, i8* %0, i64 %14
  %198 = getelementptr inbounds i8, i8* %2, i64 %16
  %199 = getelementptr inbounds i8, i8* %4, i64 8
  %200 = getelementptr inbounds i8, i8* %5, i64 %18
  %201 = bitcast i8* %197 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %202, i32 0
  %204 = getelementptr inbounds i8, i8* %197, i64 %10
  %205 = bitcast i8* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %206, i32 0
  %208 = shufflevector <4 x i32> %203, <4 x i32> %207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %209 = bitcast i8* %198 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = insertelement <4 x i32> undef, i32 %210, i32 0
  %212 = getelementptr inbounds i8, i8* %198, i64 %11
  %213 = bitcast i8* %212 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = insertelement <4 x i32> %211, i32 %214, i32 1
  %216 = bitcast i8* %199 to <2 x i32>*
  %217 = load <2 x i32>, <2 x i32>* %216, align 4
  %218 = shufflevector <2 x i32> %217, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %219 = bitcast i8* %200 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %220, i32 0
  %222 = getelementptr inbounds i8, i8* %200, i64 %12
  %223 = bitcast i8* %222 to i32*
  %224 = load i32, i32* %223, align 4
  %225 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %224, i32 0
  %226 = shufflevector <4 x i32> %221, <4 x i32> %225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast <4 x i32> %226 to <16 x i8>
  %228 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %227
  %229 = bitcast <4 x i32> %215 to <16 x i8>
  %230 = bitcast <4 x i32> %218 to <16 x i8>
  %231 = shufflevector <16 x i8> %229, <16 x i8> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %232 = shufflevector <16 x i8> %227, <16 x i8> %228, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %233 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %231, <16 x i8> %232) #2
  %234 = lshr <8 x i16> %233, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %235 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %234, <8 x i16> zeroinitializer) #2
  %236 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %235, <8 x i16> zeroinitializer) #2
  %237 = bitcast <4 x i32> %208 to <16 x i8>
  %238 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %236, <16 x i8> %237) #2
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = add <4 x i32> %196, %239
  %241 = getelementptr inbounds i8, i8* %197, i64 %14
  %242 = getelementptr inbounds i8, i8* %198, i64 %16
  %243 = getelementptr inbounds i8, i8* %4, i64 16
  %244 = getelementptr inbounds i8, i8* %200, i64 %18
  %245 = bitcast i8* %241 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %246, i32 0
  %248 = getelementptr inbounds i8, i8* %241, i64 %10
  %249 = bitcast i8* %248 to i32*
  %250 = load i32, i32* %249, align 4
  %251 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %250, i32 0
  %252 = shufflevector <4 x i32> %247, <4 x i32> %251, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %253 = bitcast i8* %242 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = insertelement <4 x i32> undef, i32 %254, i32 0
  %256 = getelementptr inbounds i8, i8* %242, i64 %11
  %257 = bitcast i8* %256 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = insertelement <4 x i32> %255, i32 %258, i32 1
  %260 = bitcast i8* %243 to <2 x i32>*
  %261 = load <2 x i32>, <2 x i32>* %260, align 4
  %262 = shufflevector <2 x i32> %261, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %263 = bitcast i8* %244 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %264, i32 0
  %266 = getelementptr inbounds i8, i8* %244, i64 %12
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %268, i32 0
  %270 = shufflevector <4 x i32> %265, <4 x i32> %269, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %271 = bitcast <4 x i32> %270 to <16 x i8>
  %272 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %271
  %273 = bitcast <4 x i32> %259 to <16 x i8>
  %274 = bitcast <4 x i32> %262 to <16 x i8>
  %275 = shufflevector <16 x i8> %273, <16 x i8> %274, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %276 = shufflevector <16 x i8> %271, <16 x i8> %272, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %277 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %275, <16 x i8> %276) #2
  %278 = lshr <8 x i16> %277, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %279 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %278, <8 x i16> zeroinitializer) #2
  %280 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %279, <8 x i16> zeroinitializer) #2
  %281 = bitcast <4 x i32> %252 to <16 x i8>
  %282 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %280, <16 x i8> %281) #2
  %283 = bitcast <2 x i64> %282 to <4 x i32>
  %284 = add <4 x i32> %240, %283
  %285 = getelementptr inbounds i8, i8* %241, i64 %14
  %286 = getelementptr inbounds i8, i8* %242, i64 %16
  %287 = getelementptr inbounds i8, i8* %4, i64 24
  %288 = bitcast i8* %285 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %289, i32 0
  %291 = getelementptr inbounds i8, i8* %285, i64 %10
  %292 = bitcast i8* %291 to i32*
  %293 = load i32, i32* %292, align 4
  %294 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %293, i32 0
  %295 = shufflevector <4 x i32> %290, <4 x i32> %294, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %296 = bitcast i8* %286 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = insertelement <4 x i32> undef, i32 %297, i32 0
  %299 = getelementptr inbounds i8, i8* %286, i64 %11
  %300 = bitcast i8* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = insertelement <4 x i32> %298, i32 %301, i32 1
  %303 = bitcast i8* %287 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = insertelement <4 x i32> undef, i32 %304, i32 0
  %306 = getelementptr inbounds i8, i8* %4, i64 28
  br label %307

307:                                              ; preds = %27, %165
  %308 = phi i8* [ %164, %27 ], [ %306, %165 ]
  %309 = phi <4 x i32> [ %163, %27 ], [ %305, %165 ]
  %310 = phi <4 x i32> [ %160, %27 ], [ %302, %165 ]
  %311 = phi <4 x i32> [ %157, %27 ], [ %295, %165 ]
  %312 = phi <4 x i32> [ %146, %27 ], [ %284, %165 ]
  %313 = getelementptr inbounds i8, i8* %5, i64 %18
  %314 = getelementptr inbounds i8, i8* %313, i64 %18
  %315 = getelementptr inbounds i8, i8* %314, i64 %18
  %316 = bitcast i8* %308 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = insertelement <4 x i32> %309, i32 %317, i32 1
  %319 = bitcast i8* %315 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %320, i32 0
  %322 = getelementptr inbounds i8, i8* %315, i64 %12
  %323 = bitcast i8* %322 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %324, i32 0
  %326 = shufflevector <4 x i32> %321, <4 x i32> %325, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %327 = bitcast <4 x i32> %326 to <16 x i8>
  %328 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %327
  %329 = bitcast <4 x i32> %310 to <16 x i8>
  %330 = bitcast <4 x i32> %318 to <16 x i8>
  %331 = shufflevector <16 x i8> %329, <16 x i8> %330, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %332 = shufflevector <16 x i8> %327, <16 x i8> %328, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %333 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %331, <16 x i8> %332) #2
  %334 = lshr <8 x i16> %333, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %335 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %334, <8 x i16> zeroinitializer) #2
  %336 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %335, <8 x i16> zeroinitializer) #2
  %337 = bitcast <4 x i32> %311 to <16 x i8>
  %338 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %336, <16 x i8> %337) #2
  %339 = bitcast <2 x i64> %338 to <4 x i32>
  %340 = add <4 x i32> %312, %339
  %341 = extractelement <4 x i32> %340, i32 0
  ret i32 %341
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4xh_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %81

11:                                               ; preds = %9
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = sext i32 %5 to i64
  %15 = sext i32 %7 to i64
  %16 = shl nsw i32 %1, 1
  %17 = sext i32 %16 to i64
  %18 = shl nsw i32 %3, 1
  %19 = sext i32 %18 to i64
  %20 = shl nsw i32 %5, 1
  %21 = sext i32 %20 to i64
  %22 = shl nsw i32 %7, 1
  %23 = sext i32 %22 to i64
  br label %24

24:                                               ; preds = %11, %24
  %25 = phi i8* [ %0, %11 ], [ %75, %24 ]
  %26 = phi i8* [ %2, %11 ], [ %76, %24 ]
  %27 = phi i8* [ %4, %11 ], [ %77, %24 ]
  %28 = phi i8* [ %6, %11 ], [ %78, %24 ]
  %29 = phi i32 [ 0, %11 ], [ %79, %24 ]
  %30 = phi <4 x i32> [ zeroinitializer, %11 ], [ %74, %24 ]
  %31 = bitcast i8* %25 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %25, i64 %12
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %36, i32 0
  %38 = shufflevector <4 x i32> %33, <4 x i32> %37, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %39 = bitcast i8* %26 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = insertelement <4 x i32> undef, i32 %40, i32 0
  %42 = getelementptr inbounds i8, i8* %26, i64 %13
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = insertelement <4 x i32> %41, i32 %44, i32 1
  %46 = bitcast i8* %27 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = insertelement <4 x i32> undef, i32 %47, i32 0
  %49 = getelementptr inbounds i8, i8* %27, i64 %14
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <4 x i32> %48, i32 %51, i32 1
  %53 = bitcast i8* %28 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %54, i32 0
  %56 = getelementptr inbounds i8, i8* %28, i64 %15
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %58, i32 0
  %60 = shufflevector <4 x i32> %55, <4 x i32> %59, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %61 = bitcast <4 x i32> %60 to <16 x i8>
  %62 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %61
  %63 = bitcast <4 x i32> %45 to <16 x i8>
  %64 = bitcast <4 x i32> %52 to <16 x i8>
  %65 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %61, <16 x i8> %62, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> zeroinitializer) #2
  %71 = bitcast <4 x i32> %38 to <16 x i8>
  %72 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %70, <16 x i8> %71) #2
  %73 = bitcast <2 x i64> %72 to <4 x i32>
  %74 = add <4 x i32> %30, %73
  %75 = getelementptr inbounds i8, i8* %25, i64 %17
  %76 = getelementptr inbounds i8, i8* %26, i64 %19
  %77 = getelementptr inbounds i8, i8* %27, i64 %21
  %78 = getelementptr inbounds i8, i8* %28, i64 %23
  %79 = add nuw nsw i32 %29, 2
  %80 = icmp slt i32 %79, %8
  br i1 %80, label %24, label %81

81:                                               ; preds = %24, %9
  %82 = phi <4 x i32> [ zeroinitializer, %9 ], [ %74, %24 ]
  %83 = extractelement <4 x i32> %82, i32 0
  ret i32 %83
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x4_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = bitcast i8* %0 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %0, i64 %10
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %24, i32 0
  %26 = shufflevector <4 x i32> %21, <4 x i32> %25, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  br i1 %9, label %76, label %27

27:                                               ; preds = %8
  %28 = bitcast i8* %4 to <2 x i32>*
  %29 = load <2 x i32>, <2 x i32>* %28, align 4
  %30 = shufflevector <2 x i32> %29, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast i8* %2 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %2, i64 %11
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <4 x i32> %33, i32 %36, i32 1
  %38 = bitcast i8* %5 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %39, i32 0
  %41 = getelementptr inbounds i8, i8* %5, i64 %12
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %40, <4 x i32> %44, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %46
  %48 = bitcast <4 x i32> %30 to <16 x i8>
  %49 = bitcast <4 x i32> %37 to <16 x i8>
  %50 = shufflevector <16 x i8> %48, <16 x i8> %49, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %46, <16 x i8> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %50, <16 x i8> %51) #2
  %53 = lshr <8 x i16> %52, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %54 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %53, <8 x i16> zeroinitializer) #2
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> zeroinitializer) #2
  %56 = bitcast <4 x i32> %26 to <16 x i8>
  %57 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %55, <16 x i8> %56) #2
  %58 = getelementptr inbounds i8, i8* %0, i64 %14
  %59 = getelementptr inbounds i8, i8* %4, i64 8
  %60 = getelementptr inbounds i8, i8* %2, i64 %16
  %61 = bitcast i8* %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %62, i32 0
  %64 = getelementptr inbounds i8, i8* %58, i64 %10
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %66, i32 0
  %68 = shufflevector <4 x i32> %63, <4 x i32> %67, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %69 = bitcast i8* %59 to <2 x i32>*
  %70 = load <2 x i32>, <2 x i32>* %69, align 4
  %71 = shufflevector <2 x i32> %70, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %72 = bitcast i8* %60 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %60, i64 %11
  br label %129

76:                                               ; preds = %8
  %77 = bitcast i8* %2 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = insertelement <4 x i32> undef, i32 %78, i32 0
  %80 = getelementptr inbounds i8, i8* %2, i64 %11
  %81 = bitcast i8* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = insertelement <4 x i32> %79, i32 %82, i32 1
  %84 = bitcast i8* %4 to <2 x i32>*
  %85 = load <2 x i32>, <2 x i32>* %84, align 4
  %86 = shufflevector <2 x i32> %85, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = bitcast i8* %5 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %88, i32 0
  %90 = getelementptr inbounds i8, i8* %5, i64 %12
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %92, i32 0
  %94 = shufflevector <4 x i32> %89, <4 x i32> %93, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %95
  %97 = bitcast <4 x i32> %83 to <16 x i8>
  %98 = bitcast <4 x i32> %86 to <16 x i8>
  %99 = shufflevector <16 x i8> %97, <16 x i8> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %95, <16 x i8> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %99, <16 x i8> %100) #2
  %102 = lshr <8 x i16> %101, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %103 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %102, <8 x i16> zeroinitializer) #2
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %103, <8 x i16> zeroinitializer) #2
  %105 = bitcast <4 x i32> %26 to <16 x i8>
  %106 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %104, <16 x i8> %105) #2
  %107 = getelementptr inbounds i8, i8* %0, i64 %14
  %108 = getelementptr inbounds i8, i8* %2, i64 %16
  %109 = getelementptr inbounds i8, i8* %4, i64 8
  %110 = bitcast i8* %107 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %111, i32 0
  %113 = getelementptr inbounds i8, i8* %107, i64 %10
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %112, <4 x i32> %116, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %118 = bitcast i8* %108 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = insertelement <4 x i32> undef, i32 %119, i32 0
  %121 = getelementptr inbounds i8, i8* %108, i64 %11
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = insertelement <4 x i32> %120, i32 %123, i32 1
  %125 = bitcast i8* %109 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = insertelement <4 x i32> undef, i32 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %4, i64 12
  br label %129

129:                                              ; preds = %27, %76
  %130 = phi i8* [ %75, %27 ], [ %128, %76 ]
  %131 = phi <4 x i32> [ %74, %27 ], [ %127, %76 ]
  %132 = phi <4 x i32> [ %71, %27 ], [ %124, %76 ]
  %133 = phi <4 x i32> [ %68, %27 ], [ %117, %76 ]
  %134 = phi <2 x i64> [ %57, %27 ], [ %106, %76 ]
  %135 = bitcast <2 x i64> %134 to <4 x i32>
  %136 = getelementptr inbounds i8, i8* %5, i64 %18
  %137 = bitcast i8* %130 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = insertelement <4 x i32> %131, i32 %138, i32 1
  %140 = bitcast i8* %136 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %141, i32 0
  %143 = getelementptr inbounds i8, i8* %136, i64 %12
  %144 = bitcast i8* %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %145, i32 0
  %147 = shufflevector <4 x i32> %142, <4 x i32> %146, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %148 = bitcast <4 x i32> %147 to <16 x i8>
  %149 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %148
  %150 = bitcast <4 x i32> %132 to <16 x i8>
  %151 = bitcast <4 x i32> %139 to <16 x i8>
  %152 = shufflevector <16 x i8> %150, <16 x i8> %151, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %148, <16 x i8> %149, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %154 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %152, <16 x i8> %153) #2
  %155 = lshr <8 x i16> %154, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %156 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %155, <8 x i16> zeroinitializer) #2
  %157 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %156, <8 x i16> zeroinitializer) #2
  %158 = bitcast <4 x i32> %133 to <16 x i8>
  %159 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %157, <16 x i8> %158) #2
  %160 = bitcast <2 x i64> %159 to <4 x i32>
  %161 = add <4 x i32> %135, %160
  %162 = extractelement <4 x i32> %161, i32 0
  ret i32 %162
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x16_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %72

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %66, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %67, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %68, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %69, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %70, %19 ], [ 0, %8 ]
  %25 = phi <4 x i32> [ %65, %19 ], [ zeroinitializer, %8 ]
  %26 = bitcast i8* %20 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %27, i32 0
  %29 = getelementptr inbounds i8, i8* %20, i64 %10
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %33 = shufflevector <4 x i32> %28, <4 x i32> %32, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %34 = bitcast i8* %21 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = insertelement <4 x i32> undef, i32 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %21, i64 %11
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = insertelement <4 x i32> %36, i32 %39, i32 1
  %41 = bitcast i8* %22 to <2 x i32>*
  %42 = load <2 x i32>, <2 x i32>* %41, align 4
  %43 = shufflevector <2 x i32> %42, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = bitcast i8* %23 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %45, i32 0
  %47 = getelementptr inbounds i8, i8* %23, i64 %12
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %49, i32 0
  %51 = shufflevector <4 x i32> %46, <4 x i32> %50, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %52
  %54 = bitcast <4 x i32> %40 to <16 x i8>
  %55 = bitcast <4 x i32> %43 to <16 x i8>
  %56 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %52, <16 x i8> %53, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> zeroinitializer) #2
  %62 = bitcast <4 x i32> %33 to <16 x i8>
  %63 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %61, <16 x i8> %62) #2
  %64 = bitcast <2 x i64> %63 to <4 x i32>
  %65 = add <4 x i32> %25, %64
  %66 = getelementptr inbounds i8, i8* %20, i64 %14
  %67 = getelementptr inbounds i8, i8* %21, i64 %16
  %68 = getelementptr inbounds i8, i8* %22, i64 8
  %69 = getelementptr inbounds i8, i8* %23, i64 %18
  %70 = add nuw nsw i32 %24, 2
  %71 = icmp ult i32 %70, 16
  br i1 %71, label %19, label %125

72:                                               ; preds = %8, %72
  %73 = phi i8* [ %119, %72 ], [ %0, %8 ]
  %74 = phi i8* [ %120, %72 ], [ %4, %8 ]
  %75 = phi i8* [ %121, %72 ], [ %2, %8 ]
  %76 = phi i8* [ %122, %72 ], [ %5, %8 ]
  %77 = phi i32 [ %123, %72 ], [ 0, %8 ]
  %78 = phi <4 x i32> [ %118, %72 ], [ zeroinitializer, %8 ]
  %79 = bitcast i8* %73 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %80, i32 0
  %82 = getelementptr inbounds i8, i8* %73, i64 %10
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %84, i32 0
  %86 = shufflevector <4 x i32> %81, <4 x i32> %85, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %87 = bitcast i8* %74 to <2 x i32>*
  %88 = load <2 x i32>, <2 x i32>* %87, align 4
  %89 = shufflevector <2 x i32> %88, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = bitcast i8* %75 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = insertelement <4 x i32> undef, i32 %91, i32 0
  %93 = getelementptr inbounds i8, i8* %75, i64 %11
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = insertelement <4 x i32> %92, i32 %95, i32 1
  %97 = bitcast i8* %76 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %98, i32 0
  %100 = getelementptr inbounds i8, i8* %76, i64 %12
  %101 = bitcast i8* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %102, i32 0
  %104 = shufflevector <4 x i32> %99, <4 x i32> %103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %105 = bitcast <4 x i32> %104 to <16 x i8>
  %106 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %105
  %107 = bitcast <4 x i32> %89 to <16 x i8>
  %108 = bitcast <4 x i32> %96 to <16 x i8>
  %109 = shufflevector <16 x i8> %107, <16 x i8> %108, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = shufflevector <16 x i8> %105, <16 x i8> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %109, <16 x i8> %110) #2
  %112 = lshr <8 x i16> %111, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %113 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %112, <8 x i16> zeroinitializer) #2
  %114 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = bitcast <4 x i32> %86 to <16 x i8>
  %116 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %114, <16 x i8> %115) #2
  %117 = bitcast <2 x i64> %116 to <4 x i32>
  %118 = add <4 x i32> %78, %117
  %119 = getelementptr inbounds i8, i8* %73, i64 %14
  %120 = getelementptr inbounds i8, i8* %74, i64 8
  %121 = getelementptr inbounds i8, i8* %75, i64 %16
  %122 = getelementptr inbounds i8, i8* %76, i64 %18
  %123 = add nuw nsw i32 %77, 2
  %124 = icmp ult i32 %123, 16
  br i1 %124, label %72, label %125

125:                                              ; preds = %72, %19
  %126 = phi <4 x i32> [ %65, %19 ], [ %118, %72 ]
  %127 = extractelement <4 x i32> %126, i32 0
  ret i32 %127
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x4_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = bitcast i8* %0 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  br i1 %9, label %107, label %15

15:                                               ; preds = %8
  %16 = bitcast i8* %4 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = bitcast i8* %2 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = bitcast i8* %5 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %21
  %23 = shufflevector <16 x i8> %17, <16 x i8> %19, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %21, <16 x i8> %22, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %23, <16 x i8> %24) #2
  %26 = lshr <8 x i16> %25, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %26, <8 x i16> zeroinitializer) #2
  %28 = shufflevector <16 x i8> %17, <16 x i8> %19, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = shufflevector <16 x i8> %21, <16 x i8> %22, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %28, <16 x i8> %29) #2
  %31 = lshr <8 x i16> %30, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %32 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %31, <8 x i16> zeroinitializer) #2
  %33 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %27, <8 x i16> %32) #2
  %34 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %33, <16 x i8> %14) #2
  %35 = bitcast <2 x i64> %34 to <4 x i32>
  %36 = getelementptr inbounds i8, i8* %0, i64 %10
  %37 = getelementptr inbounds i8, i8* %4, i64 16
  %38 = getelementptr inbounds i8, i8* %2, i64 %11
  %39 = getelementptr inbounds i8, i8* %5, i64 %12
  %40 = bitcast i8* %36 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = bitcast i8* %37 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1
  %44 = bitcast i8* %38 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = bitcast i8* %39 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %47
  %49 = shufflevector <16 x i8> %43, <16 x i8> %45, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %49, <16 x i8> %50) #2
  %52 = lshr <8 x i16> %51, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %53 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %52, <8 x i16> zeroinitializer) #2
  %54 = shufflevector <16 x i8> %43, <16 x i8> %45, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %56 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %54, <16 x i8> %55) #2
  %57 = lshr <8 x i16> %56, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #2
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %53, <8 x i16> %58) #2
  %60 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %59, <16 x i8> %41) #2
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = add <4 x i32> %35, %61
  %63 = getelementptr inbounds i8, i8* %36, i64 %10
  %64 = getelementptr inbounds i8, i8* %4, i64 32
  %65 = getelementptr inbounds i8, i8* %38, i64 %11
  %66 = getelementptr inbounds i8, i8* %39, i64 %12
  %67 = bitcast i8* %63 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = bitcast i8* %64 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = bitcast i8* %65 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = bitcast i8* %66 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %74
  %76 = shufflevector <16 x i8> %70, <16 x i8> %72, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %76, <16 x i8> %77) #2
  %79 = lshr <8 x i16> %78, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %80 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %79, <8 x i16> zeroinitializer) #2
  %81 = shufflevector <16 x i8> %70, <16 x i8> %72, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %82) #2
  %84 = lshr <8 x i16> %83, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %85 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %84, <8 x i16> zeroinitializer) #2
  %86 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %85) #2
  %87 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %86, <16 x i8> %68) #2
  %88 = bitcast <2 x i64> %87 to <4 x i32>
  %89 = add <4 x i32> %62, %88
  %90 = getelementptr inbounds i8, i8* %4, i64 48
  %91 = getelementptr inbounds i8, i8* %65, i64 %11
  %92 = getelementptr inbounds i8, i8* %66, i64 %12
  %93 = bitcast i8* %90 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = bitcast i8* %91 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1
  %97 = bitcast i8* %92 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %98
  %100 = shufflevector <16 x i8> %94, <16 x i8> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = shufflevector <16 x i8> %98, <16 x i8> %99, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %100, <16 x i8> %101) #2
  %103 = lshr <8 x i16> %102, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %104 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %103, <8 x i16> zeroinitializer) #2
  %105 = shufflevector <16 x i8> %94, <16 x i8> %96, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = shufflevector <16 x i8> %98, <16 x i8> %99, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %199

107:                                              ; preds = %8
  %108 = bitcast i8* %2 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1
  %110 = bitcast i8* %4 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = bitcast i8* %5 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %113
  %115 = shufflevector <16 x i8> %109, <16 x i8> %111, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %116 = shufflevector <16 x i8> %113, <16 x i8> %114, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = shufflevector <16 x i8> %109, <16 x i8> %111, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = shufflevector <16 x i8> %113, <16 x i8> %114, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %120, <16 x i8> %121) #2
  %123 = lshr <8 x i16> %122, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %124 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %123, <8 x i16> zeroinitializer) #2
  %125 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %119, <8 x i16> %124) #2
  %126 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %125, <16 x i8> %14) #2
  %127 = bitcast <2 x i64> %126 to <4 x i32>
  %128 = getelementptr inbounds i8, i8* %0, i64 %10
  %129 = getelementptr inbounds i8, i8* %2, i64 %11
  %130 = getelementptr inbounds i8, i8* %4, i64 16
  %131 = getelementptr inbounds i8, i8* %5, i64 %12
  %132 = bitcast i8* %128 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1
  %134 = bitcast i8* %129 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = bitcast i8* %130 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = bitcast i8* %131 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1
  %140 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %139
  %141 = shufflevector <16 x i8> %135, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %139, <16 x i8> %140, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %141, <16 x i8> %142) #2
  %144 = lshr <8 x i16> %143, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %145 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %144, <8 x i16> zeroinitializer) #2
  %146 = shufflevector <16 x i8> %135, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = shufflevector <16 x i8> %139, <16 x i8> %140, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %147) #2
  %149 = lshr <8 x i16> %148, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %150 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %149, <8 x i16> zeroinitializer) #2
  %151 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %145, <8 x i16> %150) #2
  %152 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %151, <16 x i8> %133) #2
  %153 = bitcast <2 x i64> %152 to <4 x i32>
  %154 = add <4 x i32> %127, %153
  %155 = getelementptr inbounds i8, i8* %128, i64 %10
  %156 = getelementptr inbounds i8, i8* %129, i64 %11
  %157 = getelementptr inbounds i8, i8* %4, i64 32
  %158 = getelementptr inbounds i8, i8* %131, i64 %12
  %159 = bitcast i8* %155 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1
  %161 = bitcast i8* %156 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = bitcast i8* %157 to <16 x i8>*
  %164 = load <16 x i8>, <16 x i8>* %163, align 1
  %165 = bitcast i8* %158 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1
  %167 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %166
  %168 = shufflevector <16 x i8> %162, <16 x i8> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %169 = shufflevector <16 x i8> %166, <16 x i8> %167, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %168, <16 x i8> %169) #2
  %171 = lshr <8 x i16> %170, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %172 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %171, <8 x i16> zeroinitializer) #2
  %173 = shufflevector <16 x i8> %162, <16 x i8> %164, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %174 = shufflevector <16 x i8> %166, <16 x i8> %167, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %175 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %174) #2
  %176 = lshr <8 x i16> %175, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %177 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %176, <8 x i16> zeroinitializer) #2
  %178 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %172, <8 x i16> %177) #2
  %179 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %178, <16 x i8> %160) #2
  %180 = bitcast <2 x i64> %179 to <4 x i32>
  %181 = add <4 x i32> %154, %180
  %182 = getelementptr inbounds i8, i8* %156, i64 %11
  %183 = getelementptr inbounds i8, i8* %4, i64 48
  %184 = getelementptr inbounds i8, i8* %158, i64 %12
  %185 = bitcast i8* %182 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = bitcast i8* %183 to <16 x i8>*
  %188 = load <16 x i8>, <16 x i8>* %187, align 1
  %189 = bitcast i8* %184 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1
  %191 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %190
  %192 = shufflevector <16 x i8> %186, <16 x i8> %188, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = shufflevector <16 x i8> %190, <16 x i8> %191, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %192, <16 x i8> %193) #2
  %195 = lshr <8 x i16> %194, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %196 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %195, <8 x i16> zeroinitializer) #2
  %197 = shufflevector <16 x i8> %186, <16 x i8> %188, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = shufflevector <16 x i8> %190, <16 x i8> %191, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %199

199:                                              ; preds = %15, %107
  %200 = phi <16 x i8> [ %106, %15 ], [ %198, %107 ]
  %201 = phi <16 x i8> [ %105, %15 ], [ %197, %107 ]
  %202 = phi <8 x i16> [ %104, %15 ], [ %196, %107 ]
  %203 = phi <4 x i32> [ %89, %15 ], [ %181, %107 ]
  %204 = getelementptr inbounds i8, i8* %0, i64 %10
  %205 = getelementptr inbounds i8, i8* %204, i64 %10
  %206 = getelementptr inbounds i8, i8* %205, i64 %10
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1
  %209 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %201, <16 x i8> %200) #2
  %210 = lshr <8 x i16> %209, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %211 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %210, <8 x i16> zeroinitializer) #2
  %212 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %202, <8 x i16> %211) #2
  %213 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %212, <16 x i8> %208) #2
  %214 = bitcast <2 x i64> %213 to <4 x i32>
  %215 = add <4 x i32> %203, %214
  %216 = extractelement <4 x i32> %215, i32 0
  %217 = bitcast <4 x i32> %215 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = bitcast <16 x i8> %218 to <4 x i32>
  %220 = extractelement <4 x i32> %219, i32 0
  %221 = add nsw i32 %220, %216
  ret i32 %221
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x32_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl nsw i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %81

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %75, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %76, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %77, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %78, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %79, %19 ], [ 0, %8 ]
  %25 = phi <4 x i32> [ %74, %19 ], [ zeroinitializer, %8 ]
  %26 = bitcast i8* %20 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i8, i8* %20, i64 %10
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> %28, i64 %31, i32 1
  %33 = bitcast i8* %21 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = getelementptr inbounds i8, i8* %21, i64 %11
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast i8* %22 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i8, i8* %22, i64 8
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = bitcast i8* %23 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = getelementptr inbounds i8, i8* %23, i64 %12
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> %49, i64 %52, i32 1
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = bitcast <2 x i64> %35 to <16 x i8>
  %57 = bitcast <2 x i64> %42 to <16 x i8>
  %58 = shufflevector <16 x i8> %56, <16 x i8> %57, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %58, <16 x i8> %59) #2
  %61 = lshr <8 x i16> %60, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %62 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %61, <8 x i16> zeroinitializer) #2
  %63 = bitcast <2 x i64> %39 to <16 x i8>
  %64 = bitcast <2 x i64> %46 to <16 x i8>
  %65 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %69) #2
  %71 = bitcast <2 x i64> %32 to <16 x i8>
  %72 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %70, <16 x i8> %71) #2
  %73 = bitcast <2 x i64> %72 to <4 x i32>
  %74 = add <4 x i32> %25, %73
  %75 = getelementptr inbounds i8, i8* %20, i64 %14
  %76 = getelementptr inbounds i8, i8* %21, i64 %16
  %77 = getelementptr inbounds i8, i8* %22, i64 16
  %78 = getelementptr inbounds i8, i8* %23, i64 %18
  %79 = add nuw nsw i32 %24, 2
  %80 = icmp ult i32 %79, 32
  br i1 %80, label %19, label %143

81:                                               ; preds = %8, %81
  %82 = phi i8* [ %137, %81 ], [ %0, %8 ]
  %83 = phi i8* [ %138, %81 ], [ %4, %8 ]
  %84 = phi i8* [ %139, %81 ], [ %2, %8 ]
  %85 = phi i8* [ %140, %81 ], [ %5, %8 ]
  %86 = phi i32 [ %141, %81 ], [ 0, %8 ]
  %87 = phi <4 x i32> [ %136, %81 ], [ zeroinitializer, %8 ]
  %88 = bitcast i8* %82 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = getelementptr inbounds i8, i8* %82, i64 %10
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> %90, i64 %93, i32 1
  %95 = bitcast i8* %83 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = getelementptr inbounds i8, i8* %83, i64 8
  %99 = bitcast i8* %98 to i64*
  %100 = load i64, i64* %99, align 1
  %101 = insertelement <2 x i64> undef, i64 %100, i32 0
  %102 = bitcast i8* %84 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i8, i8* %84, i64 %11
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = insertelement <2 x i64> undef, i64 %107, i32 0
  %109 = bitcast i8* %85 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = insertelement <2 x i64> undef, i64 %110, i32 0
  %112 = getelementptr inbounds i8, i8* %85, i64 %12
  %113 = bitcast i8* %112 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = insertelement <2 x i64> %111, i64 %114, i32 1
  %116 = bitcast <2 x i64> %115 to <16 x i8>
  %117 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %116
  %118 = bitcast <2 x i64> %97 to <16 x i8>
  %119 = bitcast <2 x i64> %104 to <16 x i8>
  %120 = shufflevector <16 x i8> %118, <16 x i8> %119, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = shufflevector <16 x i8> %116, <16 x i8> %117, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %120, <16 x i8> %121) #2
  %123 = lshr <8 x i16> %122, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %124 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %123, <8 x i16> zeroinitializer) #2
  %125 = bitcast <2 x i64> %101 to <16 x i8>
  %126 = bitcast <2 x i64> %108 to <16 x i8>
  %127 = shufflevector <16 x i8> %125, <16 x i8> %126, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = shufflevector <16 x i8> %116, <16 x i8> %117, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %127, <16 x i8> %128) #2
  %130 = lshr <8 x i16> %129, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %131 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %130, <8 x i16> zeroinitializer) #2
  %132 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %124, <8 x i16> %131) #2
  %133 = bitcast <2 x i64> %94 to <16 x i8>
  %134 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %132, <16 x i8> %133) #2
  %135 = bitcast <2 x i64> %134 to <4 x i32>
  %136 = add <4 x i32> %87, %135
  %137 = getelementptr inbounds i8, i8* %82, i64 %14
  %138 = getelementptr inbounds i8, i8* %83, i64 16
  %139 = getelementptr inbounds i8, i8* %84, i64 %16
  %140 = getelementptr inbounds i8, i8* %85, i64 %18
  %141 = add nuw nsw i32 %86, 2
  %142 = icmp ult i32 %141, 32
  br i1 %142, label %81, label %143

143:                                              ; preds = %81, %19
  %144 = phi <4 x i32> [ %74, %19 ], [ %136, %81 ]
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = extractelement <4 x i32> %144, i32 0
  %147 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = extractelement <4 x i32> %148, i32 0
  %150 = add nsw i32 %149, %146
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x8_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %76

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %70, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %71, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %72, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %73, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %74, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %69, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 %10
  %71 = getelementptr inbounds i8, i8* %15, i64 %11
  %72 = getelementptr inbounds i8, i8* %16, i64 32
  %73 = getelementptr inbounds i8, i8* %17, i64 %12
  %74 = add nuw nsw i32 %18, 1
  %75 = icmp eq i32 %74, 8
  br i1 %75, label %139, label %13

76:                                               ; preds = %8, %76
  %77 = phi i8* [ %133, %76 ], [ %0, %8 ]
  %78 = phi i8* [ %134, %76 ], [ %4, %8 ]
  %79 = phi i8* [ %135, %76 ], [ %2, %8 ]
  %80 = phi i8* [ %136, %76 ], [ %5, %8 ]
  %81 = phi i32 [ %137, %76 ], [ 0, %8 ]
  %82 = phi <4 x i32> [ %132, %76 ], [ zeroinitializer, %8 ]
  %83 = bitcast i8* %77 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1
  %85 = bitcast i8* %78 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %79 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast i8* %80 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %90
  %92 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %92, <16 x i8> %93) #2
  %95 = lshr <8 x i16> %94, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %96 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %95, <8 x i16> zeroinitializer) #2
  %97 = shufflevector <16 x i8> %86, <16 x i8> %88, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %98) #2
  %100 = lshr <8 x i16> %99, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %100, <8 x i16> zeroinitializer) #2
  %102 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %96, <8 x i16> %101) #2
  %103 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %102, <16 x i8> %84) #2
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = add <4 x i32> %82, %104
  %106 = getelementptr inbounds i8, i8* %77, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %78, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = getelementptr inbounds i8, i8* %79, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1
  %115 = getelementptr inbounds i8, i8* %80, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #2
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #2
  %124 = shufflevector <16 x i8> %111, <16 x i8> %114, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #2
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #2
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %128) #2
  %130 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %129, <16 x i8> %108) #2
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = add <4 x i32> %105, %131
  %133 = getelementptr inbounds i8, i8* %77, i64 %10
  %134 = getelementptr inbounds i8, i8* %78, i64 32
  %135 = getelementptr inbounds i8, i8* %79, i64 %11
  %136 = getelementptr inbounds i8, i8* %80, i64 %12
  %137 = add nuw nsw i32 %81, 1
  %138 = icmp eq i32 %137, 8
  br i1 %138, label %139, label %76

139:                                              ; preds = %76, %13
  %140 = phi <4 x i32> [ %69, %13 ], [ %132, %76 ]
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = bitcast <4 x i32> %140 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = add nsw i32 %145, %141
  ret i32 %146
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x64_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %49

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %43, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %44, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %45, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %46, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %47, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %42, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 %10
  %44 = getelementptr inbounds i8, i8* %15, i64 %11
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = getelementptr inbounds i8, i8* %17, i64 %12
  %47 = add nuw nsw i32 %18, 1
  %48 = icmp eq i32 %47, 64
  br i1 %48, label %85, label %13

49:                                               ; preds = %8, %49
  %50 = phi i8* [ %79, %49 ], [ %0, %8 ]
  %51 = phi i8* [ %80, %49 ], [ %4, %8 ]
  %52 = phi i8* [ %81, %49 ], [ %2, %8 ]
  %53 = phi i8* [ %82, %49 ], [ %5, %8 ]
  %54 = phi i32 [ %83, %49 ], [ 0, %8 ]
  %55 = phi <4 x i32> [ %78, %49 ], [ zeroinitializer, %8 ]
  %56 = bitcast i8* %50 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = bitcast i8* %51 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = bitcast i8* %52 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = bitcast i8* %53 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1
  %64 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %63
  %65 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %66) #2
  %68 = lshr <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %68, <8 x i16> zeroinitializer) #2
  %70 = shufflevector <16 x i8> %59, <16 x i8> %61, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #2
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #2
  %75 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %74) #2
  %76 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %75, <16 x i8> %57) #2
  %77 = bitcast <2 x i64> %76 to <4 x i32>
  %78 = add <4 x i32> %55, %77
  %79 = getelementptr inbounds i8, i8* %50, i64 %10
  %80 = getelementptr inbounds i8, i8* %51, i64 16
  %81 = getelementptr inbounds i8, i8* %52, i64 %11
  %82 = getelementptr inbounds i8, i8* %53, i64 %12
  %83 = add nuw nsw i32 %54, 1
  %84 = icmp eq i32 %83, 64
  br i1 %84, label %85, label %49

85:                                               ; preds = %49, %13
  %86 = phi <4 x i32> [ %42, %13 ], [ %78, %49 ]
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = bitcast <4 x i32> %86 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = add nsw i32 %91, %87
  ret i32 %92
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x16_ssse3(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %130

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %124, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %125, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %126, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %127, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %128, %13 ], [ 0, %8 ]
  %19 = phi <4 x i32> [ %123, %13 ], [ zeroinitializer, %8 ]
  %20 = bitcast i8* %14 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast i8* %15 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast i8* %16 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast i8* %17 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %29, <16 x i8> %30) #2
  %32 = lshr <8 x i16> %31, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #2
  %34 = shufflevector <16 x i8> %23, <16 x i8> %25, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #2
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #2
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %38) #2
  %40 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %39, <16 x i8> %21) #2
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = add <4 x i32> %19, %41
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %16, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %17, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %54
  %56 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %57) #2
  %59 = lshr <8 x i16> %58, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %60 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %59, <8 x i16> zeroinitializer) #2
  %61 = shufflevector <16 x i8> %48, <16 x i8> %51, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = shufflevector <16 x i8> %54, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #2
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #2
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %65) #2
  %67 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %66, <16 x i8> %45) #2
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = add <4 x i32> %42, %68
  %70 = getelementptr inbounds i8, i8* %14, i64 32
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %15, i64 32
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 32
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %17, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #2
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #2
  %88 = shufflevector <16 x i8> %75, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #2
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #2
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %92) #2
  %94 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %93, <16 x i8> %72) #2
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = add <4 x i32> %69, %95
  %97 = getelementptr inbounds i8, i8* %14, i64 48
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %15, i64 48
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 48
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %17, i64 48
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #2
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #2
  %115 = shufflevector <16 x i8> %102, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #2
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #2
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %119) #2
  %121 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %120, <16 x i8> %99) #2
  %122 = bitcast <2 x i64> %121 to <4 x i32>
  %123 = add <4 x i32> %96, %122
  %124 = getelementptr inbounds i8, i8* %14, i64 %10
  %125 = getelementptr inbounds i8, i8* %15, i64 %11
  %126 = getelementptr inbounds i8, i8* %16, i64 64
  %127 = getelementptr inbounds i8, i8* %17, i64 %12
  %128 = add nuw nsw i32 %18, 1
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %247, label %13

130:                                              ; preds = %8, %130
  %131 = phi i8* [ %241, %130 ], [ %0, %8 ]
  %132 = phi i8* [ %242, %130 ], [ %4, %8 ]
  %133 = phi i8* [ %243, %130 ], [ %2, %8 ]
  %134 = phi i8* [ %244, %130 ], [ %5, %8 ]
  %135 = phi i32 [ %245, %130 ], [ 0, %8 ]
  %136 = phi <4 x i32> [ %240, %130 ], [ zeroinitializer, %8 ]
  %137 = bitcast i8* %131 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %132 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = bitcast i8* %133 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1
  %143 = bitcast i8* %134 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %147) #2
  %149 = lshr <8 x i16> %148, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %150 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %149, <8 x i16> zeroinitializer) #2
  %151 = shufflevector <16 x i8> %140, <16 x i8> %142, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = shufflevector <16 x i8> %144, <16 x i8> %145, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %151, <16 x i8> %152) #2
  %154 = lshr <8 x i16> %153, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %155 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %154, <8 x i16> zeroinitializer) #2
  %156 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> %155) #2
  %157 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %156, <16 x i8> %138) #2
  %158 = bitcast <2 x i64> %157 to <4 x i32>
  %159 = add <4 x i32> %136, %158
  %160 = getelementptr inbounds i8, i8* %131, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %132, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = getelementptr inbounds i8, i8* %133, i64 16
  %167 = bitcast i8* %166 to <16 x i8>*
  %168 = load <16 x i8>, <16 x i8>* %167, align 1
  %169 = getelementptr inbounds i8, i8* %134, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %171
  %173 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %174) #2
  %176 = lshr <8 x i16> %175, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %177 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %176, <8 x i16> zeroinitializer) #2
  %178 = shufflevector <16 x i8> %165, <16 x i8> %168, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = shufflevector <16 x i8> %171, <16 x i8> %172, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %179) #2
  %181 = lshr <8 x i16> %180, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #2
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %177, <8 x i16> %182) #2
  %184 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %183, <16 x i8> %162) #2
  %185 = bitcast <2 x i64> %184 to <4 x i32>
  %186 = add <4 x i32> %159, %185
  %187 = getelementptr inbounds i8, i8* %131, i64 32
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = getelementptr inbounds i8, i8* %132, i64 32
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %133, i64 32
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %134, i64 32
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %198
  %200 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #2
  %203 = lshr <8 x i16> %202, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %203, <8 x i16> zeroinitializer) #2
  %205 = shufflevector <16 x i8> %192, <16 x i8> %195, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %206 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %207 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %205, <16 x i8> %206) #2
  %208 = lshr <8 x i16> %207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %209 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %208, <8 x i16> zeroinitializer) #2
  %210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %204, <8 x i16> %209) #2
  %211 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %210, <16 x i8> %189) #2
  %212 = bitcast <2 x i64> %211 to <4 x i32>
  %213 = add <4 x i32> %186, %212
  %214 = getelementptr inbounds i8, i8* %131, i64 48
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %132, i64 48
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %133, i64 48
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %134, i64 48
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #2
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #2
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #2
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #2
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> %236) #2
  %238 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %237, <16 x i8> %216) #2
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = add <4 x i32> %213, %239
  %241 = getelementptr inbounds i8, i8* %131, i64 %10
  %242 = getelementptr inbounds i8, i8* %132, i64 64
  %243 = getelementptr inbounds i8, i8* %133, i64 %11
  %244 = getelementptr inbounds i8, i8* %134, i64 %12
  %245 = add nuw nsw i32 %135, 1
  %246 = icmp eq i32 %245, 16
  br i1 %246, label %247, label %130

247:                                              ; preds = %130, %13
  %248 = phi <4 x i32> [ %123, %13 ], [ %240, %130 ]
  %249 = extractelement <4 x i32> %248, i32 0
  %250 = bitcast <4 x i32> %248 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  %254 = add nsw i32 %253, %249
  ret i32 %254
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad128x128_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 128
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 128
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 128
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 128
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 128
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 128
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad128x64_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 128
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 128
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 128
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 128
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x128_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 64
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 64
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 128
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 64
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 64
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 128
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x64_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 64
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 64
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 64
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 64
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x32_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 64
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 64
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 64
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 64
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x64_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %171

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %165, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %162, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %163, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %164, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %166, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %161, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 16
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %26, i64 16
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %27, i64 16
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %24, i64 16
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %112) #2
  %114 = add <4 x i32> %113, <i32 32, i32 32, i32 32, i32 32>
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %117) #2
  %119 = add <4 x i32> %118, <i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <4 x i32> %119, <i32 6, i32 6, i32 6, i32 6>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %115, <4 x i32> %120) #2
  %122 = sub <8 x i16> %121, %96
  %123 = sub <8 x i16> zeroinitializer, %122
  %124 = icmp slt <8 x i16> %122, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> %122
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %127 = add <4 x i32> %126, %93
  %128 = getelementptr inbounds i16, i16* %25, i64 24
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %26, i64 24
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %27, i64 24
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i8, i8* %24, i64 24
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %142 to <8 x i16>
  %144 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %143
  %145 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %146) #2
  %148 = add <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %151) #2
  %153 = add <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %154) #2
  %156 = sub <8 x i16> %155, %130
  %157 = sub <8 x i16> zeroinitializer, %156
  %158 = icmp slt <8 x i16> %156, zeroinitializer
  %159 = select <8 x i1> %158, <8 x i16> %157, <8 x i16> %156
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %161 = add <4 x i32> %160, %127
  %162 = getelementptr inbounds i16, i16* %25, i64 %20
  %163 = getelementptr inbounds i16, i16* %26, i64 %21
  %164 = getelementptr inbounds i16, i16* %27, i64 32
  %165 = getelementptr inbounds i8, i8* %24, i64 %22
  %166 = add nuw nsw i32 %28, 1
  %167 = icmp eq i32 %166, 64
  br i1 %167, label %168, label %23

168:                                              ; preds = %23
  %169 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %161, <4 x i32> %161) #2
  %170 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %169, <4 x i32> %169) #2
  br label %332

171:                                              ; preds = %8
  %172 = ptrtoint i8* %2 to i64
  %173 = shl i64 %172, 1
  %174 = inttoptr i64 %173 to i16*
  %175 = ptrtoint i8* %4 to i64
  %176 = shl i64 %175, 1
  %177 = inttoptr i64 %176 to i16*
  %178 = ptrtoint i8* %0 to i64
  %179 = shl i64 %178, 1
  %180 = inttoptr i64 %179 to i16*
  %181 = sext i32 %1 to i64
  %182 = sext i32 %3 to i64
  %183 = sext i32 %6 to i64
  br label %184

184:                                              ; preds = %184, %171
  %185 = phi i8* [ %5, %171 ], [ %326, %184 ]
  %186 = phi i16* [ %180, %171 ], [ %323, %184 ]
  %187 = phi i16* [ %177, %171 ], [ %324, %184 ]
  %188 = phi i16* [ %174, %171 ], [ %325, %184 ]
  %189 = phi i32 [ 0, %171 ], [ %327, %184 ]
  %190 = phi <4 x i32> [ zeroinitializer, %171 ], [ %322, %184 ]
  %191 = bitcast i16* %186 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = bitcast i16* %187 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = bitcast i16* %188 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = bitcast i8* %185 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = bitcast <16 x i8> %201 to <8 x i16>
  %203 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %202
  %204 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %205) #2
  %207 = add <4 x i32> %206, <i32 32, i32 32, i32 32, i32 32>
  %208 = ashr <4 x i32> %207, <i32 6, i32 6, i32 6, i32 6>
  %209 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %210) #2
  %212 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %213 = ashr <4 x i32> %212, <i32 6, i32 6, i32 6, i32 6>
  %214 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %208, <4 x i32> %213) #2
  %215 = sub <8 x i16> %214, %192
  %216 = sub <8 x i16> zeroinitializer, %215
  %217 = icmp slt <8 x i16> %215, zeroinitializer
  %218 = select <8 x i1> %217, <8 x i16> %216, <8 x i16> %215
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %218, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %220 = add <4 x i32> %219, %190
  %221 = getelementptr inbounds i16, i16* %186, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = getelementptr inbounds i16, i16* %187, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = getelementptr inbounds i16, i16* %188, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = getelementptr inbounds i8, i8* %185, i64 8
  %231 = bitcast i8* %230 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %236 = bitcast <16 x i8> %235 to <8 x i16>
  %237 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %236
  %238 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> %239) #2
  %241 = add <4 x i32> %240, <i32 32, i32 32, i32 32, i32 32>
  %242 = ashr <4 x i32> %241, <i32 6, i32 6, i32 6, i32 6>
  %243 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %244 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> %244) #2
  %246 = add <4 x i32> %245, <i32 32, i32 32, i32 32, i32 32>
  %247 = ashr <4 x i32> %246, <i32 6, i32 6, i32 6, i32 6>
  %248 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %242, <4 x i32> %247) #2
  %249 = sub <8 x i16> %248, %223
  %250 = sub <8 x i16> zeroinitializer, %249
  %251 = icmp slt <8 x i16> %249, zeroinitializer
  %252 = select <8 x i1> %251, <8 x i16> %250, <8 x i16> %249
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %254 = add <4 x i32> %253, %220
  %255 = getelementptr inbounds i16, i16* %186, i64 16
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = getelementptr inbounds i16, i16* %187, i64 16
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = getelementptr inbounds i16, i16* %188, i64 16
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = getelementptr inbounds i8, i8* %185, i64 16
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %272, <8 x i16> %273) #2
  %275 = add <4 x i32> %274, <i32 32, i32 32, i32 32, i32 32>
  %276 = ashr <4 x i32> %275, <i32 6, i32 6, i32 6, i32 6>
  %277 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %278 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %277, <8 x i16> %278) #2
  %280 = add <4 x i32> %279, <i32 32, i32 32, i32 32, i32 32>
  %281 = ashr <4 x i32> %280, <i32 6, i32 6, i32 6, i32 6>
  %282 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %276, <4 x i32> %281) #2
  %283 = sub <8 x i16> %282, %257
  %284 = sub <8 x i16> zeroinitializer, %283
  %285 = icmp slt <8 x i16> %283, zeroinitializer
  %286 = select <8 x i1> %285, <8 x i16> %284, <8 x i16> %283
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %288 = add <4 x i32> %287, %254
  %289 = getelementptr inbounds i16, i16* %186, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = getelementptr inbounds i16, i16* %187, i64 24
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 1
  %295 = getelementptr inbounds i16, i16* %188, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %185, i64 24
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 1
  %301 = insertelement <2 x i64> undef, i64 %300, i32 0
  %302 = bitcast <2 x i64> %301 to <16 x i8>
  %303 = shufflevector <16 x i8> %302, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %304 = bitcast <16 x i8> %303 to <8 x i16>
  %305 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %304
  %306 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %307 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> %307) #2
  %309 = add <4 x i32> %308, <i32 32, i32 32, i32 32, i32 32>
  %310 = ashr <4 x i32> %309, <i32 6, i32 6, i32 6, i32 6>
  %311 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %311, <8 x i16> %312) #2
  %314 = add <4 x i32> %313, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %310, <4 x i32> %315) #2
  %317 = sub <8 x i16> %316, %291
  %318 = sub <8 x i16> zeroinitializer, %317
  %319 = icmp slt <8 x i16> %317, zeroinitializer
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> %317
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %322 = add <4 x i32> %321, %288
  %323 = getelementptr inbounds i16, i16* %186, i64 %181
  %324 = getelementptr inbounds i16, i16* %187, i64 32
  %325 = getelementptr inbounds i16, i16* %188, i64 %182
  %326 = getelementptr inbounds i8, i8* %185, i64 %183
  %327 = add nuw nsw i32 %189, 1
  %328 = icmp eq i32 %327, 64
  br i1 %328, label %329, label %184

329:                                              ; preds = %184
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %322, <4 x i32> %322) #2
  %331 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %330, <4 x i32> %330) #2
  br label %332

332:                                              ; preds = %329, %168
  %333 = phi <4 x i32> [ %331, %329 ], [ %170, %168 ]
  %334 = extractelement <4 x i32> %333, i32 0
  ret i32 %334
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x32_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %171

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %165, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %162, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %163, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %164, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %166, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %161, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 16
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %26, i64 16
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %27, i64 16
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %24, i64 16
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %112) #2
  %114 = add <4 x i32> %113, <i32 32, i32 32, i32 32, i32 32>
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %117) #2
  %119 = add <4 x i32> %118, <i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <4 x i32> %119, <i32 6, i32 6, i32 6, i32 6>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %115, <4 x i32> %120) #2
  %122 = sub <8 x i16> %121, %96
  %123 = sub <8 x i16> zeroinitializer, %122
  %124 = icmp slt <8 x i16> %122, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> %122
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %127 = add <4 x i32> %126, %93
  %128 = getelementptr inbounds i16, i16* %25, i64 24
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %26, i64 24
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %27, i64 24
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i8, i8* %24, i64 24
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %142 to <8 x i16>
  %144 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %143
  %145 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %146) #2
  %148 = add <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %151) #2
  %153 = add <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %154) #2
  %156 = sub <8 x i16> %155, %130
  %157 = sub <8 x i16> zeroinitializer, %156
  %158 = icmp slt <8 x i16> %156, zeroinitializer
  %159 = select <8 x i1> %158, <8 x i16> %157, <8 x i16> %156
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %161 = add <4 x i32> %160, %127
  %162 = getelementptr inbounds i16, i16* %25, i64 %20
  %163 = getelementptr inbounds i16, i16* %26, i64 %21
  %164 = getelementptr inbounds i16, i16* %27, i64 32
  %165 = getelementptr inbounds i8, i8* %24, i64 %22
  %166 = add nuw nsw i32 %28, 1
  %167 = icmp eq i32 %166, 32
  br i1 %167, label %168, label %23

168:                                              ; preds = %23
  %169 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %161, <4 x i32> %161) #2
  %170 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %169, <4 x i32> %169) #2
  br label %332

171:                                              ; preds = %8
  %172 = ptrtoint i8* %2 to i64
  %173 = shl i64 %172, 1
  %174 = inttoptr i64 %173 to i16*
  %175 = ptrtoint i8* %4 to i64
  %176 = shl i64 %175, 1
  %177 = inttoptr i64 %176 to i16*
  %178 = ptrtoint i8* %0 to i64
  %179 = shl i64 %178, 1
  %180 = inttoptr i64 %179 to i16*
  %181 = sext i32 %1 to i64
  %182 = sext i32 %3 to i64
  %183 = sext i32 %6 to i64
  br label %184

184:                                              ; preds = %184, %171
  %185 = phi i8* [ %5, %171 ], [ %326, %184 ]
  %186 = phi i16* [ %180, %171 ], [ %323, %184 ]
  %187 = phi i16* [ %177, %171 ], [ %324, %184 ]
  %188 = phi i16* [ %174, %171 ], [ %325, %184 ]
  %189 = phi i32 [ 0, %171 ], [ %327, %184 ]
  %190 = phi <4 x i32> [ zeroinitializer, %171 ], [ %322, %184 ]
  %191 = bitcast i16* %186 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = bitcast i16* %187 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = bitcast i16* %188 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = bitcast i8* %185 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = bitcast <16 x i8> %201 to <8 x i16>
  %203 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %202
  %204 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %205) #2
  %207 = add <4 x i32> %206, <i32 32, i32 32, i32 32, i32 32>
  %208 = ashr <4 x i32> %207, <i32 6, i32 6, i32 6, i32 6>
  %209 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %210) #2
  %212 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %213 = ashr <4 x i32> %212, <i32 6, i32 6, i32 6, i32 6>
  %214 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %208, <4 x i32> %213) #2
  %215 = sub <8 x i16> %214, %192
  %216 = sub <8 x i16> zeroinitializer, %215
  %217 = icmp slt <8 x i16> %215, zeroinitializer
  %218 = select <8 x i1> %217, <8 x i16> %216, <8 x i16> %215
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %218, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %220 = add <4 x i32> %219, %190
  %221 = getelementptr inbounds i16, i16* %186, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = getelementptr inbounds i16, i16* %187, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = getelementptr inbounds i16, i16* %188, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = getelementptr inbounds i8, i8* %185, i64 8
  %231 = bitcast i8* %230 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %236 = bitcast <16 x i8> %235 to <8 x i16>
  %237 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %236
  %238 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> %239) #2
  %241 = add <4 x i32> %240, <i32 32, i32 32, i32 32, i32 32>
  %242 = ashr <4 x i32> %241, <i32 6, i32 6, i32 6, i32 6>
  %243 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %244 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> %244) #2
  %246 = add <4 x i32> %245, <i32 32, i32 32, i32 32, i32 32>
  %247 = ashr <4 x i32> %246, <i32 6, i32 6, i32 6, i32 6>
  %248 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %242, <4 x i32> %247) #2
  %249 = sub <8 x i16> %248, %223
  %250 = sub <8 x i16> zeroinitializer, %249
  %251 = icmp slt <8 x i16> %249, zeroinitializer
  %252 = select <8 x i1> %251, <8 x i16> %250, <8 x i16> %249
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %254 = add <4 x i32> %253, %220
  %255 = getelementptr inbounds i16, i16* %186, i64 16
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = getelementptr inbounds i16, i16* %187, i64 16
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = getelementptr inbounds i16, i16* %188, i64 16
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = getelementptr inbounds i8, i8* %185, i64 16
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %272, <8 x i16> %273) #2
  %275 = add <4 x i32> %274, <i32 32, i32 32, i32 32, i32 32>
  %276 = ashr <4 x i32> %275, <i32 6, i32 6, i32 6, i32 6>
  %277 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %278 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %277, <8 x i16> %278) #2
  %280 = add <4 x i32> %279, <i32 32, i32 32, i32 32, i32 32>
  %281 = ashr <4 x i32> %280, <i32 6, i32 6, i32 6, i32 6>
  %282 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %276, <4 x i32> %281) #2
  %283 = sub <8 x i16> %282, %257
  %284 = sub <8 x i16> zeroinitializer, %283
  %285 = icmp slt <8 x i16> %283, zeroinitializer
  %286 = select <8 x i1> %285, <8 x i16> %284, <8 x i16> %283
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %288 = add <4 x i32> %287, %254
  %289 = getelementptr inbounds i16, i16* %186, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = getelementptr inbounds i16, i16* %187, i64 24
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 1
  %295 = getelementptr inbounds i16, i16* %188, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %185, i64 24
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 1
  %301 = insertelement <2 x i64> undef, i64 %300, i32 0
  %302 = bitcast <2 x i64> %301 to <16 x i8>
  %303 = shufflevector <16 x i8> %302, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %304 = bitcast <16 x i8> %303 to <8 x i16>
  %305 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %304
  %306 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %307 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> %307) #2
  %309 = add <4 x i32> %308, <i32 32, i32 32, i32 32, i32 32>
  %310 = ashr <4 x i32> %309, <i32 6, i32 6, i32 6, i32 6>
  %311 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %311, <8 x i16> %312) #2
  %314 = add <4 x i32> %313, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %310, <4 x i32> %315) #2
  %317 = sub <8 x i16> %316, %291
  %318 = sub <8 x i16> zeroinitializer, %317
  %319 = icmp slt <8 x i16> %317, zeroinitializer
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> %317
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %322 = add <4 x i32> %321, %288
  %323 = getelementptr inbounds i16, i16* %186, i64 %181
  %324 = getelementptr inbounds i16, i16* %187, i64 32
  %325 = getelementptr inbounds i16, i16* %188, i64 %182
  %326 = getelementptr inbounds i8, i8* %185, i64 %183
  %327 = add nuw nsw i32 %189, 1
  %328 = icmp eq i32 %327, 32
  br i1 %328, label %329, label %184

329:                                              ; preds = %184
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %322, <4 x i32> %322) #2
  %331 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %330, <4 x i32> %330) #2
  br label %332

332:                                              ; preds = %329, %168
  %333 = phi <4 x i32> [ %331, %329 ], [ %170, %168 ]
  %334 = extractelement <4 x i32> %333, i32 0
  ret i32 %334
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x16_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %171

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %165, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %162, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %163, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %164, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %166, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %161, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 16
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %26, i64 16
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %27, i64 16
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %24, i64 16
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %112) #2
  %114 = add <4 x i32> %113, <i32 32, i32 32, i32 32, i32 32>
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %117) #2
  %119 = add <4 x i32> %118, <i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <4 x i32> %119, <i32 6, i32 6, i32 6, i32 6>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %115, <4 x i32> %120) #2
  %122 = sub <8 x i16> %121, %96
  %123 = sub <8 x i16> zeroinitializer, %122
  %124 = icmp slt <8 x i16> %122, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> %122
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %127 = add <4 x i32> %126, %93
  %128 = getelementptr inbounds i16, i16* %25, i64 24
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %26, i64 24
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %27, i64 24
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i8, i8* %24, i64 24
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %142 to <8 x i16>
  %144 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %143
  %145 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %146) #2
  %148 = add <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %151) #2
  %153 = add <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %154) #2
  %156 = sub <8 x i16> %155, %130
  %157 = sub <8 x i16> zeroinitializer, %156
  %158 = icmp slt <8 x i16> %156, zeroinitializer
  %159 = select <8 x i1> %158, <8 x i16> %157, <8 x i16> %156
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %161 = add <4 x i32> %160, %127
  %162 = getelementptr inbounds i16, i16* %25, i64 %20
  %163 = getelementptr inbounds i16, i16* %26, i64 %21
  %164 = getelementptr inbounds i16, i16* %27, i64 32
  %165 = getelementptr inbounds i8, i8* %24, i64 %22
  %166 = add nuw nsw i32 %28, 1
  %167 = icmp eq i32 %166, 16
  br i1 %167, label %168, label %23

168:                                              ; preds = %23
  %169 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %161, <4 x i32> %161) #2
  %170 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %169, <4 x i32> %169) #2
  br label %332

171:                                              ; preds = %8
  %172 = ptrtoint i8* %2 to i64
  %173 = shl i64 %172, 1
  %174 = inttoptr i64 %173 to i16*
  %175 = ptrtoint i8* %4 to i64
  %176 = shl i64 %175, 1
  %177 = inttoptr i64 %176 to i16*
  %178 = ptrtoint i8* %0 to i64
  %179 = shl i64 %178, 1
  %180 = inttoptr i64 %179 to i16*
  %181 = sext i32 %1 to i64
  %182 = sext i32 %3 to i64
  %183 = sext i32 %6 to i64
  br label %184

184:                                              ; preds = %184, %171
  %185 = phi i8* [ %5, %171 ], [ %326, %184 ]
  %186 = phi i16* [ %180, %171 ], [ %323, %184 ]
  %187 = phi i16* [ %177, %171 ], [ %324, %184 ]
  %188 = phi i16* [ %174, %171 ], [ %325, %184 ]
  %189 = phi i32 [ 0, %171 ], [ %327, %184 ]
  %190 = phi <4 x i32> [ zeroinitializer, %171 ], [ %322, %184 ]
  %191 = bitcast i16* %186 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = bitcast i16* %187 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = bitcast i16* %188 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = bitcast i8* %185 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = bitcast <16 x i8> %201 to <8 x i16>
  %203 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %202
  %204 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %205) #2
  %207 = add <4 x i32> %206, <i32 32, i32 32, i32 32, i32 32>
  %208 = ashr <4 x i32> %207, <i32 6, i32 6, i32 6, i32 6>
  %209 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %210) #2
  %212 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %213 = ashr <4 x i32> %212, <i32 6, i32 6, i32 6, i32 6>
  %214 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %208, <4 x i32> %213) #2
  %215 = sub <8 x i16> %214, %192
  %216 = sub <8 x i16> zeroinitializer, %215
  %217 = icmp slt <8 x i16> %215, zeroinitializer
  %218 = select <8 x i1> %217, <8 x i16> %216, <8 x i16> %215
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %218, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %220 = add <4 x i32> %219, %190
  %221 = getelementptr inbounds i16, i16* %186, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = getelementptr inbounds i16, i16* %187, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = getelementptr inbounds i16, i16* %188, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = getelementptr inbounds i8, i8* %185, i64 8
  %231 = bitcast i8* %230 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %236 = bitcast <16 x i8> %235 to <8 x i16>
  %237 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %236
  %238 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> %239) #2
  %241 = add <4 x i32> %240, <i32 32, i32 32, i32 32, i32 32>
  %242 = ashr <4 x i32> %241, <i32 6, i32 6, i32 6, i32 6>
  %243 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %244 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> %244) #2
  %246 = add <4 x i32> %245, <i32 32, i32 32, i32 32, i32 32>
  %247 = ashr <4 x i32> %246, <i32 6, i32 6, i32 6, i32 6>
  %248 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %242, <4 x i32> %247) #2
  %249 = sub <8 x i16> %248, %223
  %250 = sub <8 x i16> zeroinitializer, %249
  %251 = icmp slt <8 x i16> %249, zeroinitializer
  %252 = select <8 x i1> %251, <8 x i16> %250, <8 x i16> %249
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %254 = add <4 x i32> %253, %220
  %255 = getelementptr inbounds i16, i16* %186, i64 16
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = getelementptr inbounds i16, i16* %187, i64 16
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = getelementptr inbounds i16, i16* %188, i64 16
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = getelementptr inbounds i8, i8* %185, i64 16
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %272, <8 x i16> %273) #2
  %275 = add <4 x i32> %274, <i32 32, i32 32, i32 32, i32 32>
  %276 = ashr <4 x i32> %275, <i32 6, i32 6, i32 6, i32 6>
  %277 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %278 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %277, <8 x i16> %278) #2
  %280 = add <4 x i32> %279, <i32 32, i32 32, i32 32, i32 32>
  %281 = ashr <4 x i32> %280, <i32 6, i32 6, i32 6, i32 6>
  %282 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %276, <4 x i32> %281) #2
  %283 = sub <8 x i16> %282, %257
  %284 = sub <8 x i16> zeroinitializer, %283
  %285 = icmp slt <8 x i16> %283, zeroinitializer
  %286 = select <8 x i1> %285, <8 x i16> %284, <8 x i16> %283
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %288 = add <4 x i32> %287, %254
  %289 = getelementptr inbounds i16, i16* %186, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = getelementptr inbounds i16, i16* %187, i64 24
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 1
  %295 = getelementptr inbounds i16, i16* %188, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %185, i64 24
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 1
  %301 = insertelement <2 x i64> undef, i64 %300, i32 0
  %302 = bitcast <2 x i64> %301 to <16 x i8>
  %303 = shufflevector <16 x i8> %302, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %304 = bitcast <16 x i8> %303 to <8 x i16>
  %305 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %304
  %306 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %307 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> %307) #2
  %309 = add <4 x i32> %308, <i32 32, i32 32, i32 32, i32 32>
  %310 = ashr <4 x i32> %309, <i32 6, i32 6, i32 6, i32 6>
  %311 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %311, <8 x i16> %312) #2
  %314 = add <4 x i32> %313, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %310, <4 x i32> %315) #2
  %317 = sub <8 x i16> %316, %291
  %318 = sub <8 x i16> zeroinitializer, %317
  %319 = icmp slt <8 x i16> %317, zeroinitializer
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> %317
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %322 = add <4 x i32> %321, %288
  %323 = getelementptr inbounds i16, i16* %186, i64 %181
  %324 = getelementptr inbounds i16, i16* %187, i64 32
  %325 = getelementptr inbounds i16, i16* %188, i64 %182
  %326 = getelementptr inbounds i8, i8* %185, i64 %183
  %327 = add nuw nsw i32 %189, 1
  %328 = icmp eq i32 %327, 16
  br i1 %328, label %329, label %184

329:                                              ; preds = %184
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %322, <4 x i32> %322) #2
  %331 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %330, <4 x i32> %330) #2
  br label %332

332:                                              ; preds = %329, %168
  %333 = phi <4 x i32> [ %331, %329 ], [ %170, %168 ]
  %334 = extractelement <4 x i32> %333, i32 0
  ret i32 %334
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x32_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %97, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %94, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %95, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %96, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %98, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %93, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 %20
  %95 = getelementptr inbounds i16, i16* %26, i64 %21
  %96 = getelementptr inbounds i16, i16* %27, i64 16
  %97 = getelementptr inbounds i8, i8* %24, i64 %22
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 32
  br i1 %99, label %100, label %23

100:                                              ; preds = %23
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %93, <4 x i32> %93) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %101) #2
  br label %196

103:                                              ; preds = %8
  %104 = ptrtoint i8* %2 to i64
  %105 = shl i64 %104, 1
  %106 = inttoptr i64 %105 to i16*
  %107 = ptrtoint i8* %4 to i64
  %108 = shl i64 %107, 1
  %109 = inttoptr i64 %108 to i16*
  %110 = ptrtoint i8* %0 to i64
  %111 = shl i64 %110, 1
  %112 = inttoptr i64 %111 to i16*
  %113 = sext i32 %1 to i64
  %114 = sext i32 %3 to i64
  %115 = sext i32 %6 to i64
  br label %116

116:                                              ; preds = %116, %103
  %117 = phi i8* [ %5, %103 ], [ %190, %116 ]
  %118 = phi i16* [ %112, %103 ], [ %187, %116 ]
  %119 = phi i16* [ %109, %103 ], [ %188, %116 ]
  %120 = phi i16* [ %106, %103 ], [ %189, %116 ]
  %121 = phi i32 [ 0, %103 ], [ %191, %116 ]
  %122 = phi <4 x i32> [ zeroinitializer, %103 ], [ %186, %116 ]
  %123 = bitcast i16* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = bitcast i16* %119 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = bitcast i16* %120 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = bitcast i8* %117 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %134
  %136 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %137) #2
  %139 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %142) #2
  %144 = add <4 x i32> %143, <i32 32, i32 32, i32 32, i32 32>
  %145 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> %145) #2
  %147 = sub <8 x i16> %146, %124
  %148 = sub <8 x i16> zeroinitializer, %147
  %149 = icmp slt <8 x i16> %147, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %147
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %152 = add <4 x i32> %151, %122
  %153 = getelementptr inbounds i16, i16* %118, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %119, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = getelementptr inbounds i8, i8* %117, i64 8
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %168
  %170 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %171) #2
  %173 = add <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %175 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %176) #2
  %178 = add <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %179 = ashr <4 x i32> %178, <i32 6, i32 6, i32 6, i32 6>
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %179) #2
  %181 = sub <8 x i16> %180, %155
  %182 = sub <8 x i16> zeroinitializer, %181
  %183 = icmp slt <8 x i16> %181, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i16> %182, <8 x i16> %181
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %186 = add <4 x i32> %185, %152
  %187 = getelementptr inbounds i16, i16* %118, i64 %113
  %188 = getelementptr inbounds i16, i16* %119, i64 16
  %189 = getelementptr inbounds i16, i16* %120, i64 %114
  %190 = getelementptr inbounds i8, i8* %117, i64 %115
  %191 = add nuw nsw i32 %121, 1
  %192 = icmp eq i32 %191, 32
  br i1 %192, label %193, label %116

193:                                              ; preds = %116
  %194 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %186, <4 x i32> %186) #2
  %195 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %194, <4 x i32> %194) #2
  br label %196

196:                                              ; preds = %193, %100
  %197 = phi <4 x i32> [ %195, %193 ], [ %102, %100 ]
  %198 = extractelement <4 x i32> %197, i32 0
  ret i32 %198
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x16_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %97, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %94, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %95, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %96, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %98, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %93, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 %20
  %95 = getelementptr inbounds i16, i16* %26, i64 %21
  %96 = getelementptr inbounds i16, i16* %27, i64 16
  %97 = getelementptr inbounds i8, i8* %24, i64 %22
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 16
  br i1 %99, label %100, label %23

100:                                              ; preds = %23
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %93, <4 x i32> %93) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %101) #2
  br label %196

103:                                              ; preds = %8
  %104 = ptrtoint i8* %2 to i64
  %105 = shl i64 %104, 1
  %106 = inttoptr i64 %105 to i16*
  %107 = ptrtoint i8* %4 to i64
  %108 = shl i64 %107, 1
  %109 = inttoptr i64 %108 to i16*
  %110 = ptrtoint i8* %0 to i64
  %111 = shl i64 %110, 1
  %112 = inttoptr i64 %111 to i16*
  %113 = sext i32 %1 to i64
  %114 = sext i32 %3 to i64
  %115 = sext i32 %6 to i64
  br label %116

116:                                              ; preds = %116, %103
  %117 = phi i8* [ %5, %103 ], [ %190, %116 ]
  %118 = phi i16* [ %112, %103 ], [ %187, %116 ]
  %119 = phi i16* [ %109, %103 ], [ %188, %116 ]
  %120 = phi i16* [ %106, %103 ], [ %189, %116 ]
  %121 = phi i32 [ 0, %103 ], [ %191, %116 ]
  %122 = phi <4 x i32> [ zeroinitializer, %103 ], [ %186, %116 ]
  %123 = bitcast i16* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = bitcast i16* %119 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = bitcast i16* %120 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = bitcast i8* %117 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %134
  %136 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %137) #2
  %139 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %142) #2
  %144 = add <4 x i32> %143, <i32 32, i32 32, i32 32, i32 32>
  %145 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> %145) #2
  %147 = sub <8 x i16> %146, %124
  %148 = sub <8 x i16> zeroinitializer, %147
  %149 = icmp slt <8 x i16> %147, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %147
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %152 = add <4 x i32> %151, %122
  %153 = getelementptr inbounds i16, i16* %118, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %119, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = getelementptr inbounds i8, i8* %117, i64 8
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %168
  %170 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %171) #2
  %173 = add <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %175 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %176) #2
  %178 = add <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %179 = ashr <4 x i32> %178, <i32 6, i32 6, i32 6, i32 6>
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %179) #2
  %181 = sub <8 x i16> %180, %155
  %182 = sub <8 x i16> zeroinitializer, %181
  %183 = icmp slt <8 x i16> %181, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i16> %182, <8 x i16> %181
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %186 = add <4 x i32> %185, %152
  %187 = getelementptr inbounds i16, i16* %118, i64 %113
  %188 = getelementptr inbounds i16, i16* %119, i64 16
  %189 = getelementptr inbounds i16, i16* %120, i64 %114
  %190 = getelementptr inbounds i8, i8* %117, i64 %115
  %191 = add nuw nsw i32 %121, 1
  %192 = icmp eq i32 %191, 16
  br i1 %192, label %193, label %116

193:                                              ; preds = %116
  %194 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %186, <4 x i32> %186) #2
  %195 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %194, <4 x i32> %194) #2
  br label %196

196:                                              ; preds = %193, %100
  %197 = phi <4 x i32> [ %195, %193 ], [ %102, %100 ]
  %198 = extractelement <4 x i32> %197, i32 0
  ret i32 %198
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x8_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %97, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %94, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %95, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %96, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %98, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %93, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 %20
  %95 = getelementptr inbounds i16, i16* %26, i64 %21
  %96 = getelementptr inbounds i16, i16* %27, i64 16
  %97 = getelementptr inbounds i8, i8* %24, i64 %22
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %100, label %23

100:                                              ; preds = %23
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %93, <4 x i32> %93) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %101) #2
  br label %196

103:                                              ; preds = %8
  %104 = ptrtoint i8* %2 to i64
  %105 = shl i64 %104, 1
  %106 = inttoptr i64 %105 to i16*
  %107 = ptrtoint i8* %4 to i64
  %108 = shl i64 %107, 1
  %109 = inttoptr i64 %108 to i16*
  %110 = ptrtoint i8* %0 to i64
  %111 = shl i64 %110, 1
  %112 = inttoptr i64 %111 to i16*
  %113 = sext i32 %1 to i64
  %114 = sext i32 %3 to i64
  %115 = sext i32 %6 to i64
  br label %116

116:                                              ; preds = %116, %103
  %117 = phi i8* [ %5, %103 ], [ %190, %116 ]
  %118 = phi i16* [ %112, %103 ], [ %187, %116 ]
  %119 = phi i16* [ %109, %103 ], [ %188, %116 ]
  %120 = phi i16* [ %106, %103 ], [ %189, %116 ]
  %121 = phi i32 [ 0, %103 ], [ %191, %116 ]
  %122 = phi <4 x i32> [ zeroinitializer, %103 ], [ %186, %116 ]
  %123 = bitcast i16* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = bitcast i16* %119 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = bitcast i16* %120 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = bitcast i8* %117 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %134
  %136 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %137) #2
  %139 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %142) #2
  %144 = add <4 x i32> %143, <i32 32, i32 32, i32 32, i32 32>
  %145 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> %145) #2
  %147 = sub <8 x i16> %146, %124
  %148 = sub <8 x i16> zeroinitializer, %147
  %149 = icmp slt <8 x i16> %147, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %147
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %152 = add <4 x i32> %151, %122
  %153 = getelementptr inbounds i16, i16* %118, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %119, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = getelementptr inbounds i8, i8* %117, i64 8
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %168
  %170 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %171) #2
  %173 = add <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %175 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %176) #2
  %178 = add <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %179 = ashr <4 x i32> %178, <i32 6, i32 6, i32 6, i32 6>
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %179) #2
  %181 = sub <8 x i16> %180, %155
  %182 = sub <8 x i16> zeroinitializer, %181
  %183 = icmp slt <8 x i16> %181, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i16> %182, <8 x i16> %181
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %186 = add <4 x i32> %185, %152
  %187 = getelementptr inbounds i16, i16* %118, i64 %113
  %188 = getelementptr inbounds i16, i16* %119, i64 16
  %189 = getelementptr inbounds i16, i16* %120, i64 %114
  %190 = getelementptr inbounds i8, i8* %117, i64 %115
  %191 = add nuw nsw i32 %121, 1
  %192 = icmp eq i32 %191, 8
  br i1 %192, label %193, label %116

193:                                              ; preds = %116
  %194 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %186, <4 x i32> %186) #2
  %195 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %194, <4 x i32> %194) #2
  br label %196

196:                                              ; preds = %193, %100
  %197 = phi <4 x i32> [ %195, %193 ], [ %102, %100 ]
  %198 = extractelement <4 x i32> %197, i32 0
  ret i32 %198
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x16_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %69

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %63, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %60, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %61, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %62, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %64, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %59, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 %20
  %61 = getelementptr inbounds i16, i16* %26, i64 %21
  %62 = getelementptr inbounds i16, i16* %27, i64 8
  %63 = getelementptr inbounds i8, i8* %24, i64 %22
  %64 = add nuw nsw i32 %28, 1
  %65 = icmp eq i32 %64, 16
  br i1 %65, label %66, label %23

66:                                               ; preds = %23
  %67 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %59, <4 x i32> %59) #2
  %68 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %67, <4 x i32> %67) #2
  br label %128

69:                                               ; preds = %8
  %70 = ptrtoint i8* %2 to i64
  %71 = shl i64 %70, 1
  %72 = inttoptr i64 %71 to i16*
  %73 = ptrtoint i8* %4 to i64
  %74 = shl i64 %73, 1
  %75 = inttoptr i64 %74 to i16*
  %76 = ptrtoint i8* %0 to i64
  %77 = shl i64 %76, 1
  %78 = inttoptr i64 %77 to i16*
  %79 = sext i32 %1 to i64
  %80 = sext i32 %3 to i64
  %81 = sext i32 %6 to i64
  br label %82

82:                                               ; preds = %82, %69
  %83 = phi i8* [ %5, %69 ], [ %122, %82 ]
  %84 = phi i16* [ %78, %69 ], [ %119, %82 ]
  %85 = phi i16* [ %75, %69 ], [ %120, %82 ]
  %86 = phi i16* [ %72, %69 ], [ %121, %82 ]
  %87 = phi i32 [ 0, %69 ], [ %123, %82 ]
  %88 = phi <4 x i32> [ zeroinitializer, %69 ], [ %118, %82 ]
  %89 = bitcast i16* %84 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 1
  %91 = bitcast i16* %85 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = bitcast i16* %86 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 1
  %95 = bitcast i8* %83 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %100
  %102 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %103) #2
  %105 = add <4 x i32> %104, <i32 32, i32 32, i32 32, i32 32>
  %106 = ashr <4 x i32> %105, <i32 6, i32 6, i32 6, i32 6>
  %107 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %108) #2
  %110 = add <4 x i32> %109, <i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <4 x i32> %110, <i32 6, i32 6, i32 6, i32 6>
  %112 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %106, <4 x i32> %111) #2
  %113 = sub <8 x i16> %112, %90
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = icmp slt <8 x i16> %113, zeroinitializer
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %113
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %118 = add <4 x i32> %117, %88
  %119 = getelementptr inbounds i16, i16* %84, i64 %79
  %120 = getelementptr inbounds i16, i16* %85, i64 8
  %121 = getelementptr inbounds i16, i16* %86, i64 %80
  %122 = getelementptr inbounds i8, i8* %83, i64 %81
  %123 = add nuw nsw i32 %87, 1
  %124 = icmp eq i32 %123, 16
  br i1 %124, label %125, label %82

125:                                              ; preds = %82
  %126 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %118, <4 x i32> %118) #2
  %127 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %126, <4 x i32> %126) #2
  br label %128

128:                                              ; preds = %125, %66
  %129 = phi <4 x i32> [ %127, %125 ], [ %68, %66 ]
  %130 = extractelement <4 x i32> %129, i32 0
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x8_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %69

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %63, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %60, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %61, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %62, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %64, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %59, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 %20
  %61 = getelementptr inbounds i16, i16* %26, i64 %21
  %62 = getelementptr inbounds i16, i16* %27, i64 8
  %63 = getelementptr inbounds i8, i8* %24, i64 %22
  %64 = add nuw nsw i32 %28, 1
  %65 = icmp eq i32 %64, 8
  br i1 %65, label %66, label %23

66:                                               ; preds = %23
  %67 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %59, <4 x i32> %59) #2
  %68 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %67, <4 x i32> %67) #2
  br label %128

69:                                               ; preds = %8
  %70 = ptrtoint i8* %2 to i64
  %71 = shl i64 %70, 1
  %72 = inttoptr i64 %71 to i16*
  %73 = ptrtoint i8* %4 to i64
  %74 = shl i64 %73, 1
  %75 = inttoptr i64 %74 to i16*
  %76 = ptrtoint i8* %0 to i64
  %77 = shl i64 %76, 1
  %78 = inttoptr i64 %77 to i16*
  %79 = sext i32 %1 to i64
  %80 = sext i32 %3 to i64
  %81 = sext i32 %6 to i64
  br label %82

82:                                               ; preds = %82, %69
  %83 = phi i8* [ %5, %69 ], [ %122, %82 ]
  %84 = phi i16* [ %78, %69 ], [ %119, %82 ]
  %85 = phi i16* [ %75, %69 ], [ %120, %82 ]
  %86 = phi i16* [ %72, %69 ], [ %121, %82 ]
  %87 = phi i32 [ 0, %69 ], [ %123, %82 ]
  %88 = phi <4 x i32> [ zeroinitializer, %69 ], [ %118, %82 ]
  %89 = bitcast i16* %84 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 1
  %91 = bitcast i16* %85 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = bitcast i16* %86 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 1
  %95 = bitcast i8* %83 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %100
  %102 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %103) #2
  %105 = add <4 x i32> %104, <i32 32, i32 32, i32 32, i32 32>
  %106 = ashr <4 x i32> %105, <i32 6, i32 6, i32 6, i32 6>
  %107 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %108) #2
  %110 = add <4 x i32> %109, <i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <4 x i32> %110, <i32 6, i32 6, i32 6, i32 6>
  %112 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %106, <4 x i32> %111) #2
  %113 = sub <8 x i16> %112, %90
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = icmp slt <8 x i16> %113, zeroinitializer
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %113
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %118 = add <4 x i32> %117, %88
  %119 = getelementptr inbounds i16, i16* %84, i64 %79
  %120 = getelementptr inbounds i16, i16* %85, i64 8
  %121 = getelementptr inbounds i16, i16* %86, i64 %80
  %122 = getelementptr inbounds i8, i8* %83, i64 %81
  %123 = add nuw nsw i32 %87, 1
  %124 = icmp eq i32 %123, 8
  br i1 %124, label %125, label %82

125:                                              ; preds = %82
  %126 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %118, <4 x i32> %118) #2
  %127 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %126, <4 x i32> %126) #2
  br label %128

128:                                              ; preds = %125, %66
  %129 = phi <4 x i32> [ %127, %125 ], [ %68, %66 ]
  %130 = extractelement <4 x i32> %129, i32 0
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x4_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %156

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = inttoptr i64 %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = inttoptr i64 %15 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = inttoptr i64 %12 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  %29 = bitcast i8* %5 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = bitcast <16 x i8> %33 to <8 x i16>
  %35 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %34
  %36 = shufflevector <8 x i16> %26, <8 x i16> %28, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %37 = shufflevector <8 x i16> %34, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %36, <8 x i16> %37) #2
  %39 = add <4 x i32> %38, <i32 32, i32 32, i32 32, i32 32>
  %40 = ashr <4 x i32> %39, <i32 6, i32 6, i32 6, i32 6>
  %41 = shufflevector <8 x i16> %26, <8 x i16> %28, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = shufflevector <8 x i16> %34, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> %42) #2
  %44 = add <4 x i32> %43, <i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <4 x i32> %44, <i32 6, i32 6, i32 6, i32 6>
  %46 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %40, <4 x i32> %45) #2
  %47 = sub <8 x i16> %46, %24
  %48 = sub <8 x i16> zeroinitializer, %47
  %49 = icmp slt <8 x i16> %47, zeroinitializer
  %50 = select <8 x i1> %49, <8 x i16> %48, <8 x i16> %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %52 = getelementptr inbounds i16, i16* %19, i64 %20
  %53 = getelementptr inbounds i16, i16* %16, i64 %21
  %54 = getelementptr inbounds i16, i16* %13, i64 8
  %55 = getelementptr inbounds i8, i8* %5, i64 %22
  %56 = bitcast i16* %52 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = bitcast i16* %53 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = bitcast i16* %54 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = bitcast i8* %55 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = insertelement <2 x i64> undef, i64 %63, i32 0
  %65 = bitcast <2 x i64> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = bitcast <16 x i8> %66 to <8 x i16>
  %68 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %67
  %69 = shufflevector <8 x i16> %59, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %70 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> %70) #2
  %72 = add <4 x i32> %71, <i32 32, i32 32, i32 32, i32 32>
  %73 = ashr <4 x i32> %72, <i32 6, i32 6, i32 6, i32 6>
  %74 = shufflevector <8 x i16> %59, <8 x i16> %61, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %75 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %75) #2
  %77 = add <4 x i32> %76, <i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <4 x i32> %77, <i32 6, i32 6, i32 6, i32 6>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %73, <4 x i32> %78) #2
  %80 = sub <8 x i16> %79, %57
  %81 = sub <8 x i16> zeroinitializer, %80
  %82 = icmp slt <8 x i16> %80, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> %80
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %85 = add <4 x i32> %84, %51
  %86 = getelementptr inbounds i16, i16* %52, i64 %20
  %87 = getelementptr inbounds i16, i16* %53, i64 %21
  %88 = getelementptr inbounds i16, i16* %13, i64 16
  %89 = getelementptr inbounds i8, i8* %55, i64 %22
  %90 = bitcast i16* %86 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = bitcast i16* %87 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = bitcast i16* %88 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = bitcast i8* %89 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = bitcast <16 x i8> %100 to <8 x i16>
  %102 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %101
  %103 = shufflevector <8 x i16> %93, <8 x i16> %95, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = shufflevector <8 x i16> %101, <8 x i16> %102, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %103, <8 x i16> %104) #2
  %106 = add <4 x i32> %105, <i32 32, i32 32, i32 32, i32 32>
  %107 = ashr <4 x i32> %106, <i32 6, i32 6, i32 6, i32 6>
  %108 = shufflevector <8 x i16> %93, <8 x i16> %95, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = shufflevector <8 x i16> %101, <8 x i16> %102, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %109) #2
  %111 = add <4 x i32> %110, <i32 32, i32 32, i32 32, i32 32>
  %112 = ashr <4 x i32> %111, <i32 6, i32 6, i32 6, i32 6>
  %113 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %107, <4 x i32> %112) #2
  %114 = sub <8 x i16> %113, %91
  %115 = sub <8 x i16> zeroinitializer, %114
  %116 = icmp slt <8 x i16> %114, zeroinitializer
  %117 = select <8 x i1> %116, <8 x i16> %115, <8 x i16> %114
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %119 = add <4 x i32> %118, %85
  %120 = getelementptr inbounds i16, i16* %86, i64 %20
  %121 = getelementptr inbounds i16, i16* %87, i64 %21
  %122 = getelementptr inbounds i16, i16* %13, i64 24
  %123 = getelementptr inbounds i8, i8* %89, i64 %22
  %124 = bitcast i16* %120 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = bitcast i16* %121 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2
  %128 = bitcast i16* %122 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = bitcast i8* %123 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = insertelement <2 x i64> undef, i64 %131, i32 0
  %133 = bitcast <2 x i64> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %135
  %137 = shufflevector <8 x i16> %127, <8 x i16> %129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = shufflevector <8 x i16> %135, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> %138) #2
  %140 = add <4 x i32> %139, <i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <4 x i32> %140, <i32 6, i32 6, i32 6, i32 6>
  %142 = shufflevector <8 x i16> %127, <8 x i16> %129, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = shufflevector <8 x i16> %135, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %143) #2
  %145 = add <4 x i32> %144, <i32 32, i32 32, i32 32, i32 32>
  %146 = ashr <4 x i32> %145, <i32 6, i32 6, i32 6, i32 6>
  %147 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %141, <4 x i32> %146) #2
  %148 = sub <8 x i16> %147, %125
  %149 = sub <8 x i16> zeroinitializer, %148
  %150 = icmp slt <8 x i16> %148, zeroinitializer
  %151 = select <8 x i1> %150, <8 x i16> %149, <8 x i16> %148
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %153 = add <4 x i32> %152, %119
  %154 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %153, <4 x i32> %153) #2
  %155 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %154, <4 x i32> %154) #2
  br label %302

156:                                              ; preds = %8
  %157 = ptrtoint i8* %2 to i64
  %158 = shl i64 %157, 1
  %159 = inttoptr i64 %158 to i16*
  %160 = ptrtoint i8* %4 to i64
  %161 = shl i64 %160, 1
  %162 = inttoptr i64 %161 to i16*
  %163 = ptrtoint i8* %0 to i64
  %164 = shl i64 %163, 1
  %165 = inttoptr i64 %164 to i16*
  %166 = sext i32 %1 to i64
  %167 = sext i32 %3 to i64
  %168 = sext i32 %6 to i64
  %169 = inttoptr i64 %164 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = inttoptr i64 %161 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2
  %173 = inttoptr i64 %158 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2
  %175 = bitcast i8* %5 to i64*
  %176 = load i64, i64* %175, align 1
  %177 = insertelement <2 x i64> undef, i64 %176, i32 0
  %178 = bitcast <2 x i64> %177 to <16 x i8>
  %179 = shufflevector <16 x i8> %178, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %180 = bitcast <16 x i8> %179 to <8 x i16>
  %181 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %180
  %182 = shufflevector <8 x i16> %172, <8 x i16> %174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %183 = shufflevector <8 x i16> %180, <8 x i16> %181, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %184 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> %183) #2
  %185 = add <4 x i32> %184, <i32 32, i32 32, i32 32, i32 32>
  %186 = ashr <4 x i32> %185, <i32 6, i32 6, i32 6, i32 6>
  %187 = shufflevector <8 x i16> %172, <8 x i16> %174, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %188 = shufflevector <8 x i16> %180, <8 x i16> %181, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %189 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %187, <8 x i16> %188) #2
  %190 = add <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %191 = ashr <4 x i32> %190, <i32 6, i32 6, i32 6, i32 6>
  %192 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %186, <4 x i32> %191) #2
  %193 = sub <8 x i16> %192, %170
  %194 = sub <8 x i16> zeroinitializer, %193
  %195 = icmp slt <8 x i16> %193, zeroinitializer
  %196 = select <8 x i1> %195, <8 x i16> %194, <8 x i16> %193
  %197 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %196, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %198 = getelementptr inbounds i16, i16* %165, i64 %166
  %199 = getelementptr inbounds i16, i16* %162, i64 8
  %200 = getelementptr inbounds i16, i16* %159, i64 %167
  %201 = getelementptr inbounds i8, i8* %5, i64 %168
  %202 = bitcast i16* %198 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2
  %204 = bitcast i16* %199 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 2
  %206 = bitcast i16* %200 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = bitcast i8* %201 to i64*
  %209 = load i64, i64* %208, align 1
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = bitcast <2 x i64> %210 to <16 x i8>
  %212 = shufflevector <16 x i8> %211, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %213 = bitcast <16 x i8> %212 to <8 x i16>
  %214 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %213
  %215 = shufflevector <8 x i16> %205, <8 x i16> %207, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %216 = shufflevector <8 x i16> %213, <8 x i16> %214, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %217 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %215, <8 x i16> %216) #2
  %218 = add <4 x i32> %217, <i32 32, i32 32, i32 32, i32 32>
  %219 = ashr <4 x i32> %218, <i32 6, i32 6, i32 6, i32 6>
  %220 = shufflevector <8 x i16> %205, <8 x i16> %207, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %221 = shufflevector <8 x i16> %213, <8 x i16> %214, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %220, <8 x i16> %221) #2
  %223 = add <4 x i32> %222, <i32 32, i32 32, i32 32, i32 32>
  %224 = ashr <4 x i32> %223, <i32 6, i32 6, i32 6, i32 6>
  %225 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %219, <4 x i32> %224) #2
  %226 = sub <8 x i16> %225, %203
  %227 = sub <8 x i16> zeroinitializer, %226
  %228 = icmp slt <8 x i16> %226, zeroinitializer
  %229 = select <8 x i1> %228, <8 x i16> %227, <8 x i16> %226
  %230 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %229, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %231 = add <4 x i32> %230, %197
  %232 = getelementptr inbounds i16, i16* %198, i64 %166
  %233 = getelementptr inbounds i16, i16* %162, i64 16
  %234 = getelementptr inbounds i16, i16* %200, i64 %167
  %235 = getelementptr inbounds i8, i8* %201, i64 %168
  %236 = bitcast i16* %232 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %233 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2
  %240 = bitcast i16* %234 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2
  %242 = bitcast i8* %235 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> undef, i64 %243, i32 0
  %245 = bitcast <2 x i64> %244 to <16 x i8>
  %246 = shufflevector <16 x i8> %245, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %247 = bitcast <16 x i8> %246 to <8 x i16>
  %248 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %247
  %249 = shufflevector <8 x i16> %239, <8 x i16> %241, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %250 = shufflevector <8 x i16> %247, <8 x i16> %248, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> %250) #2
  %252 = add <4 x i32> %251, <i32 32, i32 32, i32 32, i32 32>
  %253 = ashr <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %254 = shufflevector <8 x i16> %239, <8 x i16> %241, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %255 = shufflevector <8 x i16> %247, <8 x i16> %248, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %254, <8 x i16> %255) #2
  %257 = add <4 x i32> %256, <i32 32, i32 32, i32 32, i32 32>
  %258 = ashr <4 x i32> %257, <i32 6, i32 6, i32 6, i32 6>
  %259 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %253, <4 x i32> %258) #2
  %260 = sub <8 x i16> %259, %237
  %261 = sub <8 x i16> zeroinitializer, %260
  %262 = icmp slt <8 x i16> %260, zeroinitializer
  %263 = select <8 x i1> %262, <8 x i16> %261, <8 x i16> %260
  %264 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %263, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %265 = add <4 x i32> %264, %231
  %266 = getelementptr inbounds i16, i16* %232, i64 %166
  %267 = getelementptr inbounds i16, i16* %162, i64 24
  %268 = getelementptr inbounds i16, i16* %234, i64 %167
  %269 = getelementptr inbounds i8, i8* %235, i64 %168
  %270 = bitcast i16* %266 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2
  %272 = bitcast i16* %267 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2
  %274 = bitcast i16* %268 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2
  %276 = bitcast i8* %269 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> undef, i64 %277, i32 0
  %279 = bitcast <2 x i64> %278 to <16 x i8>
  %280 = shufflevector <16 x i8> %279, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %281 = bitcast <16 x i8> %280 to <8 x i16>
  %282 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %281
  %283 = shufflevector <8 x i16> %273, <8 x i16> %275, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %284 = shufflevector <8 x i16> %281, <8 x i16> %282, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %283, <8 x i16> %284) #2
  %286 = add <4 x i32> %285, <i32 32, i32 32, i32 32, i32 32>
  %287 = ashr <4 x i32> %286, <i32 6, i32 6, i32 6, i32 6>
  %288 = shufflevector <8 x i16> %273, <8 x i16> %275, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %289 = shufflevector <8 x i16> %281, <8 x i16> %282, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %290 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %288, <8 x i16> %289) #2
  %291 = add <4 x i32> %290, <i32 32, i32 32, i32 32, i32 32>
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %287, <4 x i32> %292) #2
  %294 = sub <8 x i16> %293, %271
  %295 = sub <8 x i16> zeroinitializer, %294
  %296 = icmp slt <8 x i16> %294, zeroinitializer
  %297 = select <8 x i1> %296, <8 x i16> %295, <8 x i16> %294
  %298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %297, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %299 = add <4 x i32> %298, %265
  %300 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %299, <4 x i32> %299) #2
  %301 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %300, <4 x i32> %300) #2
  br label %302

302:                                              ; preds = %156, %10
  %303 = phi <4 x i32> [ %301, %156 ], [ %155, %10 ]
  %304 = extractelement <4 x i32> %303, i32 0
  ret i32 %304
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x8_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %232

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl nsw i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl nsw i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %6, 1
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %18 to i64*
  %30 = load i64, i64* %29, align 2
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds i16, i16* %19, i64 %20
  %33 = bitcast i16* %32 to i64*
  %34 = load i64, i64* %33, align 2
  %35 = insertelement <2 x i64> %31, i64 %34, i32 1
  %36 = inttoptr i64 %15 to i64*
  %37 = load i64, i64* %36, align 2
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %16, i64 %21
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 2
  %42 = insertelement <2 x i64> %38, i64 %41, i32 1
  %43 = inttoptr i64 %12 to i64*
  %44 = load i64, i64* %43, align 2
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = getelementptr inbounds i16, i16* %13, i64 4
  %47 = bitcast i16* %46 to i64*
  %48 = load i64, i64* %47, align 2
  %49 = insertelement <2 x i64> %45, i64 %48, i32 1
  %50 = bitcast i8* %5 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = getelementptr inbounds i8, i8* %5, i64 %22
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %52, i32 %55, i32 1
  %57 = bitcast <4 x i32> %56 to <16 x i8>
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = bitcast <16 x i8> %58 to <8 x i16>
  %60 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %59
  %61 = bitcast <2 x i64> %42 to <8 x i16>
  %62 = bitcast <2 x i64> %49 to <8 x i16>
  %63 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %63, <8 x i16> %64) #2
  %66 = add <4 x i32> %65, <i32 32, i32 32, i32 32, i32 32>
  %67 = ashr <4 x i32> %66, <i32 6, i32 6, i32 6, i32 6>
  %68 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> %69) #2
  %71 = add <4 x i32> %70, <i32 32, i32 32, i32 32, i32 32>
  %72 = ashr <4 x i32> %71, <i32 6, i32 6, i32 6, i32 6>
  %73 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %72) #2
  %74 = bitcast <2 x i64> %35 to <8 x i16>
  %75 = sub <8 x i16> %73, %74
  %76 = sub <8 x i16> zeroinitializer, %75
  %77 = icmp slt <8 x i16> %75, zeroinitializer
  %78 = select <8 x i1> %77, <8 x i16> %76, <8 x i16> %75
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %78, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %80 = getelementptr inbounds i16, i16* %19, i64 %24
  %81 = getelementptr inbounds i16, i16* %16, i64 %26
  %82 = getelementptr inbounds i16, i16* %13, i64 8
  %83 = getelementptr inbounds i8, i8* %5, i64 %28
  %84 = bitcast i16* %80 to i64*
  %85 = load i64, i64* %84, align 2
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = getelementptr inbounds i16, i16* %80, i64 %20
  %88 = bitcast i16* %87 to i64*
  %89 = load i64, i64* %88, align 2
  %90 = insertelement <2 x i64> %86, i64 %89, i32 1
  %91 = bitcast i16* %81 to i64*
  %92 = load i64, i64* %91, align 2
  %93 = insertelement <2 x i64> undef, i64 %92, i32 0
  %94 = getelementptr inbounds i16, i16* %81, i64 %21
  %95 = bitcast i16* %94 to i64*
  %96 = load i64, i64* %95, align 2
  %97 = insertelement <2 x i64> %93, i64 %96, i32 1
  %98 = bitcast i16* %82 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = bitcast i8* %83 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = insertelement <4 x i32> undef, i32 %101, i32 0
  %103 = getelementptr inbounds i8, i8* %83, i64 %22
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = insertelement <4 x i32> %102, i32 %105, i32 1
  %107 = bitcast <4 x i32> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = bitcast <2 x i64> %97 to <8 x i16>
  %112 = shufflevector <8 x i16> %111, <8 x i16> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %113) #2
  %115 = add <4 x i32> %114, <i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <4 x i32> %115, <i32 6, i32 6, i32 6, i32 6>
  %117 = shufflevector <8 x i16> %111, <8 x i16> %99, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %118) #2
  %120 = add <4 x i32> %119, <i32 32, i32 32, i32 32, i32 32>
  %121 = ashr <4 x i32> %120, <i32 6, i32 6, i32 6, i32 6>
  %122 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %116, <4 x i32> %121) #2
  %123 = bitcast <2 x i64> %90 to <8 x i16>
  %124 = sub <8 x i16> %122, %123
  %125 = sub <8 x i16> zeroinitializer, %124
  %126 = icmp slt <8 x i16> %124, zeroinitializer
  %127 = select <8 x i1> %126, <8 x i16> %125, <8 x i16> %124
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %129 = add <4 x i32> %128, %79
  %130 = getelementptr inbounds i16, i16* %80, i64 %24
  %131 = getelementptr inbounds i16, i16* %81, i64 %26
  %132 = getelementptr inbounds i16, i16* %13, i64 16
  %133 = getelementptr inbounds i8, i8* %83, i64 %28
  %134 = bitcast i16* %130 to i64*
  %135 = load i64, i64* %134, align 2
  %136 = insertelement <2 x i64> undef, i64 %135, i32 0
  %137 = getelementptr inbounds i16, i16* %130, i64 %20
  %138 = bitcast i16* %137 to i64*
  %139 = load i64, i64* %138, align 2
  %140 = insertelement <2 x i64> %136, i64 %139, i32 1
  %141 = bitcast i16* %131 to i64*
  %142 = load i64, i64* %141, align 2
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = getelementptr inbounds i16, i16* %131, i64 %21
  %145 = bitcast i16* %144 to i64*
  %146 = load i64, i64* %145, align 2
  %147 = insertelement <2 x i64> %143, i64 %146, i32 1
  %148 = bitcast i16* %132 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = bitcast i8* %133 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = insertelement <4 x i32> undef, i32 %151, i32 0
  %153 = getelementptr inbounds i8, i8* %133, i64 %22
  %154 = bitcast i8* %153 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = insertelement <4 x i32> %152, i32 %155, i32 1
  %157 = bitcast <4 x i32> %156 to <16 x i8>
  %158 = shufflevector <16 x i8> %157, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %159 = bitcast <16 x i8> %158 to <8 x i16>
  %160 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %159
  %161 = bitcast <2 x i64> %147 to <8 x i16>
  %162 = shufflevector <8 x i16> %161, <8 x i16> %149, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %163 = shufflevector <8 x i16> %159, <8 x i16> %160, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %164 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %162, <8 x i16> %163) #2
  %165 = add <4 x i32> %164, <i32 32, i32 32, i32 32, i32 32>
  %166 = ashr <4 x i32> %165, <i32 6, i32 6, i32 6, i32 6>
  %167 = shufflevector <8 x i16> %161, <8 x i16> %149, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %168 = shufflevector <8 x i16> %159, <8 x i16> %160, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %167, <8 x i16> %168) #2
  %170 = add <4 x i32> %169, <i32 32, i32 32, i32 32, i32 32>
  %171 = ashr <4 x i32> %170, <i32 6, i32 6, i32 6, i32 6>
  %172 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %166, <4 x i32> %171) #2
  %173 = bitcast <2 x i64> %140 to <8 x i16>
  %174 = sub <8 x i16> %172, %173
  %175 = sub <8 x i16> zeroinitializer, %174
  %176 = icmp slt <8 x i16> %174, zeroinitializer
  %177 = select <8 x i1> %176, <8 x i16> %175, <8 x i16> %174
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %179 = add <4 x i32> %178, %129
  %180 = getelementptr inbounds i16, i16* %130, i64 %24
  %181 = getelementptr inbounds i16, i16* %131, i64 %26
  %182 = getelementptr inbounds i16, i16* %13, i64 24
  %183 = getelementptr inbounds i8, i8* %133, i64 %28
  %184 = bitcast i16* %180 to i64*
  %185 = load i64, i64* %184, align 2
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = getelementptr inbounds i16, i16* %180, i64 %20
  %188 = bitcast i16* %187 to i64*
  %189 = load i64, i64* %188, align 1
  %190 = insertelement <2 x i64> %186, i64 %189, i32 1
  %191 = bitcast i16* %181 to i64*
  %192 = load i64, i64* %191, align 2
  %193 = insertelement <2 x i64> undef, i64 %192, i32 0
  %194 = getelementptr inbounds i16, i16* %181, i64 %21
  %195 = bitcast i16* %194 to i64*
  %196 = load i64, i64* %195, align 1
  %197 = insertelement <2 x i64> %193, i64 %196, i32 1
  %198 = bitcast i16* %182 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2
  %200 = bitcast i8* %183 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = insertelement <4 x i32> undef, i32 %201, i32 0
  %203 = getelementptr inbounds i8, i8* %183, i64 %22
  %204 = bitcast i8* %203 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = insertelement <4 x i32> %202, i32 %205, i32 1
  %207 = bitcast <4 x i32> %206 to <16 x i8>
  %208 = shufflevector <16 x i8> %207, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %209 = bitcast <16 x i8> %208 to <8 x i16>
  %210 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %209
  %211 = bitcast <2 x i64> %197 to <8 x i16>
  %212 = shufflevector <8 x i16> %211, <8 x i16> %199, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %209, <8 x i16> %210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %212, <8 x i16> %213) #2
  %215 = add <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %216 = ashr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %217 = shufflevector <8 x i16> %211, <8 x i16> %199, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %209, <8 x i16> %210, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %217, <8 x i16> %218) #2
  %220 = add <4 x i32> %219, <i32 32, i32 32, i32 32, i32 32>
  %221 = ashr <4 x i32> %220, <i32 6, i32 6, i32 6, i32 6>
  %222 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %216, <4 x i32> %221) #2
  %223 = bitcast <2 x i64> %190 to <8 x i16>
  %224 = sub <8 x i16> %222, %223
  %225 = sub <8 x i16> zeroinitializer, %224
  %226 = icmp slt <8 x i16> %224, zeroinitializer
  %227 = select <8 x i1> %226, <8 x i16> %225, <8 x i16> %224
  %228 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %227, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %229 = add <4 x i32> %228, %179
  %230 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %229, <4 x i32> %229) #2
  %231 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %230, <4 x i32> %230) #2
  br label %454

232:                                              ; preds = %8
  %233 = ptrtoint i8* %2 to i64
  %234 = shl i64 %233, 1
  %235 = inttoptr i64 %234 to i16*
  %236 = ptrtoint i8* %4 to i64
  %237 = shl i64 %236, 1
  %238 = inttoptr i64 %237 to i16*
  %239 = ptrtoint i8* %0 to i64
  %240 = shl i64 %239, 1
  %241 = inttoptr i64 %240 to i16*
  %242 = sext i32 %1 to i64
  %243 = sext i32 %3 to i64
  %244 = sext i32 %6 to i64
  %245 = shl nsw i32 %1, 1
  %246 = sext i32 %245 to i64
  %247 = shl nsw i32 %3, 1
  %248 = sext i32 %247 to i64
  %249 = shl nsw i32 %6, 1
  %250 = sext i32 %249 to i64
  %251 = inttoptr i64 %240 to i64*
  %252 = load i64, i64* %251, align 2
  %253 = insertelement <2 x i64> undef, i64 %252, i32 0
  %254 = getelementptr inbounds i16, i16* %241, i64 %242
  %255 = bitcast i16* %254 to i64*
  %256 = load i64, i64* %255, align 2
  %257 = insertelement <2 x i64> %253, i64 %256, i32 1
  %258 = inttoptr i64 %237 to i64*
  %259 = load i64, i64* %258, align 2
  %260 = insertelement <2 x i64> undef, i64 %259, i32 0
  %261 = getelementptr inbounds i16, i16* %238, i64 4
  %262 = bitcast i16* %261 to i64*
  %263 = load i64, i64* %262, align 2
  %264 = insertelement <2 x i64> %260, i64 %263, i32 1
  %265 = inttoptr i64 %234 to i64*
  %266 = load i64, i64* %265, align 2
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = getelementptr inbounds i16, i16* %235, i64 %243
  %269 = bitcast i16* %268 to i64*
  %270 = load i64, i64* %269, align 2
  %271 = insertelement <2 x i64> %267, i64 %270, i32 1
  %272 = bitcast i8* %5 to i32*
  %273 = load i32, i32* %272, align 4
  %274 = insertelement <4 x i32> undef, i32 %273, i32 0
  %275 = getelementptr inbounds i8, i8* %5, i64 %244
  %276 = bitcast i8* %275 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = insertelement <4 x i32> %274, i32 %277, i32 1
  %279 = bitcast <4 x i32> %278 to <16 x i8>
  %280 = shufflevector <16 x i8> %279, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %281 = bitcast <16 x i8> %280 to <8 x i16>
  %282 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %281
  %283 = bitcast <2 x i64> %264 to <8 x i16>
  %284 = bitcast <2 x i64> %271 to <8 x i16>
  %285 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = shufflevector <8 x i16> %281, <8 x i16> %282, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> %286) #2
  %288 = add <4 x i32> %287, <i32 32, i32 32, i32 32, i32 32>
  %289 = ashr <4 x i32> %288, <i32 6, i32 6, i32 6, i32 6>
  %290 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %291 = shufflevector <8 x i16> %281, <8 x i16> %282, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %292 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %290, <8 x i16> %291) #2
  %293 = add <4 x i32> %292, <i32 32, i32 32, i32 32, i32 32>
  %294 = ashr <4 x i32> %293, <i32 6, i32 6, i32 6, i32 6>
  %295 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %289, <4 x i32> %294) #2
  %296 = bitcast <2 x i64> %257 to <8 x i16>
  %297 = sub <8 x i16> %295, %296
  %298 = sub <8 x i16> zeroinitializer, %297
  %299 = icmp slt <8 x i16> %297, zeroinitializer
  %300 = select <8 x i1> %299, <8 x i16> %298, <8 x i16> %297
  %301 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %302 = getelementptr inbounds i16, i16* %241, i64 %246
  %303 = getelementptr inbounds i16, i16* %238, i64 8
  %304 = getelementptr inbounds i16, i16* %235, i64 %248
  %305 = getelementptr inbounds i8, i8* %5, i64 %250
  %306 = bitcast i16* %302 to i64*
  %307 = load i64, i64* %306, align 2
  %308 = insertelement <2 x i64> undef, i64 %307, i32 0
  %309 = getelementptr inbounds i16, i16* %302, i64 %242
  %310 = bitcast i16* %309 to i64*
  %311 = load i64, i64* %310, align 2
  %312 = insertelement <2 x i64> %308, i64 %311, i32 1
  %313 = bitcast i16* %303 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2
  %315 = bitcast i16* %304 to i64*
  %316 = load i64, i64* %315, align 2
  %317 = insertelement <2 x i64> undef, i64 %316, i32 0
  %318 = getelementptr inbounds i16, i16* %304, i64 %243
  %319 = bitcast i16* %318 to i64*
  %320 = load i64, i64* %319, align 2
  %321 = insertelement <2 x i64> %317, i64 %320, i32 1
  %322 = bitcast i8* %305 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = insertelement <4 x i32> undef, i32 %323, i32 0
  %325 = getelementptr inbounds i8, i8* %305, i64 %244
  %326 = bitcast i8* %325 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = insertelement <4 x i32> %324, i32 %327, i32 1
  %329 = bitcast <4 x i32> %328 to <16 x i8>
  %330 = shufflevector <16 x i8> %329, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %331 = bitcast <16 x i8> %330 to <8 x i16>
  %332 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %331
  %333 = bitcast <2 x i64> %321 to <8 x i16>
  %334 = shufflevector <8 x i16> %314, <8 x i16> %333, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %335 = shufflevector <8 x i16> %331, <8 x i16> %332, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %336 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %334, <8 x i16> %335) #2
  %337 = add <4 x i32> %336, <i32 32, i32 32, i32 32, i32 32>
  %338 = ashr <4 x i32> %337, <i32 6, i32 6, i32 6, i32 6>
  %339 = shufflevector <8 x i16> %314, <8 x i16> %333, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %340 = shufflevector <8 x i16> %331, <8 x i16> %332, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %339, <8 x i16> %340) #2
  %342 = add <4 x i32> %341, <i32 32, i32 32, i32 32, i32 32>
  %343 = ashr <4 x i32> %342, <i32 6, i32 6, i32 6, i32 6>
  %344 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %338, <4 x i32> %343) #2
  %345 = bitcast <2 x i64> %312 to <8 x i16>
  %346 = sub <8 x i16> %344, %345
  %347 = sub <8 x i16> zeroinitializer, %346
  %348 = icmp slt <8 x i16> %346, zeroinitializer
  %349 = select <8 x i1> %348, <8 x i16> %347, <8 x i16> %346
  %350 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %349, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %351 = add <4 x i32> %350, %301
  %352 = getelementptr inbounds i16, i16* %302, i64 %246
  %353 = getelementptr inbounds i16, i16* %238, i64 16
  %354 = getelementptr inbounds i16, i16* %304, i64 %248
  %355 = getelementptr inbounds i8, i8* %305, i64 %250
  %356 = bitcast i16* %352 to i64*
  %357 = load i64, i64* %356, align 2
  %358 = insertelement <2 x i64> undef, i64 %357, i32 0
  %359 = getelementptr inbounds i16, i16* %352, i64 %242
  %360 = bitcast i16* %359 to i64*
  %361 = load i64, i64* %360, align 2
  %362 = insertelement <2 x i64> %358, i64 %361, i32 1
  %363 = bitcast i16* %353 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2
  %365 = bitcast i16* %354 to i64*
  %366 = load i64, i64* %365, align 2
  %367 = insertelement <2 x i64> undef, i64 %366, i32 0
  %368 = getelementptr inbounds i16, i16* %354, i64 %243
  %369 = bitcast i16* %368 to i64*
  %370 = load i64, i64* %369, align 2
  %371 = insertelement <2 x i64> %367, i64 %370, i32 1
  %372 = bitcast i8* %355 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = insertelement <4 x i32> undef, i32 %373, i32 0
  %375 = getelementptr inbounds i8, i8* %355, i64 %244
  %376 = bitcast i8* %375 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = insertelement <4 x i32> %374, i32 %377, i32 1
  %379 = bitcast <4 x i32> %378 to <16 x i8>
  %380 = shufflevector <16 x i8> %379, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %381 = bitcast <16 x i8> %380 to <8 x i16>
  %382 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %381
  %383 = bitcast <2 x i64> %371 to <8 x i16>
  %384 = shufflevector <8 x i16> %364, <8 x i16> %383, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %385 = shufflevector <8 x i16> %381, <8 x i16> %382, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %386 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %384, <8 x i16> %385) #2
  %387 = add <4 x i32> %386, <i32 32, i32 32, i32 32, i32 32>
  %388 = ashr <4 x i32> %387, <i32 6, i32 6, i32 6, i32 6>
  %389 = shufflevector <8 x i16> %364, <8 x i16> %383, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %390 = shufflevector <8 x i16> %381, <8 x i16> %382, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %391 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %389, <8 x i16> %390) #2
  %392 = add <4 x i32> %391, <i32 32, i32 32, i32 32, i32 32>
  %393 = ashr <4 x i32> %392, <i32 6, i32 6, i32 6, i32 6>
  %394 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %388, <4 x i32> %393) #2
  %395 = bitcast <2 x i64> %362 to <8 x i16>
  %396 = sub <8 x i16> %394, %395
  %397 = sub <8 x i16> zeroinitializer, %396
  %398 = icmp slt <8 x i16> %396, zeroinitializer
  %399 = select <8 x i1> %398, <8 x i16> %397, <8 x i16> %396
  %400 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %399, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %401 = add <4 x i32> %400, %351
  %402 = getelementptr inbounds i16, i16* %352, i64 %246
  %403 = getelementptr inbounds i16, i16* %238, i64 24
  %404 = getelementptr inbounds i16, i16* %354, i64 %248
  %405 = getelementptr inbounds i8, i8* %355, i64 %250
  %406 = bitcast i16* %402 to i64*
  %407 = load i64, i64* %406, align 2
  %408 = insertelement <2 x i64> undef, i64 %407, i32 0
  %409 = getelementptr inbounds i16, i16* %402, i64 %242
  %410 = bitcast i16* %409 to i64*
  %411 = load i64, i64* %410, align 1
  %412 = insertelement <2 x i64> %408, i64 %411, i32 1
  %413 = bitcast i16* %403 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 2
  %415 = bitcast i16* %404 to i64*
  %416 = load i64, i64* %415, align 2
  %417 = insertelement <2 x i64> undef, i64 %416, i32 0
  %418 = getelementptr inbounds i16, i16* %404, i64 %243
  %419 = bitcast i16* %418 to i64*
  %420 = load i64, i64* %419, align 1
  %421 = insertelement <2 x i64> %417, i64 %420, i32 1
  %422 = bitcast i8* %405 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = insertelement <4 x i32> undef, i32 %423, i32 0
  %425 = getelementptr inbounds i8, i8* %405, i64 %244
  %426 = bitcast i8* %425 to i32*
  %427 = load i32, i32* %426, align 4
  %428 = insertelement <4 x i32> %424, i32 %427, i32 1
  %429 = bitcast <4 x i32> %428 to <16 x i8>
  %430 = shufflevector <16 x i8> %429, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %431 = bitcast <16 x i8> %430 to <8 x i16>
  %432 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %431
  %433 = bitcast <2 x i64> %421 to <8 x i16>
  %434 = shufflevector <8 x i16> %414, <8 x i16> %433, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %435 = shufflevector <8 x i16> %431, <8 x i16> %432, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %436 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %434, <8 x i16> %435) #2
  %437 = add <4 x i32> %436, <i32 32, i32 32, i32 32, i32 32>
  %438 = ashr <4 x i32> %437, <i32 6, i32 6, i32 6, i32 6>
  %439 = shufflevector <8 x i16> %414, <8 x i16> %433, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %440 = shufflevector <8 x i16> %431, <8 x i16> %432, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %441 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %439, <8 x i16> %440) #2
  %442 = add <4 x i32> %441, <i32 32, i32 32, i32 32, i32 32>
  %443 = ashr <4 x i32> %442, <i32 6, i32 6, i32 6, i32 6>
  %444 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %438, <4 x i32> %443) #2
  %445 = bitcast <2 x i64> %412 to <8 x i16>
  %446 = sub <8 x i16> %444, %445
  %447 = sub <8 x i16> zeroinitializer, %446
  %448 = icmp slt <8 x i16> %446, zeroinitializer
  %449 = select <8 x i1> %448, <8 x i16> %447, <8 x i16> %446
  %450 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %449, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %451 = add <4 x i32> %450, %401
  %452 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %451, <4 x i32> %451) #2
  %453 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %452, <4 x i32> %452) #2
  br label %454

454:                                              ; preds = %232, %10
  %455 = phi <4 x i32> [ %453, %232 ], [ %231, %10 ]
  %456 = extractelement <4 x i32> %455, i32 0
  ret i32 %456
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad4xh_ssse3(i8*, i32, i8*, i32, i8*, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %98

11:                                               ; preds = %9
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = ptrtoint i8* %2 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = sext i32 %1 to i64
  %22 = sext i32 %3 to i64
  %23 = sext i32 %5 to i64
  %24 = sext i32 %7 to i64
  %25 = shl nsw i32 %1, 1
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %3, 1
  %28 = sext i32 %27 to i64
  %29 = shl nsw i32 %5, 1
  %30 = sext i32 %29 to i64
  %31 = shl nsw i32 %7, 1
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %11, %33
  %34 = phi i8* [ %6, %11 ], [ %95, %33 ]
  %35 = phi i16* [ %20, %11 ], [ %92, %33 ]
  %36 = phi i16* [ %17, %11 ], [ %93, %33 ]
  %37 = phi i16* [ %14, %11 ], [ %94, %33 ]
  %38 = phi i32 [ 0, %11 ], [ %96, %33 ]
  %39 = phi <4 x i32> [ zeroinitializer, %11 ], [ %91, %33 ]
  %40 = bitcast i16* %35 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i16, i16* %35, i64 %21
  %44 = bitcast i16* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> %42, i64 %45, i32 1
  %47 = bitcast i16* %36 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = getelementptr inbounds i16, i16* %36, i64 %22
  %51 = bitcast i16* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> %49, i64 %52, i32 1
  %54 = bitcast i16* %37 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = insertelement <2 x i64> undef, i64 %55, i32 0
  %57 = getelementptr inbounds i16, i16* %37, i64 %23
  %58 = bitcast i16* %57 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> %56, i64 %59, i32 1
  %61 = bitcast i8* %34 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = insertelement <4 x i32> undef, i32 %62, i32 0
  %64 = getelementptr inbounds i8, i8* %34, i64 %24
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = insertelement <4 x i32> %63, i32 %66, i32 1
  %68 = bitcast <4 x i32> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = bitcast <16 x i8> %69 to <8 x i16>
  %71 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <2 x i64> %53 to <8 x i16>
  %73 = bitcast <2 x i64> %60 to <8 x i16>
  %74 = shufflevector <8 x i16> %72, <8 x i16> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = shufflevector <8 x i16> %70, <8 x i16> %71, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %76 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %75) #2
  %77 = add <4 x i32> %76, <i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <4 x i32> %77, <i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <8 x i16> %72, <8 x i16> %73, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %80 = shufflevector <8 x i16> %70, <8 x i16> %71, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %80) #2
  %82 = add <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <4 x i32> %82, <i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %78, <4 x i32> %83) #2
  %85 = bitcast <2 x i64> %46 to <8 x i16>
  %86 = sub <8 x i16> %84, %85
  %87 = sub <8 x i16> zeroinitializer, %86
  %88 = icmp slt <8 x i16> %86, zeroinitializer
  %89 = select <8 x i1> %88, <8 x i16> %87, <8 x i16> %86
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %91 = add <4 x i32> %90, %39
  %92 = getelementptr inbounds i16, i16* %35, i64 %26
  %93 = getelementptr inbounds i16, i16* %36, i64 %28
  %94 = getelementptr inbounds i16, i16* %37, i64 %30
  %95 = getelementptr inbounds i8, i8* %34, i64 %32
  %96 = add nuw nsw i32 %38, 2
  %97 = icmp slt i32 %96, %8
  br i1 %97, label %33, label %98

98:                                               ; preds = %33, %9
  %99 = phi <4 x i32> [ zeroinitializer, %9 ], [ %91, %33 ]
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %99, <4 x i32> %99) #2
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %100) #2
  %102 = extractelement <4 x i32> %101, i32 0
  ret i32 %102
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x4_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %132

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl nsw i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl nsw i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %6, 1
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %18 to i64*
  %30 = load i64, i64* %29, align 2
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds i16, i16* %19, i64 %20
  %33 = bitcast i16* %32 to i64*
  %34 = load i64, i64* %33, align 2
  %35 = insertelement <2 x i64> %31, i64 %34, i32 1
  %36 = inttoptr i64 %15 to i64*
  %37 = load i64, i64* %36, align 2
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %16, i64 %21
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 2
  %42 = insertelement <2 x i64> %38, i64 %41, i32 1
  %43 = inttoptr i64 %12 to i64*
  %44 = load i64, i64* %43, align 2
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = getelementptr inbounds i16, i16* %13, i64 4
  %47 = bitcast i16* %46 to i64*
  %48 = load i64, i64* %47, align 2
  %49 = insertelement <2 x i64> %45, i64 %48, i32 1
  %50 = bitcast i8* %5 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = getelementptr inbounds i8, i8* %5, i64 %22
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %52, i32 %55, i32 1
  %57 = bitcast <4 x i32> %56 to <16 x i8>
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = bitcast <16 x i8> %58 to <8 x i16>
  %60 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %59
  %61 = bitcast <2 x i64> %42 to <8 x i16>
  %62 = bitcast <2 x i64> %49 to <8 x i16>
  %63 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %63, <8 x i16> %64) #2
  %66 = add <4 x i32> %65, <i32 32, i32 32, i32 32, i32 32>
  %67 = ashr <4 x i32> %66, <i32 6, i32 6, i32 6, i32 6>
  %68 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> %69) #2
  %71 = add <4 x i32> %70, <i32 32, i32 32, i32 32, i32 32>
  %72 = ashr <4 x i32> %71, <i32 6, i32 6, i32 6, i32 6>
  %73 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %72) #2
  %74 = bitcast <2 x i64> %35 to <8 x i16>
  %75 = sub <8 x i16> %73, %74
  %76 = sub <8 x i16> zeroinitializer, %75
  %77 = icmp slt <8 x i16> %75, zeroinitializer
  %78 = select <8 x i1> %77, <8 x i16> %76, <8 x i16> %75
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %78, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %80 = getelementptr inbounds i16, i16* %19, i64 %24
  %81 = getelementptr inbounds i16, i16* %16, i64 %26
  %82 = getelementptr inbounds i16, i16* %13, i64 8
  %83 = getelementptr inbounds i8, i8* %5, i64 %28
  %84 = bitcast i16* %80 to i64*
  %85 = load i64, i64* %84, align 2
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = getelementptr inbounds i16, i16* %80, i64 %20
  %88 = bitcast i16* %87 to i64*
  %89 = load i64, i64* %88, align 2
  %90 = insertelement <2 x i64> %86, i64 %89, i32 1
  %91 = bitcast i16* %81 to i64*
  %92 = load i64, i64* %91, align 2
  %93 = insertelement <2 x i64> undef, i64 %92, i32 0
  %94 = getelementptr inbounds i16, i16* %81, i64 %21
  %95 = bitcast i16* %94 to i64*
  %96 = load i64, i64* %95, align 2
  %97 = insertelement <2 x i64> %93, i64 %96, i32 1
  %98 = bitcast i16* %82 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = bitcast i8* %83 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = insertelement <4 x i32> undef, i32 %101, i32 0
  %103 = getelementptr inbounds i8, i8* %83, i64 %22
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = insertelement <4 x i32> %102, i32 %105, i32 1
  %107 = bitcast <4 x i32> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = bitcast <2 x i64> %97 to <8 x i16>
  %112 = shufflevector <8 x i16> %111, <8 x i16> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %113) #2
  %115 = add <4 x i32> %114, <i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <4 x i32> %115, <i32 6, i32 6, i32 6, i32 6>
  %117 = shufflevector <8 x i16> %111, <8 x i16> %99, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %118) #2
  %120 = add <4 x i32> %119, <i32 32, i32 32, i32 32, i32 32>
  %121 = ashr <4 x i32> %120, <i32 6, i32 6, i32 6, i32 6>
  %122 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %116, <4 x i32> %121) #2
  %123 = bitcast <2 x i64> %90 to <8 x i16>
  %124 = sub <8 x i16> %122, %123
  %125 = sub <8 x i16> zeroinitializer, %124
  %126 = icmp slt <8 x i16> %124, zeroinitializer
  %127 = select <8 x i1> %126, <8 x i16> %125, <8 x i16> %124
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %129 = add <4 x i32> %128, %79
  %130 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %129, <4 x i32> %129) #2
  %131 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %130, <4 x i32> %130) #2
  br label %254

132:                                              ; preds = %8
  %133 = ptrtoint i8* %2 to i64
  %134 = shl i64 %133, 1
  %135 = inttoptr i64 %134 to i16*
  %136 = ptrtoint i8* %4 to i64
  %137 = shl i64 %136, 1
  %138 = inttoptr i64 %137 to i16*
  %139 = ptrtoint i8* %0 to i64
  %140 = shl i64 %139, 1
  %141 = inttoptr i64 %140 to i16*
  %142 = sext i32 %1 to i64
  %143 = sext i32 %3 to i64
  %144 = sext i32 %6 to i64
  %145 = shl nsw i32 %1, 1
  %146 = sext i32 %145 to i64
  %147 = shl nsw i32 %3, 1
  %148 = sext i32 %147 to i64
  %149 = shl nsw i32 %6, 1
  %150 = sext i32 %149 to i64
  %151 = inttoptr i64 %140 to i64*
  %152 = load i64, i64* %151, align 2
  %153 = insertelement <2 x i64> undef, i64 %152, i32 0
  %154 = getelementptr inbounds i16, i16* %141, i64 %142
  %155 = bitcast i16* %154 to i64*
  %156 = load i64, i64* %155, align 2
  %157 = insertelement <2 x i64> %153, i64 %156, i32 1
  %158 = inttoptr i64 %137 to i64*
  %159 = load i64, i64* %158, align 2
  %160 = insertelement <2 x i64> undef, i64 %159, i32 0
  %161 = getelementptr inbounds i16, i16* %138, i64 4
  %162 = bitcast i16* %161 to i64*
  %163 = load i64, i64* %162, align 2
  %164 = insertelement <2 x i64> %160, i64 %163, i32 1
  %165 = inttoptr i64 %134 to i64*
  %166 = load i64, i64* %165, align 2
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = getelementptr inbounds i16, i16* %135, i64 %143
  %169 = bitcast i16* %168 to i64*
  %170 = load i64, i64* %169, align 2
  %171 = insertelement <2 x i64> %167, i64 %170, i32 1
  %172 = bitcast i8* %5 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = getelementptr inbounds i8, i8* %5, i64 %144
  %176 = bitcast i8* %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = insertelement <4 x i32> %174, i32 %177, i32 1
  %179 = bitcast <4 x i32> %178 to <16 x i8>
  %180 = shufflevector <16 x i8> %179, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %181 = bitcast <16 x i8> %180 to <8 x i16>
  %182 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %181
  %183 = bitcast <2 x i64> %164 to <8 x i16>
  %184 = bitcast <2 x i64> %171 to <8 x i16>
  %185 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %186 = shufflevector <8 x i16> %181, <8 x i16> %182, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %187 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %185, <8 x i16> %186) #2
  %188 = add <4 x i32> %187, <i32 32, i32 32, i32 32, i32 32>
  %189 = ashr <4 x i32> %188, <i32 6, i32 6, i32 6, i32 6>
  %190 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %191 = shufflevector <8 x i16> %181, <8 x i16> %182, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %190, <8 x i16> %191) #2
  %193 = add <4 x i32> %192, <i32 32, i32 32, i32 32, i32 32>
  %194 = ashr <4 x i32> %193, <i32 6, i32 6, i32 6, i32 6>
  %195 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %189, <4 x i32> %194) #2
  %196 = bitcast <2 x i64> %157 to <8 x i16>
  %197 = sub <8 x i16> %195, %196
  %198 = sub <8 x i16> zeroinitializer, %197
  %199 = icmp slt <8 x i16> %197, zeroinitializer
  %200 = select <8 x i1> %199, <8 x i16> %198, <8 x i16> %197
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %202 = getelementptr inbounds i16, i16* %141, i64 %146
  %203 = getelementptr inbounds i16, i16* %138, i64 8
  %204 = getelementptr inbounds i16, i16* %135, i64 %148
  %205 = getelementptr inbounds i8, i8* %5, i64 %150
  %206 = bitcast i16* %202 to i64*
  %207 = load i64, i64* %206, align 2
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = getelementptr inbounds i16, i16* %202, i64 %142
  %210 = bitcast i16* %209 to i64*
  %211 = load i64, i64* %210, align 2
  %212 = insertelement <2 x i64> %208, i64 %211, i32 1
  %213 = bitcast i16* %203 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2
  %215 = bitcast i16* %204 to i64*
  %216 = load i64, i64* %215, align 2
  %217 = insertelement <2 x i64> undef, i64 %216, i32 0
  %218 = getelementptr inbounds i16, i16* %204, i64 %143
  %219 = bitcast i16* %218 to i64*
  %220 = load i64, i64* %219, align 2
  %221 = insertelement <2 x i64> %217, i64 %220, i32 1
  %222 = bitcast i8* %205 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = insertelement <4 x i32> undef, i32 %223, i32 0
  %225 = getelementptr inbounds i8, i8* %205, i64 %144
  %226 = bitcast i8* %225 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = insertelement <4 x i32> %224, i32 %227, i32 1
  %229 = bitcast <4 x i32> %228 to <16 x i8>
  %230 = shufflevector <16 x i8> %229, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %231 = bitcast <16 x i8> %230 to <8 x i16>
  %232 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %231
  %233 = bitcast <2 x i64> %221 to <8 x i16>
  %234 = shufflevector <8 x i16> %214, <8 x i16> %233, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %235 = shufflevector <8 x i16> %231, <8 x i16> %232, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %236 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %234, <8 x i16> %235) #2
  %237 = add <4 x i32> %236, <i32 32, i32 32, i32 32, i32 32>
  %238 = ashr <4 x i32> %237, <i32 6, i32 6, i32 6, i32 6>
  %239 = shufflevector <8 x i16> %214, <8 x i16> %233, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %240 = shufflevector <8 x i16> %231, <8 x i16> %232, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> %240) #2
  %242 = add <4 x i32> %241, <i32 32, i32 32, i32 32, i32 32>
  %243 = ashr <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %238, <4 x i32> %243) #2
  %245 = bitcast <2 x i64> %212 to <8 x i16>
  %246 = sub <8 x i16> %244, %245
  %247 = sub <8 x i16> zeroinitializer, %246
  %248 = icmp slt <8 x i16> %246, zeroinitializer
  %249 = select <8 x i1> %248, <8 x i16> %247, <8 x i16> %246
  %250 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %251 = add <4 x i32> %250, %201
  %252 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %251, <4 x i32> %251) #2
  %253 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %252, <4 x i32> %252) #2
  br label %254

254:                                              ; preds = %132, %10
  %255 = phi <4 x i32> [ %253, %132 ], [ %131, %10 ]
  %256 = extractelement <4 x i32> %255, i32 0
  ret i32 %256
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x16_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %91

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl nsw i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl nsw i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %6, 1
  %28 = sext i32 %27 to i64
  br label %29

29:                                               ; preds = %29, %10
  %30 = phi i8* [ %5, %10 ], [ %85, %29 ]
  %31 = phi i16* [ %19, %10 ], [ %82, %29 ]
  %32 = phi i16* [ %16, %10 ], [ %83, %29 ]
  %33 = phi i16* [ %13, %10 ], [ %84, %29 ]
  %34 = phi i32 [ 0, %10 ], [ %86, %29 ]
  %35 = phi <4 x i32> [ zeroinitializer, %10 ], [ %81, %29 ]
  %36 = bitcast i16* %31 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %31, i64 %20
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> %38, i64 %41, i32 1
  %43 = bitcast i16* %32 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = getelementptr inbounds i16, i16* %32, i64 %21
  %47 = bitcast i16* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> %45, i64 %48, i32 1
  %50 = bitcast i16* %33 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = bitcast i8* %30 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = insertelement <4 x i32> undef, i32 %53, i32 0
  %55 = getelementptr inbounds i8, i8* %30, i64 %22
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = insertelement <4 x i32> %54, i32 %57, i32 1
  %59 = bitcast <4 x i32> %58 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %61 = bitcast <16 x i8> %60 to <8 x i16>
  %62 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %61
  %63 = bitcast <2 x i64> %49 to <8 x i16>
  %64 = shufflevector <8 x i16> %63, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> %65) #2
  %67 = add <4 x i32> %66, <i32 32, i32 32, i32 32, i32 32>
  %68 = ashr <4 x i32> %67, <i32 6, i32 6, i32 6, i32 6>
  %69 = shufflevector <8 x i16> %63, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> %70) #2
  %72 = add <4 x i32> %71, <i32 32, i32 32, i32 32, i32 32>
  %73 = ashr <4 x i32> %72, <i32 6, i32 6, i32 6, i32 6>
  %74 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %73) #2
  %75 = bitcast <2 x i64> %42 to <8 x i16>
  %76 = sub <8 x i16> %74, %75
  %77 = sub <8 x i16> zeroinitializer, %76
  %78 = icmp slt <8 x i16> %76, zeroinitializer
  %79 = select <8 x i1> %78, <8 x i16> %77, <8 x i16> %76
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %81 = add <4 x i32> %80, %35
  %82 = getelementptr inbounds i16, i16* %31, i64 %24
  %83 = getelementptr inbounds i16, i16* %32, i64 %26
  %84 = getelementptr inbounds i16, i16* %33, i64 8
  %85 = getelementptr inbounds i8, i8* %30, i64 %28
  %86 = add nuw nsw i32 %34, 2
  %87 = icmp ult i32 %86, 16
  br i1 %87, label %29, label %88

88:                                               ; preds = %29
  %89 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %81, <4 x i32> %81) #2
  %90 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %89, <4 x i32> %89) #2
  br label %172

91:                                               ; preds = %8
  %92 = ptrtoint i8* %2 to i64
  %93 = shl i64 %92, 1
  %94 = inttoptr i64 %93 to i16*
  %95 = ptrtoint i8* %4 to i64
  %96 = shl i64 %95, 1
  %97 = inttoptr i64 %96 to i16*
  %98 = ptrtoint i8* %0 to i64
  %99 = shl i64 %98, 1
  %100 = inttoptr i64 %99 to i16*
  %101 = sext i32 %1 to i64
  %102 = sext i32 %3 to i64
  %103 = sext i32 %6 to i64
  %104 = shl nsw i32 %1, 1
  %105 = sext i32 %104 to i64
  %106 = shl nsw i32 %3, 1
  %107 = sext i32 %106 to i64
  %108 = shl nsw i32 %6, 1
  %109 = sext i32 %108 to i64
  br label %110

110:                                              ; preds = %110, %91
  %111 = phi i8* [ %5, %91 ], [ %166, %110 ]
  %112 = phi i16* [ %100, %91 ], [ %163, %110 ]
  %113 = phi i16* [ %97, %91 ], [ %164, %110 ]
  %114 = phi i16* [ %94, %91 ], [ %165, %110 ]
  %115 = phi i32 [ 0, %91 ], [ %167, %110 ]
  %116 = phi <4 x i32> [ zeroinitializer, %91 ], [ %162, %110 ]
  %117 = bitcast i16* %112 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = insertelement <2 x i64> undef, i64 %118, i32 0
  %120 = getelementptr inbounds i16, i16* %112, i64 %101
  %121 = bitcast i16* %120 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = insertelement <2 x i64> %119, i64 %122, i32 1
  %124 = bitcast i16* %113 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 1
  %126 = bitcast i16* %114 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> undef, i64 %127, i32 0
  %129 = getelementptr inbounds i16, i16* %114, i64 %102
  %130 = bitcast i16* %129 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = insertelement <2 x i64> %128, i64 %131, i32 1
  %133 = bitcast i8* %111 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = insertelement <4 x i32> undef, i32 %134, i32 0
  %136 = getelementptr inbounds i8, i8* %111, i64 %103
  %137 = bitcast i8* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = insertelement <4 x i32> %135, i32 %138, i32 1
  %140 = bitcast <4 x i32> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %142
  %144 = bitcast <2 x i64> %132 to <8 x i16>
  %145 = shufflevector <8 x i16> %125, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %142, <8 x i16> %143, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %146) #2
  %148 = add <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = shufflevector <8 x i16> %125, <8 x i16> %144, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = shufflevector <8 x i16> %142, <8 x i16> %143, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %151) #2
  %153 = add <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %154) #2
  %156 = bitcast <2 x i64> %123 to <8 x i16>
  %157 = sub <8 x i16> %155, %156
  %158 = sub <8 x i16> zeroinitializer, %157
  %159 = icmp slt <8 x i16> %157, zeroinitializer
  %160 = select <8 x i1> %159, <8 x i16> %158, <8 x i16> %157
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %160, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %162 = add <4 x i32> %161, %116
  %163 = getelementptr inbounds i16, i16* %112, i64 %105
  %164 = getelementptr inbounds i16, i16* %113, i64 8
  %165 = getelementptr inbounds i16, i16* %114, i64 %107
  %166 = getelementptr inbounds i8, i8* %111, i64 %109
  %167 = add nuw nsw i32 %115, 2
  %168 = icmp ult i32 %167, 16
  br i1 %168, label %110, label %169

169:                                              ; preds = %110
  %170 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %162, <4 x i32> %162) #2
  %171 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %170, <4 x i32> %170) #2
  br label %172

172:                                              ; preds = %169, %88
  %173 = phi <4 x i32> [ %171, %169 ], [ %90, %88 ]
  %174 = extractelement <4 x i32> %173, i32 0
  ret i32 %174
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x4_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %97, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %94, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %95, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %96, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %98, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %93, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 %20
  %95 = getelementptr inbounds i16, i16* %26, i64 %21
  %96 = getelementptr inbounds i16, i16* %27, i64 16
  %97 = getelementptr inbounds i8, i8* %24, i64 %22
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 4
  br i1 %99, label %100, label %23

100:                                              ; preds = %23
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %93, <4 x i32> %93) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %101) #2
  br label %196

103:                                              ; preds = %8
  %104 = ptrtoint i8* %2 to i64
  %105 = shl i64 %104, 1
  %106 = inttoptr i64 %105 to i16*
  %107 = ptrtoint i8* %4 to i64
  %108 = shl i64 %107, 1
  %109 = inttoptr i64 %108 to i16*
  %110 = ptrtoint i8* %0 to i64
  %111 = shl i64 %110, 1
  %112 = inttoptr i64 %111 to i16*
  %113 = sext i32 %1 to i64
  %114 = sext i32 %3 to i64
  %115 = sext i32 %6 to i64
  br label %116

116:                                              ; preds = %116, %103
  %117 = phi i8* [ %5, %103 ], [ %190, %116 ]
  %118 = phi i16* [ %112, %103 ], [ %187, %116 ]
  %119 = phi i16* [ %109, %103 ], [ %188, %116 ]
  %120 = phi i16* [ %106, %103 ], [ %189, %116 ]
  %121 = phi i32 [ 0, %103 ], [ %191, %116 ]
  %122 = phi <4 x i32> [ zeroinitializer, %103 ], [ %186, %116 ]
  %123 = bitcast i16* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = bitcast i16* %119 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = bitcast i16* %120 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = bitcast i8* %117 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %134
  %136 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %137) #2
  %139 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %142) #2
  %144 = add <4 x i32> %143, <i32 32, i32 32, i32 32, i32 32>
  %145 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> %145) #2
  %147 = sub <8 x i16> %146, %124
  %148 = sub <8 x i16> zeroinitializer, %147
  %149 = icmp slt <8 x i16> %147, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %147
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %152 = add <4 x i32> %151, %122
  %153 = getelementptr inbounds i16, i16* %118, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %119, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = getelementptr inbounds i8, i8* %117, i64 8
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %168
  %170 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %171) #2
  %173 = add <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %175 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %176) #2
  %178 = add <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %179 = ashr <4 x i32> %178, <i32 6, i32 6, i32 6, i32 6>
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %179) #2
  %181 = sub <8 x i16> %180, %155
  %182 = sub <8 x i16> zeroinitializer, %181
  %183 = icmp slt <8 x i16> %181, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i16> %182, <8 x i16> %181
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %186 = add <4 x i32> %185, %152
  %187 = getelementptr inbounds i16, i16* %118, i64 %113
  %188 = getelementptr inbounds i16, i16* %119, i64 16
  %189 = getelementptr inbounds i16, i16* %120, i64 %114
  %190 = getelementptr inbounds i8, i8* %117, i64 %115
  %191 = add nuw nsw i32 %121, 1
  %192 = icmp eq i32 %191, 4
  br i1 %192, label %193, label %116

193:                                              ; preds = %116
  %194 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %186, <4 x i32> %186) #2
  %195 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %194, <4 x i32> %194) #2
  br label %196

196:                                              ; preds = %193, %100
  %197 = phi <4 x i32> [ %195, %193 ], [ %102, %100 ]
  %198 = extractelement <4 x i32> %197, i32 0
  ret i32 %198
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x32_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %69

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %63, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %60, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %61, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %62, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %64, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %59, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 %20
  %61 = getelementptr inbounds i16, i16* %26, i64 %21
  %62 = getelementptr inbounds i16, i16* %27, i64 8
  %63 = getelementptr inbounds i8, i8* %24, i64 %22
  %64 = add nuw nsw i32 %28, 1
  %65 = icmp eq i32 %64, 32
  br i1 %65, label %66, label %23

66:                                               ; preds = %23
  %67 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %59, <4 x i32> %59) #2
  %68 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %67, <4 x i32> %67) #2
  br label %128

69:                                               ; preds = %8
  %70 = ptrtoint i8* %2 to i64
  %71 = shl i64 %70, 1
  %72 = inttoptr i64 %71 to i16*
  %73 = ptrtoint i8* %4 to i64
  %74 = shl i64 %73, 1
  %75 = inttoptr i64 %74 to i16*
  %76 = ptrtoint i8* %0 to i64
  %77 = shl i64 %76, 1
  %78 = inttoptr i64 %77 to i16*
  %79 = sext i32 %1 to i64
  %80 = sext i32 %3 to i64
  %81 = sext i32 %6 to i64
  br label %82

82:                                               ; preds = %82, %69
  %83 = phi i8* [ %5, %69 ], [ %122, %82 ]
  %84 = phi i16* [ %78, %69 ], [ %119, %82 ]
  %85 = phi i16* [ %75, %69 ], [ %120, %82 ]
  %86 = phi i16* [ %72, %69 ], [ %121, %82 ]
  %87 = phi i32 [ 0, %69 ], [ %123, %82 ]
  %88 = phi <4 x i32> [ zeroinitializer, %69 ], [ %118, %82 ]
  %89 = bitcast i16* %84 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 1
  %91 = bitcast i16* %85 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = bitcast i16* %86 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 1
  %95 = bitcast i8* %83 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %100
  %102 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %103) #2
  %105 = add <4 x i32> %104, <i32 32, i32 32, i32 32, i32 32>
  %106 = ashr <4 x i32> %105, <i32 6, i32 6, i32 6, i32 6>
  %107 = shufflevector <8 x i16> %92, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %108) #2
  %110 = add <4 x i32> %109, <i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <4 x i32> %110, <i32 6, i32 6, i32 6, i32 6>
  %112 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %106, <4 x i32> %111) #2
  %113 = sub <8 x i16> %112, %90
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = icmp slt <8 x i16> %113, zeroinitializer
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %113
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %118 = add <4 x i32> %117, %88
  %119 = getelementptr inbounds i16, i16* %84, i64 %79
  %120 = getelementptr inbounds i16, i16* %85, i64 8
  %121 = getelementptr inbounds i16, i16* %86, i64 %80
  %122 = getelementptr inbounds i8, i8* %83, i64 %81
  %123 = add nuw nsw i32 %87, 1
  %124 = icmp eq i32 %123, 32
  br i1 %124, label %125, label %82

125:                                              ; preds = %82
  %126 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %118, <4 x i32> %118) #2
  %127 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %126, <4 x i32> %126) #2
  br label %128

128:                                              ; preds = %125, %66
  %129 = phi <4 x i32> [ %127, %125 ], [ %68, %66 ]
  %130 = extractelement <4 x i32> %129, i32 0
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x8_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %171

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %165, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %162, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %163, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %164, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %166, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %161, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 16
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %26, i64 16
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %27, i64 16
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %24, i64 16
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %109
  %111 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %112) #2
  %114 = add <4 x i32> %113, <i32 32, i32 32, i32 32, i32 32>
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = shufflevector <8 x i16> %99, <8 x i16> %102, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %117) #2
  %119 = add <4 x i32> %118, <i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <4 x i32> %119, <i32 6, i32 6, i32 6, i32 6>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %115, <4 x i32> %120) #2
  %122 = sub <8 x i16> %121, %96
  %123 = sub <8 x i16> zeroinitializer, %122
  %124 = icmp slt <8 x i16> %122, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> %122
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %127 = add <4 x i32> %126, %93
  %128 = getelementptr inbounds i16, i16* %25, i64 24
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %26, i64 24
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %27, i64 24
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i8, i8* %24, i64 24
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %142 to <8 x i16>
  %144 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %143
  %145 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %146) #2
  %148 = add <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = shufflevector <8 x i16> %133, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = shufflevector <8 x i16> %143, <8 x i16> %144, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %151) #2
  %153 = add <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %154) #2
  %156 = sub <8 x i16> %155, %130
  %157 = sub <8 x i16> zeroinitializer, %156
  %158 = icmp slt <8 x i16> %156, zeroinitializer
  %159 = select <8 x i1> %158, <8 x i16> %157, <8 x i16> %156
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %161 = add <4 x i32> %160, %127
  %162 = getelementptr inbounds i16, i16* %25, i64 %20
  %163 = getelementptr inbounds i16, i16* %26, i64 %21
  %164 = getelementptr inbounds i16, i16* %27, i64 32
  %165 = getelementptr inbounds i8, i8* %24, i64 %22
  %166 = add nuw nsw i32 %28, 1
  %167 = icmp eq i32 %166, 8
  br i1 %167, label %168, label %23

168:                                              ; preds = %23
  %169 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %161, <4 x i32> %161) #2
  %170 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %169, <4 x i32> %169) #2
  br label %332

171:                                              ; preds = %8
  %172 = ptrtoint i8* %2 to i64
  %173 = shl i64 %172, 1
  %174 = inttoptr i64 %173 to i16*
  %175 = ptrtoint i8* %4 to i64
  %176 = shl i64 %175, 1
  %177 = inttoptr i64 %176 to i16*
  %178 = ptrtoint i8* %0 to i64
  %179 = shl i64 %178, 1
  %180 = inttoptr i64 %179 to i16*
  %181 = sext i32 %1 to i64
  %182 = sext i32 %3 to i64
  %183 = sext i32 %6 to i64
  br label %184

184:                                              ; preds = %184, %171
  %185 = phi i8* [ %5, %171 ], [ %326, %184 ]
  %186 = phi i16* [ %180, %171 ], [ %323, %184 ]
  %187 = phi i16* [ %177, %171 ], [ %324, %184 ]
  %188 = phi i16* [ %174, %171 ], [ %325, %184 ]
  %189 = phi i32 [ 0, %171 ], [ %327, %184 ]
  %190 = phi <4 x i32> [ zeroinitializer, %171 ], [ %322, %184 ]
  %191 = bitcast i16* %186 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = bitcast i16* %187 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = bitcast i16* %188 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = bitcast i8* %185 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = bitcast <16 x i8> %201 to <8 x i16>
  %203 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %202
  %204 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %205) #2
  %207 = add <4 x i32> %206, <i32 32, i32 32, i32 32, i32 32>
  %208 = ashr <4 x i32> %207, <i32 6, i32 6, i32 6, i32 6>
  %209 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %202, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %210) #2
  %212 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %213 = ashr <4 x i32> %212, <i32 6, i32 6, i32 6, i32 6>
  %214 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %208, <4 x i32> %213) #2
  %215 = sub <8 x i16> %214, %192
  %216 = sub <8 x i16> zeroinitializer, %215
  %217 = icmp slt <8 x i16> %215, zeroinitializer
  %218 = select <8 x i1> %217, <8 x i16> %216, <8 x i16> %215
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %218, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %220 = add <4 x i32> %219, %190
  %221 = getelementptr inbounds i16, i16* %186, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = getelementptr inbounds i16, i16* %187, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = getelementptr inbounds i16, i16* %188, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = getelementptr inbounds i8, i8* %185, i64 8
  %231 = bitcast i8* %230 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %236 = bitcast <16 x i8> %235 to <8 x i16>
  %237 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %236
  %238 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> %239) #2
  %241 = add <4 x i32> %240, <i32 32, i32 32, i32 32, i32 32>
  %242 = ashr <4 x i32> %241, <i32 6, i32 6, i32 6, i32 6>
  %243 = shufflevector <8 x i16> %226, <8 x i16> %229, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %244 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> %244) #2
  %246 = add <4 x i32> %245, <i32 32, i32 32, i32 32, i32 32>
  %247 = ashr <4 x i32> %246, <i32 6, i32 6, i32 6, i32 6>
  %248 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %242, <4 x i32> %247) #2
  %249 = sub <8 x i16> %248, %223
  %250 = sub <8 x i16> zeroinitializer, %249
  %251 = icmp slt <8 x i16> %249, zeroinitializer
  %252 = select <8 x i1> %251, <8 x i16> %250, <8 x i16> %249
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %254 = add <4 x i32> %253, %220
  %255 = getelementptr inbounds i16, i16* %186, i64 16
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = getelementptr inbounds i16, i16* %187, i64 16
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = getelementptr inbounds i16, i16* %188, i64 16
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = getelementptr inbounds i8, i8* %185, i64 16
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> undef, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %272, <8 x i16> %273) #2
  %275 = add <4 x i32> %274, <i32 32, i32 32, i32 32, i32 32>
  %276 = ashr <4 x i32> %275, <i32 6, i32 6, i32 6, i32 6>
  %277 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %278 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %277, <8 x i16> %278) #2
  %280 = add <4 x i32> %279, <i32 32, i32 32, i32 32, i32 32>
  %281 = ashr <4 x i32> %280, <i32 6, i32 6, i32 6, i32 6>
  %282 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %276, <4 x i32> %281) #2
  %283 = sub <8 x i16> %282, %257
  %284 = sub <8 x i16> zeroinitializer, %283
  %285 = icmp slt <8 x i16> %283, zeroinitializer
  %286 = select <8 x i1> %285, <8 x i16> %284, <8 x i16> %283
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %288 = add <4 x i32> %287, %254
  %289 = getelementptr inbounds i16, i16* %186, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = getelementptr inbounds i16, i16* %187, i64 24
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 1
  %295 = getelementptr inbounds i16, i16* %188, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = getelementptr inbounds i8, i8* %185, i64 24
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 1
  %301 = insertelement <2 x i64> undef, i64 %300, i32 0
  %302 = bitcast <2 x i64> %301 to <16 x i8>
  %303 = shufflevector <16 x i8> %302, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %304 = bitcast <16 x i8> %303 to <8 x i16>
  %305 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %304
  %306 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %307 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> %307) #2
  %309 = add <4 x i32> %308, <i32 32, i32 32, i32 32, i32 32>
  %310 = ashr <4 x i32> %309, <i32 6, i32 6, i32 6, i32 6>
  %311 = shufflevector <8 x i16> %294, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = shufflevector <8 x i16> %304, <8 x i16> %305, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %311, <8 x i16> %312) #2
  %314 = add <4 x i32> %313, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %310, <4 x i32> %315) #2
  %317 = sub <8 x i16> %316, %291
  %318 = sub <8 x i16> zeroinitializer, %317
  %319 = icmp slt <8 x i16> %317, zeroinitializer
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> %317
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %322 = add <4 x i32> %321, %288
  %323 = getelementptr inbounds i16, i16* %186, i64 %181
  %324 = getelementptr inbounds i16, i16* %187, i64 32
  %325 = getelementptr inbounds i16, i16* %188, i64 %182
  %326 = getelementptr inbounds i8, i8* %185, i64 %183
  %327 = add nuw nsw i32 %189, 1
  %328 = icmp eq i32 %327, 8
  br i1 %328, label %329, label %184

329:                                              ; preds = %184
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %322, <4 x i32> %322) #2
  %331 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %330, <4 x i32> %330) #2
  br label %332

332:                                              ; preds = %329, %168
  %333 = phi <4 x i32> [ %331, %329 ], [ %170, %168 ]
  %334 = extractelement <4 x i32> %333, i32 0
  ret i32 %334
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x64_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %97, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %94, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %95, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %96, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %98, %23 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %93, %23 ]
  %30 = bitcast i16* %25 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast i16* %26 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = bitcast i16* %27 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = bitcast i8* %24 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %41
  %43 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %44) #2
  %46 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %47 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %48 = shufflevector <8 x i16> %33, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = shufflevector <8 x i16> %41, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %52) #2
  %54 = sub <8 x i16> %53, %31
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %59 = add <4 x i32> %58, %29
  %60 = getelementptr inbounds i16, i16* %25, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %26, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %27, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %24, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %75
  %77 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <4 x i32> %80, <i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i16> %65, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %75, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %83) #2
  %85 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %86 = ashr <4 x i32> %85, <i32 6, i32 6, i32 6, i32 6>
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %81, <4 x i32> %86) #2
  %88 = sub <8 x i16> %87, %62
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %93 = add <4 x i32> %92, %59
  %94 = getelementptr inbounds i16, i16* %25, i64 %20
  %95 = getelementptr inbounds i16, i16* %26, i64 %21
  %96 = getelementptr inbounds i16, i16* %27, i64 16
  %97 = getelementptr inbounds i8, i8* %24, i64 %22
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 64
  br i1 %99, label %100, label %23

100:                                              ; preds = %23
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %93, <4 x i32> %93) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %101) #2
  br label %196

103:                                              ; preds = %8
  %104 = ptrtoint i8* %2 to i64
  %105 = shl i64 %104, 1
  %106 = inttoptr i64 %105 to i16*
  %107 = ptrtoint i8* %4 to i64
  %108 = shl i64 %107, 1
  %109 = inttoptr i64 %108 to i16*
  %110 = ptrtoint i8* %0 to i64
  %111 = shl i64 %110, 1
  %112 = inttoptr i64 %111 to i16*
  %113 = sext i32 %1 to i64
  %114 = sext i32 %3 to i64
  %115 = sext i32 %6 to i64
  br label %116

116:                                              ; preds = %116, %103
  %117 = phi i8* [ %5, %103 ], [ %190, %116 ]
  %118 = phi i16* [ %112, %103 ], [ %187, %116 ]
  %119 = phi i16* [ %109, %103 ], [ %188, %116 ]
  %120 = phi i16* [ %106, %103 ], [ %189, %116 ]
  %121 = phi i32 [ 0, %103 ], [ %191, %116 ]
  %122 = phi <4 x i32> [ zeroinitializer, %103 ], [ %186, %116 ]
  %123 = bitcast i16* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = bitcast i16* %119 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = bitcast i16* %120 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = bitcast i8* %117 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %134
  %136 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %137) #2
  %139 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %128, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %134, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %142) #2
  %144 = add <4 x i32> %143, <i32 32, i32 32, i32 32, i32 32>
  %145 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> %145) #2
  %147 = sub <8 x i16> %146, %124
  %148 = sub <8 x i16> zeroinitializer, %147
  %149 = icmp slt <8 x i16> %147, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %147
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %152 = add <4 x i32> %151, %122
  %153 = getelementptr inbounds i16, i16* %118, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %119, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = getelementptr inbounds i8, i8* %117, i64 8
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %168
  %170 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %171) #2
  %173 = add <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %175 = shufflevector <8 x i16> %158, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %168, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %176) #2
  %178 = add <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %179 = ashr <4 x i32> %178, <i32 6, i32 6, i32 6, i32 6>
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %179) #2
  %181 = sub <8 x i16> %180, %155
  %182 = sub <8 x i16> zeroinitializer, %181
  %183 = icmp slt <8 x i16> %181, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i16> %182, <8 x i16> %181
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %186 = add <4 x i32> %185, %152
  %187 = getelementptr inbounds i16, i16* %118, i64 %113
  %188 = getelementptr inbounds i16, i16* %119, i64 16
  %189 = getelementptr inbounds i16, i16* %120, i64 %114
  %190 = getelementptr inbounds i8, i8* %117, i64 %115
  %191 = add nuw nsw i32 %121, 1
  %192 = icmp eq i32 %191, 64
  br i1 %192, label %193, label %116

193:                                              ; preds = %116
  %194 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %186, <4 x i32> %186) #2
  %195 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %194, <4 x i32> %194) #2
  br label %196

196:                                              ; preds = %193, %100
  %197 = phi <4 x i32> [ %195, %193 ], [ %102, %100 ]
  %198 = extractelement <4 x i32> %197, i32 0
  ret i32 %198
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x16_ssse3(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %69, %10
  %24 = phi i8* [ %5, %10 ], [ %73, %69 ]
  %25 = phi i16* [ %19, %10 ], [ %70, %69 ]
  %26 = phi i16* [ %16, %10 ], [ %71, %69 ]
  %27 = phi i16* [ %13, %10 ], [ %72, %69 ]
  %28 = phi i32 [ 0, %10 ], [ %74, %69 ]
  %29 = phi <4 x i32> [ zeroinitializer, %10 ], [ %66, %69 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %67, %30 ], [ 0, %23 ]
  %32 = phi <4 x i32> [ %66, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %48
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %51) #2
  %53 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = shufflevector <8 x i16> %48, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %56) #2
  %58 = add <4 x i32> %57, <i32 32, i32 32, i32 32, i32 32>
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %59) #2
  %61 = sub <8 x i16> %60, %35
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %66 = add <4 x i32> %65, %32
  %67 = add nuw nsw i64 %31, 8
  %68 = icmp ult i64 %67, 64
  br i1 %68, label %30, label %69

69:                                               ; preds = %30
  %70 = getelementptr inbounds i16, i16* %25, i64 %20
  %71 = getelementptr inbounds i16, i16* %26, i64 %21
  %72 = getelementptr inbounds i16, i16* %27, i64 64
  %73 = getelementptr inbounds i8, i8* %24, i64 %22
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp eq i32 %74, 16
  br i1 %75, label %76, label %23

76:                                               ; preds = %69
  %77 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %66, <4 x i32> %66) #2
  %78 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %77, <4 x i32> %77) #2
  br label %148

79:                                               ; preds = %8
  %80 = ptrtoint i8* %2 to i64
  %81 = shl i64 %80, 1
  %82 = inttoptr i64 %81 to i16*
  %83 = ptrtoint i8* %4 to i64
  %84 = shl i64 %83, 1
  %85 = inttoptr i64 %84 to i16*
  %86 = ptrtoint i8* %0 to i64
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = sext i32 %1 to i64
  %90 = sext i32 %3 to i64
  %91 = sext i32 %6 to i64
  br label %92

92:                                               ; preds = %138, %79
  %93 = phi i8* [ %5, %79 ], [ %142, %138 ]
  %94 = phi i16* [ %88, %79 ], [ %139, %138 ]
  %95 = phi i16* [ %85, %79 ], [ %140, %138 ]
  %96 = phi i16* [ %82, %79 ], [ %141, %138 ]
  %97 = phi i32 [ 0, %79 ], [ %143, %138 ]
  %98 = phi <4 x i32> [ zeroinitializer, %79 ], [ %135, %138 ]
  br label %99

99:                                               ; preds = %99, %92
  %100 = phi i64 [ %136, %99 ], [ 0, %92 ]
  %101 = phi <4 x i32> [ %135, %99 ], [ %98, %92 ]
  %102 = getelementptr inbounds i16, i16* %94, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %95, i64 %100
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %96, i64 %100
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %93, i64 %100
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %117
  %119 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %120) #2
  %122 = add <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = shufflevector <8 x i16> %107, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %125) #2
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %128) #2
  %130 = sub <8 x i16> %129, %104
  %131 = sub <8 x i16> zeroinitializer, %130
  %132 = icmp slt <8 x i16> %130, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %130
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %135 = add <4 x i32> %134, %101
  %136 = add nuw nsw i64 %100, 8
  %137 = icmp ult i64 %136, 64
  br i1 %137, label %99, label %138

138:                                              ; preds = %99
  %139 = getelementptr inbounds i16, i16* %94, i64 %89
  %140 = getelementptr inbounds i16, i16* %95, i64 64
  %141 = getelementptr inbounds i16, i16* %96, i64 %90
  %142 = getelementptr inbounds i8, i8* %93, i64 %91
  %143 = add nuw nsw i32 %97, 1
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %145, label %92

145:                                              ; preds = %138
  %146 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #2
  %147 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %146, <4 x i32> %146) #2
  br label %148

148:                                              ; preds = %145, %76
  %149 = phi <4 x i32> [ %147, %145 ], [ %78, %76 ]
  %150 = extractelement <4 x i32> %149, i32 0
  ret i32 %150
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
