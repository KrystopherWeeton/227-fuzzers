; ModuleID = '../../third_party/blink/renderer/platform/text/text_break_iterator_internal_icu.cc'
source_filename = "../../third_party/blink/renderer/platform/text/text_break_iterator_internal_icu.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::InstanceStorage" }
%"class.WTF::StaticSingleton<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::InstanceStorage" = type { [24 x i8] }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@_ZZN5blinkL10UILanguageEvE8s_locale = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blinkL10UILanguageEvE8s_locale = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5blink21CurrentSearchLocaleIDEv() local_unnamed_addr #0 {
  %1 = tail call fastcc i8* @_ZN5blinkL10UILanguageEv()
  ret i8* %1
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @_ZN5blinkL10UILanguageEv() unnamed_addr #0 {
  %1 = alloca %"class.WTF::AtomicString", align 8
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blinkL10UILanguageEvE8s_locale to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %28, !prof !2

4:                                                ; preds = %0
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blinkL10UILanguageEvE8s_locale) #4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.WTF::AtomicString"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #4
  %9 = tail call %"class.WTF::StringImpl"* @_ZN5blink15DefaultLanguageEv() #4
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  call void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* sret bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blinkL10UILanguageEvE8s_locale to %"class.std::__1::basic_string"*), %"class.WTF::String"* nonnull %11) #4
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #4
  br label %27

27:                                               ; preds = %7, %23, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #4
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blinkL10UILanguageEvE8s_locale) #4
  br label %28

28:                                               ; preds = %4, %27, %0
  %29 = load i8, i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blinkL10UILanguageEvE8s_locale, i64 0, i32 0, i32 0, i64 23), align 1
  %30 = icmp slt i8 %29, 0
  %31 = load i8*, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blinkL10UILanguageEvE8s_locale to i8**), align 8
  %32 = select i1 %30, i8* %31, i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blinkL10UILanguageEvE8s_locale, i64 0, i32 0, i32 0, i64 0)
  ret i8* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5blink24CurrentTextBreakLocaleIDEv() local_unnamed_addr #0 {
  %1 = tail call fastcc i8* @_ZN5blinkL10UILanguageEv()
  ret i8* %1
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink15DefaultLanguageEv() local_unnamed_addr #3

declare void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
