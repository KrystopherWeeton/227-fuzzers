; ModuleID = '../../sandbox/linux/services/resource_limits.cc'
source_filename = "../../sandbox/linux/services/resource_limits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.rlimit = type { i64, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7sandbox14ResourceLimits5LowerEim(i32, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.rlimit, align 8
  %4 = alloca %struct.rlimit, align 8
  %5 = bitcast %struct.rlimit* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false) #5
  %6 = call i32 @getrlimit64(i32 %0, %struct.rlimit* nonnull %3) #5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = tail call i32* @__errno_location() #6
  %10 = load i32, i32* %9, align 4
  br label %30

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i64 0, i32 0
  %13 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i64 0, i32 1
  %14 = bitcast %struct.rlimit* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %15 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 1
  %17 = load i64, i64* %12, align 8
  %18 = icmp ugt i64 %17, %1
  %19 = select i1 %18, i64 %1, i64 %17
  store i64 %19, i64* %15, align 8
  %20 = load i64, i64* %13, align 8
  %21 = icmp ugt i64 %20, %1
  %22 = select i1 %21, i64 %1, i64 %20
  store i64 %22, i64* %16, align 8
  %23 = call i32 @setrlimit64(i32 %0, %struct.rlimit* nonnull %4) #5
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %11
  %26 = tail call i32* @__errno_location() #6
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %25, %11
  %29 = phi i32 [ %27, %25 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  br label %30

30:                                               ; preds = %8, %28
  %31 = phi i32 [ %10, %8 ], [ %29, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7sandbox14ResourceLimits22LowerSoftAndHardLimitsEimm(i32, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.rlimit, align 8
  %5 = alloca %struct.rlimit, align 8
  %6 = bitcast %struct.rlimit* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = bitcast %struct.rlimit* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = call i32 @getrlimit64(i32 %0, %struct.rlimit* nonnull %4) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = tail call i32* @__errno_location() #6
  %12 = load i32, i32* %11, align 4
  br label %32

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 0
  %15 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 1
  %16 = bitcast %struct.rlimit* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #5
  %17 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %5, i64 0, i32 0
  %18 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %5, i64 0, i32 1
  %19 = load i64, i64* %14, align 8
  %20 = icmp ugt i64 %19, %1
  %21 = select i1 %20, i64 %1, i64 %19
  store i64 %21, i64* %17, align 8
  %22 = load i64, i64* %15, align 8
  %23 = icmp ugt i64 %22, %2
  %24 = select i1 %23, i64 %2, i64 %22
  store i64 %24, i64* %18, align 8
  %25 = call i32 @setrlimit64(i32 %0, %struct.rlimit* nonnull %5) #5
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %13
  %28 = tail call i32* @__errno_location() #6
  %29 = load i32, i32* %28, align 4
  br label %30

30:                                               ; preds = %13, %27
  %31 = phi i32 [ %29, %27 ], [ 0, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #5
  br label %32

32:                                               ; preds = %30, %10
  %33 = phi i32 [ %12, %10 ], [ %31, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret i32 %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @getrlimit64(i32, %struct.rlimit*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @setrlimit64(i32, %struct.rlimit*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7sandbox14ResourceLimits13AdjustCurrentEix(i32, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.rlimit, align 8
  %4 = alloca %struct.rlimit, align 8
  %5 = bitcast %struct.rlimit* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5
  %6 = bitcast %struct.rlimit* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @getrlimit64(i32 %0, %struct.rlimit* nonnull %3) #5
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = tail call i32* @__errno_location() #6
  %11 = load i32, i32* %10, align 4
  br label %38

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i64 0, i32 0
  %14 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i64 0, i32 1
  %15 = load i64, i64* %13, align 8
  %16 = zext i64 %15 to i65
  %17 = sext i64 %1 to i65
  %18 = call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %16, i65 %17) #5
  %19 = extractvalue { i65, i1 } %18, 1
  %20 = extractvalue { i65, i1 } %18, 0
  %21 = trunc i65 %20 to i64
  %22 = icmp slt i65 %20, 0
  %23 = or i1 %19, %22
  %24 = load i64, i64* %14, align 8
  %25 = select i1 %23, i64 %24, i64 %21, !prof !2
  %26 = bitcast %struct.rlimit* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #5
  %27 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 0
  %28 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i64 0, i32 1
  %29 = icmp ult i64 %24, %25
  %30 = select i1 %29, i64 %24, i64 %25
  store i64 %30, i64* %27, align 8
  store i64 %24, i64* %28, align 8
  %31 = call i32 @setrlimit64(i32 %0, %struct.rlimit* nonnull %4) #5
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %12
  %34 = tail call i32* @__errno_location() #6
  %35 = load i32, i32* %34, align 4
  br label %36

36:                                               ; preds = %12, %33
  %37 = phi i32 [ %35, %33 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #5
  br label %38

38:                                               ; preds = %36, %9
  %39 = phi i32 [ %11, %9 ], [ %37, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5
  ret i32 %39
}

; Function Attrs: nounwind readnone speculatable
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
