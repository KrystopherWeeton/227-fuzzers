; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/pcm16b/pcm16b.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/pcm16b/pcm16b.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @WebRtcPcm16b_Encode(i16* nocapture readonly, i64, i8* nocapture) local_unnamed_addr #0 {
  %4 = bitcast i16* %0 to i8*
  %5 = ptrtoint i8* %2 to i64
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %135, label %7

7:                                                ; preds = %3
  %8 = icmp ult i64 %1, 8
  br i1 %8, label %92, label %9

9:                                                ; preds = %7
  %10 = add i64 %1, -1
  %11 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 2)
  %12 = extractvalue { i64, i1 } %11, 0
  %13 = extractvalue { i64, i1 } %11, 1
  %14 = xor i64 %5, -1
  %15 = icmp ugt i64 %12, %14
  %16 = or i1 %15, %13
  %17 = getelementptr i8, i8* %2, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 2)
  %20 = extractvalue { i64, i1 } %19, 0
  %21 = extractvalue { i64, i1 } %19, 1
  %22 = xor i64 %18, -1
  %23 = icmp ugt i64 %20, %22
  %24 = or i1 %23, %21
  %25 = or i1 %16, %24
  br i1 %25, label %92, label %26

26:                                               ; preds = %9
  %27 = shl i64 %1, 1
  %28 = getelementptr i8, i8* %2, i64 %27
  %29 = getelementptr i16, i16* %0, i64 %1
  %30 = bitcast i16* %29 to i8*
  %31 = icmp ugt i8* %30, %2
  %32 = icmp ugt i8* %28, %4
  %33 = and i1 %31, %32
  br i1 %33, label %92, label %34

34:                                               ; preds = %26
  %35 = and i64 %1, -8
  %36 = add i64 %35, -8
  %37 = lshr exact i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %74, label %41

41:                                               ; preds = %34
  %42 = sub nuw nsw i64 %38, %39
  %43 = getelementptr inbounds i8, i8* %2, i64 -1
  %44 = getelementptr inbounds i8, i8* %2, i64 -1
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ 0, %41 ], [ %71, %45 ]
  %47 = phi i64 [ %42, %41 ], [ %72, %45 ]
  %48 = getelementptr inbounds i16, i16* %0, i64 %46
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !2
  %51 = lshr <8 x i16> %50, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %52 = trunc <8 x i16> %51 to <8 x i8>
  %53 = shl i64 %46, 1
  %54 = trunc <8 x i16> %50 to <8 x i8>
  %55 = or i64 %53, 1
  %56 = getelementptr inbounds i8, i8* %43, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = shufflevector <8 x i8> %52, <8 x i8> %54, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %58, <16 x i8>* %57, align 1
  %59 = or i64 %46, 8
  %60 = getelementptr inbounds i16, i16* %0, i64 %59
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !2
  %63 = lshr <8 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = trunc <8 x i16> %63 to <8 x i8>
  %65 = shl i64 %59, 1
  %66 = trunc <8 x i16> %62 to <8 x i8>
  %67 = or i64 %65, 1
  %68 = getelementptr inbounds i8, i8* %44, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = shufflevector <8 x i8> %64, <8 x i8> %66, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %70, <16 x i8>* %69, align 1
  %71 = add i64 %46, 16
  %72 = add i64 %47, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %45, !llvm.loop !5

74:                                               ; preds = %45, %34
  %75 = phi i64 [ 0, %34 ], [ %71, %45 ]
  %76 = icmp eq i64 %39, 0
  br i1 %76, label %90, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds i16, i16* %0, i64 %75
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !2
  %81 = lshr <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %82 = trunc <8 x i16> %81 to <8 x i8>
  %83 = shl i64 %75, 1
  %84 = trunc <8 x i16> %80 to <8 x i8>
  %85 = or i64 %83, 1
  %86 = getelementptr inbounds i8, i8* %2, i64 -1
  %87 = getelementptr inbounds i8, i8* %86, i64 %85
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = shufflevector <8 x i8> %82, <8 x i8> %84, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i8> %89, <16 x i8>* %88, align 1
  br label %90

90:                                               ; preds = %74, %77
  %91 = icmp eq i64 %35, %1
  br i1 %91, label %135, label %92

92:                                               ; preds = %90, %26, %9, %7
  %93 = phi i64 [ 0, %26 ], [ 0, %9 ], [ 0, %7 ], [ %35, %90 ]
  %94 = xor i64 %93, -1
  %95 = and i64 %1, 1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %108, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds i16, i16* %0, i64 %93
  %99 = load i16, i16* %98, align 2
  %100 = lshr i16 %99, 8
  %101 = trunc i16 %100 to i8
  %102 = shl i64 %93, 1
  %103 = getelementptr inbounds i8, i8* %2, i64 %102
  store i8 %101, i8* %103, align 1
  %104 = trunc i16 %99 to i8
  %105 = or i64 %102, 1
  %106 = getelementptr inbounds i8, i8* %2, i64 %105
  store i8 %104, i8* %106, align 1
  %107 = or i64 %93, 1
  br label %108

108:                                              ; preds = %92, %97
  %109 = phi i64 [ %93, %92 ], [ %107, %97 ]
  %110 = sub i64 0, %1
  %111 = icmp eq i64 %94, %110
  br i1 %111, label %135, label %112

112:                                              ; preds = %108, %112
  %113 = phi i64 [ %133, %112 ], [ %109, %108 ]
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = lshr i16 %115, 8
  %117 = trunc i16 %116 to i8
  %118 = shl i64 %113, 1
  %119 = getelementptr inbounds i8, i8* %2, i64 %118
  store i8 %117, i8* %119, align 1
  %120 = trunc i16 %115 to i8
  %121 = or i64 %118, 1
  %122 = getelementptr inbounds i8, i8* %2, i64 %121
  store i8 %120, i8* %122, align 1
  %123 = add nuw i64 %113, 1
  %124 = getelementptr inbounds i16, i16* %0, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = lshr i16 %125, 8
  %127 = trunc i16 %126 to i8
  %128 = shl i64 %123, 1
  %129 = getelementptr inbounds i8, i8* %2, i64 %128
  store i8 %127, i8* %129, align 1
  %130 = trunc i16 %125 to i8
  %131 = or i64 %128, 1
  %132 = getelementptr inbounds i8, i8* %2, i64 %131
  store i8 %130, i8* %132, align 1
  %133 = add nuw i64 %113, 2
  %134 = icmp eq i64 %133, %1
  br i1 %134, label %135, label %112, !llvm.loop !7

135:                                              ; preds = %108, %112, %90, %3
  %136 = shl i64 %1, 1
  ret i64 %136
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @WebRtcPcm16b_Decode(i8* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %4 = bitcast i16* %2 to i8*
  %5 = lshr i64 %1, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %123, label %7

7:                                                ; preds = %3
  %8 = icmp ult i64 %1, 16
  br i1 %8, label %75, label %9

9:                                                ; preds = %7
  %10 = getelementptr i16, i16* %2, i64 %5
  %11 = bitcast i16* %10 to i8*
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %0, i64 %12
  %14 = icmp ugt i8* %13, %4
  %15 = icmp ugt i8* %11, %0
  %16 = and i1 %14, %15
  br i1 %16, label %75, label %17

17:                                               ; preds = %9
  %18 = and i64 %5, 9223372036854775800
  %19 = add nsw i64 %18, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %57, label %24

24:                                               ; preds = %17
  %25 = sub nuw nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %54, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %55, %26 ]
  %29 = shl nuw i64 %27, 1
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %34 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %35 = zext <8 x i8> %33 to <8 x i16>
  %36 = shl nuw <8 x i16> %35, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = zext <8 x i8> %34 to <8 x i16>
  %38 = or <8 x i16> %36, %37
  %39 = getelementptr inbounds i16, i16* %2, i64 %27
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %40, align 2, !alias.scope !8, !noalias !11
  %41 = or i64 %27, 8
  %42 = shl nuw i64 %41, 1
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = shufflevector <16 x i8> %45, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %47 = shufflevector <16 x i8> %45, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %48 = zext <8 x i8> %46 to <8 x i16>
  %49 = shl nuw <8 x i16> %48, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %50 = zext <8 x i8> %47 to <8 x i16>
  %51 = or <8 x i16> %49, %50
  %52 = getelementptr inbounds i16, i16* %2, i64 %41
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 2, !alias.scope !8, !noalias !11
  %54 = add i64 %27, 16
  %55 = add i64 %28, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %26, !llvm.loop !13

57:                                               ; preds = %26, %17
  %58 = phi i64 [ 0, %17 ], [ %54, %26 ]
  %59 = icmp eq i64 %22, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %57
  %61 = shl nuw i64 %58, 1
  %62 = getelementptr inbounds i8, i8* %0, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %67 = zext <8 x i8> %65 to <8 x i16>
  %68 = shl nuw <8 x i16> %67, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %69 = zext <8 x i8> %66 to <8 x i16>
  %70 = or <8 x i16> %68, %69
  %71 = getelementptr inbounds i16, i16* %2, i64 %58
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !8, !noalias !11
  br label %73

73:                                               ; preds = %57, %60
  %74 = icmp eq i64 %5, %18
  br i1 %74, label %123, label %75

75:                                               ; preds = %73, %9, %7
  %76 = phi i64 [ 0, %9 ], [ 0, %7 ], [ %18, %73 ]
  %77 = and i64 %1, 2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = shl nuw i64 %76, 1
  %81 = getelementptr inbounds i8, i8* %0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = shl nuw i16 %83, 8
  %85 = or i64 %80, 1
  %86 = getelementptr inbounds i8, i8* %0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = or i16 %84, %88
  %90 = getelementptr inbounds i16, i16* %2, i64 %76
  store i16 %89, i16* %90, align 2
  %91 = or i64 %76, 1
  br label %92

92:                                               ; preds = %75, %79
  %93 = phi i64 [ %76, %75 ], [ %91, %79 ]
  %94 = or i64 %76, 1
  %95 = icmp eq i64 %5, %94
  br i1 %95, label %123, label %96

96:                                               ; preds = %92, %96
  %97 = phi i64 [ %121, %96 ], [ %93, %92 ]
  %98 = shl nuw i64 %97, 1
  %99 = getelementptr inbounds i8, i8* %0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  %102 = shl nuw i16 %101, 8
  %103 = or i64 %98, 1
  %104 = getelementptr inbounds i8, i8* %0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = or i16 %102, %106
  %108 = getelementptr inbounds i16, i16* %2, i64 %97
  store i16 %107, i16* %108, align 2
  %109 = add nuw nsw i64 %97, 1
  %110 = shl nuw i64 %109, 1
  %111 = getelementptr inbounds i8, i8* %0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = shl nuw i16 %113, 8
  %115 = or i64 %110, 1
  %116 = getelementptr inbounds i8, i8* %0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i16
  %119 = or i16 %114, %118
  %120 = getelementptr inbounds i16, i16* %2, i64 %109
  store i16 %119, i16* %120, align 2
  %121 = add nuw nsw i64 %97, 2
  %122 = icmp eq i64 %121, %5
  br i1 %122, label %123, label %96, !llvm.loop !14

123:                                              ; preds = %92, %96, %73, %3
  ret i64 %5
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !6}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !6}
