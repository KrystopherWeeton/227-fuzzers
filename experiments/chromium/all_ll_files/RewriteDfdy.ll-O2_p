; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteDfdy.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteDfdy.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::SpecConst" = type <{ i32 (...)**, %"class.sh::TSymbolTable"*, i64, %"class.angle::BitSetT", [4 x i8] }>
%"class.sh::DriverUniform" = type { i32 (...)**, %"class.sh::TVariable"*, %"class.sh::TType"* }
%"class.sh::(anonymous namespace)::Traverser" = type <{ %"class.sh::TIntermTraverser", %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*, i8, [7 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.135", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.142", %"class.std::__1::vector.149", %"class.sh::TVector.31", %"class.std::__1::vector.156" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.137" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.163", i8, [7 x i8] }>
%"class.sh::TVector.163" = type { %"class.std::__1::vector.164" }
%"class.std::__1::vector.164" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { i32*, i32*, %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@_ZTVN2sh12_GLOBAL__N_19TraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*)* @_ZN2sh12_GLOBAL__N_19TraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh12_GLOBAL__N_19Traverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"10B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 2, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE, i32 0, i32 0, i32 0) }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11RewriteDfdyEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"*, i64, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) local_unnamed_addr #0 {
  %8 = alloca %"class.sh::(anonymous namespace)::Traverser", align 8
  %9 = icmp slt i32 %4, 300
  br i1 %9, label %25, label %10

10:                                               ; preds = %7
  %11 = bitcast %"class.sh::(anonymous namespace)::Traverser"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 176, i1 false) #5
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %12, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %3) #5
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 1
  store %"class.sh::SpecConst"* %5, %"class.sh::SpecConst"** %14, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 2
  store %"class.sh::DriverUniform"* %6, %"class.sh::DriverUniform"** %15, align 8
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 3
  %17 = lshr i64 %1, 52
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 8
  %20 = bitcast %"class.sh::TIntermNode"* %2 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %21 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %21, i64 2
  %23 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %22, align 8
  call void %23(%"class.sh::TIntermNode"* %2, %"class.sh::TIntermTraverser"* nonnull %12) #5
  %24 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %12, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %2) #5
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %11) #5
  br label %25

25:                                               ; preds = %7, %10
  %26 = phi i1 [ %24, %10 ], [ true, %7 ]
  ret i1 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19TraverserD0Ev(%"class.sh::(anonymous namespace)::Traverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_19Traverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector.31", align 8
  %5 = alloca %"class.sh::TVector.163", align 8
  %6 = alloca %"class.sh::TVector.163", align 8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %2, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 8
  br i1 %9, label %364, label %12

12:                                               ; preds = %3
  switch i8 %11, label %414 [
    i8 112, label %13
    i8 113, label %19
  ]

13:                                               ; preds = %12
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %15 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %14, align 8
  %16 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdxEv(%"class.sh::SpecConst"* %15) #5
  %17 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %14, align 8
  %18 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdxEv(%"class.sh::SpecConst"* %17) #5
  br label %25

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %21 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %20, align 8
  %22 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdyEv(%"class.sh::SpecConst"* %21) #5
  %23 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %20, align 8
  %24 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdyEv(%"class.sh::SpecConst"* %23) #5
  br label %25

25:                                               ; preds = %19, %13
  %26 = phi %"class.sh::TIntermTyped"* [ %18, %13 ], [ %24, %19 ]
  %27 = phi %"class.sh::TIntermTyped"* [ %16, %13 ], [ %22, %19 ]
  %28 = icmp eq %"class.sh::TIntermTyped"* %27, null
  br i1 %28, label %29, label %317

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 2
  %31 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %30, align 8
  %32 = bitcast %"class.sh::DriverUniform"* %31 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %33 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %33, i64 2
  %35 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %34, align 8
  %36 = tail call %"class.sh::TIntermBinary"* %35(%"class.sh::DriverUniform"* %31) #5
  %37 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %30, align 8
  %39 = bitcast %"class.sh::DriverUniform"* %38 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %40 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %39, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %40, i64 4
  %42 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %41, align 8
  %43 = tail call %"class.sh::TIntermBinary"* %42(%"class.sh::DriverUniform"* %38) #5
  %44 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = load i8, i8* %10, align 8
  %46 = icmp ne i8 %45, 112
  %47 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %48 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %47, i64 240) #5
  %49 = bitcast i8* %48 to %"class.sh::TIntermBinary"*
  %50 = zext i1 %46 to i32
  %51 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %50) #5
  %52 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %51, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %49, i8 zeroext 44, %"class.sh::TIntermTyped"* %44, %"class.sh::TIntermTyped"* %52) #5
  %53 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %54 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %53, i64 240) #5
  %55 = bitcast i8* %54 to %"class.sh::TIntermBinary"*
  %56 = bitcast i8* %48 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %55, i8 zeroext 15, %"class.sh::TIntermTyped"* %37, %"class.sh::TIntermTyped"* %56) #5
  %57 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %58 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %57, i64 32) #5
  %59 = bitcast i8* %58 to %"class.sh::TIntermSymbol"*
  %60 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  %61 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 8
  %62 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %61, align 8
  %63 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %62, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #5
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %59, %"class.sh::TVariable"* %63) #5
  %64 = bitcast %"class.sh::TVector.31"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #5
  %65 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 24, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %58, i64 24
  %69 = bitcast i8* %68 to %"class.sh::TVariable"**
  %70 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %69, align 8
  %71 = bitcast i8* %54 to %"class.sh::TIntermTyped"*
  %72 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %70, %"class.sh::TIntermTyped"* %71) #5
  %73 = ptrtoint %"class.sh::TIntermDeclaration"* %72 to i64
  %74 = bitcast %"class.sh::TIntermNode"*** %66 to i64*
  %75 = bitcast %"class.sh::TVector.31"* %4 to i64*
  %76 = bitcast %"class.sh::TIntermNode"*** %67 to i64*
  %77 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %78 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %77, i64 8) #5
  %79 = bitcast i8* %78 to %"class.sh::TIntermNode"**
  %80 = getelementptr inbounds i8, i8* %78, i64 8
  %81 = ptrtoint i8* %80 to i64
  %82 = bitcast i8* %78 to i64*
  store i64 %73, i64* %82, align 8
  %83 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %65, align 8
  %84 = ptrtoint %"class.sh::TIntermNode"** %83 to i64
  %85 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %86 = bitcast %"class.sh::TIntermNode"** %85 to i8*
  %87 = icmp eq %"class.sh::TIntermNode"** %85, %83
  br i1 %87, label %261, label %88

88:                                               ; preds = %29
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 -1
  %90 = ptrtoint %"class.sh::TIntermNode"** %89 to i64
  %91 = sub i64 %90, %84
  %92 = lshr i64 %91, 3
  %93 = add nuw nsw i64 %92, 1
  %94 = icmp ult i64 %93, 4
  br i1 %94, label %191, label %95

95:                                               ; preds = %88
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 -1
  %97 = ptrtoint %"class.sh::TIntermNode"** %96 to i64
  %98 = sub i64 %97, %84
  %99 = lshr i64 %98, 3
  %100 = and i64 %98, -8
  %101 = xor i64 %100, -8
  %102 = getelementptr i8, i8* %78, i64 %101
  %103 = xor i64 %99, -1
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 %103
  %105 = bitcast %"class.sh::TIntermNode"** %104 to i8*
  %106 = icmp ult i8* %102, %86
  %107 = icmp ugt i8* %78, %105
  %108 = and i1 %106, %107
  br i1 %108, label %191, label %109

109:                                              ; preds = %95
  %110 = and i64 %93, 4611686018427387900
  %111 = sub nsw i64 0, %110
  %112 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 %111
  %113 = sub nsw i64 0, %110
  %114 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 %113
  %115 = add nsw i64 %110, -4
  %116 = lshr exact i64 %115, 2
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 1
  %119 = icmp eq i64 %115, 0
  br i1 %119, label %168, label %120

120:                                              ; preds = %109
  %121 = sub nuw nsw i64 %117, %118
  %122 = getelementptr i8, i8* %78, i64 -8
  %123 = bitcast i8* %122 to %"class.sh::TIntermNode"**
  %124 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 -1
  %125 = getelementptr i8, i8* %78, i64 -8
  %126 = bitcast i8* %125 to %"class.sh::TIntermNode"**
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 -1
  br label %128

128:                                              ; preds = %128, %120
  %129 = phi i64 [ 0, %120 ], [ %163, %128 ]
  %130 = phi i64 [ %121, %120 ], [ %164, %128 ]
  %131 = sub i64 0, %129
  %132 = sub i64 0, %129
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 %131
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 %132
  %135 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 -1
  %136 = bitcast %"class.sh::TIntermNode"** %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !3
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 -2
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 -1
  %140 = bitcast %"class.sh::TIntermNode"** %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8, !alias.scope !3
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %143, align 8, !alias.scope !6, !noalias !3
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 -2
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %146 = bitcast %"class.sh::TIntermNode"** %145 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %146, align 8, !alias.scope !6, !noalias !3
  %147 = sub nuw nsw i64 -4, %129
  %148 = sub nuw nsw i64 -4, %129
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 %147
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 %148
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -1
  %152 = bitcast %"class.sh::TIntermNode"** %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !3
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -2
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %154, i64 -1
  %156 = bitcast %"class.sh::TIntermNode"** %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 8, !alias.scope !3
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %159 = bitcast %"class.sh::TIntermNode"** %158 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %159, align 8, !alias.scope !6, !noalias !3
  %160 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -2
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %162 = bitcast %"class.sh::TIntermNode"** %161 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %162, align 8, !alias.scope !6, !noalias !3
  %163 = add i64 %129, 8
  %164 = add i64 %130, -2
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %128, !llvm.loop !8

166:                                              ; preds = %128
  %167 = sub nuw nsw i64 -8, %129
  br label %168

168:                                              ; preds = %166, %109
  %169 = phi i64 [ 0, %109 ], [ %167, %166 ]
  %170 = icmp eq i64 %118, 0
  br i1 %170, label %189, label %171

171:                                              ; preds = %168
  %172 = getelementptr i8, i8* %78, i64 -8
  %173 = bitcast i8* %172 to %"class.sh::TIntermNode"**
  %174 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 -1
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 %169
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %174, i64 %169
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !3
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -2
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -1
  %182 = bitcast %"class.sh::TIntermNode"** %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !3
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %185 = bitcast %"class.sh::TIntermNode"** %184 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %185, align 8, !alias.scope !6, !noalias !3
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -2
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -1
  %188 = bitcast %"class.sh::TIntermNode"** %187 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %188, align 8, !alias.scope !6, !noalias !3
  br label %189

189:                                              ; preds = %168, %171
  %190 = icmp eq i64 %93, %110
  br i1 %190, label %261, label %191

191:                                              ; preds = %189, %95, %88
  %192 = phi %"class.sh::TIntermNode"** [ %79, %95 ], [ %79, %88 ], [ %112, %189 ]
  %193 = phi %"class.sh::TIntermNode"** [ %85, %95 ], [ %85, %88 ], [ %114, %189 ]
  %194 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -1
  %195 = ptrtoint %"class.sh::TIntermNode"** %194 to i64
  %196 = sub i64 %195, %84
  %197 = lshr i64 %196, 3
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 7
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %212, label %201

201:                                              ; preds = %191, %201
  %202 = phi %"class.sh::TIntermNode"** [ %205, %201 ], [ %192, %191 ]
  %203 = phi %"class.sh::TIntermNode"** [ %206, %201 ], [ %193, %191 ]
  %204 = phi i64 [ %210, %201 ], [ %199, %191 ]
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %202, i64 -1
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -1
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = add i64 %204, -1
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %201, !llvm.loop !10

212:                                              ; preds = %201, %191
  %213 = phi %"class.sh::TIntermNode"** [ undef, %191 ], [ %205, %201 ]
  %214 = phi %"class.sh::TIntermNode"** [ %192, %191 ], [ %205, %201 ]
  %215 = phi %"class.sh::TIntermNode"** [ %193, %191 ], [ %206, %201 ]
  %216 = icmp ult i64 %196, 56
  br i1 %216, label %261, label %217

217:                                              ; preds = %212, %217
  %218 = phi %"class.sh::TIntermNode"** [ %255, %217 ], [ %214, %212 ]
  %219 = phi %"class.sh::TIntermNode"** [ %256, %217 ], [ %215, %212 ]
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -1
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -2
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -2
  %227 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -3
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -3
  %232 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -4
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -4
  %237 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -5
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -5
  %242 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -6
  %246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -6
  %247 = bitcast %"class.sh::TIntermNode"** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -7
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -7
  %252 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.sh::TIntermNode"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -8
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -8
  %257 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.sh::TIntermNode"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = icmp eq %"class.sh::TIntermNode"** %256, %83
  br i1 %260, label %261, label %217, !llvm.loop !12

261:                                              ; preds = %212, %217, %189, %29
  %262 = phi %"class.sh::TIntermNode"** [ %79, %29 ], [ %112, %189 ], [ %213, %212 ], [ %255, %217 ]
  %263 = ptrtoint %"class.sh::TIntermNode"** %262 to i64
  store i64 %263, i64* %75, align 8
  store i64 %81, i64* %74, align 8
  store i64 %81, i64* %76, align 8
  call void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"* %60, %"class.sh::TVector.31"* nonnull dereferenceable(24) %4) #5
  %264 = bitcast %"class.sh::TVector.163"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %264) #5
  %265 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %5, i64 0, i32 0, i32 0, i32 0
  %266 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %5, i64 0, i32 0, i32 0, i32 1
  %267 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %268 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %269 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %268, i64 4) #5
  %270 = bitcast i8* %269 to i32*
  %271 = bitcast %"class.sh::TVector.163"* %5 to i8**
  store i8* %269, i8** %271, align 8
  %272 = getelementptr inbounds i8, i8* %269, i64 4
  %273 = bitcast i32** %267 to i8**
  store i8* %272, i8** %273, align 8
  store i32 0, i32* %270, align 4
  %274 = bitcast i32** %266 to i64*
  %275 = ptrtoint i8* %272 to i64
  store i64 %275, i64* %274, align 8
  %276 = bitcast %"class.sh::TVector.163"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %276) #5
  %277 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %6, i64 0, i32 0, i32 0, i32 0
  %278 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %6, i64 0, i32 0, i32 0, i32 1
  %279 = getelementptr inbounds %"class.sh::TVector.163", %"class.sh::TVector.163"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %280 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %281 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %280, i64 4) #5
  %282 = bitcast i8* %281 to i32*
  %283 = bitcast %"class.sh::TVector.163"* %6 to i8**
  store i8* %281, i8** %283, align 8
  %284 = getelementptr inbounds i8, i8* %281, i64 4
  %285 = bitcast i32** %279 to i8**
  store i8* %284, i8** %285, align 8
  store i32 1, i32* %282, align 4
  %286 = bitcast i32** %278 to i64*
  %287 = ptrtoint i8* %284 to i64
  store i64 %287, i64* %286, align 8
  %288 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %289 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %288, i64 248) #5
  %290 = bitcast i8* %289 to %"class.sh::TIntermSwizzle"*
  %291 = bitcast i8* %58 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %290, %"class.sh::TIntermTyped"* %291, %"class.sh::TVector.163"* nonnull dereferenceable(24) %5) #5
  %292 = bitcast i8* %289 to %"class.sh::TIntermTyped"*
  %293 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %294 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %293, i64 248) #5
  %295 = bitcast i8* %294 to %"class.sh::TIntermSwizzle"*
  %296 = bitcast i8* %58 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %297 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %296, align 8
  %298 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %297, i64 23
  %299 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %298, align 8
  %300 = call %"class.sh::TIntermTyped"* %299(%"class.sh::TIntermSymbol"* %59) #5
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %295, %"class.sh::TIntermTyped"* %300, %"class.sh::TVector.163"* nonnull dereferenceable(24) %6) #5
  %301 = bitcast i8* %294 to %"class.sh::TIntermTyped"*
  %302 = load i32*, i32** %277, align 8
  %303 = icmp eq i32* %302, null
  br i1 %303, label %306, label %304

304:                                              ; preds = %261
  %305 = ptrtoint i32* %302 to i64
  store i64 %305, i64* %286, align 8
  br label %306

306:                                              ; preds = %304, %261
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %276) #5
  %307 = load i32*, i32** %265, align 8
  %308 = icmp eq i32* %307, null
  br i1 %308, label %311, label %309

309:                                              ; preds = %306
  %310 = ptrtoint i32* %307 to i64
  store i64 %310, i64* %274, align 8
  br label %311

311:                                              ; preds = %309, %306
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %264) #5
  %312 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %65, align 8
  %313 = icmp eq %"class.sh::TIntermNode"** %312, null
  br i1 %313, label %316, label %314

314:                                              ; preds = %311
  %315 = ptrtoint %"class.sh::TIntermNode"** %312 to i64
  store i64 %315, i64* %74, align 8
  br label %316

316:                                              ; preds = %314, %311
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #5
  br label %317

317:                                              ; preds = %316, %25
  %318 = phi %"class.sh::TIntermTyped"* [ %26, %25 ], [ %301, %316 ]
  %319 = phi %"class.sh::TIntermTyped"* [ %27, %25 ], [ %292, %316 ]
  %320 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %2, i64 0, i32 1
  %321 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %320, align 8
  %322 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %323 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %322, i64 240) #5
  %324 = bitcast i8* %323 to %"class.sh::TIntermUnary"*
  %325 = bitcast %"class.sh::TIntermTyped"* %321 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %326 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %325, align 8
  %327 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %326, i64 23
  %328 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %327, align 8
  %329 = call %"class.sh::TIntermTyped"* %328(%"class.sh::TIntermTyped"* %321) #5
  %330 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %2, i64 0, i32 3
  %331 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %330, align 8
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %324, i8 zeroext 112, %"class.sh::TIntermTyped"* %329, %"class.sh::TFunction"* %331) #5
  %332 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %333 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %332, i64 240) #5
  %334 = bitcast i8* %333 to %"class.sh::TIntermUnary"*
  %335 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %325, align 8
  %336 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %335, i64 23
  %337 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %336, align 8
  %338 = call %"class.sh::TIntermTyped"* %337(%"class.sh::TIntermTyped"* %321) #5
  %339 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %330, align 8
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %334, i8 zeroext 113, %"class.sh::TIntermTyped"* %338, %"class.sh::TFunction"* %339) #5
  %340 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %2, i64 0, i32 0, i32 0
  %341 = bitcast %"class.sh::TIntermUnary"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %342 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %341, align 8
  %343 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %342, i64 31
  %344 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %343, align 8
  %345 = call dereferenceable(184) %"class.sh::TType"* %344(%"class.sh::TIntermExpression"* %340) #5
  %346 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %345) #5
  %347 = icmp eq i64 %346, 1
  %348 = select i1 %347, i8 15, i8 31
  %349 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %350 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %349, i64 240) #5
  %351 = bitcast i8* %350 to %"class.sh::TIntermBinary"*
  %352 = bitcast i8* %323 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %351, i8 zeroext %348, %"class.sh::TIntermTyped"* %352, %"class.sh::TIntermTyped"* %319) #5
  %353 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %354 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %353, i64 240) #5
  %355 = bitcast i8* %354 to %"class.sh::TIntermBinary"*
  %356 = bitcast i8* %333 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %355, i8 zeroext %348, %"class.sh::TIntermTyped"* %356, %"class.sh::TIntermTyped"* %318) #5
  %357 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %358 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %357, i64 240) #5
  %359 = bitcast i8* %358 to %"class.sh::TIntermBinary"*
  %360 = bitcast i8* %350 to %"class.sh::TIntermTyped"*
  %361 = bitcast i8* %354 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %359, i8 zeroext 13, %"class.sh::TIntermTyped"* %360, %"class.sh::TIntermTyped"* %361) #5
  %362 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  %363 = bitcast i8* %358 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %362, %"class.sh::TIntermNode"* %363, i32 1) #5
  br label %414

364:                                              ; preds = %3
  %365 = icmp eq i8 %11, 113
  br i1 %365, label %366, label %414

366:                                              ; preds = %364
  %367 = bitcast %"class.sh::TIntermUnary"* %2 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)***
  %368 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)*** %367, align 8
  %369 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)** %368, i64 23
  %370 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermUnary"*)** %369, align 8
  %371 = tail call %"class.sh::TIntermTyped"* %370(%"class.sh::TIntermUnary"* %2) #5
  %372 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %371, i64 0, i32 0
  %373 = bitcast %"class.sh::TIntermTyped"* %371 to %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)***
  %374 = load %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*** %373, align 8
  %375 = getelementptr inbounds %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)** %374, i64 14
  %376 = load %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)** %375, align 8
  %377 = tail call %"class.sh::TIntermUnary"* %376(%"class.sh::TIntermNode"* %372) #5
  %378 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %2, i64 0, i32 0, i32 0
  %379 = bitcast %"class.sh::TIntermUnary"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %380 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %379, align 8
  %381 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %380, i64 31
  %382 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %381, align 8
  %383 = tail call dereferenceable(184) %"class.sh::TType"* %382(%"class.sh::TIntermExpression"* %378) #5
  %384 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %383) #5
  %385 = icmp eq i64 %384, 1
  %386 = select i1 %385, i8 15, i8 31
  %387 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %388 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %387, align 8
  %389 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst8getFlipYEv(%"class.sh::SpecConst"* %388) #5
  %390 = icmp eq %"class.sh::TIntermTyped"* %389, null
  br i1 %390, label %391, label %406

391:                                              ; preds = %366
  %392 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 2
  %393 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %392, align 8
  %394 = bitcast %"class.sh::DriverUniform"* %393 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %395 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %394, align 8
  %396 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %395, i64 2
  %397 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %396, align 8
  %398 = tail call %"class.sh::TIntermBinary"* %397(%"class.sh::DriverUniform"* %393) #5
  %399 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %398, i64 0, i32 0, i32 0, i32 0
  %400 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %401 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %400, i64 240) #5
  %402 = bitcast i8* %401 to %"class.sh::TIntermBinary"*
  %403 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 1) #5
  %404 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %403, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %402, i8 zeroext 44, %"class.sh::TIntermTyped"* %399, %"class.sh::TIntermTyped"* %404) #5
  %405 = bitcast i8* %401 to %"class.sh::TIntermTyped"*
  br label %406

406:                                              ; preds = %391, %366
  %407 = phi %"class.sh::TIntermTyped"* [ %389, %366 ], [ %405, %391 ]
  %408 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %409 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %408, i64 240) #5
  %410 = bitcast i8* %409 to %"class.sh::TIntermBinary"*
  %411 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %377, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %410, i8 zeroext %386, %"class.sh::TIntermTyped"* %411, %"class.sh::TIntermTyped"* %407) #5
  %412 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  %413 = bitcast i8* %409 to %"class.sh::TIntermNode"*
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %412, %"class.sh::TIntermNode"* %413, i32 1) #5
  br label %414

414:                                              ; preds = %406, %364, %317, %12
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdxEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdxEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdyEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdyEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"*, %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.163"* dereferenceable(24)) unnamed_addr #2

declare void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #2

declare i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst8getFlipYEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
