; ModuleID = '../../ppapi/shared_impl/array_var.cc'
source_filename = "../../ppapi/shared_impl/array_var.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ppapi::ArrayVar" = type { %"class.ppapi::Var", %"class.std::__1::vector" }
%"class.ppapi::Var" = type { i32 (...)**, %"class.base::RefCounted", i32 }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"*, %"class.std::__1::__compressed_pair" }
%"class.ppapi::ScopedPPVar" = type { %struct.PP_Var }
%struct.PP_Var = type { i32, i32, %union.PP_VarValue }
%union.PP_VarValue = type { double }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ppapi::ScopedPPVar"* }
%"class.ppapi::PpapiGlobals" = type { i32 (...)**, %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type opaque
%"class.ppapi::VarTracker" = type { i32 (...)**, %"class.std::__1::unordered_map", i32, %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.17", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3", %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.base::ThreadChecker"* }
%"class.base::ThreadChecker" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.ppapi::StringVar" = type { %"class.ppapi::Var", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.ppapi::ArrayBufferVar" = type { %"class.ppapi::Var" }
%"class.ppapi::V8ObjectVar" = type opaque
%"class.ppapi::ProxyObjectVar" = type opaque
%"class.ppapi::DictionaryVar" = type opaque
%"class.ppapi::ResourceVar" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN5ppapi11ScopedPPVarENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZTVN5ppapi8ArrayVarE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (%"class.ppapi::StringVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var11AsStringVarEv to i8*), i8* bitcast (%"class.ppapi::ArrayBufferVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var16AsArrayBufferVarEv to i8*), i8* bitcast (%"class.ppapi::V8ObjectVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var13AsV8ObjectVarEv to i8*), i8* bitcast (%"class.ppapi::ProxyObjectVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var16AsProxyObjectVarEv to i8*), i8* bitcast (%"class.ppapi::ArrayVar"* (%"class.ppapi::ArrayVar"*)* @_ZN5ppapi8ArrayVar10AsArrayVarEv to i8*), i8* bitcast (%"class.ppapi::DictionaryVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var15AsDictionaryVarEv to i8*), i8* bitcast (%"class.ppapi::ResourceVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var13AsResourceVarEv to i8*), i8* bitcast (i32 (%"class.ppapi::ArrayVar"*)* @_ZNK5ppapi8ArrayVar7GetTypeEv to i8*), i8* bitcast (void (%"class.ppapi::ArrayVar"*)* @_ZN5ppapi8ArrayVarD2Ev to i8*), i8* bitcast (void (%"class.ppapi::ArrayVar"*)* @_ZN5ppapi8ArrayVarD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [37 x i8] c"../../ppapi/shared_impl/array_var.cc\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"false\00", align 1

@_ZN5ppapi8ArrayVarC1Ev = hidden unnamed_addr alias void (%"class.ppapi::ArrayVar"*), void (%"class.ppapi::ArrayVar"*)* @_ZN5ppapi8ArrayVarC2Ev
@_ZN5ppapi8ArrayVarD1Ev = hidden unnamed_addr alias void (%"class.ppapi::ArrayVar"*), void (%"class.ppapi::ArrayVar"*)* @_ZN5ppapi8ArrayVarD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi8ArrayVarC2Ev(%"class.ppapi::ArrayVar"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0
  tail call void @_ZN5ppapi3VarC2Ev(%"class.ppapi::Var"* %2) #9
  %3 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5ppapi8ArrayVarE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #9
  ret void
}

declare void @_ZN5ppapi3VarC2Ev(%"class.ppapi::Var"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi8ArrayVarD2Ev(%"class.ppapi::ArrayVar"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5ppapi8ArrayVarE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %4, align 8
  %6 = icmp eq %"class.ppapi::ScopedPPVar"* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.ppapi::ScopedPPVar"* %5 to i8*
  %9 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %9, align 8
  %11 = icmp eq %"class.ppapi::ScopedPPVar"* %10, %5
  br i1 %11, label %19, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.ppapi::ScopedPPVar"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"* %14) #9
  %15 = icmp eq %"class.ppapi::ScopedPPVar"* %14, %5
  br i1 %15, label %16, label %12

16:                                               ; preds = %12
  %17 = bitcast %"class.std::__1::vector"* %3 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i8* [ %18, %16 ], [ %8, %7 ]
  store %"class.ppapi::ScopedPPVar"* %5, %"class.ppapi::ScopedPPVar"** %9, align 8
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %1, %19
  %22 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0
  tail call void @_ZN5ppapi3VarD2Ev(%"class.ppapi::Var"* %22) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5ppapi3VarD2Ev(%"class.ppapi::Var"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi8ArrayVarD0Ev(%"class.ppapi::ArrayVar"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5ppapi8ArrayVarE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %4, align 8
  %6 = icmp eq %"class.ppapi::ScopedPPVar"* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.ppapi::ScopedPPVar"* %5 to i8*
  %9 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %9, align 8
  %11 = icmp eq %"class.ppapi::ScopedPPVar"* %10, %5
  br i1 %11, label %19, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.ppapi::ScopedPPVar"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"* %14) #9
  %15 = icmp eq %"class.ppapi::ScopedPPVar"* %14, %5
  br i1 %15, label %16, label %12

16:                                               ; preds = %12
  %17 = bitcast %"class.std::__1::vector"* %3 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i8* [ %18, %16 ], [ %8, %7 ]
  store %"class.ppapi::ScopedPPVar"* %5, %"class.ppapi::ScopedPPVar"** %9, align 8
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %1, %19
  %22 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 0
  tail call void @_ZN5ppapi3VarD2Ev(%"class.ppapi::Var"* %22) #9
  %23 = bitcast %"class.ppapi::ArrayVar"* %0 to i8*
  tail call void @_ZdlPv(i8* %23) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ppapi::ArrayVar"* @_ZN5ppapi8ArrayVar9FromPPVarERK6PP_Var(%struct.PP_Var* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 7
  br i1 %4, label %5, label %33

5:                                                ; preds = %1
  %6 = tail call %"class.ppapi::PpapiGlobals"* @_ZN5ppapi12PpapiGlobals3GetEv() #9
  %7 = bitcast %"class.ppapi::PpapiGlobals"* %6 to %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)***
  %8 = load %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)**, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)** %8, i64 3
  %10 = load %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)** %9, align 8
  %11 = tail call %"class.ppapi::VarTracker"* %10(%"class.ppapi::PpapiGlobals"* %6) #9
  %12 = tail call %"class.ppapi::Var"* @_ZNK5ppapi10VarTracker6GetVarERK6PP_Var(%"class.ppapi::VarTracker"* %11, %struct.PP_Var* dereferenceable(16) %0) #9
  %13 = icmp eq %"class.ppapi::Var"* %12, null
  br i1 %13, label %33, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.ppapi::Var", %"class.ppapi::Var"* %12, i64 0, i32 1, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %15) #9
  %16 = bitcast %"class.ppapi::Var"* %12 to %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)***
  %17 = load %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)**, %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)*, %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)** %17, i64 4
  %19 = load %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)*, %"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)** %18, align 8
  %20 = tail call %"class.ppapi::ArrayVar"* %19(%"class.ppapi::Var"* nonnull %12) #9
  %21 = getelementptr inbounds %"class.ppapi::Var", %"class.ppapi::Var"* %12, i64 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %22) #9
  %23 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %33

26:                                               ; preds = %14
  %27 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 -2
  %28 = bitcast %"class.base::RefCounted"* %27 to %"class.ppapi::Var"*
  %29 = bitcast %"class.base::RefCounted"* %27 to void (%"class.ppapi::Var"*)***
  %30 = load void (%"class.ppapi::Var"*)**, void (%"class.ppapi::Var"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.ppapi::Var"*)*, void (%"class.ppapi::Var"*)** %30, i64 9
  %32 = load void (%"class.ppapi::Var"*)*, void (%"class.ppapi::Var"*)** %31, align 8
  tail call void %32(%"class.ppapi::Var"* nonnull %28) #9
  br label %33

33:                                               ; preds = %5, %26, %14, %1
  %34 = phi %"class.ppapi::ArrayVar"* [ null, %1 ], [ %20, %14 ], [ %20, %26 ], [ null, %5 ]
  ret %"class.ppapi::ArrayVar"* %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.ppapi::PpapiGlobals"* @_ZN5ppapi12PpapiGlobals3GetEv() local_unnamed_addr #1

declare %"class.ppapi::Var"* @_ZNK5ppapi10VarTracker6GetVarERK6PP_Var(%"class.ppapi::VarTracker"*, %struct.PP_Var* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.ppapi::ArrayVar"* @_ZN5ppapi8ArrayVar10AsArrayVarEv(%"class.ppapi::ArrayVar"* readnone returned) unnamed_addr #5 align 2 {
  ret %"class.ppapi::ArrayVar"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK5ppapi8ArrayVar7GetTypeEv(%"class.ppapi::ArrayVar"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 7
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5ppapi8ArrayVar3GetEj(%"class.ppapi::ArrayVar"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.ppapi::ScopedPPVar"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 4
  %12 = icmp ugt i64 %11, %3
  %13 = inttoptr i64 %9 to %"class.ppapi::ScopedPPVar"*
  br i1 %12, label %14, label %29

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 %3, i32 0
  %16 = tail call %"class.ppapi::PpapiGlobals"* @_ZN5ppapi12PpapiGlobals3GetEv() #9
  %17 = bitcast %"class.ppapi::PpapiGlobals"* %16 to %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)***
  %18 = load %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)**, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)** %18, i64 3
  %20 = load %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)*, %"class.ppapi::VarTracker"* (%"class.ppapi::PpapiGlobals"*)** %19, align 8
  %21 = tail call %"class.ppapi::VarTracker"* %20(%"class.ppapi::PpapiGlobals"* %16) #9
  %22 = tail call zeroext i1 @_ZN5ppapi10VarTracker9AddRefVarERK6PP_Var(%"class.ppapi::VarTracker"* %21, %struct.PP_Var* dereferenceable(16) %15) #9
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = bitcast %struct.PP_Var* %15 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 %3, i32 0, i32 2
  %27 = bitcast %union.PP_VarValue* %26 to i64*
  %28 = load i64, i64* %27, align 8
  br label %29

29:                                               ; preds = %14, %2, %23
  %30 = phi i64 [ %25, %23 ], [ 0, %2 ], [ 0, %14 ]
  %31 = phi i64 [ %28, %23 ], [ -6148914694099828736, %2 ], [ -6148914694099828736, %14 ]
  %32 = insertvalue { i64, i64 } undef, i64 %30, 0
  %33 = insertvalue { i64, i64 } %32, i64 %31, 1
  ret { i64, i64 } %33
}

declare zeroext i1 @_ZN5ppapi10VarTracker9AddRefVarERK6PP_Var(%"class.ppapi::VarTracker"*, %struct.PP_Var* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5ppapi8ArrayVar3SetEjRK6PP_Var(%"class.ppapi::ArrayVar"*, i32, %struct.PP_Var* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, -1
  br i1 %4, label %39, label %5

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast %"class.ppapi::ScopedPPVar"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %14, %6
  br i1 %15, label %34, label %16

16:                                               ; preds = %5
  %17 = add nuw i32 %1, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i64 %14, %18
  %20 = inttoptr i64 %12 to %"class.ppapi::ScopedPPVar"*
  %21 = inttoptr i64 %10 to %"class.ppapi::ScopedPPVar"*
  br i1 %19, label %22, label %24

22:                                               ; preds = %16
  %23 = sub nsw i64 %18, %14
  tail call void @_ZNSt3__16vectorIN5ppapi11ScopedPPVarENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %7, i64 %23) #9
  br label %34

24:                                               ; preds = %16
  %25 = icmp ugt i64 %14, %18
  br i1 %25, label %26, label %34

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %20, i64 %18
  %28 = icmp eq %"class.ppapi::ScopedPPVar"* %27, %21
  br i1 %28, label %33, label %29

29:                                               ; preds = %26, %29
  %30 = phi %"class.ppapi::ScopedPPVar"* [ %31, %29 ], [ %21, %26 ]
  %31 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %30, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"* %31) #9
  %32 = icmp eq %"class.ppapi::ScopedPPVar"* %31, %27
  br i1 %32, label %33, label %29

33:                                               ; preds = %29, %26
  store %"class.ppapi::ScopedPPVar"* %27, %"class.ppapi::ScopedPPVar"** %8, align 8
  br label %34

34:                                               ; preds = %33, %24, %22, %5
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %36 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %35, align 8
  %37 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %36, i64 %6
  %38 = tail call dereferenceable(16) %"class.ppapi::ScopedPPVar"* @_ZN5ppapi11ScopedPPVaraSERK6PP_Var(%"class.ppapi::ScopedPPVar"* %37, %struct.PP_Var* dereferenceable(16) %2) #9
  br label %39

39:                                               ; preds = %3, %34
  %40 = phi i32 [ 1, %34 ], [ 0, %3 ]
  ret i32 %40
}

declare dereferenceable(16) %"class.ppapi::ScopedPPVar"* @_ZN5ppapi11ScopedPPVaraSERK6PP_Var(%"class.ppapi::ScopedPPVar"*, %struct.PP_Var* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5ppapi8ArrayVar9GetLengthEv(%"class.ppapi::ArrayVar"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = bitcast %"class.ppapi::ScopedPPVar"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ugt i64 %10, 4294967295
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #9
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #9
  br label %17

15:                                               ; preds = %1
  %16 = trunc i64 %10 to i32
  br label %17

17:                                               ; preds = %15, %12
  %18 = phi i32 [ 0, %12 ], [ %16, %15 ]
  ret i32 %18
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5ppapi8ArrayVar9SetLengthEj(%"class.ppapi::ArrayVar"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %"class.ppapi::ArrayVar", %"class.ppapi::ArrayVar"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.ppapi::ScopedPPVar"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 4
  %12 = icmp ult i64 %11, %4
  %13 = inttoptr i64 %9 to %"class.ppapi::ScopedPPVar"*
  %14 = inttoptr i64 %7 to %"class.ppapi::ScopedPPVar"*
  br i1 %12, label %15, label %17

15:                                               ; preds = %2
  %16 = sub nsw i64 %4, %11
  tail call void @_ZNSt3__16vectorIN5ppapi11ScopedPPVarENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %3, i64 %16) #9
  br label %27

17:                                               ; preds = %2
  %18 = icmp ugt i64 %11, %4
  br i1 %18, label %19, label %27

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 %4
  %21 = icmp eq %"class.ppapi::ScopedPPVar"* %20, %14
  br i1 %21, label %26, label %22

22:                                               ; preds = %19, %22
  %23 = phi %"class.ppapi::ScopedPPVar"* [ %24, %22 ], [ %14, %19 ]
  %24 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %23, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"* %24) #9
  %25 = icmp eq %"class.ppapi::ScopedPPVar"* %24, %20
  br i1 %25, label %26, label %22

26:                                               ; preds = %22, %19
  store %"class.ppapi::ScopedPPVar"* %20, %"class.ppapi::ScopedPPVar"** %5, align 8
  br label %27

27:                                               ; preds = %15, %17, %26
  ret i32 1
}

declare %"class.ppapi::StringVar"* @_ZN5ppapi3Var11AsStringVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ArrayBufferVar"* @_ZN5ppapi3Var16AsArrayBufferVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::V8ObjectVar"* @_ZN5ppapi3Var13AsV8ObjectVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ProxyObjectVar"* @_ZN5ppapi3Var16AsProxyObjectVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::DictionaryVar"* @_ZN5ppapi3Var15AsDictionaryVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ResourceVar"* @_ZN5ppapi3Var13AsResourceVarEv(%"class.ppapi::Var"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"*) unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN5ppapi11ScopedPPVarENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.ppapi::ScopedPPVar"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.ppapi::ScopedPPVar"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.ppapi::ScopedPPVar"*
  %14 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.ppapi::ScopedPPVar"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"class.ppapi::ScopedPPVar"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN5ppapi11ScopedPPVarC1Ev(%"class.ppapi::ScopedPPVar"* %19) #9
  %20 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %19, i64 1
  %21 = icmp eq %"class.ppapi::ScopedPPVar"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %93

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = ashr exact i64 %27, 4
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 1152921504606846975
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #11
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = ashr exact i64 %34, 4
  %36 = icmp ult i64 %35, 576460752303423487
  br i1 %36, label %37, label %45

37:                                               ; preds = %33
  %38 = ashr exact i64 %34, 3
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = icmp ugt i64 %40, 1152921504606846975
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #11
  unreachable

45:                                               ; preds = %33, %42
  %46 = phi i64 [ %40, %42 ], [ 1152921504606846975, %33 ]
  %47 = shl i64 %46, 4
  %48 = tail call i8* @_Znwm(i64 %47) #10
  %49 = bitcast i8* %48 to %"class.ppapi::ScopedPPVar"*
  br label %50

50:                                               ; preds = %37, %45
  %51 = phi i64 [ %46, %45 ], [ 0, %37 ]
  %52 = phi %"class.ppapi::ScopedPPVar"* [ %49, %45 ], [ null, %37 ]
  %53 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %52, i64 %28
  %54 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %52, i64 %51
  %55 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %53, i64 %1
  br label %56

56:                                               ; preds = %50, %56
  %57 = phi %"class.ppapi::ScopedPPVar"* [ %58, %56 ], [ %53, %50 ]
  tail call void @_ZN5ppapi11ScopedPPVarC1Ev(%"class.ppapi::ScopedPPVar"* %57) #9
  %58 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %57, i64 1
  %59 = icmp eq %"class.ppapi::ScopedPPVar"* %55, %58
  br i1 %59, label %60, label %56

60:                                               ; preds = %56
  %61 = ptrtoint %"class.ppapi::ScopedPPVar"* %54 to i64
  %62 = ptrtoint %"class.ppapi::ScopedPPVar"* %55 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %64 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %63, align 8
  %65 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %6, align 8
  %66 = icmp eq %"class.ppapi::ScopedPPVar"* %65, %64
  br i1 %66, label %67, label %69

67:                                               ; preds = %60
  %68 = ptrtoint %"class.ppapi::ScopedPPVar"* %64 to i64
  br label %78

69:                                               ; preds = %60, %69
  %70 = phi %"class.ppapi::ScopedPPVar"* [ %72, %69 ], [ %53, %60 ]
  %71 = phi %"class.ppapi::ScopedPPVar"* [ %73, %69 ], [ %65, %60 ]
  %72 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %70, i64 -1
  %73 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %71, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarC1ERKS0_(%"class.ppapi::ScopedPPVar"* %72, %"class.ppapi::ScopedPPVar"* dereferenceable(16) %73) #9
  %74 = icmp eq %"class.ppapi::ScopedPPVar"* %73, %64
  br i1 %74, label %75, label %69

75:                                               ; preds = %69
  %76 = load i64, i64* %25, align 8
  %77 = load %"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"** %6, align 8
  br label %78

78:                                               ; preds = %67, %75
  %79 = phi %"class.ppapi::ScopedPPVar"* [ %64, %67 ], [ %77, %75 ]
  %80 = phi %"class.ppapi::ScopedPPVar"* [ %53, %67 ], [ %72, %75 ]
  %81 = phi i64 [ %68, %67 ], [ %76, %75 ]
  %82 = ptrtoint %"class.ppapi::ScopedPPVar"* %80 to i64
  store i64 %82, i64* %25, align 8
  store i64 %62, i64* %7, align 8
  store i64 %61, i64* %4, align 8
  %83 = inttoptr i64 %81 to %"class.ppapi::ScopedPPVar"*
  %84 = icmp eq %"class.ppapi::ScopedPPVar"* %79, %83
  br i1 %84, label %89, label %85

85:                                               ; preds = %78, %85
  %86 = phi %"class.ppapi::ScopedPPVar"* [ %87, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %"class.ppapi::ScopedPPVar", %"class.ppapi::ScopedPPVar"* %86, i64 -1
  tail call void @_ZN5ppapi11ScopedPPVarD1Ev(%"class.ppapi::ScopedPPVar"* %87) #9
  %88 = icmp eq %"class.ppapi::ScopedPPVar"* %87, %83
  br i1 %88, label %89, label %85

89:                                               ; preds = %85, %78
  %90 = icmp eq i64 %81, 0
  br i1 %90, label %93, label %91

91:                                               ; preds = %89
  %92 = inttoptr i64 %81 to i8*
  tail call void @_ZdlPv(i8* %92) #10
  br label %93

93:                                               ; preds = %91, %89, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN5ppapi11ScopedPPVarC1Ev(%"class.ppapi::ScopedPPVar"*) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN5ppapi11ScopedPPVarC1ERKS0_(%"class.ppapi::ScopedPPVar"*, %"class.ppapi::ScopedPPVar"* dereferenceable(16)) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
