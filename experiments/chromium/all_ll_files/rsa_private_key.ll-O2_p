; ModuleID = '../../crypto/rsa_private_key.cc'
source_filename = "../../crypto/rsa_private_key.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::RSAPrivateKey" = type { %"class.std::__1::unique_ptr.0" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.crypto::OpenSSLErrStackTracer" = type { %"class.base::Location" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque
%struct.bn_gencb_st = type { i8*, i32 (i32, i32, %struct.bn_gencb_st*)* }
%struct.cbs_st = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i8* }
%"class.bssl::internal::StackAllocated" = type { %struct.cbb_st }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"Create\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"../../crypto/rsa_private_key.cc\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"CreateFromPrivateKeyInfo\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"ExportPrivateKey\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"ExportPublicKey\00", align 1

@_ZN6crypto13RSAPrivateKeyC1Ev = hidden unnamed_addr alias void (%"class.crypto::RSAPrivateKey"*), void (%"class.crypto::RSAPrivateKey"*)* @_ZN6crypto13RSAPrivateKeyC2Ev
@_ZN6crypto13RSAPrivateKeyD1Ev = hidden unnamed_addr alias void (%"class.crypto::RSAPrivateKey"*), void (%"class.crypto::RSAPrivateKey"*)* @_ZN6crypto13RSAPrivateKeyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey6CreateEt(i16 zeroext) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 25) #7
  %6 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %2, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %6, %"class.base::Location"* nonnull dereferenceable(32) %3) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #7
  %7 = call %struct.rsa_st* @RSA_new() #7
  %8 = call %struct.bignum_st* @BN_new() #7
  %9 = icmp eq %struct.rsa_st* %7, null
  %10 = icmp eq %struct.bignum_st* %8, null
  br i1 %9, label %40, label %11

11:                                               ; preds = %1
  br i1 %10, label %44, label %12

12:                                               ; preds = %11
  %13 = call i32 @BN_set_word(%struct.bignum_st* nonnull %8, i64 65537) #7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %42, label %15

15:                                               ; preds = %12
  %16 = zext i16 %0 to i32
  %17 = call i32 @RSA_generate_key_ex(%struct.rsa_st* nonnull %7, i32 %16, %struct.bignum_st* nonnull %8, %struct.bn_gencb_st* null) #7
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %42, label %19

19:                                               ; preds = %15
  %20 = call i8* @_Znwm(i64 8) #8
  %21 = bitcast i8* %20 to i64*
  store i64 0, i64* %21, align 8
  %22 = ptrtoint i8* %20 to i64
  %23 = call %struct.evp_pkey_st* @EVP_PKEY_new() #7
  %24 = bitcast i8* %20 to %struct.evp_pkey_st**
  %25 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %24, align 8
  store %struct.evp_pkey_st* %23, %struct.evp_pkey_st** %24, align 8
  %26 = icmp eq %struct.evp_pkey_st* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %19
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %25) #7
  %28 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %24, align 8
  br label %29

29:                                               ; preds = %19, %27
  %30 = phi %struct.evp_pkey_st* [ %23, %19 ], [ %28, %27 ]
  %31 = icmp eq %struct.evp_pkey_st* %30, null
  br i1 %31, label %39, label %32

32:                                               ; preds = %29
  %33 = call i32 @EVP_PKEY_set1_RSA(%struct.evp_pkey_st* nonnull %30, %struct.rsa_st* nonnull %7) #7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %24, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %24, align 8
  %37 = icmp eq %struct.evp_pkey_st* %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %35
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %36) #7
  br label %39

39:                                               ; preds = %29, %38, %35
  call void @_ZdlPv(i8* nonnull %20) #8
  br label %42

40:                                               ; preds = %1
  br i1 %10, label %46, label %41

41:                                               ; preds = %40
  call void @BN_free(%struct.bignum_st* nonnull %8) #7
  br label %46

42:                                               ; preds = %32, %39, %15, %12
  %43 = phi i64 [ 0, %39 ], [ 0, %15 ], [ 0, %12 ], [ %22, %32 ]
  call void @BN_free(%struct.bignum_st* nonnull %8) #7
  br label %44

44:                                               ; preds = %11, %42
  %45 = phi i64 [ %43, %42 ], [ 0, %11 ]
  call void @RSA_free(%struct.rsa_st* nonnull %7) #7
  br label %46

46:                                               ; preds = %40, %41, %44
  %47 = phi i64 [ %45, %44 ], [ 0, %41 ], [ 0, %40 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %6) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #7
  %48 = inttoptr i64 %47 to %"class.crypto::RSAPrivateKey"*
  ret %"class.crypto::RSAPrivateKey"* %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.rsa_st* @RSA_new() local_unnamed_addr #2

declare %struct.bignum_st* @BN_new() local_unnamed_addr #2

declare i32 @BN_set_word(%struct.bignum_st*, i64) local_unnamed_addr #2

declare i32 @RSA_generate_key_ex(%struct.rsa_st*, i32, %struct.bignum_st*, %struct.bn_gencb_st*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare %struct.evp_pkey_st* @EVP_PKEY_new() local_unnamed_addr #2

declare i32 @EVP_PKEY_set1_RSA(%struct.evp_pkey_st*, %struct.rsa_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey24CreateFromPrivateKeyInfoEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 46) #7
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %4) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7
  %9 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #7
  %10 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %5, i8* %1, i64 %0) #7
  %11 = call %struct.evp_pkey_st* @EVP_parse_private_key(%struct.cbs_st* nonnull %5) #7
  %12 = ptrtoint %struct.evp_pkey_st* %11 to i64
  %13 = icmp eq %struct.evp_pkey_st* %11, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %2
  %15 = call i64 @CBS_len(%struct.cbs_st* nonnull %5) #7
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = call i32 @EVP_PKEY_id(%struct.evp_pkey_st* nonnull %11) #7
  %19 = icmp eq i32 %18, 6
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = call i8* @_Znwm(i64 8) #8
  %22 = bitcast i8* %21 to i64*
  store i64 %12, i64* %22, align 8
  %23 = bitcast i8* %21 to %"class.crypto::RSAPrivateKey"*
  br label %25

24:                                               ; preds = %17, %14
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %11) #7
  br label %25

25:                                               ; preds = %2, %20, %24
  %26 = phi %"class.crypto::RSAPrivateKey"* [ null, %24 ], [ %23, %20 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #7
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #7
  ret %"class.crypto::RSAPrivateKey"* %26
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare %struct.evp_pkey_st* @EVP_parse_private_key(%struct.cbs_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_id(%struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey13CreateFromKeyEP11evp_pkey_st(%struct.evp_pkey_st*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = tail call i32 @EVP_PKEY_type(i32 %3) #7
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %20

6:                                                ; preds = %1
  %7 = tail call i8* @_Znwm(i64 8) #8
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = ptrtoint i8* %7 to i64
  %10 = icmp eq %struct.evp_pkey_st* %0, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %6
  %12 = ptrtoint %struct.evp_pkey_st* %0 to i64
  store i64 %12, i64* %8, align 8
  br label %20

13:                                               ; preds = %6
  %14 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %0) #7
  %15 = bitcast i8* %7 to %struct.evp_pkey_st**
  %16 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %15, align 8
  %17 = ptrtoint %struct.evp_pkey_st* %0 to i64
  store i64 %17, i64* %8, align 8
  %18 = icmp eq %struct.evp_pkey_st* %16, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %13
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %16) #7
  br label %20

20:                                               ; preds = %11, %19, %13, %1
  %21 = phi i64 [ 0, %1 ], [ %9, %13 ], [ %9, %19 ], [ %9, %11 ]
  %22 = inttoptr i64 %21 to %"class.crypto::RSAPrivateKey"*
  ret %"class.crypto::RSAPrivateKey"* %22
}

declare i32 @EVP_PKEY_type(i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6crypto13RSAPrivateKeyC2Ev(%"class.crypto::RSAPrivateKey"* nocapture) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.crypto::RSAPrivateKey"* %0 to i64*
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto13RSAPrivateKeyD2Ev(%"class.crypto::RSAPrivateKey"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %2, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %2, align 8
  %4 = icmp eq %struct.evp_pkey_st* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %3) #7
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::RSAPrivateKey"* @_ZNK6crypto13RSAPrivateKey4CopyEv(%"class.crypto::RSAPrivateKey"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 8) #8
  %3 = bitcast i8* %2 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %4, align 8
  %6 = tail call %struct.rsa_st* @EVP_PKEY_get1_RSA(%struct.evp_pkey_st* %5) #7
  %7 = icmp eq %struct.rsa_st* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %1
  %9 = tail call %struct.evp_pkey_st* @EVP_PKEY_new() #7
  %10 = bitcast i8* %2 to %struct.evp_pkey_st**
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  store %struct.evp_pkey_st* %9, %struct.evp_pkey_st** %10, align 8
  %12 = icmp eq %struct.evp_pkey_st* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %11) #7
  %14 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  br label %15

15:                                               ; preds = %8, %13
  %16 = phi %struct.evp_pkey_st* [ %9, %8 ], [ %14, %13 ]
  %17 = tail call i32 @EVP_PKEY_set1_RSA(%struct.evp_pkey_st* %16, %struct.rsa_st* nonnull %6) #7
  %18 = icmp eq i32 %17, 0
  tail call void @RSA_free(%struct.rsa_st* nonnull %6) #7
  %19 = bitcast i8* %2 to %"class.crypto::RSAPrivateKey"*
  br i1 %18, label %20, label %26

20:                                               ; preds = %15, %1
  %21 = bitcast i8* %2 to %struct.evp_pkey_st**
  %22 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %21, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %21, align 8
  %23 = icmp eq %struct.evp_pkey_st* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %22) #7
  br label %25

25:                                               ; preds = %24, %20
  tail call void @_ZdlPv(i8* nonnull %2) #8
  br label %26

26:                                               ; preds = %15, %25
  %27 = phi %"class.crypto::RSAPrivateKey"* [ null, %25 ], [ %19, %15 ]
  ret %"class.crypto::RSAPrivateKey"* %27
}

declare %struct.rsa_st* @EVP_PKEY_get1_RSA(%struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto13RSAPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 85) #7
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %4) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #7
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %14) #7
  %15 = call i32 @CBB_init(%struct.cbb_st* nonnull %14, i64 0) #7
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %18, align 8
  %20 = call i32 @EVP_marshal_private_key(%struct.cbb_st* nonnull %14, %struct.evp_pkey_st* %19) #7
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = call i32 @CBB_finish(%struct.cbb_st* nonnull %14, i8** nonnull %5, i64* nonnull %6) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %5, align 8
  %27 = load i64, i64* %6, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1, i8* %26, i8* %28)
  %29 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %29) #7
  br label %30

30:                                               ; preds = %2, %17, %22, %25
  %31 = phi i1 [ true, %25 ], [ false, %22 ], [ false, %17 ], [ false, %2 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #7
  ret i1 %31
}

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @EVP_marshal_private_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %40, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %5
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #7
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %38

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = sub i64 %4, %23
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = inttoptr i64 %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %22, i64 %30, i1 false) #7
  %34 = getelementptr inbounds i8, i8* %33, i64 %30
  %35 = ptrtoint i8* %34 to i64
  br label %36

36:                                               ; preds = %28, %32
  %37 = phi i64 [ %35, %32 ], [ %29, %28 ]
  store i64 %37, i64* %17, align 8
  br label %66

38:                                               ; preds = %27
  %39 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %39, i8** %16, align 8
  br label %66

40:                                               ; preds = %3
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %42 = icmp eq i64 %11, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %45 = bitcast i8** %44 to i64*
  store i64 %11, i64* %45, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #8
  %46 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #7
  br label %47

47:                                               ; preds = %40, %43
  %48 = phi i64 [ %9, %40 ], [ 0, %43 ]
  %49 = icmp slt i64 %6, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #9
  unreachable

52:                                               ; preds = %47
  %53 = icmp ult i64 %48, 4611686018427387903
  br i1 %53, label %54, label %58

54:                                               ; preds = %52
  %55 = shl i64 %48, 1
  %56 = icmp ult i64 %55, %6
  %57 = select i1 %56, i64 %6, i64 %55
  br label %58

58:                                               ; preds = %54, %52
  %59 = phi i64 [ %57, %54 ], [ 9223372036854775807, %52 ]
  %60 = tail call i8* @_Znwm(i64 %59) #8
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  store i8* %60, i8** %61, align 8
  store i8* %60, i8** %41, align 8
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  store i8* %62, i8** %7, align 8
  %63 = bitcast i8** %61 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %1, i64 %6, i1 false) #7
  %64 = getelementptr inbounds i8, i8* %60, i64 %6
  %65 = ptrtoint i8* %64 to i64
  store i64 %65, i64* %63, align 8
  br label %66

66:                                               ; preds = %36, %38, %58
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto13RSAPrivateKey15ExportPublicKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 100) #7
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %4) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #7
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %14) #7
  %15 = call i32 @CBB_init(%struct.cbb_st* nonnull %14, i64 0) #7
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %18, align 8
  %20 = call i32 @EVP_marshal_public_key(%struct.cbb_st* nonnull %14, %struct.evp_pkey_st* %19) #7
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = call i32 @CBB_finish(%struct.cbb_st* nonnull %14, i8** nonnull %5, i64* nonnull %6) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %5, align 8
  %27 = load i64, i64* %6, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1, i8* %26, i8* %28)
  %29 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %29) #7
  br label %30

30:                                               ; preds = %2, %17, %22, %25
  %31 = phi i1 [ true, %25 ], [ false, %22 ], [ false, %17 ], [ false, %2 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #7
  ret i1 %31
}

declare i32 @EVP_marshal_public_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #2

declare void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* dereferenceable(32)) local_unnamed_addr #2

declare i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #2

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
