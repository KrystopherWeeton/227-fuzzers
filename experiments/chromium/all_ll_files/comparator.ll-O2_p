; ModuleID = '../../third_party/leveldatabase/src/util/comparator.cc'
source_filename = "../../third_party/leveldatabase/src/util/comparator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.leveldb::NoDestructor" = type { %"struct.std::__1::aligned_storage<8, 8>::type" }
%"struct.std::__1::aligned_storage<8, 8>::type" = type { [8 x i8] }
%"class.leveldb::Comparator" = type { i32 (...)** }
%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl" = type { %"class.leveldb::Comparator" }
%"class.leveldb::Slice" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZZN7leveldb18BytewiseComparatorEvE9singleton = internal global %"class.leveldb::NoDestructor" zeroinitializer, align 8
@_ZGVZN7leveldb18BytewiseComparatorEvE9singleton = internal global i64 0, align 8
@_ZTVN7leveldb10ComparatorE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.leveldb::Comparator"*)* @_ZN7leveldb10ComparatorD2Ev to i8*), i8* bitcast (void (%"class.leveldb::Comparator"*)* @_ZN7leveldb10ComparatorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN7leveldb12_GLOBAL__N_122BytewiseComparatorImplE = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.leveldb::Comparator"*)* @_ZN7leveldb10ComparatorD2Ev to i8*), i8* bitcast (void (%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*)* @_ZN7leveldb12_GLOBAL__N_122BytewiseComparatorImplD0Ev to i8*), i8* bitcast (i32 (%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*, %"class.leveldb::Slice"*, %"class.leveldb::Slice"*)* @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl7CompareERKNS_5SliceES4_ to i8*), i8* bitcast (i8* (%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*)* @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl4NameEv to i8*), i8* bitcast (void (%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*, %"class.std::__1::basic_string"*, %"class.leveldb::Slice"*)* @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl21FindShortestSeparatorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS_5SliceE to i8*), i8* bitcast (void (%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*, %"class.std::__1::basic_string"*)* @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl18FindShortSuccessorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [27 x i8] c"leveldb.BytewiseComparator\00", align 1

@_ZN7leveldb10ComparatorD1Ev = hidden unnamed_addr alias void (%"class.leveldb::Comparator"*), void (%"class.leveldb::Comparator"*)* @_ZN7leveldb10ComparatorD2Ev

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN7leveldb10ComparatorD0Ev(%"class.leveldb::Comparator"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden %"class.leveldb::Comparator"* @_ZN7leveldb18BytewiseComparatorEv() local_unnamed_addr #2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN7leveldb18BytewiseComparatorEvE9singleton to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7leveldb18BytewiseComparatorEvE9singleton) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN7leveldb12_GLOBAL__N_122BytewiseComparatorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** bitcast (%"class.leveldb::NoDestructor"* @_ZZN7leveldb18BytewiseComparatorEvE9singleton to i32 (...)***), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7leveldb18BytewiseComparatorEvE9singleton) #12
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.leveldb::Comparator"* bitcast (%"class.leveldb::NoDestructor"* @_ZZN7leveldb18BytewiseComparatorEvE9singleton to %"class.leveldb::Comparator"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7leveldb10ComparatorD2Ev(%"class.leveldb::Comparator"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN7leveldb12_GLOBAL__N_122BytewiseComparatorImplD0Ev(%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"*) unnamed_addr #5 align 2 {
  %2 = bitcast %"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl7CompareERKNS_5SliceES4_(%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"* nocapture readnone, %"class.leveldb::Slice"* nocapture readonly dereferenceable(16), %"class.leveldb::Slice"* nocapture readonly dereferenceable(16)) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %2, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %5, %7
  %9 = select i1 %8, i64 %5, i64 %7
  %10 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %1, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %2, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i32 @memcmp(i8* %11, i8* %13, i64 %9) #14
  %15 = icmp ne i32 %14, 0
  %16 = or i1 %8, %15
  %17 = icmp ugt i64 %5, %7
  %18 = zext i1 %17 to i32
  %19 = select i1 %15, i32 %14, i32 -1
  %20 = select i1 %16, i32 %19, i32 %18
  ret i32 %20
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl4NameEv(%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl21FindShortestSeparatorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS_5SliceE(%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"* nocapture readnone, %"class.std::__1::basic_string"*, %"class.leveldb::Slice"* nocapture readonly dereferenceable(16)) unnamed_addr #7 align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %13

11:                                               ; preds = %3
  %12 = zext i8 %6 to i64
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i64 [ %10, %8 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %2, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %14
  %18 = select i1 %17, i64 %16, i64 %14
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %61, label %20

20:                                               ; preds = %13
  %21 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.leveldb::Slice", %"class.leveldb::Slice"* %2, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  br label %25

25:                                               ; preds = %20, %36
  %26 = phi i64 [ 0, %20 ], [ %37, %36 ]
  br i1 %7, label %27, label %29

27:                                               ; preds = %25
  %28 = load i8*, i8** %22, align 8
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi i8* [ %28, %27 ], [ %21, %25 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 %26
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds i8, i8* %24, i64 %26
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %32, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %29
  %37 = add nuw i64 %26, 1
  %38 = icmp ult i64 %37, %18
  br i1 %38, label %25, label %61

39:                                               ; preds = %29
  br i1 %7, label %40, label %42

40:                                               ; preds = %39
  %41 = load i8*, i8** %22, align 8
  br label %42

42:                                               ; preds = %39, %40
  %43 = phi i8* [ %41, %40 ], [ %21, %39 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %26
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, -1
  br i1 %46, label %61, label %47

47:                                               ; preds = %42
  %48 = zext i8 %45 to i32
  %49 = add nuw nsw i32 %48, 1
  %50 = zext i8 %34 to i32
  %51 = icmp ult i32 %49, %50
  br i1 %51, label %52, label %61

52:                                               ; preds = %47
  br i1 %7, label %53, label %55

53:                                               ; preds = %52
  %54 = load i8*, i8** %22, align 8
  br label %55

55:                                               ; preds = %52, %53
  %56 = phi i8* [ %54, %53 ], [ %21, %52 ]
  %57 = getelementptr inbounds i8, i8* %56, i64 %26
  %58 = load i8, i8* %57, align 1
  %59 = add i8 %58, 1
  store i8 %59, i8* %57, align 1
  %60 = add nuw i64 %26, 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %60, i8 signext 0) #12
  br label %61

61:                                               ; preds = %36, %13, %47, %55, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK7leveldb12_GLOBAL__N_122BytewiseComparatorImpl18FindShortSuccessorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.leveldb::(anonymous namespace)::BytewiseComparatorImpl"* nocapture readnone, %"class.std::__1::basic_string"*) unnamed_addr #7 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %2
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %38, label %15

15:                                               ; preds = %12
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %18

18:                                               ; preds = %35, %15
  %19 = phi i64 [ 0, %15 ], [ %36, %35 ]
  br i1 %6, label %20, label %22

20:                                               ; preds = %18
  %21 = load i8*, i8** %17, align 8
  br label %22

22:                                               ; preds = %18, %20
  %23 = phi i8* [ %21, %20 ], [ %16, %18 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 %19
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, -1
  br i1 %26, label %35, label %27

27:                                               ; preds = %22
  %28 = add nuw i8 %25, 1
  br i1 %6, label %29, label %31

29:                                               ; preds = %27
  %30 = load i8*, i8** %17, align 8
  br label %31

31:                                               ; preds = %27, %29
  %32 = phi i8* [ %30, %29 ], [ %16, %27 ]
  %33 = getelementptr inbounds i8, i8* %32, i64 %19
  store i8 %28, i8* %33, align 1
  %34 = add nuw i64 %19, 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %34, i8 signext 0) #12
  br label %38

35:                                               ; preds = %22
  %36 = add nuw i64 %19, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %38, label %18

38:                                               ; preds = %35, %12, %31
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #10

attributes #0 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
