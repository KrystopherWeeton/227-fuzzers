; ModuleID = '../../third_party/vulkan-deps/vulkan-validation-layers/src/layers/xxhash.c'
source_filename = "../../third_party/vulkan-deps/vulkan-validation-layers/src/layers/xxhash.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.XXH32_state_s = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32 }
%struct.XXH32_canonical_t = type { [4 x i8] }
%struct.XXH64_state_s = type { i64, i64, i64, i64, i64, [4 x i64], i32, [2 x i32] }
%struct.XXH64_canonical_t = type { [8 x i8] }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @XXH_versionNumber() local_unnamed_addr #0 {
  ret i32 602
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @XXH32(i8* readonly, i64, i32) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i8, i8* %0, i64 %1
  %5 = icmp ugt i64 %1, 15
  br i1 %5, label %6, label %70

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %4, i64 -16
  %8 = add i32 %2, 606290984
  %9 = add i32 %2, -2048144777
  %10 = add i32 %2, 1640531535
  br label %11

11:                                               ; preds = %11, %6
  %12 = phi i8* [ %0, %6 ], [ %52, %11 ]
  %13 = phi i32 [ %8, %6 ], [ %24, %11 ]
  %14 = phi i32 [ %9, %6 ], [ %33, %11 ]
  %15 = phi i32 [ %2, %6 ], [ %42, %11 ]
  %16 = phi i32 [ %10, %6 ], [ %51, %11 ]
  %17 = bitcast i8* %12 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = mul i32 %18, -2048144777
  %20 = add i32 %19, %13
  %21 = shl i32 %20, 13
  %22 = lshr i32 %20, 19
  %23 = or i32 %21, %22
  %24 = mul i32 %23, -1640531535
  %25 = getelementptr inbounds i8, i8* %12, i64 4
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = mul i32 %27, -2048144777
  %29 = add i32 %28, %14
  %30 = shl i32 %29, 13
  %31 = lshr i32 %29, 19
  %32 = or i32 %30, %31
  %33 = mul i32 %32, -1640531535
  %34 = getelementptr inbounds i8, i8* %12, i64 8
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = mul i32 %36, -2048144777
  %38 = add i32 %37, %15
  %39 = shl i32 %38, 13
  %40 = lshr i32 %38, 19
  %41 = or i32 %39, %40
  %42 = mul i32 %41, -1640531535
  %43 = getelementptr inbounds i8, i8* %12, i64 12
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = mul i32 %45, -2048144777
  %47 = add i32 %46, %16
  %48 = shl i32 %47, 13
  %49 = lshr i32 %47, 19
  %50 = or i32 %48, %49
  %51 = mul i32 %50, -1640531535
  %52 = getelementptr inbounds i8, i8* %12, i64 16
  %53 = icmp ugt i8* %52, %7
  br i1 %53, label %54, label %11

54:                                               ; preds = %11
  %55 = mul i32 %23, 1013904226
  %56 = lshr i32 %24, 31
  %57 = or i32 %56, %55
  %58 = mul i32 %32, 465361024
  %59 = lshr i32 %33, 25
  %60 = or i32 %59, %58
  %61 = add i32 %60, %57
  %62 = mul i32 %41, 2006650880
  %63 = lshr i32 %42, 20
  %64 = or i32 %63, %62
  %65 = add i32 %61, %64
  %66 = mul i32 %50, -423362560
  %67 = lshr i32 %51, 14
  %68 = or i32 %67, %66
  %69 = add i32 %65, %68
  br label %72

70:                                               ; preds = %3
  %71 = add i32 %2, 374761393
  br label %72

72:                                               ; preds = %70, %54
  %73 = phi i8* [ %52, %54 ], [ %0, %70 ]
  %74 = phi i32 [ %69, %54 ], [ %71, %70 ]
  %75 = trunc i64 %1 to i32
  %76 = add i32 %74, %75
  %77 = getelementptr inbounds i8, i8* %73, i64 4
  %78 = icmp ugt i8* %77, %4
  br i1 %78, label %79, label %83

79:                                               ; preds = %83, %72
  %80 = phi i8* [ %73, %72 ], [ %84, %83 ]
  %81 = phi i32 [ %76, %72 ], [ %94, %83 ]
  %82 = icmp ult i8* %80, %4
  br i1 %82, label %97, label %110

83:                                               ; preds = %72, %83
  %84 = phi i8* [ %95, %83 ], [ %77, %72 ]
  %85 = phi i32 [ %94, %83 ], [ %76, %72 ]
  %86 = phi i8* [ %84, %83 ], [ %73, %72 ]
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 1
  %89 = mul i32 %88, -1028477379
  %90 = add i32 %89, %85
  %91 = shl i32 %90, 17
  %92 = lshr i32 %90, 15
  %93 = or i32 %91, %92
  %94 = mul i32 %93, 668265263
  %95 = getelementptr inbounds i8, i8* %84, i64 4
  %96 = icmp ugt i8* %95, %4
  br i1 %96, label %79, label %83

97:                                               ; preds = %79, %97
  %98 = phi i32 [ %107, %97 ], [ %81, %79 ]
  %99 = phi i8* [ %108, %97 ], [ %80, %79 ]
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = mul i32 %101, 374761393
  %103 = add i32 %102, %98
  %104 = shl i32 %103, 11
  %105 = lshr i32 %103, 21
  %106 = or i32 %104, %105
  %107 = mul i32 %106, -1640531535
  %108 = getelementptr inbounds i8, i8* %99, i64 1
  %109 = icmp eq i8* %108, %4
  br i1 %109, label %110, label %97

110:                                              ; preds = %97, %79
  %111 = phi i32 [ %81, %79 ], [ %107, %97 ]
  %112 = lshr i32 %111, 15
  %113 = xor i32 %112, %111
  %114 = mul i32 %113, -2048144777
  %115 = lshr i32 %114, 13
  %116 = xor i32 %115, %114
  %117 = mul i32 %116, -1028477379
  %118 = lshr i32 %117, 16
  %119 = xor i32 %118, %117
  ret i32 %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.XXH32_state_s* @XXH32_createState() local_unnamed_addr #3 {
  %1 = tail call noalias i8* @malloc(i64 48) #10
  %2 = bitcast i8* %1 to %struct.XXH32_state_s*
  ret %struct.XXH32_state_s* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH32_freeState(%struct.XXH32_state_s* nocapture) local_unnamed_addr #4 {
  %2 = bitcast %struct.XXH32_state_s* %0 to i8*
  tail call void @free(i8* %2) #10
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @XXH32_copyState(%struct.XXH32_state_s* nocapture, %struct.XXH32_state_s* nocapture readonly) local_unnamed_addr #4 {
  %3 = bitcast %struct.XXH32_state_s* %0 to i8*
  %4 = bitcast %struct.XXH32_state_s* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 48, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH32_reset(%struct.XXH32_state_s* nocapture, i32) local_unnamed_addr #4 {
  %3 = alloca { [4 x i32], i32, i32 }, align 8
  %4 = bitcast { [4 x i32], i32, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 20, i1 false)
  %5 = add i32 %1, 606290984
  %6 = add i32 %1, -2048144777
  %7 = add i32 %1, 1640531535
  %8 = bitcast %struct.XXH32_state_s* %0 to i64*
  store i64 0, i64* %8, align 4
  %9 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 2
  store i32 %5, i32* %9, align 4
  %10 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 3
  store i32 %6, i32* %10, align 4
  %11 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 4
  store i32 %1, i32* %11, align 4
  %12 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 5
  store i32 %7, i32* %12, align 4
  %13 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6
  %14 = bitcast [4 x i32]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* nonnull align 8 %4, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH32_update(%struct.XXH32_state_s* nocapture, i8*, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds i8, i8* %1, i64 %2
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, %5
  store i32 %8, i32* %6, align 4
  %9 = icmp ugt i64 %2, 15
  %10 = icmp ugt i32 %8, 15
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i32
  %13 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %14, %12
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = add i64 %18, %2
  %20 = icmp ult i64 %19, 16
  br i1 %20, label %21, label %27

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6, i64 0
  %23 = bitcast i32* %22 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 %18
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %1, i64 %2, i1 false) #10
  %25 = load i32, i32* %16, align 4
  %26 = add i32 %25, %5
  br label %84

27:                                               ; preds = %3
  %28 = icmp eq i32 %17, 0
  br i1 %28, label %51, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6, i64 0
  %31 = bitcast i32* %30 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 %18
  %33 = sub i32 16, %17
  %34 = zext i32 %33 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %1, i64 %34, i1 false) #10
  %35 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 2
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4
  %38 = bitcast i32* %30 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 1
  %40 = mul <4 x i32> %39, <i32 -2048144777, i32 -2048144777, i32 -2048144777, i32 -2048144777>
  %41 = add <4 x i32> %40, %37
  %42 = shl <4 x i32> %41, <i32 13, i32 13, i32 13, i32 13>
  %43 = lshr <4 x i32> %41, <i32 19, i32 19, i32 19, i32 19>
  %44 = or <4 x i32> %42, %43
  %45 = mul <4 x i32> %44, <i32 -1640531535, i32 -1640531535, i32 -1640531535, i32 -1640531535>
  %46 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %46, align 4
  %47 = load i32, i32* %16, align 4
  %48 = sub i32 16, %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %1, i64 %49
  store i32 0, i32* %16, align 4
  br label %51

51:                                               ; preds = %29, %27
  %52 = phi i8* [ %50, %29 ], [ %1, %27 ]
  %53 = getelementptr inbounds i8, i8* %4, i64 -16
  %54 = icmp ugt i8* %52, %53
  br i1 %54, label %74, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 2
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  br label %59

59:                                               ; preds = %59, %55
  %60 = phi i8* [ %52, %55 ], [ %70, %59 ]
  %61 = phi <4 x i32> [ %58, %55 ], [ %69, %59 ]
  %62 = bitcast i8* %60 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 1
  %64 = mul <4 x i32> %63, <i32 -2048144777, i32 -2048144777, i32 -2048144777, i32 -2048144777>
  %65 = add <4 x i32> %64, %61
  %66 = shl <4 x i32> %65, <i32 13, i32 13, i32 13, i32 13>
  %67 = lshr <4 x i32> %65, <i32 19, i32 19, i32 19, i32 19>
  %68 = or <4 x i32> %66, %67
  %69 = mul <4 x i32> %68, <i32 -1640531535, i32 -1640531535, i32 -1640531535, i32 -1640531535>
  %70 = getelementptr inbounds i8, i8* %60, i64 16
  %71 = icmp ugt i8* %70, %53
  br i1 %71, label %72, label %59

72:                                               ; preds = %59
  %73 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4
  br label %74

74:                                               ; preds = %72, %51
  %75 = phi i8* [ %70, %72 ], [ %52, %51 ]
  %76 = icmp ult i8* %75, %4
  br i1 %76, label %77, label %86

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6, i64 0
  %79 = bitcast i32* %78 to i8*
  %80 = ptrtoint i8* %4 to i64
  %81 = ptrtoint i8* %75 to i64
  %82 = sub i64 %80, %81
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %75, i64 %82, i1 false) #10
  %83 = trunc i64 %82 to i32
  br label %84

84:                                               ; preds = %77, %21
  %85 = phi i32 [ %26, %21 ], [ %83, %77 ]
  store i32 %85, i32* %16, align 4
  br label %86

86:                                               ; preds = %84, %74
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @XXH32_digest(%struct.XXH32_state_s* readonly) local_unnamed_addr #1 {
  %2 = bitcast %struct.XXH32_state_s* %0 to i8*
  %3 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6, i64 0
  %4 = bitcast i32* %3 to i8*
  %5 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 1
  %16 = lshr i32 %14, 31
  %17 = or i32 %15, %16
  %18 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = shl i32 %19, 7
  %21 = lshr i32 %19, 25
  %22 = or i32 %20, %21
  %23 = add i32 %22, %17
  %24 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 12
  %27 = lshr i32 %25, 20
  %28 = or i32 %26, %27
  %29 = add i32 %23, %28
  %30 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 %31, 18
  %33 = lshr i32 %31, 14
  %34 = or i32 %32, %33
  %35 = add i32 %29, %34
  br label %40

36:                                               ; preds = %1
  %37 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 374761393
  br label %40

40:                                               ; preds = %36, %12
  %41 = phi i32 [ %35, %12 ], [ %39, %36 ]
  %42 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, %41
  %45 = getelementptr inbounds %struct.XXH32_state_s, %struct.XXH32_state_s* %0, i64 0, i32 6, i64 1
  %46 = bitcast i32* %45 to i8*
  %47 = icmp ult i8* %8, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %55, %40
  %49 = phi i8* [ %4, %40 ], [ %56, %55 ]
  %50 = phi i32 [ %44, %40 ], [ %66, %55 ]
  %51 = icmp ult i8* %49, %8
  br i1 %51, label %52, label %82

52:                                               ; preds = %48
  %53 = add nuw nsw i64 %7, 24
  %54 = getelementptr i8, i8* %2, i64 %53
  br label %69

55:                                               ; preds = %40, %55
  %56 = phi i8* [ %67, %55 ], [ %46, %40 ]
  %57 = phi i32 [ %66, %55 ], [ %44, %40 ]
  %58 = phi i8* [ %56, %55 ], [ %4, %40 ]
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = mul i32 %60, -1028477379
  %62 = add i32 %61, %57
  %63 = shl i32 %62, 17
  %64 = lshr i32 %62, 15
  %65 = or i32 %63, %64
  %66 = mul i32 %65, 668265263
  %67 = getelementptr inbounds i8, i8* %56, i64 4
  %68 = icmp ugt i8* %67, %8
  br i1 %68, label %48, label %55

69:                                               ; preds = %69, %52
  %70 = phi i32 [ %79, %69 ], [ %50, %52 ]
  %71 = phi i8* [ %80, %69 ], [ %49, %52 ]
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul i32 %73, 374761393
  %75 = add i32 %74, %70
  %76 = shl i32 %75, 11
  %77 = lshr i32 %75, 21
  %78 = or i32 %76, %77
  %79 = mul i32 %78, -1640531535
  %80 = getelementptr inbounds i8, i8* %71, i64 1
  %81 = icmp eq i8* %80, %54
  br i1 %81, label %82, label %69

82:                                               ; preds = %69, %48
  %83 = phi i32 [ %50, %48 ], [ %79, %69 ]
  %84 = lshr i32 %83, 15
  %85 = xor i32 %84, %83
  %86 = mul i32 %85, -2048144777
  %87 = lshr i32 %86, 13
  %88 = xor i32 %87, %86
  %89 = mul i32 %88, -1028477379
  %90 = lshr i32 %89, 16
  %91 = xor i32 %90, %89
  ret i32 %91
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden void @XXH32_canonicalFromHash(%struct.XXH32_canonical_t* nocapture, i32) local_unnamed_addr #5 {
  %3 = tail call i32 @llvm.bswap.i32(i32 %1) #10
  %4 = bitcast %struct.XXH32_canonical_t* %0 to i32*
  store i32 %3, i32* %4, align 1
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @XXH32_hashFromCanonical(%struct.XXH32_canonical_t* nocapture readonly) local_unnamed_addr #6 {
  %2 = bitcast %struct.XXH32_canonical_t* %0 to i32*
  %3 = load i32, i32* %2, align 1
  %4 = tail call i32 @llvm.bswap.i32(i32 %3) #10
  ret i32 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @XXH64(i8* readonly, i64, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i8, i8* %0, i64 %1
  %5 = icmp ugt i64 %1, 31
  br i1 %5, label %6, label %102

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %4, i64 -32
  %8 = add i64 %2, 6983438078262162902
  %9 = add i64 %2, -4417276706812531889
  %10 = add i64 %2, 7046029288634856825
  br label %11

11:                                               ; preds = %11, %6
  %12 = phi i64 [ %8, %6 ], [ %24, %11 ]
  %13 = phi i64 [ %9, %6 ], [ %33, %11 ]
  %14 = phi i64 [ %2, %6 ], [ %42, %11 ]
  %15 = phi i64 [ %10, %6 ], [ %51, %11 ]
  %16 = phi i8* [ %0, %6 ], [ %52, %11 ]
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = mul i64 %18, -4417276706812531889
  %20 = add i64 %19, %12
  %21 = shl i64 %20, 31
  %22 = lshr i64 %20, 33
  %23 = or i64 %21, %22
  %24 = mul i64 %23, -7046029288634856825
  %25 = getelementptr inbounds i8, i8* %16, i64 8
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = mul i64 %27, -4417276706812531889
  %29 = add i64 %28, %13
  %30 = shl i64 %29, 31
  %31 = lshr i64 %29, 33
  %32 = or i64 %30, %31
  %33 = mul i64 %32, -7046029288634856825
  %34 = getelementptr inbounds i8, i8* %16, i64 16
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = mul i64 %36, -4417276706812531889
  %38 = add i64 %37, %14
  %39 = shl i64 %38, 31
  %40 = lshr i64 %38, 33
  %41 = or i64 %39, %40
  %42 = mul i64 %41, -7046029288634856825
  %43 = getelementptr inbounds i8, i8* %16, i64 24
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = mul i64 %45, -4417276706812531889
  %47 = add i64 %46, %15
  %48 = shl i64 %47, 31
  %49 = lshr i64 %47, 33
  %50 = or i64 %48, %49
  %51 = mul i64 %50, -7046029288634856825
  %52 = getelementptr inbounds i8, i8* %16, i64 32
  %53 = icmp ugt i8* %52, %7
  br i1 %53, label %54, label %11

54:                                               ; preds = %11
  %55 = mul i64 %23, 4354685496439837966
  %56 = lshr i64 %24, 63
  %57 = or i64 %56, %55
  %58 = mul i64 %32, 1998710666506355584
  %59 = lshr i64 %33, 57
  %60 = or i64 %59, %58
  %61 = add i64 %60, %57
  %62 = mul i64 %41, 8618509107074723840
  %63 = lshr i64 %42, 52
  %64 = or i64 %63, %62
  %65 = add i64 %61, %64
  %66 = mul i64 %50, -1817739358504222720
  %67 = lshr i64 %51, 46
  %68 = or i64 %67, %66
  %69 = add i64 %65, %68
  %70 = mul i64 %23, -2381459717836149591
  %71 = mul i64 %23, -8665851108926685184
  %72 = lshr i64 %70, 33
  %73 = or i64 %72, %71
  %74 = mul i64 %73, -7046029288634856825
  %75 = xor i64 %69, %74
  %76 = mul i64 %75, -7046029288634856825
  %77 = add i64 %76, -8796714831421723037
  %78 = mul i64 %32, -2381459717836149591
  %79 = mul i64 %32, -8665851108926685184
  %80 = lshr i64 %78, 33
  %81 = or i64 %80, %79
  %82 = mul i64 %81, -7046029288634856825
  %83 = xor i64 %77, %82
  %84 = mul i64 %83, -7046029288634856825
  %85 = add i64 %84, -8796714831421723037
  %86 = mul i64 %41, -2381459717836149591
  %87 = mul i64 %41, -8665851108926685184
  %88 = lshr i64 %86, 33
  %89 = or i64 %88, %87
  %90 = mul i64 %89, -7046029288634856825
  %91 = xor i64 %85, %90
  %92 = mul i64 %91, -7046029288634856825
  %93 = add i64 %92, -8796714831421723037
  %94 = mul i64 %50, -2381459717836149591
  %95 = mul i64 %50, -8665851108926685184
  %96 = lshr i64 %94, 33
  %97 = or i64 %96, %95
  %98 = mul i64 %97, -7046029288634856825
  %99 = xor i64 %93, %98
  %100 = mul i64 %99, -7046029288634856825
  %101 = add i64 %100, -8796714831421723037
  br label %104

102:                                              ; preds = %3
  %103 = add i64 %2, 2870177450012600261
  br label %104

104:                                              ; preds = %102, %54
  %105 = phi i64 [ %101, %54 ], [ %103, %102 ]
  %106 = phi i8* [ %52, %54 ], [ %0, %102 ]
  %107 = add i64 %105, %1
  %108 = getelementptr inbounds i8, i8* %106, i64 8
  %109 = icmp ugt i8* %108, %4
  br i1 %109, label %129, label %110

110:                                              ; preds = %104, %110
  %111 = phi i8* [ %127, %110 ], [ %108, %104 ]
  %112 = phi i8* [ %111, %110 ], [ %106, %104 ]
  %113 = phi i64 [ %126, %110 ], [ %107, %104 ]
  %114 = bitcast i8* %112 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = mul i64 %115, -4417276706812531889
  %117 = mul i64 %115, -7788283243316379648
  %118 = lshr i64 %116, 33
  %119 = or i64 %118, %117
  %120 = mul i64 %119, -7046029288634856825
  %121 = xor i64 %120, %113
  %122 = shl i64 %121, 27
  %123 = lshr i64 %121, 37
  %124 = or i64 %122, %123
  %125 = mul i64 %124, -7046029288634856825
  %126 = add i64 %125, -8796714831421723037
  %127 = getelementptr inbounds i8, i8* %111, i64 8
  %128 = icmp ugt i8* %127, %4
  br i1 %128, label %129, label %110

129:                                              ; preds = %110, %104
  %130 = phi i64 [ %107, %104 ], [ %126, %110 ]
  %131 = phi i8* [ %106, %104 ], [ %111, %110 ]
  %132 = getelementptr inbounds i8, i8* %131, i64 4
  %133 = icmp ugt i8* %132, %4
  br i1 %133, label %145, label %134

134:                                              ; preds = %129
  %135 = bitcast i8* %131 to i32*
  %136 = load i32, i32* %135, align 1
  %137 = zext i32 %136 to i64
  %138 = mul i64 %137, -7046029288634856825
  %139 = xor i64 %138, %130
  %140 = shl i64 %139, 23
  %141 = lshr i64 %139, 41
  %142 = or i64 %140, %141
  %143 = mul i64 %142, -4417276706812531889
  %144 = add i64 %143, 1609587929392839161
  br label %145

145:                                              ; preds = %134, %129
  %146 = phi i64 [ %144, %134 ], [ %130, %129 ]
  %147 = phi i8* [ %132, %134 ], [ %131, %129 ]
  %148 = icmp ult i8* %147, %4
  br i1 %148, label %149, label %162

149:                                              ; preds = %145, %149
  %150 = phi i8* [ %160, %149 ], [ %147, %145 ]
  %151 = phi i64 [ %159, %149 ], [ %146, %145 ]
  %152 = load i8, i8* %150, align 1
  %153 = zext i8 %152 to i64
  %154 = mul i64 %153, 2870177450012600261
  %155 = xor i64 %154, %151
  %156 = shl i64 %155, 11
  %157 = lshr i64 %155, 53
  %158 = or i64 %156, %157
  %159 = mul i64 %158, -7046029288634856825
  %160 = getelementptr inbounds i8, i8* %150, i64 1
  %161 = icmp eq i8* %160, %4
  br i1 %161, label %162, label %149

162:                                              ; preds = %149, %145
  %163 = phi i64 [ %146, %145 ], [ %159, %149 ]
  %164 = lshr i64 %163, 33
  %165 = xor i64 %164, %163
  %166 = mul i64 %165, -4417276706812531889
  %167 = lshr i64 %166, 29
  %168 = xor i64 %167, %166
  %169 = mul i64 %168, 1609587929392839161
  %170 = lshr i64 %169, 32
  %171 = xor i64 %170, %169
  ret i64 %171
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.XXH64_state_s* @XXH64_createState() local_unnamed_addr #3 {
  %1 = tail call noalias i8* @malloc(i64 88) #10
  %2 = bitcast i8* %1 to %struct.XXH64_state_s*
  ret %struct.XXH64_state_s* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH64_freeState(%struct.XXH64_state_s* nocapture) local_unnamed_addr #4 {
  %2 = bitcast %struct.XXH64_state_s* %0 to i8*
  tail call void @free(i8* %2) #10
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @XXH64_copyState(%struct.XXH64_state_s* nocapture, %struct.XXH64_state_s* nocapture readonly) local_unnamed_addr #4 {
  %3 = bitcast %struct.XXH64_state_s* %0 to i8*
  %4 = bitcast %struct.XXH64_state_s* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 88, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH64_reset(%struct.XXH64_state_s* nocapture, i64) local_unnamed_addr #4 {
  %3 = alloca { [4 x i64], i32, [2 x i32] }, align 8
  %4 = bitcast { [4 x i64], i32, [2 x i32] }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4)
  %5 = getelementptr inbounds { [4 x i64], i32, [2 x i32] }, { [4 x i64], i32, [2 x i32] }* %3, i64 0, i32 2, i64 1
  %6 = bitcast i32* %5 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 40, i1 false)
  %7 = insertelement <2 x i64> undef, i64 %1, i32 0
  %8 = shufflevector <2 x i64> %7, <2 x i64> undef, <2 x i32> zeroinitializer
  %9 = add <2 x i64> %8, <i64 6983438078262162902, i64 -4417276706812531889>
  %10 = add i64 %1, 7046029288634856825
  %11 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 0
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 1
  %13 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %13, align 8
  %14 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 3
  store i64 %1, i64* %14, align 8
  %15 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 4
  store i64 %10, i64* %15, align 8
  %16 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5
  %17 = bitcast [4 x i64]* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* nonnull align 8 %4, i64 48, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XXH64_update(%struct.XXH64_state_s* nocapture, i8*, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds i8, i8* %1, i64 %2
  %5 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %2
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = add i64 %10, %2
  %12 = icmp ult i64 %11, 32
  br i1 %12, label %13, label %20

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 0
  %15 = bitcast i64* %14 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %1, i64 %2, i1 false) #10
  %17 = trunc i64 %2 to i32
  %18 = load i32, i32* %8, align 8
  %19 = add i32 %18, %17
  br label %139

20:                                               ; preds = %3
  %21 = icmp eq i32 %9, 0
  br i1 %21, label %71, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 0
  %24 = bitcast i64* %23 to i8*
  %25 = getelementptr inbounds i8, i8* %24, i64 %10
  %26 = sub i32 32, %9
  %27 = zext i32 %26 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %1, i64 %27, i1 false) #10
  %28 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %23, align 1
  %31 = mul i64 %30, -4417276706812531889
  %32 = add i64 %31, %29
  %33 = shl i64 %32, 31
  %34 = lshr i64 %32, 33
  %35 = or i64 %33, %34
  %36 = mul i64 %35, -7046029288634856825
  store i64 %36, i64* %28, align 8
  %37 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 1
  %40 = load i64, i64* %39, align 1
  %41 = mul i64 %40, -4417276706812531889
  %42 = add i64 %41, %38
  %43 = shl i64 %42, 31
  %44 = lshr i64 %42, 33
  %45 = or i64 %43, %44
  %46 = mul i64 %45, -7046029288634856825
  store i64 %46, i64* %37, align 8
  %47 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 3
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 2
  %50 = load i64, i64* %49, align 1
  %51 = mul i64 %50, -4417276706812531889
  %52 = add i64 %51, %48
  %53 = shl i64 %52, 31
  %54 = lshr i64 %52, 33
  %55 = or i64 %53, %54
  %56 = mul i64 %55, -7046029288634856825
  store i64 %56, i64* %47, align 8
  %57 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 3
  %60 = load i64, i64* %59, align 1
  %61 = mul i64 %60, -4417276706812531889
  %62 = add i64 %61, %58
  %63 = shl i64 %62, 31
  %64 = lshr i64 %62, 33
  %65 = or i64 %63, %64
  %66 = mul i64 %65, -7046029288634856825
  store i64 %66, i64* %57, align 8
  %67 = load i32, i32* %8, align 8
  %68 = sub i32 32, %67
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %1, i64 %69
  store i32 0, i32* %8, align 8
  br label %71

71:                                               ; preds = %22, %20
  %72 = phi i8* [ %70, %22 ], [ %1, %20 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 32
  %74 = icmp ugt i8* %73, %4
  br i1 %74, label %129, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %4, i64 -32
  %77 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 2
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 3
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 4
  %84 = load i64, i64* %83, align 8
  br label %85

85:                                               ; preds = %85, %75
  %86 = phi i8* [ %72, %75 ], [ %126, %85 ]
  %87 = phi i64 [ %78, %75 ], [ %98, %85 ]
  %88 = phi i64 [ %80, %75 ], [ %107, %85 ]
  %89 = phi i64 [ %82, %75 ], [ %116, %85 ]
  %90 = phi i64 [ %84, %75 ], [ %125, %85 ]
  %91 = bitcast i8* %86 to i64*
  %92 = load i64, i64* %91, align 1
  %93 = mul i64 %92, -4417276706812531889
  %94 = add i64 %93, %87
  %95 = shl i64 %94, 31
  %96 = lshr i64 %94, 33
  %97 = or i64 %95, %96
  %98 = mul i64 %97, -7046029288634856825
  %99 = getelementptr inbounds i8, i8* %86, i64 8
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = mul i64 %101, -4417276706812531889
  %103 = add i64 %102, %88
  %104 = shl i64 %103, 31
  %105 = lshr i64 %103, 33
  %106 = or i64 %104, %105
  %107 = mul i64 %106, -7046029288634856825
  %108 = getelementptr inbounds i8, i8* %86, i64 16
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = mul i64 %110, -4417276706812531889
  %112 = add i64 %111, %89
  %113 = shl i64 %112, 31
  %114 = lshr i64 %112, 33
  %115 = or i64 %113, %114
  %116 = mul i64 %115, -7046029288634856825
  %117 = getelementptr inbounds i8, i8* %86, i64 24
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = mul i64 %119, -4417276706812531889
  %121 = add i64 %120, %90
  %122 = shl i64 %121, 31
  %123 = lshr i64 %121, 33
  %124 = or i64 %122, %123
  %125 = mul i64 %124, -7046029288634856825
  %126 = getelementptr inbounds i8, i8* %86, i64 32
  %127 = icmp ugt i8* %126, %76
  br i1 %127, label %128, label %85

128:                                              ; preds = %85
  store i64 %98, i64* %77, align 8
  store i64 %107, i64* %79, align 8
  store i64 %116, i64* %81, align 8
  store i64 %125, i64* %83, align 8
  br label %129

129:                                              ; preds = %128, %71
  %130 = phi i8* [ %126, %128 ], [ %72, %71 ]
  %131 = icmp ult i8* %130, %4
  br i1 %131, label %132, label %141

132:                                              ; preds = %129
  %133 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 0
  %134 = bitcast i64* %133 to i8*
  %135 = ptrtoint i8* %4 to i64
  %136 = ptrtoint i8* %130 to i64
  %137 = sub i64 %135, %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* align 1 %130, i64 %137, i1 false) #10
  %138 = trunc i64 %137 to i32
  br label %139

139:                                              ; preds = %132, %13
  %140 = phi i32 [ %19, %13 ], [ %138, %132 ]
  store i32 %140, i32* %8, align 8
  br label %141

141:                                              ; preds = %139, %129
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @XXH64_digest(%struct.XXH64_state_s* readonly) local_unnamed_addr #1 {
  %2 = bitcast %struct.XXH64_state_s* %0 to i8*
  %3 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 0
  %4 = bitcast i64* %3 to i8*
  %5 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 6
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, 31
  br i1 %11, label %12, label %68

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = shl i64 %14, 1
  %22 = lshr i64 %14, 63
  %23 = or i64 %21, %22
  %24 = shl i64 %16, 7
  %25 = lshr i64 %16, 57
  %26 = or i64 %24, %25
  %27 = add i64 %26, %23
  %28 = shl i64 %18, 12
  %29 = lshr i64 %18, 52
  %30 = or i64 %28, %29
  %31 = add i64 %27, %30
  %32 = shl i64 %20, 18
  %33 = lshr i64 %20, 46
  %34 = or i64 %32, %33
  %35 = add i64 %31, %34
  %36 = mul i64 %14, -4417276706812531889
  %37 = mul i64 %14, -7788283243316379648
  %38 = lshr i64 %36, 33
  %39 = or i64 %38, %37
  %40 = mul i64 %39, -7046029288634856825
  %41 = xor i64 %35, %40
  %42 = mul i64 %41, -7046029288634856825
  %43 = add i64 %42, -8796714831421723037
  %44 = mul i64 %16, -4417276706812531889
  %45 = mul i64 %16, -7788283243316379648
  %46 = lshr i64 %44, 33
  %47 = or i64 %46, %45
  %48 = mul i64 %47, -7046029288634856825
  %49 = xor i64 %43, %48
  %50 = mul i64 %49, -7046029288634856825
  %51 = add i64 %50, -8796714831421723037
  %52 = mul i64 %18, -4417276706812531889
  %53 = mul i64 %18, -7788283243316379648
  %54 = lshr i64 %52, 33
  %55 = or i64 %54, %53
  %56 = mul i64 %55, -7046029288634856825
  %57 = xor i64 %51, %56
  %58 = mul i64 %57, -7046029288634856825
  %59 = add i64 %58, -8796714831421723037
  %60 = mul i64 %20, -4417276706812531889
  %61 = mul i64 %20, -7788283243316379648
  %62 = lshr i64 %60, 33
  %63 = or i64 %62, %61
  %64 = mul i64 %63, -7046029288634856825
  %65 = xor i64 %59, %64
  %66 = mul i64 %65, -7046029288634856825
  %67 = add i64 %66, -8796714831421723037
  br label %72

68:                                               ; preds = %1
  %69 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 2870177450012600261
  br label %72

72:                                               ; preds = %68, %12
  %73 = phi i64 [ %67, %12 ], [ %71, %68 ]
  %74 = add i64 %73, %10
  %75 = getelementptr inbounds %struct.XXH64_state_s, %struct.XXH64_state_s* %0, i64 0, i32 5, i64 1
  %76 = bitcast i64* %75 to i8*
  %77 = icmp ult i8* %8, %76
  br i1 %77, label %97, label %78

78:                                               ; preds = %72, %78
  %79 = phi i8* [ %95, %78 ], [ %76, %72 ]
  %80 = phi i8* [ %79, %78 ], [ %4, %72 ]
  %81 = phi i64 [ %94, %78 ], [ %74, %72 ]
  %82 = bitcast i8* %80 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = mul i64 %83, -4417276706812531889
  %85 = mul i64 %83, -7788283243316379648
  %86 = lshr i64 %84, 33
  %87 = or i64 %86, %85
  %88 = mul i64 %87, -7046029288634856825
  %89 = xor i64 %88, %81
  %90 = shl i64 %89, 27
  %91 = lshr i64 %89, 37
  %92 = or i64 %90, %91
  %93 = mul i64 %92, -7046029288634856825
  %94 = add i64 %93, -8796714831421723037
  %95 = getelementptr inbounds i8, i8* %79, i64 8
  %96 = icmp ugt i8* %95, %8
  br i1 %96, label %97, label %78

97:                                               ; preds = %78, %72
  %98 = phi i64 [ %74, %72 ], [ %94, %78 ]
  %99 = phi i8* [ %4, %72 ], [ %79, %78 ]
  %100 = getelementptr inbounds i8, i8* %99, i64 4
  %101 = icmp ugt i8* %100, %8
  br i1 %101, label %113, label %102

102:                                              ; preds = %97
  %103 = bitcast i8* %99 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, -7046029288634856825
  %107 = xor i64 %106, %98
  %108 = shl i64 %107, 23
  %109 = lshr i64 %107, 41
  %110 = or i64 %108, %109
  %111 = mul i64 %110, -4417276706812531889
  %112 = add i64 %111, 1609587929392839161
  br label %113

113:                                              ; preds = %102, %97
  %114 = phi i64 [ %112, %102 ], [ %98, %97 ]
  %115 = phi i8* [ %100, %102 ], [ %99, %97 ]
  %116 = icmp ult i8* %115, %8
  br i1 %116, label %117, label %133

117:                                              ; preds = %113
  %118 = add nuw nsw i64 %7, 40
  %119 = getelementptr i8, i8* %2, i64 %118
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi i8* [ %131, %120 ], [ %115, %117 ]
  %122 = phi i64 [ %130, %120 ], [ %114, %117 ]
  %123 = load i8, i8* %121, align 1
  %124 = zext i8 %123 to i64
  %125 = mul i64 %124, 2870177450012600261
  %126 = xor i64 %125, %122
  %127 = shl i64 %126, 11
  %128 = lshr i64 %126, 53
  %129 = or i64 %127, %128
  %130 = mul i64 %129, -7046029288634856825
  %131 = getelementptr inbounds i8, i8* %121, i64 1
  %132 = icmp eq i8* %131, %119
  br i1 %132, label %133, label %120

133:                                              ; preds = %120, %113
  %134 = phi i64 [ %114, %113 ], [ %130, %120 ]
  %135 = lshr i64 %134, 33
  %136 = xor i64 %135, %134
  %137 = mul i64 %136, -4417276706812531889
  %138 = lshr i64 %137, 29
  %139 = xor i64 %138, %137
  %140 = mul i64 %139, 1609587929392839161
  %141 = lshr i64 %140, 32
  %142 = xor i64 %141, %140
  ret i64 %142
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden void @XXH64_canonicalFromHash(%struct.XXH64_canonical_t* nocapture, i64) local_unnamed_addr #5 {
  %3 = tail call i64 @llvm.bswap.i64(i64 %1) #10
  %4 = bitcast %struct.XXH64_canonical_t* %0 to i64*
  store i64 %3, i64* %4, align 1
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @XXH64_hashFromCanonical(%struct.XXH64_canonical_t* nocapture readonly) local_unnamed_addr #6 {
  %2 = bitcast %struct.XXH64_canonical_t* %0 to i64*
  %3 = load i64, i64* %2, align 1
  %4 = tail call i64 @llvm.bswap.i64(i64 %3) #10
  ret i64 %4
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #9

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
