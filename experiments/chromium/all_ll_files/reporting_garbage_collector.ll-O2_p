; ModuleID = '../../net/reporting/reporting_garbage_collector.cc'
source_filename = "../../net/reporting/reporting_garbage_collector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::ReportingGarbageCollector" = type { i32 (...)** }
%"class.net::ReportingContext" = type { %"struct.net::ReportingPolicy", %"class.base::Clock"*, %"class.base::TickClock"*, %"class.std::__1::unique_ptr.1", %"class.base::ObserverList", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.net::ReportingCache::PersistentReportingStore"*, %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.28" }
%"struct.net::ReportingPolicy" = type <{ i64, i64, i64, %"class.base::TimeDelta", %"struct.net::BackoffEntry::Policy", %"class.base::TimeDelta", i8, i8, [6 x i8], %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i32, i8, i8, [2 x i8] }>
%"struct.net::BackoffEntry::Policy" = type { i32, i32, double, double, i64, i64, i8 }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Clock" = type opaque
%"class.base::TickClock" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.net::ReportingUploader"* }
%"class.net::ReportingUploader" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.7" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.net::ReportingDelegate"* }
%"class.net::ReportingDelegate" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.net::ReportingCache"* }
%"class.net::ReportingCache" = type { i32 (...)** }
%"class.net::ReportingCache::PersistentReportingStore" = type { i32 (...)** }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.net::ReportingDeliveryAgent"* }
%"class.net::ReportingDeliveryAgent" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::ReportingGarbageCollector"* }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.net::ReportingNetworkChangeObserver"* }
%"class.net::ReportingNetworkChangeObserver" = type opaque
%"class.net::ReportingCacheObserver" = type { i32 (...)** }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.41 }
%class.scoped_refptr.41 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.42", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.42" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.43" }
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.48 }
%class.scoped_refptr.48 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.49", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.49" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl" = type { %"class.net::ReportingGarbageCollector", %"class.net::ReportingCacheObserver", %"class.net::ReportingContext"*, %"class.std::__1::unique_ptr.37" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.base::OneShotTimer"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"**, %"class.std::__1::__compressed_pair.113" }
%"struct.net::ReportingReport" = type <{ %"class.net::NetworkIsolationKey", %class.GURL, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.78", i32, [4 x i8], %"class.base::TimeTicks", i32, i32, i32, [4 x i8] }>
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.67" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.67" = type { %"class.absl::optional_internal::optional_data.68" }
%"class.absl::optional_internal::optional_data.68" = type { %"class.absl::optional_internal::optional_data_base.69" }
%"class.absl::optional_internal::optional_data_base.69" = type { %"class.absl::optional_internal::optional_data_dtor_base.70" }
%"class.absl::optional_internal::optional_data_dtor_base.70" = type { i8, %union.anon.71 }
%union.anon.71 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.72" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %class.GURL* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.63 }
%union.anon.63 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.base::Value"* }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.81" }
%"union.absl::variant_internal::DestructibleUnionImpl.81" = type { %"union.absl::variant_internal::DestructibleUnionImpl.82" }
%"union.absl::variant_internal::DestructibleUnionImpl.82" = type { %"union.absl::variant_internal::DestructibleUnionImpl.83" }
%"union.absl::variant_internal::DestructibleUnionImpl.83" = type { %"union.absl::variant_internal::DestructibleUnionImpl.84" }
%"union.absl::variant_internal::DestructibleUnionImpl.84" = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.net::ReportingReport"** }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZTVN3net25ReportingGarbageCollectorE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::ReportingGarbageCollector"*)* @_ZN3net25ReportingGarbageCollectorD2Ev to i8*), i8* bitcast (void (%"class.net::ReportingGarbageCollector"*)* @_ZN3net25ReportingGarbageCollectorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE = internal unnamed_addr constant { [6 x i8*], [4 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImplD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImplD0Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*, %"class.base::OneShotTimer"*)* @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl18SetTimerForTestingENSt3__110unique_ptrIN4base12OneShotTimerENS2_14default_deleteIS5_EEEE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl16OnReportsUpdatedEv to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* @_ZThn8_N3net12_GLOBAL__N_129ReportingGarbageCollectorImpl16OnReportsUpdatedEv to i8*), i8* bitcast (void (%"class.net::ReportingCacheObserver"*)* @_ZN3net22ReportingCacheObserver16OnClientsUpdatedEv to i8*)] }, align 8
@.str = private unnamed_addr constant [17 x i8] c"OnReportsUpdated\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"../../net/reporting/reporting_garbage_collector.cc\00", align 1

@_ZN3net25ReportingGarbageCollectorD1Ev = hidden unnamed_addr alias void (%"class.net::ReportingGarbageCollector"*), void (%"class.net::ReportingGarbageCollector"*)* @_ZN3net25ReportingGarbageCollectorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::ReportingGarbageCollector"* @_ZN3net25ReportingGarbageCollector6CreateEPNS_16ReportingContextE(%"class.net::ReportingContext"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.net::ReportingContext"* %0 to i64
  %3 = tail call i8* @_Znwm(i64 32) #11
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net25ReportingGarbageCollectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to %"class.net::ReportingCacheObserver"*
  tail call void @_ZN3net22ReportingCacheObserverC2Ev(%"class.net::ReportingCacheObserver"* %6) #12
  %7 = bitcast i8* %3 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 16
  %9 = bitcast i8* %8 to %"class.net::ReportingContext"**
  %10 = bitcast i8* %8 to i64*
  store i64 %2, i64* %10, align 8
  %11 = tail call i8* @_Znwm(i64 128) #11
  %12 = bitcast i8* %11 to %"class.base::OneShotTimer"*
  tail call void @_ZN4base12OneShotTimerC1Ev(%"class.base::OneShotTimer"* nonnull %12) #12
  %13 = getelementptr inbounds i8, i8* %3, i64 24
  %14 = bitcast i8* %13 to i8**
  store i8* %11, i8** %14, align 8
  %15 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %9, align 8
  tail call void @_ZN3net16ReportingContext16AddCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"* %15, %"class.net::ReportingCacheObserver"* %6) #12
  %16 = bitcast i8* %3 to %"class.net::ReportingGarbageCollector"*
  ret %"class.net::ReportingGarbageCollector"* %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net25ReportingGarbageCollectorD2Ev(%"class.net::ReportingGarbageCollector"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3net25ReportingGarbageCollectorD0Ev(%"class.net::ReportingGarbageCollector"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN3net22ReportingCacheObserverC2Ev(%"class.net::ReportingCacheObserver"*) unnamed_addr #6

declare void @_ZN3net16ReportingContext16AddCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"*, %"class.net::ReportingCacheObserver"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImplD2Ev(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 1
  %3 = bitcast %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 2
  %5 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %4, align 8
  tail call void @_ZN3net16ReportingContext19RemoveCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"* %5, %"class.net::ReportingCacheObserver"* %2) #12
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %7 = load %"class.base::OneShotTimer"*, %"class.base::OneShotTimer"** %6, align 8
  store %"class.base::OneShotTimer"* null, %"class.base::OneShotTimer"** %6, align 8
  %8 = icmp eq %"class.base::OneShotTimer"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.base::OneShotTimer"* %7 to void (%"class.base::OneShotTimer"*)***
  %11 = load void (%"class.base::OneShotTimer"*)**, void (%"class.base::OneShotTimer"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %11, i64 1
  %13 = load void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %12, align 8
  tail call void %13(%"class.base::OneShotTimer"* nonnull %7) #12
  br label %14

14:                                               ; preds = %1, %9
  tail call void @_ZN3net22ReportingCacheObserverD2Ev(%"class.net::ReportingCacheObserver"* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImplD0Ev(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 1
  %3 = bitcast %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [4 x i8*] }, { [6 x i8*], [4 x i8*] }* @_ZTVN3net12_GLOBAL__N_129ReportingGarbageCollectorImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 2
  %5 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %4, align 8
  tail call void @_ZN3net16ReportingContext19RemoveCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"* %5, %"class.net::ReportingCacheObserver"* %2) #12
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %7 = load %"class.base::OneShotTimer"*, %"class.base::OneShotTimer"** %6, align 8
  store %"class.base::OneShotTimer"* null, %"class.base::OneShotTimer"** %6, align 8
  %8 = icmp eq %"class.base::OneShotTimer"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.base::OneShotTimer"* %7 to void (%"class.base::OneShotTimer"*)***
  %11 = load void (%"class.base::OneShotTimer"*)**, void (%"class.base::OneShotTimer"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %11, i64 1
  %13 = load void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %12, align 8
  tail call void %13(%"class.base::OneShotTimer"* nonnull %7) #12
  br label %14

14:                                               ; preds = %1, %9
  tail call void @_ZN3net22ReportingCacheObserverD2Ev(%"class.net::ReportingCacheObserver"* %2) #12
  %15 = bitcast %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %15) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl18SetTimerForTestingENSt3__110unique_ptrIN4base12OneShotTimerENS2_14default_deleteIS5_EEEE(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* nocapture, %"class.base::OneShotTimer"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.base::OneShotTimer"* %1 to i64
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.37"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.base::OneShotTimer"*, %"class.base::OneShotTimer"** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr.37"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %"class.base::OneShotTimer"* %6, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.base::OneShotTimer"* %6 to void (%"class.base::OneShotTimer"*)***
  %11 = load void (%"class.base::OneShotTimer"*)**, void (%"class.base::OneShotTimer"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %11, i64 1
  %13 = load void (%"class.base::OneShotTimer"*)*, void (%"class.base::OneShotTimer"*)** %12, align 8
  tail call void %13(%"class.base::OneShotTimer"* nonnull %6) #12
  br label %14

14:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl16OnReportsUpdatedEv(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Location", align 8
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.base::OneShotTimer"*, %"class.base::OneShotTimer"** %4, align 8
  %6 = getelementptr inbounds %"class.base::OneShotTimer", %"class.base::OneShotTimer"* %5, i64 0, i32 0
  %7 = tail call zeroext i1 @_ZNK4base8internal9TimerBase9IsRunningEv(%"class.base::internal::TimerBase"* %6) #12
  br i1 %7, label %28, label %8

8:                                                ; preds = %1
  %9 = load %"class.base::OneShotTimer"*, %"class.base::OneShotTimer"** %4, align 8
  %10 = bitcast %"class.base::Location"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #12
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 47) #12
  %11 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 2
  %12 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %11, align 8
  %13 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %12, i64 0, i32 0, i32 9, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0 to i64
  %16 = call i8* @_Znwm(i64 56) #11, !noalias !2
  %17 = bitcast i8* %16 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %17, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE) #12, !noalias !2
  %18 = getelementptr inbounds i8, i8* %16, i64 32
  %19 = bitcast i8* %18 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl14CollectGarbageEv to i64), i64 0>, <2 x i64>* %19, align 8, !noalias !2
  %20 = getelementptr inbounds i8, i8* %16, i64 48
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %21, align 8, !noalias !2
  %22 = bitcast %"class.base::OnceCallback"* %3 to i8**
  store i8* %16, i8** %22, align 8, !alias.scope !2
  %23 = bitcast %"class.base::OneShotTimer"* %9 to void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)***
  %24 = load void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)**, void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)*, void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)** %24, i64 7
  %26 = load void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)*, void (%"class.base::OneShotTimer"*, %"class.base::Location"*, i64, %"class.base::OnceCallback"*)** %25, align 8
  call void %26(%"class.base::OneShotTimer"* %9, %"class.base::Location"* nonnull dereferenceable(32) %2, i64 %14, %"class.base::OnceCallback"* nonnull %3) #12
  %27 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %27) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #12
  br label %28

28:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZThn8_N3net12_GLOBAL__N_129ReportingGarbageCollectorImpl16OnReportsUpdatedEv(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 -1, i32 3
  %3 = bitcast %"class.std::__1::unique_ptr.37"* %2 to %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*
  tail call void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl16OnReportsUpdatedEv(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %3)
  ret void
}

declare void @_ZN3net22ReportingCacheObserver16OnClientsUpdatedEv(%"class.net::ReportingCacheObserver"*) unnamed_addr #6

declare void @_ZN4base12OneShotTimerC1Ev(%"class.base::OneShotTimer"*) unnamed_addr #6

declare void @_ZN3net16ReportingContext19RemoveCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"*, %"class.net::ReportingCacheObserver"*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN3net22ReportingCacheObserverD2Ev(%"class.net::ReportingCacheObserver"*) unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare zeroext i1 @_ZNK4base8internal9TimerBase9IsRunningEv(%"class.base::internal::TimerBase"*) local_unnamed_addr #6

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_129ReportingGarbageCollectorImpl14CollectGarbageEv(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*) #0 align 2 {
  %2 = alloca %"class.std::__1::vector.59", align 8
  %3 = alloca %"class.std::__1::vector.59", align 8
  %4 = alloca %"class.std::__1::vector.59", align 8
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 2
  %6 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  %7 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %6, i64 0, i32 2
  %8 = load %"class.base::TickClock"*, %"class.base::TickClock"** %7, align 8
  %9 = bitcast %"class.base::TickClock"* %8 to i64 (%"class.base::TickClock"*)***
  %10 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %9, align 8
  %11 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %10, i64 2
  %12 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %11, align 8
  %13 = tail call i64 %12(%"class.base::TickClock"* %8) #12
  %14 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  %15 = bitcast %"class.std::__1::vector.59"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #12
  %16 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %2, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %2, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #12
  %18 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %14, i64 0, i32 6, i32 0, i32 0, i32 0
  %19 = load %"class.net::ReportingCache"*, %"class.net::ReportingCache"** %18, align 8
  %20 = bitcast %"class.net::ReportingCache"* %19 to void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)***
  %21 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)**, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)** %21, i64 3
  %23 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*)** %22, align 8
  call void %23(%"class.net::ReportingCache"* %19, %"class.std::__1::vector.59"* nonnull %2) #12
  %24 = bitcast %"class.std::__1::vector.59"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %3, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %3, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #12
  %28 = bitcast %"class.std::__1::vector.59"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12
  %29 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %4, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %4, i64 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 24, i1 false) #12
  %32 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %16, align 8
  %33 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %17, align 8
  %34 = icmp eq %"struct.net::ReportingReport"** %32, %33
  br i1 %34, label %44, label %35

35:                                               ; preds = %1
  %36 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %14, i64 0, i32 0, i32 12
  %37 = bitcast %"struct.net::ReportingReport"*** %26 to i64*
  %38 = bitcast %"class.std::__1::vector.59"* %3 to i64*
  %39 = bitcast %"struct.net::ReportingReport"*** %27 to i64*
  %40 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %14, i64 0, i32 0, i32 10, i32 0
  %41 = bitcast %"struct.net::ReportingReport"*** %30 to i64*
  %42 = bitcast %"class.std::__1::vector.59"* %4 to i64*
  %43 = bitcast %"struct.net::ReportingReport"*** %31 to i64*
  br label %83

44:                                               ; preds = %203, %1
  %45 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  %46 = getelementptr inbounds %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl", %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %0, i64 0, i32 1
  call void @_ZN3net16ReportingContext19RemoveCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"* %45, %"class.net::ReportingCacheObserver"* %46) #12
  %47 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  %48 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %47, i64 0, i32 6, i32 0, i32 0, i32 0
  %49 = load %"class.net::ReportingCache"*, %"class.net::ReportingCache"** %48, align 8
  %50 = bitcast %"class.net::ReportingCache"* %49 to void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)***
  %51 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)**, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)** %51, i64 9
  %53 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)** %52, align 8
  call void %53(%"class.net::ReportingCache"* %49, %"class.std::__1::vector.59"* nonnull dereferenceable(24) %3, i32 3) #12
  %54 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  %55 = getelementptr inbounds %"class.net::ReportingContext", %"class.net::ReportingContext"* %54, i64 0, i32 6, i32 0, i32 0, i32 0
  %56 = load %"class.net::ReportingCache"*, %"class.net::ReportingCache"** %55, align 8
  %57 = bitcast %"class.net::ReportingCache"* %56 to void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)***
  %58 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)**, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)** %58, i64 9
  %60 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector.59"*, i32)** %59, align 8
  call void %60(%"class.net::ReportingCache"* %56, %"class.std::__1::vector.59"* nonnull dereferenceable(24) %4, i32 4) #12
  %61 = load %"class.net::ReportingContext"*, %"class.net::ReportingContext"** %5, align 8
  call void @_ZN3net16ReportingContext16AddCacheObserverEPNS_22ReportingCacheObserverE(%"class.net::ReportingContext"* %61, %"class.net::ReportingCacheObserver"* %46) #12
  %62 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %29, align 8
  %63 = icmp eq %"struct.net::ReportingReport"** %62, null
  br i1 %63, label %68, label %64

64:                                               ; preds = %44
  %65 = ptrtoint %"struct.net::ReportingReport"** %62 to i64
  %66 = bitcast %"struct.net::ReportingReport"*** %30 to i64*
  store i64 %65, i64* %66, align 8
  %67 = bitcast %"struct.net::ReportingReport"** %62 to i8*
  call void @_ZdlPv(i8* %67) #11
  br label %68

68:                                               ; preds = %44, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12
  %69 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %25, align 8
  %70 = icmp eq %"struct.net::ReportingReport"** %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %68
  %72 = ptrtoint %"struct.net::ReportingReport"** %69 to i64
  %73 = bitcast %"struct.net::ReportingReport"*** %26 to i64*
  store i64 %72, i64* %73, align 8
  %74 = bitcast %"struct.net::ReportingReport"** %69 to i8*
  call void @_ZdlPv(i8* %74) #11
  br label %75

75:                                               ; preds = %68, %71
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #12
  %76 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %16, align 8
  %77 = icmp eq %"struct.net::ReportingReport"** %76, null
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = ptrtoint %"struct.net::ReportingReport"** %76 to i64
  %80 = bitcast %"struct.net::ReportingReport"*** %17 to i64*
  store i64 %79, i64* %80, align 8
  %81 = bitcast %"struct.net::ReportingReport"** %76 to i8*
  call void @_ZdlPv(i8* %81) #11
  br label %82

82:                                               ; preds = %75, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #12
  ret void

83:                                               ; preds = %35, %203
  %84 = phi %"struct.net::ReportingReport"** [ %32, %35 ], [ %204, %203 ]
  %85 = load %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %84, align 8
  %86 = ptrtoint %"struct.net::ReportingReport"* %85 to i64
  %87 = getelementptr inbounds %"struct.net::ReportingReport", %"struct.net::ReportingReport"* %85, i64 0, i32 9
  %88 = load i32, i32* %87, align 8
  %89 = load i32, i32* %36, align 8
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %144, label %91

91:                                               ; preds = %83
  %92 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %26, align 8
  %93 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %27, align 8
  %94 = icmp eq %"struct.net::ReportingReport"** %92, %93
  %95 = ptrtoint %"struct.net::ReportingReport"** %93 to i64
  br i1 %94, label %100, label %96

96:                                               ; preds = %91
  %97 = bitcast %"struct.net::ReportingReport"** %92 to i64*
  store i64 %86, i64* %97, align 8
  %98 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %92, i64 1
  %99 = ptrtoint %"struct.net::ReportingReport"** %98 to i64
  store i64 %99, i64* %37, align 8
  br label %203

100:                                              ; preds = %91
  %101 = ptrtoint %"struct.net::ReportingReport"** %92 to i64
  %102 = load i64, i64* %38, align 8
  %103 = sub i64 %101, %102
  %104 = ashr exact i64 %103, 3
  %105 = add nsw i64 %104, 1
  %106 = icmp ugt i64 %105, 2305843009213693951
  br i1 %106, label %107, label %109

107:                                              ; preds = %100
  %108 = bitcast %"class.std::__1::vector.59"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %108) #13
  unreachable

109:                                              ; preds = %100
  %110 = sub i64 %95, %102
  %111 = ashr exact i64 %110, 3
  %112 = icmp ult i64 %111, 1152921504606846975
  br i1 %112, label %113, label %121

113:                                              ; preds = %109
  %114 = ashr exact i64 %110, 2
  %115 = icmp ult i64 %114, %105
  %116 = select i1 %115, i64 %105, i64 %114
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %113
  %119 = icmp ugt i64 %116, 2305843009213693951
  br i1 %119, label %120, label %121

120:                                              ; preds = %118
  call void @abort() #13
  unreachable

121:                                              ; preds = %118, %109
  %122 = phi i64 [ %116, %118 ], [ 2305843009213693951, %109 ]
  %123 = shl i64 %122, 3
  %124 = call i8* @_Znwm(i64 %123) #11
  %125 = bitcast i8* %124 to %"struct.net::ReportingReport"**
  br label %126

126:                                              ; preds = %121, %113
  %127 = phi i64 [ %122, %121 ], [ 0, %113 ]
  %128 = phi i8* [ %124, %121 ], [ null, %113 ]
  %129 = phi %"struct.net::ReportingReport"** [ %125, %121 ], [ null, %113 ]
  %130 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %129, i64 %104
  %131 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %129, i64 %127
  %132 = ptrtoint %"struct.net::ReportingReport"** %131 to i64
  %133 = bitcast %"struct.net::ReportingReport"** %130 to i64*
  store i64 %86, i64* %133, align 8
  %134 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %130, i64 1
  %135 = ptrtoint %"struct.net::ReportingReport"** %134 to i64
  %136 = ptrtoint %"struct.net::ReportingReport"** %129 to i64
  %137 = icmp sgt i64 %103, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %126
  %139 = inttoptr i64 %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 8 %139, i64 %103, i1 false) #12
  br label %140

140:                                              ; preds = %138, %126
  store i64 %136, i64* %38, align 8
  store i64 %135, i64* %37, align 8
  store i64 %132, i64* %39, align 8
  %141 = icmp eq i64 %102, 0
  br i1 %141, label %203, label %142

142:                                              ; preds = %140
  %143 = inttoptr i64 %102 to i8*
  call void @_ZdlPv(i8* %143) #11
  br label %203

144:                                              ; preds = %83
  %145 = getelementptr inbounds %"struct.net::ReportingReport", %"struct.net::ReportingReport"* %85, i64 0, i32 8, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = sub nsw i64 %13, %146
  %148 = load i64, i64* %40, align 8
  %149 = icmp slt i64 %147, %148
  br i1 %149, label %203, label %150

150:                                              ; preds = %144
  %151 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %30, align 8
  %152 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %31, align 8
  %153 = icmp eq %"struct.net::ReportingReport"** %151, %152
  %154 = ptrtoint %"struct.net::ReportingReport"** %152 to i64
  br i1 %153, label %159, label %155

155:                                              ; preds = %150
  %156 = bitcast %"struct.net::ReportingReport"** %151 to i64*
  store i64 %86, i64* %156, align 8
  %157 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %151, i64 1
  %158 = ptrtoint %"struct.net::ReportingReport"** %157 to i64
  store i64 %158, i64* %41, align 8
  br label %203

159:                                              ; preds = %150
  %160 = ptrtoint %"struct.net::ReportingReport"** %151 to i64
  %161 = load i64, i64* %42, align 8
  %162 = sub i64 %160, %161
  %163 = ashr exact i64 %162, 3
  %164 = add nsw i64 %163, 1
  %165 = icmp ugt i64 %164, 2305843009213693951
  br i1 %165, label %166, label %168

166:                                              ; preds = %159
  %167 = bitcast %"class.std::__1::vector.59"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %167) #13
  unreachable

168:                                              ; preds = %159
  %169 = sub i64 %154, %161
  %170 = ashr exact i64 %169, 3
  %171 = icmp ult i64 %170, 1152921504606846975
  br i1 %171, label %172, label %180

172:                                              ; preds = %168
  %173 = ashr exact i64 %169, 2
  %174 = icmp ult i64 %173, %164
  %175 = select i1 %174, i64 %164, i64 %173
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %185, label %177

177:                                              ; preds = %172
  %178 = icmp ugt i64 %175, 2305843009213693951
  br i1 %178, label %179, label %180

179:                                              ; preds = %177
  call void @abort() #13
  unreachable

180:                                              ; preds = %177, %168
  %181 = phi i64 [ %175, %177 ], [ 2305843009213693951, %168 ]
  %182 = shl i64 %181, 3
  %183 = call i8* @_Znwm(i64 %182) #11
  %184 = bitcast i8* %183 to %"struct.net::ReportingReport"**
  br label %185

185:                                              ; preds = %180, %172
  %186 = phi i64 [ %181, %180 ], [ 0, %172 ]
  %187 = phi i8* [ %183, %180 ], [ null, %172 ]
  %188 = phi %"struct.net::ReportingReport"** [ %184, %180 ], [ null, %172 ]
  %189 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %188, i64 %163
  %190 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %188, i64 %186
  %191 = ptrtoint %"struct.net::ReportingReport"** %190 to i64
  %192 = bitcast %"struct.net::ReportingReport"** %189 to i64*
  store i64 %86, i64* %192, align 8
  %193 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %189, i64 1
  %194 = ptrtoint %"struct.net::ReportingReport"** %193 to i64
  %195 = ptrtoint %"struct.net::ReportingReport"** %188 to i64
  %196 = icmp sgt i64 %162, 0
  br i1 %196, label %197, label %199

197:                                              ; preds = %185
  %198 = inttoptr i64 %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* align 8 %198, i64 %162, i1 false) #12
  br label %199

199:                                              ; preds = %197, %185
  store i64 %195, i64* %42, align 8
  store i64 %194, i64* %41, align 8
  store i64 %191, i64* %43, align 8
  %200 = icmp eq i64 %161, 0
  br i1 %200, label %203, label %201

201:                                              ; preds = %199
  %202 = inttoptr i64 %161 to i8*
  call void @_ZdlPv(i8* %202) #11
  br label %203

203:                                              ; preds = %144, %201, %199, %155, %142, %140, %96
  %204 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %84, i64 1
  %205 = icmp eq %"struct.net::ReportingReport"** %204, %33
  br i1 %205, label %44, label %83
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"* nocapture readonly) #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)**
  %21 = load void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)*, void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.net::(anonymous namespace)::ReportingGarbageCollectorImpl"* %12) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS_8internal17UnretainedWrapperIS3_EEEEENS_12OnceCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_129ReportingGarbageCollectorImplEFvvEJNS_8internal17UnretainedWrapperIS3_EEEEENS_12OnceCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
