; ModuleID = '../../third_party/skia/src/utils/SkPolyUtils.cpp'
source_filename = "../../third_party/skia/src/utils/SkPolyUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkAutoSTMalloc = type { %struct.OffsetEdge*, %union.anon }
%struct.OffsetEdge = type { %struct.OffsetEdge*, %struct.OffsetEdge*, %struct.OffsetSegment, %struct.SkPoint, float, i16, i16 }
%struct.OffsetSegment = type { %struct.SkPoint, %struct.SkPoint }
%struct.SkPoint = type { float, float }
%union.anon = type { [1 x %struct.OffsetEdge], [3024 x i8] }
%class.ActiveEdgeList = type { %struct.ActiveEdge, i8*, i32, i32 }
%struct.ActiveEdge = type <{ %struct.OffsetSegment, i16, i16, [4 x i8], [2 x %struct.ActiveEdge*], %struct.ActiveEdge*, %struct.ActiveEdge*, i32, [4 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray.5 = type { %class.SkTInternalLList*, i32, i32 }
%class.SkTInternalLList = type { %struct.TriangulationVertex*, %struct.TriangulationVertex* }
%struct.TriangulationVertex = type <{ %struct.TriangulationVertex*, %struct.TriangulationVertex*, %struct.SkPoint, i32, i16, i16, i16, [6 x i8] }>
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDPQueue = type { %class.SkTDArray.0 }
%class.SkTDArray.0 = type { %struct.Vertex*, i32, i32 }
%struct.Vertex = type { %struct.SkPoint, i16, i16, i16, i16 }
%class.SkTDArray.1 = type { i32*, i32, i32 }
%class.SkAutoSTMalloc.2 = type { %struct.SkPoint*, %union.anon.3 }
%union.anon.3 = type { [128 x i32] }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [3072 x i8] }
%class.SkTArray = type { %struct.OffsetEdge*, i64 }
%class.SkTDArray.4 = type { i16*, i32, i32 }
%class.SkAutoSTArray = type { i32, %struct.TriangulationVertex*, [2560 x i8] }
%class.ReflexHash = type { %struct.SkRect, i32, i32, i32, %struct.SkPoint, %class.SkTDArray.5 }

$_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE6insertES0_ = comdat any

$_ZN14ActiveEdgeList6insertERK7SkPointS2_tt = comdat any

$_ZN14ActiveEdgeList6removeERK7SkPointS2_tt = comdat any

$_ZN14ActiveEdgeList7replaceERK7SkPointS2_S2_ttt = comdat any

$_ZN10ReflexHash4initERK6SkRecti = comdat any

$_ZNK10ReflexHash13checkTriangleERK7SkPointS2_S2_tt = comdat any

$_ZNK10ActiveEdge9intersectERK7SkPointS2_tt = comdat any

$_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE24percolateDownIfNecessaryEi = comdat any

$_ZN8SkTArrayI10OffsetEdgeLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@__const._Z20SkInsetConvexPolygonPK7SkPointifP9SkTDArrayIS_E.edgeData = private unnamed_addr constant %class.SkAutoSTMalloc { %struct.OffsetEdge* inttoptr (i64 -6148914691236517206 to %struct.OffsetEdge*), %union.anon { [1 x %struct.OffsetEdge] [%struct.OffsetEdge { %struct.OffsetEdge* inttoptr (i64 -6148914691236517206 to %struct.OffsetEdge*), %struct.OffsetEdge* inttoptr (i64 -6148914691236517206 to %struct.OffsetEdge*), %struct.OffsetSegment { %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, i16 -21846, i16 -21846 }], [3024 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" } }, align 8
@__const._Z17SkIsSimplePolygonPK7SkPointi.sweepLine = private unnamed_addr constant %class.ActiveEdgeList { %struct.ActiveEdge <{ %struct.OffsetSegment { %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, i16 -21846, i16 -21846, [4 x i8] c"\AA\AA\AA\AA", [2 x %struct.ActiveEdge*] [%struct.ActiveEdge* inttoptr (i64 -6148914691236517206 to %struct.ActiveEdge*), %struct.ActiveEdge* inttoptr (i64 -6148914691236517206 to %struct.ActiveEdge*)], %struct.ActiveEdge* inttoptr (i64 -6148914691236517206 to %struct.ActiveEdge*), %struct.ActiveEdge* inttoptr (i64 -6148914691236517206 to %struct.ActiveEdge*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, align 8
@__const._Z26SkTriangulateSimplePolygonPK7SkPointPtiP9SkTDArrayItE.reflexHash = private unnamed_addr constant { %struct.SkRect, i32, i32, i32, %struct.SkPoint, [4 x i8], %class.SkTDArray.5 } { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, i32 -1431655766, i32 -1431655766, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [4 x i8] c"\AA\AA\AA\AA", %class.SkTDArray.5 { %class.SkTInternalLList* inttoptr (i64 -6148914691236517206 to %class.SkTInternalLList*), i32 -1431655766, i32 -1431655766 } }, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_Z19SkGetPolygonWindingPK7SkPointi(%struct.SkPoint* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp slt i32 %1, 3
  br i1 %3, label %70, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %9, %6
  %11 = zext i32 %1 to i64
  %12 = add nsw i64 %11, -2
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 3
  br i1 %14, label %17, label %15

15:                                               ; preds = %4
  %16 = sub nsw i64 %12, %13
  br label %41

17:                                               ; preds = %41, %4
  %18 = phi float [ undef, %4 ], [ %66, %41 ]
  %19 = phi i64 [ 2, %4 ], [ %67, %41 ]
  %20 = phi float [ 0.000000e+00, %4 ], [ %66, %41 ]
  %21 = phi <2 x float> [ %10, %4 ], [ %60, %41 ]
  %22 = icmp eq i64 %13, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %19, i32 0
  %25 = bitcast float* %24 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fsub <2 x float> %26, %6
  %28 = shufflevector <2 x float> %21, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %29 = fmul <2 x float> %28, %27
  %30 = extractelement <2 x float> %29, i32 1
  %31 = extractelement <2 x float> %29, i32 0
  %32 = fsub float %30, %31
  %33 = fadd float %20, %32
  br label %34

34:                                               ; preds = %17, %23
  %35 = phi float [ %18, %17 ], [ %33, %23 ]
  %36 = tail call float @llvm.fabs.f32(float %35) #11
  %37 = fcmp ole float %36, 0x3E70000000000000
  %38 = fcmp ogt float %35, 0.000000e+00
  %39 = select i1 %38, i32 1, i32 -1
  %40 = select i1 %37, i32 0, i32 %39
  br label %70

41:                                               ; preds = %41, %15
  %42 = phi i64 [ 2, %15 ], [ %67, %41 ]
  %43 = phi float [ 0.000000e+00, %15 ], [ %66, %41 ]
  %44 = phi <2 x float> [ %10, %15 ], [ %60, %41 ]
  %45 = phi i64 [ %16, %15 ], [ %68, %41 ]
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %42, i32 0
  %47 = bitcast float* %46 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 4
  %49 = fsub <2 x float> %48, %6
  %50 = shufflevector <2 x float> %44, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %51 = fmul <2 x float> %50, %49
  %52 = extractelement <2 x float> %51, i32 0
  %53 = extractelement <2 x float> %51, i32 1
  %54 = fsub float %53, %52
  %55 = fadd float %43, %54
  %56 = or i64 %42, 1
  %57 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %56, i32 0
  %58 = bitcast float* %57 to <2 x float>*
  %59 = load <2 x float>, <2 x float>* %58, align 4
  %60 = fsub <2 x float> %59, %6
  %61 = shufflevector <2 x float> %49, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %62 = fmul <2 x float> %61, %60
  %63 = extractelement <2 x float> %62, i32 0
  %64 = extractelement <2 x float> %62, i32 1
  %65 = fsub float %64, %63
  %66 = fadd float %55, %65
  %67 = add nuw nsw i64 %42, 2
  %68 = add i64 %45, -2
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %17, label %41

70:                                               ; preds = %2, %34
  %71 = phi i32 [ %40, %34 ], [ 0, %2 ]
  ret i32 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z21compute_offset_vectorRK7SkPointS1_fiPS_(%struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkPoint* nocapture readonly dereferenceable(8), float, i32, %struct.SkPoint* nocapture) local_unnamed_addr #2 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fsub float %10, %12
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fsub float %15, %17
  %19 = insertelement <2 x float> undef, float %13, i32 0
  %20 = insertelement <2 x float> %19, float %18, i32 1
  store <2 x float> %20, <2 x float>* %6, align 8
  %21 = sitofp i32 %3 to float
  %22 = fmul float %21, %2
  %23 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %7, float %22) #11
  br i1 %23, label %24, label %28

24:                                               ; preds = %5
  %25 = bitcast <2 x float>* %6 to i64*
  %26 = bitcast %struct.SkPoint* %4 to i64*
  %27 = load i64, i64* %25, align 8
  store i64 %27, i64* %26, align 4
  br label %28

28:                                               ; preds = %5, %24
  %29 = phi i1 [ true, %24 ], [ false, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  ret i1 %29
}

declare zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint*, float) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z17SkIsConvexPolygonPK7SkPointi(%struct.SkPoint* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp slt i32 %1, 3
  br i1 %3, label %73, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %9, %6
  %11 = zext i32 %1 to i64
  %12 = extractelement <2 x float> %6, i32 0
  %13 = fmul float %12, 0.000000e+00
  %14 = extractelement <2 x float> %6, i32 1
  %15 = fmul float %13, %14
  %16 = fcmp ord float %15, 0.000000e+00
  br i1 %16, label %17, label %73

17:                                               ; preds = %4
  %18 = add nsw i32 %1, -1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %19, i32 0
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fsub <2 x float> %6, %22
  %24 = fsub <2 x float> %6, %6
  br label %25

25:                                               ; preds = %17, %59
  %26 = phi <2 x float> [ %23, %17 ], [ %27, %59 ]
  %27 = phi <2 x float> [ %10, %17 ], [ %61, %59 ]
  %28 = phi <2 x float> [ %24, %17 ], [ %29, %59 ]
  %29 = phi <2 x float> [ %10, %17 ], [ %60, %59 ]
  %30 = phi float [ 0.000000e+00, %17 ], [ %65, %59 ]
  %31 = phi i32 [ 1, %17 ], [ %52, %59 ]
  %32 = phi float [ 0.000000e+00, %17 ], [ %63, %59 ]
  %33 = phi i64 [ 0, %17 ], [ %57, %59 ]
  %34 = phi <2 x float> [ %9, %17 ], [ %56, %59 ]
  %35 = shufflevector <2 x float> %27, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %36 = fmul <2 x float> %26, %35
  %37 = extractelement <2 x float> %36, i32 0
  %38 = extractelement <2 x float> %36, i32 1
  %39 = fsub float %37, %38
  %40 = fmul float %30, %39
  %41 = fcmp olt float %40, 0.000000e+00
  br i1 %41, label %73, label %42

42:                                               ; preds = %25
  %43 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %44 = fmul <2 x float> %28, %43
  %45 = extractelement <2 x float> %44, i32 0
  %46 = extractelement <2 x float> %44, i32 1
  %47 = fsub float %45, %46
  %48 = fmul float %47, %32
  %49 = fcmp olt float %48, 0.000000e+00
  br i1 %49, label %73, label %50

50:                                               ; preds = %42
  %51 = add nsw i32 %31, 1
  %52 = srem i32 %51, %1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %53, i32 0
  %55 = bitcast float* %54 to <2 x float>*
  %56 = load <2 x float>, <2 x float>* %55, align 4
  %57 = add nuw nsw i64 %33, 1
  %58 = icmp eq i64 %57, %11
  br i1 %58, label %73, label %59

59:                                               ; preds = %50
  %60 = fsub <2 x float> %56, %6
  %61 = fsub <2 x float> %56, %34
  %62 = fcmp une float %47, 0.000000e+00
  %63 = select i1 %62, float %47, float %32
  %64 = fcmp une float %39, 0.000000e+00
  %65 = select i1 %64, float %39, float %30
  %66 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %57, i32 0
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %57, i32 1
  %69 = load float, float* %68, align 4
  %70 = fmul float %67, 0.000000e+00
  %71 = fmul float %70, %69
  %72 = fcmp ord float %71, 0.000000e+00
  br i1 %72, label %25, label %73

73:                                               ; preds = %50, %42, %25, %59, %4, %2
  %74 = phi i1 [ false, %2 ], [ false, %4 ], [ false, %59 ], [ false, %25 ], [ false, %42 ], [ true, %50 ]
  ret i1 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z20SkInsetConvexPolygonPK7SkPointifP9SkTDArrayIS_E(%struct.SkPoint* nocapture readonly, i32, float, %class.SkTDArray*) local_unnamed_addr #2 {
  %5 = alloca %class.SkAutoSTMalloc, align 8
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.SkPoint*
  %12 = icmp slt i32 %1, 3
  br i1 %12, label %629, label %13

13:                                               ; preds = %4
  %14 = icmp sgt i32 %1, 65535
  %15 = fcmp olt float %2, 0xBF30000000000000
  %16 = or i1 %14, %15
  br i1 %16, label %629, label %17

17:                                               ; preds = %13
  %18 = bitcast float %2 to i32
  %19 = and i32 %18, 2139095040
  %20 = icmp eq i32 %19, 2139095040
  br i1 %20, label %629, label %21

21:                                               ; preds = %17
  %22 = fcmp ugt float %2, 0x3F30000000000000
  br i1 %22, label %62, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 2
  %25 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 1
  %26 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 0
  %27 = bitcast %class.SkTDArray* %3 to i8**
  %28 = zext i32 %1 to i64
  br label %29

29:                                               ; preds = %53, %23
  %30 = phi i64 [ 0, %23 ], [ %60, %53 ]
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %30
  %32 = load i32, i32* %24, align 4
  %33 = add i32 %32, 1
  %34 = icmp sgt i32 %33, -1
  br i1 %34, label %36, label %35

35:                                               ; preds = %29
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

36:                                               ; preds = %29
  %37 = load i32, i32* %25, align 8
  %38 = icmp slt i32 %37, %33
  br i1 %38, label %41, label %39

39:                                               ; preds = %36
  %40 = load %struct.SkPoint*, %struct.SkPoint** %26, align 8
  br label %53

41:                                               ; preds = %36
  %42 = add i32 %32, 5
  %43 = lshr i32 %42, 2
  %44 = add nuw i32 %43, %42
  %45 = icmp sgt i32 %44, -1
  br i1 %45, label %47, label %46

46:                                               ; preds = %41
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

47:                                               ; preds = %41
  store i32 %44, i32* %25, align 8
  %48 = load i8*, i8** %27, align 8
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 3
  %51 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %48, i64 %50) #11
  store i8* %51, i8** %27, align 8
  %52 = bitcast i8* %51 to %struct.SkPoint*
  br label %53

53:                                               ; preds = %39, %47
  %54 = phi %struct.SkPoint* [ %40, %39 ], [ %52, %47 ]
  store i32 %33, i32* %24, align 4
  %55 = sext i32 %32 to i64
  %56 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %54, i64 %55
  %57 = bitcast %struct.SkPoint* %31 to i64*
  %58 = bitcast %struct.SkPoint* %56 to i64*
  %59 = load i64, i64* %57, align 4
  store i64 %59, i64* %58, align 4
  %60 = add nuw nsw i64 %30, 1
  %61 = icmp eq i64 %60, %28
  br i1 %61, label %629, label %29

62:                                               ; preds = %21
  %63 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 4
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %66 = bitcast float* %65 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 4
  %68 = fsub <2 x float> %67, %64
  %69 = zext i32 %1 to i64
  %70 = add nsw i64 %69, -2
  %71 = and i64 %70, 1
  %72 = icmp eq i32 %1, 3
  br i1 %72, label %104, label %73

73:                                               ; preds = %62
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 2, %73 ], [ %101, %75 ]
  %77 = phi float [ 0.000000e+00, %73 ], [ %100, %75 ]
  %78 = phi <2 x float> [ %68, %73 ], [ %94, %75 ]
  %79 = phi i64 [ %74, %73 ], [ %102, %75 ]
  %80 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %76, i32 0
  %81 = bitcast float* %80 to <2 x float>*
  %82 = load <2 x float>, <2 x float>* %81, align 4
  %83 = fsub <2 x float> %82, %64
  %84 = shufflevector <2 x float> %78, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %85 = fmul <2 x float> %84, %83
  %86 = extractelement <2 x float> %85, i32 0
  %87 = extractelement <2 x float> %85, i32 1
  %88 = fsub float %87, %86
  %89 = fadd float %77, %88
  %90 = or i64 %76, 1
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %90, i32 0
  %92 = bitcast float* %91 to <2 x float>*
  %93 = load <2 x float>, <2 x float>* %92, align 4
  %94 = fsub <2 x float> %93, %64
  %95 = shufflevector <2 x float> %83, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %96 = fmul <2 x float> %95, %94
  %97 = extractelement <2 x float> %96, i32 0
  %98 = extractelement <2 x float> %96, i32 1
  %99 = fsub float %98, %97
  %100 = fadd float %89, %99
  %101 = add nuw nsw i64 %76, 2
  %102 = add i64 %79, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %75

104:                                              ; preds = %75, %62
  %105 = phi float [ undef, %62 ], [ %100, %75 ]
  %106 = phi i64 [ 2, %62 ], [ %101, %75 ]
  %107 = phi float [ 0.000000e+00, %62 ], [ %100, %75 ]
  %108 = phi <2 x float> [ %68, %62 ], [ %94, %75 ]
  %109 = icmp eq i64 %71, 0
  br i1 %109, label %121, label %110

110:                                              ; preds = %104
  %111 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %106, i32 0
  %112 = bitcast float* %111 to <2 x float>*
  %113 = load <2 x float>, <2 x float>* %112, align 4
  %114 = fsub <2 x float> %113, %64
  %115 = shufflevector <2 x float> %108, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %116 = fmul <2 x float> %115, %114
  %117 = extractelement <2 x float> %116, i32 1
  %118 = extractelement <2 x float> %116, i32 0
  %119 = fsub float %117, %118
  %120 = fadd float %107, %119
  br label %121

121:                                              ; preds = %104, %110
  %122 = phi float [ %105, %104 ], [ %120, %110 ]
  %123 = tail call float @llvm.fabs.f32(float %122) #11
  %124 = fcmp ole float %123, 0x3E70000000000000
  %125 = fcmp ogt float %122, 0.000000e+00
  %126 = select i1 %125, i32 1, i32 -1
  %127 = select i1 %124, i32 0, i32 %126
  br i1 %124, label %629, label %128

128:                                              ; preds = %121
  %129 = bitcast %class.SkAutoSTMalloc* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3080, i8* nonnull %129) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %129, i8* align 8 bitcast (%class.SkAutoSTMalloc* @__const._Z20SkInsetConvexPolygonPK7SkPointifP9SkTDArrayIS_E.edgeData to i8*), i64 3080, i1 false)
  %130 = icmp ugt i32 %1, 64
  br i1 %130, label %138, label %131

131:                                              ; preds = %128
  %132 = icmp eq i32 %1, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %131
  %134 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 1, i32 0, i64 0
  %135 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 0
  store %struct.OffsetEdge* %134, %struct.OffsetEdge** %135, align 8
  br label %144

136:                                              ; preds = %131
  %137 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 0
  store %struct.OffsetEdge* null, %struct.OffsetEdge** %137, align 8
  br label %398

138:                                              ; preds = %128
  %139 = sext i32 %1 to i64
  %140 = tail call i8* @_Z15sk_malloc_throwmm(i64 %139, i64 48) #11
  %141 = bitcast %class.SkAutoSTMalloc* %5 to i8**
  store i8* %140, i8** %141, align 8
  %142 = bitcast i8* %140 to %struct.OffsetEdge*
  %143 = icmp sgt i32 %1, 0
  br i1 %143, label %144, label %223

144:                                              ; preds = %133, %138
  %145 = add nsw i32 %1, -1
  %146 = bitcast <2 x float>* %6 to i8*
  %147 = sitofp i32 %127 to float
  %148 = fmul float %147, %2
  %149 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 0
  br label %150

150:                                              ; preds = %187, %144
  %151 = phi i64 [ 0, %144 ], [ %153, %187 ]
  %152 = phi i32 [ %145, %144 ], [ %219, %187 ]
  %153 = add nuw nsw i64 %151, 1
  %154 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %151, i32 0
  %155 = bitcast float* %154 to <2 x float>*
  %156 = load <2 x float>, <2 x float>* %155, align 4
  %157 = extractelement <2 x float> %156, i32 0
  %158 = fmul float %157, 0.000000e+00
  %159 = extractelement <2 x float> %156, i32 1
  %160 = fmul float %158, %159
  %161 = fcmp ord float %160, 0.000000e+00
  br i1 %161, label %162, label %620

162:                                              ; preds = %150
  %163 = icmp eq i64 %153, %69
  %164 = sext i32 %152 to i64
  %165 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %164, i32 0
  %166 = bitcast float* %165 to <2 x float>*
  %167 = load <2 x float>, <2 x float>* %166, align 4
  %168 = fsub <2 x float> %156, %167
  %169 = and i64 %153, 4294967295
  %170 = select i1 %163, i64 0, i64 %169
  %171 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %170, i32 0
  %172 = bitcast float* %171 to <2 x float>*
  %173 = load <2 x float>, <2 x float>* %172, align 4
  %174 = fsub <2 x float> %173, %167
  %175 = shufflevector <2 x float> %174, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %176 = fmul <2 x float> %168, %175
  %177 = extractelement <2 x float> %176, i32 0
  %178 = extractelement <2 x float> %176, i32 1
  %179 = fsub float %177, %178
  %180 = call float @llvm.fabs.f32(float %179) #11
  %181 = fcmp ole float %180, 0x3E70000000000000
  %182 = fcmp ogt float %179, 0.000000e+00
  %183 = select i1 %182, i32 1, i32 -1
  %184 = select i1 %181, i32 0, i32 %183
  %185 = mul nsw i32 %184, %127
  %186 = icmp slt i32 %185, 0
  br i1 %186, label %620, label %187

187:                                              ; preds = %162
  %188 = fsub <2 x float> %173, %156
  %189 = extractelement <2 x float> %188, i32 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #11
  %190 = fsub float -0.000000e+00, %189
  %191 = insertelement <2 x float> undef, float %190, i32 0
  %192 = shufflevector <2 x float> %191, <2 x float> %188, <2 x i32> <i32 0, i32 2>
  store <2 x float> %192, <2 x float>* %6, align 8
  %193 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %7, float %148) #11
  %194 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  %195 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %194, i64 %164
  %196 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %194, i64 %151, i32 0
  store %struct.OffsetEdge* %195, %struct.OffsetEdge** %196, align 8
  %197 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  %198 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %197, i64 %170
  %199 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %197, i64 %151, i32 1
  store %struct.OffsetEdge* %198, %struct.OffsetEdge** %199, align 8
  %200 = bitcast float* %154 to <2 x float>*
  %201 = load <2 x float>, <2 x float>* %200, align 4
  %202 = load <2 x float>, <2 x float>* %6, align 8
  %203 = fadd <2 x float> %201, %202
  %204 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  %205 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %204, i64 %151, i32 2
  %206 = bitcast %struct.OffsetSegment* %205 to <2 x float>*
  store <2 x float> %203, <2 x float>* %206, align 8
  %207 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  %208 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %207, i64 %151, i32 2, i32 1
  %209 = bitcast %struct.SkPoint* %208 to <2 x float>*
  store <2 x float> %188, <2 x float>* %209, align 8
  %210 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  %211 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %210, i64 %151, i32 2, i32 0
  %212 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %210, i64 %151, i32 3
  %213 = bitcast %struct.SkPoint* %211 to i64*
  %214 = bitcast %struct.SkPoint* %212 to i64*
  %215 = load i64, i64* %213, align 4
  store i64 %215, i64* %214, align 8
  %216 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %210, i64 %151, i32 4
  store float 0xC7EFFFFFE0000000, float* %216, align 8
  %217 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %210, i64 %151, i32 5
  store i16 0, i16* %217, align 4
  %218 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %210, i64 %151, i32 6
  store i16 0, i16* %218, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #11
  %219 = trunc i64 %151 to i32
  %220 = icmp eq i64 %153, %69
  br i1 %220, label %221, label %150

221:                                              ; preds = %187
  %222 = load %struct.OffsetEdge*, %struct.OffsetEdge** %149, align 8
  br label %223

223:                                              ; preds = %221, %138
  %224 = phi %struct.OffsetEdge* [ %222, %221 ], [ %142, %138 ]
  %225 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %224, i64 0, i32 0
  %226 = load %struct.OffsetEdge*, %struct.OffsetEdge** %225, align 8
  %227 = mul nsw i32 %1, %1
  %228 = icmp eq %struct.OffsetEdge* %224, null
  %229 = icmp eq %struct.OffsetEdge* %226, %224
  %230 = or i1 %228, %229
  br i1 %230, label %398, label %231

231:                                              ; preds = %223
  %232 = bitcast float* %8 to i8*
  %233 = bitcast float* %9 to i8*
  %234 = bitcast i64* %10 to i8*
  %235 = bitcast i64* %10 to float*
  %236 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 1
  %237 = bitcast float* %9 to i32*
  br label %238

238:                                              ; preds = %231, %390
  %239 = phi i32 [ 0, %231 ], [ %244, %390 ]
  %240 = phi i32 [ %1, %231 ], [ %394, %390 ]
  %241 = phi %struct.OffsetEdge* [ %226, %231 ], [ %393, %390 ]
  %242 = phi %struct.OffsetEdge* [ %224, %231 ], [ %392, %390 ]
  %243 = phi %struct.OffsetEdge* [ %224, %231 ], [ %391, %390 ]
  %244 = add i32 %239, 1
  %245 = icmp ugt i32 %244, %227
  br i1 %245, label %620, label %246

246:                                              ; preds = %238
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %232) #11
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %233) #11
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %234) #11
  store float 0xFFFFFFFFE0000000, float* %235, align 8
  store float 0xFFFFFFFFE0000000, float* %236, align 4
  %247 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 2
  %248 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 2
  %249 = call fastcc zeroext i1 @_ZL20compute_intersectionRK13OffsetSegmentS1_P7SkPointPfS4_(%struct.OffsetSegment* dereferenceable(16) %247, %struct.OffsetSegment* dereferenceable(16) %248, %struct.SkPoint* nonnull %11, float* nonnull %8, float* nonnull %9)
  br i1 %249, label %250, label %303

250:                                              ; preds = %246
  %251 = load float, float* %8, align 4
  %252 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 4
  %253 = load float, float* %252, align 8
  %254 = fcmp olt float %251, %253
  br i1 %254, label %255, label %276

255:                                              ; preds = %250
  %256 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 1
  %257 = bitcast %struct.OffsetEdge** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 0
  %260 = load %struct.OffsetEdge*, %struct.OffsetEdge** %259, align 8
  %261 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %260, i64 0, i32 1
  %262 = bitcast %struct.OffsetEdge** %261 to i64*
  store i64 %258, i64* %262, align 8
  %263 = bitcast %struct.OffsetEdge* %241 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = bitcast %struct.OffsetEdge** %256 to i64**
  %266 = load i64*, i64** %265, align 8
  store i64 %264, i64* %266, align 8
  %267 = icmp eq %struct.OffsetEdge* %243, %241
  br i1 %267, label %268, label %272

268:                                              ; preds = %255
  %269 = load %struct.OffsetEdge*, %struct.OffsetEdge** %256, align 8
  %270 = icmp eq %struct.OffsetEdge* %269, %241
  %271 = select i1 %270, %struct.OffsetEdge* null, %struct.OffsetEdge* %269
  br label %272

272:                                              ; preds = %255, %268
  %273 = phi %struct.OffsetEdge* [ %271, %268 ], [ %243, %255 ]
  %274 = add nsw i32 %240, -1
  %275 = load %struct.OffsetEdge*, %struct.OffsetEdge** %259, align 8
  br label %390

276:                                              ; preds = %250
  %277 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 4
  %278 = load float, float* %277, align 8
  %279 = fcmp ogt float %278, 0xC7EFFFFFE0000000
  br i1 %279, label %280, label %295

280:                                              ; preds = %276
  %281 = load float, float* %235, align 8
  %282 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 3, i32 0
  %283 = load float, float* %282, align 4
  %284 = fsub float %281, %283
  %285 = call float @llvm.fabs.f32(float %284) #11
  %286 = fcmp ugt float %285, 0x3EB0C6F7A0000000
  br i1 %286, label %295, label %287

287:                                              ; preds = %280
  %288 = load float, float* %236, align 4
  %289 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 3, i32 1
  %290 = load float, float* %289, align 4
  %291 = fsub float %288, %290
  %292 = call float @llvm.fabs.f32(float %291) #11
  %293 = fcmp ugt float %292, 0x3EB0C6F7A0000000
  br i1 %293, label %295, label %294

294:                                              ; preds = %287
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %234) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %233) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %232) #11
  br label %398

295:                                              ; preds = %287, %280, %276
  %296 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 3
  %297 = bitcast %struct.SkPoint* %296 to i64*
  %298 = load i64, i64* %10, align 8
  store i64 %298, i64* %297, align 8
  %299 = load i32, i32* %237, align 4
  %300 = bitcast float* %277 to i32*
  store i32 %299, i32* %300, align 8
  %301 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 1
  %302 = load %struct.OffsetEdge*, %struct.OffsetEdge** %301, align 8
  br label %390

303:                                              ; preds = %246
  %304 = bitcast %struct.OffsetSegment* %248 to <2 x float>*
  %305 = load <2 x float>, <2 x float>* %304, align 4
  %306 = bitcast %struct.OffsetSegment* %247 to <2 x float>*
  %307 = load <2 x float>, <2 x float>* %306, align 4
  %308 = fsub <2 x float> %307, %305
  %309 = shufflevector <2 x float> %308, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %310 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 2, i32 1, i32 0
  %311 = bitcast float* %310 to <2 x float>*
  %312 = load <2 x float>, <2 x float>* %311, align 4
  %313 = fmul <2 x float> %312, %309
  %314 = extractelement <2 x float> %313, i32 0
  %315 = extractelement <2 x float> %313, i32 1
  %316 = fsub float %314, %315
  %317 = call float @llvm.fabs.f32(float %316) #11
  %318 = fcmp ole float %317, 0x3E70000000000000
  %319 = fcmp ogt float %316, 0.000000e+00
  %320 = select i1 %319, i32 1, i32 -1
  %321 = select i1 %318, i32 0, i32 %320
  %322 = mul nsw i32 %321, %127
  %323 = icmp slt i32 %322, 0
  br i1 %323, label %324, label %368

324:                                              ; preds = %303
  %325 = shufflevector <2 x float> %305, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %326 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 2, i32 1, i32 0
  %327 = load float, float* %326, align 4
  %328 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 2, i32 1, i32 1
  %329 = load float, float* %328, align 4
  %330 = extractelement <2 x float> %307, i32 1
  %331 = insertelement <2 x float> undef, float %330, i32 0
  %332 = insertelement <2 x float> %331, float %327, i32 1
  %333 = insertelement <2 x float> undef, float %329, i32 0
  %334 = shufflevector <2 x float> %333, <2 x float> %307, <2 x i32> <i32 0, i32 2>
  %335 = fadd <2 x float> %332, %334
  %336 = fsub <2 x float> %335, %325
  %337 = fmul <2 x float> %312, %336
  %338 = extractelement <2 x float> %337, i32 0
  %339 = extractelement <2 x float> %337, i32 1
  %340 = fsub float %338, %339
  %341 = call float @llvm.fabs.f32(float %340) #11
  %342 = fcmp ole float %341, 0x3E70000000000000
  %343 = fcmp ogt float %340, 0.000000e+00
  %344 = select i1 %343, i32 1, i32 -1
  %345 = select i1 %342, i32 0, i32 %344
  %346 = mul nsw i32 %345, %127
  %347 = icmp eq i32 %322, %346
  br i1 %347, label %348, label %368

348:                                              ; preds = %324
  %349 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 1
  %350 = bitcast %struct.OffsetEdge** %349 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %241, i64 0, i32 0
  %353 = load %struct.OffsetEdge*, %struct.OffsetEdge** %352, align 8
  %354 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %353, i64 0, i32 1
  %355 = bitcast %struct.OffsetEdge** %354 to i64*
  store i64 %351, i64* %355, align 8
  %356 = bitcast %struct.OffsetEdge* %241 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = bitcast %struct.OffsetEdge** %349 to i64**
  %359 = load i64*, i64** %358, align 8
  store i64 %357, i64* %359, align 8
  %360 = icmp eq %struct.OffsetEdge* %243, %241
  br i1 %360, label %361, label %365

361:                                              ; preds = %348
  %362 = load %struct.OffsetEdge*, %struct.OffsetEdge** %349, align 8
  %363 = icmp eq %struct.OffsetEdge* %362, %241
  %364 = select i1 %363, %struct.OffsetEdge* null, %struct.OffsetEdge* %362
  br label %365

365:                                              ; preds = %348, %361
  %366 = phi %struct.OffsetEdge* [ %364, %361 ], [ %243, %348 ]
  %367 = load %struct.OffsetEdge*, %struct.OffsetEdge** %352, align 8
  br label %385

368:                                              ; preds = %303, %324
  %369 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 1
  %370 = bitcast %struct.OffsetEdge** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %242, i64 0, i32 0
  %373 = load %struct.OffsetEdge*, %struct.OffsetEdge** %372, align 8
  %374 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %373, i64 0, i32 1
  %375 = bitcast %struct.OffsetEdge** %374 to i64*
  store i64 %371, i64* %375, align 8
  %376 = bitcast %struct.OffsetEdge* %242 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %struct.OffsetEdge** %369 to i64**
  %379 = load i64*, i64** %378, align 8
  store i64 %377, i64* %379, align 8
  %380 = icmp eq %struct.OffsetEdge* %243, %242
  %381 = load %struct.OffsetEdge*, %struct.OffsetEdge** %369, align 8
  br i1 %380, label %382, label %385

382:                                              ; preds = %368
  %383 = icmp eq %struct.OffsetEdge* %381, %242
  %384 = select i1 %383, %struct.OffsetEdge* null, %struct.OffsetEdge* %381
  br label %385

385:                                              ; preds = %368, %382, %365
  %386 = phi %struct.OffsetEdge* [ %366, %365 ], [ %384, %382 ], [ %243, %368 ]
  %387 = phi %struct.OffsetEdge* [ %242, %365 ], [ %381, %382 ], [ %381, %368 ]
  %388 = phi %struct.OffsetEdge* [ %367, %365 ], [ %241, %382 ], [ %241, %368 ]
  %389 = add nsw i32 %240, -1
  br label %390

390:                                              ; preds = %385, %295, %272
  %391 = phi %struct.OffsetEdge* [ %273, %272 ], [ %243, %295 ], [ %386, %385 ]
  %392 = phi %struct.OffsetEdge* [ %242, %272 ], [ %302, %295 ], [ %387, %385 ]
  %393 = phi %struct.OffsetEdge* [ %275, %272 ], [ %242, %295 ], [ %388, %385 ]
  %394 = phi i32 [ %274, %272 ], [ %240, %295 ], [ %389, %385 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %234) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %233) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %232) #11
  %395 = icmp eq %struct.OffsetEdge* %391, null
  %396 = icmp eq %struct.OffsetEdge* %393, %392
  %397 = or i1 %395, %396
  br i1 %397, label %398, label %238

398:                                              ; preds = %390, %136, %223, %294
  %399 = phi %struct.OffsetEdge* [ %243, %294 ], [ %224, %223 ], [ null, %136 ], [ %391, %390 ]
  %400 = phi i32 [ %240, %294 ], [ %1, %223 ], [ 0, %136 ], [ %394, %390 ]
  %401 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 0
  %402 = load %struct.SkPoint*, %struct.SkPoint** %401, align 8
  %403 = icmp eq %struct.SkPoint* %402, null
  %404 = bitcast %struct.SkPoint* %402 to i8*
  br i1 %403, label %407, label %405

405:                                              ; preds = %398
  call void @_Z7sk_freePv(i8* nonnull %404) #11
  %406 = bitcast %class.SkTDArray* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %406, i8 0, i64 16, i1 false) #11
  br label %407

407:                                              ; preds = %398, %405
  %408 = phi i8* [ %404, %398 ], [ null, %405 ]
  %409 = icmp eq %struct.OffsetEdge* %399, null
  br i1 %409, label %620, label %410

410:                                              ; preds = %407
  %411 = icmp sgt i32 %400, -1
  br i1 %411, label %412, label %428

412:                                              ; preds = %410
  %413 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 1
  %414 = load i32, i32* %413, align 8
  %415 = icmp slt i32 %414, %400
  br i1 %415, label %416, label %428

416:                                              ; preds = %412
  %417 = add nuw i32 %400, 4
  %418 = lshr i32 %417, 2
  %419 = add nuw i32 %418, %417
  %420 = icmp sgt i32 %419, -1
  br i1 %420, label %422, label %421

421:                                              ; preds = %416
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

422:                                              ; preds = %416
  store i32 %419, i32* %413, align 8
  %423 = bitcast %class.SkTDArray* %3 to i8**
  %424 = sext i32 %419 to i64
  %425 = shl nsw i64 %424, 3
  %426 = call i8* @_Z16sk_realloc_throwPvm(i8* %408, i64 %425) #11
  store i8* %426, i8** %423, align 8
  %427 = bitcast i8* %426 to %struct.SkPoint*
  br label %428

428:                                              ; preds = %422, %412, %410
  %429 = phi i8* [ %426, %422 ], [ %408, %412 ], [ %408, %410 ]
  %430 = phi %struct.SkPoint* [ %427, %422 ], [ null, %412 ], [ null, %410 ]
  %431 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %399, i64 0, i32 3
  %432 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 2
  %433 = load i32, i32* %432, align 4
  %434 = add i32 %433, 1
  %435 = icmp sgt i32 %434, -1
  br i1 %435, label %437, label %436

436:                                              ; preds = %428
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

437:                                              ; preds = %428
  %438 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %3, i64 0, i32 1
  %439 = load i32, i32* %438, align 8
  %440 = icmp slt i32 %439, %434
  br i1 %440, label %441, label %453

441:                                              ; preds = %437
  %442 = add i32 %433, 5
  %443 = lshr i32 %442, 2
  %444 = add nuw i32 %443, %442
  %445 = icmp sgt i32 %444, -1
  br i1 %445, label %447, label %446

446:                                              ; preds = %441
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

447:                                              ; preds = %441
  store i32 %444, i32* %438, align 8
  %448 = bitcast %class.SkTDArray* %3 to i8**
  %449 = sext i32 %444 to i64
  %450 = shl nsw i64 %449, 3
  %451 = call i8* @_Z16sk_realloc_throwPvm(i8* %429, i64 %450) #11
  store i8* %451, i8** %448, align 8
  %452 = bitcast i8* %451 to %struct.SkPoint*
  br label %453

453:                                              ; preds = %437, %447
  %454 = phi %struct.SkPoint* [ %452, %447 ], [ %430, %437 ]
  store i32 %434, i32* %432, align 4
  %455 = sext i32 %433 to i64
  %456 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %454, i64 %455
  %457 = bitcast %struct.SkPoint* %431 to i64*
  %458 = bitcast %struct.SkPoint* %456 to i64*
  %459 = load i64, i64* %457, align 4
  store i64 %459, i64* %458, align 4
  %460 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %399, i64 0, i32 1
  %461 = load %struct.OffsetEdge*, %struct.OffsetEdge** %460, align 8
  %462 = icmp eq %struct.OffsetEdge* %461, %399
  br i1 %462, label %521, label %463

463:                                              ; preds = %453
  %464 = bitcast %class.SkTDArray* %3 to i8**
  br label %465

465:                                              ; preds = %463, %514
  %466 = phi %struct.OffsetEdge* [ %461, %463 ], [ %517, %514 ]
  %467 = phi i32 [ 0, %463 ], [ %515, %514 ]
  %468 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %466, i64 0, i32 3
  %469 = load %struct.SkPoint*, %struct.SkPoint** %401, align 8
  %470 = sext i32 %467 to i64
  %471 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %468, i64 0, i32 0
  %472 = load float, float* %471, align 4
  %473 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %469, i64 %470, i32 0
  %474 = load float, float* %473, align 4
  %475 = fsub float %472, %474
  %476 = call float @llvm.fabs.f32(float %475) #11
  %477 = fcmp ugt float %476, 0x3F847AE140000000
  %478 = bitcast %struct.SkPoint* %469 to i8*
  br i1 %477, label %487, label %479

479:                                              ; preds = %465
  %480 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %466, i64 0, i32 3, i32 1
  %481 = load float, float* %480, align 4
  %482 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %469, i64 %470, i32 1
  %483 = load float, float* %482, align 4
  %484 = fsub float %481, %483
  %485 = call float @llvm.fabs.f32(float %484) #11
  %486 = fcmp ugt float %485, 0x3F847AE140000000
  br i1 %486, label %487, label %514

487:                                              ; preds = %479, %465
  %488 = load i32, i32* %432, align 4
  %489 = add i32 %488, 1
  %490 = icmp sgt i32 %489, -1
  br i1 %490, label %492, label %491

491:                                              ; preds = %487
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

492:                                              ; preds = %487
  %493 = load i32, i32* %438, align 8
  %494 = icmp slt i32 %493, %489
  br i1 %494, label %495, label %506

495:                                              ; preds = %492
  %496 = add i32 %488, 5
  %497 = lshr i32 %496, 2
  %498 = add nuw i32 %497, %496
  %499 = icmp sgt i32 %498, -1
  br i1 %499, label %501, label %500

500:                                              ; preds = %495
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

501:                                              ; preds = %495
  store i32 %498, i32* %438, align 8
  %502 = sext i32 %498 to i64
  %503 = shl nsw i64 %502, 3
  %504 = call i8* @_Z16sk_realloc_throwPvm(i8* %478, i64 %503) #11
  store i8* %504, i8** %464, align 8
  %505 = bitcast i8* %504 to %struct.SkPoint*
  br label %506

506:                                              ; preds = %492, %501
  %507 = phi %struct.SkPoint* [ %505, %501 ], [ %469, %492 ]
  store i32 %489, i32* %432, align 4
  %508 = sext i32 %488 to i64
  %509 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %507, i64 %508
  %510 = bitcast %struct.SkPoint* %468 to i64*
  %511 = bitcast %struct.SkPoint* %509 to i64*
  %512 = load i64, i64* %510, align 4
  store i64 %512, i64* %511, align 4
  %513 = add nsw i32 %467, 1
  br label %514

514:                                              ; preds = %479, %506
  %515 = phi i32 [ %467, %479 ], [ %513, %506 ]
  %516 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %466, i64 0, i32 1
  %517 = load %struct.OffsetEdge*, %struct.OffsetEdge** %516, align 8
  %518 = icmp eq %struct.OffsetEdge* %517, %399
  br i1 %518, label %519, label %465

519:                                              ; preds = %514
  %520 = icmp sgt i32 %515, 0
  br i1 %520, label %523, label %521

521:                                              ; preds = %453, %519
  %522 = load %struct.SkPoint*, %struct.SkPoint** %401, align 8
  br label %544

523:                                              ; preds = %519
  %524 = load %struct.SkPoint*, %struct.SkPoint** %401, align 8
  %525 = sext i32 %515 to i64
  %526 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %524, i64 0, i32 0
  %527 = load float, float* %526, align 4
  %528 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %524, i64 %525, i32 0
  %529 = load float, float* %528, align 4
  %530 = fsub float %527, %529
  %531 = call float @llvm.fabs.f32(float %530) #11
  %532 = fcmp ugt float %531, 0x3F847AE140000000
  br i1 %532, label %544, label %533

533:                                              ; preds = %523
  %534 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %524, i64 0, i32 1
  %535 = load float, float* %534, align 4
  %536 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %524, i64 %525, i32 1
  %537 = load float, float* %536, align 4
  %538 = fsub float %535, %537
  %539 = call float @llvm.fabs.f32(float %538) #11
  %540 = fcmp ugt float %539, 0x3F847AE140000000
  br i1 %540, label %544, label %541

541:                                              ; preds = %533
  %542 = load i32, i32* %432, align 4
  %543 = add nsw i32 %542, -1
  store i32 %543, i32* %432, align 4
  br label %547

544:                                              ; preds = %521, %533, %523
  %545 = phi %struct.SkPoint* [ %522, %521 ], [ %524, %533 ], [ %524, %523 ]
  %546 = load i32, i32* %432, align 4
  br label %547

547:                                              ; preds = %544, %541
  %548 = phi %struct.SkPoint* [ %545, %544 ], [ %524, %541 ]
  %549 = phi i32 [ %546, %544 ], [ %543, %541 ]
  %550 = icmp slt i32 %549, 3
  br i1 %550, label %620, label %551

551:                                              ; preds = %547
  %552 = bitcast %struct.SkPoint* %548 to <2 x float>*
  %553 = load <2 x float>, <2 x float>* %552, align 4
  %554 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %548, i64 1, i32 0
  %555 = bitcast float* %554 to <2 x float>*
  %556 = load <2 x float>, <2 x float>* %555, align 4
  %557 = fsub <2 x float> %556, %553
  %558 = zext i32 %549 to i64
  %559 = extractelement <2 x float> %553, i32 0
  %560 = fmul float %559, 0.000000e+00
  %561 = extractelement <2 x float> %553, i32 1
  %562 = fmul float %561, %560
  %563 = fcmp ord float %562, 0.000000e+00
  br i1 %563, label %564, label %620

564:                                              ; preds = %551
  %565 = add nsw i32 %549, -1
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %548, i64 %566, i32 0
  %568 = bitcast float* %567 to <2 x float>*
  %569 = load <2 x float>, <2 x float>* %568, align 4
  %570 = fsub <2 x float> %553, %569
  %571 = fsub <2 x float> %553, %553
  br label %572

572:                                              ; preds = %564, %606
  %573 = phi <2 x float> [ %574, %606 ], [ %570, %564 ]
  %574 = phi <2 x float> [ %608, %606 ], [ %557, %564 ]
  %575 = phi <2 x float> [ %576, %606 ], [ %571, %564 ]
  %576 = phi <2 x float> [ %607, %606 ], [ %557, %564 ]
  %577 = phi float [ %612, %606 ], [ 0.000000e+00, %564 ]
  %578 = phi i32 [ %599, %606 ], [ 1, %564 ]
  %579 = phi float [ %610, %606 ], [ 0.000000e+00, %564 ]
  %580 = phi i64 [ %604, %606 ], [ 0, %564 ]
  %581 = phi <2 x float> [ %603, %606 ], [ %556, %564 ]
  %582 = shufflevector <2 x float> %574, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %583 = fmul <2 x float> %582, %573
  %584 = extractelement <2 x float> %583, i32 0
  %585 = extractelement <2 x float> %583, i32 1
  %586 = fsub float %584, %585
  %587 = fmul float %577, %586
  %588 = fcmp olt float %587, 0.000000e+00
  br i1 %588, label %620, label %589

589:                                              ; preds = %572
  %590 = shufflevector <2 x float> %576, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %591 = fmul <2 x float> %590, %575
  %592 = extractelement <2 x float> %591, i32 0
  %593 = extractelement <2 x float> %591, i32 1
  %594 = fsub float %592, %593
  %595 = fmul float %579, %594
  %596 = fcmp olt float %595, 0.000000e+00
  br i1 %596, label %620, label %597

597:                                              ; preds = %589
  %598 = add nsw i32 %578, 1
  %599 = srem i32 %598, %549
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %548, i64 %600, i32 0
  %602 = bitcast float* %601 to <2 x float>*
  %603 = load <2 x float>, <2 x float>* %602, align 4
  %604 = add nuw nsw i64 %580, 1
  %605 = icmp eq i64 %604, %558
  br i1 %605, label %620, label %606

606:                                              ; preds = %597
  %607 = fsub <2 x float> %603, %553
  %608 = fsub <2 x float> %603, %581
  %609 = fcmp une float %594, 0.000000e+00
  %610 = select i1 %609, float %594, float %579
  %611 = fcmp une float %586, 0.000000e+00
  %612 = select i1 %611, float %586, float %577
  %613 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %548, i64 %604, i32 0
  %614 = load float, float* %613, align 4
  %615 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %548, i64 %604, i32 1
  %616 = load float, float* %615, align 4
  %617 = fmul float %614, 0.000000e+00
  %618 = fmul float %616, %617
  %619 = fcmp ord float %618, 0.000000e+00
  br i1 %619, label %572, label %620

620:                                              ; preds = %162, %150, %238, %597, %589, %572, %606, %551, %407, %547
  %621 = phi i1 [ false, %407 ], [ false, %547 ], [ false, %551 ], [ true, %597 ], [ false, %589 ], [ false, %572 ], [ false, %606 ], [ false, %238 ], [ false, %150 ], [ false, %162 ]
  %622 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 0
  %623 = load %struct.OffsetEdge*, %struct.OffsetEdge** %622, align 8
  %624 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %5, i64 0, i32 1, i32 0, i64 0
  %625 = icmp eq %struct.OffsetEdge* %623, %624
  br i1 %625, label %628, label %626

626:                                              ; preds = %620
  %627 = bitcast %struct.OffsetEdge* %623 to i8*
  call void @_Z7sk_freePv(i8* %627) #11
  br label %628

628:                                              ; preds = %620, %626
  call void @llvm.lifetime.end.p0i8(i64 3080, i8* nonnull %129) #11
  br label %629

629:                                              ; preds = %53, %17, %628, %121, %13, %4
  %630 = phi i1 [ false, %4 ], [ false, %13 ], [ false, %17 ], [ %621, %628 ], [ false, %121 ], [ true, %53 ]
  ret i1 %630
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL20compute_intersectionRK13OffsetSegmentS1_P7SkPointPfS4_(%struct.OffsetSegment* nocapture readonly dereferenceable(16), %struct.OffsetSegment* readonly dereferenceable(16), %struct.SkPoint* nocapture, float* nocapture, float* nocapture) unnamed_addr #2 {
  %6 = bitcast %struct.OffsetSegment* %1 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast %struct.OffsetSegment* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %7, %9
  %11 = getelementptr inbounds %struct.OffsetSegment, %struct.OffsetSegment* %0, i64 0, i32 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = shufflevector <2 x float> %13, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %15 = getelementptr inbounds %struct.OffsetSegment, %struct.OffsetSegment* %1, i64 0, i32 1, i32 0
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fmul <2 x float> %14, %17
  %19 = extractelement <2 x float> %18, i32 0
  %20 = extractelement <2 x float> %18, i32 1
  %21 = fsub float %20, %19
  %22 = tail call float @llvm.fabs.f32(float %21) #11
  %23 = fcmp ugt float %22, 0x3E70000000000000
  %24 = extractelement <2 x float> %13, i32 0
  %25 = bitcast float %24 to i32
  %26 = extractelement <2 x float> %13, i32 1
  %27 = bitcast float %26 to i32
  %28 = extractelement <2 x float> %17, i32 0
  %29 = bitcast float %28 to i32
  %30 = extractelement <2 x float> %17, i32 1
  %31 = bitcast float %30 to i32
  br i1 %23, label %134, label %32

32:                                               ; preds = %5
  %33 = fmul <2 x float> %10, %14
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = fsub float %34, %35
  %37 = tail call float @llvm.fabs.f32(float %36) #11
  %38 = fcmp ugt float %37, 0x3E70000000000000
  br i1 %38, label %180, label %39

39:                                               ; preds = %32
  %40 = shufflevector <2 x float> %17, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %41 = fmul <2 x float> %10, %40
  %42 = extractelement <2 x float> %41, i32 0
  %43 = extractelement <2 x float> %41, i32 1
  %44 = fsub float %42, %43
  %45 = tail call float @llvm.fabs.f32(float %44) #11
  %46 = fcmp ugt float %45, 0x3E70000000000000
  br i1 %46, label %180, label %47

47:                                               ; preds = %39
  %48 = fmul float %24, %24
  %49 = fmul float %26, %26
  %50 = fadd float %48, %49
  %51 = and i32 %25, 2139095040
  %52 = icmp eq i32 %51, 2139095040
  br i1 %52, label %58, label %53

53:                                               ; preds = %47
  %54 = and i32 %27, 2139095040
  %55 = icmp eq i32 %54, 2139095040
  %56 = fcmp oeq float %50, 0.000000e+00
  %57 = or i1 %56, %55
  br i1 %57, label %58, label %96

58:                                               ; preds = %47, %53
  %59 = fmul float %28, %28
  %60 = fmul float %30, %30
  %61 = fadd float %60, %59
  %62 = and i32 %29, 2139095040
  %63 = icmp eq i32 %62, 2139095040
  br i1 %63, label %69, label %64

64:                                               ; preds = %58
  %65 = and i32 %31, 2139095040
  %66 = icmp eq i32 %65, 2139095040
  %67 = fcmp oeq float %61, 0.000000e+00
  %68 = or i1 %67, %66
  br i1 %68, label %69, label %87

69:                                               ; preds = %58, %64
  %70 = extractelement <2 x float> %10, i32 0
  %71 = bitcast float %70 to i32
  %72 = and i32 %71, 2139095040
  %73 = icmp eq i32 %72, 2139095040
  br i1 %73, label %83, label %74

74:                                               ; preds = %69
  %75 = extractelement <2 x float> %10, i32 1
  %76 = bitcast float %75 to i32
  %77 = and i32 %76, 2139095040
  %78 = icmp eq i32 %77, 2139095040
  br i1 %78, label %83, label %79

79:                                               ; preds = %74
  %80 = fcmp une float %70, 0.000000e+00
  %81 = fcmp une float %75, 0.000000e+00
  %82 = or i1 %80, %81
  br i1 %82, label %180, label %83

83:                                               ; preds = %69, %74, %79
  %84 = bitcast %struct.OffsetSegment* %0 to i64*
  %85 = bitcast %struct.SkPoint* %2 to i64*
  %86 = load i64, i64* %84, align 4
  store i64 %86, i64* %85, align 4
  store float 0.000000e+00, float* %3, align 4
  store float 0.000000e+00, float* %4, align 4
  br label %180

87:                                               ; preds = %64
  %88 = fmul <2 x float> %10, %17
  %89 = extractelement <2 x float> %88, i32 1
  %90 = fsub float -0.000000e+00, %89
  %91 = extractelement <2 x float> %88, i32 0
  %92 = fsub float %90, %91
  %93 = fcmp olt float %92, 0.000000e+00
  %94 = fcmp ogt float %92, %61
  %95 = or i1 %93, %94
  br i1 %95, label %180, label %165

96:                                               ; preds = %53
  %97 = fmul <2 x float> %10, %13
  %98 = extractelement <2 x float> %97, i32 0
  %99 = extractelement <2 x float> %97, i32 1
  %100 = fadd float %98, %99
  %101 = fcmp olt float %100, 0.000000e+00
  %102 = fcmp ogt float %100, %50
  %103 = or i1 %101, %102
  br i1 %103, label %104, label %165

104:                                              ; preds = %96
  %105 = fmul float %28, %28
  %106 = fmul float %30, %30
  %107 = fadd float %106, %105
  %108 = and i32 %29, 2139095040
  %109 = icmp eq i32 %108, 2139095040
  br i1 %109, label %180, label %110

110:                                              ; preds = %104
  %111 = and i32 %31, 2139095040
  %112 = icmp eq i32 %111, 2139095040
  %113 = fcmp oeq float %107, 0.000000e+00
  %114 = or i1 %113, %112
  br i1 %114, label %180, label %115

115:                                              ; preds = %110
  %116 = fadd <2 x float> %10, %17
  %117 = fmul <2 x float> %13, %116
  %118 = extractelement <2 x float> %117, i32 0
  %119 = extractelement <2 x float> %117, i32 1
  %120 = fadd float %119, %118
  %121 = fcmp olt float %120, 0.000000e+00
  %122 = fcmp ogt float %120, %50
  %123 = or i1 %121, %122
  br i1 %123, label %124, label %165

124:                                              ; preds = %115
  %125 = fmul float %100, %120
  %126 = fcmp ogt float %125, 0.000000e+00
  br i1 %126, label %180, label %127

127:                                              ; preds = %124
  %128 = extractelement <2 x float> %10, i32 0
  %129 = fmul float %128, %28
  %130 = extractelement <2 x float> %10, i32 1
  %131 = fmul float %130, %30
  %132 = fsub float -0.000000e+00, %131
  %133 = fsub float %132, %129
  br label %165

134:                                              ; preds = %5
  %135 = fcmp ogt float %21, 0.000000e+00
  %136 = extractelement <2 x float> %10, i32 0
  %137 = fmul float %136, %30
  %138 = extractelement <2 x float> %10, i32 1
  %139 = fmul float %138, %28
  %140 = fsub float %137, %139
  br i1 %135, label %141, label %145

141:                                              ; preds = %134
  %142 = fcmp olt float %140, 0.000000e+00
  %143 = fcmp ogt float %140, %21
  %144 = or i1 %142, %143
  br i1 %144, label %180, label %149

145:                                              ; preds = %134
  %146 = fcmp ogt float %140, 0.000000e+00
  %147 = fcmp olt float %140, %21
  %148 = or i1 %146, %147
  br i1 %148, label %180, label %157

149:                                              ; preds = %141
  %150 = fmul <2 x float> %10, %14
  %151 = extractelement <2 x float> %150, i32 0
  %152 = extractelement <2 x float> %150, i32 1
  %153 = fsub float %151, %152
  %154 = fcmp olt float %153, 0.000000e+00
  %155 = fcmp ogt float %153, %21
  %156 = or i1 %154, %155
  br i1 %156, label %180, label %165

157:                                              ; preds = %145
  %158 = fmul <2 x float> %10, %14
  %159 = extractelement <2 x float> %158, i32 0
  %160 = extractelement <2 x float> %158, i32 1
  %161 = fsub float %159, %160
  %162 = fcmp ogt float %161, 0.000000e+00
  %163 = fcmp olt float %161, %21
  %164 = or i1 %162, %163
  br i1 %164, label %180, label %165

165:                                              ; preds = %157, %96, %87, %127, %115, %149
  %166 = phi float [ %21, %149 ], [ %50, %115 ], [ %107, %127 ], [ %61, %87 ], [ %50, %96 ], [ %21, %157 ]
  %167 = phi float [ %140, %149 ], [ %120, %115 ], [ 0.000000e+00, %127 ], [ 0.000000e+00, %87 ], [ %100, %96 ], [ %140, %157 ]
  %168 = phi float [ %153, %149 ], [ %50, %115 ], [ %133, %127 ], [ %92, %87 ], [ 0.000000e+00, %96 ], [ %161, %157 ]
  %169 = fdiv float %167, %166
  %170 = fdiv float %168, %166
  %171 = fmul float %169, %24
  %172 = fmul float %169, %26
  %173 = extractelement <2 x float> %9, i32 0
  %174 = fadd float %171, %173
  %175 = insertelement <2 x float> undef, float %174, i32 0
  %176 = extractelement <2 x float> %9, i32 1
  %177 = fadd float %172, %176
  %178 = insertelement <2 x float> %175, float %177, i32 1
  %179 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %178, <2 x float>* %179, align 4
  store float %169, float* %3, align 4
  store float %170, float* %4, align 4
  br label %180

180:                                              ; preds = %39, %32, %157, %145, %104, %124, %110, %87, %79, %83, %149, %141, %165
  %181 = phi i1 [ true, %165 ], [ false, %39 ], [ false, %32 ], [ false, %141 ], [ false, %149 ], [ false, %79 ], [ true, %83 ], [ false, %87 ], [ false, %110 ], [ false, %124 ], [ false, %104 ], [ false, %145 ], [ false, %157 ]
  ret i1 %181
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_Z20SkComputeRadialStepsRK7SkPointS1_fPfS2_Pi(%struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkPoint* nocapture readonly dereferenceable(8), float, float* nocapture, float* nocapture, i32* nocapture) local_unnamed_addr #4 {
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fmul <2 x float> %8, %10
  %12 = extractelement <2 x float> %11, i32 0
  %13 = extractelement <2 x float> %11, i32 1
  %14 = fadd float %12, %13
  %15 = bitcast float %14 to i32
  %16 = and i32 %15, 2139095040
  %17 = icmp eq i32 %16, 2139095040
  br i1 %17, label %57, label %18

18:                                               ; preds = %6
  %19 = extractelement <2 x float> %8, i32 0
  %20 = extractelement <2 x float> %10, i32 1
  %21 = fmul float %19, %20
  %22 = extractelement <2 x float> %8, i32 1
  %23 = extractelement <2 x float> %10, i32 0
  %24 = fmul float %23, %22
  %25 = fsub float %21, %24
  %26 = bitcast float %25 to i32
  %27 = and i32 %26, 2139095040
  %28 = icmp eq i32 %27, 2139095040
  br i1 %28, label %57, label %29

29:                                               ; preds = %18
  %30 = tail call float @atan2f(float %25, float %14) #11
  %31 = fmul float %30, %2
  %32 = fmul float %31, 2.500000e-01
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fcmp ult float %33, 6.553500e+04
  br i1 %34, label %35, label %57

35:                                               ; preds = %29
  %36 = fadd float %33, 5.000000e-01
  %37 = tail call float @llvm.floor.f32(float %36)
  %38 = fcmp olt float %37, 0x41DFFFFFE0000000
  %39 = select i1 %38, float %37, float 0x41DFFFFFE0000000
  %40 = fcmp ogt float %39, 0xC1DFFFFFE0000000
  %41 = select i1 %40, float %39, float 0xC1DFFFFFE0000000
  %42 = fptosi float %41 to i32
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %35
  %45 = sitofp i32 %42 to float
  %46 = fdiv float %30, %45
  br label %47

47:                                               ; preds = %35, %44
  %48 = phi float [ %46, %44 ], [ 0.000000e+00, %35 ]
  %49 = tail call float @sinf(float %48) #11
  store float %49, float* %3, align 4
  %50 = tail call float @cosf(float %48) #11
  store float %50, float* %4, align 4
  br i1 %43, label %51, label %56

51:                                               ; preds = %47
  %52 = load float, float* %3, align 4
  %53 = fcmp oeq float %52, 0.000000e+00
  %54 = fcmp oeq float %50, 1.000000e+00
  %55 = or i1 %54, %53
  br i1 %55, label %57, label %56

56:                                               ; preds = %51, %47
  store i32 %42, i32* %5, align 4
  br label %57

57:                                               ; preds = %18, %6, %56, %51, %29
  %58 = phi i1 [ false, %6 ], [ false, %18 ], [ false, %29 ], [ true, %56 ], [ false, %51 ]
  ret i1 %58
}

; Function Attrs: nofree nounwind
declare float @atan2f(float, float) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z17SkIsSimplePolygonPK7SkPointi(%struct.SkPoint*, i32) local_unnamed_addr #2 {
  %3 = alloca %class.SkTDPQueue, align 8
  %4 = alloca %class.ActiveEdgeList, align 8
  %5 = icmp slt i32 %1, 3
  br i1 %5, label %257, label %6

6:                                                ; preds = %2
  %7 = add nsw i32 %1, -1
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fsub <2 x float> %12, %9
  %14 = zext i32 %1 to i64
  %15 = extractelement <2 x float> %9, i32 0
  %16 = fmul float %15, 0.000000e+00
  %17 = extractelement <2 x float> %9, i32 1
  %18 = fmul float %17, %16
  %19 = fcmp ord float %18, 0.000000e+00
  br i1 %19, label %20, label %75

20:                                               ; preds = %6
  %21 = sext i32 %7 to i64
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %21, i32 0
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = fsub <2 x float> %9, %24
  %26 = fsub <2 x float> %9, %9
  br label %27

27:                                               ; preds = %20, %61
  %28 = phi <2 x float> [ %29, %61 ], [ %25, %20 ]
  %29 = phi <2 x float> [ %63, %61 ], [ %13, %20 ]
  %30 = phi <2 x float> [ %31, %61 ], [ %26, %20 ]
  %31 = phi <2 x float> [ %62, %61 ], [ %13, %20 ]
  %32 = phi float [ %67, %61 ], [ 0.000000e+00, %20 ]
  %33 = phi i32 [ %54, %61 ], [ 1, %20 ]
  %34 = phi float [ %65, %61 ], [ 0.000000e+00, %20 ]
  %35 = phi i64 [ %59, %61 ], [ 0, %20 ]
  %36 = phi <2 x float> [ %58, %61 ], [ %12, %20 ]
  %37 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %38 = fmul <2 x float> %37, %28
  %39 = extractelement <2 x float> %38, i32 0
  %40 = extractelement <2 x float> %38, i32 1
  %41 = fsub float %39, %40
  %42 = fmul float %32, %41
  %43 = fcmp olt float %42, 0.000000e+00
  br i1 %43, label %75, label %44

44:                                               ; preds = %27
  %45 = shufflevector <2 x float> %31, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %46 = fmul <2 x float> %45, %30
  %47 = extractelement <2 x float> %46, i32 0
  %48 = extractelement <2 x float> %46, i32 1
  %49 = fsub float %47, %48
  %50 = fmul float %34, %49
  %51 = fcmp olt float %50, 0.000000e+00
  br i1 %51, label %75, label %52

52:                                               ; preds = %44
  %53 = add nsw i32 %33, 1
  %54 = srem i32 %53, %1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %55, i32 0
  %57 = bitcast float* %56 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 4
  %59 = add nuw nsw i64 %35, 1
  %60 = icmp eq i64 %59, %14
  br i1 %60, label %257, label %61

61:                                               ; preds = %52
  %62 = fsub <2 x float> %58, %9
  %63 = fsub <2 x float> %58, %36
  %64 = fcmp une float %49, 0.000000e+00
  %65 = select i1 %64, float %49, float %34
  %66 = fcmp une float %41, 0.000000e+00
  %67 = select i1 %66, float %41, float %32
  %68 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %59, i32 0
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %59, i32 1
  %71 = load float, float* %70, align 4
  %72 = fmul float %69, 0.000000e+00
  %73 = fmul float %71, %72
  %74 = fcmp ord float %73, 0.000000e+00
  br i1 %74, label %27, label %75

75:                                               ; preds = %44, %27, %61, %6
  %76 = icmp sgt i32 %1, 2048
  br i1 %76, label %257, label %77

77:                                               ; preds = %75
  %78 = bitcast %class.SkTDPQueue* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #11
  %79 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %3, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %3, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %3, i64 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 16, i1 false) #11
  %82 = icmp sgt i32 %1, 0
  br i1 %82, label %83, label %153

83:                                               ; preds = %77
  %84 = add nuw nsw i32 %1, 4
  %85 = lshr i32 %84, 2
  %86 = add nuw nsw i32 %85, %84
  %87 = icmp sgt i32 %86, -1
  br i1 %87, label %89, label %88

88:                                               ; preds = %83
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

89:                                               ; preds = %83
  store i32 %86, i32* %80, align 8
  %90 = bitcast %class.SkTDPQueue* %3 to i8**
  %91 = sext i32 %86 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call i8* @_Z16sk_realloc_throwPvm(i8* null, i64 %92) #11
  store i8* %93, i8** %90, align 8
  br label %94

94:                                               ; preds = %150, %89
  %95 = phi i64 [ 0, %89 ], [ %114, %150 ]
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %95
  %97 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %96, i64 0, i32 0
  %98 = load float, float* %97, align 4
  %99 = fmul float %98, 0.000000e+00
  %100 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %95, i32 1
  %101 = load float, float* %100, align 4
  %102 = fmul float %99, %101
  %103 = fcmp ord float %102, 0.000000e+00
  br i1 %103, label %104, label %253

104:                                              ; preds = %94
  %105 = bitcast %struct.SkPoint* %96 to <2 x float>*
  %106 = load <2 x float>, <2 x float>* %105, align 4
  %107 = trunc i64 %95 to i32
  %108 = add i32 %7, %107
  %109 = srem i32 %108, %1
  %110 = shl i32 %109, 16
  %111 = and i32 %107, 65535
  %112 = or i32 %110, %111
  %113 = zext i32 %112 to i64
  %114 = add nuw nsw i64 %95, 1
  %115 = icmp eq i64 %114, %14
  %116 = shl i64 %114, 32
  %117 = and i64 %116, 281470681743360
  %118 = select i1 %115, i64 0, i64 %117
  %119 = or i64 %118, %113
  %120 = and i32 %109, 65535
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %121, i32 0
  %123 = load float, float* %122, align 4
  %124 = fcmp olt float %123, %98
  br i1 %124, label %131, label %125

125:                                              ; preds = %104
  %126 = fcmp ogt float %123, %98
  br i1 %126, label %133, label %127

127:                                              ; preds = %125
  %128 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %121, i32 1
  %129 = load float, float* %128, align 4
  %130 = fcmp ogt float %129, %101
  br i1 %130, label %131, label %133

131:                                              ; preds = %104, %127
  %132 = or i64 %119, 281474976710656
  br label %133

133:                                              ; preds = %125, %127, %131
  %134 = phi i64 [ %132, %131 ], [ %119, %127 ], [ %119, %125 ]
  %135 = lshr i64 %134, 32
  %136 = and i64 %135, 65535
  %137 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %136, i32 0
  %138 = load float, float* %137, align 4
  %139 = fcmp olt float %138, %98
  br i1 %139, label %146, label %140

140:                                              ; preds = %133
  %141 = fcmp ogt float %138, %98
  br i1 %141, label %150, label %142

142:                                              ; preds = %140
  %143 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %136, i32 1
  %144 = load float, float* %143, align 4
  %145 = fcmp ogt float %144, %101
  br i1 %145, label %146, label %150

146:                                              ; preds = %133, %142
  %147 = and i64 %134, -844424930131968
  %148 = or i64 %119, %147
  %149 = or i64 %148, 562949953421312
  br label %150

150:                                              ; preds = %140, %142, %146
  %151 = phi i64 [ %149, %146 ], [ %134, %142 ], [ %134, %140 ]
  call void @_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE6insertES0_(%class.SkTDPQueue* nonnull %3, <2 x float> %106, i64 %151)
  %152 = icmp eq i64 %114, %14
  br i1 %152, label %153, label %94

153:                                              ; preds = %150, %77
  %154 = bitcast %class.ActiveEdgeList* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %154) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %154, i8* align 8 bitcast (%class.ActiveEdgeList* @__const._Z17SkIsSimplePolygonPK7SkPointi.sweepLine to i8*), i64 64, i1 false)
  %155 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %4, i64 0, i32 0, i32 4, i64 0
  %156 = bitcast %struct.ActiveEdge** %155 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 36, i1 false) #11
  %157 = sext i32 %1 to i64
  %158 = shl nsw i64 %157, 6
  %159 = call i8* @_Z15sk_malloc_flagsmj(i64 %158, i32 2) #11
  %160 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %4, i64 0, i32 1
  store i8* %159, i8** %160, align 8
  %161 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %4, i64 0, i32 2
  store i32 0, i32* %161, align 8
  %162 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %4, i64 0, i32 3
  store i32 %1, i32* %162, align 4
  %163 = load i32, i32* %81, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %248

165:                                              ; preds = %153, %235
  %166 = load %struct.Vertex*, %struct.Vertex** %79, align 8
  %167 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 4
  %168 = load i16, i16* %167, align 2
  switch i16 %168, label %201 [
    i16 0, label %169
    i16 3, label %185
  ]

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 0
  %171 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 2
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i64
  %174 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %173
  %175 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 1
  %176 = load i16, i16* %175, align 4
  %177 = call zeroext i1 @_ZN14ActiveEdgeList6insertERK7SkPointS2_tt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %170, %struct.SkPoint* dereferenceable(8) %174, i16 zeroext %176, i16 zeroext %172)
  br i1 %177, label %178, label %245

178:                                              ; preds = %169
  %179 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 3
  %180 = load i16, i16* %179, align 4
  %181 = zext i16 %180 to i64
  %182 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %181
  %183 = load i16, i16* %175, align 4
  %184 = call zeroext i1 @_ZN14ActiveEdgeList6insertERK7SkPointS2_tt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %170, %struct.SkPoint* dereferenceable(8) %182, i16 zeroext %183, i16 zeroext %180)
  br i1 %184, label %230, label %245

185:                                              ; preds = %165
  %186 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 2
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i64
  %189 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %188
  %190 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 0
  %191 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 1
  %192 = load i16, i16* %191, align 4
  %193 = call zeroext i1 @_ZN14ActiveEdgeList6removeERK7SkPointS2_tt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %189, %struct.SkPoint* dereferenceable(8) %190, i16 zeroext %187, i16 zeroext %192)
  br i1 %193, label %194, label %245

194:                                              ; preds = %185
  %195 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 3
  %196 = load i16, i16* %195, align 4
  %197 = zext i16 %196 to i64
  %198 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %197
  %199 = load i16, i16* %191, align 4
  %200 = call zeroext i1 @_ZN14ActiveEdgeList6removeERK7SkPointS2_tt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %198, %struct.SkPoint* dereferenceable(8) %190, i16 zeroext %196, i16 zeroext %199)
  br i1 %200, label %230, label %245

201:                                              ; preds = %165
  %202 = and i16 %168, 1
  %203 = icmp eq i16 %202, 0
  br i1 %203, label %217, label %204

204:                                              ; preds = %201
  %205 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 2
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i64
  %208 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %207
  %209 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 0
  %210 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 3
  %211 = load i16, i16* %210, align 4
  %212 = zext i16 %211 to i64
  %213 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %212
  %214 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 1
  %215 = load i16, i16* %214, align 4
  %216 = call zeroext i1 @_ZN14ActiveEdgeList7replaceERK7SkPointS2_S2_ttt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %208, %struct.SkPoint* dereferenceable(8) %209, %struct.SkPoint* dereferenceable(8) %213, i16 zeroext %206, i16 zeroext %215, i16 zeroext %211)
  br i1 %216, label %230, label %245

217:                                              ; preds = %201
  %218 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 3
  %219 = load i16, i16* %218, align 4
  %220 = zext i16 %219 to i64
  %221 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %220
  %222 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 0
  %223 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i64
  %226 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %225
  %227 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %166, i64 0, i32 1
  %228 = load i16, i16* %227, align 4
  %229 = call zeroext i1 @_ZN14ActiveEdgeList7replaceERK7SkPointS2_S2_ttt(%class.ActiveEdgeList* nonnull %4, %struct.SkPoint* dereferenceable(8) %221, %struct.SkPoint* dereferenceable(8) %222, %struct.SkPoint* dereferenceable(8) %226, i16 zeroext %219, i16 zeroext %228, i16 zeroext %224)
  br i1 %229, label %230, label %245

230:                                              ; preds = %194, %217, %204, %178
  %231 = load i32, i32* %81, align 4
  %232 = icmp eq i32 %231, 1
  %233 = add nsw i32 %231, -1
  br i1 %232, label %234, label %235

234:                                              ; preds = %230
  store i32 %233, i32* %81, align 4
  br label %245

235:                                              ; preds = %230
  %236 = load %struct.Vertex*, %struct.Vertex** %79, align 8
  %237 = sext i32 %233 to i64
  %238 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %236, i64 %237
  %239 = bitcast %struct.Vertex* %236 to i8*
  %240 = bitcast %struct.Vertex* %238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %239, i8* align 4 %240, i64 16, i1 false) #11
  %241 = load i32, i32* %81, align 4
  %242 = add nsw i32 %241, -1
  store i32 %242, i32* %81, align 4
  call void @_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE24percolateDownIfNecessaryEi(%class.SkTDPQueue* nonnull %3, i32 0) #11
  %243 = load i32, i32* %81, align 4
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %165, label %245

245:                                              ; preds = %169, %178, %185, %194, %204, %217, %235, %234
  %246 = load i32, i32* %81, align 4
  %247 = load i8*, i8** %160, align 8
  br label %248

248:                                              ; preds = %245, %153
  %249 = phi i8* [ %247, %245 ], [ %159, %153 ]
  %250 = phi i32 [ %246, %245 ], [ %163, %153 ]
  %251 = icmp eq i32 %250, 0
  %252 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %4, i64 0, i32 0, i32 4, i64 1
  store %struct.ActiveEdge* null, %struct.ActiveEdge** %252, align 8
  call void @_Z7sk_freePv(i8* %249) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %154) #11
  br label %253

253:                                              ; preds = %94, %248
  %254 = phi i1 [ %251, %248 ], [ false, %94 ]
  %255 = bitcast %class.SkTDPQueue* %3 to i8**
  %256 = load i8*, i8** %255, align 8
  call void @_Z7sk_freePv(i8* %256) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #11
  br label %257

257:                                              ; preds = %52, %75, %2, %253
  %258 = phi i1 [ %254, %253 ], [ false, %2 ], [ false, %75 ], [ true, %52 ]
  ret i1 %258
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE6insertES0_(%class.SkTDPQueue*, <2 x float>, i64) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, 1
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %11, %6
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 0
  %15 = load %struct.Vertex*, %struct.Vertex** %14, align 8
  br label %29

16:                                               ; preds = %9
  %17 = add i32 %5, 5
  %18 = lshr i32 %17, 2
  %19 = add nuw i32 %18, %17
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

22:                                               ; preds = %16
  store i32 %19, i32* %10, align 8
  %23 = bitcast %class.SkTDPQueue* %0 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = sext i32 %19 to i64
  %26 = shl nsw i64 %25, 4
  %27 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %24, i64 %26) #11
  store i8* %27, i8** %23, align 8
  %28 = bitcast i8* %27 to %struct.Vertex*
  br label %29

29:                                               ; preds = %13, %22
  %30 = phi %struct.Vertex* [ %15, %13 ], [ %28, %22 ]
  store i32 %6, i32* %4, align 4
  %31 = sext i32 %5 to i64
  %32 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %30, i64 %31
  %33 = bitcast %struct.Vertex* %32 to <2 x float>*
  store <2 x float> %1, <2 x float>* %33, align 4
  %34 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %30, i64 %31, i32 1
  %35 = bitcast i16* %34 to i64*
  store i64 %2, i64* %35, align 4
  %36 = icmp eq i32 %5, 0
  br i1 %36, label %86, label %37

37:                                               ; preds = %29
  %38 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 0
  br label %39

39:                                               ; preds = %67, %37
  %40 = phi i32 [ %5, %37 ], [ %42, %67 ]
  %41 = add nsw i32 %40, -1
  %42 = ashr i32 %41, 1
  %43 = load %struct.Vertex*, %struct.Vertex** %38, align 8
  %44 = sext i32 %40 to i64
  %45 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44
  %46 = sext i32 %42 to i64
  %47 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46
  %48 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %45, i64 0, i32 0, i32 0
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %47, i64 0, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fcmp olt float %49, %51
  br i1 %52, label %53, label %57

53:                                               ; preds = %39
  %54 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 0, i32 1
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  br label %67

57:                                               ; preds = %39
  %58 = fcmp ogt float %49, %51
  br i1 %58, label %86, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 0, i32 1
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = fcmp ogt float %61, %63
  br i1 %64, label %65, label %86

65:                                               ; preds = %59
  %66 = bitcast float %61 to i32
  br label %67

67:                                               ; preds = %65, %53
  %68 = phi i32 [ %56, %53 ], [ %66, %65 ]
  %69 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 1
  %70 = load i16, i16* %69, align 4
  %71 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 2
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 3
  %74 = load i16, i16* %73, align 4
  %75 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %44, i32 4
  %76 = load i16, i16* %75, align 2
  %77 = bitcast %struct.Vertex* %45 to i8*
  %78 = bitcast %struct.Vertex* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 16, i1 false) #11
  store float %49, float* %50, align 4
  %79 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 0, i32 1
  %80 = bitcast float* %79 to i32*
  store i32 %68, i32* %80, align 4
  %81 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 1
  store i16 %70, i16* %81, align 4
  %82 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 2
  store i16 %72, i16* %82, align 2
  %83 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 3
  store i16 %74, i16* %83, align 4
  %84 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %43, i64 %46, i32 4
  store i16 %76, i16* %84, align 2
  %85 = icmp eq i32 %42, 0
  br i1 %85, label %86, label %39

86:                                               ; preds = %57, %59, %67, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14ActiveEdgeList6insertERK7SkPointS2_tt(%class.ActiveEdgeList*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), i16 zeroext, i16 zeroext) local_unnamed_addr #2 comdat align 2 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fsub <2 x float> %10, %12
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  store <2 x float> %13, <2 x float>* %6, align 8
  %16 = fmul float %14, 0.000000e+00
  %17 = fmul float %16, %15
  %18 = fcmp ord float %17, 0.000000e+00
  br i1 %18, label %19, label %271

19:                                               ; preds = %5
  %20 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0, i32 4, i64 1
  %21 = load %struct.ActiveEdge*, %struct.ActiveEdge** %20, align 8
  %22 = icmp eq %struct.ActiveEdge* %21, null
  br i1 %22, label %23, label %55

23:                                               ; preds = %19
  %24 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %30, label %29

29:                                               ; preds = %23
  store %struct.ActiveEdge* null, %struct.ActiveEdge** %20, align 8
  br label %271

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = sext i32 %25 to i64
  %34 = shl nsw i64 %33, 6
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = add nsw i32 %25, 1
  store i32 %36, i32* %24, align 8
  %37 = bitcast %struct.SkPoint* %1 to i64*
  %38 = bitcast i8* %35 to i64*
  %39 = load i64, i64* %37, align 4
  store i64 %39, i64* %38, align 8
  %40 = getelementptr inbounds i8, i8* %35, i64 8
  %41 = bitcast <2 x float>* %6 to i64*
  %42 = bitcast i8* %40 to i64*
  %43 = load i64, i64* %41, align 8
  store i64 %43, i64* %42, align 8
  %44 = getelementptr inbounds i8, i8* %35, i64 16
  %45 = bitcast i8* %44 to i16*
  store i16 %3, i16* %45, align 8
  %46 = getelementptr inbounds i8, i8* %35, i64 18
  %47 = bitcast i8* %46 to i16*
  store i16 %4, i16* %47, align 2
  %48 = getelementptr inbounds i8, i8* %35, i64 40
  %49 = getelementptr inbounds i8, i8* %35, i64 56
  %50 = bitcast i8* %49 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #11
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds i8, i8* %35, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 16, i1 false) #11
  %52 = bitcast %struct.ActiveEdge** %20 to i8**
  store i8* %35, i8** %52, align 8
  %53 = icmp eq i8* %35, null
  br i1 %53, label %271, label %54

54:                                               ; preds = %30
  store i32 0, i32* %50, align 8
  br label %271

55:                                               ; preds = %19
  %56 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0
  %57 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %58 = bitcast %struct.SkPoint* %2 to <2 x float>*
  br label %147

59:                                               ; preds = %251
  %60 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 4, i64 %259
  %61 = icmp ne %struct.ActiveEdge* %255, null
  br i1 %61, label %62, label %64

62:                                               ; preds = %59
  %63 = call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %255, %struct.SkPoint* dereferenceable(8) %1, %struct.SkPoint* nonnull dereferenceable(8) %7, i16 zeroext %3, i16 zeroext %4)
  br i1 %63, label %271, label %64

64:                                               ; preds = %62, %59
  %65 = icmp ne %struct.ActiveEdge* %256, null
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %256, %struct.SkPoint* dereferenceable(8) %1, %struct.SkPoint* nonnull dereferenceable(8) %7, i16 zeroext %3, i16 zeroext %4)
  br i1 %67, label %271, label %68

68:                                               ; preds = %66, %64
  %69 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = icmp slt i32 %70, %72
  br i1 %73, label %75, label %74

74:                                               ; preds = %68
  store %struct.ActiveEdge* null, %struct.ActiveEdge** %60, align 8
  br label %271

75:                                               ; preds = %68
  %76 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 1
  %77 = load i8*, i8** %76, align 8
  %78 = sext i32 %70 to i64
  %79 = shl nsw i64 %78, 6
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = add nsw i32 %70, 1
  store i32 %81, i32* %69, align 8
  %82 = bitcast i8* %80 to %struct.ActiveEdge*
  %83 = bitcast %struct.SkPoint* %1 to i64*
  %84 = bitcast i8* %80 to i64*
  %85 = load i64, i64* %83, align 4
  store i64 %85, i64* %84, align 8
  %86 = getelementptr inbounds i8, i8* %80, i64 8
  %87 = bitcast <2 x float>* %6 to i64*
  %88 = bitcast i8* %86 to i64*
  %89 = load i64, i64* %87, align 8
  store i64 %89, i64* %88, align 8
  %90 = getelementptr inbounds i8, i8* %80, i64 16
  %91 = bitcast i8* %90 to i16*
  store i16 %3, i16* %91, align 8
  %92 = getelementptr inbounds i8, i8* %80, i64 18
  %93 = bitcast i8* %92 to i16*
  store i16 %4, i16* %93, align 2
  %94 = getelementptr inbounds i8, i8* %80, i64 40
  %95 = getelementptr inbounds i8, i8* %80, i64 56
  %96 = bitcast i8* %95 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 16, i1 false) #11
  store i32 1, i32* %96, align 8
  %97 = getelementptr inbounds i8, i8* %80, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 16, i1 false) #11
  %98 = bitcast %struct.ActiveEdge** %60 to i8**
  store i8* %80, i8** %98, align 8
  %99 = icmp eq i8* %80, null
  br i1 %99, label %271, label %100

100:                                              ; preds = %75
  %101 = bitcast i8* %94 to %struct.ActiveEdge**
  store %struct.ActiveEdge* %255, %struct.ActiveEdge** %101, align 8
  %102 = getelementptr inbounds i8, i8* %80, i64 48
  %103 = bitcast i8* %102 to %struct.ActiveEdge**
  store %struct.ActiveEdge* %256, %struct.ActiveEdge** %103, align 8
  br i1 %61, label %104, label %107

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %255, i64 0, i32 6
  %106 = bitcast %struct.ActiveEdge** %105 to i8**
  store i8* %80, i8** %106, align 8
  br label %107

107:                                              ; preds = %104, %100
  br i1 %65, label %108, label %111

108:                                              ; preds = %107
  %109 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %256, i64 0, i32 5
  %110 = bitcast %struct.ActiveEdge** %109 to i8**
  store i8* %80, i8** %110, align 8
  br label %111

111:                                              ; preds = %107, %108
  %112 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 7
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %268, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %258, i64 0, i32 4, i64 1
  %117 = load %struct.ActiveEdge*, %struct.ActiveEdge** %116, align 8
  %118 = icmp eq %struct.ActiveEdge* %117, %153
  %119 = zext i32 %151 to i64
  %120 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 4, i64 %119
  %121 = load %struct.ActiveEdge*, %struct.ActiveEdge** %120, align 8
  %122 = icmp eq %struct.ActiveEdge* %121, %82
  %123 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %153, i64 0, i32 4, i64 %119
  %124 = load %struct.ActiveEdge*, %struct.ActiveEdge** %123, align 8
  %125 = xor i32 %151, 1
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %124, i64 0, i32 4, i64 %126
  br i1 %122, label %128, label %134

128:                                              ; preds = %115
  %129 = bitcast %struct.ActiveEdge** %127 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %struct.ActiveEdge** %123 to i64*
  store i64 %130, i64* %131, align 8
  store %struct.ActiveEdge* %153, %struct.ActiveEdge** %127, align 8
  %132 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %153, i64 0, i32 7
  store i32 1, i32* %132, align 8
  %133 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %124, i64 0, i32 7
  br label %263

134:                                              ; preds = %115
  %135 = load %struct.ActiveEdge*, %struct.ActiveEdge** %127, align 8
  %136 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %135, i64 0, i32 4, i64 %119
  %137 = bitcast %struct.ActiveEdge** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %struct.ActiveEdge** %127 to i64*
  store i64 %138, i64* %139, align 8
  store %struct.ActiveEdge* %124, %struct.ActiveEdge** %136, align 8
  %140 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %124, i64 0, i32 7
  store i32 1, i32* %140, align 8
  %141 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %135, i64 0, i32 7
  store i32 0, i32* %141, align 8
  store %struct.ActiveEdge* %135, %struct.ActiveEdge** %123, align 8
  %142 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %135, i64 0, i32 4, i64 %126
  %143 = bitcast %struct.ActiveEdge** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %struct.ActiveEdge** %123 to i64*
  store i64 %144, i64* %145, align 8
  store %struct.ActiveEdge* %153, %struct.ActiveEdge** %142, align 8
  %146 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %153, i64 0, i32 7
  store i32 1, i32* %146, align 8
  br label %263

147:                                              ; preds = %55, %251
  %148 = phi %struct.ActiveEdge* [ null, %55 ], [ %256, %251 ]
  %149 = phi %struct.ActiveEdge* [ null, %55 ], [ %255, %251 ]
  %150 = phi i32 [ 0, %55 ], [ %151, %251 ]
  %151 = phi i32 [ 0, %55 ], [ %254, %251 ]
  %152 = phi %struct.ActiveEdge* [ %21, %55 ], [ %261, %251 ]
  %153 = phi %struct.ActiveEdge* [ null, %55 ], [ %152, %251 ]
  %154 = phi %struct.ActiveEdge* [ null, %55 ], [ %153, %251 ]
  %155 = phi %struct.ActiveEdge* [ %56, %55 ], [ %258, %251 ]
  %156 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 4, i64 0
  %157 = load %struct.ActiveEdge*, %struct.ActiveEdge** %156, align 8
  %158 = icmp eq %struct.ActiveEdge* %157, null
  br i1 %158, label %218, label %159

159:                                              ; preds = %147
  %160 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %157, i64 0, i32 7
  %161 = load i32, i32* %160, align 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %218, label %163

163:                                              ; preds = %159
  %164 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 4, i64 1
  %165 = load %struct.ActiveEdge*, %struct.ActiveEdge** %164, align 8
  %166 = icmp eq %struct.ActiveEdge* %165, null
  br i1 %166, label %218, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %165, i64 0, i32 7
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %218, label %171

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 7
  store i32 1, i32* %172, align 8
  store i32 0, i32* %160, align 8
  %173 = load %struct.ActiveEdge*, %struct.ActiveEdge** %164, align 8
  %174 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %173, i64 0, i32 7
  store i32 0, i32* %174, align 8
  %175 = icmp eq %struct.ActiveEdge* %153, null
  br i1 %175, label %218, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %153, i64 0, i32 7
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %218, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %155, i64 0, i32 4, i64 1
  %182 = load %struct.ActiveEdge*, %struct.ActiveEdge** %181, align 8
  %183 = icmp eq %struct.ActiveEdge* %182, %154
  %184 = sext i32 %150 to i64
  %185 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %153, i64 0, i32 4, i64 %184
  %186 = load %struct.ActiveEdge*, %struct.ActiveEdge** %185, align 8
  %187 = icmp eq %struct.ActiveEdge* %152, %186
  %188 = icmp eq i32 %150, 0
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i64
  %191 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %154, i64 0, i32 4, i64 %190
  %192 = load %struct.ActiveEdge*, %struct.ActiveEdge** %191, align 8
  %193 = zext i1 %188 to i64
  %194 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %192, i64 0, i32 4, i64 %193
  br i1 %187, label %195, label %203

195:                                              ; preds = %180
  %196 = bitcast %struct.ActiveEdge** %194 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %struct.ActiveEdge** %191 to i64*
  store i64 %197, i64* %198, align 8
  store %struct.ActiveEdge* %154, %struct.ActiveEdge** %194, align 8
  %199 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %154, i64 0, i32 7
  store i32 1, i32* %199, align 8
  %200 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %192, i64 0, i32 7
  store i32 0, i32* %200, align 8
  %201 = zext i1 %183 to i64
  %202 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %155, i64 0, i32 4, i64 %201
  store %struct.ActiveEdge* %192, %struct.ActiveEdge** %202, align 8
  br label %218

203:                                              ; preds = %180
  %204 = load %struct.ActiveEdge*, %struct.ActiveEdge** %194, align 8
  %205 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %204, i64 0, i32 4, i64 %190
  %206 = bitcast %struct.ActiveEdge** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %struct.ActiveEdge** %194 to i64*
  store i64 %207, i64* %208, align 8
  store %struct.ActiveEdge* %192, %struct.ActiveEdge** %205, align 8
  %209 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %192, i64 0, i32 7
  store i32 1, i32* %209, align 8
  %210 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %204, i64 0, i32 7
  store i32 0, i32* %210, align 8
  store %struct.ActiveEdge* %204, %struct.ActiveEdge** %191, align 8
  %211 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %204, i64 0, i32 4, i64 %193
  %212 = bitcast %struct.ActiveEdge** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %struct.ActiveEdge** %191 to i64*
  store i64 %213, i64* %214, align 8
  store %struct.ActiveEdge* %154, %struct.ActiveEdge** %211, align 8
  %215 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %154, i64 0, i32 7
  store i32 1, i32* %215, align 8
  store i32 0, i32* %210, align 8
  %216 = zext i1 %183 to i64
  %217 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %155, i64 0, i32 4, i64 %216
  store %struct.ActiveEdge* %204, %struct.ActiveEdge** %217, align 8
  br label %218

218:                                              ; preds = %176, %167, %159, %171, %163, %147, %195, %203
  %219 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 1
  %220 = load i16, i16* %219, align 8
  %221 = icmp eq i16 %220, %3
  %222 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 0, i32 1
  br i1 %221, label %223, label %237

223:                                              ; preds = %218
  %224 = load <2 x float>, <2 x float>* %58, align 4
  %225 = bitcast %struct.ActiveEdge* %152 to <2 x float>*
  %226 = load <2 x float>, <2 x float>* %225, align 4
  %227 = fsub <2 x float> %224, %226
  %228 = bitcast %struct.SkPoint* %222 to <2 x float>*
  %229 = load <2 x float>, <2 x float>* %228, align 4
  %230 = shufflevector <2 x float> %229, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %231 = fmul <2 x float> %227, %230
  %232 = extractelement <2 x float> %231, i32 0
  %233 = extractelement <2 x float> %231, i32 1
  %234 = fsub float %233, %232
  %235 = tail call float @llvm.fabs.f32(float %234) #11
  %236 = fcmp ugt float %235, 0x3E70000000000000
  br i1 %236, label %251, label %271

237:                                              ; preds = %218
  %238 = load <2 x float>, <2 x float>* %57, align 4
  %239 = bitcast %struct.ActiveEdge* %152 to <2 x float>*
  %240 = load <2 x float>, <2 x float>* %239, align 4
  %241 = fsub <2 x float> %238, %240
  %242 = bitcast %struct.SkPoint* %222 to <2 x float>*
  %243 = load <2 x float>, <2 x float>* %242, align 4
  %244 = shufflevector <2 x float> %243, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %245 = fmul <2 x float> %241, %244
  %246 = extractelement <2 x float> %245, i32 0
  %247 = extractelement <2 x float> %245, i32 1
  %248 = fsub float %247, %246
  %249 = tail call float @llvm.fabs.f32(float %248) #11
  %250 = fcmp ugt float %249, 0x3E70000000000000
  br i1 %250, label %251, label %271

251:                                              ; preds = %223, %237
  %252 = phi float [ %234, %223 ], [ %248, %237 ]
  %253 = fcmp ule float %252, 0.000000e+00
  %254 = zext i1 %253 to i32
  %255 = select i1 %253, %struct.ActiveEdge* %152, %struct.ActiveEdge* %149
  %256 = select i1 %253, %struct.ActiveEdge* %148, %struct.ActiveEdge* %152
  %257 = icmp eq %struct.ActiveEdge* %154, null
  %258 = select i1 %257, %struct.ActiveEdge* %155, %struct.ActiveEdge* %154
  %259 = zext i1 %253 to i64
  %260 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %152, i64 0, i32 4, i64 %259
  %261 = load %struct.ActiveEdge*, %struct.ActiveEdge** %260, align 8
  %262 = icmp eq %struct.ActiveEdge* %261, null
  br i1 %262, label %59, label %147

263:                                              ; preds = %134, %128
  %264 = phi i32* [ %133, %128 ], [ %141, %134 ]
  %265 = phi %struct.ActiveEdge* [ %124, %128 ], [ %135, %134 ]
  store i32 0, i32* %264, align 8
  %266 = zext i1 %118 to i64
  %267 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %258, i64 0, i32 4, i64 %266
  store %struct.ActiveEdge* %265, %struct.ActiveEdge** %267, align 8
  br label %268

268:                                              ; preds = %263, %111
  %269 = load %struct.ActiveEdge*, %struct.ActiveEdge** %20, align 8
  %270 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %269, i64 0, i32 7
  store i32 0, i32* %270, align 8
  br label %271

271:                                              ; preds = %223, %237, %74, %29, %268, %66, %62, %75, %54, %30, %5
  %272 = phi i1 [ false, %5 ], [ true, %54 ], [ false, %30 ], [ true, %268 ], [ false, %66 ], [ false, %62 ], [ false, %75 ], [ false, %29 ], [ false, %74 ], [ false, %237 ], [ false, %223 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  ret i1 %272
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14ActiveEdgeList6removeERK7SkPointS2_tt(%class.ActiveEdgeList*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), i16 zeroext, i16 zeroext) local_unnamed_addr #2 comdat align 2 {
  %6 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0, i32 4, i64 1
  %7 = load %struct.ActiveEdge*, %struct.ActiveEdge** %6, align 8
  %8 = icmp eq %struct.ActiveEdge* %7, null
  br i1 %8, label %268, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0
  %11 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %12 = bitcast %struct.SkPoint* %1 to <2 x float>*
  br label %13

13:                                               ; preds = %9, %187
  %14 = phi %struct.ActiveEdge* [ %7, %9 ], [ %190, %187 ]
  %15 = phi %struct.ActiveEdge** [ %6, %9 ], [ %189, %187 ]
  %16 = phi i64 [ 1, %9 ], [ %69, %187 ]
  %17 = phi i32 [ 1, %9 ], [ %65, %187 ]
  %18 = phi %struct.ActiveEdge* [ null, %9 ], [ %64, %187 ]
  %19 = phi %struct.ActiveEdge* [ null, %9 ], [ %188, %187 ]
  %20 = phi %struct.ActiveEdge* [ %10, %9 ], [ %14, %187 ]
  %21 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = icmp eq i16 %22, %3
  %24 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 2
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, %4
  %27 = and i1 %23, %26
  br i1 %27, label %63, label %28

28:                                               ; preds = %13
  %29 = icmp eq i16 %25, %4
  %30 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 0, i32 1
  br i1 %29, label %31, label %45

31:                                               ; preds = %28
  %32 = load <2 x float>, <2 x float>* %12, align 4
  %33 = bitcast %struct.ActiveEdge* %14 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = fsub <2 x float> %32, %34
  %36 = bitcast %struct.SkPoint* %30 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 4
  %38 = shufflevector <2 x float> %37, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %39 = fmul <2 x float> %35, %38
  %40 = extractelement <2 x float> %39, i32 0
  %41 = extractelement <2 x float> %39, i32 1
  %42 = fsub float %41, %40
  %43 = tail call float @llvm.fabs.f32(float %42) #11
  %44 = fcmp ugt float %43, 0x3E70000000000000
  br i1 %44, label %59, label %268

45:                                               ; preds = %28
  %46 = load <2 x float>, <2 x float>* %11, align 4
  %47 = bitcast %struct.ActiveEdge* %14 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 4
  %49 = fsub <2 x float> %46, %48
  %50 = bitcast %struct.SkPoint* %30 to <2 x float>*
  %51 = load <2 x float>, <2 x float>* %50, align 4
  %52 = shufflevector <2 x float> %51, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %53 = fmul <2 x float> %49, %52
  %54 = extractelement <2 x float> %53, i32 0
  %55 = extractelement <2 x float> %53, i32 1
  %56 = fsub float %55, %54
  %57 = tail call float @llvm.fabs.f32(float %56) #11
  %58 = fcmp ugt float %57, 0x3E70000000000000
  br i1 %58, label %59, label %268

59:                                               ; preds = %31, %45
  %60 = phi float [ %42, %31 ], [ %56, %45 ]
  %61 = fcmp ule float %60, 0.000000e+00
  %62 = zext i1 %61 to i32
  br label %63

63:                                               ; preds = %13, %59
  %64 = phi %struct.ActiveEdge* [ %18, %59 ], [ %14, %13 ]
  %65 = phi i32 [ %62, %59 ], [ 0, %13 ]
  %66 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 7
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 0
  %69 = zext i32 %65 to i64
  br i1 %68, label %70, label %187

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 4, i64 %69
  %72 = load %struct.ActiveEdge*, %struct.ActiveEdge** %71, align 8
  %73 = icmp eq %struct.ActiveEdge* %72, null
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %72, i64 0, i32 7
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %187

78:                                               ; preds = %74, %70
  %79 = xor i32 %65, 1
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 4, i64 %80
  %82 = load %struct.ActiveEdge*, %struct.ActiveEdge** %81, align 8
  %83 = icmp eq %struct.ActiveEdge* %82, null
  br i1 %83, label %93, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %82, i64 0, i32 7
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %82, i64 0, i32 4, i64 %69
  %90 = bitcast %struct.ActiveEdge** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %struct.ActiveEdge** %81 to i64*
  store i64 %91, i64* %92, align 8
  store %struct.ActiveEdge* %14, %struct.ActiveEdge** %89, align 8
  store i32 1, i32* %66, align 8
  store i32 0, i32* %85, align 8
  store %struct.ActiveEdge* %82, %struct.ActiveEdge** %15, align 8
  br label %187

93:                                               ; preds = %84, %78
  %94 = icmp eq i32 %17, 0
  %95 = zext i1 %94 to i64
  %96 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %20, i64 0, i32 4, i64 %95
  %97 = load %struct.ActiveEdge*, %struct.ActiveEdge** %96, align 8
  %98 = icmp eq %struct.ActiveEdge* %97, null
  br i1 %98, label %187, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %95
  %101 = load %struct.ActiveEdge*, %struct.ActiveEdge** %100, align 8
  %102 = icmp eq %struct.ActiveEdge* %101, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %101, i64 0, i32 7
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %124

107:                                              ; preds = %103, %99
  %108 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %16
  %109 = load %struct.ActiveEdge*, %struct.ActiveEdge** %108, align 8
  %110 = icmp eq %struct.ActiveEdge* %109, null
  br i1 %110, label %121, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %109, i64 0, i32 7
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %121, label %115

115:                                              ; preds = %111
  %116 = ptrtoint %struct.ActiveEdge* %109 to i64
  %117 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %19, i64 0, i32 4, i64 1
  %118 = load %struct.ActiveEdge*, %struct.ActiveEdge** %117, align 8
  %119 = icmp eq %struct.ActiveEdge* %118, %20
  %120 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %16
  br label %133

121:                                              ; preds = %111, %107
  %122 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %20, i64 0, i32 7
  store i32 0, i32* %122, align 8
  %123 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 7
  store i32 1, i32* %123, align 8
  store i32 1, i32* %66, align 8
  br label %187

124:                                              ; preds = %103
  %125 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %16
  %126 = load %struct.ActiveEdge*, %struct.ActiveEdge** %125, align 8
  %127 = ptrtoint %struct.ActiveEdge* %126 to i64
  %128 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %19, i64 0, i32 4, i64 1
  %129 = load %struct.ActiveEdge*, %struct.ActiveEdge** %128, align 8
  %130 = icmp eq %struct.ActiveEdge* %129, %20
  %131 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %16
  %132 = icmp eq %struct.ActiveEdge* %126, null
  br i1 %132, label %160, label %133

133:                                              ; preds = %115, %124
  %134 = phi %struct.ActiveEdge** [ %120, %115 ], [ %131, %124 ]
  %135 = phi i1 [ %119, %115 ], [ %130, %124 ]
  %136 = phi i64 [ %116, %115 ], [ %127, %124 ]
  %137 = phi %struct.ActiveEdge* [ %109, %115 ], [ %126, %124 ]
  %138 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %137, i64 0, i32 7
  %139 = load i32, i32* %138, align 8
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %159, label %141

141:                                              ; preds = %133
  %142 = xor i1 %94, true
  %143 = zext i1 %142 to i64
  %144 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 4, i64 %143
  %145 = load %struct.ActiveEdge*, %struct.ActiveEdge** %144, align 8
  %146 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %145, i64 0, i32 4, i64 %95
  %147 = bitcast %struct.ActiveEdge** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %struct.ActiveEdge** %144 to i64*
  store i64 %148, i64* %149, align 8
  store %struct.ActiveEdge* %97, %struct.ActiveEdge** %146, align 8
  %150 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 7
  store i32 1, i32* %150, align 8
  %151 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %145, i64 0, i32 7
  store i32 0, i32* %151, align 8
  store %struct.ActiveEdge* %145, %struct.ActiveEdge** %96, align 8
  %152 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %145, i64 0, i32 4, i64 %16
  %153 = bitcast %struct.ActiveEdge** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = bitcast %struct.ActiveEdge** %96 to i64*
  store i64 %154, i64* %155, align 8
  store %struct.ActiveEdge* %20, %struct.ActiveEdge** %152, align 8
  %156 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %20, i64 0, i32 7
  store i32 1, i32* %156, align 8
  store i32 0, i32* %151, align 8
  %157 = zext i1 %135 to i64
  %158 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %19, i64 0, i32 4, i64 %157
  store %struct.ActiveEdge* %145, %struct.ActiveEdge** %158, align 8
  br label %173

159:                                              ; preds = %133
  br i1 %102, label %173, label %160

160:                                              ; preds = %124, %159
  %161 = phi i64 [ %136, %159 ], [ %127, %124 ]
  %162 = phi i1 [ %135, %159 ], [ %130, %124 ]
  %163 = phi %struct.ActiveEdge** [ %134, %159 ], [ %131, %124 ]
  %164 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %101, i64 0, i32 7
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %173, label %167

167:                                              ; preds = %160
  %168 = bitcast %struct.ActiveEdge** %96 to i64*
  store i64 %161, i64* %168, align 8
  store %struct.ActiveEdge* %20, %struct.ActiveEdge** %163, align 8
  %169 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %20, i64 0, i32 7
  store i32 1, i32* %169, align 8
  %170 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %97, i64 0, i32 7
  store i32 0, i32* %170, align 8
  %171 = zext i1 %162 to i64
  %172 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %19, i64 0, i32 4, i64 %171
  store %struct.ActiveEdge* %97, %struct.ActiveEdge** %172, align 8
  br label %173

173:                                              ; preds = %160, %159, %167, %141
  %174 = phi i1 [ %162, %160 ], [ %135, %159 ], [ %162, %167 ], [ %135, %141 ]
  %175 = zext i1 %174 to i64
  %176 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %19, i64 0, i32 4, i64 %175
  %177 = load %struct.ActiveEdge*, %struct.ActiveEdge** %176, align 8
  %178 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %177, i64 0, i32 7
  store i32 1, i32* %178, align 8
  store i32 1, i32* %66, align 8
  %179 = load %struct.ActiveEdge*, %struct.ActiveEdge** %176, align 8
  %180 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %179, i64 0, i32 4, i64 0
  %181 = load %struct.ActiveEdge*, %struct.ActiveEdge** %180, align 8
  %182 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %181, i64 0, i32 7
  store i32 0, i32* %182, align 8
  %183 = load %struct.ActiveEdge*, %struct.ActiveEdge** %176, align 8
  %184 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %183, i64 0, i32 4, i64 1
  %185 = load %struct.ActiveEdge*, %struct.ActiveEdge** %184, align 8
  %186 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %185, i64 0, i32 7
  store i32 0, i32* %186, align 8
  br label %187

187:                                              ; preds = %63, %74, %88, %93, %121, %173
  %188 = phi %struct.ActiveEdge* [ %20, %74 ], [ %82, %88 ], [ %20, %93 ], [ %20, %121 ], [ %20, %173 ], [ %20, %63 ]
  %189 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 4, i64 %69
  %190 = load %struct.ActiveEdge*, %struct.ActiveEdge** %189, align 8
  %191 = icmp eq %struct.ActiveEdge* %190, null
  br i1 %191, label %192, label %13

192:                                              ; preds = %187
  %193 = icmp eq %struct.ActiveEdge* %64, null
  br i1 %193, label %263, label %194

194:                                              ; preds = %192
  %195 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 5
  %196 = load %struct.ActiveEdge*, %struct.ActiveEdge** %195, align 8
  %197 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 6
  %198 = load %struct.ActiveEdge*, %struct.ActiveEdge** %197, align 8
  %199 = icmp eq %struct.ActiveEdge* %196, null
  br i1 %199, label %208, label %200

200:                                              ; preds = %194
  %201 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 0, i32 0
  %202 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 0, i32 1
  %203 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 1
  %204 = load i16, i16* %203, align 8
  %205 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 2
  %206 = load i16, i16* %205, align 2
  %207 = tail call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %196, %struct.SkPoint* dereferenceable(8) %201, %struct.SkPoint* dereferenceable(8) %202, i16 zeroext %204, i16 zeroext %206) #11
  br i1 %207, label %268, label %208

208:                                              ; preds = %194, %200
  %209 = icmp ne %struct.ActiveEdge* %198, null
  br i1 %209, label %210, label %218

210:                                              ; preds = %208
  %211 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 0, i32 0
  %212 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 0, i32 1
  %213 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 1
  %214 = load i16, i16* %213, align 8
  %215 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 2
  %216 = load i16, i16* %215, align 2
  %217 = tail call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %198, %struct.SkPoint* dereferenceable(8) %211, %struct.SkPoint* dereferenceable(8) %212, i16 zeroext %214, i16 zeroext %216) #11
  br i1 %217, label %268, label %218

218:                                              ; preds = %210, %208
  %219 = icmp eq %struct.ActiveEdge* %64, %14
  br i1 %219, label %231, label %220

220:                                              ; preds = %218
  %221 = bitcast %struct.ActiveEdge* %64 to i8*
  %222 = bitcast %struct.ActiveEdge* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %221, i8* align 4 %222, i64 16, i1 false)
  %223 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 1
  %224 = load i16, i16* %223, align 8
  %225 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 1
  store i16 %224, i16* %225, align 8
  %226 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 2
  %227 = load i16, i16* %226, align 2
  %228 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %64, i64 0, i32 2
  store i16 %227, i16* %228, align 2
  %229 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 5
  %230 = load %struct.ActiveEdge*, %struct.ActiveEdge** %229, align 8
  store %struct.ActiveEdge* %230, %struct.ActiveEdge** %195, align 8
  br label %234

231:                                              ; preds = %218
  br i1 %209, label %232, label %234

232:                                              ; preds = %231
  %233 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %198, i64 0, i32 5
  store %struct.ActiveEdge* %196, %struct.ActiveEdge** %233, align 8
  br label %234

234:                                              ; preds = %231, %232, %220
  %235 = phi %struct.ActiveEdge* [ %230, %220 ], [ %196, %232 ], [ %196, %231 ]
  %236 = icmp eq %struct.ActiveEdge* %235, null
  br i1 %236, label %243, label %237

237:                                              ; preds = %234
  %238 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 6
  %239 = bitcast %struct.ActiveEdge** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %235, i64 0, i32 6
  %242 = bitcast %struct.ActiveEdge** %241 to i64*
  store i64 %240, i64* %242, align 8
  br label %243

243:                                              ; preds = %234, %237
  %244 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 4, i64 0
  %245 = load %struct.ActiveEdge*, %struct.ActiveEdge** %244, align 8
  %246 = icmp eq %struct.ActiveEdge* %245, null
  %247 = zext i1 %246 to i64
  %248 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 4, i64 %247
  %249 = bitcast %struct.ActiveEdge** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %188, i64 0, i32 4, i64 1
  %252 = load %struct.ActiveEdge*, %struct.ActiveEdge** %251, align 8
  %253 = icmp eq %struct.ActiveEdge* %252, %14
  %254 = zext i1 %253 to i64
  %255 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %188, i64 0, i32 4, i64 %254
  %256 = bitcast %struct.ActiveEdge** %255 to i64*
  store i64 %250, i64* %256, align 8
  %257 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %14, i64 0, i32 5
  %258 = bitcast %struct.ActiveEdge** %257 to <2 x %struct.ActiveEdge*>*
  store <2 x %struct.ActiveEdge*> <%struct.ActiveEdge* inttoptr (i64 3735928559 to %struct.ActiveEdge*), %struct.ActiveEdge* inttoptr (i64 3735928559 to %struct.ActiveEdge*)>, <2 x %struct.ActiveEdge*>* %258, align 8
  %259 = load %struct.ActiveEdge*, %struct.ActiveEdge** %6, align 8
  %260 = icmp eq %struct.ActiveEdge* %259, null
  br i1 %260, label %268, label %261

261:                                              ; preds = %243
  %262 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %259, i64 0, i32 7
  store i32 0, i32* %262, align 8
  br label %263

263:                                              ; preds = %261, %192
  %264 = load %struct.ActiveEdge*, %struct.ActiveEdge** %6, align 8
  %265 = icmp eq %struct.ActiveEdge* %264, null
  br i1 %265, label %268, label %266

266:                                              ; preds = %263
  %267 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %264, i64 0, i32 7
  store i32 0, i32* %267, align 8
  br label %268

268:                                              ; preds = %31, %45, %243, %263, %266, %210, %200, %5
  %269 = phi i1 [ false, %5 ], [ true, %263 ], [ true, %266 ], [ false, %210 ], [ false, %200 ], [ true, %243 ], [ false, %45 ], [ false, %31 ]
  ret i1 %269
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14ActiveEdgeList7replaceERK7SkPointS2_S2_ttt(%class.ActiveEdgeList*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), i16 zeroext, i16 zeroext, i16 zeroext) local_unnamed_addr #2 comdat align 2 {
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0, i32 4, i64 1
  %11 = load %struct.ActiveEdge*, %struct.ActiveEdge** %10, align 8
  %12 = icmp eq %struct.ActiveEdge* %11, null
  br i1 %12, label %106, label %13

13:                                               ; preds = %7
  %14 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  %15 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %18 = bitcast %struct.SkPoint* %3 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fsub <2 x float> %19, %16
  store <2 x float> %20, <2 x float>* %8, align 8
  %21 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = shufflevector <2 x float> %22, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %24 = getelementptr inbounds %class.ActiveEdgeList, %class.ActiveEdgeList* %0, i64 0, i32 0, i32 4, i64 1
  %25 = load %struct.ActiveEdge*, %struct.ActiveEdge** %24, align 8
  %26 = icmp eq %struct.ActiveEdge* %25, null
  br i1 %26, label %104, label %27

27:                                               ; preds = %13, %65
  %28 = phi %struct.ActiveEdge* [ %70, %65 ], [ %25, %13 ]
  %29 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = icmp eq i16 %30, %4
  %32 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 2
  %33 = load i16, i16* %32, align 2
  %34 = icmp eq i16 %33, %5
  %35 = and i1 %31, %34
  br i1 %35, label %72, label %36

36:                                               ; preds = %27
  %37 = icmp eq i16 %33, %5
  %38 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = insertelement <2 x float> %43, float %40, i32 1
  br i1 %37, label %45, label %55

45:                                               ; preds = %36
  %46 = fsub <2 x float> %23, %44
  %47 = bitcast %struct.SkPoint* %38 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 4
  %49 = fmul <2 x float> %48, %46
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %52 = fsub float %50, %51
  %53 = tail call float @llvm.fabs.f32(float %52) #11
  %54 = fcmp ugt float %53, 0x3E70000000000000
  br i1 %54, label %65, label %104

55:                                               ; preds = %36
  %56 = fsub <2 x float> %17, %44
  %57 = bitcast %struct.SkPoint* %38 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 4
  %59 = fmul <2 x float> %58, %56
  %60 = extractelement <2 x float> %59, i32 0
  %61 = extractelement <2 x float> %59, i32 1
  %62 = fsub float %60, %61
  %63 = tail call float @llvm.fabs.f32(float %62) #11
  %64 = fcmp ugt float %63, 0x3E70000000000000
  br i1 %64, label %65, label %104

65:                                               ; preds = %45, %55
  %66 = phi float [ %52, %45 ], [ %62, %55 ]
  %67 = fcmp ule float %66, 0.000000e+00
  %68 = zext i1 %67 to i64
  %69 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 4, i64 %68
  %70 = load %struct.ActiveEdge*, %struct.ActiveEdge** %69, align 8
  %71 = icmp eq %struct.ActiveEdge* %70, null
  br i1 %71, label %104, label %27

72:                                               ; preds = %27
  %73 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 1
  %74 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 2
  %75 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 5
  %76 = load %struct.ActiveEdge*, %struct.ActiveEdge** %75, align 8
  %77 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 6
  %78 = load %struct.ActiveEdge*, %struct.ActiveEdge** %77, align 8
  %79 = icmp eq %struct.ActiveEdge* %76, null
  br i1 %79, label %86, label %80

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 0
  %82 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 1
  %83 = tail call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %76, %struct.SkPoint* dereferenceable(8) %81, %struct.SkPoint* dereferenceable(8) %82, i16 zeroext %4, i16 zeroext %5) #11
  br i1 %83, label %104, label %84

84:                                               ; preds = %80
  %85 = call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %76, %struct.SkPoint* dereferenceable(8) %2, %struct.SkPoint* nonnull dereferenceable(8) %9, i16 zeroext %5, i16 zeroext %6)
  br i1 %85, label %104, label %86

86:                                               ; preds = %72, %84
  %87 = icmp eq %struct.ActiveEdge* %78, null
  br i1 %87, label %96, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 0
  %90 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 1
  %91 = load i16, i16* %73, align 8
  %92 = load i16, i16* %74, align 2
  %93 = call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %78, %struct.SkPoint* dereferenceable(8) %89, %struct.SkPoint* dereferenceable(8) %90, i16 zeroext %91, i16 zeroext %92) #11
  br i1 %93, label %104, label %94

94:                                               ; preds = %88
  %95 = call zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge* nonnull %78, %struct.SkPoint* dereferenceable(8) %2, %struct.SkPoint* nonnull dereferenceable(8) %9, i16 zeroext %5, i16 zeroext %6)
  br i1 %95, label %104, label %96

96:                                               ; preds = %86, %94
  %97 = bitcast %struct.SkPoint* %2 to i64*
  %98 = bitcast %struct.ActiveEdge* %28 to i64*
  %99 = load i64, i64* %97, align 4
  store i64 %99, i64* %98, align 8
  %100 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %28, i64 0, i32 0, i32 1
  %101 = bitcast <2 x float>* %8 to i64*
  %102 = bitcast %struct.SkPoint* %100 to i64*
  %103 = load i64, i64* %101, align 8
  store i64 %103, i64* %102, align 8
  store i16 %5, i16* %73, align 8
  store i16 %6, i16* %74, align 2
  br label %104

104:                                              ; preds = %65, %55, %45, %13, %96, %84, %80, %94, %88
  %105 = phi i1 [ true, %96 ], [ false, %84 ], [ false, %80 ], [ false, %94 ], [ false, %88 ], [ false, %13 ], [ false, %45 ], [ false, %55 ], [ false, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  br label %106

106:                                              ; preds = %7, %104
  %107 = phi i1 [ %105, %104 ], [ false, %7 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z21SkOffsetSimplePolygonPK7SkPointiRK6SkRectfP9SkTDArrayIS_EPS5_IiE(%struct.SkPoint* readonly, i32, %struct.SkRect* nocapture readonly dereferenceable(16), float, %class.SkTDArray*, %class.SkTDArray.1*) local_unnamed_addr #2 {
  %7 = alloca <2 x float>, align 8
  %8 = alloca %class.SkAutoSTMalloc.2, align 8
  %9 = alloca %class.SkSTArray, align 8
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca i64, align 8
  %13 = bitcast i64* %12 to %struct.SkPoint*
  %14 = add i32 %1, -3
  %15 = icmp ult i32 %14, 65532
  br i1 %15, label %16, label %1331

16:                                               ; preds = %6
  %17 = bitcast float %3 to i32
  %18 = and i32 %17, 2139095040
  %19 = icmp eq i32 %18, 2139095040
  br i1 %19, label %1331, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %22 = bitcast float* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = bitcast %struct.SkRect* %2 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fsub <2 x float> %23, %25
  %27 = fmul <2 x float> %26, <float 5.000000e-01, float 5.000000e-01>
  %28 = fcmp olt <2 x float> %27, zeroinitializer
  %29 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %27
  %30 = select <2 x i1> %28, <2 x float> %29, <2 x float> %27
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = fcmp olt float %32, %31
  %34 = select i1 %33, float %32, float %31
  %35 = fcmp olt float %34, %3
  br i1 %35, label %1331, label %36

36:                                               ; preds = %20
  %37 = tail call float @llvm.fabs.f32(float %3) #11
  %38 = fcmp ugt float %37, 0x3F30000000000000
  br i1 %38, label %111, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 2
  %41 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 1
  %42 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 0
  %43 = bitcast %class.SkTDArray* %4 to i8**
  %44 = icmp eq %class.SkTDArray.1* %5, null
  %45 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 2
  %46 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 1
  %47 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %48 = bitcast %class.SkTDArray.1* %5 to i8**
  %49 = zext i32 %1 to i64
  br label %50

50:                                               ; preds = %108, %39
  %51 = phi i64 [ 0, %39 ], [ %109, %108 ]
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %51
  %53 = load i32, i32* %40, align 4
  %54 = add i32 %53, 1
  %55 = icmp sgt i32 %54, -1
  br i1 %55, label %57, label %56

56:                                               ; preds = %50
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

57:                                               ; preds = %50
  %58 = load i32, i32* %41, align 8
  %59 = icmp slt i32 %58, %54
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = load %struct.SkPoint*, %struct.SkPoint** %42, align 8
  br label %74

62:                                               ; preds = %57
  %63 = add i32 %53, 5
  %64 = lshr i32 %63, 2
  %65 = add nuw i32 %64, %63
  %66 = icmp sgt i32 %65, -1
  br i1 %66, label %68, label %67

67:                                               ; preds = %62
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

68:                                               ; preds = %62
  store i32 %65, i32* %41, align 8
  %69 = load i8*, i8** %43, align 8
  %70 = sext i32 %65 to i64
  %71 = shl nsw i64 %70, 3
  %72 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %69, i64 %71) #11
  store i8* %72, i8** %43, align 8
  %73 = bitcast i8* %72 to %struct.SkPoint*
  br label %74

74:                                               ; preds = %60, %68
  %75 = phi %struct.SkPoint* [ %61, %60 ], [ %73, %68 ]
  store i32 %54, i32* %40, align 4
  %76 = sext i32 %53 to i64
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 %76
  %78 = bitcast %struct.SkPoint* %52 to i64*
  %79 = bitcast %struct.SkPoint* %77 to i64*
  %80 = load i64, i64* %78, align 4
  store i64 %80, i64* %79, align 4
  br i1 %44, label %108, label %81

81:                                               ; preds = %74
  %82 = load i32, i32* %45, align 4
  %83 = add i32 %82, 1
  %84 = icmp sgt i32 %83, -1
  br i1 %84, label %86, label %85

85:                                               ; preds = %81
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

86:                                               ; preds = %81
  %87 = load i32, i32* %46, align 8
  %88 = icmp slt i32 %87, %83
  br i1 %88, label %91, label %89

89:                                               ; preds = %86
  %90 = load i32*, i32** %47, align 8
  br label %103

91:                                               ; preds = %86
  %92 = add i32 %82, 5
  %93 = lshr i32 %92, 2
  %94 = add nuw i32 %93, %92
  %95 = icmp sgt i32 %94, -1
  br i1 %95, label %97, label %96

96:                                               ; preds = %91
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

97:                                               ; preds = %91
  store i32 %94, i32* %46, align 8
  %98 = load i8*, i8** %48, align 8
  %99 = sext i32 %94 to i64
  %100 = shl nsw i64 %99, 2
  %101 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %98, i64 %100) #11
  store i8* %101, i8** %48, align 8
  %102 = bitcast i8* %101 to i32*
  br label %103

103:                                              ; preds = %89, %97
  %104 = phi i32* [ %90, %89 ], [ %102, %97 ]
  store i32 %83, i32* %45, align 4
  %105 = sext i32 %82 to i64
  %106 = getelementptr inbounds i32, i32* %104, i64 %105
  %107 = trunc i64 %51 to i32
  store i32 %107, i32* %106, align 4
  br label %108

108:                                              ; preds = %74, %103
  %109 = add nuw nsw i64 %51, 1
  %110 = icmp eq i64 %109, %49
  br i1 %110, label %1331, label %50

111:                                              ; preds = %36
  %112 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %113 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %114 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %115 = load <2 x float>, <2 x float>* %114, align 4
  %116 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %117 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %118 = bitcast float* %116 to <2 x float>*
  %119 = load <2 x float>, <2 x float>* %118, align 4
  %120 = fsub <2 x float> %119, %115
  %121 = zext i32 %1 to i64
  %122 = add nsw i64 %121, -2
  %123 = and i64 %122, 1
  %124 = icmp eq i32 %1, 3
  br i1 %124, label %156, label %125

125:                                              ; preds = %111
  %126 = sub nsw i64 %122, %123
  br label %127

127:                                              ; preds = %127, %125
  %128 = phi i64 [ 2, %125 ], [ %153, %127 ]
  %129 = phi float [ 0.000000e+00, %125 ], [ %152, %127 ]
  %130 = phi <2 x float> [ %120, %125 ], [ %146, %127 ]
  %131 = phi i64 [ %126, %125 ], [ %154, %127 ]
  %132 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %128, i32 0
  %133 = bitcast float* %132 to <2 x float>*
  %134 = load <2 x float>, <2 x float>* %133, align 4
  %135 = fsub <2 x float> %134, %115
  %136 = shufflevector <2 x float> %130, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %137 = fmul <2 x float> %136, %135
  %138 = extractelement <2 x float> %137, i32 0
  %139 = extractelement <2 x float> %137, i32 1
  %140 = fsub float %139, %138
  %141 = fadd float %129, %140
  %142 = or i64 %128, 1
  %143 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %142, i32 0
  %144 = bitcast float* %143 to <2 x float>*
  %145 = load <2 x float>, <2 x float>* %144, align 4
  %146 = fsub <2 x float> %145, %115
  %147 = shufflevector <2 x float> %135, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %148 = fmul <2 x float> %147, %146
  %149 = extractelement <2 x float> %148, i32 0
  %150 = extractelement <2 x float> %148, i32 1
  %151 = fsub float %150, %149
  %152 = fadd float %141, %151
  %153 = add nuw nsw i64 %128, 2
  %154 = add i64 %131, -2
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %127

156:                                              ; preds = %127, %111
  %157 = phi float [ undef, %111 ], [ %152, %127 ]
  %158 = phi i64 [ 2, %111 ], [ %153, %127 ]
  %159 = phi float [ 0.000000e+00, %111 ], [ %152, %127 ]
  %160 = phi <2 x float> [ %120, %111 ], [ %146, %127 ]
  %161 = icmp eq i64 %123, 0
  br i1 %161, label %173, label %162

162:                                              ; preds = %156
  %163 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %158, i32 0
  %164 = bitcast float* %163 to <2 x float>*
  %165 = load <2 x float>, <2 x float>* %164, align 4
  %166 = fsub <2 x float> %165, %115
  %167 = shufflevector <2 x float> %160, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %168 = fmul <2 x float> %167, %166
  %169 = extractelement <2 x float> %168, i32 1
  %170 = extractelement <2 x float> %168, i32 0
  %171 = fsub float %169, %170
  %172 = fadd float %159, %171
  br label %173

173:                                              ; preds = %156, %162
  %174 = phi float [ %157, %156 ], [ %172, %162 ]
  %175 = tail call float @llvm.fabs.f32(float %174) #11
  %176 = fcmp ole float %175, 0x3E70000000000000
  %177 = fcmp ogt float %174, 0.000000e+00
  %178 = select i1 %177, i32 1, i32 -1
  %179 = select i1 %176, i32 0, i32 %178
  br i1 %176, label %1331, label %180

180:                                              ; preds = %173
  %181 = bitcast %class.SkAutoSTMalloc.2* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %181) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 -86, i64 520, i1 false)
  %182 = icmp ugt i32 %1, 64
  br i1 %182, label %191, label %183

183:                                              ; preds = %180
  %184 = icmp eq i32 %1, 0
  br i1 %184, label %189, label %185

185:                                              ; preds = %183
  %186 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 1
  %187 = bitcast %class.SkAutoSTMalloc.2* %8 to %union.anon.3**
  store %union.anon.3* %186, %union.anon.3** %187, align 8
  %188 = add nsw i32 %1, -1
  br label %197

189:                                              ; preds = %183
  %190 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 0
  store %struct.SkPoint* null, %struct.SkPoint** %190, align 8
  br label %332

191:                                              ; preds = %180
  %192 = sext i32 %1 to i64
  %193 = tail call i8* @_Z15sk_malloc_throwmm(i64 %192, i64 8) #11
  %194 = bitcast %class.SkAutoSTMalloc.2* %8 to i8**
  store i8* %193, i8** %194, align 8
  %195 = add nsw i32 %1, -1
  %196 = icmp sgt i32 %1, 0
  br i1 %196, label %197, label %332

197:                                              ; preds = %185, %191
  %198 = phi i32 [ %188, %185 ], [ %195, %191 ]
  %199 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 0
  %200 = bitcast <2 x float>* %7 to %struct.SkPoint*
  %201 = bitcast <2 x float>* %7 to i8*
  %202 = sitofp i32 %179 to float
  %203 = fmul float %202, %3
  %204 = bitcast <2 x float>* %7 to i64*
  br label %205

205:                                              ; preds = %327, %197
  %206 = phi i64 [ 0, %197 ], [ %217, %327 ]
  %207 = phi i32 [ %198, %197 ], [ %328, %327 ]
  %208 = phi i32 [ 0, %197 ], [ %330, %327 ]
  %209 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %206, i32 0
  %210 = load float, float* %209, align 4
  %211 = fmul float %210, 0.000000e+00
  %212 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %206, i32 1
  %213 = load float, float* %212, align 4
  %214 = fmul float %211, %213
  %215 = fcmp ord float %214, 0.000000e+00
  br i1 %215, label %216, label %1321

216:                                              ; preds = %205
  %217 = add nuw nsw i64 %206, 1
  %218 = icmp eq i64 %217, %121
  %219 = trunc i64 %217 to i32
  %220 = select i1 %218, i32 0, i32 %219
  %221 = zext i32 %220 to i64
  %222 = load %struct.SkPoint*, %struct.SkPoint** %199, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201) #11
  %223 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %221, i32 1
  %224 = load float, float* %223, align 4
  %225 = fsub float %213, %224
  %226 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %221, i32 0
  %227 = load float, float* %226, align 4
  %228 = fsub float %227, %210
  %229 = insertelement <2 x float> undef, float %225, i32 0
  %230 = insertelement <2 x float> %229, float %228, i32 1
  store <2 x float> %230, <2 x float>* %7, align 8
  %231 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %200, float %203) #11
  br i1 %231, label %233, label %232

232:                                              ; preds = %216
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #11
  br label %1321

233:                                              ; preds = %216
  %234 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %222, i64 %206
  %235 = bitcast %struct.SkPoint* %234 to i64*
  %236 = load i64, i64* %204, align 8
  store i64 %236, i64* %235, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #11
  %237 = icmp eq i64 %206, 0
  br i1 %237, label %327, label %238

238:                                              ; preds = %233
  %239 = and i32 %207, 65535
  %240 = zext i32 %239 to i64
  %241 = trunc i64 %206 to i32
  %242 = and i64 %206, 65535
  %243 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %242, i32 0
  %244 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %240, i32 0
  %245 = bitcast float* %243 to <2 x float>*
  %246 = load <2 x float>, <2 x float>* %245, align 4
  %247 = bitcast float* %244 to <2 x float>*
  %248 = load <2 x float>, <2 x float>* %247, align 4
  %249 = fsub <2 x float> %246, %248
  %250 = and i32 %220, 65535
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %251, i32 0
  %253 = bitcast float* %252 to <2 x float>*
  %254 = load <2 x float>, <2 x float>* %253, align 4
  %255 = fsub <2 x float> %254, %248
  %256 = shufflevector <2 x float> %255, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %257 = fmul <2 x float> %249, %256
  %258 = extractelement <2 x float> %257, i32 0
  %259 = extractelement <2 x float> %257, i32 1
  %260 = fsub float %258, %259
  %261 = call float @llvm.fabs.f32(float %260) #11
  %262 = fcmp ole float %261, 0x3E70000000000000
  %263 = fcmp ogt float %260, 0.000000e+00
  %264 = select i1 %263, i32 1, i32 -1
  %265 = select i1 %262, i32 0, i32 %264
  %266 = mul nsw i32 %265, %179
  %267 = sitofp i32 %266 to float
  %268 = fmul float %267, %3
  %269 = fcmp olt float %268, 0.000000e+00
  br i1 %269, label %270, label %327

270:                                              ; preds = %238
  %271 = load %struct.SkPoint*, %struct.SkPoint** %199, align 8
  %272 = sext i32 %207 to i64
  %273 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %271, i64 %272, i32 0
  %274 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %271, i64 %206, i32 0
  %275 = bitcast float* %273 to <2 x float>*
  %276 = load <2 x float>, <2 x float>* %275, align 4
  %277 = bitcast float* %274 to <2 x float>*
  %278 = load <2 x float>, <2 x float>* %277, align 4
  %279 = fmul <2 x float> %276, %278
  %280 = extractelement <2 x float> %279, i32 0
  %281 = extractelement <2 x float> %279, i32 1
  %282 = fadd float %280, %281
  %283 = bitcast float %282 to i32
  %284 = and i32 %283, 2139095040
  %285 = icmp eq i32 %284, 2139095040
  br i1 %285, label %1321, label %286

286:                                              ; preds = %270
  %287 = extractelement <2 x float> %276, i32 0
  %288 = extractelement <2 x float> %278, i32 1
  %289 = fmul float %287, %288
  %290 = extractelement <2 x float> %276, i32 1
  %291 = extractelement <2 x float> %278, i32 0
  %292 = fmul float %291, %290
  %293 = fsub float %289, %292
  %294 = bitcast float %293 to i32
  %295 = and i32 %294, 2139095040
  %296 = icmp eq i32 %295, 2139095040
  br i1 %296, label %1321, label %297

297:                                              ; preds = %286
  %298 = call float @atan2f(float %293, float %282) #11
  %299 = fmul float %298, %3
  %300 = fmul float %299, 2.500000e-01
  %301 = call float @llvm.fabs.f32(float %300) #11
  %302 = fcmp ult float %301, 6.553500e+04
  br i1 %302, label %303, label %1321

303:                                              ; preds = %297
  %304 = fadd float %301, 5.000000e-01
  %305 = call float @llvm.floor.f32(float %304) #11
  %306 = fcmp olt float %305, 0x41DFFFFFE0000000
  %307 = select i1 %306, float %305, float 0x41DFFFFFE0000000
  %308 = fcmp ogt float %307, 0xC1DFFFFFE0000000
  %309 = select i1 %308, float %307, float 0xC1DFFFFFE0000000
  %310 = fptosi float %309 to i32
  %311 = icmp sgt i32 %310, 0
  br i1 %311, label %312, label %315

312:                                              ; preds = %303
  %313 = sitofp i32 %310 to float
  %314 = fdiv float %298, %313
  br label %315

315:                                              ; preds = %312, %303
  %316 = phi float [ %314, %312 ], [ 0.000000e+00, %303 ]
  %317 = call float @sinf(float %316) #11
  %318 = call float @cosf(float %316) #11
  br i1 %311, label %319, label %323

319:                                              ; preds = %315
  %320 = fcmp oeq float %317, 0.000000e+00
  %321 = fcmp oeq float %318, 1.000000e+00
  %322 = or i1 %320, %321
  br i1 %322, label %1321, label %323

323:                                              ; preds = %315, %319
  %324 = icmp sgt i32 %310, 1
  %325 = select i1 %324, i32 %310, i32 1
  %326 = add i32 %325, %208
  br label %327

327:                                              ; preds = %233, %238, %323
  %328 = phi i32 [ %241, %238 ], [ %241, %323 ], [ 0, %233 ]
  %329 = phi i32 [ %208, %238 ], [ %326, %323 ], [ %208, %233 ]
  %330 = add i32 %329, 1
  %331 = icmp eq i64 %217, %121
  br i1 %331, label %332, label %205

332:                                              ; preds = %327, %189, %191
  %333 = phi i1 [ false, %191 ], [ false, %189 ], [ true, %327 ]
  %334 = phi i32 [ %195, %191 ], [ -1, %189 ], [ %198, %327 ]
  %335 = phi i32 [ 0, %191 ], [ 0, %189 ], [ %330, %327 ]
  %336 = and i32 %334, 65535
  %337 = zext i32 %336 to i64
  %338 = load float, float* %112, align 4
  %339 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %337, i32 0
  %340 = load float, float* %339, align 4
  %341 = fsub float %338, %340
  %342 = load float, float* %113, align 4
  %343 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %337, i32 1
  %344 = load float, float* %343, align 4
  %345 = fsub float %342, %344
  %346 = load float, float* %116, align 4
  %347 = fsub float %346, %340
  %348 = load float, float* %117, align 4
  %349 = fsub float %348, %344
  %350 = fmul float %341, %349
  %351 = fmul float %345, %347
  %352 = fsub float %350, %351
  %353 = call float @llvm.fabs.f32(float %352) #11
  %354 = fcmp ole float %353, 0x3E70000000000000
  %355 = fcmp ogt float %352, 0.000000e+00
  %356 = select i1 %355, i32 1, i32 -1
  %357 = select i1 %354, i32 0, i32 %356
  %358 = mul nsw i32 %357, %179
  %359 = sitofp i32 %358 to float
  %360 = fmul float %359, %3
  %361 = fcmp olt float %360, 0.000000e+00
  br i1 %361, label %362, label %419

362:                                              ; preds = %332
  %363 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 0
  %364 = load %struct.SkPoint*, %struct.SkPoint** %363, align 8
  %365 = sext i32 %334 to i64
  %366 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %364, i64 %365, i32 0
  %367 = bitcast float* %366 to <2 x float>*
  %368 = load <2 x float>, <2 x float>* %367, align 4
  %369 = bitcast %struct.SkPoint* %364 to <2 x float>*
  %370 = load <2 x float>, <2 x float>* %369, align 4
  %371 = fmul <2 x float> %368, %370
  %372 = extractelement <2 x float> %371, i32 0
  %373 = extractelement <2 x float> %371, i32 1
  %374 = fadd float %372, %373
  %375 = bitcast float %374 to i32
  %376 = and i32 %375, 2139095040
  %377 = icmp eq i32 %376, 2139095040
  br i1 %377, label %1321, label %378

378:                                              ; preds = %362
  %379 = extractelement <2 x float> %368, i32 0
  %380 = extractelement <2 x float> %370, i32 1
  %381 = fmul float %379, %380
  %382 = extractelement <2 x float> %368, i32 1
  %383 = extractelement <2 x float> %370, i32 0
  %384 = fmul float %383, %382
  %385 = fsub float %381, %384
  %386 = bitcast float %385 to i32
  %387 = and i32 %386, 2139095040
  %388 = icmp eq i32 %387, 2139095040
  br i1 %388, label %1321, label %389

389:                                              ; preds = %378
  %390 = call float @atan2f(float %385, float %374) #11
  %391 = fmul float %390, %3
  %392 = fmul float %391, 2.500000e-01
  %393 = call float @llvm.fabs.f32(float %392) #11
  %394 = fcmp ult float %393, 6.553500e+04
  br i1 %394, label %395, label %1321

395:                                              ; preds = %389
  %396 = fadd float %393, 5.000000e-01
  %397 = call float @llvm.floor.f32(float %396) #11
  %398 = fcmp olt float %397, 0x41DFFFFFE0000000
  %399 = select i1 %398, float %397, float 0x41DFFFFFE0000000
  %400 = fcmp ogt float %399, 0xC1DFFFFFE0000000
  %401 = select i1 %400, float %399, float 0xC1DFFFFFE0000000
  %402 = fptosi float %401 to i32
  %403 = icmp sgt i32 %402, 0
  br i1 %403, label %404, label %407

404:                                              ; preds = %395
  %405 = sitofp i32 %402 to float
  %406 = fdiv float %390, %405
  br label %407

407:                                              ; preds = %404, %395
  %408 = phi float [ %406, %404 ], [ 0.000000e+00, %395 ]
  %409 = call float @sinf(float %408) #11
  %410 = call float @cosf(float %408) #11
  br i1 %403, label %411, label %415

411:                                              ; preds = %407
  %412 = fcmp oeq float %409, 0.000000e+00
  %413 = fcmp oeq float %410, 1.000000e+00
  %414 = or i1 %412, %413
  br i1 %414, label %1321, label %415

415:                                              ; preds = %407, %411
  %416 = icmp sgt i32 %402, 1
  %417 = select i1 %416, i32 %402, i32 1
  %418 = add i32 %417, %335
  br label %419

419:                                              ; preds = %415, %332
  %420 = phi i32 [ %335, %332 ], [ %418, %415 ]
  %421 = icmp slt i32 %420, 0
  br i1 %421, label %1321, label %422

422:                                              ; preds = %419
  %423 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3088, i8* nonnull %423) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %423, i8 -86, i64 3072, i1 false)
  %424 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 3072
  %425 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 3080
  %426 = bitcast i8* %425 to i64*
  %427 = bitcast i8* %424 to i8**
  store i8* %423, i8** %427, align 8
  store i64 549755813888, i64* %426, align 8
  %428 = icmp eq i32 %420, 0
  br i1 %428, label %436, label %429

429:                                              ; preds = %422
  %430 = bitcast i8* %424 to %class.SkTArray*
  call void @_ZN8SkTArrayI10OffsetEdgeLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %430, i32 %420, i32 0) #11
  %431 = load i64, i64* %426, align 8
  %432 = shl i64 %431, 32
  %433 = and i64 %432, 4294967296
  %434 = and i64 %431, -4294967297
  %435 = or i64 %433, %434
  br label %436

436:                                              ; preds = %422, %429
  %437 = phi i64 [ %435, %429 ], [ 549755813888, %422 ]
  store i64 %437, i64* %426, align 8
  br i1 %333, label %440, label %438

438:                                              ; preds = %436
  %439 = bitcast i8* %424 to %struct.OffsetEdge**
  br label %671

440:                                              ; preds = %436
  %441 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 0
  %442 = bitcast i8* %424 to %class.SkTArray*
  %443 = bitcast i8* %424 to %struct.OffsetEdge**
  br label %444

444:                                              ; preds = %669, %440
  %445 = phi i64 [ 0, %440 ], [ %448, %669 ]
  %446 = phi i32 [ %334, %440 ], [ %452, %669 ]
  %447 = phi %struct.OffsetEdge* [ null, %440 ], [ %631, %669 ]
  %448 = add nuw nsw i64 %445, 1
  %449 = icmp eq i64 %448, %121
  %450 = trunc i64 %448 to i32
  %451 = select i1 %449, i32 0, i32 %450
  %452 = trunc i64 %445 to i32
  %453 = trunc i64 %445 to i16
  %454 = trunc i32 %451 to i16
  %455 = and i32 %446, 65535
  %456 = zext i32 %455 to i64
  %457 = and i64 %445, 65535
  %458 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %457, i32 0
  %459 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %456, i32 0
  %460 = bitcast float* %458 to <2 x float>*
  %461 = load <2 x float>, <2 x float>* %460, align 4
  %462 = bitcast float* %459 to <2 x float>*
  %463 = load <2 x float>, <2 x float>* %462, align 4
  %464 = fsub <2 x float> %461, %463
  %465 = and i32 %451, 65535
  %466 = zext i32 %465 to i64
  %467 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %466, i32 0
  %468 = bitcast float* %467 to <2 x float>*
  %469 = load <2 x float>, <2 x float>* %468, align 4
  %470 = fsub <2 x float> %469, %463
  %471 = shufflevector <2 x float> %470, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %472 = fmul <2 x float> %464, %471
  %473 = extractelement <2 x float> %472, i32 0
  %474 = extractelement <2 x float> %472, i32 1
  %475 = fsub float %473, %474
  %476 = call float @llvm.fabs.f32(float %475) #11
  %477 = fcmp ole float %476, 0x3E70000000000000
  %478 = fcmp ogt float %475, 0.000000e+00
  %479 = select i1 %478, i32 1, i32 -1
  %480 = select i1 %477, i32 0, i32 %479
  %481 = mul nsw i32 %480, %179
  %482 = sitofp i32 %481 to float
  %483 = fmul float %482, %3
  %484 = fcmp olt float %483, 0.000000e+00
  br i1 %484, label %485, label %621

485:                                              ; preds = %444
  %486 = load %struct.SkPoint*, %struct.SkPoint** %441, align 8
  %487 = sext i32 %446 to i64
  %488 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %486, i64 %487
  %489 = bitcast %struct.SkPoint* %488 to <2 x i32>*
  %490 = load <2 x i32>, <2 x i32>* %489, align 4
  %491 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %486, i64 %445, i32 0
  %492 = bitcast <2 x i32> %490 to <2 x float>
  %493 = bitcast float* %491 to <2 x float>*
  %494 = load <2 x float>, <2 x float>* %493, align 4
  %495 = fmul <2 x float> %494, %492
  %496 = extractelement <2 x float> %495, i32 0
  %497 = extractelement <2 x float> %495, i32 1
  %498 = fadd float %496, %497
  %499 = bitcast float %498 to i32
  %500 = and i32 %499, 2139095040
  %501 = icmp eq i32 %500, 2139095040
  br i1 %501, label %1313, label %502

502:                                              ; preds = %485
  %503 = shufflevector <2 x float> %494, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %504 = fmul <2 x float> %503, %492
  %505 = extractelement <2 x float> %504, i32 0
  %506 = extractelement <2 x float> %504, i32 1
  %507 = fsub float %505, %506
  %508 = bitcast float %507 to i32
  %509 = and i32 %508, 2139095040
  %510 = icmp eq i32 %509, 2139095040
  br i1 %510, label %1313, label %511

511:                                              ; preds = %502
  %512 = call float @atan2f(float %507, float %498) #11
  %513 = fmul float %512, %3
  %514 = fmul float %513, 2.500000e-01
  %515 = call float @llvm.fabs.f32(float %514) #11
  %516 = fcmp ult float %515, 6.553500e+04
  br i1 %516, label %517, label %1313

517:                                              ; preds = %511
  %518 = fadd float %515, 5.000000e-01
  %519 = call float @llvm.floor.f32(float %518) #11
  %520 = fcmp olt float %519, 0x41DFFFFFE0000000
  %521 = select i1 %520, float %519, float 0x41DFFFFFE0000000
  %522 = fcmp ogt float %521, 0xC1DFFFFFE0000000
  %523 = select i1 %522, float %521, float 0xC1DFFFFFE0000000
  %524 = fptosi float %523 to i32
  %525 = icmp sgt i32 %524, 0
  br i1 %525, label %526, label %529

526:                                              ; preds = %517
  %527 = sitofp i32 %524 to float
  %528 = fdiv float %512, %527
  br label %529

529:                                              ; preds = %526, %517
  %530 = phi float [ %528, %526 ], [ 0.000000e+00, %517 ]
  %531 = call float @sinf(float %530) #11
  %532 = call float @cosf(float %530) #11
  br i1 %525, label %533, label %537

533:                                              ; preds = %529
  %534 = fcmp oeq float %531, 0.000000e+00
  %535 = fcmp oeq float %532, 1.000000e+00
  %536 = or i1 %534, %535
  br i1 %536, label %1313, label %537

537:                                              ; preds = %533, %529
  %538 = icmp sgt i32 %524, 1
  %539 = select i1 %538, i32 %524, i32 1
  call void @_ZN8SkTArrayI10OffsetEdgeLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %442, i32 %539, i32 1) #11
  %540 = load %struct.OffsetEdge*, %struct.OffsetEdge** %443, align 8
  %541 = load i64, i64* %426, align 8
  %542 = lshr i64 %541, 1
  %543 = trunc i64 %542 to i32
  %544 = and i64 %542, 2147483647
  %545 = add i32 %539, %543
  %546 = shl i32 %545, 1
  %547 = zext i32 %546 to i64
  %548 = and i64 %541, -4294967295
  %549 = or i64 %548, %547
  store i64 %549, i64* %426, align 8
  %550 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %540, i64 %544
  %551 = add i32 %524, -1
  %552 = icmp sgt i32 %551, 0
  br i1 %552, label %553, label %560

553:                                              ; preds = %537
  %554 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %445, i32 0
  %555 = insertelement <2 x float> undef, float %532, i32 0
  %556 = shufflevector <2 x float> %555, <2 x float> undef, <2 x i32> zeroinitializer
  %557 = insertelement <2 x float> undef, float %531, i32 0
  %558 = shufflevector <2 x float> %557, <2 x float> undef, <2 x i32> zeroinitializer
  %559 = bitcast float* %554 to <2 x float>*
  br label %585

560:                                              ; preds = %615, %537
  %561 = phi %struct.OffsetEdge* [ %447, %537 ], [ %587, %615 ]
  %562 = phi %struct.OffsetEdge* [ %550, %537 ], [ %616, %615 ]
  %563 = phi <2 x float> [ %492, %537 ], [ %596, %615 ]
  %564 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %445, i32 0
  %565 = bitcast float* %564 to <2 x float>*
  %566 = load <2 x float>, <2 x float>* %565, align 4
  %567 = fadd <2 x float> %566, %563
  %568 = load %struct.SkPoint*, %struct.SkPoint** %441, align 8
  %569 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %568, i64 %445, i32 0
  %570 = bitcast float* %569 to <2 x float>*
  %571 = load <2 x float>, <2 x float>* %570, align 4
  %572 = fadd <2 x float> %566, %571
  %573 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 2, i32 0
  %574 = bitcast %struct.SkPoint* %573 to <2 x float>*
  store <2 x float> %567, <2 x float>* %574, align 8
  %575 = fsub <2 x float> %572, %567
  %576 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 2, i32 1
  %577 = bitcast %struct.SkPoint* %576 to <2 x float>*
  store <2 x float> %575, <2 x float>* %577, align 8
  %578 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 3
  %579 = bitcast %struct.SkPoint* %578 to <2 x float>*
  store <2 x float> %567, <2 x float>* %579, align 8
  %580 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 4
  store float 0xC7EFFFFFE0000000, float* %580, align 8
  %581 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 5
  store i16 %453, i16* %581, align 4
  %582 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 6
  store i16 %453, i16* %582, align 2
  %583 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %562, i64 0, i32 0
  store %struct.OffsetEdge* %561, %struct.OffsetEdge** %583, align 8
  %584 = icmp eq %struct.OffsetEdge* %561, null
  br i1 %584, label %621, label %619

585:                                              ; preds = %615, %553
  %586 = phi i32 [ 0, %553 ], [ %617, %615 ]
  %587 = phi %struct.OffsetEdge* [ %550, %553 ], [ %616, %615 ]
  %588 = phi %struct.OffsetEdge* [ %447, %553 ], [ %587, %615 ]
  %589 = phi <2 x i32> [ %490, %553 ], [ %610, %615 ]
  %590 = bitcast <2 x i32> %589 to <2 x float>
  %591 = fmul <2 x float> %556, %590
  %592 = shufflevector <2 x float> %590, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %593 = fmul <2 x float> %558, %592
  %594 = fsub <2 x float> %591, %593
  %595 = fadd <2 x float> %591, %593
  %596 = shufflevector <2 x float> %594, <2 x float> %595, <2 x i32> <i32 0, i32 3>
  %597 = load <2 x float>, <2 x float>* %559, align 4
  %598 = fadd <2 x float> %597, %590
  %599 = fadd <2 x float> %596, %597
  %600 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 2, i32 0
  %601 = bitcast %struct.SkPoint* %600 to <2 x float>*
  store <2 x float> %598, <2 x float>* %601, align 8
  %602 = fsub <2 x float> %599, %598
  %603 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 2, i32 1
  %604 = bitcast %struct.SkPoint* %603 to <2 x float>*
  store <2 x float> %602, <2 x float>* %604, align 8
  %605 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 3
  %606 = bitcast %struct.SkPoint* %605 to <2 x float>*
  store <2 x float> %598, <2 x float>* %606, align 8
  %607 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 4
  store float 0xC7EFFFFFE0000000, float* %607, align 8
  %608 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 5
  store i16 %453, i16* %608, align 4
  %609 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 6
  store i16 %453, i16* %609, align 2
  %610 = bitcast <2 x float> %596 to <2 x i32>
  %611 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 0, i32 0
  store %struct.OffsetEdge* %588, %struct.OffsetEdge** %611, align 8
  %612 = icmp eq %struct.OffsetEdge* %588, null
  br i1 %612, label %615, label %613

613:                                              ; preds = %585
  %614 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %588, i64 0, i32 1
  store %struct.OffsetEdge* %587, %struct.OffsetEdge** %614, align 8
  br label %615

615:                                              ; preds = %585, %613
  %616 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %587, i64 1
  %617 = add nuw nsw i32 %586, 1
  %618 = icmp eq i32 %617, %551
  br i1 %618, label %560, label %585

619:                                              ; preds = %560
  %620 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %561, i64 0, i32 1
  store %struct.OffsetEdge* %562, %struct.OffsetEdge** %620, align 8
  br label %621

621:                                              ; preds = %619, %560, %444
  %622 = phi %struct.OffsetEdge* [ %447, %444 ], [ %562, %560 ], [ %562, %619 ]
  call void @_ZN8SkTArrayI10OffsetEdgeLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %442, i32 1, i32 1) #11
  %623 = load %struct.OffsetEdge*, %struct.OffsetEdge** %443, align 8
  %624 = load i64, i64* %426, align 8
  %625 = lshr i64 %624, 1
  %626 = and i64 %625, 2147483647
  %627 = add i64 %624, 2
  %628 = and i64 %627, 4294967294
  %629 = and i64 %624, -4294967295
  %630 = or i64 %628, %629
  store i64 %630, i64* %426, align 8
  %631 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626
  %632 = load %struct.SkPoint*, %struct.SkPoint** %441, align 8
  %633 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %445, i32 0
  %634 = load float, float* %633, align 4
  %635 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %632, i64 %445, i32 0
  %636 = load float, float* %635, align 4
  %637 = fadd float %634, %636
  %638 = insertelement <2 x float> undef, float %637, i32 0
  %639 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %445, i32 1
  %640 = load float, float* %639, align 4
  %641 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %632, i64 %445, i32 1
  %642 = load float, float* %641, align 4
  %643 = fadd float %640, %642
  %644 = insertelement <2 x float> %638, float %643, i32 1
  %645 = zext i32 %451 to i64
  %646 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %645, i32 0
  %647 = load float, float* %646, align 4
  %648 = fadd float %636, %647
  %649 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %645, i32 1
  %650 = load float, float* %649, align 4
  %651 = fadd float %642, %650
  %652 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 2, i32 0
  %653 = bitcast %struct.SkPoint* %652 to <2 x float>*
  store <2 x float> %644, <2 x float>* %653, align 8
  %654 = fsub float %648, %637
  %655 = insertelement <2 x float> undef, float %654, i32 0
  %656 = fsub float %651, %643
  %657 = insertelement <2 x float> %655, float %656, i32 1
  %658 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 2, i32 1
  %659 = bitcast %struct.SkPoint* %658 to <2 x float>*
  store <2 x float> %657, <2 x float>* %659, align 8
  %660 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 3
  %661 = bitcast %struct.SkPoint* %660 to <2 x float>*
  store <2 x float> %644, <2 x float>* %661, align 8
  %662 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 4
  store float 0xC7EFFFFFE0000000, float* %662, align 8
  %663 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 5
  store i16 %453, i16* %663, align 4
  %664 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %623, i64 %626, i32 6
  store i16 %454, i16* %664, align 2
  %665 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %631, i64 0, i32 0
  store %struct.OffsetEdge* %622, %struct.OffsetEdge** %665, align 8
  %666 = icmp eq %struct.OffsetEdge* %622, null
  br i1 %666, label %669, label %667

667:                                              ; preds = %621
  %668 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %622, i64 0, i32 1
  store %struct.OffsetEdge* %631, %struct.OffsetEdge** %668, align 8
  br label %669

669:                                              ; preds = %667, %621
  %670 = icmp eq i64 %448, %121
  br i1 %670, label %671, label %444

671:                                              ; preds = %669, %438
  %672 = phi %struct.OffsetEdge** [ %439, %438 ], [ %443, %669 ]
  %673 = phi %struct.OffsetEdge* [ null, %438 ], [ %631, %669 ]
  %674 = bitcast i8* %424 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %673, i64 0, i32 1
  %677 = bitcast %struct.OffsetEdge** %676 to i64*
  store i64 %675, i64* %677, align 8
  %678 = load %struct.OffsetEdge*, %struct.OffsetEdge** %672, align 8
  %679 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %678, i64 0, i32 0
  store %struct.OffsetEdge* %673, %struct.OffsetEdge** %679, align 8
  %680 = load %struct.OffsetEdge*, %struct.OffsetEdge** %672, align 8
  %681 = zext i32 %420 to i64
  %682 = bitcast float* %10 to i8*
  %683 = bitcast float* %11 to i8*
  %684 = bitcast i64* %12 to i8*
  %685 = bitcast i64* %12 to float*
  %686 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 0, i32 1
  %687 = bitcast i64* %12 to <2 x float>*
  %688 = bitcast float* %11 to i32*
  %689 = mul nuw i64 %681, %681
  %690 = icmp eq %struct.OffsetEdge* %680, null
  br i1 %690, label %1016, label %691

691:                                              ; preds = %671, %1010
  %692 = phi i64 [ %701, %1010 ], [ 0, %671 ]
  %693 = phi i32 [ %1014, %1010 ], [ %420, %671 ]
  %694 = phi %struct.OffsetEdge* [ %1013, %1010 ], [ %680, %671 ]
  %695 = phi %struct.OffsetEdge* [ %1012, %1010 ], [ %673, %671 ]
  %696 = phi %struct.OffsetEdge* [ %1011, %1010 ], [ %680, %671 ]
  %697 = icmp ne %struct.OffsetEdge* %695, %694
  %698 = icmp ne i32 %693, 0
  %699 = and i1 %697, %698
  br i1 %699, label %700, label %1016

700:                                              ; preds = %691
  %701 = add nuw i64 %692, 1
  %702 = icmp eq i64 %692, %689
  br i1 %702, label %1313, label %703

703:                                              ; preds = %700
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %682) #11
  store float 0xFFFFFFFFE0000000, float* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %683) #11
  store float 0xFFFFFFFFE0000000, float* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %684) #11
  store float 0xFFFFFFFFE0000000, float* %685, align 8
  store float 0xFFFFFFFFE0000000, float* %686, align 4
  %704 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 6
  %705 = load i16, i16* %704, align 2
  %706 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 5
  %707 = load i16, i16* %706, align 4
  %708 = icmp eq i16 %705, %707
  br i1 %708, label %709, label %736

709:                                              ; preds = %703
  %710 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 2, i32 0, i32 0
  %711 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 2, i32 1, i32 0
  %712 = bitcast float* %710 to <2 x float>*
  %713 = load <2 x float>, <2 x float>* %712, align 4
  %714 = bitcast float* %711 to <2 x float>*
  %715 = load <2 x float>, <2 x float>* %714, align 4
  %716 = fadd <2 x float> %713, %715
  %717 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2, i32 0, i32 0
  %718 = bitcast float* %717 to <2 x float>*
  %719 = load <2 x float>, <2 x float>* %718, align 4
  %720 = fsub <2 x float> %716, %719
  %721 = bitcast <2 x float> %720 to <2 x i32>
  %722 = extractelement <2 x i32> %721, i32 0
  %723 = and i32 %722, 2139095040
  %724 = icmp eq i32 %723, 2139095040
  br i1 %724, label %735, label %725

725:                                              ; preds = %709
  %726 = bitcast <2 x float> %720 to <2 x i32>
  %727 = extractelement <2 x i32> %726, i32 1
  %728 = and i32 %727, 2139095040
  %729 = icmp eq i32 %728, 2139095040
  br i1 %729, label %735, label %730

730:                                              ; preds = %725
  %731 = fcmp oeq <2 x float> %720, zeroinitializer
  %732 = extractelement <2 x i1> %731, i32 0
  %733 = extractelement <2 x i1> %731, i32 1
  %734 = and i1 %732, %733
  br i1 %734, label %735, label %736

735:                                              ; preds = %709, %725, %730
  store <2 x float> %716, <2 x float>* %687, align 8
  store float 1.000000e+00, float* %10, align 4
  store float 0.000000e+00, float* %11, align 4
  br label %742

736:                                              ; preds = %703, %730
  %737 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 2
  %738 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2
  %739 = call fastcc zeroext i1 @_ZL20compute_intersectionRK13OffsetSegmentS1_P7SkPointPfS4_(%struct.OffsetSegment* dereferenceable(16) %737, %struct.OffsetSegment* dereferenceable(16) %738, %struct.SkPoint* nonnull %13, float* nonnull %10, float* nonnull %11) #11
  br i1 %739, label %740, label %796

740:                                              ; preds = %736
  %741 = load float, float* %10, align 4
  br label %742

742:                                              ; preds = %740, %735
  %743 = phi float [ %741, %740 ], [ 1.000000e+00, %735 ]
  %744 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 4
  %745 = load float, float* %744, align 8
  %746 = fcmp olt float %743, %745
  br i1 %746, label %747, label %768

747:                                              ; preds = %742
  %748 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 1
  %749 = bitcast %struct.OffsetEdge** %748 to i64*
  %750 = load i64, i64* %749, align 8
  %751 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 0
  %752 = load %struct.OffsetEdge*, %struct.OffsetEdge** %751, align 8
  %753 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %752, i64 0, i32 1
  %754 = bitcast %struct.OffsetEdge** %753 to i64*
  store i64 %750, i64* %754, align 8
  %755 = bitcast %struct.OffsetEdge* %695 to i64*
  %756 = load i64, i64* %755, align 8
  %757 = bitcast %struct.OffsetEdge** %748 to i64**
  %758 = load i64*, i64** %757, align 8
  store i64 %756, i64* %758, align 8
  %759 = icmp eq %struct.OffsetEdge* %696, %695
  br i1 %759, label %760, label %764

760:                                              ; preds = %747
  %761 = load %struct.OffsetEdge*, %struct.OffsetEdge** %748, align 8
  %762 = icmp eq %struct.OffsetEdge* %761, %696
  %763 = select i1 %762, %struct.OffsetEdge* null, %struct.OffsetEdge* %761
  br label %764

764:                                              ; preds = %747, %760
  %765 = phi %struct.OffsetEdge* [ %763, %760 ], [ %696, %747 ]
  %766 = add i32 %693, -1
  %767 = load %struct.OffsetEdge*, %struct.OffsetEdge** %751, align 8
  br label %1010

768:                                              ; preds = %742
  %769 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 4
  %770 = load float, float* %769, align 8
  %771 = fcmp ogt float %770, 0xC7EFFFFFE0000000
  br i1 %771, label %772, label %787

772:                                              ; preds = %768
  %773 = load float, float* %685, align 8
  %774 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 3, i32 0
  %775 = load float, float* %774, align 4
  %776 = fsub float %773, %775
  %777 = call float @llvm.fabs.f32(float %776) #11
  %778 = fcmp ugt float %777, 0x3EB0C6F7A0000000
  br i1 %778, label %787, label %779

779:                                              ; preds = %772
  %780 = load float, float* %686, align 4
  %781 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 3, i32 1
  %782 = load float, float* %781, align 4
  %783 = fsub float %780, %782
  %784 = call float @llvm.fabs.f32(float %783) #11
  %785 = fcmp ugt float %784, 0x3EB0C6F7A0000000
  br i1 %785, label %787, label %786

786:                                              ; preds = %779
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %684) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %683) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %682) #11
  br label %1016

787:                                              ; preds = %779, %772, %768
  %788 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 3
  %789 = bitcast %struct.SkPoint* %788 to i64*
  %790 = load i64, i64* %12, align 8
  store i64 %790, i64* %789, align 8
  %791 = load i32, i32* %688, align 4
  %792 = bitcast float* %769 to i32*
  store i32 %791, i32* %792, align 8
  %793 = load i16, i16* %704, align 2
  store i16 %793, i16* %706, align 4
  %794 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 1
  %795 = load %struct.OffsetEdge*, %struct.OffsetEdge** %794, align 8
  br label %1010

796:                                              ; preds = %736
  %797 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 0
  %798 = load %struct.OffsetEdge*, %struct.OffsetEdge** %797, align 8
  %799 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 1
  %800 = load %struct.OffsetEdge*, %struct.OffsetEdge** %799, align 8
  %801 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2, i32 1, i32 0
  %802 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 2, i32 1, i32 0
  %803 = bitcast float* %802 to <2 x float>*
  %804 = load <2 x float>, <2 x float>* %803, align 4
  %805 = shufflevector <2 x float> %804, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %806 = bitcast float* %801 to <2 x float>*
  %807 = load <2 x float>, <2 x float>* %806, align 4
  %808 = fmul <2 x float> %807, %805
  %809 = extractelement <2 x float> %808, i32 0
  %810 = extractelement <2 x float> %808, i32 1
  %811 = fsub float %809, %810
  %812 = call float @llvm.fabs.f32(float %811) #11
  %813 = fcmp ugt float %812, 0x3E70000000000000
  %814 = ptrtoint %struct.OffsetEdge* %800 to i64
  br i1 %813, label %815, label %840

815:                                              ; preds = %796
  %816 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 2, i32 0, i32 0
  %817 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2, i32 0, i32 0
  %818 = bitcast float* %816 to <2 x float>*
  %819 = load <2 x float>, <2 x float>* %818, align 4
  %820 = bitcast float* %817 to <2 x float>*
  %821 = load <2 x float>, <2 x float>* %820, align 4
  %822 = fsub <2 x float> %819, %821
  %823 = fmul <2 x float> %805, %822
  %824 = extractelement <2 x float> %823, i32 0
  %825 = extractelement <2 x float> %823, i32 1
  %826 = fsub float %824, %825
  %827 = fdiv float %826, %811
  %828 = fcmp olt float %827, 0.000000e+00
  %829 = fsub float -0.000000e+00, %827
  %830 = fadd float %827, -1.000000e+00
  %831 = select i1 %828, float %829, float %830
  %832 = call float @llvm.fabs.f32(float %831) #11
  %833 = fmul float %831, %832
  %834 = extractelement <2 x float> %807, i32 0
  %835 = fmul float %834, %834
  %836 = extractelement <2 x float> %807, i32 1
  %837 = fmul float %836, %836
  %838 = fadd float %835, %837
  %839 = fmul float %838, %833
  br label %840

840:                                              ; preds = %796, %815
  %841 = phi float [ %839, %815 ], [ 0x47EFFFFFE0000000, %796 ]
  %842 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 2, i32 1, i32 0
  %843 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %800, i64 0, i32 2, i32 1, i32 0
  %844 = bitcast float* %843 to <2 x float>*
  %845 = load <2 x float>, <2 x float>* %844, align 4
  %846 = shufflevector <2 x float> %845, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %847 = bitcast float* %842 to <2 x float>*
  %848 = load <2 x float>, <2 x float>* %847, align 4
  %849 = fmul <2 x float> %848, %846
  %850 = extractelement <2 x float> %849, i32 0
  %851 = extractelement <2 x float> %849, i32 1
  %852 = fsub float %850, %851
  %853 = call float @llvm.fabs.f32(float %852) #11
  %854 = fcmp ugt float %853, 0x3E70000000000000
  br i1 %854, label %855, label %973

855:                                              ; preds = %840
  %856 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %800, i64 0, i32 2, i32 0, i32 0
  %857 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 2, i32 0, i32 0
  %858 = bitcast float* %856 to <2 x float>*
  %859 = load <2 x float>, <2 x float>* %858, align 4
  %860 = bitcast float* %857 to <2 x float>*
  %861 = load <2 x float>, <2 x float>* %860, align 4
  %862 = fsub <2 x float> %859, %861
  %863 = fmul <2 x float> %846, %862
  %864 = extractelement <2 x float> %863, i32 0
  %865 = extractelement <2 x float> %863, i32 1
  %866 = fsub float %864, %865
  %867 = fdiv float %866, %852
  %868 = fcmp olt float %867, 0.000000e+00
  %869 = fsub float -0.000000e+00, %867
  %870 = fadd float %867, -1.000000e+00
  %871 = select i1 %868, float %869, float %870
  %872 = call float @llvm.fabs.f32(float %871) #11
  %873 = fmul float %871, %872
  %874 = fmul <2 x float> %848, %848
  %875 = extractelement <2 x float> %874, i32 0
  %876 = extractelement <2 x float> %874, i32 1
  %877 = fadd float %875, %876
  %878 = fmul float %877, %873
  %879 = fcmp olt float %841, 0.000000e+00
  %880 = fcmp olt float %878, 0.000000e+00
  %881 = and i1 %879, %880
  br i1 %881, label %882, label %973

882:                                              ; preds = %855
  %883 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 2, i32 0, i32 0
  %884 = load float, float* %883, align 4
  %885 = extractelement <2 x float> %804, i32 0
  %886 = fadd float %884, %885
  %887 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 2, i32 0, i32 1
  %888 = load float, float* %887, align 4
  %889 = extractelement <2 x float> %804, i32 1
  %890 = fadd float %888, %889
  %891 = extractelement <2 x float> %861, i32 0
  %892 = fsub float %886, %891
  %893 = extractelement <2 x float> %861, i32 1
  %894 = fsub float %890, %893
  %895 = bitcast float %892 to i32
  %896 = and i32 %895, 2139095040
  %897 = icmp eq i32 %896, 2139095040
  br i1 %897, label %906, label %898

898:                                              ; preds = %882
  %899 = bitcast float %894 to i32
  %900 = and i32 %899, 2139095040
  %901 = icmp eq i32 %900, 2139095040
  br i1 %901, label %906, label %902

902:                                              ; preds = %898
  %903 = fcmp oeq float %892, 0.000000e+00
  %904 = fcmp oeq float %894, 0.000000e+00
  %905 = and i1 %903, %904
  br label %906

906:                                              ; preds = %882, %898, %902
  %907 = phi i1 [ true, %898 ], [ %905, %902 ], [ true, %882 ]
  %908 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2, i32 0, i32 0
  %909 = load float, float* %908, align 4
  %910 = extractelement <2 x float> %807, i32 0
  %911 = fadd float %909, %910
  %912 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 2, i32 0, i32 1
  %913 = load float, float* %912, align 4
  %914 = extractelement <2 x float> %807, i32 1
  %915 = fadd float %913, %914
  %916 = extractelement <2 x float> %859, i32 0
  %917 = fsub float %911, %916
  %918 = extractelement <2 x float> %859, i32 1
  %919 = fsub float %915, %918
  %920 = bitcast float %917 to i32
  %921 = and i32 %920, 2139095040
  %922 = icmp eq i32 %921, 2139095040
  br i1 %922, label %931, label %923

923:                                              ; preds = %906
  %924 = bitcast float %919 to i32
  %925 = and i32 %924, 2139095040
  %926 = icmp eq i32 %925, 2139095040
  br i1 %926, label %931, label %927

927:                                              ; preds = %923
  %928 = fcmp oeq float %917, 0.000000e+00
  %929 = fcmp oeq float %919, 0.000000e+00
  %930 = and i1 %928, %929
  br label %931

931:                                              ; preds = %906, %923, %927
  %932 = phi i1 [ true, %923 ], [ %930, %927 ], [ true, %906 ]
  %933 = xor i1 %932, true
  %934 = or i1 %907, %933
  br i1 %934, label %952, label %935

935:                                              ; preds = %931
  %936 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 0
  %937 = load %struct.OffsetEdge*, %struct.OffsetEdge** %936, align 8
  %938 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %937, i64 0, i32 1
  %939 = bitcast %struct.OffsetEdge** %938 to i64*
  store i64 %814, i64* %939, align 8
  %940 = bitcast %struct.OffsetEdge* %694 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = bitcast %struct.OffsetEdge** %799 to i64**
  %943 = load i64*, i64** %942, align 8
  store i64 %941, i64* %943, align 8
  %944 = icmp eq %struct.OffsetEdge* %696, %694
  br i1 %944, label %945, label %949

945:                                              ; preds = %935
  %946 = load %struct.OffsetEdge*, %struct.OffsetEdge** %799, align 8
  %947 = icmp eq %struct.OffsetEdge* %946, %696
  %948 = select i1 %947, %struct.OffsetEdge* null, %struct.OffsetEdge* %946
  br label %949

949:                                              ; preds = %935, %945
  %950 = phi %struct.OffsetEdge* [ %948, %945 ], [ %696, %935 ]
  %951 = add i32 %693, -1
  br label %1010

952:                                              ; preds = %931
  %953 = xor i1 %907, true
  %954 = or i1 %932, %953
  br i1 %954, label %973, label %955

955:                                              ; preds = %952
  %956 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 1
  %957 = bitcast %struct.OffsetEdge** %956 to i64*
  %958 = load i64, i64* %957, align 8
  %959 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 1
  %960 = bitcast %struct.OffsetEdge** %959 to i64*
  store i64 %958, i64* %960, align 8
  %961 = bitcast %struct.OffsetEdge* %695 to i64*
  %962 = load i64, i64* %961, align 8
  %963 = bitcast %struct.OffsetEdge** %956 to i64**
  %964 = load i64*, i64** %963, align 8
  store i64 %962, i64* %964, align 8
  %965 = icmp eq %struct.OffsetEdge* %696, %695
  br i1 %965, label %966, label %970

966:                                              ; preds = %955
  %967 = load %struct.OffsetEdge*, %struct.OffsetEdge** %956, align 8
  %968 = icmp eq %struct.OffsetEdge* %967, %696
  %969 = select i1 %968, %struct.OffsetEdge* null, %struct.OffsetEdge* %967
  br label %970

970:                                              ; preds = %955, %966
  %971 = phi %struct.OffsetEdge* [ %969, %966 ], [ %696, %955 ]
  %972 = add i32 %693, -1
  br label %1010

973:                                              ; preds = %840, %952, %855
  %974 = phi float [ %878, %855 ], [ %878, %952 ], [ 0x47EFFFFFE0000000, %840 ]
  %975 = fcmp olt float %841, %974
  br i1 %975, label %976, label %991

976:                                              ; preds = %973
  %977 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %695, i64 0, i32 1
  %978 = bitcast %struct.OffsetEdge** %977 to i64*
  %979 = load i64, i64* %978, align 8
  %980 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %798, i64 0, i32 1
  %981 = bitcast %struct.OffsetEdge** %980 to i64*
  store i64 %979, i64* %981, align 8
  %982 = bitcast %struct.OffsetEdge* %695 to i64*
  %983 = load i64, i64* %982, align 8
  %984 = bitcast %struct.OffsetEdge** %977 to i64**
  %985 = load i64*, i64** %984, align 8
  store i64 %983, i64* %985, align 8
  %986 = icmp eq %struct.OffsetEdge* %696, %695
  br i1 %986, label %987, label %1005

987:                                              ; preds = %976
  %988 = load %struct.OffsetEdge*, %struct.OffsetEdge** %977, align 8
  %989 = icmp eq %struct.OffsetEdge* %988, %696
  %990 = select i1 %989, %struct.OffsetEdge* null, %struct.OffsetEdge* %988
  br label %1005

991:                                              ; preds = %973
  %992 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %694, i64 0, i32 0
  %993 = load %struct.OffsetEdge*, %struct.OffsetEdge** %992, align 8
  %994 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %993, i64 0, i32 1
  %995 = bitcast %struct.OffsetEdge** %994 to i64*
  store i64 %814, i64* %995, align 8
  %996 = bitcast %struct.OffsetEdge* %694 to i64*
  %997 = load i64, i64* %996, align 8
  %998 = bitcast %struct.OffsetEdge** %799 to i64**
  %999 = load i64*, i64** %998, align 8
  store i64 %997, i64* %999, align 8
  %1000 = icmp eq %struct.OffsetEdge* %696, %694
  br i1 %1000, label %1001, label %1005

1001:                                             ; preds = %991
  %1002 = load %struct.OffsetEdge*, %struct.OffsetEdge** %799, align 8
  %1003 = icmp eq %struct.OffsetEdge* %1002, %696
  %1004 = select i1 %1003, %struct.OffsetEdge* null, %struct.OffsetEdge* %1002
  br label %1005

1005:                                             ; preds = %976, %987, %991, %1001
  %1006 = phi %struct.OffsetEdge* [ %990, %987 ], [ %696, %976 ], [ %1004, %1001 ], [ %696, %991 ]
  %1007 = phi %struct.OffsetEdge* [ %798, %987 ], [ %798, %976 ], [ %695, %1001 ], [ %695, %991 ]
  %1008 = phi %struct.OffsetEdge* [ %694, %987 ], [ %694, %976 ], [ %800, %1001 ], [ %800, %991 ]
  %1009 = add i32 %693, -1
  br label %1010

1010:                                             ; preds = %787, %764, %1005, %949, %970
  %1011 = phi %struct.OffsetEdge* [ %950, %949 ], [ %971, %970 ], [ %765, %764 ], [ %696, %787 ], [ %1006, %1005 ]
  %1012 = phi %struct.OffsetEdge* [ %695, %949 ], [ %798, %970 ], [ %767, %764 ], [ %694, %787 ], [ %1007, %1005 ]
  %1013 = phi %struct.OffsetEdge* [ %800, %949 ], [ %694, %970 ], [ %694, %764 ], [ %795, %787 ], [ %1008, %1005 ]
  %1014 = phi i32 [ %951, %949 ], [ %972, %970 ], [ %766, %764 ], [ %693, %787 ], [ %1009, %1005 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %684) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %683) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %682) #11
  %1015 = icmp eq %struct.OffsetEdge* %1011, null
  br i1 %1015, label %1016, label %691

1016:                                             ; preds = %691, %1010, %671, %786
  %1017 = phi %struct.OffsetEdge* [ %696, %786 ], [ %680, %671 ], [ %1011, %1010 ], [ %696, %691 ]
  %1018 = phi i32 [ %693, %786 ], [ %420, %671 ], [ %1014, %1010 ], [ %693, %691 ]
  %1019 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 0
  %1020 = load %struct.SkPoint*, %struct.SkPoint** %1019, align 8
  %1021 = icmp eq %struct.SkPoint* %1020, null
  %1022 = bitcast %struct.SkPoint* %1020 to i8*
  br i1 %1021, label %1025, label %1023

1023:                                             ; preds = %1016
  call void @_Z7sk_freePv(i8* nonnull %1022) #11
  %1024 = bitcast %class.SkTDArray* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1024, i8 0, i64 16, i1 false) #11
  br label %1025

1025:                                             ; preds = %1016, %1023
  %1026 = phi i8* [ %1022, %1016 ], [ null, %1023 ]
  %1027 = icmp ne %struct.OffsetEdge* %1017, null
  %1028 = add i32 %1018, -1
  %1029 = icmp ult i32 %1028, 65534
  %1030 = and i1 %1027, %1029
  br i1 %1030, label %1031, label %1313

1031:                                             ; preds = %1025
  %1032 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 1
  %1033 = load i32, i32* %1032, align 8
  %1034 = icmp slt i32 %1033, %1018
  br i1 %1034, label %1035, label %1047

1035:                                             ; preds = %1031
  %1036 = add nuw nsw i32 %1018, 4
  %1037 = lshr i32 %1036, 2
  %1038 = add nuw nsw i32 %1037, %1036
  %1039 = icmp sgt i32 %1038, -1
  br i1 %1039, label %1041, label %1040

1040:                                             ; preds = %1035
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

1041:                                             ; preds = %1035
  store i32 %1038, i32* %1032, align 8
  %1042 = bitcast %class.SkTDArray* %4 to i8**
  %1043 = sext i32 %1038 to i64
  %1044 = shl nsw i64 %1043, 3
  %1045 = call i8* @_Z16sk_realloc_throwPvm(i8* %1026, i64 %1044) #11
  store i8* %1045, i8** %1042, align 8
  %1046 = bitcast i8* %1045 to %struct.SkPoint*
  br label %1047

1047:                                             ; preds = %1031, %1041
  %1048 = phi i8* [ %1026, %1031 ], [ %1045, %1041 ]
  %1049 = phi %struct.SkPoint* [ null, %1031 ], [ %1046, %1041 ]
  %1050 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1017, i64 0, i32 3
  %1051 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %4, i64 0, i32 2
  %1052 = load i32, i32* %1051, align 4
  %1053 = add i32 %1052, 1
  %1054 = icmp sgt i32 %1053, -1
  br i1 %1054, label %1056, label %1055

1055:                                             ; preds = %1047
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

1056:                                             ; preds = %1047
  %1057 = load i32, i32* %1032, align 8
  %1058 = icmp slt i32 %1057, %1053
  br i1 %1058, label %1059, label %1071

1059:                                             ; preds = %1056
  %1060 = add i32 %1052, 5
  %1061 = lshr i32 %1060, 2
  %1062 = add nuw i32 %1061, %1060
  %1063 = icmp sgt i32 %1062, -1
  br i1 %1063, label %1065, label %1064

1064:                                             ; preds = %1059
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

1065:                                             ; preds = %1059
  store i32 %1062, i32* %1032, align 8
  %1066 = bitcast %class.SkTDArray* %4 to i8**
  %1067 = sext i32 %1062 to i64
  %1068 = shl nsw i64 %1067, 3
  %1069 = call i8* @_Z16sk_realloc_throwPvm(i8* %1048, i64 %1068) #11
  store i8* %1069, i8** %1066, align 8
  %1070 = bitcast i8* %1069 to %struct.SkPoint*
  br label %1071

1071:                                             ; preds = %1056, %1065
  %1072 = phi %struct.SkPoint* [ %1070, %1065 ], [ %1049, %1056 ]
  store i32 %1053, i32* %1051, align 4
  %1073 = sext i32 %1052 to i64
  %1074 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1072, i64 %1073
  %1075 = bitcast %struct.SkPoint* %1050 to i64*
  %1076 = bitcast %struct.SkPoint* %1074 to i64*
  %1077 = load i64, i64* %1075, align 4
  store i64 %1077, i64* %1076, align 4
  %1078 = icmp ne %class.SkTDArray.1* %5, null
  br i1 %1078, label %1079, label %1112

1079:                                             ; preds = %1071
  %1080 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1017, i64 0, i32 5
  %1081 = load i16, i16* %1080, align 4
  %1082 = zext i16 %1081 to i32
  %1083 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 2
  %1084 = load i32, i32* %1083, align 4
  %1085 = add i32 %1084, 1
  %1086 = icmp sgt i32 %1085, -1
  br i1 %1086, label %1088, label %1087

1087:                                             ; preds = %1079
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

1088:                                             ; preds = %1079
  %1089 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 1
  %1090 = load i32, i32* %1089, align 8
  %1091 = icmp slt i32 %1090, %1085
  br i1 %1091, label %1095, label %1092

1092:                                             ; preds = %1088
  %1093 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %1094 = load i32*, i32** %1093, align 8
  br label %1108

1095:                                             ; preds = %1088
  %1096 = add i32 %1084, 5
  %1097 = lshr i32 %1096, 2
  %1098 = add nuw i32 %1097, %1096
  %1099 = icmp sgt i32 %1098, -1
  br i1 %1099, label %1101, label %1100

1100:                                             ; preds = %1095
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

1101:                                             ; preds = %1095
  store i32 %1098, i32* %1089, align 8
  %1102 = bitcast %class.SkTDArray.1* %5 to i8**
  %1103 = load i8*, i8** %1102, align 8
  %1104 = sext i32 %1098 to i64
  %1105 = shl nsw i64 %1104, 2
  %1106 = call i8* @_Z16sk_realloc_throwPvm(i8* %1103, i64 %1105) #11
  store i8* %1106, i8** %1102, align 8
  %1107 = bitcast i8* %1106 to i32*
  br label %1108

1108:                                             ; preds = %1092, %1101
  %1109 = phi i32* [ %1094, %1092 ], [ %1107, %1101 ]
  store i32 %1085, i32* %1083, align 4
  %1110 = sext i32 %1084 to i64
  %1111 = getelementptr inbounds i32, i32* %1109, i64 %1110
  store i32 %1082, i32* %1111, align 4
  br label %1112

1112:                                             ; preds = %1108, %1071
  %1113 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1017, i64 0, i32 1
  %1114 = load %struct.OffsetEdge*, %struct.OffsetEdge** %1113, align 8
  %1115 = icmp eq %struct.OffsetEdge* %1114, %1017
  br i1 %1115, label %1233, label %1116

1116:                                             ; preds = %1112
  %1117 = bitcast %class.SkTDArray* %4 to i8**
  %1118 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 2
  %1119 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 1
  %1120 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %1121 = bitcast %class.SkTDArray.1* %5 to i8**
  br label %1122

1122:                                             ; preds = %1116, %1201
  %1123 = phi %struct.OffsetEdge* [ %1114, %1116 ], [ %1204, %1201 ]
  %1124 = phi i32 [ 0, %1116 ], [ %1202, %1201 ]
  %1125 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1123, i64 0, i32 3
  %1126 = load %struct.SkPoint*, %struct.SkPoint** %1019, align 8
  %1127 = sext i32 %1124 to i64
  %1128 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1125, i64 0, i32 0
  %1129 = load float, float* %1128, align 4
  %1130 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1126, i64 %1127, i32 0
  %1131 = load float, float* %1130, align 4
  %1132 = fsub float %1129, %1131
  %1133 = call float @llvm.fabs.f32(float %1132) #11
  %1134 = fcmp ugt float %1133, 0x3F847AE140000000
  %1135 = bitcast %struct.SkPoint* %1126 to i8*
  br i1 %1134, label %1144, label %1136

1136:                                             ; preds = %1122
  %1137 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1123, i64 0, i32 3, i32 1
  %1138 = load float, float* %1137, align 4
  %1139 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1126, i64 %1127, i32 1
  %1140 = load float, float* %1139, align 4
  %1141 = fsub float %1138, %1140
  %1142 = call float @llvm.fabs.f32(float %1141) #11
  %1143 = fcmp ugt float %1142, 0x3F847AE140000000
  br i1 %1143, label %1144, label %1201

1144:                                             ; preds = %1136, %1122
  %1145 = load i32, i32* %1051, align 4
  %1146 = add i32 %1145, 1
  %1147 = icmp sgt i32 %1146, -1
  br i1 %1147, label %1149, label %1148

1148:                                             ; preds = %1144
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

1149:                                             ; preds = %1144
  %1150 = load i32, i32* %1032, align 8
  %1151 = icmp slt i32 %1150, %1146
  br i1 %1151, label %1152, label %1163

1152:                                             ; preds = %1149
  %1153 = add i32 %1145, 5
  %1154 = lshr i32 %1153, 2
  %1155 = add nuw i32 %1154, %1153
  %1156 = icmp sgt i32 %1155, -1
  br i1 %1156, label %1158, label %1157

1157:                                             ; preds = %1152
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

1158:                                             ; preds = %1152
  store i32 %1155, i32* %1032, align 8
  %1159 = sext i32 %1155 to i64
  %1160 = shl nsw i64 %1159, 3
  %1161 = call i8* @_Z16sk_realloc_throwPvm(i8* %1135, i64 %1160) #11
  store i8* %1161, i8** %1117, align 8
  %1162 = bitcast i8* %1161 to %struct.SkPoint*
  br label %1163

1163:                                             ; preds = %1149, %1158
  %1164 = phi %struct.SkPoint* [ %1162, %1158 ], [ %1126, %1149 ]
  store i32 %1146, i32* %1051, align 4
  %1165 = sext i32 %1145 to i64
  %1166 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1164, i64 %1165
  %1167 = bitcast %struct.SkPoint* %1125 to i64*
  %1168 = bitcast %struct.SkPoint* %1166 to i64*
  %1169 = load i64, i64* %1167, align 4
  store i64 %1169, i64* %1168, align 4
  br i1 %1078, label %1170, label %1199

1170:                                             ; preds = %1163
  %1171 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1123, i64 0, i32 5
  %1172 = load i16, i16* %1171, align 4
  %1173 = zext i16 %1172 to i32
  %1174 = load i32, i32* %1118, align 4
  %1175 = add i32 %1174, 1
  %1176 = icmp sgt i32 %1175, -1
  br i1 %1176, label %1178, label %1177

1177:                                             ; preds = %1170
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

1178:                                             ; preds = %1170
  %1179 = load i32, i32* %1119, align 8
  %1180 = icmp slt i32 %1179, %1175
  br i1 %1180, label %1183, label %1181

1181:                                             ; preds = %1178
  %1182 = load i32*, i32** %1120, align 8
  br label %1195

1183:                                             ; preds = %1178
  %1184 = add i32 %1174, 5
  %1185 = lshr i32 %1184, 2
  %1186 = add nuw i32 %1185, %1184
  %1187 = icmp sgt i32 %1186, -1
  br i1 %1187, label %1189, label %1188

1188:                                             ; preds = %1183
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

1189:                                             ; preds = %1183
  store i32 %1186, i32* %1119, align 8
  %1190 = load i8*, i8** %1121, align 8
  %1191 = sext i32 %1186 to i64
  %1192 = shl nsw i64 %1191, 2
  %1193 = call i8* @_Z16sk_realloc_throwPvm(i8* %1190, i64 %1192) #11
  store i8* %1193, i8** %1121, align 8
  %1194 = bitcast i8* %1193 to i32*
  br label %1195

1195:                                             ; preds = %1181, %1189
  %1196 = phi i32* [ %1182, %1181 ], [ %1194, %1189 ]
  store i32 %1175, i32* %1118, align 4
  %1197 = sext i32 %1174 to i64
  %1198 = getelementptr inbounds i32, i32* %1196, i64 %1197
  store i32 %1173, i32* %1198, align 4
  br label %1199

1199:                                             ; preds = %1195, %1163
  %1200 = add nsw i32 %1124, 1
  br label %1201

1201:                                             ; preds = %1136, %1199
  %1202 = phi i32 [ %1124, %1136 ], [ %1200, %1199 ]
  %1203 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %1123, i64 0, i32 1
  %1204 = load %struct.OffsetEdge*, %struct.OffsetEdge** %1203, align 8
  %1205 = icmp eq %struct.OffsetEdge* %1204, %1017
  br i1 %1205, label %1206, label %1122

1206:                                             ; preds = %1201
  %1207 = icmp sgt i32 %1202, 0
  br i1 %1207, label %1208, label %1233

1208:                                             ; preds = %1206
  %1209 = load %struct.SkPoint*, %struct.SkPoint** %1019, align 8
  %1210 = sext i32 %1202 to i64
  %1211 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1209, i64 0, i32 0
  %1212 = load float, float* %1211, align 4
  %1213 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1209, i64 %1210, i32 0
  %1214 = load float, float* %1213, align 4
  %1215 = fsub float %1212, %1214
  %1216 = call float @llvm.fabs.f32(float %1215) #11
  %1217 = fcmp ugt float %1216, 0x3F847AE140000000
  br i1 %1217, label %1233, label %1218

1218:                                             ; preds = %1208
  %1219 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1209, i64 0, i32 1
  %1220 = load float, float* %1219, align 4
  %1221 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1209, i64 %1210, i32 1
  %1222 = load float, float* %1221, align 4
  %1223 = fsub float %1220, %1222
  %1224 = call float @llvm.fabs.f32(float %1223) #11
  %1225 = fcmp ugt float %1224, 0x3F847AE140000000
  br i1 %1225, label %1233, label %1226

1226:                                             ; preds = %1218
  %1227 = load i32, i32* %1051, align 4
  %1228 = add nsw i32 %1227, -1
  store i32 %1228, i32* %1051, align 4
  br i1 %1078, label %1229, label %1236

1229:                                             ; preds = %1226
  %1230 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 2
  %1231 = load i32, i32* %1230, align 4
  %1232 = add nsw i32 %1231, -1
  store i32 %1232, i32* %1230, align 4
  br label %1233

1233:                                             ; preds = %1112, %1218, %1208, %1206, %1229
  %1234 = load i32, i32* %1051, align 4
  %1235 = load %struct.SkPoint*, %struct.SkPoint** %1019, align 8
  br label %1236

1236:                                             ; preds = %1233, %1226
  %1237 = phi %struct.SkPoint* [ %1235, %1233 ], [ %1209, %1226 ]
  %1238 = phi i32 [ %1234, %1233 ], [ %1228, %1226 ]
  %1239 = icmp slt i32 %1238, 3
  br i1 %1239, label %1306, label %1240

1240:                                             ; preds = %1236
  %1241 = bitcast %struct.SkPoint* %1237 to <2 x float>*
  %1242 = load <2 x float>, <2 x float>* %1241, align 4
  %1243 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1237, i64 1, i32 0
  %1244 = bitcast float* %1243 to <2 x float>*
  %1245 = load <2 x float>, <2 x float>* %1244, align 4
  %1246 = fsub <2 x float> %1245, %1242
  %1247 = zext i32 %1238 to i64
  %1248 = add nsw i64 %1247, -2
  %1249 = and i64 %1248, 1
  %1250 = icmp eq i32 %1238, 3
  br i1 %1250, label %1253, label %1251

1251:                                             ; preds = %1240
  %1252 = sub nsw i64 %1248, %1249
  br label %1277

1253:                                             ; preds = %1277, %1240
  %1254 = phi float [ undef, %1240 ], [ %1302, %1277 ]
  %1255 = phi i64 [ 2, %1240 ], [ %1303, %1277 ]
  %1256 = phi float [ 0.000000e+00, %1240 ], [ %1302, %1277 ]
  %1257 = phi <2 x float> [ %1246, %1240 ], [ %1296, %1277 ]
  %1258 = icmp eq i64 %1249, 0
  br i1 %1258, label %1270, label %1259

1259:                                             ; preds = %1253
  %1260 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1237, i64 %1255, i32 0
  %1261 = bitcast float* %1260 to <2 x float>*
  %1262 = load <2 x float>, <2 x float>* %1261, align 4
  %1263 = fsub <2 x float> %1262, %1242
  %1264 = shufflevector <2 x float> %1257, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %1265 = fmul <2 x float> %1264, %1263
  %1266 = extractelement <2 x float> %1265, i32 1
  %1267 = extractelement <2 x float> %1265, i32 0
  %1268 = fsub float %1266, %1267
  %1269 = fadd float %1256, %1268
  br label %1270

1270:                                             ; preds = %1253, %1259
  %1271 = phi float [ %1254, %1253 ], [ %1269, %1259 ]
  %1272 = call float @llvm.fabs.f32(float %1271) #11
  %1273 = fcmp ole float %1272, 0x3E70000000000000
  %1274 = fcmp ogt float %1271, 0.000000e+00
  %1275 = select i1 %1274, float 1.000000e+00, float -1.000000e+00
  %1276 = select i1 %1273, float 0.000000e+00, float %1275
  br label %1306

1277:                                             ; preds = %1277, %1251
  %1278 = phi i64 [ 2, %1251 ], [ %1303, %1277 ]
  %1279 = phi float [ 0.000000e+00, %1251 ], [ %1302, %1277 ]
  %1280 = phi <2 x float> [ %1246, %1251 ], [ %1296, %1277 ]
  %1281 = phi i64 [ %1252, %1251 ], [ %1304, %1277 ]
  %1282 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1237, i64 %1278, i32 0
  %1283 = bitcast float* %1282 to <2 x float>*
  %1284 = load <2 x float>, <2 x float>* %1283, align 4
  %1285 = fsub <2 x float> %1284, %1242
  %1286 = shufflevector <2 x float> %1280, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %1287 = fmul <2 x float> %1286, %1285
  %1288 = extractelement <2 x float> %1287, i32 0
  %1289 = extractelement <2 x float> %1287, i32 1
  %1290 = fsub float %1289, %1288
  %1291 = fadd float %1279, %1290
  %1292 = or i64 %1278, 1
  %1293 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1237, i64 %1292, i32 0
  %1294 = bitcast float* %1293 to <2 x float>*
  %1295 = load <2 x float>, <2 x float>* %1294, align 4
  %1296 = fsub <2 x float> %1295, %1242
  %1297 = shufflevector <2 x float> %1285, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %1298 = fmul <2 x float> %1297, %1296
  %1299 = extractelement <2 x float> %1298, i32 0
  %1300 = extractelement <2 x float> %1298, i32 1
  %1301 = fsub float %1300, %1299
  %1302 = fadd float %1291, %1301
  %1303 = add nuw nsw i64 %1278, 2
  %1304 = add i64 %1281, -2
  %1305 = icmp eq i64 %1304, 0
  br i1 %1305, label %1253, label %1277

1306:                                             ; preds = %1236, %1270
  %1307 = phi float [ %1276, %1270 ], [ 0.000000e+00, %1236 ]
  %1308 = sitofp i32 %179 to float
  %1309 = fmul float %1307, %1308
  %1310 = fcmp ogt float %1309, 0.000000e+00
  br i1 %1310, label %1311, label %1313

1311:                                             ; preds = %1306
  %1312 = call zeroext i1 @_Z17SkIsSimplePolygonPK7SkPointi(%struct.SkPoint* %1237, i32 %1238)
  br label %1313

1313:                                             ; preds = %533, %511, %502, %485, %700, %1025, %1311, %1306
  %1314 = phi i1 [ false, %1025 ], [ false, %1306 ], [ %1312, %1311 ], [ false, %700 ], [ false, %485 ], [ false, %502 ], [ false, %511 ], [ false, %533 ]
  %1315 = load i64, i64* %426, align 8
  %1316 = and i64 %1315, 1
  %1317 = icmp eq i64 %1316, 0
  br i1 %1317, label %1320, label %1318

1318:                                             ; preds = %1313
  %1319 = load i8*, i8** %427, align 8
  call void @_Z7sk_freePv(i8* %1319) #11
  br label %1320

1320:                                             ; preds = %1313, %1318
  call void @llvm.lifetime.end.p0i8(i64 3088, i8* nonnull %423) #11
  br label %1321

1321:                                             ; preds = %319, %297, %286, %270, %205, %232, %411, %389, %378, %362, %419, %1320
  %1322 = phi i1 [ %1314, %1320 ], [ false, %419 ], [ false, %362 ], [ false, %378 ], [ false, %389 ], [ false, %411 ], [ false, %232 ], [ false, %205 ], [ false, %270 ], [ false, %286 ], [ false, %297 ], [ false, %319 ]
  %1323 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 0
  %1324 = load %struct.SkPoint*, %struct.SkPoint** %1323, align 8
  %1325 = getelementptr inbounds %class.SkAutoSTMalloc.2, %class.SkAutoSTMalloc.2* %8, i64 0, i32 1
  %1326 = bitcast %union.anon.3* %1325 to %struct.SkPoint*
  %1327 = icmp eq %struct.SkPoint* %1324, %1326
  br i1 %1327, label %1330, label %1328

1328:                                             ; preds = %1321
  %1329 = bitcast %struct.SkPoint* %1324 to i8*
  call void @_Z7sk_freePv(i8* %1329) #11
  br label %1330

1330:                                             ; preds = %1321, %1328
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %181) #11
  br label %1331

1331:                                             ; preds = %108, %16, %6, %1330, %173, %20
  %1332 = phi i1 [ false, %6 ], [ false, %16 ], [ false, %20 ], [ %1322, %1330 ], [ false, %173 ], [ true, %108 ]
  ret i1 %1332
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z26SkTriangulateSimplePolygonPK7SkPointPtiP9SkTDArrayItE(%struct.SkPoint*, i16* nocapture readonly, i32, %class.SkTDArray.4* nocapture) local_unnamed_addr #2 {
  %5 = alloca %struct.SkRect, align 4
  %6 = alloca %class.SkAutoSTArray, align 8
  %7 = alloca %class.ReflexHash, align 8
  %8 = add i32 %2, -3
  %9 = icmp ult i32 %8, 65532
  br i1 %9, label %10, label %621

10:                                               ; preds = %4
  %11 = bitcast %struct.SkRect* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #11
  %12 = bitcast %struct.SkRect* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -1, i64 16, i1 false)
  %13 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* nonnull %5, %struct.SkPoint* %0, i32 %2) #11
  br i1 %13, label %14, label %619

14:                                               ; preds = %10
  %15 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fsub <2 x float> %19, %16
  %21 = zext i32 %2 to i64
  %22 = add nsw i64 %21, -2
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %2, 3
  br i1 %24, label %56, label %25

25:                                               ; preds = %14
  %26 = sub nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 2, %25 ], [ %53, %27 ]
  %29 = phi float [ 0.000000e+00, %25 ], [ %52, %27 ]
  %30 = phi <2 x float> [ %20, %25 ], [ %46, %27 ]
  %31 = phi i64 [ %26, %25 ], [ %54, %27 ]
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %28, i32 0
  %33 = bitcast float* %32 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = fsub <2 x float> %34, %16
  %36 = shufflevector <2 x float> %30, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %37 = fmul <2 x float> %36, %35
  %38 = extractelement <2 x float> %37, i32 0
  %39 = extractelement <2 x float> %37, i32 1
  %40 = fsub float %39, %38
  %41 = fadd float %29, %40
  %42 = or i64 %28, 1
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %42, i32 0
  %44 = bitcast float* %43 to <2 x float>*
  %45 = load <2 x float>, <2 x float>* %44, align 4
  %46 = fsub <2 x float> %45, %16
  %47 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %48 = fmul <2 x float> %47, %46
  %49 = extractelement <2 x float> %48, i32 0
  %50 = extractelement <2 x float> %48, i32 1
  %51 = fsub float %50, %49
  %52 = fadd float %41, %51
  %53 = add nuw nsw i64 %28, 2
  %54 = add i64 %31, -2
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %27

56:                                               ; preds = %27, %14
  %57 = phi float [ undef, %14 ], [ %52, %27 ]
  %58 = phi i64 [ 2, %14 ], [ %53, %27 ]
  %59 = phi float [ 0.000000e+00, %14 ], [ %52, %27 ]
  %60 = phi <2 x float> [ %20, %14 ], [ %46, %27 ]
  %61 = icmp eq i64 %23, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %58, i32 0
  %64 = bitcast float* %63 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 4
  %66 = fsub <2 x float> %65, %16
  %67 = shufflevector <2 x float> %60, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %68 = fmul <2 x float> %67, %66
  %69 = extractelement <2 x float> %68, i32 1
  %70 = extractelement <2 x float> %68, i32 0
  %71 = fsub float %69, %70
  %72 = fadd float %59, %71
  br label %73

73:                                               ; preds = %56, %62
  %74 = phi float [ %57, %56 ], [ %72, %62 ]
  %75 = call float @llvm.fabs.f32(float %74) #11
  %76 = fcmp ole float %75, 0x3E70000000000000
  %77 = fcmp ogt float %74, 0.000000e+00
  %78 = select i1 %77, i32 1, i32 -1
  %79 = select i1 %76, i32 0, i32 %78
  br i1 %76, label %619, label %80

80:                                               ; preds = %73
  %81 = bitcast %class.SkAutoSTArray* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2576, i8* nonnull %81) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 2576, i1 false)
  %82 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %6, i64 0, i32 1
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %82, align 8
  %83 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %6, i64 0, i32 0
  store i32 0, i32* %83, align 8
  %84 = icmp eq i32 %2, 0
  br i1 %84, label %108, label %85

85:                                               ; preds = %80
  %86 = icmp sgt i32 %2, 64
  br i1 %86, label %87, label %91

87:                                               ; preds = %85
  %88 = sext i32 %2 to i64
  %89 = call i8* @_Z15sk_malloc_throwmm(i64 %88, i64 40) #11
  %90 = bitcast %struct.TriangulationVertex** %82 to i8**
  store i8* %89, i8** %90, align 8
  br label %98

91:                                               ; preds = %85
  %92 = icmp sgt i32 %2, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %91
  %94 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %6, i64 0, i32 2, i64 0
  %95 = bitcast %struct.TriangulationVertex** %82 to i8**
  store i8* %94, i8** %95, align 8
  %96 = sext i32 %2 to i64
  br label %98

97:                                               ; preds = %91
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %82, align 8
  store i32 %2, i32* %83, align 8
  br label %108

98:                                               ; preds = %93, %87
  %99 = phi i64 [ %88, %87 ], [ %96, %93 ]
  %100 = phi i8* [ %89, %87 ], [ %94, %93 ]
  %101 = bitcast i8* %100 to %struct.TriangulationVertex*
  store i32 %2, i32* %83, align 8
  %102 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %101, i64 %99
  br label %103

103:                                              ; preds = %103, %98
  %104 = phi %struct.TriangulationVertex* [ %105, %103 ], [ %101, %98 ]
  %105 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %104, i64 1
  %106 = bitcast %struct.TriangulationVertex* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 16, i1 false) #11
  %107 = icmp ult %struct.TriangulationVertex* %105, %102
  br i1 %107, label %103, label %110

108:                                              ; preds = %80, %97
  %109 = add nsw i32 %2, -1
  br label %122

110:                                              ; preds = %103
  %111 = add nsw i32 %2, -1
  %112 = icmp sgt i32 %2, 0
  br i1 %112, label %113, label %122

113:                                              ; preds = %110
  %114 = sext i32 %111 to i64
  %115 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %114, i32 0
  %116 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 4
  %118 = bitcast float* %115 to <2 x float>*
  %119 = load <2 x float>, <2 x float>* %118, align 4
  %120 = fsub <2 x float> %117, %119
  %121 = sitofp i32 %79 to float
  br label %138

122:                                              ; preds = %138, %108, %110
  %123 = phi i1 [ false, %108 ], [ false, %110 ], [ %112, %138 ]
  %124 = phi i32 [ %109, %108 ], [ %111, %110 ], [ %111, %138 ]
  %125 = bitcast %class.ReflexHash* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %125) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %125, i8* align 8 bitcast ({ %struct.SkRect, i32, i32, i32, %struct.SkPoint, [4 x i8], %class.SkTDArray.5 }* @__const._Z26SkTriangulateSimplePolygonPK7SkPointPtiP9SkTDArrayItE.reflexHash to i8*), i64 40, i1 false)
  %126 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 5
  %127 = bitcast %class.SkTDArray.5* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 16, i1 false) #11
  %128 = call zeroext i1 @_ZN10ReflexHash4initERK6SkRecti(%class.ReflexHash* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %5, i32 %2)
  br i1 %128, label %129, label %599

129:                                              ; preds = %122
  br i1 %123, label %130, label %183

130:                                              ; preds = %129
  %131 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 0, i32 0
  %132 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 4, i32 0
  %133 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 0, i32 1
  %134 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 4, i32 1
  %135 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 1
  %136 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 5, i32 0
  %137 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 3
  br label %219

138:                                              ; preds = %138, %113
  %139 = phi i64 [ 0, %113 ], [ %142, %138 ]
  %140 = phi i32 [ %111, %113 ], [ %155, %138 ]
  %141 = phi <2 x float> [ %120, %113 ], [ %171, %138 ]
  %142 = add nuw nsw i64 %139, 1
  %143 = icmp eq i64 %142, %21
  %144 = trunc i64 %142 to i32
  %145 = select i1 %143, i32 0, i32 %144
  %146 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %147 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %146, i64 %139, i32 0
  %148 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %139
  %149 = bitcast %struct.TriangulationVertex** %147 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %149, i8 0, i64 34, i1 false)
  %150 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %151 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %150, i64 %139, i32 2
  %152 = bitcast %struct.SkPoint* %148 to i64*
  %153 = bitcast %struct.SkPoint* %151 to i64*
  %154 = load i64, i64* %152, align 4
  store i64 %154, i64* %153, align 8
  %155 = trunc i64 %139 to i32
  %156 = trunc i64 %139 to i16
  %157 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %158 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %157, i64 %139, i32 4
  store i16 %156, i16* %158, align 4
  %159 = trunc i32 %140 to i16
  %160 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %161 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %160, i64 %139, i32 5
  store i16 %159, i16* %161, align 2
  %162 = trunc i32 %145 to i16
  %163 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %164 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %163, i64 %139, i32 6
  store i16 %162, i16* %164, align 8
  %165 = zext i32 %145 to i64
  %166 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %165, i32 0
  %167 = bitcast float* %166 to <2 x float>*
  %168 = load <2 x float>, <2 x float>* %167, align 4
  %169 = bitcast %struct.SkPoint* %148 to <2 x float>*
  %170 = load <2 x float>, <2 x float>* %169, align 4
  %171 = fsub <2 x float> %168, %170
  %172 = shufflevector <2 x float> %141, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %173 = fmul <2 x float> %172, %171
  %174 = extractelement <2 x float> %173, i32 0
  %175 = extractelement <2 x float> %173, i32 1
  %176 = fsub float %175, %174
  %177 = fmul float %176, %121
  %178 = fcmp ule float %177, 0x3E70000000000000
  %179 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %180 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %179, i64 %139, i32 3
  %181 = zext i1 %178 to i32
  store i32 %181, i32* %180, align 8
  %182 = icmp eq i64 %142, %21
  br i1 %182, label %122, label %138

183:                                              ; preds = %303, %129
  %184 = phi i64 [ 0, %129 ], [ %305, %303 ]
  %185 = phi i64 [ 0, %129 ], [ %306, %303 ]
  %186 = getelementptr inbounds %class.SkTDArray.4, %class.SkTDArray.4* %3, i64 0, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = mul i32 %2, 3
  %189 = add i32 %188, -6
  %190 = add nsw i32 %189, %187
  %191 = getelementptr inbounds %class.SkTDArray.4, %class.SkTDArray.4* %3, i64 0, i32 1
  %192 = load i32, i32* %191, align 8
  %193 = icmp slt i32 %192, %190
  br i1 %193, label %194, label %206

194:                                              ; preds = %183
  %195 = add i32 %190, 4
  %196 = lshr i32 %195, 2
  %197 = add i32 %196, %195
  %198 = icmp sgt i32 %197, -1
  br i1 %198, label %200, label %199

199:                                              ; preds = %194
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

200:                                              ; preds = %194
  store i32 %197, i32* %191, align 8
  %201 = bitcast %class.SkTDArray.4* %3 to i8**
  %202 = load i8*, i8** %201, align 8
  %203 = sext i32 %197 to i64
  %204 = shl nsw i64 %203, 1
  %205 = call i8* @_Z16sk_realloc_throwPvm(i8* %202, i64 %204) #11
  store i8* %205, i8** %201, align 8
  br label %206

206:                                              ; preds = %183, %200
  %207 = icmp sgt i32 %2, 3
  br i1 %207, label %208, label %314

208:                                              ; preds = %206
  %209 = bitcast %class.SkTDArray.4* %3 to i8**
  %210 = getelementptr inbounds %class.SkTDArray.4, %class.SkTDArray.4* %3, i64 0, i32 0
  %211 = sitofp i32 %79 to float
  %212 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 0, i32 0
  %213 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 4, i32 0
  %214 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 0, i32 1
  %215 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 4, i32 1
  %216 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 1
  %217 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 5, i32 0
  %218 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %7, i64 0, i32 3
  br label %309

219:                                              ; preds = %303, %130
  %220 = phi i64 [ 0, %130 ], [ %304, %303 ]
  %221 = phi i32 [ %124, %130 ], [ %307, %303 ]
  %222 = phi i64 [ 0, %130 ], [ %306, %303 ]
  %223 = phi i64 [ 0, %130 ], [ %305, %303 ]
  %224 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %225 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220
  %226 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 3
  %227 = load i32, i32* %226, align 8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %265

229:                                              ; preds = %219
  %230 = add nuw nsw i64 %220, 1
  %231 = icmp eq i64 %230, %21
  %232 = sext i32 %221 to i64
  %233 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %232, i32 3
  %234 = load i32, i32* %233, align 8
  %235 = and i64 %230, 4294967295
  %236 = select i1 %231, i64 0, i64 %235
  %237 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %236, i32 3
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %234, 1
  %240 = icmp eq i32 %238, 1
  %241 = or i1 %239, %240
  br i1 %241, label %242, label %254

242:                                              ; preds = %229
  %243 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %225, i64 0, i32 0
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %243, align 8
  %244 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 1
  %245 = bitcast %struct.TriangulationVertex** %244 to i64*
  store i64 %223, i64* %245, align 8
  %246 = icmp eq i64 %223, 0
  br i1 %246, label %250, label %247

247:                                              ; preds = %242
  %248 = inttoptr i64 %223 to %struct.TriangulationVertex*
  %249 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %248, i64 0, i32 0
  store %struct.TriangulationVertex* %225, %struct.TriangulationVertex** %249, align 8
  br label %250

250:                                              ; preds = %247, %242
  %251 = ptrtoint %struct.TriangulationVertex* %225 to i64
  %252 = icmp eq i64 %222, 0
  %253 = select i1 %252, i64 %251, i64 %222
  br label %303

254:                                              ; preds = %229
  %255 = bitcast %struct.TriangulationVertex* %225 to i64*
  store i64 %222, i64* %255, align 8
  %256 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 1
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %256, align 8
  %257 = icmp eq i64 %222, 0
  br i1 %257, label %261, label %258

258:                                              ; preds = %254
  %259 = inttoptr i64 %222 to %struct.TriangulationVertex*
  %260 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %259, i64 0, i32 1
  store %struct.TriangulationVertex* %225, %struct.TriangulationVertex** %260, align 8
  br label %261

261:                                              ; preds = %258, %254
  %262 = ptrtoint %struct.TriangulationVertex* %225 to i64
  %263 = icmp eq i64 %223, 0
  %264 = select i1 %263, i64 %262, i64 %223
  br label %303

265:                                              ; preds = %219
  %266 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 2, i32 0
  %267 = load float, float* %266, align 8
  %268 = load float, float* %131, align 8
  %269 = fsub float %267, %268
  %270 = load float, float* %132, align 4
  %271 = fmul float %269, %270
  %272 = fptosi float %271 to i32
  %273 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 2, i32 1
  %274 = load float, float* %273, align 4
  %275 = load float, float* %133, align 4
  %276 = fsub float %274, %275
  %277 = load float, float* %134, align 4
  %278 = fmul float %276, %277
  %279 = fptosi float %278 to i32
  %280 = load i32, i32* %135, align 8
  %281 = mul nsw i32 %280, %279
  %282 = add nsw i32 %281, %272
  %283 = load %class.SkTInternalLList*, %class.SkTInternalLList** %136, align 8
  %284 = sext i32 %282 to i64
  %285 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %283, i64 %284, i32 1
  %286 = bitcast %struct.TriangulationVertex** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %struct.TriangulationVertex* %225 to i64*
  store i64 %287, i64* %288, align 8
  %289 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %224, i64 %220, i32 1
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %289, align 8
  %290 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %285, align 8
  %291 = icmp eq %struct.TriangulationVertex* %290, null
  br i1 %291, label %294, label %292

292:                                              ; preds = %265
  %293 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %290, i64 0, i32 1
  store %struct.TriangulationVertex* %225, %struct.TriangulationVertex** %293, align 8
  br label %294

294:                                              ; preds = %292, %265
  store %struct.TriangulationVertex* %225, %struct.TriangulationVertex** %285, align 8
  %295 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %283, i64 %284, i32 0
  %296 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %295, align 8
  %297 = icmp eq %struct.TriangulationVertex* %296, null
  br i1 %297, label %298, label %299

298:                                              ; preds = %294
  store %struct.TriangulationVertex* %225, %struct.TriangulationVertex** %295, align 8
  br label %299

299:                                              ; preds = %294, %298
  %300 = load i32, i32* %137, align 8
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* %137, align 8
  %302 = add nuw nsw i64 %220, 1
  br label %303

303:                                              ; preds = %261, %250, %299
  %304 = phi i64 [ %230, %261 ], [ %230, %250 ], [ %302, %299 ]
  %305 = phi i64 [ %264, %261 ], [ %251, %250 ], [ %223, %299 ]
  %306 = phi i64 [ %262, %261 ], [ %253, %250 ], [ %222, %299 ]
  %307 = trunc i64 %220 to i32
  %308 = icmp eq i64 %304, %21
  br i1 %308, label %183, label %219

309:                                              ; preds = %208, %558
  %310 = phi i32 [ %2, %208 ], [ %412, %558 ]
  %311 = phi i64 [ %185, %208 ], [ %560, %558 ]
  %312 = phi i64 [ %184, %208 ], [ %559, %558 ]
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %599, label %320

314:                                              ; preds = %558, %206
  %315 = phi i64 [ %184, %206 ], [ %559, %558 ]
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %599, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds %class.SkTDArray.4, %class.SkTDArray.4* %3, i64 0, i32 0
  %319 = bitcast %class.SkTDArray.4* %3 to i8**
  br label %562

320:                                              ; preds = %309, %338
  %321 = phi i64 [ %341, %338 ], [ %312, %309 ]
  %322 = inttoptr i64 %321 to %struct.TriangulationVertex*
  %323 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %322, i64 0, i32 5
  %324 = load i16, i16* %323, align 2
  %325 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %326 = zext i16 %324 to i64
  %327 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %322, i64 0, i32 6
  %328 = load i16, i16* %327, align 8
  %329 = zext i16 %328 to i64
  %330 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %326, i32 2
  %331 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %322, i64 0, i32 2
  %332 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %329, i32 2
  %333 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %326, i32 4
  %334 = load i16, i16* %333, align 4
  %335 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %329, i32 4
  %336 = load i16, i16* %335, align 4
  %337 = call zeroext i1 @_ZNK10ReflexHash13checkTriangleERK7SkPointS2_S2_tt(%class.ReflexHash* nonnull %7, %struct.SkPoint* dereferenceable(8) %330, %struct.SkPoint* dereferenceable(8) %331, %struct.SkPoint* dereferenceable(8) %332, i16 zeroext %334, i16 zeroext %336)
  br i1 %337, label %338, label %343

338:                                              ; preds = %320
  %339 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %322, i64 0, i32 1
  %340 = bitcast %struct.TriangulationVertex** %339 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %320

343:                                              ; preds = %320, %338
  %344 = phi i1 [ true, %338 ], [ false, %320 ]
  %345 = zext i16 %328 to i64
  %346 = zext i16 %324 to i64
  %347 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345
  %348 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346
  %349 = inttoptr i64 %321 to %struct.TriangulationVertex*
  br i1 %344, label %599, label %350

350:                                              ; preds = %343
  %351 = load i32, i32* %186, align 4
  %352 = add i32 %351, 3
  %353 = icmp sgt i32 %352, -1
  br i1 %353, label %355, label %354

354:                                              ; preds = %350
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

355:                                              ; preds = %350
  %356 = load i32, i32* %191, align 8
  %357 = icmp slt i32 %356, %352
  br i1 %357, label %360, label %358

358:                                              ; preds = %355
  %359 = load i16*, i16** %210, align 8
  br label %372

360:                                              ; preds = %355
  %361 = add i32 %351, 7
  %362 = lshr i32 %361, 2
  %363 = add nuw i32 %362, %361
  %364 = icmp sgt i32 %363, -1
  br i1 %364, label %366, label %365

365:                                              ; preds = %360
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

366:                                              ; preds = %360
  store i32 %363, i32* %191, align 8
  %367 = load i8*, i8** %209, align 8
  %368 = sext i32 %363 to i64
  %369 = shl nsw i64 %368, 1
  %370 = call i8* @_Z16sk_realloc_throwPvm(i8* %367, i64 %369) #11
  store i8* %370, i8** %209, align 8
  %371 = bitcast i8* %370 to i16*
  br label %372

372:                                              ; preds = %358, %366
  %373 = phi i16* [ %359, %358 ], [ %371, %366 ]
  store i32 %352, i32* %186, align 4
  %374 = sext i32 %351 to i64
  %375 = getelementptr inbounds i16, i16* %373, i64 %374
  %376 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 4
  %377 = load i16, i16* %376, align 4
  %378 = zext i16 %377 to i64
  %379 = getelementptr inbounds i16, i16* %1, i64 %378
  %380 = load i16, i16* %379, align 2
  store i16 %380, i16* %375, align 2
  %381 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %349, i64 0, i32 4
  %382 = load i16, i16* %381, align 4
  %383 = zext i16 %382 to i64
  %384 = getelementptr inbounds i16, i16* %1, i64 %383
  %385 = load i16, i16* %384, align 2
  %386 = getelementptr inbounds i16, i16* %375, i64 1
  store i16 %385, i16* %386, align 2
  %387 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 4
  %388 = load i16, i16* %387, align 4
  %389 = zext i16 %388 to i64
  %390 = getelementptr inbounds i16, i16* %1, i64 %389
  %391 = load i16, i16* %390, align 2
  %392 = getelementptr inbounds i16, i16* %375, i64 2
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %349, i64 0, i32 0
  %394 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %393, align 8
  %395 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %349, i64 0, i32 1
  %396 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %395, align 8
  %397 = icmp eq %struct.TriangulationVertex* %394, null
  br i1 %397, label %400, label %398

398:                                              ; preds = %372
  %399 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %394, i64 0, i32 1
  store %struct.TriangulationVertex* %396, %struct.TriangulationVertex** %399, align 8
  br label %402

400:                                              ; preds = %372
  %401 = ptrtoint %struct.TriangulationVertex* %396 to i64
  br label %402

402:                                              ; preds = %400, %398
  %403 = phi i64 [ %401, %400 ], [ %312, %398 ]
  %404 = icmp eq %struct.TriangulationVertex* %396, null
  br i1 %404, label %407, label %405

405:                                              ; preds = %402
  %406 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %396, i64 0, i32 0
  store %struct.TriangulationVertex* %394, %struct.TriangulationVertex** %406, align 8
  br label %409

407:                                              ; preds = %402
  %408 = ptrtoint %struct.TriangulationVertex* %394 to i64
  br label %409

409:                                              ; preds = %405, %407
  %410 = phi i64 [ %408, %407 ], [ %311, %405 ]
  %411 = inttoptr i64 %321 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %411, i8 0, i64 16, i1 false) #11
  %412 = add nsw i32 %310, -1
  %413 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %349, i64 0, i32 6
  %414 = load i16, i16* %413, align 8
  %415 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 6
  store i16 %414, i16* %415, align 8
  %416 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 3
  %417 = load i32, i32* %416, align 8
  %418 = icmp eq i32 %417, 1
  br i1 %418, label %419, label %484

419:                                              ; preds = %409
  %420 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 5
  %421 = load i16, i16* %420, align 2
  %422 = zext i16 %421 to i64
  %423 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 2, i32 0
  %424 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %422, i32 0
  %425 = bitcast float* %423 to <2 x float>*
  %426 = load <2 x float>, <2 x float>* %425, align 4
  %427 = bitcast float* %424 to <2 x float>*
  %428 = load <2 x float>, <2 x float>* %427, align 4
  %429 = fsub <2 x float> %426, %428
  %430 = zext i16 %414 to i64
  %431 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %430, i32 0
  %432 = bitcast float* %431 to <2 x float>*
  %433 = load <2 x float>, <2 x float>* %432, align 4
  %434 = fsub <2 x float> %433, %426
  %435 = shufflevector <2 x float> %434, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %436 = fmul <2 x float> %429, %435
  %437 = extractelement <2 x float> %436, i32 0
  %438 = extractelement <2 x float> %436, i32 1
  %439 = fsub float %437, %438
  %440 = fmul float %439, %211
  %441 = fcmp ogt float %440, 0x3E70000000000000
  br i1 %441, label %442, label %484

442:                                              ; preds = %419
  %443 = extractelement <2 x float> %426, i32 1
  %444 = extractelement <2 x float> %426, i32 0
  store i32 0, i32* %416, align 8
  %445 = load float, float* %212, align 8
  %446 = fsub float %444, %445
  %447 = load float, float* %213, align 4
  %448 = fmul float %446, %447
  %449 = fptosi float %448 to i32
  %450 = load float, float* %214, align 4
  %451 = fsub float %443, %450
  %452 = load float, float* %215, align 4
  %453 = fmul float %451, %452
  %454 = fptosi float %453 to i32
  %455 = load i32, i32* %216, align 8
  %456 = mul nsw i32 %455, %454
  %457 = add nsw i32 %456, %449
  %458 = load %class.SkTInternalLList*, %class.SkTInternalLList** %217, align 8
  %459 = sext i32 %457 to i64
  %460 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %348, i64 0, i32 0
  %461 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %460, align 8
  %462 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %346, i32 1
  %463 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %462, align 8
  %464 = icmp eq %struct.TriangulationVertex* %461, null
  %465 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %458, i64 %459, i32 0
  %466 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %461, i64 0, i32 1
  %467 = select i1 %464, %struct.TriangulationVertex** %465, %struct.TriangulationVertex** %466
  store %struct.TriangulationVertex* %463, %struct.TriangulationVertex** %467, align 8
  %468 = icmp eq %struct.TriangulationVertex* %463, null
  %469 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %458, i64 %459, i32 1
  %470 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %463, i64 0, i32 0
  %471 = select i1 %468, %struct.TriangulationVertex** %469, %struct.TriangulationVertex** %470
  store %struct.TriangulationVertex* %461, %struct.TriangulationVertex** %471, align 8
  %472 = bitcast %struct.TriangulationVertex* %348 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %472, i8 0, i64 16, i1 false) #11
  %473 = load i32, i32* %218, align 8
  %474 = add nsw i32 %473, -1
  store i32 %474, i32* %218, align 8
  %475 = bitcast %struct.TriangulationVertex* %348 to i64*
  store i64 %410, i64* %475, align 8
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %462, align 8
  %476 = icmp eq i64 %410, 0
  br i1 %476, label %480, label %477

477:                                              ; preds = %442
  %478 = inttoptr i64 %410 to %struct.TriangulationVertex*
  %479 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %478, i64 0, i32 1
  store %struct.TriangulationVertex* %348, %struct.TriangulationVertex** %479, align 8
  br label %480

480:                                              ; preds = %477, %442
  %481 = ptrtoint %struct.TriangulationVertex* %348 to i64
  %482 = icmp eq i64 %403, 0
  %483 = select i1 %482, i64 %481, i64 %403
  br label %484

484:                                              ; preds = %480, %409, %419
  %485 = phi i64 [ %403, %419 ], [ %403, %409 ], [ %483, %480 ]
  %486 = phi i64 [ %410, %419 ], [ %410, %409 ], [ %481, %480 ]
  %487 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %349, i64 0, i32 5
  %488 = load i16, i16* %487, align 2
  %489 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 5
  store i16 %488, i16* %489, align 2
  %490 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 3
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 1
  br i1 %492, label %493, label %558

493:                                              ; preds = %484
  %494 = zext i16 %488 to i64
  %495 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 2, i32 0
  %496 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %494, i32 0
  %497 = bitcast float* %495 to <2 x float>*
  %498 = load <2 x float>, <2 x float>* %497, align 4
  %499 = bitcast float* %496 to <2 x float>*
  %500 = load <2 x float>, <2 x float>* %499, align 4
  %501 = fsub <2 x float> %498, %500
  %502 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 6
  %503 = load i16, i16* %502, align 8
  %504 = zext i16 %503 to i64
  %505 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %504, i32 0
  %506 = bitcast float* %505 to <2 x float>*
  %507 = load <2 x float>, <2 x float>* %506, align 4
  %508 = fsub <2 x float> %507, %498
  %509 = shufflevector <2 x float> %508, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %510 = fmul <2 x float> %501, %509
  %511 = extractelement <2 x float> %510, i32 0
  %512 = extractelement <2 x float> %510, i32 1
  %513 = fsub float %511, %512
  %514 = fmul float %513, %211
  %515 = fcmp ogt float %514, 0x3E70000000000000
  br i1 %515, label %516, label %558

516:                                              ; preds = %493
  %517 = extractelement <2 x float> %498, i32 1
  %518 = extractelement <2 x float> %498, i32 0
  store i32 0, i32* %490, align 8
  %519 = load float, float* %212, align 8
  %520 = fsub float %518, %519
  %521 = load float, float* %213, align 4
  %522 = fmul float %520, %521
  %523 = fptosi float %522 to i32
  %524 = load float, float* %214, align 4
  %525 = fsub float %517, %524
  %526 = load float, float* %215, align 4
  %527 = fmul float %525, %526
  %528 = fptosi float %527 to i32
  %529 = load i32, i32* %216, align 8
  %530 = mul nsw i32 %529, %528
  %531 = add nsw i32 %530, %523
  %532 = load %class.SkTInternalLList*, %class.SkTInternalLList** %217, align 8
  %533 = sext i32 %531 to i64
  %534 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %347, i64 0, i32 0
  %535 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %534, align 8
  %536 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %325, i64 %345, i32 1
  %537 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %536, align 8
  %538 = icmp eq %struct.TriangulationVertex* %535, null
  %539 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %532, i64 %533, i32 0
  %540 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %535, i64 0, i32 1
  %541 = select i1 %538, %struct.TriangulationVertex** %539, %struct.TriangulationVertex** %540
  store %struct.TriangulationVertex* %537, %struct.TriangulationVertex** %541, align 8
  %542 = icmp eq %struct.TriangulationVertex* %537, null
  %543 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %532, i64 %533, i32 1
  %544 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %537, i64 0, i32 0
  %545 = select i1 %542, %struct.TriangulationVertex** %543, %struct.TriangulationVertex** %544
  store %struct.TriangulationVertex* %535, %struct.TriangulationVertex** %545, align 8
  %546 = bitcast %struct.TriangulationVertex* %347 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %546, i8 0, i64 16, i1 false) #11
  %547 = load i32, i32* %218, align 8
  %548 = add nsw i32 %547, -1
  store i32 %548, i32* %218, align 8
  %549 = bitcast %struct.TriangulationVertex* %347 to i64*
  store i64 %486, i64* %549, align 8
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %536, align 8
  %550 = icmp eq i64 %486, 0
  br i1 %550, label %554, label %551

551:                                              ; preds = %516
  %552 = inttoptr i64 %486 to %struct.TriangulationVertex*
  %553 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %552, i64 0, i32 1
  store %struct.TriangulationVertex* %347, %struct.TriangulationVertex** %553, align 8
  br label %554

554:                                              ; preds = %551, %516
  %555 = ptrtoint %struct.TriangulationVertex* %347 to i64
  %556 = icmp eq i64 %485, 0
  %557 = select i1 %556, i64 %555, i64 %485
  br label %558

558:                                              ; preds = %554, %493, %484
  %559 = phi i64 [ %485, %493 ], [ %485, %484 ], [ %557, %554 ]
  %560 = phi i64 [ %486, %493 ], [ %486, %484 ], [ %555, %554 ]
  %561 = icmp sgt i32 %412, 3
  br i1 %561, label %309, label %314

562:                                              ; preds = %317, %591
  %563 = phi i64 [ %315, %317 ], [ %597, %591 ]
  %564 = inttoptr i64 %563 to %struct.TriangulationVertex*
  %565 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %564, i64 0, i32 4
  %566 = load i16, i16* %565, align 4
  %567 = zext i16 %566 to i64
  %568 = getelementptr inbounds i16, i16* %1, i64 %567
  %569 = load i16, i16* %568, align 2
  %570 = load i32, i32* %186, align 4
  %571 = add i32 %570, 1
  %572 = icmp sgt i32 %571, -1
  br i1 %572, label %574, label %573

573:                                              ; preds = %562
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

574:                                              ; preds = %562
  %575 = load i32, i32* %191, align 8
  %576 = icmp slt i32 %575, %571
  br i1 %576, label %579, label %577

577:                                              ; preds = %574
  %578 = load i16*, i16** %318, align 8
  br label %591

579:                                              ; preds = %574
  %580 = add i32 %570, 5
  %581 = lshr i32 %580, 2
  %582 = add nuw i32 %581, %580
  %583 = icmp sgt i32 %582, -1
  br i1 %583, label %585, label %584

584:                                              ; preds = %579
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

585:                                              ; preds = %579
  store i32 %582, i32* %191, align 8
  %586 = load i8*, i8** %319, align 8
  %587 = sext i32 %582 to i64
  %588 = shl nsw i64 %587, 1
  %589 = call i8* @_Z16sk_realloc_throwPvm(i8* %586, i64 %588) #11
  store i8* %589, i8** %319, align 8
  %590 = bitcast i8* %589 to i16*
  br label %591

591:                                              ; preds = %577, %585
  %592 = phi i16* [ %578, %577 ], [ %590, %585 ]
  store i32 %571, i32* %186, align 4
  %593 = sext i32 %570 to i64
  %594 = getelementptr inbounds i16, i16* %592, i64 %593
  store i16 %569, i16* %594, align 2
  %595 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %564, i64 0, i32 1
  %596 = bitcast %struct.TriangulationVertex** %595 to i64*
  %597 = load i64, i64* %596, align 8
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %562

599:                                              ; preds = %309, %343, %591, %314, %122
  %600 = phi i1 [ false, %122 ], [ true, %314 ], [ true, %591 ], [ false, %343 ], [ false, %309 ]
  %601 = bitcast %class.SkTDArray.5* %126 to i8**
  %602 = load i8*, i8** %601, align 8
  call void @_Z7sk_freePv(i8* %602) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %125) #11
  %603 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %82, align 8
  %604 = load i32, i32* %83, align 8
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %603, i64 %605
  br label %607

607:                                              ; preds = %607, %599
  %608 = phi %struct.TriangulationVertex* [ %606, %599 ], [ %610, %607 ]
  %609 = icmp ugt %struct.TriangulationVertex* %608, %603
  %610 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %608, i64 -1
  br i1 %609, label %607, label %611

611:                                              ; preds = %607
  %612 = bitcast %struct.TriangulationVertex* %603 to i8*
  %613 = icmp eq i32 %604, 0
  br i1 %613, label %618, label %614

614:                                              ; preds = %611
  %615 = icmp sgt i32 %604, 64
  br i1 %615, label %616, label %617

616:                                              ; preds = %614
  call void @_Z7sk_freePv(i8* %612) #11
  br label %617

617:                                              ; preds = %616, %614
  store %struct.TriangulationVertex* null, %struct.TriangulationVertex** %82, align 8
  store i32 0, i32* %83, align 8
  br label %618

618:                                              ; preds = %611, %617
  call void @llvm.lifetime.end.p0i8(i64 2576, i8* nonnull %81) #11
  br label %619

619:                                              ; preds = %618, %73, %10
  %620 = phi i1 [ false, %10 ], [ %600, %618 ], [ false, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #11
  br label %621

621:                                              ; preds = %4, %619
  %622 = phi i1 [ %620, %619 ], [ false, %4 ]
  ret i1 %622
}

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN10ReflexHash4initERK6SkRecti(%class.ReflexHash*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #7 comdat align 2 {
  %4 = bitcast %class.ReflexHash* %0 to i8*
  %5 = bitcast %struct.SkRect* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 4 %5, i64 16, i1 false)
  %6 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 3
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fsub float %8, %10
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fsub float %13, %15
  %17 = bitcast float %11 to i32
  %18 = and i32 %17, 2139095040
  %19 = icmp eq i32 %18, 2139095040
  br i1 %19, label %90, label %20

20:                                               ; preds = %3
  %21 = bitcast float %16 to i32
  %22 = and i32 %21, 2139095040
  %23 = icmp eq i32 %22, 2139095040
  br i1 %23, label %90, label %24

24:                                               ; preds = %20
  %25 = sitofp i32 %2 to float
  %26 = fmul float %11, %25
  %27 = fdiv float %26, %16
  %28 = tail call float @sqrtf(float %27) #11
  %29 = bitcast float %28 to i32
  %30 = and i32 %29, 2139095040
  %31 = icmp eq i32 %30, 2139095040
  br i1 %31, label %90, label %32

32:                                               ; preds = %24
  %33 = fadd float %28, 5.000000e-01
  %34 = tail call float @llvm.floor.f32(float %33)
  %35 = fcmp olt float %34, 0x41DFFFFFE0000000
  %36 = select i1 %35, float %34, float 0x41DFFFFFE0000000
  %37 = fcmp ogt float %36, 0xC1DFFFFFE0000000
  %38 = select i1 %37, float %36, float 0xC1DFFFFFE0000000
  %39 = fptosi float %38 to i32
  %40 = icmp sgt i32 %39, %2
  %41 = select i1 %40, i32 %2, i32 %39
  %42 = icmp sgt i32 %41, 1
  %43 = select i1 %42, i32 %41, i32 1
  %44 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 1
  store i32 %43, i32* %44, align 8
  %45 = sdiv i32 %2, %43
  %46 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = sitofp i32 %43 to float
  %48 = fadd float %47, 0xBF50624DE0000000
  %49 = fdiv float %48, %11
  %50 = sitofp i32 %45 to float
  %51 = fadd float %50, 0xBF50624DE0000000
  %52 = fdiv float %51, %16
  %53 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 4, i32 0
  store float %49, float* %53, align 4
  %54 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 4, i32 1
  store float %52, float* %54, align 4
  %55 = fmul float %49, 0.000000e+00
  %56 = fmul float %55, %52
  %57 = fcmp ord float %56, 0.000000e+00
  br i1 %57, label %58, label %90

58:                                               ; preds = %32
  %59 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 5
  %60 = mul nsw i32 %45, %43
  %61 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 5, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp slt i32 %62, %60
  br i1 %63, label %64, label %76

64:                                               ; preds = %58
  %65 = add i32 %60, 4
  %66 = lshr i32 %65, 2
  %67 = add i32 %66, %65
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %70, label %69

69:                                               ; preds = %64
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

70:                                               ; preds = %64
  store i32 %67, i32* %61, align 8
  %71 = bitcast %class.SkTDArray.5* %59 to i8**
  %72 = load i8*, i8** %71, align 8
  %73 = sext i32 %67 to i64
  %74 = shl nsw i64 %73, 4
  %75 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %72, i64 %74) #11
  store i8* %75, i8** %71, align 8
  br label %76

76:                                               ; preds = %58, %70
  %77 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 5, i32 2
  store i32 %60, i32* %77, align 4
  %78 = icmp sgt i32 %60, 0
  br i1 %78, label %79, label %90

79:                                               ; preds = %76
  %80 = getelementptr inbounds %class.SkTDArray.5, %class.SkTDArray.5* %59, i64 0, i32 0
  br label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ 0, %79 ], [ %86, %81 ]
  %83 = load %class.SkTInternalLList*, %class.SkTInternalLList** %80, align 8
  %84 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %83, i64 %82
  %85 = bitcast %class.SkTInternalLList* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 16, i1 false) #11
  %86 = add nuw nsw i64 %82, 1
  %87 = load i32, i32* %77, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %81, label %90

90:                                               ; preds = %81, %76, %24, %20, %3, %32
  %91 = phi i1 [ false, %20 ], [ false, %3 ], [ false, %24 ], [ false, %32 ], [ true, %76 ], [ true, %81 ]
  ret i1 %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10ReflexHash13checkTriangleERK7SkPointS2_S2_tt(%class.ReflexHash*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), i16 zeroext, i16 zeroext) local_unnamed_addr #8 comdat align 2 {
  %7 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %134, label %10

10:                                               ; preds = %6
  %11 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %14 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = bitcast %struct.SkPoint* %3 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = shufflevector <2 x float> %15, <2 x float> %17, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> %18) #11
  %20 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %13, <4 x float> %18) #11
  %21 = extractelement <4 x float> %19, i32 0
  %22 = extractelement <4 x float> %19, i32 2
  %23 = fcmp olt float %22, %21
  %24 = select i1 %23, float %22, float %21
  %25 = extractelement <4 x float> %19, i32 1
  %26 = extractelement <4 x float> %19, i32 3
  %27 = fcmp olt float %26, %25
  %28 = select i1 %27, float %26, float %25
  %29 = extractelement <4 x float> %20, i32 0
  %30 = extractelement <4 x float> %20, i32 2
  %31 = fcmp olt float %29, %30
  %32 = select i1 %31, float %30, float %29
  %33 = extractelement <4 x float> %20, i32 1
  %34 = extractelement <4 x float> %20, i32 3
  %35 = fcmp olt float %33, %34
  %36 = select i1 %35, float %34, float %33
  %37 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 0, i32 0
  %38 = load float, float* %37, align 8
  %39 = fsub float %24, %38
  %40 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 4, i32 0
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, %39
  %43 = fptosi float %42 to i32
  %44 = fsub float %32, %38
  %45 = fmul float %41, %44
  %46 = fptosi float %45 to i32
  %47 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 0, i32 1
  %48 = load float, float* %47, align 4
  %49 = fsub float %28, %48
  %50 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 4, i32 1
  %51 = load float, float* %50, align 4
  %52 = fmul float %49, %51
  %53 = fptosi float %52 to i32
  %54 = fsub float %36, %48
  %55 = fmul float %54, %51
  %56 = fptosi float %55 to i32
  %57 = icmp sgt i32 %53, %56
  br i1 %57, label %134, label %58

58:                                               ; preds = %10
  %59 = icmp sgt i32 %43, %46
  %60 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 1
  %61 = getelementptr inbounds %class.ReflexHash, %class.ReflexHash* %0, i64 0, i32 5, i32 0
  %62 = fsub <2 x float> %15, %12
  %63 = fsub <2 x float> %17, %15
  %64 = extractelement <2 x float> %63, i32 1
  %65 = extractelement <2 x float> %62, i32 0
  %66 = fmul float %65, %64
  %67 = extractelement <2 x float> %63, i32 0
  %68 = extractelement <2 x float> %62, i32 1
  %69 = fmul float %68, %67
  %70 = fsub float %66, %69
  %71 = fsub <2 x float> %12, %17
  %72 = sext i32 %43 to i64
  %73 = sext i32 %46 to i64
  br label %74

74:                                               ; preds = %131, %58
  %75 = phi i32 [ %53, %58 ], [ %132, %131 ]
  br i1 %59, label %131, label %76

76:                                               ; preds = %74
  %77 = load i32, i32* %60, align 8
  %78 = mul nsw i32 %77, %75
  %79 = load %class.SkTInternalLList*, %class.SkTInternalLList** %61, align 8
  %80 = sext i32 %78 to i64
  br label %81

81:                                               ; preds = %128, %76
  %82 = phi i64 [ %129, %128 ], [ %72, %76 ]
  %83 = add nsw i64 %82, %80
  %84 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %79, i64 %83, i32 0
  %85 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %84, align 8
  %86 = icmp eq %struct.TriangulationVertex* %85, null
  br i1 %86, label %128, label %87

87:                                               ; preds = %81, %124
  %88 = phi %struct.TriangulationVertex* [ %126, %124 ], [ %85, %81 ]
  %89 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %88, i64 0, i32 4
  %90 = load i16, i16* %89, align 4
  %91 = icmp eq i16 %90, %4
  %92 = icmp eq i16 %90, %5
  %93 = or i1 %91, %92
  br i1 %93, label %124, label %94

94:                                               ; preds = %87
  %95 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %88, i64 0, i32 2, i32 0
  %96 = bitcast float* %95 to <2 x float>*
  %97 = load <2 x float>, <2 x float>* %96, align 4
  %98 = fsub <2 x float> %97, %12
  %99 = shufflevector <2 x float> %98, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %100 = fmul <2 x float> %62, %99
  %101 = extractelement <2 x float> %100, i32 0
  %102 = extractelement <2 x float> %100, i32 1
  %103 = fsub float %101, %102
  %104 = fmul float %70, %103
  %105 = fcmp olt float %104, 0x3F30000000000000
  br i1 %105, label %124, label %106

106:                                              ; preds = %94
  %107 = fsub <2 x float> %97, %15
  %108 = shufflevector <2 x float> %107, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %109 = fmul <2 x float> %63, %108
  %110 = extractelement <2 x float> %109, i32 0
  %111 = extractelement <2 x float> %109, i32 1
  %112 = fsub float %110, %111
  %113 = fmul float %70, %112
  %114 = fcmp olt float %113, 0x3F30000000000000
  br i1 %114, label %124, label %115

115:                                              ; preds = %106
  %116 = fsub <2 x float> %97, %17
  %117 = shufflevector <2 x float> %116, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %118 = fmul <2 x float> %71, %117
  %119 = extractelement <2 x float> %118, i32 0
  %120 = extractelement <2 x float> %118, i32 1
  %121 = fsub float %119, %120
  %122 = fmul float %70, %121
  %123 = fcmp uge float %122, 0x3F30000000000000
  br i1 %123, label %134, label %124

124:                                              ; preds = %106, %94, %115, %87
  %125 = getelementptr inbounds %struct.TriangulationVertex, %struct.TriangulationVertex* %88, i64 0, i32 1
  %126 = load %struct.TriangulationVertex*, %struct.TriangulationVertex** %125, align 8
  %127 = icmp eq %struct.TriangulationVertex* %126, null
  br i1 %127, label %128, label %87

128:                                              ; preds = %124, %81
  %129 = add nsw i64 %82, 1
  %130 = icmp slt i64 %82, %73
  br i1 %130, label %81, label %131

131:                                              ; preds = %128, %74
  %132 = add nsw i32 %75, 1
  %133 = icmp slt i32 %75, %56
  br i1 %133, label %74, label %134

134:                                              ; preds = %131, %115, %10, %6
  %135 = phi i1 [ false, %6 ], [ false, %10 ], [ true, %115 ], [ false, %131 ]
  ret i1 %135
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z27SkIsPolyConvex_experimentalPK7SkPointi(%struct.SkPoint* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp slt i32 %1, 4
  br i1 %3, label %220, label %4

4:                                                ; preds = %2
  %5 = add nsw i32 %1, -1
  %6 = zext i32 %5 to i64
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  br label %9

9:                                                ; preds = %86, %4
  %10 = phi <2 x float> [ %8, %4 ], [ %22, %86 ]
  %11 = phi i64 [ 0, %4 ], [ %19, %86 ]
  %12 = phi <2 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %4 ], [ %93, %86 ]
  %13 = phi <2 x float> [ zeroinitializer, %4 ], [ %92, %86 ]
  %14 = phi i32 [ 0, %4 ], [ %91, %86 ]
  %15 = phi i32 [ 0, %4 ], [ %90, %86 ]
  %16 = phi i32 [ 0, %4 ], [ %89, %86 ]
  %17 = phi i32 [ 0, %4 ], [ %88, %86 ]
  %18 = phi i32 [ 0, %4 ], [ %87, %86 ]
  %19 = add nuw nsw i64 %11, 1
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %19
  %21 = bitcast %struct.SkPoint* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fsub <2 x float> %22, %10
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fcmp oeq float %24, 0.000000e+00
  %27 = fcmp oeq float %25, 0.000000e+00
  %28 = and i1 %26, %27
  br i1 %28, label %86, label %29

29:                                               ; preds = %9
  %30 = add nsw i32 %17, 1
  %31 = icmp eq i32 %17, 0
  br i1 %31, label %32, label %45

32:                                               ; preds = %29
  %33 = fcmp olt float %24, 0.000000e+00
  %34 = fcmp ogt float %24, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = select i1 %33, i32 -1, i32 %35
  %37 = icmp eq i32 %36, 0
  %38 = icmp eq i32 %14, %36
  %39 = or i1 %37, %38
  %40 = or i1 %37, %38
  %41 = xor i1 %40, true
  %42 = zext i1 %41 to i32
  %43 = add nsw i32 %15, %42
  %44 = select i1 %39, i32 %14, i32 %36
  br label %86

45:                                               ; preds = %29
  %46 = shufflevector <2 x float> %13, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %47 = fmul <2 x float> %46, %23
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %50 = fsub float %49, %48
  %51 = fcmp une float %50, 0.000000e+00
  br i1 %51, label %52, label %57

52:                                               ; preds = %45
  %53 = fcmp olt float %50, 0.000000e+00
  %54 = fcmp ogt float %50, 0.000000e+00
  %55 = zext i1 %54 to i32
  %56 = select i1 %53, i32 -1, i32 %55
  br label %61

57:                                               ; preds = %45
  %58 = fcmp ult float %24, 0.000000e+00
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = sub nsw i32 0, %16
  br label %61

61:                                               ; preds = %59, %57, %52
  %62 = phi i32 [ %56, %52 ], [ %60, %59 ], [ %16, %57 ]
  %63 = fcmp olt float %24, 0.000000e+00
  %64 = fcmp ogt float %24, 0.000000e+00
  %65 = zext i1 %64 to i32
  %66 = select i1 %63, i32 -1, i32 %65
  %67 = icmp eq i32 %66, 0
  %68 = icmp eq i32 %14, %66
  %69 = or i1 %67, %68
  %70 = or i1 %67, %68
  %71 = xor i1 %70, true
  %72 = zext i1 %71 to i32
  %73 = add nsw i32 %15, %72
  %74 = select i1 %69, i32 %14, i32 %66
  %75 = icmp eq i32 %62, 0
  %76 = icmp eq i32 %16, %62
  %77 = or i1 %75, %76
  %78 = or i1 %75, %76
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = add nsw i32 %18, %80
  %82 = select i1 %77, i32 %16, i32 %62
  %83 = icmp sgt i32 %73, 3
  %84 = icmp sgt i32 %81, 1
  %85 = or i1 %83, %84
  br i1 %85, label %220, label %86

86:                                               ; preds = %32, %61, %9
  %87 = phi i32 [ %18, %9 ], [ %81, %61 ], [ %18, %32 ]
  %88 = phi i32 [ %17, %9 ], [ %30, %61 ], [ 1, %32 ]
  %89 = phi i32 [ %16, %9 ], [ %82, %61 ], [ %16, %32 ]
  %90 = phi i32 [ %15, %9 ], [ %73, %61 ], [ %43, %32 ]
  %91 = phi i32 [ %14, %9 ], [ %74, %61 ], [ %44, %32 ]
  %92 = phi <2 x float> [ %13, %9 ], [ %23, %61 ], [ %23, %32 ]
  %93 = phi <2 x float> [ %12, %9 ], [ %12, %61 ], [ %23, %32 ]
  %94 = icmp eq i64 %19, %6
  br i1 %94, label %95, label %9

95:                                               ; preds = %86
  %96 = load <2 x float>, <2 x float>* %7, align 4
  %97 = sext i32 %5 to i64
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %97
  %99 = bitcast %struct.SkPoint* %98 to <2 x float>*
  %100 = load <2 x float>, <2 x float>* %99, align 4
  %101 = fsub <2 x float> %96, %100
  %102 = extractelement <2 x float> %101, i32 0
  %103 = extractelement <2 x float> %101, i32 1
  %104 = fcmp oeq float %102, 0.000000e+00
  %105 = fcmp oeq float %103, 0.000000e+00
  %106 = and i1 %104, %105
  br i1 %106, label %165, label %107

107:                                              ; preds = %95
  %108 = add nsw i32 %88, 1
  %109 = icmp eq i32 %88, 0
  br i1 %109, label %110, label %123

110:                                              ; preds = %107
  %111 = fcmp olt float %102, 0.000000e+00
  %112 = fcmp ogt float %102, 0.000000e+00
  %113 = zext i1 %112 to i32
  %114 = select i1 %111, i32 -1, i32 %113
  %115 = icmp eq i32 %114, 0
  %116 = icmp eq i32 %91, %114
  %117 = or i1 %115, %116
  %118 = or i1 %115, %116
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = add nsw i32 %90, %120
  %122 = select i1 %117, i32 %91, i32 %114
  br label %165

123:                                              ; preds = %107
  %124 = shufflevector <2 x float> %92, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %125 = fmul <2 x float> %124, %101
  %126 = extractelement <2 x float> %125, i32 0
  %127 = extractelement <2 x float> %125, i32 1
  %128 = fsub float %127, %126
  %129 = fcmp une float %128, 0.000000e+00
  br i1 %129, label %130, label %135

130:                                              ; preds = %123
  %131 = fcmp olt float %128, 0.000000e+00
  %132 = fcmp ogt float %128, 0.000000e+00
  %133 = zext i1 %132 to i32
  %134 = select i1 %131, i32 -1, i32 %133
  br label %139

135:                                              ; preds = %123
  %136 = fcmp ult float %102, 0.000000e+00
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = sub nsw i32 0, %89
  br label %139

139:                                              ; preds = %137, %135, %130
  %140 = phi i32 [ %134, %130 ], [ %138, %137 ], [ %89, %135 ]
  %141 = fcmp olt float %102, 0.000000e+00
  %142 = fcmp ogt float %102, 0.000000e+00
  %143 = zext i1 %142 to i32
  %144 = select i1 %141, i32 -1, i32 %143
  %145 = icmp eq i32 %144, 0
  %146 = icmp eq i32 %91, %144
  %147 = or i1 %145, %146
  %148 = or i1 %145, %146
  %149 = xor i1 %148, true
  %150 = zext i1 %149 to i32
  %151 = add nsw i32 %90, %150
  %152 = select i1 %147, i32 %91, i32 %144
  %153 = icmp eq i32 %140, 0
  %154 = icmp eq i32 %89, %140
  %155 = or i1 %153, %154
  %156 = or i1 %153, %154
  %157 = xor i1 %156, true
  %158 = zext i1 %157 to i32
  %159 = add nsw i32 %87, %158
  %160 = select i1 %155, i32 %89, i32 %140
  %161 = icmp sgt i32 %151, 3
  %162 = icmp sgt i32 %159, 1
  %163 = or i1 %161, %162
  %164 = zext i1 %163 to i8
  br label %165

165:                                              ; preds = %139, %110, %95
  %166 = phi i32 [ %87, %95 ], [ %87, %110 ], [ %159, %139 ]
  %167 = phi i32 [ %88, %95 ], [ 1, %110 ], [ %108, %139 ]
  %168 = phi i8 [ 0, %95 ], [ 0, %110 ], [ %164, %139 ]
  %169 = phi i32 [ %89, %95 ], [ %89, %110 ], [ %160, %139 ]
  %170 = phi i32 [ %90, %95 ], [ %121, %110 ], [ %151, %139 ]
  %171 = phi i32 [ %91, %95 ], [ %122, %110 ], [ %152, %139 ]
  %172 = phi <2 x float> [ %92, %95 ], [ %101, %110 ], [ %101, %139 ]
  %173 = phi <2 x float> [ %93, %95 ], [ %101, %110 ], [ %93, %139 ]
  %174 = extractelement <2 x float> %173, i32 0
  %175 = fcmp oeq float %174, 0.000000e+00
  %176 = extractelement <2 x float> %173, i32 1
  %177 = fcmp oeq float %176, 0.000000e+00
  %178 = and i1 %175, %177
  %179 = icmp eq i32 %167, 0
  %180 = or i1 %179, %178
  br i1 %180, label %217, label %181

181:                                              ; preds = %165
  %182 = extractelement <2 x float> %172, i32 0
  %183 = fmul float %182, %176
  %184 = extractelement <2 x float> %172, i32 1
  %185 = fmul float %184, %174
  %186 = fsub float %183, %185
  %187 = fcmp une float %186, 0.000000e+00
  br i1 %187, label %188, label %193

188:                                              ; preds = %181
  %189 = fcmp olt float %186, 0.000000e+00
  %190 = fcmp ogt float %186, 0.000000e+00
  %191 = zext i1 %190 to i32
  %192 = select i1 %189, i32 -1, i32 %191
  br label %197

193:                                              ; preds = %181
  %194 = fcmp ult float %174, 0.000000e+00
  br i1 %194, label %195, label %197

195:                                              ; preds = %193
  %196 = sub nsw i32 0, %169
  br label %197

197:                                              ; preds = %195, %193, %188
  %198 = phi i32 [ %192, %188 ], [ %196, %195 ], [ %169, %193 ]
  %199 = fcmp olt float %174, 0.000000e+00
  %200 = fcmp ogt float %174, 0.000000e+00
  %201 = zext i1 %200 to i32
  %202 = select i1 %199, i32 -1, i32 %201
  %203 = icmp ne i32 %202, 0
  %204 = icmp ne i32 %171, %202
  %205 = and i1 %204, %203
  %206 = zext i1 %205 to i32
  %207 = add nsw i32 %170, %206
  %208 = icmp ne i32 %198, 0
  %209 = icmp ne i32 %169, %198
  %210 = and i1 %209, %208
  %211 = zext i1 %210 to i32
  %212 = add nsw i32 %166, %211
  %213 = icmp sgt i32 %207, 3
  %214 = icmp sgt i32 %212, 1
  %215 = or i1 %213, %214
  %216 = select i1 %215, i8 1, i8 %168
  br label %217

217:                                              ; preds = %197, %165
  %218 = phi i8 [ %168, %165 ], [ %216, %197 ]
  %219 = icmp eq i8 %218, 0
  br label %220

220:                                              ; preds = %61, %217, %2
  %221 = phi i1 [ true, %2 ], [ %219, %217 ], [ false, %61 ]
  ret i1 %221
}

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10ActiveEdge9intersectERK7SkPointS2_tt(%struct.ActiveEdge*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), i16 zeroext, i16 zeroext) local_unnamed_addr #2 comdat align 2 {
  %6 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = icmp eq i16 %7, %3
  br i1 %8, label %114, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %0, i64 0, i32 2
  %11 = load i16, i16* %10, align 2
  %12 = icmp eq i16 %11, %3
  %13 = icmp eq i16 %7, %4
  %14 = or i1 %13, %12
  %15 = icmp eq i16 %11, %4
  %16 = or i1 %15, %14
  br i1 %16, label %114, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.ActiveEdge, %struct.ActiveEdge* %0, i64 0, i32 0, i32 1, i32 0
  %19 = bitcast %struct.ActiveEdge* %0 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = bitcast float* %18 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = shufflevector <2 x float> %22, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %24 = fadd <2 x float> %20, %22
  %25 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = fadd <2 x float> %26, %28
  %30 = extractelement <2 x float> %26, i32 0
  %31 = extractelement <2 x float> %20, i32 0
  %32 = fcmp olt float %31, %30
  %33 = extractelement <2 x float> %29, i32 0
  %34 = extractelement <2 x float> %24, i32 0
  br i1 %32, label %35, label %74

35:                                               ; preds = %17
  %36 = fcmp olt float %33, %34
  %37 = fsub <2 x float> %26, %20
  %38 = fmul <2 x float> %23, %37
  %39 = extractelement <2 x float> %38, i32 0
  %40 = extractelement <2 x float> %38, i32 1
  %41 = fsub float %40, %39
  %42 = tail call float @llvm.fabs.f32(float %41) #11
  %43 = fcmp ole float %42, 0x3E70000000000000
  %44 = fcmp ogt float %41, 0.000000e+00
  %45 = select i1 %44, i32 1, i32 -1
  %46 = select i1 %43, i32 0, i32 %45
  br i1 %36, label %47, label %60

47:                                               ; preds = %35
  %48 = fsub <2 x float> %29, %20
  %49 = fmul <2 x float> %23, %48
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %52 = fsub float %51, %50
  %53 = tail call float @llvm.fabs.f32(float %52) #11
  %54 = fcmp ole float %53, 0x3E70000000000000
  %55 = fcmp ogt float %52, 0.000000e+00
  %56 = select i1 %55, i32 1, i32 -1
  %57 = select i1 %54, i32 0, i32 %56
  %58 = mul nsw i32 %57, %46
  %59 = icmp slt i32 %58, 0
  br label %114

60:                                               ; preds = %35
  %61 = fsub <2 x float> %24, %26
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %63 = fmul <2 x float> %28, %62
  %64 = extractelement <2 x float> %63, i32 0
  %65 = extractelement <2 x float> %63, i32 1
  %66 = fsub float %64, %65
  %67 = tail call float @llvm.fabs.f32(float %66) #11
  %68 = fcmp ole float %67, 0x3E70000000000000
  %69 = fcmp ogt float %66, 0.000000e+00
  %70 = select i1 %69, i32 1, i32 -1
  %71 = select i1 %68, i32 0, i32 %70
  %72 = mul nsw i32 %46, %71
  %73 = icmp sgt i32 %72, 0
  br label %114

74:                                               ; preds = %17
  %75 = fcmp olt float %34, %33
  %76 = fsub <2 x float> %20, %26
  %77 = shufflevector <2 x float> %28, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %78 = fmul <2 x float> %76, %77
  %79 = extractelement <2 x float> %78, i32 0
  %80 = extractelement <2 x float> %78, i32 1
  %81 = fsub float %80, %79
  %82 = tail call float @llvm.fabs.f32(float %81) #11
  %83 = fcmp ole float %82, 0x3E70000000000000
  %84 = fcmp ogt float %81, 0.000000e+00
  %85 = select i1 %84, i32 1, i32 -1
  %86 = select i1 %83, i32 0, i32 %85
  br i1 %75, label %87, label %101

87:                                               ; preds = %74
  %88 = fsub <2 x float> %24, %26
  %89 = shufflevector <2 x float> %88, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %90 = fmul <2 x float> %28, %89
  %91 = extractelement <2 x float> %90, i32 0
  %92 = extractelement <2 x float> %90, i32 1
  %93 = fsub float %91, %92
  %94 = tail call float @llvm.fabs.f32(float %93) #11
  %95 = fcmp ole float %94, 0x3E70000000000000
  %96 = fcmp ogt float %93, 0.000000e+00
  %97 = select i1 %96, i32 1, i32 -1
  %98 = select i1 %95, i32 0, i32 %97
  %99 = mul nsw i32 %86, %98
  %100 = icmp slt i32 %99, 0
  br label %114

101:                                              ; preds = %74
  %102 = fsub <2 x float> %29, %20
  %103 = fmul <2 x float> %23, %102
  %104 = extractelement <2 x float> %103, i32 0
  %105 = extractelement <2 x float> %103, i32 1
  %106 = fsub float %105, %104
  %107 = tail call float @llvm.fabs.f32(float %106) #11
  %108 = fcmp ole float %107, 0x3E70000000000000
  %109 = fcmp ogt float %106, 0.000000e+00
  %110 = select i1 %109, i32 1, i32 -1
  %111 = select i1 %108, i32 0, i32 %110
  %112 = mul nsw i32 %111, %86
  %113 = icmp sgt i32 %112, 0
  br label %114

114:                                              ; preds = %60, %47, %101, %87, %5, %9
  %115 = phi i1 [ false, %9 ], [ false, %5 ], [ %59, %47 ], [ %73, %60 ], [ %100, %87 ], [ %113, %101 ]
  ret i1 %115
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #5

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #10

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #10

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10SkTDPQueueI6VertexXadL_ZNS0_4LeftERKS0_S2_EELPFPiS2_E0EE24percolateDownIfNecessaryEi(%class.SkTDPQueue*, i32) local_unnamed_addr #7 comdat align 2 {
  %3 = shl nsw i32 %1, 1
  %4 = or i32 %3, 1
  %5 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %8, label %125

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkTDPQueue, %class.SkTDPQueue* %0, i64 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %8, %102
  %11 = phi i32 [ %6, %8 ], [ %123, %102 ]
  %12 = phi i32 [ %4, %8 ], [ %122, %102 ]
  %13 = phi i32 [ %1, %8 ], [ %79, %102 ]
  %14 = add nsw i32 %12, 1
  %15 = icmp slt i32 %14, %11
  %16 = load %struct.Vertex*, %struct.Vertex** %9, align 8
  br i1 %15, label %60, label %17

17:                                               ; preds = %10
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18
  %20 = sext i32 %13 to i64
  %21 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20
  %22 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %19, i64 0, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %21, i64 0, i32 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = fcmp olt float %23, %25
  br i1 %26, label %27, label %31

27:                                               ; preds = %17
  %28 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 0, i32 1
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  br label %41

31:                                               ; preds = %17
  %32 = fcmp ogt float %23, %25
  br i1 %32, label %77, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 0, i32 1
  %37 = load float, float* %36, align 4
  %38 = fcmp ogt float %35, %37
  br i1 %38, label %39, label %77

39:                                               ; preds = %33
  %40 = bitcast float %35 to i32
  br label %41

41:                                               ; preds = %39, %27
  %42 = phi i32 [ %30, %27 ], [ %40, %39 ]
  %43 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 1
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 2
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 3
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %18, i32 4
  %50 = load i16, i16* %49, align 2
  %51 = bitcast %struct.Vertex* %19 to i8*
  %52 = bitcast %struct.Vertex* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 16, i1 false) #11
  %53 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %21, i64 0, i32 0, i32 0
  store float %23, float* %53, align 4
  %54 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 0, i32 1
  %55 = bitcast float* %54 to i32*
  store i32 %42, i32* %55, align 4
  %56 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 1
  store i16 %44, i16* %56, align 4
  %57 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 2
  store i16 %46, i16* %57, align 2
  %58 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 3
  store i16 %48, i16* %58, align 4
  %59 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %20, i32 4
  store i16 %50, i16* %59, align 2
  br label %125

60:                                               ; preds = %10
  %61 = sext i32 %14 to i64
  %62 = sext i32 %12 to i64
  %63 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %61, i32 0, i32 0
  %64 = load float, float* %63, align 4
  %65 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %62, i32 0, i32 0
  %66 = load float, float* %65, align 4
  %67 = fcmp olt float %64, %66
  br i1 %67, label %76, label %68

68:                                               ; preds = %60
  %69 = fcmp ogt float %64, %66
  br i1 %69, label %77, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %61, i32 0, i32 1
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %62, i32 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = fcmp ogt float %72, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %60, %70
  br label %77

77:                                               ; preds = %68, %31, %76, %70, %33
  %78 = phi i64 [ %62, %68 ], [ %18, %31 ], [ %61, %76 ], [ %62, %70 ], [ %18, %33 ]
  %79 = phi i32 [ %12, %68 ], [ %12, %31 ], [ %14, %76 ], [ %12, %70 ], [ %12, %33 ]
  %80 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78
  %81 = sext i32 %13 to i64
  %82 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81
  %83 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %80, i64 0, i32 0, i32 0
  %84 = load float, float* %83, align 4
  %85 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %82, i64 0, i32 0, i32 0
  %86 = load float, float* %85, align 4
  %87 = fcmp olt float %84, %86
  br i1 %87, label %88, label %92

88:                                               ; preds = %77
  %89 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 0, i32 1
  %90 = bitcast float* %89 to i32*
  %91 = load i32, i32* %90, align 4
  br label %102

92:                                               ; preds = %77
  %93 = fcmp ogt float %84, %86
  br i1 %93, label %125, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 0, i32 1
  %96 = load float, float* %95, align 4
  %97 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 0, i32 1
  %98 = load float, float* %97, align 4
  %99 = fcmp ogt float %96, %98
  br i1 %99, label %100, label %125

100:                                              ; preds = %94
  %101 = bitcast float %96 to i32
  br label %102

102:                                              ; preds = %100, %88
  %103 = phi i32 [ %91, %88 ], [ %101, %100 ]
  %104 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 1
  %105 = load i16, i16* %104, align 4
  %106 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 2
  %107 = load i16, i16* %106, align 2
  %108 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 3
  %109 = load i16, i16* %108, align 4
  %110 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %78, i32 4
  %111 = load i16, i16* %110, align 2
  %112 = bitcast %struct.Vertex* %80 to i8*
  %113 = bitcast %struct.Vertex* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %112, i8* align 4 %113, i64 16, i1 false) #11
  %114 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %82, i64 0, i32 0, i32 0
  store float %84, float* %114, align 4
  %115 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 0, i32 1
  %116 = bitcast float* %115 to i32*
  store i32 %103, i32* %116, align 4
  %117 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 1
  store i16 %105, i16* %117, align 4
  %118 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 2
  store i16 %107, i16* %118, align 2
  %119 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 3
  store i16 %109, i16* %119, align 4
  %120 = getelementptr inbounds %struct.Vertex, %struct.Vertex* %16, i64 %81, i32 4
  store i16 %111, i16* %120, align 2
  %121 = shl nsw i32 %79, 1
  %122 = or i32 %121, 1
  %123 = load i32, i32* %5, align 4
  %124 = icmp slt i32 %122, %123
  br i1 %124, label %10, label %125

125:                                              ; preds = %94, %102, %92, %2, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI10OffsetEdgeLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 48) #11
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = mul nuw nsw i64 %51, 48
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.OffsetEdge*, %struct.OffsetEdge** %49, align 8
  %55 = getelementptr inbounds %struct.OffsetEdge, %struct.OffsetEdge* %54, i64 %51
  %56 = bitcast %struct.OffsetEdge* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %56, i64 48, i1 false) #11
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #11
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
