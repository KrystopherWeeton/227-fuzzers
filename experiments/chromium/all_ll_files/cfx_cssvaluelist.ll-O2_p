; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_cssvaluelist.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_cssvaluelist.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSValueList = type { %class.CFX_CSSValue.base, %"class.std::__1::vector" }
%class.CFX_CSSValue.base = type <{ %"class.fxcrt::Retainable", i8 }>
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"*, %"class.std::__1::__compressed_pair" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.CFX_CSSValue* }
%class.CFX_CSSValue = type <{ %"class.fxcrt::Retainable", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::RetainPtr"* }

@_ZTV16CFX_CSSValueList = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_CSSValueList*)* @_ZN16CFX_CSSValueListD2Ev to i8*), i8* bitcast (void (%class.CFX_CSSValueList*)* @_ZN16CFX_CSSValueListD0Ev to i8*)] }, align 8

@_ZN16CFX_CSSValueListC1ENSt3__16vectorIN5fxcrt9RetainPtrI12CFX_CSSValueEENS0_9allocatorIS5_EEEE = hidden unnamed_addr alias void (%class.CFX_CSSValueList*, %"class.std::__1::vector"*), void (%class.CFX_CSSValueList*, %"class.std::__1::vector"*)* @_ZN16CFX_CSSValueListC2ENSt3__16vectorIN5fxcrt9RetainPtrI12CFX_CSSValueEENS0_9allocatorIS5_EEEE
@_ZN16CFX_CSSValueListD1Ev = hidden unnamed_addr alias void (%class.CFX_CSSValueList*), void (%class.CFX_CSSValueList*)* @_ZN16CFX_CSSValueListD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSValueListC2ENSt3__16vectorIN5fxcrt9RetainPtrI12CFX_CSSValueEENS0_9allocatorIS5_EEEE(%class.CFX_CSSValueList*, %"class.std::__1::vector"* nocapture) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CFX_CSSValueList* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueC2ENS_13PrimitiveTypeE(%class.CFX_CSSValue* %3, i8 zeroext 6) #5
  %4 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV16CFX_CSSValueList, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #5
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast %"class.fxcrt::RetainPtr"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1, i32 0, i32 1
  %14 = bitcast %"class.fxcrt::RetainPtr"** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.fxcrt::RetainPtr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.fxcrt::RetainPtr"** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = bitcast %"class.std::__1::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #5
  ret void
}

declare void @_ZN12CFX_CSSValueC2ENS_13PrimitiveTypeE(%class.CFX_CSSValue*, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSValueListD2Ev(%class.CFX_CSSValueList*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV16CFX_CSSValueList, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"** %4, align 8
  %6 = icmp eq %"class.fxcrt::RetainPtr"* %5, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.fxcrt::RetainPtr"* %5 to i8*
  %9 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"** %9, align 8
  %11 = icmp eq %"class.fxcrt::RetainPtr"* %10, %5
  br i1 %11, label %34, label %12

12:                                               ; preds = %7, %29
  %13 = phi %"class.fxcrt::RetainPtr"* [ %14, %29 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %class.CFX_CSSValue*, %class.CFX_CSSValue** %15, align 8
  store %class.CFX_CSSValue* null, %class.CFX_CSSValue** %15, align 8
  %17 = icmp eq %class.CFX_CSSValue* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.CFX_CSSValue, %class.CFX_CSSValue* %16, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %19, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.CFX_CSSValue, %class.CFX_CSSValue* %16, i64 0, i32 0
  %25 = bitcast %class.CFX_CSSValue* %16 to void (%"class.fxcrt::Retainable"*)***
  %26 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %26, i64 1
  %28 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %27, align 8
  tail call void %28(%"class.fxcrt::Retainable"* nonnull %24) #5
  br label %29

29:                                               ; preds = %23, %18, %12
  %30 = icmp eq %"class.fxcrt::RetainPtr"* %14, %5
  br i1 %30, label %31, label %12

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::vector"* %3 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %31, %7
  %35 = phi i8* [ %33, %31 ], [ %8, %7 ]
  store %"class.fxcrt::RetainPtr"* %5, %"class.fxcrt::RetainPtr"** %9, align 8
  tail call void @_ZdlPv(i8* %35) #6
  br label %36

36:                                               ; preds = %1, %34
  %37 = bitcast %class.CFX_CSSValueList* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue* %37) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSValueListD0Ev(%class.CFX_CSSValueList*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV16CFX_CSSValueList, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"** %4, align 8
  %6 = icmp eq %"class.fxcrt::RetainPtr"* %5, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.fxcrt::RetainPtr"* %5 to i8*
  %9 = getelementptr inbounds %class.CFX_CSSValueList, %class.CFX_CSSValueList* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"** %9, align 8
  %11 = icmp eq %"class.fxcrt::RetainPtr"* %10, %5
  br i1 %11, label %34, label %12

12:                                               ; preds = %7, %29
  %13 = phi %"class.fxcrt::RetainPtr"* [ %14, %29 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %class.CFX_CSSValue*, %class.CFX_CSSValue** %15, align 8
  store %class.CFX_CSSValue* null, %class.CFX_CSSValue** %15, align 8
  %17 = icmp eq %class.CFX_CSSValue* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.CFX_CSSValue, %class.CFX_CSSValue* %16, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %19, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.CFX_CSSValue, %class.CFX_CSSValue* %16, i64 0, i32 0
  %25 = bitcast %class.CFX_CSSValue* %16 to void (%"class.fxcrt::Retainable"*)***
  %26 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %26, i64 1
  %28 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %27, align 8
  tail call void %28(%"class.fxcrt::Retainable"* nonnull %24) #5
  br label %29

29:                                               ; preds = %23, %18, %12
  %30 = icmp eq %"class.fxcrt::RetainPtr"* %14, %5
  br i1 %30, label %31, label %12

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::vector"* %3 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %31, %7
  %35 = phi i8* [ %33, %31 ], [ %8, %7 ]
  store %"class.fxcrt::RetainPtr"* %5, %"class.fxcrt::RetainPtr"** %9, align 8
  tail call void @_ZdlPv(i8* %35) #6
  br label %36

36:                                               ; preds = %1, %34
  %37 = bitcast %class.CFX_CSSValueList* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue* %37) #5
  %38 = bitcast %class.CFX_CSSValueList* %0 to i8*
  tail call void @_ZdlPv(i8* %38) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
