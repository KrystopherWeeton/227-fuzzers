; ModuleID = '../../third_party/abseil-cpp/absl/debugging/internal/vdso_support.cc'
source_filename = "../../third_party/abseil-cpp/absl/debugging/internal/vdso_support.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.absl::debugging_internal::VDSOSupport" = type { %"class.absl::debugging_internal::ElfMemImage" }
%"class.absl::debugging_internal::ElfMemImage" = type { %struct.Elf64_Ehdr*, %struct.Elf64_Sym*, i16*, %struct.Elf64_Verdef*, i32*, i8*, i64, i64, i64 }
%struct.Elf64_Ehdr = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%struct.Elf64_Sym = type { i32, i8, i8, i16, i64, i64 }
%struct.Elf64_Verdef = type { i16, i16, i16, i16, i32, i32, i32 }
%struct.Elf64_auxv_t = type { i64, %union.anon }
%union.anon = type { i64 }
%"struct.absl::debugging_internal::ElfMemImage::SymbolInfo" = type { i8*, i8*, i8*, %struct.Elf64_Sym* }

@_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE = external constant i32, align 4
@_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E = hidden local_unnamed_addr global { { i8* } } { { i8* } { i8* bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*) } }, align 8
@_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E = hidden local_unnamed_addr global { { i64 (i32*, i8*, i8*)* } } { { i64 (i32*, i8*, i8*)* } { i64 (i32*, i8*, i8*)* @_ZN4absl18debugging_internal11VDSOSupport13InitAndGetCPUEPjPvS3_ } }, align 8
@.str = private unnamed_addr constant [16 x i8] c"/proc/self/auxv\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"__vdso_getcpu\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"LINUX_2.6\00", align 1
@.str.3 = private unnamed_addr constant [69 x i8] c"../../third_party/abseil-cpp/absl/debugging/internal/vdso_support.cc\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"base != debugging_internal::ElfMemImage::kInvalidBase\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"internal error\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"fn != &InitAndGetCPU\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"Init() did not set getcpu_fn_\00", align 1

@_ZN4absl18debugging_internal11VDSOSupportC1Ev = hidden unnamed_addr alias void (%"class.absl::debugging_internal::VDSOSupport"*), void (%"class.absl::debugging_internal::VDSOSupport"*)* @_ZN4absl18debugging_internal11VDSOSupportC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl18debugging_internal11VDSOSupport13InitAndGetCPUEPjPvS3_(i32*, i8*, i8*) #0 align 2 {
  %4 = tail call i8* @_ZN4absl18debugging_internal11VDSOSupport4InitEv()
  %5 = load atomic i64, i64* bitcast ({ { i64 (i32*, i8*, i8*)* } }* @_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E to i64*) monotonic, align 8
  %6 = inttoptr i64 %5 to i64 (i32*, i8*, i8*)*
  %7 = icmp eq i64 (i32*, i8*, i8*)* %6, @_ZN4absl18debugging_internal11VDSOSupport13InitAndGetCPUEPjPvS3_
  br i1 %7, label %8, label %9, !prof !2

8:                                                ; preds = %3
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.3, i64 0, i64 53), i32 155, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %9

9:                                                ; preds = %8, %3
  %10 = tail call i64 %6(i32* %0, i8* %1, i8* %2) #6
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl18debugging_internal11VDSOSupportC2Ev(%"class.absl::debugging_internal::VDSOSupport"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.absl::debugging_internal::VDSOSupport", %"class.absl::debugging_internal::VDSOSupport"* %0, i64 0, i32 0
  %3 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %4 = inttoptr i64 %3 to i8*
  %5 = icmp eq i8* %4, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN4absl18debugging_internal11VDSOSupport4InitEv()
  br label %11

8:                                                ; preds = %1
  %9 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %10 = inttoptr i64 %9 to i8*
  br label %11

11:                                               ; preds = %8, %6
  %12 = phi i8* [ %7, %6 ], [ %10, %8 ]
  tail call void @_ZN4absl18debugging_internal11ElfMemImageC1EPKv(%"class.absl::debugging_internal::ElfMemImage"* %2, i8* %12) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4absl18debugging_internal11VDSOSupport4InitEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %struct.Elf64_auxv_t, align 8
  %2 = alloca %"class.absl::debugging_internal::VDSOSupport", align 8
  %3 = alloca %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo", align 8
  %4 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %5 = inttoptr i64 %4 to i8*
  %6 = icmp eq i8* %5, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %6, label %7, label %13

7:                                                ; preds = %0
  %8 = tail call i32* @__errno_location() #7
  store i32 0, i32* %8, align 4
  %9 = tail call i64 @getauxval(i64 33) #6
  %10 = load i32, i32* %8, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  store atomic i64 %9, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  br label %13

13:                                               ; preds = %7, %12, %0
  %14 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %15 = inttoptr i64 %14 to i8*
  %16 = icmp eq i8* %15, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %16, label %17, label %41

17:                                               ; preds = %13
  %18 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 0) #6
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  store atomic i64 0, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  store atomic i64 ptrtoint (i64 (i32*, i8*, i8*)* @_ZN4absl18debugging_internal11VDSOSupport16GetCPUViaSyscallEPjPvS3_ to i64), i64* bitcast ({ { i64 (i32*, i8*, i8*)* } }* @_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E to i64*) monotonic, align 8
  br label %68

21:                                               ; preds = %17
  %22 = bitcast %struct.Elf64_auxv_t* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #6
  %23 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %1, i64 0, i32 0
  %24 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %1, i64 0, i32 1, i32 0
  %25 = bitcast %struct.Elf64_auxv_t* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 16, i1 false)
  br label %26

26:                                               ; preds = %29, %21
  %27 = call i64 @read(i32 %18, i8* nonnull %22, i64 16) #6
  %28 = icmp eq i64 %27, 16
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = load i64, i64* %23, align 8
  %31 = icmp eq i64 %30, 33
  br i1 %31, label %32, label %26

32:                                               ; preds = %29
  %33 = load i64, i64* %24, align 8
  store atomic i64 %33, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  br label %34

34:                                               ; preds = %26, %32
  %35 = tail call i32 @close(i32 %18) #6
  %36 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %37 = inttoptr i64 %36 to i8*
  %38 = icmp eq i8* %37, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  store atomic i64 0, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  br label %40

40:                                               ; preds = %39, %34
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #6
  br label %41

41:                                               ; preds = %40, %13
  %42 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %64, label %44

44:                                               ; preds = %41
  %45 = bitcast %"class.absl::debugging_internal::VDSOSupport"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %45) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 72, i1 false)
  %46 = getelementptr inbounds %"class.absl::debugging_internal::VDSOSupport", %"class.absl::debugging_internal::VDSOSupport"* %2, i64 0, i32 0
  %47 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %48 = inttoptr i64 %47 to i8*
  %49 = icmp eq i8* %48, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %49, label %50, label %52

50:                                               ; preds = %44
  %51 = tail call i8* @_ZN4absl18debugging_internal11VDSOSupport4InitEv() #6
  br label %55

52:                                               ; preds = %44
  %53 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %54 = inttoptr i64 %53 to i8*
  br label %55

55:                                               ; preds = %50, %52
  %56 = phi i8* [ %51, %50 ], [ %54, %52 ]
  call void @_ZN4absl18debugging_internal11ElfMemImageC1EPKv(%"class.absl::debugging_internal::ElfMemImage"* nonnull %46, i8* %56) #6
  %57 = bitcast %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %57) #6
  %58 = getelementptr inbounds %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo", %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %3, i64 0, i32 2
  %59 = bitcast %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 32, i1 false)
  %60 = call zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage12LookupSymbolEPKcS3_iPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"* nonnull %46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 2, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* nonnull %3) #6
  %61 = bitcast i8** %58 to i64*
  %62 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %57) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %45) #6
  %63 = select i1 %60, i64 %62, i64 ptrtoint (i64 (i32*, i8*, i8*)* @_ZN4absl18debugging_internal11VDSOSupport16GetCPUViaSyscallEPjPvS3_ to i64)
  br label %64

64:                                               ; preds = %41, %55
  %65 = phi i64 [ %63, %55 ], [ ptrtoint (i64 (i32*, i8*, i8*)* @_ZN4absl18debugging_internal11VDSOSupport16GetCPUViaSyscallEPjPvS3_ to i64), %41 ]
  store atomic i64 %65, i64* bitcast ({ { i64 (i32*, i8*, i8*)* } }* @_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E to i64*) monotonic, align 8
  %66 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %67 = inttoptr i64 %66 to i8*
  br label %68

68:                                               ; preds = %20, %64
  %69 = phi i8* [ %67, %64 ], [ null, %20 ]
  ret i8* %69
}

declare void @_ZN4absl18debugging_internal11ElfMemImageC1EPKv(%"class.absl::debugging_internal::ElfMemImage"*, i8*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @getauxval(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl18debugging_internal11VDSOSupport16GetCPUViaSyscallEPjPvS3_(i32*, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %4 = tail call i64 (i64, ...) @syscall(i64 309, i32* %0, i8* null, i8* null) #6
  ret i64 %4
}

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #5

declare i32 @close(i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11VDSOSupport12LookupSymbolEPKcS3_iPNS0_11ElfMemImage10SymbolInfoE(%"class.absl::debugging_internal::VDSOSupport"*, i8*, i8*, i32, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.absl::debugging_internal::VDSOSupport", %"class.absl::debugging_internal::VDSOSupport"* %0, i64 0, i32 0
  %7 = tail call zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage12LookupSymbolEPKcS3_iPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"* %6, i8* %1, i8* %2, i32 %3, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %4) #6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4absl18debugging_internal11VDSOSupport7SetBaseEPKv(%"class.absl::debugging_internal::VDSOSupport"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i8* %1, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %3, label %4, label %5, !prof !2

4:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.3, i64 0, i64 53), i32 116, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0)) #6
  br label %5

5:                                                ; preds = %2, %4
  %6 = load atomic i64, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %7 = inttoptr i64 %6 to i8*
  %8 = ptrtoint i8* %1 to i64
  store atomic i64 %8, i64* bitcast ({ { i8* } }* @_ZN4absl18debugging_internal11VDSOSupport10vdso_base_E to i64*) monotonic, align 8
  %9 = getelementptr inbounds %"class.absl::debugging_internal::VDSOSupport", %"class.absl::debugging_internal::VDSOSupport"* %0, i64 0, i32 0
  tail call void @_ZN4absl18debugging_internal11ElfMemImage4InitEPKv(%"class.absl::debugging_internal::ElfMemImage"* %9, i8* %1) #6
  store atomic i64 ptrtoint (i64 (i32*, i8*, i8*)* @_ZN4absl18debugging_internal11VDSOSupport13InitAndGetCPUEPjPvS3_ to i64), i64* bitcast ({ { i64 (i32*, i8*, i8*)* } }* @_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E to i64*) monotonic, align 8
  ret i8* %7
}

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #1

declare void @_ZN4absl18debugging_internal11ElfMemImage4InitEPKv(%"class.absl::debugging_internal::ElfMemImage"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage12LookupSymbolEPKcS3_iPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"*, i8*, i8*, i32, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11VDSOSupport21LookupSymbolByAddressEPKvPNS0_11ElfMemImage10SymbolInfoE(%"class.absl::debugging_internal::VDSOSupport"*, i8*, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.absl::debugging_internal::VDSOSupport", %"class.absl::debugging_internal::VDSOSupport"* %0, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage21LookupSymbolByAddressEPKvPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"* %4, i8* %1, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %2) #6
  ret i1 %5
}

declare zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage21LookupSymbolByAddressEPKvPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"*, i8*, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @syscall(i64, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl18debugging_internal6GetCPUEv() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #6
  store i32 -1431655766, i32* %1, align 4
  %3 = load atomic i64, i64* bitcast ({ { i64 (i32*, i8*, i8*)* } }* @_ZN4absl18debugging_internal11VDSOSupport10getcpu_fn_E to i64*) seq_cst, align 8
  %4 = inttoptr i64 %3 to i64 (i32*, i8*, i8*)*
  %5 = call i64 %4(i32* nonnull %1, i8* null, i8* null) #6
  %6 = trunc i64 %5 to i32
  %7 = icmp eq i32 %6, 0
  %8 = load i32, i32* %1, align 4
  %9 = select i1 %7, i32 %8, i32 %6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #6
  ret i32 %9
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
