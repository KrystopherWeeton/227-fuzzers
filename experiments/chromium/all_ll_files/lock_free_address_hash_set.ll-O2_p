; ModuleID = '../../base/sampling_heap_profiler/lock_free_address_hash_set.cc'
source_filename = "../../base/sampling_heap_profiler/lock_free_address_hash_set.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.base::LockFreeAddressHashSet" = type { %"class.std::__1::vector", i32, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"struct.base::LockFreeAddressHashSet::Node"* }
%"struct.base::LockFreeAddressHashSet::Node" = type { %"struct.std::__1::atomic.0", %"struct.base::LockFreeAddressHashSet::Node"* }
%"struct.std::__1::atomic.0" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl.2" }
%"struct.std::__1::__cxx_atomic_impl.2" = type { %"struct.std::__1::__cxx_atomic_base_impl.3" }
%"struct.std::__1::__cxx_atomic_base_impl.3" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::atomic"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type opaque

@.str = private unnamed_addr constant [64 x i8] c"../../base/sampling_heap_profiler/lock_free_address_hash_set.cc\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"!Contains(key)\00", align 1

@_ZN4base22LockFreeAddressHashSetC1Em = hidden unnamed_addr alias void (%"class.base::LockFreeAddressHashSet"*, i64), void (%"class.base::LockFreeAddressHashSet"*, i64)* @_ZN4base22LockFreeAddressHashSetC2Em
@_ZN4base22LockFreeAddressHashSetD1Ev = hidden unnamed_addr alias void (%"class.base::LockFreeAddressHashSet"*), void (%"class.base::LockFreeAddressHashSet"*)* @_ZN4base22LockFreeAddressHashSetD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22LockFreeAddressHashSetC2Em(%"class.base::LockFreeAddressHashSet"*, i64) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.base::LockFreeAddressHashSet"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = bitcast %"class.base::LockFreeAddressHashSet"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %8) #8
  unreachable

9:                                                ; preds = %5
  %10 = shl i64 %1, 3
  %11 = tail call i8* @_Znwm(i64 %10) #9
  %12 = bitcast i8* %11 to %"struct.std::__1::atomic"*
  %13 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.base::LockFreeAddressHashSet"* %0 to i8**
  store i8* %11, i8** %14, align 8
  %15 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %12, i64 %1
  %16 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.std::__1::atomic"* %15, %"struct.std::__1::atomic"** %16, align 8
  %17 = bitcast %"struct.std::__1::atomic"** %13 to i64*
  %18 = ptrtoint i8* %11 to i64
  %19 = add nsw i64 %1, -1
  %20 = getelementptr %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %12, i64 %19, i32 0, i32 0, i32 0, i32 0
  %21 = ptrtoint %"struct.base::LockFreeAddressHashSet::Node"** %20 to i64
  %22 = sub i64 8, %18
  %23 = add i64 %22, %21
  %24 = and i64 %23, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 %24, i1 false) #7
  %25 = ptrtoint %"struct.std::__1::atomic"* %15 to i64
  store i64 %25, i64* %17, align 8
  br label %26

26:                                               ; preds = %2, %9
  %27 = phi i64 [ %19, %9 ], [ -1, %2 ]
  %28 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 1
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 2
  store i64 %27, i64* %29, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22LockFreeAddressHashSetD2Ev(%"class.base::LockFreeAddressHashSet"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %2, align 8
  %4 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %4, align 8
  %6 = icmp eq %"struct.std::__1::atomic"* %3, %5
  br i1 %6, label %9, label %17

7:                                                ; preds = %30
  %8 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %2, align 8
  br label %9

9:                                                ; preds = %7, %1
  %10 = phi %"struct.std::__1::atomic"* [ %8, %7 ], [ %3, %1 ]
  %11 = icmp eq %"struct.std::__1::atomic"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %9
  %13 = ptrtoint %"struct.std::__1::atomic"* %10 to i64
  %14 = bitcast %"struct.std::__1::atomic"** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"struct.std::__1::atomic"* %10 to i8*
  tail call void @_ZdlPv(i8* %15) #9
  br label %16

16:                                               ; preds = %9, %12
  ret void

17:                                               ; preds = %1, %30
  %18 = phi %"struct.std::__1::atomic"* [ %31, %30 ], [ %3, %1 ]
  %19 = bitcast %"struct.std::__1::atomic"* %18 to i64*
  %20 = load atomic i64, i64* %19 monotonic, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = inttoptr i64 %20 to %"struct.base::LockFreeAddressHashSet::Node"*
  br label %24

24:                                               ; preds = %22, %24
  %25 = phi %"struct.base::LockFreeAddressHashSet::Node"* [ %27, %24 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"struct.base::LockFreeAddressHashSet::Node", %"struct.base::LockFreeAddressHashSet::Node"* %25, i64 0, i32 1
  %27 = load %"struct.base::LockFreeAddressHashSet::Node"*, %"struct.base::LockFreeAddressHashSet::Node"** %26, align 8
  %28 = bitcast %"struct.base::LockFreeAddressHashSet::Node"* %25 to i8*
  tail call void @_ZdlPv(i8* %28) #9
  %29 = icmp eq %"struct.base::LockFreeAddressHashSet::Node"* %27, null
  br i1 %29, label %30, label %24

30:                                               ; preds = %24, %17
  %31 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %18, i64 1
  %32 = icmp eq %"struct.std::__1::atomic"* %31, %5
  br i1 %32, label %7, label %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22LockFreeAddressHashSet6InsertEPv(%"class.base::LockFreeAddressHashSet"* nocapture, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = ptrtoint i8* %1 to i64
  %5 = mul i64 %4, 5475737090898469947
  %6 = lshr i64 %5, 32
  %7 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, %6
  %10 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %11, i64 %9, i32 0
  %13 = bitcast %"struct.std::__1::__atomic_base"* %12 to i64*
  %14 = load atomic i64, i64* %13 acquire, align 8
  %15 = inttoptr i64 %14 to %"struct.base::LockFreeAddressHashSet::Node"*
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %27, label %17

17:                                               ; preds = %2, %23
  %18 = phi %"struct.base::LockFreeAddressHashSet::Node"* [ %25, %23 ], [ %15, %2 ]
  %19 = bitcast %"struct.base::LockFreeAddressHashSet::Node"* %18 to i64*
  %20 = load atomic i64, i64* %19 monotonic, align 8
  %21 = inttoptr i64 %20 to i8*
  %22 = icmp eq i8* %21, %1
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"struct.base::LockFreeAddressHashSet::Node", %"struct.base::LockFreeAddressHashSet::Node"* %18, i64 0, i32 1
  %25 = load %"struct.base::LockFreeAddressHashSet::Node"*, %"struct.base::LockFreeAddressHashSet::Node"** %24, align 8
  %26 = icmp eq %"struct.base::LockFreeAddressHashSet::Node"* %25, null
  br i1 %26, label %33, label %17

27:                                               ; preds = %17, %2
  %28 = phi %"struct.base::LockFreeAddressHashSet::Node"* [ %15, %2 ], [ %18, %17 ]
  %29 = icmp eq %"struct.base::LockFreeAddressHashSet::Node"* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %27
  %31 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 33, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #7
  %32 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %33

33:                                               ; preds = %23, %27, %30
  %34 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %34, align 8
  %37 = load i64, i64* %7, align 8
  %38 = and i64 %37, %6
  %39 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %10, align 8
  %40 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %39, i64 %38, i32 0
  %41 = bitcast %"struct.std::__1::__atomic_base"* %40 to i64*
  %42 = load atomic i64, i64* %41 monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %57, label %44

44:                                               ; preds = %33
  %45 = inttoptr i64 %42 to %"struct.base::LockFreeAddressHashSet::Node"*
  br label %46

46:                                               ; preds = %44, %53
  %47 = phi %"struct.base::LockFreeAddressHashSet::Node"* [ %55, %53 ], [ %45, %44 ]
  %48 = bitcast %"struct.base::LockFreeAddressHashSet::Node"* %47 to i64*
  %49 = load atomic i64, i64* %48 monotonic, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = bitcast %"struct.base::LockFreeAddressHashSet::Node"* %47 to i64*
  store atomic i64 %4, i64* %52 monotonic, align 8
  br label %65

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"struct.base::LockFreeAddressHashSet::Node", %"struct.base::LockFreeAddressHashSet::Node"* %47, i64 0, i32 1
  %55 = load %"struct.base::LockFreeAddressHashSet::Node"*, %"struct.base::LockFreeAddressHashSet::Node"** %54, align 8
  %56 = icmp eq %"struct.base::LockFreeAddressHashSet::Node"* %55, null
  br i1 %56, label %57, label %46

57:                                               ; preds = %53, %33
  %58 = call i8* @_Znwm(i64 16) #9
  %59 = load atomic i64, i64* %41 monotonic, align 8
  %60 = inttoptr i64 %59 to %"struct.base::LockFreeAddressHashSet::Node"*
  %61 = getelementptr inbounds i8, i8* %58, i64 8
  %62 = bitcast i8* %61 to %"struct.base::LockFreeAddressHashSet::Node"**
  store %"struct.base::LockFreeAddressHashSet::Node"* %60, %"struct.base::LockFreeAddressHashSet::Node"** %62, align 8
  %63 = bitcast i8* %58 to i64*
  store atomic i64 %4, i64* %63 monotonic, align 8
  %64 = ptrtoint i8* %58 to i64
  store atomic i64 %64, i64* %41 release, align 8
  br label %65

65:                                               ; preds = %57, %51
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22LockFreeAddressHashSet4CopyERKS0_(%"class.base::LockFreeAddressHashSet"* nocapture, %"class.base::LockFreeAddressHashSet"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %3, align 8
  %5 = getelementptr inbounds %"class.base::LockFreeAddressHashSet", %"class.base::LockFreeAddressHashSet"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %5, align 8
  %7 = icmp eq %"struct.std::__1::atomic"* %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %16, %2
  ret void

9:                                                ; preds = %2, %16
  %10 = phi %"struct.std::__1::atomic"* [ %17, %16 ], [ %4, %2 ]
  %11 = bitcast %"struct.std::__1::atomic"* %10 to i64*
  %12 = load atomic i64, i64* %11 monotonic, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = inttoptr i64 %12 to %"struct.base::LockFreeAddressHashSet::Node"*
  br label %19

16:                                               ; preds = %26, %9
  %17 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %10, i64 1
  %18 = icmp eq %"struct.std::__1::atomic"* %17, %6
  br i1 %18, label %8, label %9

19:                                               ; preds = %14, %26
  %20 = phi %"struct.base::LockFreeAddressHashSet::Node"* [ %28, %26 ], [ %15, %14 ]
  %21 = bitcast %"struct.base::LockFreeAddressHashSet::Node"* %20 to i64*
  %22 = load atomic i64, i64* %21 monotonic, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = inttoptr i64 %22 to i8*
  tail call void @_ZN4base22LockFreeAddressHashSet6InsertEPv(%"class.base::LockFreeAddressHashSet"* %0, i8* nonnull %25)
  br label %26

26:                                               ; preds = %19, %24
  %27 = getelementptr inbounds %"struct.base::LockFreeAddressHashSet::Node", %"struct.base::LockFreeAddressHashSet::Node"* %20, i64 0, i32 1
  %28 = load %"struct.base::LockFreeAddressHashSet::Node"*, %"struct.base::LockFreeAddressHashSet::Node"** %27, align 8
  %29 = icmp eq %"struct.base::LockFreeAddressHashSet::Node"* %28, null
  br i1 %29, label %16, label %19
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
