; ModuleID = '../../v8/src/regexp/regexp-bytecodes.cc'
source_filename = "../../v8/src/regexp/regexp-bytecodes.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c", %02x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"[generated bytecode for regexp pattern: '%s']\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"%p  %4tx  \00", align 1
@_ZN2v88internalL20kRegExpBytecodeNamesE = internal unnamed_addr constant [59 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.65, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [6 x i8] c"BREAK\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"PUSH_CP\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"PUSH_BT\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"PUSH_REGISTER\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"SET_REGISTER_TO_CP\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"SET_CP_TO_REGISTER\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"SET_REGISTER_TO_SP\00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"SET_SP_TO_REGISTER\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"SET_REGISTER\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"ADVANCE_REGISTER\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"POP_CP\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"POP_BT\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"POP_REGISTER\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"FAIL\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"SUCCEED\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"ADVANCE_CP\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"GOTO\00", align 1
@.str.24 = private unnamed_addr constant [18 x i8] c"LOAD_CURRENT_CHAR\00", align 1
@.str.25 = private unnamed_addr constant [28 x i8] c"LOAD_CURRENT_CHAR_UNCHECKED\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"LOAD_2_CURRENT_CHARS\00", align 1
@.str.27 = private unnamed_addr constant [31 x i8] c"LOAD_2_CURRENT_CHARS_UNCHECKED\00", align 1
@.str.28 = private unnamed_addr constant [21 x i8] c"LOAD_4_CURRENT_CHARS\00", align 1
@.str.29 = private unnamed_addr constant [31 x i8] c"LOAD_4_CURRENT_CHARS_UNCHECKED\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"CHECK_4_CHARS\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"CHECK_CHAR\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"CHECK_NOT_4_CHARS\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"CHECK_NOT_CHAR\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"AND_CHECK_4_CHARS\00", align 1
@.str.35 = private unnamed_addr constant [15 x i8] c"AND_CHECK_CHAR\00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c"AND_CHECK_NOT_4_CHARS\00", align 1
@.str.37 = private unnamed_addr constant [19 x i8] c"AND_CHECK_NOT_CHAR\00", align 1
@.str.38 = private unnamed_addr constant [25 x i8] c"MINUS_AND_CHECK_NOT_CHAR\00", align 1
@.str.39 = private unnamed_addr constant [20 x i8] c"CHECK_CHAR_IN_RANGE\00", align 1
@.str.40 = private unnamed_addr constant [24 x i8] c"CHECK_CHAR_NOT_IN_RANGE\00", align 1
@.str.41 = private unnamed_addr constant [19 x i8] c"CHECK_BIT_IN_TABLE\00", align 1
@.str.42 = private unnamed_addr constant [9 x i8] c"CHECK_LT\00", align 1
@.str.43 = private unnamed_addr constant [9 x i8] c"CHECK_GT\00", align 1
@.str.44 = private unnamed_addr constant [19 x i8] c"CHECK_NOT_BACK_REF\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"CHECK_NOT_BACK_REF_NO_CASE\00", align 1
@.str.46 = private unnamed_addr constant [35 x i8] c"CHECK_NOT_BACK_REF_NO_CASE_UNICODE\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"CHECK_NOT_BACK_REF_BACKWARD\00", align 1
@.str.48 = private unnamed_addr constant [36 x i8] c"CHECK_NOT_BACK_REF_NO_CASE_BACKWARD\00", align 1
@.str.49 = private unnamed_addr constant [44 x i8] c"CHECK_NOT_BACK_REF_NO_CASE_UNICODE_BACKWARD\00", align 1
@.str.50 = private unnamed_addr constant [21 x i8] c"CHECK_NOT_REGS_EQUAL\00", align 1
@.str.51 = private unnamed_addr constant [18 x i8] c"CHECK_REGISTER_LT\00", align 1
@.str.52 = private unnamed_addr constant [18 x i8] c"CHECK_REGISTER_GE\00", align 1
@.str.53 = private unnamed_addr constant [22 x i8] c"CHECK_REGISTER_EQ_POS\00", align 1
@.str.54 = private unnamed_addr constant [15 x i8] c"CHECK_AT_START\00", align 1
@.str.55 = private unnamed_addr constant [19 x i8] c"CHECK_NOT_AT_START\00", align 1
@.str.56 = private unnamed_addr constant [13 x i8] c"CHECK_GREEDY\00", align 1
@.str.57 = private unnamed_addr constant [20 x i8] c"ADVANCE_CP_AND_GOTO\00", align 1
@.str.58 = private unnamed_addr constant [30 x i8] c"SET_CURRENT_POSITION_FROM_END\00", align 1
@.str.59 = private unnamed_addr constant [23 x i8] c"CHECK_CURRENT_POSITION\00", align 1
@.str.60 = private unnamed_addr constant [24 x i8] c"SKIP_UNTIL_BIT_IN_TABLE\00", align 1
@.str.61 = private unnamed_addr constant [20 x i8] c"SKIP_UNTIL_CHAR_AND\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c"SKIP_UNTIL_CHAR\00", align 1
@.str.63 = private unnamed_addr constant [28 x i8] c"SKIP_UNTIL_CHAR_POS_CHECKED\00", align 1
@.str.64 = private unnamed_addr constant [24 x i8] c"SKIP_UNTIL_CHAR_OR_CHAR\00", align 1
@.str.65 = private unnamed_addr constant [34 x i8] c"SKIP_UNTIL_GT_OR_NOT_BIT_IN_TABLE\00", align 1
@_ZN2v88internalL22kRegExpBytecodeLengthsE = internal unnamed_addr constant [59 x i32] [i32 4, i32 4, i32 8, i32 4, i32 8, i32 4, i32 4, i32 4, i32 8, i32 8, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 8, i32 8, i32 4, i32 8, i32 4, i32 8, i32 4, i32 12, i32 8, i32 12, i32 8, i32 16, i32 12, i32 16, i32 12, i32 12, i32 12, i32 12, i32 24, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 12, i32 12, i32 12, i32 8, i32 8, i32 8, i32 8, i32 8, i32 4, i32 8, i32 32, i32 24, i32 16, i32 20, i32 20, i32 32], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal31RegExpBytecodeDisassembleSingleEPKhS2_(i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 63
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [59 x i8*], [59 x i8*]* @_ZN2v88internalL20kRegExpBytecodeNamesE, i64 0, i64 %6
  %8 = load i8*, i8** %7, align 8
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %8) #3
  %9 = getelementptr inbounds [59 x i32], [59 x i32]* @_ZN2v88internalL22kRegExpBytecodeLengthsE, i64 0, i64 %6
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  br label %15

12:                                               ; preds = %15
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #3
  %13 = tail call i16** @__ctype_b_loc() #4
  %14 = zext i32 %10 to i64
  br label %23

15:                                               ; preds = %2, %15
  %16 = phi i64 [ 0, %2 ], [ %20, %15 ]
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %19) #3
  %20 = add nuw nsw i64 %16, 1
  %21 = icmp slt i64 %20, %11
  br i1 %21, label %15, label %12

22:                                               ; preds = %23
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #3
  ret void

23:                                               ; preds = %23, %12
  %24 = phi i64 [ 1, %12 ], [ %35, %23 ]
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = load i16*, i16** %13, align 8
  %29 = zext i8 %26 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = and i16 %31, 16384
  %33 = icmp eq i16 %32, 0
  %34 = select i1 %33, i32 46, i32 %27
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 %34) #3
  %35 = add nuw nsw i64 %24, 1
  %36 = icmp eq i64 %35, %14
  br i1 %36, label %22, label %23
}

declare void @_ZN2v88internal6PrintFEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal25RegExpBytecodeDisassembleEPKhiPKc(i8*, i32, i8*) local_unnamed_addr #0 {
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0), i8* %2) #3
  %4 = sext i32 %1 to i64
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %16

6:                                                ; preds = %3, %6
  %7 = phi i64 [ %14, %6 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %8, i64 %7) #3
  tail call void @_ZN2v88internal31RegExpBytecodeDisassembleSingleEPKhS2_(i8* undef, i8* %8)
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [59 x i32], [59 x i32]* @_ZN2v88internalL22kRegExpBytecodeLengthsE, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = icmp slt i64 %14, %4
  br i1 %15, label %6, label %16

16:                                               ; preds = %6, %3
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
