; ModuleID = '../../base/sequence_checker_impl.cc'
source_filename = "../../base/sequence_checker_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::SequenceCheckerImpl" = type { %"class.base::Lock", %"class.std::__1::unique_ptr" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::SequenceCheckerImpl::Core"* }
%"class.base::SequenceCheckerImpl::Core" = type { %"class.base::SequenceToken", %"class.base::ThreadCheckerImpl" }
%"class.base::SequenceToken" = type { i32 }
%"class.base::ThreadCheckerImpl" = type { %"class.base::Lock", %"class.std::__1::unique_ptr.0", %"class.base::PlatformThreadRef", %"class.base::TaskToken", %"class.base::SequenceToken" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::debug::StackTrace"* }
%"class.base::debug::StackTrace" = type { [250 x i8*], i64 }
%"class.base::PlatformThreadRef" = type { i64 }
%"class.base::TaskToken" = type { i32 }

$_ZNK4base19SequenceCheckerImpl4Core21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS2_14default_deleteIS5_EEEE = comdat any

@_ZN4base19SequenceCheckerImplC1Ev = hidden unnamed_addr alias void (%"class.base::SequenceCheckerImpl"*), void (%"class.base::SequenceCheckerImpl"*)* @_ZN4base19SequenceCheckerImplC2Ev
@_ZN4base19SequenceCheckerImplD1Ev = hidden unnamed_addr alias void (%"class.base::SequenceCheckerImpl"*), void (%"class.base::SequenceCheckerImpl"*)* @_ZN4base19SequenceCheckerImplD2Ev
@_ZN4base19SequenceCheckerImplC1EOS0_ = hidden unnamed_addr alias void (%"class.base::SequenceCheckerImpl"*, %"class.base::SequenceCheckerImpl"*), void (%"class.base::SequenceCheckerImpl"*, %"class.base::SequenceCheckerImpl"*)* @_ZN4base19SequenceCheckerImplC2EOS0_

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base19SequenceCheckerImpl18EnableStackLoggingEv() local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19SequenceCheckerImplC2Ev(%"class.base::SequenceCheckerImpl"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %2) #7
  %3 = tail call i8* @_Znwm(i64 72) #8
  %4 = tail call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #7
  %5 = bitcast i8* %3 to i32*
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %"class.base::ThreadCheckerImpl"*
  tail call void @_ZN4base17ThreadCheckerImplC1Ev(%"class.base::ThreadCheckerImpl"* %7) #7
  %8 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::SequenceCheckerImpl::Core"** %8 to i8**
  store i8* %3, i8** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19SequenceCheckerImplD2Ev(%"class.base::SequenceCheckerImpl"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %2, align 8
  store %"class.base::SequenceCheckerImpl::Core"* null, %"class.base::SequenceCheckerImpl::Core"** %2, align 8
  %4 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %3, i64 0, i32 1
  tail call void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"* %6) #7
  %7 = bitcast %"class.base::SequenceCheckerImpl::Core"* %3 to i8*
  tail call void @_ZdlPv(i8* %7) #8
  br label %8

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19SequenceCheckerImplC2EOS0_(%"class.base::SequenceCheckerImpl"*, %"class.base::SequenceCheckerImpl"* dereferenceable(48)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %3) #7
  %4 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 0, i64* %5, align 8
  %6 = tail call zeroext i1 @_ZNK4base19SequenceCheckerImpl21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::SequenceCheckerImpl"* %1, %"class.std::__1::unique_ptr.0"* null)
  %7 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.base::SequenceCheckerImpl::Core"* null, %"class.base::SequenceCheckerImpl::Core"** %8, align 8
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %11, align 8
  store i64 %10, i64* %5, align 8
  %13 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %12, i64 0, i32 1
  tail call void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"* %15) #7
  %16 = bitcast %"class.base::SequenceCheckerImpl::Core"* %12 to i8*
  tail call void @_ZdlPv(i8* %16) #8
  br label %17

17:                                               ; preds = %2, %14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base19SequenceCheckerImpl21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::SequenceCheckerImpl"*, %"class.std::__1::unique_ptr.0"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #7
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %10, align 8
  %12 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %11, null
  br i1 %12, label %13, label %28

13:                                               ; preds = %8
  %14 = tail call i8* @_Znwm(i64 72) #8
  %15 = tail call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #7
  %16 = bitcast i8* %14 to i32*
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to %"class.base::ThreadCheckerImpl"*
  tail call void @_ZN4base17ThreadCheckerImplC1Ev(%"class.base::ThreadCheckerImpl"* %18) #7
  %19 = ptrtoint i8* %14 to i64
  %20 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %10, align 8
  %21 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  store i64 %19, i64* %21, align 8
  %22 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %20, null
  %23 = bitcast i8* %14 to %"class.base::SequenceCheckerImpl::Core"*
  br i1 %22, label %28, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %20, i64 0, i32 1
  tail call void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"* %25) #7
  %26 = bitcast %"class.base::SequenceCheckerImpl::Core"* %20 to i8*
  tail call void @_ZdlPv(i8* %26) #8
  %27 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %10, align 8
  br label %28

28:                                               ; preds = %8, %13, %24
  %29 = phi %"class.base::SequenceCheckerImpl::Core"* [ %11, %8 ], [ %23, %13 ], [ %27, %24 ]
  %30 = tail call zeroext i1 @_ZNK4base19SequenceCheckerImpl4Core21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS2_14default_deleteIS5_EEEE(%"class.base::SequenceCheckerImpl::Core"* %29, %"class.std::__1::unique_ptr.0"* %1)
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #7
  ret i1 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.base::SequenceCheckerImpl"* @_ZN4base19SequenceCheckerImplaSEOS0_(%"class.base::SequenceCheckerImpl"* returned, %"class.base::SequenceCheckerImpl"* dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %3 = tail call zeroext i1 @_ZNK4base19SequenceCheckerImpl21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::SequenceCheckerImpl"* %1, %"class.std::__1::unique_ptr.0"* null)
  %4 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.base::SequenceCheckerImpl::Core"* null, %"class.base::SequenceCheckerImpl::Core"** %6, align 8
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %9, align 8
  %11 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  store i64 %8, i64* %11, align 8
  %12 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %10, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %10, i64 0, i32 1
  tail call void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"* %14) #7
  %15 = bitcast %"class.base::SequenceCheckerImpl::Core"* %10 to i8*
  tail call void @_ZdlPv(i8* %15) #8
  br label %16

16:                                               ; preds = %2, %13
  ret %"class.base::SequenceCheckerImpl"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4base19SequenceCheckerImpl4Core21CalledOnValidSequenceEPNSt3__110unique_ptrINS_5debug10StackTraceENS2_14default_deleteIS5_EEEE(%"class.base::SequenceCheckerImpl::Core"*, %"class.std::__1::unique_ptr.0"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.base::SequenceToken", align 4
  %4 = tail call zeroext i1 @_ZN4base18ThreadLocalStorage16HasBeenDestroyedEv() #7
  br i1 %4, label %25, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %0, i64 0, i32 0
  %7 = tail call zeroext i1 @_ZNK4base13SequenceToken7IsValidEv(%"class.base::SequenceToken"* %6) #7
  br i1 %7, label %8, label %25

8:                                                ; preds = %5
  %9 = bitcast %"class.base::SequenceToken"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  %10 = tail call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #7
  %11 = getelementptr inbounds %"class.base::SequenceToken", %"class.base::SequenceToken"* %3, i64 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = call zeroext i1 @_ZNK4base13SequenceTokenneERKS0_(%"class.base::SequenceToken"* %6, %"class.base::SequenceToken"* nonnull dereferenceable(4) %3) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  br i1 %12, label %13, label %28

13:                                               ; preds = %8
  %14 = icmp eq %"class.std::__1::unique_ptr.0"* %1, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %0, i64 0, i32 1
  %17 = call %"class.base::debug::StackTrace"* @_ZNK4base17ThreadCheckerImpl10GetBoundAtEv(%"class.base::ThreadCheckerImpl"* %16) #7
  %18 = ptrtoint %"class.base::debug::StackTrace"* %17 to i64
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %1, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %19, align 8
  %21 = bitcast %"class.std::__1::unique_ptr.0"* %1 to i64*
  store i64 %18, i64* %21, align 8
  %22 = icmp eq %"class.base::debug::StackTrace"* %20, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %15
  %24 = bitcast %"class.base::debug::StackTrace"* %20 to i8*
  call void @_ZdlPv(i8* %24) #8
  br label %28

25:                                               ; preds = %5, %2
  %26 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %0, i64 0, i32 1
  %27 = tail call zeroext i1 @_ZNK4base17ThreadCheckerImpl19CalledOnValidThreadEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::ThreadCheckerImpl"* %26, %"class.std::__1::unique_ptr.0"* %1) #7
  br label %28

28:                                               ; preds = %15, %23, %8, %13, %25
  %29 = phi i1 [ %27, %25 ], [ false, %13 ], [ true, %8 ], [ false, %23 ], [ false, %15 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19SequenceCheckerImpl18DetachFromSequenceEv(%"class.base::SequenceCheckerImpl"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %2) #7
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5, !prof !2

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %6) #7
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.base::SequenceCheckerImpl", %"class.base::SequenceCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.base::SequenceCheckerImpl::Core"*, %"class.base::SequenceCheckerImpl::Core"** %8, align 8
  store %"class.base::SequenceCheckerImpl::Core"* null, %"class.base::SequenceCheckerImpl::Core"** %8, align 8
  %10 = icmp eq %"class.base::SequenceCheckerImpl::Core"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::SequenceCheckerImpl::Core", %"class.base::SequenceCheckerImpl::Core"* %9, i64 0, i32 1
  tail call void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"* %12) #7
  %13 = bitcast %"class.base::SequenceCheckerImpl::Core"* %9 to i8*
  tail call void @_ZdlPv(i8* %13) #8
  br label %14

14:                                               ; preds = %7, %11
  %15 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base19SequenceCheckerImpl34HasThreadLocalStorageBeenDestroyedEv() local_unnamed_addr #1 align 2 {
  %1 = tail call zeroext i1 @_ZN4base18ThreadLocalStorage16HasBeenDestroyedEv() #7
  ret i1 %1
}

declare zeroext i1 @_ZN4base18ThreadLocalStorage16HasBeenDestroyedEv() local_unnamed_addr #3

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #4

declare zeroext i1 @_ZNK4base13SequenceToken7IsValidEv(%"class.base::SequenceToken"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK4base13SequenceTokenneERKS0_(%"class.base::SequenceToken"*, %"class.base::SequenceToken"* dereferenceable(4)) local_unnamed_addr #3

declare i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() local_unnamed_addr #3

declare %"class.base::debug::StackTrace"* @_ZNK4base17ThreadCheckerImpl10GetBoundAtEv(%"class.base::ThreadCheckerImpl"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK4base17ThreadCheckerImpl19CalledOnValidThreadEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::ThreadCheckerImpl"*, %"class.std::__1::unique_ptr.0"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN4base17ThreadCheckerImplC1Ev(%"class.base::ThreadCheckerImpl"*) unnamed_addr #3

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base17ThreadCheckerImplD1Ev(%"class.base::ThreadCheckerImpl"*) unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
