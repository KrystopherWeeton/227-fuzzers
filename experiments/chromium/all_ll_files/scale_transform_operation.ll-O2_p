; ModuleID = '../../third_party/blink/renderer/platform/transforms/scale_transform_operation.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/scale_transform_operation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted" }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatSize" = type { float, float }

$_ZN5blink18TransformOperationD2Ev = comdat any

$_ZN5blink23ScaleTransformOperationD0Ev = comdat any

$_ZNK5blink23ScaleTransformOperationeqERKNS_18TransformOperationE = comdat any

$_ZNK5blink23ScaleTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE = comdat any

$_ZN5blink23ScaleTransformOperation4ZoomEd = comdat any

$_ZNK5blink23ScaleTransformOperation7GetTypeEv = comdat any

$_ZNK5blink23ScaleTransformOperation13PrimitiveTypeEv = comdat any

$_ZNK5blink23ScaleTransformOperation22PreservesAxisAlignmentEv = comdat any

$_ZNK5blink23ScaleTransformOperation23IsIdentityOrTranslationEv = comdat any

$_ZNK5blink23ScaleTransformOperation24HasNonTrivial3DComponentEv = comdat any

$_ZNK5blink18TransformOperation19BoxSizeDependenciesEv = comdat any

@_ZTVN5blink23ScaleTransformOperationE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::TransformOperation"*)* @_ZN5blink18TransformOperationD2Ev to i8*), i8* bitcast (void (%"class.blink::ScaleTransformOperation"*)* @_ZN5blink23ScaleTransformOperationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZNK5blink23ScaleTransformOperationeqERKNS_18TransformOperationE to i8*), i8* bitcast (void (%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)* @_ZNK5blink23ScaleTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZN5blink23ScaleTransformOperation10AccumulateERKNS_18TransformOperationE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformOperation"*, double, i1)* @_ZN5blink23ScaleTransformOperation5BlendEPKNS_18TransformOperationEdb to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::ScaleTransformOperation"*, double)* @_ZN5blink23ScaleTransformOperation4ZoomEd to i8*), i8* bitcast (i32 (%"class.blink::ScaleTransformOperation"*)* @_ZNK5blink23ScaleTransformOperation7GetTypeEv to i8*), i8* bitcast (i32 (%"class.blink::ScaleTransformOperation"*)* @_ZNK5blink23ScaleTransformOperation13PrimitiveTypeEv to i8*), i8* bitcast (i1 (%"class.blink::ScaleTransformOperation"*)* @_ZNK5blink23ScaleTransformOperation22PreservesAxisAlignmentEv to i8*), i8* bitcast (i1 (%"class.blink::ScaleTransformOperation"*)* @_ZNK5blink23ScaleTransformOperation23IsIdentityOrTranslationEv to i8*), i8* bitcast (i1 (%"class.blink::ScaleTransformOperation"*)* @_ZNK5blink23ScaleTransformOperation24HasNonTrivial3DComponentEv to i8*), i8* bitcast (i32 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink23ScaleTransformOperation10AccumulateERKNS_18TransformOperationE(%"class.blink::ScaleTransformOperation"* nocapture readonly, %"class.blink::TransformOperation"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %5 = bitcast double* %3 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast %"class.blink::TransformOperation"* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fadd <2 x double> %6, %8
  %10 = fadd <2 x double> %9, <double -1.000000e+00, double -1.000000e+00>
  %11 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %14 = bitcast %"class.blink::TransformOperation"* %13 to double*
  %15 = load double, double* %14, align 8
  %16 = fadd double %12, %15
  %17 = fadd double %16, -1.000000e+00
  %18 = fcmp une double %17, 1.000000e+00
  br i1 %18, label %26, label %19

19:                                               ; preds = %2
  %20 = extractelement <2 x double> %10, i32 1
  %21 = fcmp oeq double %20, 1.000000e+00
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = extractelement <2 x double> %10, i32 0
  %24 = fcmp oeq double %23, 1.000000e+00
  %25 = select i1 %24, i32 1, i32 2
  br label %26

26:                                               ; preds = %22, %19, %2
  %27 = phi i32 [ 12, %2 ], [ 0, %19 ], [ %25, %22 ]
  %28 = tail call noalias i8* @malloc(i64 48) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 1, i32* %30, align 4
  %31 = bitcast i8* %28 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink23ScaleTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 16
  %33 = bitcast i8* %32 to <2 x double>*
  store <2 x double> %10, <2 x double>* %33, align 8
  %34 = getelementptr inbounds i8, i8* %28, i64 32
  %35 = bitcast i8* %34 to double*
  store double %17, double* %35, align 8
  %36 = getelementptr inbounds i8, i8* %28, i64 40
  %37 = bitcast i8* %36 to i32*
  store i32 %27, i32* %37, align 8
  %38 = bitcast i8* %28 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink23ScaleTransformOperation5BlendEPKNS_18TransformOperationEdb(%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformOperation"*, double, i1 zeroext) unnamed_addr #0 align 2 {
  br i1 %3, label %5, label %22

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %8
  %10 = insertelement <2 x double> undef, double %2, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = fmul <2 x double> %9, %11
  %13 = fadd <2 x double> %8, %12
  %14 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %15 = load double, double* %14, align 8
  %16 = fsub double 1.000000e+00, %15
  %17 = fmul double %16, %2
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = tail call noalias i8* @malloc(i64 48) #5
  br label %69

22:                                               ; preds = %4
  %23 = icmp eq %"class.blink::TransformOperation"* %1, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %26 = bitcast %"class.blink::TransformOperation"* %25 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %29 = bitcast %"class.blink::TransformOperation"* %28 to double*
  %30 = load double, double* %29, align 8
  br label %31

31:                                               ; preds = %22, %24
  %32 = phi double [ %30, %24 ], [ 1.000000e+00, %22 ]
  %33 = phi <2 x double> [ %27, %24 ], [ <double 1.000000e+00, double 1.000000e+00>, %22 ]
  %34 = bitcast %"class.blink::ScaleTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %35 = bitcast %"class.blink::ScaleTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %36 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %35, align 8
  %37 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %36, i64 7
  %38 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %37, align 8
  %39 = tail call i32 %38(%"class.blink::TransformOperation"* %34) #5
  %40 = add i32 %39, -11
  %41 = icmp ult i32 %40, 10
  %42 = or i1 %41, %23
  %43 = select i1 %41, i32 12, i32 2
  br i1 %42, label %53, label %44

44:                                               ; preds = %31
  %45 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %46 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %45, align 8
  %47 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %46, i64 7
  %48 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %47, align 8
  %49 = tail call i32 %48(%"class.blink::TransformOperation"* nonnull %1) #5
  %50 = add i32 %49, -11
  %51 = icmp ult i32 %50, 10
  %52 = select i1 %51, i32 12, i32 2
  br label %53

53:                                               ; preds = %31, %44
  %54 = phi i32 [ %43, %31 ], [ %52, %44 ]
  %55 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %56 = bitcast double* %55 to <2 x double>*
  %57 = load <2 x double>, <2 x double>* %56, align 8
  %58 = fsub <2 x double> %57, %33
  %59 = insertelement <2 x double> undef, double %2, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = fmul <2 x double> %58, %60
  %62 = fadd <2 x double> %33, %61
  %63 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %64 = load double, double* %63, align 8
  %65 = fsub double %64, %32
  %66 = fmul double %65, %2
  %67 = fadd double %32, %66
  %68 = tail call noalias i8* @malloc(i64 48) #5
  br label %69

69:                                               ; preds = %53, %5
  %70 = phi i8* [ %68, %53 ], [ %21, %5 ]
  %71 = phi double [ %67, %53 ], [ %18, %5 ]
  %72 = phi i32 [ %54, %53 ], [ %20, %5 ]
  %73 = phi <2 x double> [ %62, %53 ], [ %13, %5 ]
  %74 = getelementptr inbounds i8, i8* %70, i64 8
  %75 = bitcast i8* %74 to i32*
  store i32 1, i32* %75, align 4
  %76 = bitcast i8* %70 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink23ScaleTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %76, align 8
  %77 = getelementptr inbounds i8, i8* %70, i64 16
  %78 = bitcast i8* %77 to <2 x double>*
  store <2 x double> %73, <2 x double>* %78, align 8
  %79 = getelementptr inbounds i8, i8* %70, i64 32
  %80 = bitcast i8* %79 to double*
  store double %71, double* %80, align 8
  %81 = getelementptr inbounds i8, i8* %70, i64 40
  %82 = bitcast i8* %81 to i32*
  store i32 %72, i32* %82, align 8
  %83 = bitcast i8* %70 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %83
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18TransformOperationD2Ev(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink23ScaleTransformOperationD0Ev(%"class.blink::ScaleTransformOperation"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.blink::ScaleTransformOperation"* %0 to i8*
  tail call void @free(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink23ScaleTransformOperationeqERKNS_18TransformOperationE(%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::ScaleTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %5 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %5, i64 7
  %7 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %6, align 8
  %8 = tail call i32 %7(%"class.blink::TransformOperation"* %1) #5
  %9 = bitcast %"class.blink::ScaleTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %10 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %10, i64 7
  %12 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %11, align 8
  %13 = tail call i32 %12(%"class.blink::TransformOperation"* %3) #5
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %36

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %19 = bitcast %"class.blink::TransformOperation"* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = fcmp oeq double %17, %20
  br i1 %21, label %22, label %36

22:                                               ; preds = %15
  %23 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 3
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1, i32 1
  %26 = bitcast %"class.WTF::RefCounted"* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %24, %27
  br i1 %28, label %29, label %36

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %33 = bitcast %"class.blink::TransformOperation"* %32 to double*
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %31, %34
  br label %36

36:                                               ; preds = %15, %22, %29, %2
  %37 = phi i1 [ false, %2 ], [ false, %22 ], [ false, %15 ], [ %35, %29 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink23ScaleTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE(%"class.blink::ScaleTransformOperation"*, %"class.blink::TransformationMatrix"* dereferenceable(128), %"class.blink::FloatSize"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 3
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %9 = load double, double* %8, align 8
  %10 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix7Scale3dEddd(%"class.blink::TransformationMatrix"* %1, double %5, double %7, double %9) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::TransformOperation"* @_ZN5blink23ScaleTransformOperation4ZoomEd(%"class.blink::ScaleTransformOperation"*, double) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::ScaleTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = icmp eq %"class.blink::ScaleTransformOperation"* %0, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %6) #5
  br label %7

7:                                                ; preds = %2, %5
  ret %"class.blink::TransformOperation"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink23ScaleTransformOperation7GetTypeEv(%"class.blink::ScaleTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink23ScaleTransformOperation13PrimitiveTypeEv(%"class.blink::ScaleTransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink23ScaleTransformOperation22PreservesAxisAlignmentEv(%"class.blink::ScaleTransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink23ScaleTransformOperation23IsIdentityOrTranslationEv(%"class.blink::ScaleTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 1.000000e+00
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 3
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 1.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 1.000000e+00
  br label %13

13:                                               ; preds = %9, %5, %1
  %14 = phi i1 [ false, %5 ], [ false, %1 ], [ %12, %9 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink23ScaleTransformOperation24HasNonTrivial3DComponentEv(%"class.blink::ScaleTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ScaleTransformOperation", %"class.blink::ScaleTransformOperation"* %0, i64 0, i32 4
  %3 = load double, double* %2, align 8
  %4 = fcmp une double %3, 1.000000e+00
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix7Scale3dEddd(%"class.blink::TransformationMatrix"*, double, double, double) local_unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
