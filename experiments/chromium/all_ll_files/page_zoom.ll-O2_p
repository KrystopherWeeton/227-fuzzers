; ModuleID = '../../components/zoom/page_zoom.cc'
source_filename = "../../components/zoom/page_zoom.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.content::WebContents" = type <{ %"class.content::PageNavigator", %"class.base::SupportsUserData.base", [7 x i8] }>
%"class.content::PageNavigator" = type { i32 (...)** }
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"struct.base::UserMetricsAction" = type { i8* }
%"class.base::SupportsUserData" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.base::SupportsUserData::Data" = type { i32 (...)** }
%"class.zoom::ZoomController" = type { %"class.content::WebContentsObserver", %"class.content::WebContentsUserData", i8, i32, double, %"class.std::__1::unique_ptr", %class.scoped_refptr, %"class.base::ObserverList", %"class.content::BrowserContext"*, %"class.content::HostZoomMap"*, %"class.base::CallbackListSubscription" }
%"class.content::WebContentsObserver" = type { %"class.IPC::Listener", %"class.content::WebContents"* }
%"class.IPC::Listener" = type { i32 (...)** }
%"class.content::WebContentsUserData" = type { %"class.base::SupportsUserData::Data" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.zoom::ZoomController::ZoomChangedEventData"* }
%"struct.zoom::ZoomController::ZoomChangedEventData" = type <{ %"class.content::WebContents"*, double, double, i32, i8, [3 x i8] }>
%class.scoped_refptr = type { %"class.zoom::ZoomRequestClient"* }
%"class.zoom::ZoomRequestClient" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.12", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.14" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.content::BrowserContext" = type opaque
%"class.content::HostZoomMap" = type { i32 (...)** }
%"class.base::CallbackListSubscription" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.19 }
%class.scoped_refptr.19 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

$_ZNSt3__16vectorIdNS_9allocatorIdEEE6insertENS_11__wrap_iterIPKdEERS5_ = comdat any

@.str = private unnamed_addr constant [11 x i8] c"ZoomNormal\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"ZoomMinus_AtMinimum\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"ZoomMinus\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"ZoomPlus_AtMaximum\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"ZoomPlus\00", align 1
@_ZN4zoom22kPresetZoomFactorsSizeE = external local_unnamed_addr constant i64, align 8
@_ZN4zoom18kPresetZoomFactorsE = external local_unnamed_addr constant [0 x double], align 8
@_ZN4zoom14ZoomController12kUserDataKeyE = external constant i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4zoom8PageZoom17PresetZoomFactorsEd(%"class.std::__1::vector"* noalias sret, double) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN12_GLOBAL__N_116PresetZoomValuesENS_17PageZoomValueTypeEd(%"class.std::__1::vector"* sret %0, i32 0, double %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_116PresetZoomValuesENS_17PageZoomValueTypeEd(%"class.std::__1::vector"* noalias sret, i32, double) unnamed_addr #0 {
  %4 = alloca double, align 8
  store double %2, double* %4, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = load i64, i64* @_ZN4zoom22kPresetZoomFactorsSizeE, align 8
  %10 = bitcast double** %7 to i64*
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %98, label %13

13:                                               ; preds = %3
  %14 = icmp ugt i64 %9, 2305843009213693951
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void @abort() #8
  unreachable

16:                                               ; preds = %13
  %17 = shl i64 %9, 3
  %18 = tail call i8* @_Znwm(i64 %17) #9
  %19 = bitcast i8* %18 to double*
  %20 = getelementptr inbounds double, double* %19, i64 %9
  %21 = ptrtoint double* %20 to i64
  %22 = insertelement <2 x i8*> undef, i8* %18, i32 0
  %23 = shufflevector <2 x i8*> %22, <2 x i8*> undef, <2 x i32> zeroinitializer
  %24 = ptrtoint <2 x i8*> %23 to <2 x i64>
  %25 = bitcast %"class.std::__1::vector"* %0 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %25, align 8
  store i64 %21, i64* %10, align 8
  %26 = icmp eq i32 %1, 1
  %27 = bitcast double** %6 to i64*
  br label %33

28:                                               ; preds = %95
  %29 = load double*, double** %5, align 8
  %30 = load double*, double** %6, align 8
  %31 = and i8 %44, 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %98, label %131

33:                                               ; preds = %95, %16
  %34 = phi i8 [ 0, %16 ], [ %44, %95 ]
  %35 = phi i64 [ 0, %16 ], [ %96, %95 ]
  %36 = getelementptr inbounds [0 x double], [0 x double]* @_ZN4zoom18kPresetZoomFactorsE, i64 0, i64 %35
  %37 = load double, double* %36, align 8
  br i1 %26, label %38, label %40

38:                                               ; preds = %33
  %39 = tail call double @_ZN5blink25PageZoomFactorToZoomLevelEd(double %37) #7
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi double [ %39, %38 ], [ %37, %33 ]
  %42 = load double, double* %4, align 8
  %43 = tail call zeroext i1 @_ZN5blink19PageZoomValuesEqualEdd(double %41, double %42) #7
  %44 = select i1 %43, i8 1, i8 %34
  %45 = load double*, double** %6, align 8
  %46 = load double*, double** %7, align 8
  %47 = icmp eq double* %45, %46
  %48 = ptrtoint double* %46 to i64
  br i1 %47, label %52, label %49

49:                                               ; preds = %40
  store double %41, double* %45, align 8
  %50 = getelementptr inbounds double, double* %45, i64 1
  %51 = ptrtoint double* %50 to i64
  store i64 %51, i64* %27, align 8
  br label %95

52:                                               ; preds = %40
  %53 = ptrtoint double* %45 to i64
  %54 = load i64, i64* %11, align 8
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 3
  %57 = add nsw i64 %56, 1
  %58 = icmp ugt i64 %57, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %52
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #8
  unreachable

61:                                               ; preds = %52
  %62 = sub i64 %48, %54
  %63 = ashr exact i64 %62, 3
  %64 = icmp ult i64 %63, 1152921504606846975
  br i1 %64, label %65, label %73

65:                                               ; preds = %61
  %66 = ashr exact i64 %62, 2
  %67 = icmp ult i64 %66, %57
  %68 = select i1 %67, i64 %57, i64 %66
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %65
  %71 = icmp ugt i64 %68, 2305843009213693951
  br i1 %71, label %72, label %73

72:                                               ; preds = %70
  tail call void @abort() #8
  unreachable

73:                                               ; preds = %70, %61
  %74 = phi i64 [ %68, %70 ], [ 2305843009213693951, %61 ]
  %75 = shl i64 %74, 3
  %76 = tail call i8* @_Znwm(i64 %75) #9
  %77 = bitcast i8* %76 to double*
  br label %78

78:                                               ; preds = %73, %65
  %79 = phi i64 [ %74, %73 ], [ 0, %65 ]
  %80 = phi i8* [ %76, %73 ], [ null, %65 ]
  %81 = phi double* [ %77, %73 ], [ null, %65 ]
  %82 = getelementptr inbounds double, double* %81, i64 %56
  %83 = getelementptr inbounds double, double* %81, i64 %79
  %84 = ptrtoint double* %83 to i64
  store double %41, double* %82, align 8
  %85 = getelementptr inbounds double, double* %82, i64 1
  %86 = ptrtoint double* %85 to i64
  %87 = ptrtoint double* %81 to i64
  %88 = icmp sgt i64 %55, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %78
  %90 = inttoptr i64 %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %90, i64 %55, i1 false) #7
  br label %91

91:                                               ; preds = %89, %78
  store i64 %87, i64* %11, align 8
  store i64 %86, i64* %27, align 8
  store i64 %84, i64* %10, align 8
  %92 = icmp eq i64 %54, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %91
  %94 = inttoptr i64 %54 to i8*
  tail call void @_ZdlPv(i8* %94) #9
  br label %95

95:                                               ; preds = %49, %91, %93
  %96 = add nuw i64 %35, 1
  %97 = icmp eq i64 %96, %9
  br i1 %97, label %28, label %33

98:                                               ; preds = %3, %28
  %99 = phi double* [ %29, %28 ], [ null, %3 ]
  %100 = phi double* [ %30, %28 ], [ null, %3 ]
  %101 = getelementptr inbounds double, double* %100, i64 -1
  %102 = load double, double* %101, align 8
  %103 = load double, double* %99, align 8
  %104 = load double, double* %4, align 8
  %105 = fcmp ogt double %104, %103
  %106 = fcmp olt double %104, %102
  %107 = and i1 %105, %106
  br i1 %107, label %108, label %131

108:                                              ; preds = %98
  %109 = ptrtoint double* %99 to i64
  %110 = ptrtoint double* %100 to i64
  %111 = sub i64 %110, %109
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %128, label %113

113:                                              ; preds = %108
  %114 = ashr exact i64 %111, 3
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi double* [ %99, %113 ], [ %126, %115 ]
  %117 = phi i64 [ %114, %113 ], [ %125, %115 ]
  %118 = lshr i64 %117, 1
  %119 = getelementptr inbounds double, double* %116, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fcmp olt double %104, %120
  %122 = getelementptr inbounds double, double* %119, i64 1
  %123 = xor i64 %118, -1
  %124 = add i64 %117, %123
  %125 = select i1 %121, i64 %118, i64 %124
  %126 = select i1 %121, double* %116, double* %122
  %127 = icmp eq i64 %125, 0
  br i1 %127, label %128, label %115

128:                                              ; preds = %115, %108
  %129 = phi double* [ %99, %108 ], [ %126, %115 ]
  %130 = call double* @_ZNSt3__16vectorIdNS_9allocatorIdEEE6insertENS_11__wrap_iterIPKdEERS5_(%"class.std::__1::vector"* %0, double* %129, double* nonnull dereferenceable(8) %4)
  br label %131

131:                                              ; preds = %98, %128, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4zoom8PageZoom16PresetZoomLevelsEd(%"class.std::__1::vector"* noalias sret, double) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN12_GLOBAL__N_116PresetZoomValuesENS_17PageZoomValueTypeEd(%"class.std::__1::vector"* sret %0, i32 1, double %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4zoom8PageZoom4ZoomEPN7content11WebContentsENS1_8PageZoomE(%"class.content::WebContents"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.base::UserMetricsAction", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"struct.base::UserMetricsAction", align 8
  %6 = alloca %"struct.base::UserMetricsAction", align 8
  %7 = alloca %"struct.base::UserMetricsAction", align 8
  %8 = alloca %"struct.base::UserMetricsAction", align 8
  %9 = getelementptr inbounds %"class.content::WebContents", %"class.content::WebContents"* %0, i64 0, i32 1
  %10 = bitcast %"class.base::SupportsUserData.base"* %9 to %"class.base::SupportsUserData"*
  %11 = tail call %"class.base::SupportsUserData::Data"* @_ZNK4base16SupportsUserData11GetUserDataEPKv(%"class.base::SupportsUserData"* %10, i8* bitcast (i32* @_ZN4zoom14ZoomController12kUserDataKeyE to i8*)) #7
  %12 = icmp eq %"class.base::SupportsUserData::Data"* %11, null
  %13 = getelementptr inbounds %"class.base::SupportsUserData::Data", %"class.base::SupportsUserData::Data"* %11, i64 -2
  %14 = bitcast %"class.base::SupportsUserData::Data"* %13 to %"class.zoom::ZoomController"*
  %15 = icmp eq %"class.base::SupportsUserData::Data"* %13, null
  %16 = or i1 %12, %15
  br i1 %16, label %137, label %17

17:                                               ; preds = %2
  %18 = tail call double @_ZNK4zoom14ZoomController12GetZoomLevelEv(%"class.zoom::ZoomController"* nonnull %14) #7
  %19 = bitcast %"class.base::SupportsUserData::Data"* %13 to %"class.content::WebContentsObserver"*
  %20 = tail call %"class.content::WebContents"* @_ZNK7content19WebContentsObserver12web_contentsEv(%"class.content::WebContentsObserver"* %19) #7
  %21 = tail call %"class.content::HostZoomMap"* @_ZN7content11HostZoomMap17GetForWebContentsEPNS_11WebContentsE(%"class.content::WebContents"* %20) #7
  %22 = bitcast %"class.content::HostZoomMap"* %21 to double (%"class.content::HostZoomMap"*)***
  %23 = load double (%"class.content::HostZoomMap"*)**, double (%"class.content::HostZoomMap"*)*** %22, align 8
  %24 = getelementptr inbounds double (%"class.content::HostZoomMap"*)*, double (%"class.content::HostZoomMap"*)** %23, i64 13
  %25 = load double (%"class.content::HostZoomMap"*)*, double (%"class.content::HostZoomMap"*)** %24, align 8
  %26 = tail call double %25(%"class.content::HostZoomMap"* %21) #7
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %17
  %29 = tail call zeroext i1 @_ZN4zoom14ZoomController12SetZoomLevelEd(%"class.zoom::ZoomController"* nonnull %14, double %26) #7
  %30 = bitcast %"class.content::WebContents"* %0 to void (%"class.content::WebContents"*, float)***
  %31 = load void (%"class.content::WebContents"*, float)**, void (%"class.content::WebContents"*, float)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.content::WebContents"*, float)*, void (%"class.content::WebContents"*, float)** %31, i64 139
  %33 = load void (%"class.content::WebContents"*, float)*, void (%"class.content::WebContents"*, float)** %32, align 8
  tail call void %33(%"class.content::WebContents"* %0, float 1.000000e+00) #7
  %34 = bitcast %"struct.base::UserMetricsAction"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"struct.base::UserMetricsAction", %"struct.base::UserMetricsAction"* %3, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8** %35, align 8
  call void @_ZN4base12RecordActionERKNS_17UserMetricsActionE(%"struct.base::UserMetricsAction"* nonnull dereferenceable(8) %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #7
  br label %137

36:                                               ; preds = %17
  %37 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #7
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %40 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_116PresetZoomValuesENS_17PageZoomValueTypeEd(%"class.std::__1::vector"* nonnull sret %4, i32 1, double %26) #7
  %41 = icmp eq i32 %1, -1
  br i1 %41, label %42, label %85

42:                                               ; preds = %36
  %43 = load double*, double** %39, align 8
  %44 = bitcast %"class.std::__1::vector"* %4 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = ptrtoint double* %43 to i64
  %47 = sub i64 %46, %45
  %48 = icmp eq i64 %47, 0
  %49 = inttoptr i64 %45 to double*
  br i1 %48, label %66, label %50

50:                                               ; preds = %42
  %51 = ashr exact i64 %47, 3
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi double* [ %43, %50 ], [ %64, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %63, %52 ]
  %55 = lshr i64 %54, 1
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds double, double* %53, i64 -1
  %58 = getelementptr inbounds double, double* %57, i64 %56
  %59 = load double, double* %58, align 8
  %60 = fcmp ogt double %18, %59
  %61 = xor i64 %55, -1
  %62 = add i64 %54, %61
  %63 = select i1 %60, i64 %55, i64 %62
  %64 = select i1 %60, double* %53, double* %58
  %65 = icmp eq i64 %63, 0
  br i1 %65, label %66, label %52

66:                                               ; preds = %52, %42
  %67 = phi double* [ %43, %42 ], [ %64, %52 ]
  %68 = icmp eq double* %67, %49
  br i1 %68, label %77, label %69

69:                                               ; preds = %66, %75
  %70 = phi double* [ %71, %75 ], [ %67, %66 ]
  %71 = getelementptr inbounds double, double* %70, i64 -1
  %72 = load double, double* %71, align 8
  %73 = call zeroext i1 @_ZN5blink19PageZoomValuesEqualEdd(double %72, double %18) #7
  %74 = load double*, double** %38, align 8
  br i1 %73, label %75, label %77

75:                                               ; preds = %69
  %76 = icmp eq double* %71, %74
  br i1 %76, label %77, label %69

77:                                               ; preds = %75, %69, %66
  %78 = phi double* [ %67, %66 ], [ %71, %75 ], [ %70, %69 ]
  %79 = phi double* [ %49, %66 ], [ %74, %69 ], [ %74, %75 ]
  %80 = icmp eq double* %78, %79
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds double, double* %78, i64 -1
  %83 = load double, double* %82, align 8
  %84 = call zeroext i1 @_ZN4zoom14ZoomController12SetZoomLevelEd(%"class.zoom::ZoomController"* nonnull %14, double %83) #7
  br label %125

85:                                               ; preds = %36
  %86 = load double*, double** %38, align 8
  %87 = bitcast double** %39 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = ptrtoint double* %86 to i64
  %90 = sub i64 %88, %89
  %91 = icmp eq i64 %90, 0
  %92 = inttoptr i64 %88 to double*
  br i1 %91, label %108, label %93

93:                                               ; preds = %85
  %94 = ashr exact i64 %90, 3
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi double* [ %86, %93 ], [ %106, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %105, %95 ]
  %98 = lshr i64 %97, 1
  %99 = getelementptr inbounds double, double* %96, i64 %98
  %100 = load double, double* %99, align 8
  %101 = fcmp olt double %18, %100
  %102 = getelementptr inbounds double, double* %99, i64 1
  %103 = xor i64 %98, -1
  %104 = add i64 %97, %103
  %105 = select i1 %101, i64 %98, i64 %104
  %106 = select i1 %101, double* %96, double* %102
  %107 = icmp eq i64 %105, 0
  br i1 %107, label %108, label %95

108:                                              ; preds = %95, %85
  %109 = phi double* [ %86, %85 ], [ %106, %95 ]
  %110 = icmp eq double* %109, %92
  br i1 %110, label %125, label %111

111:                                              ; preds = %108, %115
  %112 = phi double* [ %116, %115 ], [ %109, %108 ]
  %113 = load double, double* %112, align 8
  %114 = call zeroext i1 @_ZN5blink19PageZoomValuesEqualEdd(double %113, double %18) #7
  br i1 %114, label %115, label %119

115:                                              ; preds = %111
  %116 = getelementptr inbounds double, double* %112, i64 1
  %117 = load double*, double** %39, align 8
  %118 = icmp eq double* %116, %117
  br i1 %118, label %125, label %111

119:                                              ; preds = %111
  %120 = load double*, double** %39, align 8
  %121 = icmp eq double* %112, %120
  br i1 %121, label %125, label %122

122:                                              ; preds = %119
  %123 = load double, double* %112, align 8
  %124 = call zeroext i1 @_ZN4zoom14ZoomController12SetZoomLevelEd(%"class.zoom::ZoomController"* nonnull %14, double %123) #7
  br label %125

125:                                              ; preds = %115, %119, %108, %77, %122, %81
  %126 = phi %"struct.base::UserMetricsAction"* [ %8, %122 ], [ %6, %81 ], [ %5, %77 ], [ %7, %108 ], [ %7, %119 ], [ %7, %115 ]
  %127 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), %122 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), %81 ], [ getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), %77 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), %108 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), %119 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), %115 ]
  %128 = bitcast %"struct.base::UserMetricsAction"* %126 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %128) #7
  %129 = getelementptr inbounds %"struct.base::UserMetricsAction", %"struct.base::UserMetricsAction"* %126, i64 0, i32 0
  store i8* %127, i8** %129, align 8
  call void @_ZN4base12RecordActionERKNS_17UserMetricsActionE(%"struct.base::UserMetricsAction"* nonnull dereferenceable(8) %126) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %128) #7
  %130 = load double*, double** %38, align 8
  %131 = icmp eq double* %130, null
  br i1 %131, label %136, label %132

132:                                              ; preds = %125
  %133 = ptrtoint double* %130 to i64
  %134 = bitcast double** %39 to i64*
  store i64 %133, i64* %134, align 8
  %135 = bitcast double* %130 to i8*
  call void @_ZdlPv(i8* %135) #9
  br label %136

136:                                              ; preds = %125, %132
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #7
  br label %137

137:                                              ; preds = %28, %136, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare double @_ZNK4zoom14ZoomController12GetZoomLevelEv(%"class.zoom::ZoomController"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4zoom14ZoomController12SetZoomLevelEd(%"class.zoom::ZoomController"*, double) local_unnamed_addr #2

declare void @_ZN4base12RecordActionERKNS_17UserMetricsActionE(%"struct.base::UserMetricsAction"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN5blink19PageZoomValuesEqualEdd(double, double) local_unnamed_addr #2

declare double @_ZN5blink25PageZoomFactorToZoomLevelEd(double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double* @_ZNSt3__16vectorIdNS_9allocatorIdEEE6insertENS_11__wrap_iterIPKdEERS5_(%"class.std::__1::vector"*, double*, double* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint double* %1 to i64
  %5 = bitcast double* %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load double*, double** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load double*, double** %9, align 8
  %11 = icmp ult double* %8, %10
  %12 = ptrtoint double* %8 to i64
  %13 = ptrtoint double* %10 to i64
  br i1 %11, label %14, label %172

14:                                               ; preds = %3
  %15 = icmp eq double* %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast double* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast double* %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds double, double* %1, i64 1
  %21 = ptrtoint double* %20 to i64
  %22 = bitcast double** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %439

23:                                               ; preds = %14
  %24 = getelementptr inbounds double, double* %1, i64 1
  %25 = ptrtoint double* %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds double, double* %1, i64 %27
  %29 = bitcast double** %7 to i64*
  %30 = icmp ult double* %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr double, double* %8, i64 %32
  %34 = bitcast double* %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi double* [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi double* [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr double, double* %8, i64 %45
  %47 = bitcast double* %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr double, double* %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr double, double* %1, i64 %55
  %57 = icmp ult double* %8, %56
  %58 = icmp ult double* %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr double, double* %8, i64 %61
  %63 = getelementptr double, double* %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr double, double* %8, i64 %72
  %75 = getelementptr double, double* %28, i64 %72
  %76 = bitcast double* %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !2
  %78 = getelementptr double, double* %75, i64 2
  %79 = bitcast double* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !2
  %81 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !5, !noalias !2
  %82 = getelementptr double, double* %74, i64 2
  %83 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !5, !noalias !2
  %84 = or i64 %72, 4
  %85 = getelementptr double, double* %8, i64 %84
  %86 = getelementptr double, double* %28, i64 %84
  %87 = bitcast double* %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !2
  %89 = getelementptr double, double* %86, i64 2
  %90 = bitcast double* %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !2
  %92 = bitcast double* %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !5, !noalias !2
  %93 = getelementptr double, double* %85, i64 2
  %94 = bitcast double* %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !5, !noalias !2
  %95 = or i64 %72, 8
  %96 = getelementptr double, double* %8, i64 %95
  %97 = getelementptr double, double* %28, i64 %95
  %98 = bitcast double* %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !2
  %100 = getelementptr double, double* %97, i64 2
  %101 = bitcast double* %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !2
  %103 = bitcast double* %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !5, !noalias !2
  %104 = getelementptr double, double* %96, i64 2
  %105 = bitcast double* %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !5, !noalias !2
  %106 = or i64 %72, 12
  %107 = getelementptr double, double* %8, i64 %106
  %108 = getelementptr double, double* %28, i64 %106
  %109 = bitcast double* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !2
  %111 = getelementptr double, double* %108, i64 2
  %112 = bitcast double* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !2
  %114 = bitcast double* %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !5, !noalias !2
  %115 = getelementptr double, double* %107, i64 2
  %116 = bitcast double* %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !5, !noalias !2
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !7

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr double, double* %8, i64 %124
  %127 = getelementptr double, double* %28, i64 %124
  %128 = bitcast double* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !2
  %130 = getelementptr double, double* %127, i64 2
  %131 = bitcast double* %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !2
  %133 = bitcast double* %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !5, !noalias !2
  %134 = getelementptr double, double* %126, i64 2
  %135 = bitcast double* %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !5, !noalias !2
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !9

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi double* [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint double* %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds double, double* %8, i64 %148
  %150 = bitcast double* %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #7
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi double* [ %158, %151 ], [ %42, %41 ]
  %153 = phi double* [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast double* %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast double* %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds double, double* %153, i64 1
  %158 = getelementptr inbounds double, double* %152, i64 1
  %159 = icmp ult double* %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !11

160:                                              ; preds = %144, %147
  %161 = icmp ugt double* %1, %2
  br i1 %161, label %167, label %162

162:                                              ; preds = %160
  %163 = load double*, double** %7, align 8
  %164 = icmp ugt double* %163, %2
  %165 = getelementptr inbounds double, double* %2, i64 1
  %166 = select i1 %164, double* %165, double* %2
  br label %167

167:                                              ; preds = %162, %160
  %168 = phi double* [ %2, %160 ], [ %166, %162 ]
  %169 = bitcast double* %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast double* %1 to i64*
  store i64 %170, i64* %171, align 8
  br label %439

172:                                              ; preds = %3
  %173 = bitcast double** %7 to i64*
  %174 = bitcast %"class.std::__1::vector"* %0 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %12, %175
  %177 = ashr exact i64 %176, 3
  %178 = add nsw i64 %177, 1
  %179 = icmp ugt i64 %178, 2305843009213693951
  br i1 %179, label %180, label %182

180:                                              ; preds = %172
  %181 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %181) #8
  unreachable

182:                                              ; preds = %172
  %183 = bitcast double** %9 to i64*
  %184 = sub i64 %13, %175
  %185 = ashr exact i64 %184, 3
  %186 = icmp ult i64 %185, 1152921504606846975
  br i1 %186, label %190, label %187

187:                                              ; preds = %182
  %188 = sub i64 %4, %175
  %189 = ashr exact i64 %188, 3
  br label %200

190:                                              ; preds = %182
  %191 = ashr exact i64 %184, 2
  %192 = icmp ult i64 %191, %178
  %193 = select i1 %192, i64 %178, i64 %191
  %194 = sub i64 %4, %175
  %195 = ashr exact i64 %194, 3
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %206, label %197

197:                                              ; preds = %190
  %198 = icmp ugt i64 %193, 2305843009213693951
  br i1 %198, label %199, label %200

199:                                              ; preds = %197
  tail call void @abort() #8
  unreachable

200:                                              ; preds = %187, %197
  %201 = phi i64 [ 2305843009213693951, %187 ], [ %193, %197 ]
  %202 = phi i64 [ %189, %187 ], [ %195, %197 ]
  %203 = shl i64 %201, 3
  %204 = tail call i8* @_Znwm(i64 %203) #9
  %205 = bitcast i8* %204 to double*
  br label %206

206:                                              ; preds = %190, %200
  %207 = phi i64 [ %202, %200 ], [ %195, %190 ]
  %208 = phi i64 [ %201, %200 ], [ 0, %190 ]
  %209 = phi i8* [ %204, %200 ], [ null, %190 ]
  %210 = phi double* [ %205, %200 ], [ null, %190 ]
  %211 = getelementptr inbounds double, double* %210, i64 %207
  %212 = getelementptr inbounds double, double* %210, i64 %208
  %213 = ptrtoint double* %212 to i64
  %214 = icmp eq i64 %207, %208
  %215 = bitcast double* %211 to i64*
  br i1 %214, label %216, label %240

216:                                              ; preds = %206
  %217 = icmp sgt i64 %207, 0
  br i1 %217, label %218, label %223

218:                                              ; preds = %216
  %219 = add nuw nsw i64 %207, 1
  %220 = sdiv i64 %219, -2
  %221 = getelementptr inbounds double, double* %211, i64 %220
  %222 = bitcast double* %221 to i64*
  br label %240

223:                                              ; preds = %216
  %224 = shl nsw i64 %207, 1
  %225 = icmp eq i64 %207, 0
  %226 = select i1 %225, i64 1, i64 %224
  %227 = icmp ugt i64 %226, 2305843009213693951
  br i1 %227, label %228, label %229

228:                                              ; preds = %223
  tail call void @abort() #8
  unreachable

229:                                              ; preds = %223
  %230 = lshr i64 %226, 2
  %231 = shl i64 %226, 3
  %232 = tail call i8* @_Znwm(i64 %231) #9
  %233 = bitcast i8* %232 to double*
  %234 = getelementptr inbounds double, double* %233, i64 %230
  %235 = getelementptr inbounds double, double* %233, i64 %226
  %236 = ptrtoint double* %235 to i64
  %237 = icmp eq double* %210, null
  %238 = bitcast double* %234 to i64*
  br i1 %237, label %240, label %239

239:                                              ; preds = %229
  tail call void @_ZdlPv(i8* %209) #9
  br label %240

240:                                              ; preds = %206, %218, %229, %239
  %241 = phi double* [ %221, %218 ], [ %234, %229 ], [ %234, %239 ], [ %211, %206 ]
  %242 = phi i64 [ %213, %218 ], [ %236, %229 ], [ %236, %239 ], [ %213, %206 ]
  %243 = phi i64* [ %222, %218 ], [ %238, %229 ], [ %238, %239 ], [ %215, %206 ]
  %244 = bitcast double* %2 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %243, align 8
  %246 = getelementptr inbounds double, double* %241, i64 1
  %247 = load double*, double** %6, align 8
  %248 = ptrtoint double* %247 to i64
  %249 = sub i64 %4, %248
  %250 = ashr exact i64 %249, 3
  %251 = sub nsw i64 0, %250
  %252 = getelementptr inbounds double, double* %241, i64 %251
  %253 = ptrtoint double* %252 to i64
  %254 = icmp sgt i64 %249, 0
  br i1 %254, label %255, label %258

255:                                              ; preds = %240
  %256 = bitcast double* %252 to i8*
  %257 = bitcast double* %247 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %257, i64 %249, i1 false) #7
  br label %258

258:                                              ; preds = %255, %240
  %259 = load double*, double** %7, align 8
  %260 = icmp eq double* %259, %1
  br i1 %260, label %432, label %261

261:                                              ; preds = %258
  %262 = getelementptr double, double* %259, i64 -1
  %263 = ptrtoint double* %262 to i64
  %264 = sub i64 %263, %4
  %265 = lshr i64 %264, 3
  %266 = add nuw nsw i64 %265, 1
  %267 = icmp ult i64 %266, 4
  br i1 %267, label %361, label %268

268:                                              ; preds = %261
  %269 = getelementptr double, double* %259, i64 -1
  %270 = ptrtoint double* %269 to i64
  %271 = sub i64 %270, %4
  %272 = lshr i64 %271, 3
  %273 = add nuw nsw i64 %272, 2
  %274 = getelementptr double, double* %241, i64 %273
  %275 = add nuw nsw i64 %272, 1
  %276 = getelementptr double, double* %1, i64 %275
  %277 = icmp ult double* %246, %276
  %278 = icmp ugt double* %274, %1
  %279 = and i1 %277, %278
  br i1 %279, label %361, label %280

280:                                              ; preds = %268
  %281 = and i64 %266, 4611686018427387900
  %282 = getelementptr double, double* %246, i64 %281
  %283 = getelementptr double, double* %1, i64 %281
  %284 = add nsw i64 %281, -4
  %285 = lshr exact i64 %284, 2
  %286 = add nuw nsw i64 %285, 1
  %287 = and i64 %286, 3
  %288 = icmp ult i64 %284, 12
  br i1 %288, label %340, label %289

289:                                              ; preds = %280
  %290 = sub nsw i64 %286, %287
  br label %291

291:                                              ; preds = %291, %289
  %292 = phi i64 [ 0, %289 ], [ %337, %291 ]
  %293 = phi i64 [ %290, %289 ], [ %338, %291 ]
  %294 = getelementptr double, double* %246, i64 %292
  %295 = getelementptr double, double* %1, i64 %292
  %296 = bitcast double* %295 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %296, align 8, !alias.scope !12
  %298 = getelementptr double, double* %295, i64 2
  %299 = bitcast double* %298 to <2 x i64>*
  %300 = load <2 x i64>, <2 x i64>* %299, align 8, !alias.scope !12
  %301 = bitcast double* %294 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %301, align 8, !alias.scope !15, !noalias !12
  %302 = getelementptr double, double* %294, i64 2
  %303 = bitcast double* %302 to <2 x i64>*
  store <2 x i64> %300, <2 x i64>* %303, align 8, !alias.scope !15, !noalias !12
  %304 = or i64 %292, 4
  %305 = getelementptr double, double* %246, i64 %304
  %306 = getelementptr double, double* %1, i64 %304
  %307 = bitcast double* %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 8, !alias.scope !12
  %309 = getelementptr double, double* %306, i64 2
  %310 = bitcast double* %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 8, !alias.scope !12
  %312 = bitcast double* %305 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %312, align 8, !alias.scope !15, !noalias !12
  %313 = getelementptr double, double* %305, i64 2
  %314 = bitcast double* %313 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %314, align 8, !alias.scope !15, !noalias !12
  %315 = or i64 %292, 8
  %316 = getelementptr double, double* %246, i64 %315
  %317 = getelementptr double, double* %1, i64 %315
  %318 = bitcast double* %317 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %318, align 8, !alias.scope !12
  %320 = getelementptr double, double* %317, i64 2
  %321 = bitcast double* %320 to <2 x i64>*
  %322 = load <2 x i64>, <2 x i64>* %321, align 8, !alias.scope !12
  %323 = bitcast double* %316 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %323, align 8, !alias.scope !15, !noalias !12
  %324 = getelementptr double, double* %316, i64 2
  %325 = bitcast double* %324 to <2 x i64>*
  store <2 x i64> %322, <2 x i64>* %325, align 8, !alias.scope !15, !noalias !12
  %326 = or i64 %292, 12
  %327 = getelementptr double, double* %246, i64 %326
  %328 = getelementptr double, double* %1, i64 %326
  %329 = bitcast double* %328 to <2 x i64>*
  %330 = load <2 x i64>, <2 x i64>* %329, align 8, !alias.scope !12
  %331 = getelementptr double, double* %328, i64 2
  %332 = bitcast double* %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 8, !alias.scope !12
  %334 = bitcast double* %327 to <2 x i64>*
  store <2 x i64> %330, <2 x i64>* %334, align 8, !alias.scope !15, !noalias !12
  %335 = getelementptr double, double* %327, i64 2
  %336 = bitcast double* %335 to <2 x i64>*
  store <2 x i64> %333, <2 x i64>* %336, align 8, !alias.scope !15, !noalias !12
  %337 = add i64 %292, 16
  %338 = add i64 %293, -4
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %291, !llvm.loop !17

340:                                              ; preds = %291, %280
  %341 = phi i64 [ 0, %280 ], [ %337, %291 ]
  %342 = icmp eq i64 %287, 0
  br i1 %342, label %359, label %343

343:                                              ; preds = %340, %343
  %344 = phi i64 [ %356, %343 ], [ %341, %340 ]
  %345 = phi i64 [ %357, %343 ], [ %287, %340 ]
  %346 = getelementptr double, double* %246, i64 %344
  %347 = getelementptr double, double* %1, i64 %344
  %348 = bitcast double* %347 to <2 x i64>*
  %349 = load <2 x i64>, <2 x i64>* %348, align 8, !alias.scope !12
  %350 = getelementptr double, double* %347, i64 2
  %351 = bitcast double* %350 to <2 x i64>*
  %352 = load <2 x i64>, <2 x i64>* %351, align 8, !alias.scope !12
  %353 = bitcast double* %346 to <2 x i64>*
  store <2 x i64> %349, <2 x i64>* %353, align 8, !alias.scope !15, !noalias !12
  %354 = getelementptr double, double* %346, i64 2
  %355 = bitcast double* %354 to <2 x i64>*
  store <2 x i64> %352, <2 x i64>* %355, align 8, !alias.scope !15, !noalias !12
  %356 = add i64 %344, 4
  %357 = add i64 %345, -1
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %359, label %343, !llvm.loop !18

359:                                              ; preds = %343, %340
  %360 = icmp eq i64 %266, %281
  br i1 %360, label %432, label %361

361:                                              ; preds = %359, %268, %261
  %362 = phi double* [ %246, %268 ], [ %246, %261 ], [ %282, %359 ]
  %363 = phi double* [ %1, %268 ], [ %1, %261 ], [ %283, %359 ]
  %364 = ptrtoint double* %363 to i64
  %365 = getelementptr double, double* %259, i64 -1
  %366 = ptrtoint double* %365 to i64
  %367 = sub i64 %366, %364
  %368 = lshr i64 %367, 3
  %369 = add nuw nsw i64 %368, 1
  %370 = and i64 %369, 7
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %383, label %372

372:                                              ; preds = %361, %372
  %373 = phi double* [ %380, %372 ], [ %362, %361 ]
  %374 = phi double* [ %379, %372 ], [ %363, %361 ]
  %375 = phi i64 [ %381, %372 ], [ %370, %361 ]
  %376 = bitcast double* %373 to i64*
  %377 = bitcast double* %374 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %376, align 8
  %379 = getelementptr inbounds double, double* %374, i64 1
  %380 = getelementptr inbounds double, double* %373, i64 1
  %381 = add i64 %375, -1
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %372, !llvm.loop !19

383:                                              ; preds = %372, %361
  %384 = phi double* [ undef, %361 ], [ %380, %372 ]
  %385 = phi double* [ %362, %361 ], [ %380, %372 ]
  %386 = phi double* [ %363, %361 ], [ %379, %372 ]
  %387 = icmp ult i64 %367, 56
  br i1 %387, label %432, label %388

388:                                              ; preds = %383, %388
  %389 = phi double* [ %430, %388 ], [ %385, %383 ]
  %390 = phi double* [ %429, %388 ], [ %386, %383 ]
  %391 = bitcast double* %389 to i64*
  %392 = bitcast double* %390 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %391, align 8
  %394 = getelementptr inbounds double, double* %390, i64 1
  %395 = getelementptr inbounds double, double* %389, i64 1
  %396 = bitcast double* %395 to i64*
  %397 = bitcast double* %394 to i64*
  %398 = load i64, i64* %397, align 8
  store i64 %398, i64* %396, align 8
  %399 = getelementptr inbounds double, double* %390, i64 2
  %400 = getelementptr inbounds double, double* %389, i64 2
  %401 = bitcast double* %400 to i64*
  %402 = bitcast double* %399 to i64*
  %403 = load i64, i64* %402, align 8
  store i64 %403, i64* %401, align 8
  %404 = getelementptr inbounds double, double* %390, i64 3
  %405 = getelementptr inbounds double, double* %389, i64 3
  %406 = bitcast double* %405 to i64*
  %407 = bitcast double* %404 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %406, align 8
  %409 = getelementptr inbounds double, double* %390, i64 4
  %410 = getelementptr inbounds double, double* %389, i64 4
  %411 = bitcast double* %410 to i64*
  %412 = bitcast double* %409 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %411, align 8
  %414 = getelementptr inbounds double, double* %390, i64 5
  %415 = getelementptr inbounds double, double* %389, i64 5
  %416 = bitcast double* %415 to i64*
  %417 = bitcast double* %414 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %416, align 8
  %419 = getelementptr inbounds double, double* %390, i64 6
  %420 = getelementptr inbounds double, double* %389, i64 6
  %421 = bitcast double* %420 to i64*
  %422 = bitcast double* %419 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %421, align 8
  %424 = getelementptr inbounds double, double* %390, i64 7
  %425 = getelementptr inbounds double, double* %389, i64 7
  %426 = bitcast double* %425 to i64*
  %427 = bitcast double* %424 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %426, align 8
  %429 = getelementptr inbounds double, double* %390, i64 8
  %430 = getelementptr inbounds double, double* %389, i64 8
  %431 = icmp eq double* %429, %259
  br i1 %431, label %432, label %388, !llvm.loop !20

432:                                              ; preds = %383, %388, %359, %258
  %433 = phi double* [ %246, %258 ], [ %282, %359 ], [ %384, %383 ], [ %430, %388 ]
  %434 = ptrtoint double* %433 to i64
  %435 = load double*, double** %6, align 8
  store i64 %253, i64* %174, align 8
  store i64 %434, i64* %173, align 8
  store i64 %242, i64* %183, align 8
  %436 = icmp eq double* %435, null
  br i1 %436, label %439, label %437

437:                                              ; preds = %432
  %438 = bitcast double* %435 to i8*
  tail call void @_ZdlPv(i8* %438) #9
  br label %439

439:                                              ; preds = %437, %432, %16, %167
  %440 = phi double* [ %1, %16 ], [ %1, %167 ], [ %241, %432 ], [ %241, %437 ]
  ret double* %440
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.content::HostZoomMap"* @_ZN7content11HostZoomMap17GetForWebContentsEPNS_11WebContentsE(%"class.content::WebContents"*) local_unnamed_addr #2

declare %"class.content::WebContents"* @_ZNK7content19WebContentsObserver12web_contentsEv(%"class.content::WebContentsObserver"*) local_unnamed_addr #2

declare %"class.base::SupportsUserData::Data"* @_ZNK4base16SupportsUserData11GetUserDataEPKv(%"class.base::SupportsUserData"*, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
