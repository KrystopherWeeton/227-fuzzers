; ModuleID = '../../third_party/pdfium/core/fxcodec/flate/flatemodule.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/flate/flatemodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::ScanlineDecoder" = type { i32 (...)**, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::unique_ptr.8"* }
%"class.fxcodec::(anonymous namespace)::CLZWDecoder" = type <{ %"class.pdfium::span", %"class.std::__1::unique_ptr.8", i32, i32, i32, i32, [4000 x i8], i8, i8, [2 x i8], i32, [5021 x i32], [4 x i8] }>
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder" = type { %"class.fxcodec::ScanlineDecoder", %"class.std::__1::unique_ptr.4", %"class.pdfium::span", %"class.std::__1::unique_ptr.8" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %struct.z_stream_s* }
%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder" = type { %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", i8, i32, i32, i32, i32, i64, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }

$_ZNSt3__16vectorINS_10unique_ptrIh13FxFreeDeleterEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

@.str = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderD2Ev to i8*), i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderD0Ev to i8*), i8* bitcast (i32 (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder12GetSrcOffsetEv to i8*), i8* bitcast (i1 (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder8v_RewindEv to i8*), i8* bitcast (i8* (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder13v_GetNextLineEv to i8*)] }, align 8
@_ZTVN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderD2Ev to i8*), i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderD0Ev to i8*), i8* bitcast (i32 (%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder12GetSrcOffsetEv to i8*), i8* bitcast (i1 (%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoder8v_RewindEv to i8*), i8* bitcast (i8* (%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoder13v_GetNextLineEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::ScanlineDecoder"* @_ZN7fxcodec11FlateModule13CreateDecoderEN6pdfium4spanIKhEEiiiiiiii(%"class.pdfium::span"* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.pdfium::span", align 8
  %11 = alloca %"class.pdfium::span", align 8
  %12 = icmp sgt i32 %5, 9
  %13 = icmp eq i32 %5, 2
  %14 = zext i1 %13 to i8
  %15 = select i1 %12, i8 2, i8 %14
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %41

17:                                               ; preds = %9
  %18 = bitcast %"class.pdfium::span"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18)
  %19 = tail call i8* @_Znwm(i64 80) #13
  %20 = bitcast %"class.pdfium::span"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %20, i64 16, i1 false) #14
  %21 = tail call i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32 %4, i32 %3, i32 %1) #14
  %22 = trunc i64 %21 to i8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %17
  tail call void @llvm.trap() #14
  unreachable

25:                                               ; preds = %17
  %26 = lshr i64 %21, 32
  %27 = trunc i64 %26 to i32
  %28 = bitcast i8* %19 to %"class.fxcodec::ScanlineDecoder"*
  tail call void @_ZN7fxcodec15ScanlineDecoderC2Eiiiiiij(%"class.fxcodec::ScanlineDecoder"* nonnull %28, i32 %1, i32 %2, i32 %1, i32 %2, i32 %3, i32 %4, i32 %27) #14
  %29 = bitcast i8* %19 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds i8, i8* %19, i64 48
  %31 = bitcast i8* %30 to i64*
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds i8, i8* %19, i64 56
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %18, i64 16, i1 false) #14
  %33 = getelementptr inbounds i8, i8* %19, i64 72
  %34 = getelementptr inbounds i8, i8* %19, i64 32
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 8
  %37 = zext i32 %36 to i64
  %38 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %37, i64 1) #14
  %39 = ptrtoint i8* %38 to i64
  %40 = bitcast i8* %33 to i64*
  store i64 %39, i64* %40, align 8
  br label %159

41:                                               ; preds = %9
  %42 = tail call i8* @_Znwm(i64 184) #13
  %43 = bitcast %"class.pdfium::span"* %0 to i8*
  %44 = bitcast %"class.pdfium::span"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* align 8 %43, i64 16, i1 false)
  %45 = tail call i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32 %4, i32 %3, i32 %1) #14
  %46 = trunc i64 %45 to i8
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %41
  tail call void @llvm.trap() #14
  unreachable

49:                                               ; preds = %41
  %50 = lshr i64 %45, 32
  %51 = trunc i64 %50 to i32
  %52 = bitcast i8* %42 to %"class.fxcodec::ScanlineDecoder"*
  tail call void @_ZN7fxcodec15ScanlineDecoderC2Eiiiiiij(%"class.fxcodec::ScanlineDecoder"* nonnull %52, i32 %1, i32 %2, i32 %1, i32 %2, i32 %3, i32 %4, i32 %51) #14
  %53 = bitcast i8* %42 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %54 = getelementptr inbounds i8, i8* %42, i64 48
  %55 = bitcast i8* %54 to i64*
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds i8, i8* %42, i64 56
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* nonnull align 8 %44, i64 16, i1 false) #14
  %57 = getelementptr inbounds i8, i8* %42, i64 72
  %58 = getelementptr inbounds i8, i8* %42, i64 32
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 8
  %61 = zext i32 %60 to i64
  %62 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %61, i64 1) #14
  %63 = ptrtoint i8* %62 to i64
  %64 = bitcast i8* %57 to i64*
  store i64 %63, i64* %64, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %65 = getelementptr inbounds i8, i8* %42, i64 80
  store i8 %15, i8* %65, align 8
  %66 = getelementptr inbounds i8, i8* %42, i64 84
  %67 = bitcast i8* %66 to i32*
  %68 = getelementptr inbounds i8, i8* %42, i64 88
  %69 = bitcast i8* %68 to i32*
  %70 = getelementptr inbounds i8, i8* %42, i64 92
  %71 = bitcast i8* %70 to i32*
  %72 = getelementptr inbounds i8, i8* %42, i64 96
  %73 = bitcast i8* %72 to i32*
  %74 = getelementptr inbounds i8, i8* %42, i64 104
  %75 = getelementptr inbounds i8, i8* %42, i64 112
  %76 = bitcast i8* %75 to %"class.std::__1::vector"*
  %77 = getelementptr inbounds i8, i8* %42, i64 136
  %78 = bitcast i8* %77 to %"class.std::__1::vector"*
  %79 = getelementptr inbounds i8, i8* %42, i64 160
  %80 = bitcast i8* %79 to %"class.std::__1::vector"*
  %81 = mul nsw i32 %7, %6
  %82 = mul nsw i32 %81, %8
  %83 = icmp eq i32 %82, 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %66, i8 0, i64 16, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 80, i1 false) #14
  br i1 %83, label %84, label %94

84:                                               ; preds = %49
  %85 = getelementptr inbounds i8, i8* %42, i64 28
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds i8, i8* %42, i64 24
  %89 = bitcast i8* %88 to i32*
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds i8, i8* %42, i64 8
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 8
  br label %94

94:                                               ; preds = %84, %49
  %95 = phi i32 [ %90, %84 ], [ %6, %49 ]
  %96 = phi i32 [ %87, %84 ], [ %7, %49 ]
  %97 = phi i32 [ %93, %84 ], [ %8, %49 ]
  store i32 %95, i32* %67, align 4
  store i32 %96, i32* %69, align 8
  store i32 %97, i32* %71, align 4
  %98 = tail call i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32 %96, i32 %95, i32 %97) #14
  %99 = trunc i64 %98 to i8
  %100 = lshr i64 %98, 32
  %101 = icmp eq i8 %99, 0
  br i1 %101, label %102, label %103, !prof !2

102:                                              ; preds = %94
  tail call void @llvm.trap() #14
  unreachable

103:                                              ; preds = %94
  %104 = trunc i64 %100 to i32
  store i32 %104, i32* %73, align 8
  %105 = getelementptr inbounds i8, i8* %42, i64 120
  %106 = bitcast i8* %105 to i8**
  %107 = bitcast i8* %105 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i8* %75 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %108, %110
  %112 = icmp ugt i64 %100, %111
  %113 = inttoptr i64 %110 to i8*
  br i1 %112, label %114, label %117

114:                                              ; preds = %103
  %115 = sub i64 %100, %111
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %76, i64 %115) #14
  %116 = load i32, i32* %73, align 8
  br label %121

117:                                              ; preds = %103
  %118 = icmp ult i64 %100, %111
  br i1 %118, label %119, label %121

119:                                              ; preds = %117
  %120 = getelementptr inbounds i8, i8* %113, i64 %100
  store i8* %120, i8** %106, align 8
  br label %121

121:                                              ; preds = %119, %117, %114
  %122 = phi i32 [ %116, %114 ], [ %104, %117 ], [ %104, %119 ]
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %42, i64 144
  %125 = bitcast i8* %124 to i8**
  %126 = bitcast i8* %124 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast i8* %77 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = sub i64 %127, %129
  %131 = icmp ult i64 %130, %123
  %132 = inttoptr i64 %129 to i8*
  br i1 %131, label %133, label %136

133:                                              ; preds = %121
  %134 = sub i64 %123, %130
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %78, i64 %134) #14
  %135 = load i32, i32* %73, align 8
  br label %140

136:                                              ; preds = %121
  %137 = icmp ugt i64 %130, %123
  br i1 %137, label %138, label %140

138:                                              ; preds = %136
  %139 = getelementptr inbounds i8, i8* %132, i64 %123
  store i8* %139, i8** %125, align 8
  br label %140

140:                                              ; preds = %138, %136, %133
  %141 = phi i32 [ %135, %133 ], [ %122, %136 ], [ %122, %138 ]
  %142 = add i32 %141, 1
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %42, i64 168
  %145 = bitcast i8* %144 to i8**
  %146 = bitcast i8* %144 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast i8* %79 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %147, %149
  %151 = icmp ult i64 %150, %143
  %152 = inttoptr i64 %149 to i8*
  br i1 %151, label %153, label %155

153:                                              ; preds = %140
  %154 = sub i64 %143, %150
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %80, i64 %154) #14
  br label %159

155:                                              ; preds = %140
  %156 = icmp ugt i64 %150, %143
  br i1 %156, label %157, label %159

157:                                              ; preds = %155
  %158 = getelementptr inbounds i8, i8* %152, i64 %143
  store i8* %158, i8** %145, align 8
  br label %159

159:                                              ; preds = %153, %155, %157, %25
  %160 = phi i8* [ %18, %25 ], [ %44, %157 ], [ %44, %155 ], [ %44, %153 ]
  %161 = phi %"class.fxcodec::ScanlineDecoder"* [ %28, %25 ], [ %52, %157 ], [ %52, %155 ], [ %52, %153 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %160)
  ret %"class.fxcodec::ScanlineDecoder"* %161
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec11FlateModule16FlateOrLZWDecodeEbN6pdfium4spanIKhEEbiiiijPNSt3__110unique_ptrIh13FxFreeDeleterEEPj(i1 zeroext, %"class.pdfium::span"* nocapture readonly, i1 zeroext, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr.8"* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %11 = alloca %"class.std::__1::vector.29", align 8
  %12 = alloca %"class.std::__1::unique_ptr.8", align 8
  %13 = zext i1 %2 to i8
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %8, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %10
  tail call void @_Z7FX_FreePv(i8* nonnull %15) #14
  br label %18

18:                                               ; preds = %10, %17
  %19 = icmp sgt i32 %3, 9
  %20 = icmp eq i32 %3, 2
  %21 = zext i1 %20 to i8
  %22 = select i1 %19, i8 2, i8 %21
  br i1 %0, label %23, label %384

23:                                               ; preds = %18
  %24 = tail call i8* @_Znwm(i64 24136) #13
  %25 = bitcast i8* %24 to %"class.fxcodec::(anonymous namespace)::CLZWDecoder"*
  %26 = bitcast %"class.pdfium::span"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %26, i64 16, i1 false)
  %27 = getelementptr inbounds i8, i8* %24, i64 16
  %28 = getelementptr inbounds i8, i8* %24, i64 4040
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 24, i1 false) #14
  store i8 %13, i8* %28, align 8
  %29 = getelementptr inbounds i8, i8* %24, i64 4041
  store i8 9, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %24, i64 4044
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %24, i64 28
  %33 = bitcast i8* %32 to i32*
  store i32 512, i32* %33, align 4
  %34 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 512, i64 1) #14
  %35 = bitcast i8* %27 to i8**
  %36 = load i8*, i8** %35, align 8
  store i8* %34, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %23
  tail call void @_Z7FX_FreePv(i8* nonnull %36) #14
  br label %39

39:                                               ; preds = %38, %23
  %40 = getelementptr inbounds i8, i8* %24, i64 24
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 8
  %43 = load i8, i8* %29, align 1
  %44 = zext i8 %43 to i32
  %45 = add i32 %42, %44
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %24, i64 8
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = shl i64 %49, 3
  %51 = icmp ult i64 %50, %46
  br i1 %51, label %360, label %52

52:                                               ; preds = %39
  %53 = bitcast i8* %24 to i8**
  %54 = getelementptr inbounds i8, i8* %24, i64 36
  %55 = bitcast i8* %54 to i32*
  %56 = getelementptr inbounds i8, i8* %24, i64 40
  %57 = getelementptr inbounds i8, i8* %24, i64 32
  %58 = bitcast i8* %57 to i32*
  br label %59

59:                                               ; preds = %349, %52
  %60 = phi i64 [ %49, %52 ], [ %357, %349 ]
  %61 = phi i32 [ %45, %52 ], [ %355, %349 ]
  %62 = phi i8 [ %43, %52 ], [ %353, %349 ]
  %63 = phi i32 [ %42, %52 ], [ %352, %349 ]
  %64 = phi i8 [ 0, %52 ], [ %351, %349 ]
  %65 = phi i32 [ -1, %52 ], [ %350, %349 ]
  %66 = lshr i32 %63, 3
  %67 = and i32 %63, 7
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %87, label %69

69:                                               ; preds = %59
  %70 = sub nuw nsw i32 8, %67
  %71 = trunc i32 %70 to i8
  %72 = sub i8 %62, %71
  %73 = zext i32 %66 to i64
  %74 = icmp ugt i64 %60, %73
  br i1 %74, label %76, label %75, !prof !3

75:                                               ; preds = %69
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !5
  unreachable

76:                                               ; preds = %69
  %77 = add nuw nsw i32 %66, 1
  %78 = load i8*, i8** %53, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %73
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl nsw i32 -1, %70
  %83 = xor i32 %82, -1
  %84 = and i32 %81, %83
  %85 = zext i8 %72 to i32
  %86 = shl i32 %84, %85
  br label %87

87:                                               ; preds = %76, %59
  %88 = phi i32 [ %77, %76 ], [ %66, %59 ]
  %89 = phi i8 [ %72, %76 ], [ %62, %59 ]
  %90 = phi i32 [ %86, %76 ], [ 0, %59 ]
  %91 = icmp ult i8 %89, 8
  br i1 %91, label %92, label %100

92:                                               ; preds = %87
  %93 = sext i32 %88 to i64
  %94 = icmp ugt i64 %60, %93
  br i1 %94, label %96, label %95, !prof !3

95:                                               ; preds = %92
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !5
  unreachable

96:                                               ; preds = %92
  %97 = zext i8 %89 to i32
  %98 = load i8*, i8** %53, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %93
  br label %121

100:                                              ; preds = %87
  %101 = add i8 %89, -8
  %102 = sext i32 %88 to i64
  %103 = icmp ugt i64 %60, %102
  br i1 %103, label %105, label %104, !prof !3

104:                                              ; preds = %100
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !5
  unreachable

105:                                              ; preds = %100
  %106 = load i8*, i8** %53, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %102
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = zext i8 %101 to i32
  %111 = shl i32 %109, %110
  %112 = or i32 %111, %90
  %113 = icmp eq i8 %101, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %105
  %115 = add nuw nsw i32 %88, 1
  %116 = sext i32 %115 to i64
  %117 = icmp ugt i64 %60, %116
  br i1 %117, label %119, label %118, !prof !3

118:                                              ; preds = %114
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !5
  unreachable

119:                                              ; preds = %114
  %120 = getelementptr inbounds i8, i8* %106, i64 %116
  br label %121

121:                                              ; preds = %96, %119
  %122 = phi i8* [ %120, %119 ], [ %99, %96 ]
  %123 = phi i32 [ %110, %119 ], [ %97, %96 ]
  %124 = phi i32 [ %112, %119 ], [ %90, %96 ]
  %125 = load i8, i8* %122, align 1
  %126 = zext i8 %125 to i32
  %127 = sub nsw i32 8, %123
  %128 = lshr i32 %126, %127
  %129 = or i32 %128, %124
  br label %130

130:                                              ; preds = %121, %105
  %131 = phi i32 [ %112, %105 ], [ %129, %121 ]
  store i32 %61, i32* %41, align 8
  %132 = icmp ult i32 %131, 256
  br i1 %132, label %133, label %191

133:                                              ; preds = %130
  %134 = load i32, i32* %58, align 8
  %135 = load i32, i32* %33, align 4
  %136 = icmp ult i32 %134, %135
  br i1 %136, label %137, label %139

137:                                              ; preds = %133
  %138 = load i8*, i8** %35, align 8
  br label %165

139:                                              ; preds = %133
  %140 = sub i32 %134, %135
  %141 = add i32 %140, 1
  %142 = lshr i32 %135, 1
  %143 = icmp ult i32 %142, %141
  %144 = select i1 %143, i32 %141, i32 %142
  %145 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %144, i32 %135) #14
  %146 = extractvalue { i32, i1 } %145, 1
  %147 = extractvalue { i32, i1 } %145, 0
  br i1 %146, label %148, label %151

148:                                              ; preds = %139
  %149 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %150 = icmp eq i8* %149, null
  br i1 %150, label %383, label %157

151:                                              ; preds = %139
  store i32 %147, i32* %33, align 4
  %152 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %153 = zext i32 %147 to i64
  %154 = tail call i8* @_ZN6pdfium8internal12ReallocOrDieEPvmm(i8* %152, i64 %153, i64 1) #14
  %155 = load i8*, i8** %35, align 8
  store i8* %154, i8** %35, align 8
  %156 = icmp eq i8* %155, null
  br i1 %156, label %160, label %157

157:                                              ; preds = %151, %148
  %158 = phi i8* [ %149, %148 ], [ %155, %151 ]
  tail call void @_Z7FX_FreePv(i8* nonnull %158) #14
  %159 = load i8*, i8** %35, align 8
  br label %160

160:                                              ; preds = %157, %151
  %161 = phi i8* [ %159, %157 ], [ %154, %151 ]
  %162 = icmp eq i8* %161, null
  br i1 %162, label %379, label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %58, align 8
  br label %165

165:                                              ; preds = %163, %137
  %166 = phi i32 [ %134, %137 ], [ %164, %163 ]
  %167 = phi i8* [ %138, %137 ], [ %161, %163 ]
  %168 = trunc i32 %131 to i8
  %169 = zext i32 %166 to i64
  %170 = getelementptr inbounds i8, i8* %167, i64 %169
  store i8 %168, i8* %170, align 1
  %171 = load i32, i32* %58, align 8
  %172 = add i32 %171, 1
  store i32 %172, i32* %58, align 8
  %173 = icmp eq i32 %65, -1
  br i1 %173, label %349, label %174

174:                                              ; preds = %165
  %175 = load i32, i32* %31, align 4
  %176 = load i8, i8* %28, align 8
  %177 = zext i8 %176 to i32
  %178 = add i32 %175, %177
  %179 = icmp eq i32 %178, 4094
  br i1 %179, label %349, label %180

180:                                              ; preds = %174
  %181 = shl i32 %65, 16
  %182 = and i32 %131, 255
  %183 = or i32 %182, %181
  %184 = add i32 %175, 1
  store i32 %184, i32* %31, align 4
  %185 = zext i32 %175 to i64
  %186 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 11, i64 %185
  store i32 %183, i32* %186, align 4
  %187 = add i32 %184, %177
  switch i32 %187, label %349 [
    i32 254, label %188
    i32 766, label %189
    i32 1790, label %190
  ]

188:                                              ; preds = %180
  store i8 10, i8* %29, align 1
  br label %349

189:                                              ; preds = %180
  store i8 11, i8* %29, align 1
  br label %349

190:                                              ; preds = %180
  store i8 12, i8* %29, align 1
  br label %349

191:                                              ; preds = %130
  switch i32 %131, label %193 [
    i32 256, label %192
    i32 257, label %360
  ]

192:                                              ; preds = %191
  store i8 9, i8* %29, align 1
  store i32 0, i32* %31, align 4
  br label %349

193:                                              ; preds = %191
  %194 = icmp eq i32 %65, -1
  br i1 %194, label %379, label %195

195:                                              ; preds = %193
  store i32 0, i32* %55, align 4
  %196 = add i32 %131, -258
  %197 = load i32, i32* %31, align 4
  %198 = icmp ult i32 %196, %197
  br i1 %198, label %233, label %199

199:                                              ; preds = %195
  store i32 1, i32* %55, align 4
  store i8 %64, i8* %56, align 1
  %200 = add i32 %65, -258
  %201 = icmp sgt i32 %200, -1
  %202 = icmp ult i32 %200, %197
  %203 = and i1 %201, %202
  br i1 %203, label %207, label %226

204:                                              ; preds = %214
  %205 = load i32, i32* %31, align 4
  %206 = icmp ult i32 %220, %205
  br i1 %206, label %207, label %222

207:                                              ; preds = %199, %204
  %208 = phi i64 [ %216, %204 ], [ 1, %199 ]
  %209 = phi i32 [ %220, %204 ], [ %200, %199 ]
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 11, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i64 %208, 4000
  br i1 %213, label %264, label %214

214:                                              ; preds = %207
  %215 = trunc i32 %212 to i8
  %216 = add nuw nsw i64 %208, 1
  %217 = trunc i64 %216 to i32
  store i32 %217, i32* %55, align 4
  %218 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %208
  store i8 %215, i8* %218, align 1
  %219 = lshr i32 %212, 16
  %220 = add nsw i32 %219, -258
  %221 = icmp slt i32 %220, 0
  br i1 %221, label %222, label %204

222:                                              ; preds = %214, %204
  %223 = trunc i64 %216 to i32
  %224 = trunc i64 %208 to i32
  %225 = icmp ugt i32 %224, 3998
  br i1 %225, label %264, label %226

226:                                              ; preds = %222, %199
  %227 = phi i32 [ %219, %222 ], [ %65, %199 ]
  %228 = phi i32 [ %223, %222 ], [ 1, %199 ]
  %229 = zext i32 %228 to i64
  %230 = trunc i32 %227 to i8
  %231 = add nuw nsw i32 %228, 1
  store i32 %231, i32* %55, align 4
  %232 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %229
  store i8 %230, i8* %232, align 1
  br label %264

233:                                              ; preds = %195
  %234 = icmp slt i32 %196, 0
  br i1 %234, label %257, label %238

235:                                              ; preds = %245
  %236 = load i32, i32* %31, align 4
  %237 = icmp ult i32 %251, %236
  br i1 %237, label %238, label %253

238:                                              ; preds = %233, %235
  %239 = phi i64 [ %247, %235 ], [ 0, %233 ]
  %240 = phi i32 [ %251, %235 ], [ %196, %233 ]
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 11, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i64 %239, 4000
  br i1 %244, label %264, label %245

245:                                              ; preds = %238
  %246 = trunc i32 %243 to i8
  %247 = add nuw nsw i64 %239, 1
  %248 = trunc i64 %247 to i32
  store i32 %248, i32* %55, align 4
  %249 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %239
  store i8 %246, i8* %249, align 1
  %250 = lshr i32 %243, 16
  %251 = add nsw i32 %250, -258
  %252 = icmp slt i32 %251, 0
  br i1 %252, label %253, label %235

253:                                              ; preds = %245, %235
  %254 = trunc i64 %247 to i32
  %255 = trunc i64 %239 to i32
  %256 = icmp ugt i32 %255, 3998
  br i1 %256, label %264, label %257

257:                                              ; preds = %253, %233
  %258 = phi i32 [ %250, %253 ], [ %131, %233 ]
  %259 = phi i32 [ %254, %253 ], [ 0, %233 ]
  %260 = zext i32 %259 to i64
  %261 = trunc i32 %258 to i8
  %262 = add nuw nsw i32 %259, 1
  store i32 %262, i32* %55, align 4
  %263 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %260
  store i8 %261, i8* %263, align 1
  br label %264

264:                                              ; preds = %207, %238, %257, %253, %226, %222
  %265 = phi i32 [ %262, %257 ], [ 4000, %253 ], [ %231, %226 ], [ 4000, %222 ], [ 4000, %238 ], [ 4000, %207 ]
  %266 = load i32, i32* %58, align 8
  %267 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %266, i32 %265) #14
  %268 = extractvalue { i32, i1 } %267, 1
  %269 = extractvalue { i32, i1 } %267, 0
  br i1 %268, label %379, label %270

270:                                              ; preds = %264
  %271 = load i32, i32* %33, align 4
  %272 = icmp ugt i32 %269, %271
  br i1 %272, label %275, label %273

273:                                              ; preds = %298, %270
  %274 = phi i32 [ %265, %270 ], [ %299, %298 ]
  br label %312

275:                                              ; preds = %270
  %276 = sub i32 %269, %271
  %277 = lshr i32 %271, 1
  %278 = icmp ult i32 %277, %276
  %279 = select i1 %278, i32 %276, i32 %277
  %280 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %279, i32 %271) #14
  %281 = extractvalue { i32, i1 } %280, 1
  %282 = extractvalue { i32, i1 } %280, 0
  br i1 %281, label %283, label %286

283:                                              ; preds = %275
  %284 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %285 = icmp eq i8* %284, null
  br i1 %285, label %383, label %292

286:                                              ; preds = %275
  store i32 %282, i32* %33, align 4
  %287 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %288 = zext i32 %282 to i64
  %289 = tail call i8* @_ZN6pdfium8internal12ReallocOrDieEPvmm(i8* %287, i64 %288, i64 1) #14
  %290 = load i8*, i8** %35, align 8
  store i8* %289, i8** %35, align 8
  %291 = icmp eq i8* %290, null
  br i1 %291, label %295, label %292

292:                                              ; preds = %286, %283
  %293 = phi i8* [ %284, %283 ], [ %290, %286 ]
  tail call void @_Z7FX_FreePv(i8* nonnull %293) #14
  %294 = load i8*, i8** %35, align 8
  br label %295

295:                                              ; preds = %292, %286
  %296 = phi i8* [ %294, %292 ], [ %289, %286 ]
  %297 = icmp eq i8* %296, null
  br i1 %297, label %379, label %298

298:                                              ; preds = %295
  %299 = load i32, i32* %55, align 4
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %301, label %273

301:                                              ; preds = %312, %298
  %302 = phi i32 [ 0, %298 ], [ %326, %312 ]
  %303 = load i32, i32* %58, align 8
  %304 = add i32 %303, %302
  store i32 %304, i32* %58, align 8
  %305 = add i32 %302, -1
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = icmp ugt i32 %65, 257
  br i1 %309, label %328, label %310

310:                                              ; preds = %301
  %311 = load i32, i32* %31, align 4
  br label %332

312:                                              ; preds = %273, %312
  %313 = phi i32 [ %326, %312 ], [ %274, %273 ]
  %314 = phi i32 [ %325, %312 ], [ 0, %273 ]
  %315 = xor i32 %314, -1
  %316 = add i32 %313, %315
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 6, i64 %317
  %319 = load i8, i8* %318, align 1
  %320 = load i8*, i8** %35, align 8
  %321 = load i32, i32* %58, align 8
  %322 = add i32 %321, %314
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %320, i64 %323
  store i8 %319, i8* %324, align 1
  %325 = add nuw i32 %314, 1
  %326 = load i32, i32* %55, align 4
  %327 = icmp ugt i32 %326, %325
  br i1 %327, label %312, label %301

328:                                              ; preds = %301
  %329 = add i32 %65, -258
  %330 = load i32, i32* %31, align 4
  %331 = icmp ult i32 %329, %330
  br i1 %331, label %332, label %360

332:                                              ; preds = %328, %310
  %333 = phi i32 [ %311, %310 ], [ %330, %328 ]
  %334 = load i8, i8* %28, align 8
  %335 = zext i8 %334 to i32
  %336 = add i32 %333, %335
  %337 = icmp eq i32 %336, 4094
  br i1 %337, label %349, label %338

338:                                              ; preds = %332
  %339 = shl i32 %65, 16
  %340 = zext i8 %308 to i32
  %341 = or i32 %339, %340
  %342 = add i32 %333, 1
  store i32 %342, i32* %31, align 4
  %343 = zext i32 %333 to i64
  %344 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::CLZWDecoder", %"class.fxcodec::(anonymous namespace)::CLZWDecoder"* %25, i64 0, i32 11, i64 %343
  store i32 %341, i32* %344, align 4
  %345 = add i32 %342, %335
  switch i32 %345, label %349 [
    i32 254, label %346
    i32 766, label %347
    i32 1790, label %348
  ]

346:                                              ; preds = %338
  store i8 10, i8* %29, align 1
  br label %349

347:                                              ; preds = %338
  store i8 11, i8* %29, align 1
  br label %349

348:                                              ; preds = %338
  store i8 12, i8* %29, align 1
  br label %349

349:                                              ; preds = %348, %347, %346, %338, %332, %192, %190, %189, %188, %180, %174, %165
  %350 = phi i32 [ -1, %192 ], [ %131, %165 ], [ %131, %174 ], [ %131, %180 ], [ %131, %188 ], [ %131, %189 ], [ %131, %190 ], [ %131, %332 ], [ %131, %338 ], [ %131, %346 ], [ %131, %347 ], [ %131, %348 ]
  %351 = phi i8 [ %64, %192 ], [ %168, %165 ], [ %168, %174 ], [ %168, %180 ], [ %168, %188 ], [ %168, %189 ], [ %168, %190 ], [ %308, %332 ], [ %308, %338 ], [ %308, %346 ], [ %308, %347 ], [ %308, %348 ]
  %352 = load i32, i32* %41, align 8
  %353 = load i8, i8* %29, align 1
  %354 = zext i8 %353 to i32
  %355 = add i32 %352, %354
  %356 = zext i32 %355 to i64
  %357 = load i64, i64* %48, align 8
  %358 = shl i64 %357, 3
  %359 = icmp ult i64 %358, %356
  br i1 %359, label %360, label %59

360:                                              ; preds = %191, %328, %349, %39
  %361 = getelementptr inbounds i8, i8* %24, i64 32
  %362 = bitcast i8* %361 to i32*
  %363 = load i32, i32* %362, align 8
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %379, label %365

365:                                              ; preds = %360
  %366 = load i32, i32* %41, align 8
  %367 = add i32 %366, 7
  %368 = lshr i32 %367, 3
  store i32 %363, i32* %9, align 4
  %369 = bitcast i8* %27 to i64*
  %370 = load i64, i64* %369, align 8
  store i8* null, i8** %35, align 8
  %371 = load i8*, i8** %14, align 8
  %372 = bitcast %"class.std::__1::unique_ptr.8"* %8 to i64*
  store i64 %370, i64* %372, align 8
  %373 = icmp eq i8* %371, null
  br i1 %373, label %378, label %374

374:                                              ; preds = %365
  tail call void @_Z7FX_FreePv(i8* nonnull %371) #14
  %375 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %376 = icmp eq i8* %375, null
  br i1 %376, label %378, label %377

377:                                              ; preds = %374
  tail call void @_Z7FX_FreePv(i8* nonnull %375) #14
  br label %378

378:                                              ; preds = %365, %374, %377
  tail call void @_ZdlPv(i8* nonnull %24) #13
  br label %606

379:                                              ; preds = %160, %295, %264, %193, %360
  %380 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %381 = icmp eq i8* %380, null
  br i1 %381, label %383, label %382

382:                                              ; preds = %379
  tail call void @_Z7FX_FreePv(i8* nonnull %380) #14
  br label %383

383:                                              ; preds = %148, %283, %379, %382
  tail call void @_ZdlPv(i8* nonnull %24) #13
  br label %802

384:                                              ; preds = %18
  %385 = bitcast %"class.pdfium::span"* %1 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %388 = load i64, i64* %387, align 8
  %389 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %390 = icmp eq i8* %389, null
  br i1 %390, label %392, label %391

391:                                              ; preds = %384
  tail call void @_Z7FX_FreePv(i8* nonnull %389) #14
  br label %392

392:                                              ; preds = %391, %384
  store i32 0, i32* %9, align 4
  %393 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 112) #14
  %394 = bitcast i8* %393 to %struct.z_stream_s*
  %395 = getelementptr inbounds i8, i8* %393, i64 64
  %396 = bitcast i8* %395 to i8* (i8*, i32, i32)**
  store i8* (i8*, i32, i32)* @_ZL13my_alloc_funcPvjj, i8* (i8*, i32, i32)** %396, align 8
  %397 = getelementptr inbounds i8, i8* %393, i64 72
  %398 = bitcast i8* %397 to void (i8*, i8*)**
  store void (i8*, i8*)* @_ZL12my_free_funcPvS_, void (i8*, i8*)** %398, align 8
  %399 = tail call i32 @Cr_z_inflateInit_(%struct.z_stream_s* %394, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 112) #14
  %400 = icmp eq i8* %393, null
  br i1 %400, label %606, label %401

401:                                              ; preds = %392
  %402 = bitcast i8* %393 to i64*
  store i64 %386, i64* %402, align 8
  %403 = trunc i64 %388 to i32
  %404 = getelementptr inbounds i8, i8* %393, i64 8
  %405 = bitcast i8* %404 to i32*
  store i32 %403, i32* %405, align 8
  %406 = icmp eq i32 %7, 0
  %407 = zext i32 %7 to i64
  %408 = shl i64 %388, 1
  %409 = select i1 %406, i64 %408, i64 %407
  %410 = trunc i64 %409 to i32
  %411 = icmp ult i32 %410, 10000000
  %412 = select i1 %411, i32 %410, i32 10000000
  %413 = add nuw nsw i32 %412, 1
  %414 = zext i32 %413 to i64
  %415 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %414, i64 1) #14
  %416 = ptrtoint i8* %415 to i64
  %417 = zext i32 %412 to i64
  %418 = getelementptr inbounds i8, i8* %415, i64 %417
  store i8 0, i8* %418, align 1
  %419 = bitcast %"class.std::__1::vector.29"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %419) #14
  %420 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %11, i64 0, i32 0, i32 1
  %421 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %419, i8 0, i64 24, i1 false) #14
  %422 = bitcast %"class.std::__1::unique_ptr.8"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %422) #14
  %423 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %12, i64 0, i32 0, i32 0, i32 0
  %424 = bitcast %"class.std::__1::unique_ptr.8"* %12 to i64*
  store i64 %416, i64* %424, align 8
  %425 = getelementptr inbounds i8, i8* %393, i64 24
  %426 = bitcast i8* %425 to i8**
  %427 = getelementptr inbounds i8, i8* %393, i64 32
  %428 = bitcast i8* %427 to i32*
  %429 = getelementptr inbounds i8, i8* %393, i64 40
  %430 = bitcast i8* %429 to i64*
  %431 = bitcast %"class.std::__1::unique_ptr.8"** %420 to i64*
  br label %432

432:                                              ; preds = %492, %401
  %433 = phi i8* [ %495, %492 ], [ %415, %401 ]
  store i8* %433, i8** %426, align 8
  store i32 %412, i32* %428, align 8
  %434 = load i64, i64* %430, align 8
  %435 = call i1 @llvm.is.constant.i64(i64 %434) #14
  %436 = icmp ult i64 %434, 4294967296
  %437 = trunc i64 %434 to i32
  %438 = select i1 %436, i32 %437, i32 -1
  %439 = icmp ult i64 %434, 4294967295
  %440 = select i1 %439, i64 %434, i64 4294967295
  %441 = trunc i64 %440 to i32
  %442 = select i1 %435, i32 %441, i32 %438
  %443 = icmp ult i32 %442, 1073741824
  %444 = select i1 %443, i32 %442, i32 1073741824
  %445 = call i32 @Cr_z_inflate(%struct.z_stream_s* nonnull %394, i32 2) #14
  %446 = load i64, i64* %430, align 8
  %447 = call i1 @llvm.is.constant.i64(i64 %446) #14
  %448 = icmp ult i64 %446, 4294967296
  %449 = trunc i64 %446 to i32
  %450 = select i1 %448, i32 %449, i32 -1
  %451 = icmp ult i64 %446, 4294967295
  %452 = select i1 %451, i64 %446, i64 4294967295
  %453 = trunc i64 %452 to i32
  %454 = select i1 %447, i32 %453, i32 %450
  %455 = icmp ult i32 %454, 1073741824
  %456 = select i1 %455, i32 %454, i32 1073741824
  %457 = sub nsw i32 %456, %444
  %458 = icmp ugt i32 %412, %457
  br i1 %458, label %459, label %464

459:                                              ; preds = %432
  %460 = zext i32 %457 to i64
  %461 = getelementptr inbounds i8, i8* %433, i64 %460
  %462 = sub i32 %412, %457
  %463 = zext i32 %462 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %461, i8 0, i64 %463, i1 false) #14
  br label %464

464:                                              ; preds = %459, %432
  %465 = load i32, i32* %428, align 8
  %466 = or i32 %465, %445
  %467 = icmp eq i32 %466, 0
  %468 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %420, align 8
  %469 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %421, align 8
  %470 = icmp ult %"class.std::__1::unique_ptr.8"* %468, %469
  br i1 %467, label %479, label %471

471:                                              ; preds = %464
  %472 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %11, i64 0, i32 0, i32 0
  br i1 %470, label %473, label %478

473:                                              ; preds = %471
  %474 = load i64, i64* %424, align 8
  store i8* null, i8** %423, align 8
  %475 = bitcast %"class.std::__1::unique_ptr.8"* %468 to i64*
  store i64 %474, i64* %475, align 8
  %476 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %468, i64 1
  %477 = ptrtoint %"class.std::__1::unique_ptr.8"* %476 to i64
  store i64 %477, i64* %431, align 8
  br label %496

478:                                              ; preds = %471
  call void @_ZNSt3__16vectorINS_10unique_ptrIh13FxFreeDeleterEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.29"* nonnull %11, %"class.std::__1::unique_ptr.8"* nonnull dereferenceable(8) %12) #14
  br label %496

479:                                              ; preds = %464
  br i1 %470, label %480, label %485

480:                                              ; preds = %479
  %481 = load i64, i64* %424, align 8
  store i8* null, i8** %423, align 8
  %482 = bitcast %"class.std::__1::unique_ptr.8"* %468 to i64*
  store i64 %481, i64* %482, align 8
  %483 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %468, i64 1
  %484 = ptrtoint %"class.std::__1::unique_ptr.8"* %483 to i64
  store i64 %484, i64* %431, align 8
  br label %486

485:                                              ; preds = %479
  call void @_ZNSt3__16vectorINS_10unique_ptrIh13FxFreeDeleterEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.29"* nonnull %11, %"class.std::__1::unique_ptr.8"* nonnull dereferenceable(8) %12) #14
  br label %486

486:                                              ; preds = %485, %480
  %487 = call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %414, i64 1) #14
  %488 = load i8*, i8** %423, align 8
  store i8* %487, i8** %423, align 8
  %489 = icmp eq i8* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %486
  call void @_Z7FX_FreePv(i8* nonnull %488) #14
  %491 = load i8*, i8** %423, align 8
  br label %492

492:                                              ; preds = %490, %486
  %493 = phi i8* [ %491, %490 ], [ %487, %486 ]
  %494 = getelementptr inbounds i8, i8* %493, i64 %417
  store i8 0, i8* %494, align 1
  %495 = load i8*, i8** %423, align 8
  br label %432

496:                                              ; preds = %478, %473
  %497 = load i8*, i8** %423, align 8
  store i8* null, i8** %423, align 8
  %498 = icmp eq i8* %497, null
  br i1 %498, label %500, label %499

499:                                              ; preds = %496
  call void @_Z7FX_FreePv(i8* nonnull %497) #14
  br label %500

500:                                              ; preds = %499, %496
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %422) #14
  %501 = load i64, i64* %430, align 8
  %502 = call i1 @llvm.is.constant.i64(i64 %501) #14
  %503 = icmp ult i64 %501, 4294967296
  %504 = trunc i64 %501 to i32
  %505 = select i1 %503, i32 %504, i32 -1
  %506 = icmp ult i64 %501, 4294967295
  %507 = select i1 %506, i64 %501, i64 4294967295
  %508 = trunc i64 %507 to i32
  %509 = select i1 %502, i32 %508, i32 %505
  %510 = icmp ult i32 %509, 1073741824
  %511 = select i1 %510, i32 %509, i32 1073741824
  store i32 %511, i32* %9, align 4
  %512 = getelementptr inbounds i8, i8* %393, i64 16
  %513 = bitcast i8* %512 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = call i1 @llvm.is.constant.i64(i64 %514) #14
  %516 = icmp ult i64 %514, 4294967296
  %517 = trunc i64 %514 to i32
  %518 = select i1 %516, i32 %517, i32 -1
  %519 = icmp ult i64 %514, 4294967295
  %520 = select i1 %519, i64 %514, i64 4294967295
  %521 = trunc i64 %520 to i32
  %522 = select i1 %515, i32 %521, i32 %518
  %523 = load i64, i64* %431, align 8
  %524 = bitcast %"class.std::__1::vector.29"* %11 to i64*
  %525 = load i64, i64* %524, align 8
  %526 = sub i64 %523, %525
  %527 = icmp eq i64 %526, 8
  br i1 %527, label %528, label %537

528:                                              ; preds = %500
  %529 = inttoptr i64 %525 to %"class.std::__1::unique_ptr.8"*
  %530 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %529, i64 0, i32 0, i32 0, i32 0
  %531 = inttoptr i64 %525 to i64*
  %532 = load i64, i64* %531, align 8
  store i8* null, i8** %530, align 8
  %533 = load i8*, i8** %14, align 8
  %534 = bitcast %"class.std::__1::unique_ptr.8"* %8 to i64*
  store i64 %532, i64* %534, align 8
  %535 = icmp eq i8* %533, null
  br i1 %535, label %583, label %536

536:                                              ; preds = %528
  call void @_Z7FX_FreePv(i8* nonnull %533) #14
  br label %583

537:                                              ; preds = %500
  %538 = zext i32 %511 to i64
  %539 = call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %538, i64 1) #14
  %540 = ptrtoint i8* %539 to i64
  %541 = load i64, i64* %431, align 8
  %542 = load i64, i64* %524, align 8
  %543 = icmp eq i64 %541, %542
  br i1 %543, label %546, label %544

544:                                              ; preds = %537
  %545 = load i32, i32* %9, align 4
  br label %551

546:                                              ; preds = %576, %537
  %547 = load i8*, i8** %14, align 8
  %548 = bitcast %"class.std::__1::unique_ptr.8"* %8 to i64*
  store i64 %540, i64* %548, align 8
  %549 = icmp eq i8* %547, null
  br i1 %549, label %583, label %550

550:                                              ; preds = %546
  call void @_Z7FX_FreePv(i8* nonnull %547) #14
  br label %583

551:                                              ; preds = %576, %544
  %552 = phi i64 [ %579, %576 ], [ %542, %544 ]
  %553 = phi i64 [ %577, %576 ], [ 0, %544 ]
  %554 = phi i32 [ %572, %576 ], [ 0, %544 ]
  %555 = phi i32 [ %573, %576 ], [ %545, %544 ]
  %556 = inttoptr i64 %552 to %"class.std::__1::unique_ptr.8"*
  %557 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %556, i64 %553, i32 0, i32 0, i32 0
  %558 = load i8*, i8** %557, align 8
  store i8* null, i8** %557, align 8
  %559 = load i64, i64* %431, align 8
  %560 = load i64, i64* %524, align 8
  %561 = sub i64 %559, %560
  %562 = ashr exact i64 %561, 3
  %563 = add nsw i64 %562, -1
  %564 = icmp eq i64 %553, %563
  %565 = select i1 %564, i32 %465, i32 0
  %566 = sub i32 %412, %565
  %567 = icmp ult i32 %555, %566
  %568 = select i1 %567, i32 %555, i32 %566
  %569 = zext i32 %554 to i64
  %570 = getelementptr inbounds i8, i8* %539, i64 %569
  %571 = zext i32 %568 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %570, i8* align 1 %558, i64 %571, i1 false) #14
  %572 = add i32 %568, %554
  %573 = sub i32 %555, %568
  %574 = icmp eq i8* %558, null
  br i1 %574, label %576, label %575

575:                                              ; preds = %551
  call void @_Z7FX_FreePv(i8* nonnull %558) #14
  br label %576

576:                                              ; preds = %575, %551
  %577 = add nuw i64 %553, 1
  %578 = load i64, i64* %431, align 8
  %579 = load i64, i64* %524, align 8
  %580 = sub i64 %578, %579
  %581 = ashr exact i64 %580, 3
  %582 = icmp ult i64 %577, %581
  br i1 %582, label %551, label %546

583:                                              ; preds = %550, %546, %536, %528
  %584 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %472, align 8
  %585 = icmp eq %"class.std::__1::unique_ptr.8"* %584, null
  br i1 %585, label %604, label %586

586:                                              ; preds = %583
  %587 = bitcast %"class.std::__1::unique_ptr.8"* %584 to i8*
  %588 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %420, align 8
  %589 = icmp eq %"class.std::__1::unique_ptr.8"* %588, %584
  br i1 %589, label %602, label %590

590:                                              ; preds = %586, %597
  %591 = phi %"class.std::__1::unique_ptr.8"* [ %592, %597 ], [ %588, %586 ]
  %592 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %591, i64 -1
  %593 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %592, i64 0, i32 0, i32 0, i32 0
  %594 = load i8*, i8** %593, align 8
  store i8* null, i8** %593, align 8
  %595 = icmp eq i8* %594, null
  br i1 %595, label %597, label %596

596:                                              ; preds = %590
  call void @_Z7FX_FreePv(i8* nonnull %594) #14
  br label %597

597:                                              ; preds = %596, %590
  %598 = icmp eq %"class.std::__1::unique_ptr.8"* %592, %584
  br i1 %598, label %599, label %590

599:                                              ; preds = %597
  %600 = bitcast %"class.std::__1::vector.29"* %11 to i8**
  %601 = load i8*, i8** %600, align 8
  br label %602

602:                                              ; preds = %599, %586
  %603 = phi i8* [ %601, %599 ], [ %587, %586 ]
  store %"class.std::__1::unique_ptr.8"* %584, %"class.std::__1::unique_ptr.8"** %420, align 8
  call void @_ZdlPv(i8* %603) #13
  br label %604

604:                                              ; preds = %602, %583
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %419) #14
  %605 = call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %394) #14
  call void @_Z7FX_FreePv(i8* nonnull %393) #14
  br label %606

606:                                              ; preds = %604, %392, %378
  %607 = phi i32 [ %368, %378 ], [ 0, %392 ], [ %522, %604 ]
  switch i8 %22, label %801 [
    i8 0, label %802
    i8 2, label %608
    i8 1, label %769
  ]

608:                                              ; preds = %606
  %609 = mul nsw i32 %5, %4
  %610 = add nsw i32 %609, 7
  %611 = sdiv i32 %610, 8
  %612 = mul nsw i32 %609, %6
  %613 = add nsw i32 %612, 7
  %614 = sdiv i32 %613, 8
  %615 = icmp slt i32 %613, 8
  br i1 %615, label %801, label %616

616:                                              ; preds = %608
  %617 = load i32, i32* %9, align 4
  %618 = add i32 %617, %614
  %619 = add nsw i32 %614, 1
  %620 = udiv i32 %618, %619
  %621 = icmp slt i32 %620, 1
  br i1 %621, label %801, label %622

622:                                              ; preds = %616
  %623 = urem i32 %617, %619
  %624 = sext i32 %614 to i64
  %625 = sext i32 %620 to i64
  %626 = call i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64 %624, i64 %625, i64 1) #14
  %627 = load i8*, i8** %14, align 8
  %628 = add nsw i32 %623, -1
  %629 = sext i32 %611 to i64
  %630 = zext i32 %614 to i64
  br label %643

631:                                              ; preds = %760
  %632 = ptrtoint i8* %626 to i64
  %633 = load i8*, i8** %14, align 8
  %634 = bitcast %"class.std::__1::unique_ptr.8"* %8 to i64*
  store i64 %632, i64* %634, align 8
  %635 = icmp eq i8* %633, null
  br i1 %635, label %637, label %636

636:                                              ; preds = %631
  call void @_Z7FX_FreePv(i8* nonnull %633) #14
  br label %637

637:                                              ; preds = %636, %631
  %638 = mul nsw i32 %620, %614
  %639 = icmp sgt i32 %623, 0
  %640 = sub nsw i32 %619, %623
  %641 = select i1 %639, i32 %640, i32 0
  %642 = sub nsw i32 %638, %641
  store i32 %642, i32* %9, align 4
  br label %802

643:                                              ; preds = %760, %622
  %644 = phi i32 [ 0, %622 ], [ %761, %760 ]
  %645 = phi i8* [ %626, %622 ], [ %766, %760 ]
  %646 = phi i8* [ %627, %622 ], [ %767, %760 ]
  %647 = phi i32 [ 0, %622 ], [ %762, %760 ]
  %648 = load i8, i8* %646, align 1
  %649 = add i32 %647, 1
  %650 = icmp eq i8 %648, 0
  br i1 %650, label %653, label %651

651:                                              ; preds = %643
  %652 = icmp eq i32 %644, 0
  br label %663

653:                                              ; preds = %643
  %654 = add nuw nsw i32 %644, 1
  %655 = mul nsw i32 %654, %619
  %656 = load i32, i32* %9, align 4
  %657 = icmp sgt i32 %655, %656
  %658 = select i1 %657, i32 %628, i32 %614
  %659 = getelementptr inbounds i8, i8* %646, i64 1
  %660 = sext i32 %658 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %645, i8* align 1 %659, i64 %660, i1 false) #14
  %661 = add nsw i32 %658, 1
  %662 = add i32 %658, %649
  br label %760

663:                                              ; preds = %752, %651
  %664 = phi i64 [ 0, %651 ], [ %669, %752 ]
  %665 = phi i32 [ %649, %651 ], [ %755, %752 ]
  %666 = load i32, i32* %9, align 4
  %667 = icmp ult i32 %665, %666
  br i1 %667, label %668, label %757

668:                                              ; preds = %663
  %669 = add nuw nsw i64 %664, 1
  %670 = getelementptr inbounds i8, i8* %646, i64 %669
  %671 = load i8, i8* %670, align 1
  switch i8 %648, label %752 [
    i8 1, label %672
    i8 2, label %681
    i8 3, label %689
    i8 4, label %709
  ]

672:                                              ; preds = %668
  %673 = icmp slt i64 %664, %629
  br i1 %673, label %678, label %674

674:                                              ; preds = %672
  %675 = sub nsw i64 %664, %629
  %676 = getelementptr inbounds i8, i8* %645, i64 %675
  %677 = load i8, i8* %676, align 1
  br label %678

678:                                              ; preds = %674, %672
  %679 = phi i8 [ %677, %674 ], [ 0, %672 ]
  %680 = add i8 %679, %671
  br label %752

681:                                              ; preds = %668
  br i1 %652, label %686, label %682

682:                                              ; preds = %681
  %683 = sub nsw i64 %664, %624
  %684 = getelementptr inbounds i8, i8* %645, i64 %683
  %685 = load i8, i8* %684, align 1
  br label %686

686:                                              ; preds = %682, %681
  %687 = phi i8 [ %685, %682 ], [ 0, %681 ]
  %688 = add i8 %687, %671
  br label %752

689:                                              ; preds = %668
  %690 = icmp slt i64 %664, %629
  br i1 %690, label %695, label %691

691:                                              ; preds = %689
  %692 = sub nsw i64 %664, %629
  %693 = getelementptr inbounds i8, i8* %645, i64 %692
  %694 = load i8, i8* %693, align 1
  br label %695

695:                                              ; preds = %691, %689
  %696 = phi i8 [ %694, %691 ], [ 0, %689 ]
  br i1 %652, label %701, label %697

697:                                              ; preds = %695
  %698 = sub nsw i64 %664, %624
  %699 = getelementptr inbounds i8, i8* %645, i64 %698
  %700 = load i8, i8* %699, align 1
  br label %701

701:                                              ; preds = %697, %695
  %702 = phi i8 [ %700, %697 ], [ 0, %695 ]
  %703 = zext i8 %702 to i32
  %704 = zext i8 %696 to i32
  %705 = add nuw nsw i32 %703, %704
  %706 = lshr i32 %705, 1
  %707 = trunc i32 %706 to i8
  %708 = add i8 %671, %707
  br label %752

709:                                              ; preds = %668
  %710 = icmp sge i64 %664, %629
  br i1 %710, label %711, label %715

711:                                              ; preds = %709
  %712 = sub nsw i64 %664, %629
  %713 = getelementptr inbounds i8, i8* %645, i64 %712
  %714 = load i8, i8* %713, align 1
  br label %715

715:                                              ; preds = %711, %709
  %716 = phi i8 [ %714, %711 ], [ 0, %709 ]
  br i1 %652, label %725, label %717

717:                                              ; preds = %715
  %718 = sub nsw i64 %664, %624
  %719 = getelementptr inbounds i8, i8* %645, i64 %718
  %720 = load i8, i8* %719, align 1
  br i1 %710, label %721, label %725

721:                                              ; preds = %717
  %722 = sub nsw i64 %718, %629
  %723 = getelementptr inbounds i8, i8* %645, i64 %722
  %724 = load i8, i8* %723, align 1
  br label %725

725:                                              ; preds = %721, %717, %715
  %726 = phi i8 [ %720, %721 ], [ %720, %717 ], [ 0, %715 ]
  %727 = phi i8 [ %724, %721 ], [ 0, %717 ], [ 0, %715 ]
  %728 = zext i8 %716 to i32
  %729 = zext i8 %726 to i32
  %730 = zext i8 %727 to i32
  %731 = add nuw nsw i32 %729, %728
  %732 = sub nsw i32 %731, %730
  %733 = sub nsw i32 %732, %728
  %734 = icmp slt i32 %733, 0
  %735 = sub nsw i32 0, %733
  %736 = select i1 %734, i32 %735, i32 %733
  %737 = sub nsw i32 %732, %729
  %738 = icmp slt i32 %737, 0
  %739 = sub nsw i32 0, %737
  %740 = select i1 %738, i32 %739, i32 %737
  %741 = sub nsw i32 %732, %730
  %742 = icmp slt i32 %741, 0
  %743 = sub nsw i32 0, %741
  %744 = select i1 %742, i32 %743, i32 %741
  %745 = icmp sgt i32 %736, %740
  %746 = icmp sgt i32 %736, %744
  %747 = or i1 %745, %746
  %748 = icmp sgt i32 %740, %744
  %749 = select i1 %748, i8 %727, i8 %726
  %750 = select i1 %747, i8 %749, i8 %716
  %751 = add i8 %750, %671
  br label %752

752:                                              ; preds = %668, %725, %701, %686, %678
  %753 = phi i8 [ %751, %725 ], [ %708, %701 ], [ %688, %686 ], [ %680, %678 ], [ %671, %668 ]
  %754 = getelementptr inbounds i8, i8* %645, i64 %664
  store i8 %753, i8* %754, align 1
  %755 = add nuw i32 %665, 1
  %756 = icmp eq i64 %669, %630
  br i1 %756, label %757, label %663

757:                                              ; preds = %663, %752
  %758 = phi i32 [ %755, %752 ], [ %665, %663 ]
  %759 = add nuw nsw i32 %644, 1
  br label %760

760:                                              ; preds = %757, %653
  %761 = phi i32 [ %759, %757 ], [ %654, %653 ]
  %762 = phi i32 [ %758, %757 ], [ %662, %653 ]
  %763 = phi i32 [ %619, %757 ], [ %661, %653 ]
  %764 = phi i64 [ %624, %757 ], [ %660, %653 ]
  %765 = sext i32 %763 to i64
  %766 = getelementptr inbounds i8, i8* %645, i64 %764
  %767 = getelementptr inbounds i8, i8* %646, i64 %765
  %768 = icmp slt i32 %761, %620
  br i1 %768, label %643, label %631

769:                                              ; preds = %606
  %770 = mul nsw i32 %5, %4
  %771 = mul nsw i32 %770, %6
  %772 = add nsw i32 %771, 7
  %773 = sdiv i32 %772, 8
  %774 = add i32 %771, 14
  %775 = icmp ult i32 %774, 15
  br i1 %775, label %801, label %776

776:                                              ; preds = %769
  %777 = load i32, i32* %9, align 4
  %778 = add nsw i32 %773, -1
  %779 = add i32 %778, %777
  %780 = udiv i32 %779, %773
  %781 = urem i32 %777, %773
  %782 = icmp sgt i32 %780, 0
  br i1 %782, label %783, label %802

783:                                              ; preds = %776
  %784 = load i8*, i8** %14, align 8
  %785 = icmp sgt i32 %773, %777
  %786 = select i1 %785, i32 %781, i32 %773
  call fastcc void @_ZN7fxcodec12_GLOBAL__N_116TIFF_PredictLineEPhjiii(i8* %784, i32 %786, i32 %5, i32 %4, i32 %6) #14
  %787 = icmp eq i32 %780, 1
  br i1 %787, label %802, label %788

788:                                              ; preds = %783, %788
  %789 = phi i32 [ %799, %788 ], [ %786, %783 ]
  %790 = phi i32 [ %796, %788 ], [ 1, %783 ]
  %791 = load i32, i32* %9, align 4
  %792 = load i8*, i8** %14, align 8
  %793 = mul nsw i32 %789, %790
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i8, i8* %792, i64 %794
  %796 = add nuw nsw i32 %790, 1
  %797 = mul nsw i32 %796, %789
  %798 = icmp sgt i32 %797, %791
  %799 = select i1 %798, i32 %781, i32 %789
  call fastcc void @_ZN7fxcodec12_GLOBAL__N_116TIFF_PredictLineEPhjiii(i8* %795, i32 %799, i32 %5, i32 %4, i32 %6) #14
  %800 = icmp slt i32 %796, %780
  br i1 %800, label %788, label %802

801:                                              ; preds = %606, %608, %616, %769
  br label %802

802:                                              ; preds = %788, %783, %801, %637, %776, %606, %383
  %803 = phi i32 [ -1, %383 ], [ %607, %606 ], [ -1, %801 ], [ %607, %637 ], [ %607, %776 ], [ %607, %783 ], [ %607, %788 ]
  ret i32 %803
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec11FlateModule6EncodeEPKhjPNSt3__110unique_ptrIh13FxFreeDeleterEEPj(i8*, i32, %"class.std::__1::unique_ptr.8"* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = udiv i32 %1, 1000
  %7 = add i32 %1, 12
  %8 = add i32 %7, %6
  store i32 %8, i32* %3, align 4
  %9 = zext i32 %8 to i64
  %10 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %9, i64 1) #14
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %2, i64 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* %10, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %4
  tail call void @_Z7FX_FreePv(i8* nonnull %12) #14
  %15 = load i8*, i8** %11, align 8
  br label %16

16:                                               ; preds = %4, %14
  %17 = phi i8* [ %10, %4 ], [ %15, %14 ]
  %18 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  %19 = load i32, i32* %3, align 4
  %20 = zext i32 %19 to i64
  store i64 %20, i64* %5, align 8
  %21 = zext i32 %1 to i64
  %22 = call i32 @Cr_z_compress(i8* %17, i64* nonnull %5, i8* %0, i64 %21) #14
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16
  %25 = load i64, i64* %5, align 8
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %3, align 4
  br label %27

27:                                               ; preds = %16, %24
  %28 = phi i1 [ true, %24 ], [ false, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  ret i1 %28
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #2

declare i8* @_ZN6pdfium8internal12ReallocOrDieEPvmm(i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZL13my_alloc_funcPvjj(i8* nocapture readnone, i32, i32) #0 {
  %4 = zext i32 %1 to i64
  %5 = zext i32 %2 to i64
  %6 = tail call i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64 %4, i64 %5, i64 1) #14
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12my_free_funcPvS_(i8* nocapture readnone, i8*) #0 {
  tail call void @_Z7FX_FreePv(i8* %1) #14
  ret void
}

declare i32 @Cr_z_inflateInit_(%struct.z_stream_s*, i8*, i32) local_unnamed_addr #2

declare i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64, i64, i64) local_unnamed_addr #2

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

declare i32 @Cr_z_inflate(%struct.z_stream_s*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIh13FxFreeDeleterEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.29"*, %"class.std::__1::unique_ptr.8"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.8"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.29"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.29"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #15
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.8"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #15
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.8"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.8"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.8"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.8"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store i8* null, i8** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.8"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.8"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.8"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.8"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint i8** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.8"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.8"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.8"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.8"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !6

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.8"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.8"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.8"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.8"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.8"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.8"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i8* null, i8** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.8"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.8"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store i8* null, i8** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.8"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.8"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i8* null, i8** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.8"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.8"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i8* null, i8** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.8"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.8"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i8* null, i8** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.8"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.8"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i8* null, i8** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.8"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.8"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i8* null, i8** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.8"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.8"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store i8* null, i8** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.8"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.8"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.8"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.8"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.8"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.8"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.8"*
  %138 = icmp eq %"class.std::__1::unique_ptr.8"* %133, %137
  br i1 %138, label %148, label %139

139:                                              ; preds = %132, %146
  %140 = phi %"class.std::__1::unique_ptr.8"* [ %141, %146 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  store i8* null, i8** %142, align 8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %146, label %145

145:                                              ; preds = %139
  tail call void @_Z7FX_FreePv(i8* nonnull %143) #14
  br label %146

146:                                              ; preds = %145, %139
  %147 = icmp eq %"class.std::__1::unique_ptr.8"* %141, %137
  br i1 %147, label %148, label %139

148:                                              ; preds = %146, %132
  %149 = icmp eq i64 %135, 0
  br i1 %149, label %152, label %150

150:                                              ; preds = %148
  %151 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %151) #13
  br label %152

152:                                              ; preds = %148, %150
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #10

declare i32 @Cr_z_inflateEnd(%struct.z_stream_s*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7fxcodec12_GLOBAL__N_116TIFF_PredictLineEPhjiii(i8* nocapture, i32, i32, i32, i32) unnamed_addr #0 {
  %6 = icmp eq i32 %2, 1
  br i1 %6, label %7, label %44

7:                                                ; preds = %5
  %8 = mul nsw i32 %4, %3
  %9 = shl i32 %1, 3
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %7
  tail call void @llvm.trap() #14
  unreachable

12:                                               ; preds = %7
  %13 = icmp slt i32 %9, %8
  %14 = select i1 %13, i32 %9, i32 %8
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %207

16:                                               ; preds = %12
  %17 = load i8, i8* %0, align 1
  br label %18

18:                                               ; preds = %16, %18
  %19 = phi i8 [ %41, %18 ], [ %17, %16 ]
  %20 = phi i32 [ %42, %18 ], [ 1, %16 ]
  %21 = phi i32 [ %22, %18 ], [ 0, %16 ]
  %22 = and i32 %20, 7
  %23 = lshr i32 %20, 3
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = xor i32 %22, 7
  %29 = lshr i32 %27, %28
  %30 = zext i8 %19 to i32
  %31 = xor i32 %21, 7
  %32 = lshr i32 %30, %31
  %33 = xor i32 %32, %29
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = shl i32 1, %28
  %37 = trunc i32 %36 to i8
  %38 = xor i8 %37, -1
  %39 = and i8 %26, %38
  %40 = or i8 %26, %37
  %41 = select i1 %35, i8 %39, i8 %40
  store i8 %41, i8* %25, align 1
  %42 = add nuw nsw i32 %20, 1
  %43 = icmp slt i32 %42, %14
  br i1 %43, label %18, label %207

44:                                               ; preds = %5
  %45 = mul nsw i32 %3, %2
  %46 = sdiv i32 %45, 8
  %47 = icmp eq i32 %2, 16
  br i1 %47, label %155, label %48

48:                                               ; preds = %44
  %49 = icmp ult i32 %46, %1
  br i1 %49, label %50, label %207

50:                                               ; preds = %48
  %51 = zext i32 %46 to i64
  %52 = zext i32 %1 to i64
  %53 = sub nsw i64 %52, %51
  %54 = icmp ult i64 %53, 32
  br i1 %54, label %55, label %73

55:                                               ; preds = %153, %73, %50
  %56 = phi i64 [ %51, %73 ], [ %51, %50 ], [ %83, %153 ]
  %57 = sub nsw i64 %52, %56
  %58 = xor i64 %56, -1
  %59 = and i64 %57, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %55
  %62 = sub nuw nsw i64 %56, %51
  %63 = getelementptr inbounds i8, i8* %0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %0, i64 %56
  %66 = load i8, i8* %65, align 1
  %67 = add i8 %66, %64
  store i8 %67, i8* %65, align 1
  %68 = add nuw nsw i64 %56, 1
  br label %69

69:                                               ; preds = %55, %61
  %70 = phi i64 [ %56, %55 ], [ %68, %61 ]
  %71 = sub nsw i64 0, %52
  %72 = icmp eq i64 %58, %71
  br i1 %72, label %207, label %190

73:                                               ; preds = %50
  %74 = getelementptr i8, i8* %0, i64 %51
  %75 = getelementptr i8, i8* %0, i64 %52
  %76 = sub nsw i64 %52, %51
  %77 = getelementptr i8, i8* %0, i64 %76
  %78 = icmp ult i8* %74, %77
  %79 = icmp ugt i8* %75, %0
  %80 = and i1 %78, %79
  br i1 %80, label %55, label %81

81:                                               ; preds = %73
  %82 = and i64 %53, -32
  %83 = add nsw i64 %82, %51
  %84 = add nsw i64 %82, -32
  %85 = lshr exact i64 %84, 5
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 1
  %88 = icmp eq i64 %84, 0
  br i1 %88, label %132, label %89

89:                                               ; preds = %81
  %90 = sub nuw nsw i64 %86, %87
  br label %91

91:                                               ; preds = %91, %89
  %92 = phi i64 [ 0, %89 ], [ %129, %91 ]
  %93 = phi i64 [ %90, %89 ], [ %130, %91 ]
  %94 = add i64 %92, %51
  %95 = getelementptr inbounds i8, i8* %0, i64 %92
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !8
  %98 = getelementptr inbounds i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !8
  %101 = getelementptr inbounds i8, i8* %0, i64 %94
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !11, !noalias !8
  %104 = getelementptr inbounds i8, i8* %101, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !11, !noalias !8
  %107 = add <16 x i8> %103, %97
  %108 = add <16 x i8> %106, %100
  %109 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %109, align 1, !alias.scope !11, !noalias !8
  %110 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %110, align 1, !alias.scope !11, !noalias !8
  %111 = or i64 %92, 32
  %112 = add i64 %111, %51
  %113 = getelementptr inbounds i8, i8* %0, i64 %111
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !8
  %116 = getelementptr inbounds i8, i8* %113, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !8
  %119 = getelementptr inbounds i8, i8* %0, i64 %112
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1, !alias.scope !11, !noalias !8
  %122 = getelementptr inbounds i8, i8* %119, i64 16
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !alias.scope !11, !noalias !8
  %125 = add <16 x i8> %121, %115
  %126 = add <16 x i8> %124, %118
  %127 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %127, align 1, !alias.scope !11, !noalias !8
  %128 = bitcast i8* %122 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %128, align 1, !alias.scope !11, !noalias !8
  %129 = add i64 %92, 64
  %130 = add i64 %93, -2
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %91, !llvm.loop !13

132:                                              ; preds = %91, %81
  %133 = phi i64 [ 0, %81 ], [ %129, %91 ]
  %134 = icmp eq i64 %87, 0
  br i1 %134, label %153, label %135

135:                                              ; preds = %132
  %136 = add i64 %133, %51
  %137 = getelementptr inbounds i8, i8* %0, i64 %133
  %138 = bitcast i8* %137 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1, !alias.scope !8
  %140 = getelementptr inbounds i8, i8* %137, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1, !alias.scope !8
  %143 = getelementptr inbounds i8, i8* %0, i64 %136
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1, !alias.scope !11, !noalias !8
  %146 = getelementptr inbounds i8, i8* %143, i64 16
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !alias.scope !11, !noalias !8
  %149 = add <16 x i8> %145, %139
  %150 = add <16 x i8> %148, %142
  %151 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %151, align 1, !alias.scope !11, !noalias !8
  %152 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %152, align 1, !alias.scope !11, !noalias !8
  br label %153

153:                                              ; preds = %132, %135
  %154 = icmp eq i64 %53, %82
  br i1 %154, label %207, label %55

155:                                              ; preds = %44
  %156 = add nsw i32 %46, 1
  %157 = icmp ult i32 %156, %1
  br i1 %157, label %158, label %207

158:                                              ; preds = %155, %158
  %159 = phi i32 [ %188, %158 ], [ %156, %155 ]
  %160 = phi i32 [ %187, %158 ], [ %46, %155 ]
  %161 = sub i32 %160, %46
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = shl nuw i16 %165, 8
  %167 = add nuw nsw i32 %161, 1
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i16
  %172 = or i16 %166, %171
  %173 = zext i32 %160 to i64
  %174 = getelementptr inbounds i8, i8* %0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i16
  %177 = shl nuw i16 %176, 8
  %178 = zext i32 %159 to i64
  %179 = getelementptr inbounds i8, i8* %0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = or i16 %177, %181
  %183 = add i16 %182, %172
  %184 = lshr i16 %183, 8
  %185 = trunc i16 %184 to i8
  store i8 %185, i8* %174, align 1
  %186 = trunc i16 %183 to i8
  store i8 %186, i8* %179, align 1
  %187 = add i32 %160, 2
  %188 = add i32 %160, 3
  %189 = icmp ult i32 %188, %1
  br i1 %189, label %158, label %207

190:                                              ; preds = %69, %190
  %191 = phi i64 [ %205, %190 ], [ %70, %69 ]
  %192 = sub nuw nsw i64 %191, %51
  %193 = getelementptr inbounds i8, i8* %0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = getelementptr inbounds i8, i8* %0, i64 %191
  %196 = load i8, i8* %195, align 1
  %197 = add i8 %196, %194
  store i8 %197, i8* %195, align 1
  %198 = add nuw nsw i64 %191, 1
  %199 = sub nuw nsw i64 %198, %51
  %200 = getelementptr inbounds i8, i8* %0, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = getelementptr inbounds i8, i8* %0, i64 %198
  %203 = load i8, i8* %202, align 1
  %204 = add i8 %203, %201
  store i8 %204, i8* %202, align 1
  %205 = add nuw nsw i64 %191, 2
  %206 = icmp eq i64 %205, %52
  br i1 %206, label %207, label %190, !llvm.loop !15

207:                                              ; preds = %69, %190, %158, %18, %153, %48, %155, %12
  ret void
}

declare i32 @Cr_z_compress(i8*, i64*, i8*, i64) local_unnamed_addr #2

declare i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32, i32, i32) local_unnamed_addr #2

declare void @_ZN7fxcodec15ScanlineDecoderC2Eiiiiiij(%"class.fxcodec::ScanlineDecoder"*, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #14
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %struct.z_stream_s*, %struct.z_stream_s** %8, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %8, align 8
  %10 = icmp eq %struct.z_stream_s* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %9) #14
  %13 = bitcast %struct.z_stream_s* %9 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %13) #14
  br label %14

14:                                               ; preds = %7, %11
  %15 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %15) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderD0Ev(%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #14
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %struct.z_stream_s*, %struct.z_stream_s** %8, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %8, align 8
  %10 = icmp eq %struct.z_stream_s* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %9) #14
  %13 = bitcast %struct.z_stream_s* %9 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %13) #14
  br label %14

14:                                               ; preds = %7, %11
  %15 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %15) #14
  %16 = bitcast %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #13
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder12GetSrcOffsetEv(%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* nocapture readonly) unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %struct.z_stream_s*, %struct.z_stream_s** %2, align 8
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %3, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = tail call i1 @llvm.is.constant.i64(i64 %5) #14
  %7 = icmp ult i64 %5, 4294967296
  %8 = trunc i64 %5 to i32
  %9 = select i1 %7, i32 %8, i32 -1
  %10 = icmp ult i64 %5, 4294967295
  %11 = select i1 %10, i64 %5, i64 4294967295
  %12 = trunc i64 %11 to i32
  %13 = select i1 %6, i32 %12, i32 %9
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder8v_RewindEv(%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 112) #14
  %3 = bitcast i8* %2 to %struct.z_stream_s*
  %4 = getelementptr inbounds i8, i8* %2, i64 64
  %5 = bitcast i8* %4 to i8* (i8*, i32, i32)**
  store i8* (i8*, i32, i32)* @_ZL13my_alloc_funcPvjj, i8* (i8*, i32, i32)** %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 72
  %7 = bitcast i8* %6 to void (i8*, i8*)**
  store void (i8*, i8*)* @_ZL12my_free_funcPvS_, void (i8*, i8*)** %7, align 8
  %8 = tail call i32 @Cr_z_inflateInit_(%struct.z_stream_s* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 112) #14
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %struct.z_stream_s*, %struct.z_stream_s** %9, align 8
  %11 = bitcast %struct.z_stream_s** %9 to i8**
  store i8* %2, i8** %11, align 8
  %12 = icmp eq %struct.z_stream_s* %10, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %1
  %14 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %10) #14
  %15 = bitcast %struct.z_stream_s* %10 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %15) #14
  %16 = load %struct.z_stream_s*, %struct.z_stream_s** %9, align 8
  br label %17

17:                                               ; preds = %1, %13
  %18 = phi %struct.z_stream_s* [ %3, %1 ], [ %16, %13 ]
  %19 = icmp eq %struct.z_stream_s* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 2
  %22 = bitcast %"class.pdfium::span"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %struct.z_stream_s* %18 to i64*
  store i64 %23, i64* %26, align 8
  %27 = trunc i64 %25 to i32
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %18, i64 0, i32 1
  store i32 %27, i32* %28, align 8
  br label %29

29:                                               ; preds = %17, %20
  %30 = phi i1 [ true, %20 ], [ false, %17 ]
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZN7fxcodec12_GLOBAL__N_120FlateScanlineDecoder13v_GetNextLineEv(%"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %struct.z_stream_s*, %struct.z_stream_s** %2, align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlateScanlineDecoder"* %0, i64 0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %3, i64 0, i32 3
  store i8* %5, i8** %8, align 8
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %3, i64 0, i32 4
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %3, i64 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = tail call i1 @llvm.is.constant.i64(i64 %11) #14
  %13 = icmp ult i64 %11, 4294967296
  %14 = trunc i64 %11 to i32
  %15 = select i1 %13, i32 %14, i32 -1
  %16 = icmp ult i64 %11, 4294967295
  %17 = select i1 %16, i64 %11, i64 4294967295
  %18 = trunc i64 %17 to i32
  %19 = select i1 %12, i32 %18, i32 %15
  %20 = icmp ult i32 %19, 1073741824
  %21 = select i1 %20, i32 %19, i32 1073741824
  %22 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %3, i32 2) #14
  %23 = load i64, i64* %10, align 8
  %24 = tail call i1 @llvm.is.constant.i64(i64 %23) #14
  %25 = icmp ult i64 %23, 4294967296
  %26 = trunc i64 %23 to i32
  %27 = select i1 %25, i32 %26, i32 -1
  %28 = icmp ult i64 %23, 4294967295
  %29 = select i1 %28, i64 %23, i64 4294967295
  %30 = trunc i64 %29 to i32
  %31 = select i1 %24, i32 %30, i32 %27
  %32 = icmp ult i32 %31, 1073741824
  %33 = select i1 %32, i32 %31, i32 1073741824
  %34 = sub nsw i32 %33, %21
  %35 = icmp ugt i32 %7, %34
  br i1 %35, label %36, label %41

36:                                               ; preds = %1
  %37 = zext i32 %34 to i64
  %38 = getelementptr inbounds i8, i8* %5, i64 %37
  %39 = sub i32 %7, %34
  %40 = zext i32 %39 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 0, i64 %40, i1 false) #14
  br label %41

41:                                               ; preds = %1, %36
  %42 = load i8*, i8** %4, align 8
  ret i8* %42
}

; Function Attrs: nounwind
declare void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 9, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 9, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #14
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %12) #14
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 7, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = ptrtoint i8* %20 to i64
  %24 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %20) #14
  br label %26

26:                                               ; preds = %18, %22
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_120FlateScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %27 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  tail call void @_Z7FX_FreePv(i8* nonnull %28) #14
  br label %31

31:                                               ; preds = %30, %26
  %32 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %33 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %32, align 8
  %34 = icmp eq %struct.z_stream_s* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %33) #14
  %37 = bitcast %struct.z_stream_s* %33 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %37) #14
  br label %38

38:                                               ; preds = %31, %35
  %39 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %39) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderD0Ev(%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*) unnamed_addr #0 align 2 {
  tail call void @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0) #14
  %2 = bitcast %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoder8v_RewindEv(%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 112) #14
  %3 = bitcast i8* %2 to %struct.z_stream_s*
  %4 = getelementptr inbounds i8, i8* %2, i64 64
  %5 = bitcast i8* %4 to i8* (i8*, i32, i32)**
  store i8* (i8*, i32, i32)* @_ZL13my_alloc_funcPvjj, i8* (i8*, i32, i32)** %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 72
  %7 = bitcast i8* %6 to void (i8*, i8*)**
  store void (i8*, i8*)* @_ZL12my_free_funcPvS_, void (i8*, i8*)** %7, align 8
  %8 = tail call i32 @Cr_z_inflateInit_(%struct.z_stream_s* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 112) #14
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %struct.z_stream_s*, %struct.z_stream_s** %9, align 8
  %11 = bitcast %struct.z_stream_s** %9 to i8**
  store i8* %2, i8** %11, align 8
  %12 = icmp eq %struct.z_stream_s* %10, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %1
  %14 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* nonnull %10) #14
  %15 = bitcast %struct.z_stream_s* %10 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %15) #14
  %16 = load %struct.z_stream_s*, %struct.z_stream_s** %9, align 8
  br label %17

17:                                               ; preds = %13, %1
  %18 = phi %struct.z_stream_s* [ %3, %1 ], [ %16, %13 ]
  %19 = icmp eq %struct.z_stream_s* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 2
  %22 = bitcast %"class.pdfium::span"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %struct.z_stream_s* %18 to i64*
  store i64 %23, i64* %26, align 8
  %27 = trunc i64 %25 to i32
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %18, i64 0, i32 1
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 6
  store i64 0, i64* %29, align 8
  br label %30

30:                                               ; preds = %17, %20
  %31 = phi i1 [ true, %20 ], [ false, %17 ]
  ret i1 %31
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZN7fxcodec12_GLOBAL__N_129FlatePredictorScanlineDecoder13v_GetNextLineEv(%"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %3, %5
  br i1 %6, label %7, label %112

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  switch i8 %9, label %257 [
    i8 2, label %10
    i8 1, label %65
  ]

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %12 = load %struct.z_stream_s*, %struct.z_stream_s** %11, align 8
  %13 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 9, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = add i32 %3, 1
  %16 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %12, i64 0, i32 3
  store i8* %14, i8** %16, align 8
  %17 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %12, i64 0, i32 4
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %12, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = tail call i1 @llvm.is.constant.i64(i64 %19) #14
  %21 = icmp ult i64 %19, 4294967296
  %22 = trunc i64 %19 to i32
  %23 = select i1 %21, i32 %22, i32 -1
  %24 = icmp ult i64 %19, 4294967295
  %25 = select i1 %24, i64 %19, i64 4294967295
  %26 = trunc i64 %25 to i32
  %27 = select i1 %20, i32 %26, i32 %23
  %28 = icmp ult i32 %27, 1073741824
  %29 = select i1 %28, i32 %27, i32 1073741824
  %30 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %12, i32 2) #14
  %31 = load i64, i64* %18, align 8
  %32 = tail call i1 @llvm.is.constant.i64(i64 %31) #14
  %33 = icmp ult i64 %31, 4294967296
  %34 = trunc i64 %31 to i32
  %35 = select i1 %33, i32 %34, i32 -1
  %36 = icmp ult i64 %31, 4294967295
  %37 = select i1 %36, i64 %31, i64 4294967295
  %38 = trunc i64 %37 to i32
  %39 = select i1 %32, i32 %38, i32 %35
  %40 = icmp ult i32 %39, 1073741824
  %41 = select i1 %40, i32 %39, i32 1073741824
  %42 = sub nsw i32 %41, %29
  %43 = icmp ugt i32 %15, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %10
  %45 = zext i32 %42 to i64
  %46 = getelementptr inbounds i8, i8* %14, i64 %45
  %47 = sub i32 %15, %42
  %48 = zext i32 %47 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 0, i64 %48, i1 false) #14
  br label %49

49:                                               ; preds = %44, %10
  %50 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i8*, i8** %13, align 8
  %53 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 7, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 4
  %60 = load i32, i32* %59, align 4
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_115PNG_PredictLineEPhPKhS3_iii(i8* %51, i8* %52, i8* %54, i32 %56, i32 %58, i32 %60) #14
  %61 = load i8*, i8** %53, align 8
  %62 = load i8*, i8** %50, align 8
  %63 = load i32, i32* %4, align 8
  %64 = zext i32 %63 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 %64, i1 false) #14
  br label %257

65:                                               ; preds = %7
  %66 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %67 = load %struct.z_stream_s*, %struct.z_stream_s** %66, align 8
  %68 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %67, i64 0, i32 3
  store i8* %69, i8** %70, align 8
  %71 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %67, i64 0, i32 4
  store i32 %3, i32* %71, align 8
  %72 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %67, i64 0, i32 5
  %73 = load i64, i64* %72, align 8
  %74 = tail call i1 @llvm.is.constant.i64(i64 %73) #14
  %75 = icmp ult i64 %73, 4294967296
  %76 = trunc i64 %73 to i32
  %77 = select i1 %75, i32 %76, i32 -1
  %78 = icmp ult i64 %73, 4294967295
  %79 = select i1 %78, i64 %73, i64 4294967295
  %80 = trunc i64 %79 to i32
  %81 = select i1 %74, i32 %80, i32 %77
  %82 = icmp ult i32 %81, 1073741824
  %83 = select i1 %82, i32 %81, i32 1073741824
  %84 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %67, i32 2) #14
  %85 = load i64, i64* %72, align 8
  %86 = tail call i1 @llvm.is.constant.i64(i64 %85) #14
  %87 = icmp ult i64 %85, 4294967296
  %88 = trunc i64 %85 to i32
  %89 = select i1 %87, i32 %88, i32 -1
  %90 = icmp ult i64 %85, 4294967295
  %91 = select i1 %90, i64 %85, i64 4294967295
  %92 = trunc i64 %91 to i32
  %93 = select i1 %86, i32 %92, i32 %89
  %94 = icmp ult i32 %93, 1073741824
  %95 = select i1 %94, i32 %93, i32 1073741824
  %96 = sub nsw i32 %95, %83
  %97 = icmp ugt i32 %3, %96
  br i1 %97, label %98, label %103

98:                                               ; preds = %65
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds i8, i8* %69, i64 %99
  %101 = sub i32 %3, %96
  %102 = zext i32 %101 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 0, i64 %102, i1 false) #14
  br label %103

103:                                              ; preds = %98, %65
  %104 = load i8*, i8** %68, align 8
  %105 = load i32, i32* %4, align 8
  %106 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0, i32 6
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0, i32 5
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_116TIFF_PredictLineEPhjiii(i8* %104, i32 %105, i32 %107, i32 %109, i32 %111) #14
  br label %257

112:                                              ; preds = %1
  %113 = zext i32 %3 to i64
  %114 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 6
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %115, %113
  %117 = select i1 %116, i64 %113, i64 %115
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %130, label %119

119:                                              ; preds = %112
  %120 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = zext i32 %5 to i64
  %123 = sub i64 %122, %115
  %124 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 %123
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %126, i64 %117, i1 false) #14
  %127 = load i64, i64* %114, align 8
  %128 = sub i64 %127, %117
  store i64 %128, i64* %114, align 8
  %129 = sub nsw i64 %113, %117
  br label %130

130:                                              ; preds = %119, %112
  %131 = phi i64 [ %129, %119 ], [ %113, %112 ]
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %257, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 1
  %135 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %136 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %137 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 3
  %138 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 2
  %139 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 4
  %140 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 9, i32 0, i32 0
  %141 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 7, i32 0, i32 0
  %142 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  br label %143

143:                                              ; preds = %238, %133
  %144 = phi i64 [ %131, %133 ], [ %255, %238 ]
  %145 = load i8, i8* %134, align 8
  switch i8 %145, label %238 [
    i8 2, label %146
    i8 1, label %195
  ]

146:                                              ; preds = %143
  %147 = load %struct.z_stream_s*, %struct.z_stream_s** %135, align 8
  %148 = load i8*, i8** %140, align 8
  %149 = load i32, i32* %4, align 8
  %150 = add i32 %149, 1
  %151 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %147, i64 0, i32 3
  store i8* %148, i8** %151, align 8
  %152 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %147, i64 0, i32 4
  store i32 %150, i32* %152, align 8
  %153 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %147, i64 0, i32 5
  %154 = load i64, i64* %153, align 8
  %155 = tail call i1 @llvm.is.constant.i64(i64 %154) #14
  %156 = icmp ult i64 %154, 4294967296
  %157 = trunc i64 %154 to i32
  %158 = select i1 %156, i32 %157, i32 -1
  %159 = icmp ult i64 %154, 4294967295
  %160 = select i1 %159, i64 %154, i64 4294967295
  %161 = trunc i64 %160 to i32
  %162 = select i1 %155, i32 %161, i32 %158
  %163 = icmp ult i32 %162, 1073741824
  %164 = select i1 %163, i32 %162, i32 1073741824
  %165 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %147, i32 2) #14
  %166 = load i64, i64* %153, align 8
  %167 = tail call i1 @llvm.is.constant.i64(i64 %166) #14
  %168 = icmp ult i64 %166, 4294967296
  %169 = trunc i64 %166 to i32
  %170 = select i1 %168, i32 %169, i32 -1
  %171 = icmp ult i64 %166, 4294967295
  %172 = select i1 %171, i64 %166, i64 4294967295
  %173 = trunc i64 %172 to i32
  %174 = select i1 %167, i32 %173, i32 %170
  %175 = icmp ult i32 %174, 1073741824
  %176 = select i1 %175, i32 %174, i32 1073741824
  %177 = sub nsw i32 %176, %164
  %178 = icmp ugt i32 %150, %177
  br i1 %178, label %179, label %184

179:                                              ; preds = %146
  %180 = zext i32 %177 to i64
  %181 = getelementptr inbounds i8, i8* %148, i64 %180
  %182 = sub i32 %150, %177
  %183 = zext i32 %182 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 0, i64 %183, i1 false) #14
  br label %184

184:                                              ; preds = %179, %146
  %185 = load i8*, i8** %136, align 8
  %186 = load i8*, i8** %140, align 8
  %187 = load i8*, i8** %141, align 8
  %188 = load i32, i32* %137, align 8
  %189 = load i32, i32* %138, align 4
  %190 = load i32, i32* %139, align 4
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_115PNG_PredictLineEPhPKhS3_iii(i8* %185, i8* %186, i8* %187, i32 %188, i32 %189, i32 %190) #14
  %191 = load i8*, i8** %141, align 8
  %192 = load i8*, i8** %136, align 8
  %193 = load i32, i32* %4, align 8
  %194 = zext i32 %193 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %192, i64 %194, i1 false) #14
  br label %238

195:                                              ; preds = %143
  %196 = load %struct.z_stream_s*, %struct.z_stream_s** %135, align 8
  %197 = load i8*, i8** %136, align 8
  %198 = load i32, i32* %4, align 8
  %199 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %196, i64 0, i32 3
  store i8* %197, i8** %199, align 8
  %200 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %196, i64 0, i32 4
  store i32 %198, i32* %200, align 8
  %201 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %196, i64 0, i32 5
  %202 = load i64, i64* %201, align 8
  %203 = tail call i1 @llvm.is.constant.i64(i64 %202) #14
  %204 = icmp ult i64 %202, 4294967296
  %205 = trunc i64 %202 to i32
  %206 = select i1 %204, i32 %205, i32 -1
  %207 = icmp ult i64 %202, 4294967295
  %208 = select i1 %207, i64 %202, i64 4294967295
  %209 = trunc i64 %208 to i32
  %210 = select i1 %203, i32 %209, i32 %206
  %211 = icmp ult i32 %210, 1073741824
  %212 = select i1 %211, i32 %210, i32 1073741824
  %213 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %196, i32 2) #14
  %214 = load i64, i64* %201, align 8
  %215 = tail call i1 @llvm.is.constant.i64(i64 %214) #14
  %216 = icmp ult i64 %214, 4294967296
  %217 = trunc i64 %214 to i32
  %218 = select i1 %216, i32 %217, i32 -1
  %219 = icmp ult i64 %214, 4294967295
  %220 = select i1 %219, i64 %214, i64 4294967295
  %221 = trunc i64 %220 to i32
  %222 = select i1 %215, i32 %221, i32 %218
  %223 = icmp ult i32 %222, 1073741824
  %224 = select i1 %223, i32 %222, i32 1073741824
  %225 = sub nsw i32 %224, %212
  %226 = icmp ugt i32 %198, %225
  br i1 %226, label %227, label %232

227:                                              ; preds = %195
  %228 = zext i32 %225 to i64
  %229 = getelementptr inbounds i8, i8* %197, i64 %228
  %230 = sub i32 %198, %225
  %231 = zext i32 %230 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %229, i8 0, i64 %231, i1 false) #14
  br label %232

232:                                              ; preds = %227, %195
  %233 = load i8*, i8** %136, align 8
  %234 = load i32, i32* %4, align 8
  %235 = load i32, i32* %137, align 8
  %236 = load i32, i32* %138, align 4
  %237 = load i32, i32* %139, align 4
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_116TIFF_PredictLineEPhjiii(i8* %233, i32 %234, i32 %235, i32 %236, i32 %237) #14
  br label %238

238:                                              ; preds = %232, %184, %143
  %239 = load i32, i32* %4, align 8
  %240 = zext i32 %239 to i64
  %241 = icmp ult i64 %144, %240
  %242 = select i1 %241, i64 %144, i64 %240
  %243 = load i8*, i8** %142, align 8
  %244 = load i32, i32* %2, align 8
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %243, i64 %245
  %247 = sub i64 0, %144
  %248 = getelementptr inbounds i8, i8* %246, i64 %247
  %249 = load i8*, i8** %136, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %248, i8* align 1 %249, i64 %242, i1 false) #14
  %250 = load i32, i32* %4, align 8
  %251 = zext i32 %250 to i64
  %252 = sub nsw i64 %251, %242
  %253 = load i64, i64* %114, align 8
  %254 = add i64 %252, %253
  store i64 %254, i64* %114, align 8
  %255 = sub i64 %144, %242
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %143

257:                                              ; preds = %238, %130, %103, %49, %7
  %258 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder", %"class.fxcodec::(anonymous namespace)::FlatePredictorScanlineDecoder"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %259 = load i8*, i8** %258, align 8
  ret i8* %259
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #14
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #15
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #14
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #14
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !16
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !19, !noalias !16
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !16
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !19, !noalias !16
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !16
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !19, !noalias !16
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !16
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !19, !noalias !16
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !21

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !16
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !19, !noalias !16
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !22

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !23

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #14
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7fxcodec12_GLOBAL__N_115PNG_PredictLineEPhPKhS3_iii(i8* nocapture, i8* nocapture readonly, i8* readonly, i32, i32, i32) unnamed_addr #0 {
  %7 = tail call i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32 %3, i32 %4, i32 %5) #14
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %7, 32
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %11, label %12, !prof !2

11:                                               ; preds = %6
  tail call void @llvm.trap() #14
  unreachable

12:                                               ; preds = %6
  %13 = mul nsw i32 %4, %3
  %14 = add nsw i32 %13, 7
  %15 = sdiv i32 %14, 8
  %16 = load i8, i8* %1, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %12
  %19 = icmp eq i64 %9, 0
  br i1 %19, label %120, label %20

20:                                               ; preds = %18
  %21 = icmp eq i8* %2, null
  %22 = icmp eq i8* %2, null
  %23 = zext i32 %15 to i64
  br label %26

24:                                               ; preds = %12
  %25 = getelementptr inbounds i8, i8* %1, i64 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %25, i64 %9, i1 false)
  br label %120

26:                                               ; preds = %116, %20
  %27 = phi i64 [ 0, %20 ], [ %28, %116 ]
  %28 = add nuw nsw i64 %27, 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %28
  %30 = load i8, i8* %29, align 1
  switch i8 %16, label %116 [
    i8 1, label %31
    i8 2, label %42
    i8 3, label %49
    i8 4, label %70
  ]

31:                                               ; preds = %26
  %32 = icmp ult i64 %27, %23
  br i1 %32, label %39, label %33

33:                                               ; preds = %31
  %34 = trunc i64 %27 to i32
  %35 = sub i32 %34, %15
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %0, i64 %36
  %38 = load i8, i8* %37, align 1
  br label %39

39:                                               ; preds = %31, %33
  %40 = phi i8 [ %38, %33 ], [ 0, %31 ]
  %41 = add i8 %40, %30
  br label %116

42:                                               ; preds = %26
  br i1 %22, label %46, label %43

43:                                               ; preds = %42
  %44 = getelementptr inbounds i8, i8* %2, i64 %27
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %42, %43
  %47 = phi i8 [ %45, %43 ], [ 0, %42 ]
  %48 = add i8 %47, %30
  br label %116

49:                                               ; preds = %26
  %50 = icmp ult i64 %27, %23
  br i1 %50, label %57, label %51

51:                                               ; preds = %49
  %52 = trunc i64 %27 to i32
  %53 = sub i32 %52, %15
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %0, i64 %54
  %56 = load i8, i8* %55, align 1
  br label %57

57:                                               ; preds = %49, %51
  %58 = phi i8 [ %56, %51 ], [ 0, %49 ]
  br i1 %22, label %62, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds i8, i8* %2, i64 %27
  %61 = load i8, i8* %60, align 1
  br label %62

62:                                               ; preds = %57, %59
  %63 = phi i8 [ %61, %59 ], [ 0, %57 ]
  %64 = zext i8 %63 to i32
  %65 = zext i8 %58 to i32
  %66 = add nuw nsw i32 %64, %65
  %67 = lshr i32 %66, 1
  %68 = trunc i32 %67 to i8
  %69 = add i8 %30, %68
  br label %116

70:                                               ; preds = %26
  %71 = icmp uge i64 %27, %23
  br i1 %71, label %72, label %78

72:                                               ; preds = %70
  %73 = trunc i64 %27 to i32
  %74 = sub i32 %73, %15
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %0, i64 %75
  %77 = load i8, i8* %76, align 1
  br label %78

78:                                               ; preds = %72, %70
  %79 = phi i8 [ %77, %72 ], [ 0, %70 ]
  br i1 %21, label %89, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %2, i64 %27
  %82 = load i8, i8* %81, align 1
  br i1 %71, label %83, label %89

83:                                               ; preds = %80
  %84 = trunc i64 %27 to i32
  %85 = sub i32 %84, %15
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %2, i64 %86
  %88 = load i8, i8* %87, align 1
  br label %89

89:                                               ; preds = %78, %83, %80
  %90 = phi i8 [ %82, %83 ], [ %82, %80 ], [ 0, %78 ]
  %91 = phi i8 [ %88, %83 ], [ 0, %80 ], [ 0, %78 ]
  %92 = zext i8 %79 to i32
  %93 = zext i8 %90 to i32
  %94 = zext i8 %91 to i32
  %95 = add nuw nsw i32 %93, %92
  %96 = sub nsw i32 %95, %94
  %97 = sub nsw i32 %96, %92
  %98 = icmp slt i32 %97, 0
  %99 = sub nsw i32 0, %97
  %100 = select i1 %98, i32 %99, i32 %97
  %101 = sub nsw i32 %96, %93
  %102 = icmp slt i32 %101, 0
  %103 = sub nsw i32 0, %101
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = sub nsw i32 %96, %94
  %106 = icmp slt i32 %105, 0
  %107 = sub nsw i32 0, %105
  %108 = select i1 %106, i32 %107, i32 %105
  %109 = icmp sgt i32 %100, %104
  %110 = icmp sgt i32 %100, %108
  %111 = or i1 %109, %110
  %112 = icmp sgt i32 %104, %108
  %113 = select i1 %112, i8 %91, i8 %90
  %114 = select i1 %111, i8 %113, i8 %79
  %115 = add i8 %114, %30
  br label %116

116:                                              ; preds = %26, %89, %62, %46, %39
  %117 = phi i8 [ %115, %89 ], [ %69, %62 ], [ %48, %46 ], [ %41, %39 ], [ %30, %26 ]
  %118 = getelementptr inbounds i8, i8* %0, i64 %27
  store i8 %117, i8* %118, align 1
  %119 = icmp eq i64 %28, %9
  br i1 %119, label %120, label %26

120:                                              ; preds = %116, %18, %24
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2144182415}
!5 = !{i32 -2144182394}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !14}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !14}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !14}
