; ModuleID = '../../chrome/browser/ui/tabs/tab_group.cc'
source_filename = "../../chrome/browser/ui/tabs/tab_group.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.TabGroup = type <{ %class.TabGroupController*, %"class.tab_groups::TabGroupId", %"class.std::__1::unique_ptr", i32, i8, [3 x i8] }>
%"class.tab_groups::TabGroupId" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.tab_groups::TabGroupVisualData"* }
%class.TabGroupController = type { i32 (...)** }
%"class.tab_groups::TabGroupVisualData" = type <{ %"class.std::__1::basic_string", i32, i8, [3 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.TabGroupChange::VisualsChange" = type { %"struct.TabGroupChange::Delta", %"class.tab_groups::TabGroupVisualData"*, %"class.tab_groups::TabGroupVisualData"* }
%"struct.TabGroupChange::Delta" = type { i32 (...)** }
%"class.content::WebContents" = type <{ %"class.content::PageNavigator", %"class.base::SupportsUserData.base", [7 x i8] }>
%"class.content::PageNavigator" = type { i32 (...)** }
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::SupportsUserData" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.base::SupportsUserData::Data" = type { i32 (...)** }
%class.TabUIHelper = type { %"class.content::WebContentsObserver", %"class.content::WebContentsUserData", i8, i8, i8, %"class.std::__1::unique_ptr.12", %"class.base::CancelableTaskTracker", %"class.base::WeakPtrFactory.39" }
%"class.content::WebContentsObserver" = type { %"class.IPC::Listener", %"class.content::WebContents"* }
%"class.IPC::Listener" = type { i32 (...)** }
%"class.content::WebContentsUserData" = type { %"class.base::SupportsUserData::Data" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.TabUIHelper::TabUIData"* }
%"struct.TabUIHelper::TabUIData" = type { %"class.std::__1::basic_string", %"class.gfx::Image" }
%"class.gfx::Image" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::internal::ImageStorage"* }
%"class.gfx::internal::ImageStorage" = type opaque
%"class.base::CancelableTaskTracker" = type { %"class.base::small_map", i64, %"class.base::SequenceCheckerDoNothing", %"class.base::WeakPtr", %"class.base::WeakPtrFactory" }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.18 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.18 = type { [4 x %"struct.std::__1::pair"] }
%"struct.std::__1::pair" = type { i64, %class.scoped_refptr.19 }
%class.scoped_refptr.19 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type opaque
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.31 }
%class.scoped_refptr.31 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.33" }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i8 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.38 }
%class.scoped_refptr.38 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtrFactory.39" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.41" = type { %"class.absl::optional_internal::optional_data.42" }
%"class.absl::optional_internal::optional_data.42" = type { %"class.absl::optional_internal::optional_data_base.43" }
%"class.absl::optional_internal::optional_data_base.43" = type { %"class.absl::optional_internal::optional_data_dtor_base.44" }
%"class.absl::optional_internal::optional_data_dtor_base.44" = type { i8, %union.anon.45 }
%union.anon.45 = type { %"class.tab_groups::TabGroupId" }

@_ZN11TabUIHelper12kUserDataKeyE = external constant i32, align 4

@_ZN8TabGroupC1EP18TabGroupControllerRKN10tab_groups10TabGroupIdERKNS2_18TabGroupVisualDataE = hidden unnamed_addr alias void (%class.TabGroup*, %class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"class.tab_groups::TabGroupVisualData"*), void (%class.TabGroup*, %class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"class.tab_groups::TabGroupVisualData"*)* @_ZN8TabGroupC2EP18TabGroupControllerRKN10tab_groups10TabGroupIdERKNS2_18TabGroupVisualDataE
@_ZN8TabGroupD1Ev = hidden unnamed_addr alias void (%class.TabGroup*), void (%class.TabGroup*)* @_ZN8TabGroupD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8TabGroupC2EP18TabGroupControllerRKN10tab_groups10TabGroupIdERKNS2_18TabGroupVisualDataE(%class.TabGroup*, %class.TabGroupController*, %"class.tab_groups::TabGroupId"* dereferenceable(16), %"class.tab_groups::TabGroupVisualData"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  store %class.TabGroupController* %1, %class.TabGroupController** %5, align 8
  %6 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  tail call void @_ZN10tab_groups10TabGroupIdC1ERKS0_(%"class.tab_groups::TabGroupId"* %6, %"class.tab_groups::TabGroupId"* dereferenceable(16) %2) #9
  %7 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 4
  store i8 0, i8* %10, align 4
  %11 = tail call i8* @_Znwm(i64 32) #10
  %12 = bitcast %"class.tab_groups::TabGroupVisualData"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %4
  %17 = bitcast %"class.tab_groups::TabGroupVisualData"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %17, i64 24, i1 false) #9
  br label %201

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  %21 = bitcast i16* %20 to i8*
  %22 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %23, 11
  br i1 %24, label %25, label %28

25:                                               ; preds = %18
  %26 = trunc i64 %23 to i8
  %27 = getelementptr inbounds i8, i8* %11, i64 23
  store i8 %26, i8* %27, align 1
  br label %46

28:                                               ; preds = %18
  %29 = icmp ugt i64 %23, 9223372036854775791
  br i1 %29, label %30, label %32

30:                                               ; preds = %28
  %31 = bitcast i8* %11 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %31) #11
  unreachable

32:                                               ; preds = %28
  %33 = add nuw nsw i64 %23, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #11
  unreachable

37:                                               ; preds = %32
  %38 = shl i64 %34, 1
  %39 = tail call i8* @_Znwm(i64 %38) #10
  %40 = bitcast i8* %11 to i8**
  store i8* %39, i8** %40, align 8
  %41 = or i64 %34, -9223372036854775808
  %42 = getelementptr inbounds i8, i8* %11, i64 16
  %43 = bitcast i8* %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds i8, i8* %11, i64 8
  %45 = bitcast i8* %44 to i64*
  store i64 %23, i64* %45, align 8
  br label %46

46:                                               ; preds = %37, %25
  %47 = phi i8* [ %11, %25 ], [ %39, %37 ]
  %48 = bitcast i8* %47 to i16*
  %49 = add nuw nsw i64 %23, 1
  %50 = add i64 %23, 1
  %51 = icmp ult i64 %50, 16
  br i1 %51, label %144, label %52

52:                                               ; preds = %46
  %53 = shl i64 %23, 1
  %54 = add i64 %53, 2
  %55 = getelementptr i8, i8* %47, i64 %54
  %56 = add i64 %23, 1
  %57 = getelementptr i16, i16* %20, i64 %56
  %58 = bitcast i16* %57 to i8*
  %59 = icmp ult i8* %47, %58
  %60 = icmp ugt i8* %55, %21
  %61 = and i1 %59, %60
  br i1 %61, label %144, label %62

62:                                               ; preds = %52
  %63 = and i64 %50, -16
  %64 = sub i64 %49, %63
  %65 = getelementptr i16, i16* %20, i64 %63
  %66 = getelementptr i16, i16* %48, i64 %63
  %67 = add i64 %63, -16
  %68 = lshr exact i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp ult i64 %67, 48
  br i1 %71, label %123, label %72

72:                                               ; preds = %62
  %73 = sub nsw i64 %69, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %120, %74 ]
  %76 = phi i64 [ %73, %72 ], [ %121, %74 ]
  %77 = getelementptr i16, i16* %20, i64 %75
  %78 = getelementptr i16, i16* %48, i64 %75
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !2
  %81 = getelementptr i16, i16* %77, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !2
  %84 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !5, !noalias !2
  %85 = getelementptr i16, i16* %78, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !5, !noalias !2
  %87 = or i64 %75, 16
  %88 = getelementptr i16, i16* %20, i64 %87
  %89 = getelementptr i16, i16* %48, i64 %87
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !2
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !2
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !5, !noalias !2
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !5, !noalias !2
  %98 = or i64 %75, 32
  %99 = getelementptr i16, i16* %20, i64 %98
  %100 = getelementptr i16, i16* %48, i64 %98
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !2
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !2
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !5, !noalias !2
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !5, !noalias !2
  %109 = or i64 %75, 48
  %110 = getelementptr i16, i16* %20, i64 %109
  %111 = getelementptr i16, i16* %48, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !2
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !2
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !5, !noalias !2
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !5, !noalias !2
  %120 = add i64 %75, 64
  %121 = add i64 %76, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %74, !llvm.loop !7

123:                                              ; preds = %74, %62
  %124 = phi i64 [ 0, %62 ], [ %120, %74 ]
  %125 = icmp eq i64 %70, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %139, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %140, %126 ], [ %70, %123 ]
  %129 = getelementptr i16, i16* %20, i64 %127
  %130 = getelementptr i16, i16* %48, i64 %127
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !2
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !2
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !5, !noalias !2
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !5, !noalias !2
  %139 = add i64 %127, 16
  %140 = add i64 %128, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %126, !llvm.loop !9

142:                                              ; preds = %126, %123
  %143 = icmp eq i64 %50, %63
  br i1 %143, label %197, label %144

144:                                              ; preds = %142, %52, %46
  %145 = phi i64 [ %49, %52 ], [ %49, %46 ], [ %64, %142 ]
  %146 = phi i16* [ %20, %52 ], [ %20, %46 ], [ %65, %142 ]
  %147 = phi i16* [ %48, %52 ], [ %48, %46 ], [ %66, %142 ]
  %148 = add i64 %145, -1
  %149 = and i64 %145, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %144, %151
  %152 = phi i64 [ %157, %151 ], [ %145, %144 ]
  %153 = phi i16* [ %159, %151 ], [ %146, %144 ]
  %154 = phi i16* [ %158, %151 ], [ %147, %144 ]
  %155 = phi i64 [ %160, %151 ], [ %149, %144 ]
  %156 = load i16, i16* %153, align 2
  store i16 %156, i16* %154, align 2
  %157 = add i64 %152, -1
  %158 = getelementptr inbounds i16, i16* %154, i64 1
  %159 = getelementptr inbounds i16, i16* %153, i64 1
  %160 = add i64 %155, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !11

162:                                              ; preds = %151, %144
  %163 = phi i64 [ %145, %144 ], [ %157, %151 ]
  %164 = phi i16* [ %146, %144 ], [ %159, %151 ]
  %165 = phi i16* [ %147, %144 ], [ %158, %151 ]
  %166 = icmp ult i64 %148, 7
  br i1 %166, label %197, label %167

167:                                              ; preds = %162, %167
  %168 = phi i64 [ %193, %167 ], [ %163, %162 ]
  %169 = phi i16* [ %195, %167 ], [ %164, %162 ]
  %170 = phi i16* [ %194, %167 ], [ %165, %162 ]
  %171 = load i16, i16* %169, align 2
  store i16 %171, i16* %170, align 2
  %172 = getelementptr inbounds i16, i16* %170, i64 1
  %173 = getelementptr inbounds i16, i16* %169, i64 1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %170, i64 2
  %176 = getelementptr inbounds i16, i16* %169, i64 2
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %170, i64 3
  %179 = getelementptr inbounds i16, i16* %169, i64 3
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %170, i64 4
  %182 = getelementptr inbounds i16, i16* %169, i64 4
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %170, i64 5
  %185 = getelementptr inbounds i16, i16* %169, i64 5
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %170, i64 6
  %188 = getelementptr inbounds i16, i16* %169, i64 6
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %170, i64 7
  %191 = getelementptr inbounds i16, i16* %169, i64 7
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = add i64 %168, -8
  %194 = getelementptr inbounds i16, i16* %170, i64 8
  %195 = getelementptr inbounds i16, i16* %169, i64 8
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %197, label %167, !llvm.loop !12

197:                                              ; preds = %162, %167, %142
  %198 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %199 = load %"class.tab_groups::TabGroupVisualData"*, %"class.tab_groups::TabGroupVisualData"** %198, align 8
  %200 = bitcast %"class.tab_groups::TabGroupVisualData"* %199 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  br label %201

201:                                              ; preds = %197, %16
  %202 = phi %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* [ %200, %197 ], [ null, %16 ]
  %203 = phi %"class.tab_groups::TabGroupVisualData"* [ %199, %197 ], [ null, %16 ]
  %204 = getelementptr inbounds i8, i8* %11, i64 24
  %205 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %3, i64 0, i32 1
  %206 = bitcast i32* %205 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %204, i8* align 8 %206, i64 5, i1 false) #9
  %207 = ptrtoint i8* %11 to i64
  store i64 %207, i64* %8, align 8
  %208 = icmp eq %"class.tab_groups::TabGroupVisualData"* %203, null
  br i1 %208, label %218, label %209

209:                                              ; preds = %201
  %210 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %202, i64 0, i32 1, i32 1
  %211 = load i8, i8* %210, align 1
  %212 = icmp slt i8 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %209
  %214 = bitcast %"class.tab_groups::TabGroupVisualData"* %203 to i8**
  %215 = load i8*, i8** %214, align 8
  tail call void @_ZdlPv(i8* %215) #10
  br label %216

216:                                              ; preds = %213, %209
  %217 = bitcast %"class.tab_groups::TabGroupVisualData"* %203 to i8*
  tail call void @_ZdlPv(i8* %217) #10
  br label %218

218:                                              ; preds = %216, %201
  ret void
}

declare void @_ZN10tab_groups10TabGroupIdC1ERKS0_(%"class.tab_groups::TabGroupId"*, %"class.tab_groups::TabGroupId"* dereferenceable(16)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8TabGroupD2Ev(%class.TabGroup* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.tab_groups::TabGroupVisualData"*, %"class.tab_groups::TabGroupVisualData"** %2, align 8
  store %"class.tab_groups::TabGroupVisualData"* null, %"class.tab_groups::TabGroupVisualData"** %2, align 8
  %4 = icmp eq %"class.tab_groups::TabGroupVisualData"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.tab_groups::TabGroupVisualData"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = bitcast %"class.tab_groups::TabGroupVisualData"* %3 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %10, %5
  %14 = bitcast %"class.tab_groups::TabGroupVisualData"* %3 to i8*
  tail call void @_ZdlPv(i8* %14) #10
  br label %15

15:                                               ; preds = %1, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8TabGroup13SetVisualDataERKN10tab_groups18TabGroupVisualDataEb(%class.TabGroup*, %"class.tab_groups::TabGroupVisualData"* dereferenceable(32), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.TabGroupChange::VisualsChange", align 8
  %5 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  %8 = load %"class.tab_groups::TabGroupVisualData"*, %"class.tab_groups::TabGroupVisualData"** %6, align 8
  store %"class.tab_groups::TabGroupVisualData"* null, %"class.tab_groups::TabGroupVisualData"** %6, align 8
  %9 = bitcast %"struct.TabGroupChange::VisualsChange"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"struct.TabGroupChange::VisualsChange", %"struct.TabGroupChange::VisualsChange"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"struct.TabGroupChange::VisualsChange", %"struct.TabGroupChange::VisualsChange"* %4, i64 0, i32 2
  %12 = bitcast %"struct.TabGroupChange::VisualsChange"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  call void @_ZN14TabGroupChange13VisualsChangeC1Ev(%"struct.TabGroupChange::VisualsChange"* nonnull %4) #9
  store %"class.tab_groups::TabGroupVisualData"* %8, %"class.tab_groups::TabGroupVisualData"** %10, align 8
  store %"class.tab_groups::TabGroupVisualData"* %1, %"class.tab_groups::TabGroupVisualData"** %11, align 8
  %13 = call i8* @_Znwm(i64 32) #10
  %14 = bitcast %"class.tab_groups::TabGroupVisualData"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %3
  %19 = bitcast %"class.tab_groups::TabGroupVisualData"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 %19, i64 24, i1 false) #9
  br label %199

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i16*, i16** %21, align 8
  %23 = bitcast i16* %22 to i8*
  %24 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %25, 11
  br i1 %26, label %27, label %30

27:                                               ; preds = %20
  %28 = trunc i64 %25 to i8
  %29 = getelementptr inbounds i8, i8* %13, i64 23
  store i8 %28, i8* %29, align 1
  br label %48

30:                                               ; preds = %20
  %31 = icmp ugt i64 %25, 9223372036854775791
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = bitcast i8* %13 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %33) #11
  unreachable

34:                                               ; preds = %30
  %35 = add nuw nsw i64 %25, 8
  %36 = and i64 %35, -8
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call void @abort() #11
  unreachable

39:                                               ; preds = %34
  %40 = shl i64 %36, 1
  %41 = call i8* @_Znwm(i64 %40) #10
  %42 = bitcast i8* %13 to i8**
  store i8* %41, i8** %42, align 8
  %43 = or i64 %36, -9223372036854775808
  %44 = getelementptr inbounds i8, i8* %13, i64 16
  %45 = bitcast i8* %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %13, i64 8
  %47 = bitcast i8* %46 to i64*
  store i64 %25, i64* %47, align 8
  br label %48

48:                                               ; preds = %39, %27
  %49 = phi i8* [ %13, %27 ], [ %41, %39 ]
  %50 = bitcast i8* %49 to i16*
  %51 = add nuw nsw i64 %25, 1
  %52 = add i64 %25, 1
  %53 = icmp ult i64 %52, 16
  br i1 %53, label %146, label %54

54:                                               ; preds = %48
  %55 = shl i64 %25, 1
  %56 = add i64 %55, 2
  %57 = getelementptr i8, i8* %49, i64 %56
  %58 = add i64 %25, 1
  %59 = getelementptr i16, i16* %22, i64 %58
  %60 = bitcast i16* %59 to i8*
  %61 = icmp ult i8* %49, %60
  %62 = icmp ugt i8* %57, %23
  %63 = and i1 %61, %62
  br i1 %63, label %146, label %64

64:                                               ; preds = %54
  %65 = and i64 %52, -16
  %66 = sub i64 %51, %65
  %67 = getelementptr i16, i16* %22, i64 %65
  %68 = getelementptr i16, i16* %50, i64 %65
  %69 = add i64 %65, -16
  %70 = lshr exact i64 %69, 4
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 3
  %73 = icmp ult i64 %69, 48
  br i1 %73, label %125, label %74

74:                                               ; preds = %64
  %75 = sub nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %122, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %123, %76 ]
  %79 = getelementptr i16, i16* %22, i64 %77
  %80 = getelementptr i16, i16* %50, i64 %77
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !13
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !13
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !16, !noalias !13
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !16, !noalias !13
  %89 = or i64 %77, 16
  %90 = getelementptr i16, i16* %22, i64 %89
  %91 = getelementptr i16, i16* %50, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !13
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !13
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !16, !noalias !13
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !16, !noalias !13
  %100 = or i64 %77, 32
  %101 = getelementptr i16, i16* %22, i64 %100
  %102 = getelementptr i16, i16* %50, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !13
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !13
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !16, !noalias !13
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !16, !noalias !13
  %111 = or i64 %77, 48
  %112 = getelementptr i16, i16* %22, i64 %111
  %113 = getelementptr i16, i16* %50, i64 %111
  %114 = bitcast i16* %112 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !13
  %116 = getelementptr i16, i16* %112, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !13
  %119 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %119, align 2, !alias.scope !16, !noalias !13
  %120 = getelementptr i16, i16* %113, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %121, align 2, !alias.scope !16, !noalias !13
  %122 = add i64 %77, 64
  %123 = add i64 %78, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %76, !llvm.loop !18

125:                                              ; preds = %76, %64
  %126 = phi i64 [ 0, %64 ], [ %122, %76 ]
  %127 = icmp eq i64 %72, 0
  br i1 %127, label %144, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %141, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %142, %128 ], [ %72, %125 ]
  %131 = getelementptr i16, i16* %22, i64 %129
  %132 = getelementptr i16, i16* %50, i64 %129
  %133 = bitcast i16* %131 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !13
  %135 = getelementptr i16, i16* %131, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !13
  %138 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !16, !noalias !13
  %139 = getelementptr i16, i16* %132, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2, !alias.scope !16, !noalias !13
  %141 = add i64 %129, 16
  %142 = add i64 %130, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %128, !llvm.loop !19

144:                                              ; preds = %128, %125
  %145 = icmp eq i64 %52, %65
  br i1 %145, label %199, label %146

146:                                              ; preds = %144, %54, %48
  %147 = phi i64 [ %51, %54 ], [ %51, %48 ], [ %66, %144 ]
  %148 = phi i16* [ %22, %54 ], [ %22, %48 ], [ %67, %144 ]
  %149 = phi i16* [ %50, %54 ], [ %50, %48 ], [ %68, %144 ]
  %150 = add i64 %147, -1
  %151 = and i64 %147, 7
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %164, label %153

153:                                              ; preds = %146, %153
  %154 = phi i64 [ %159, %153 ], [ %147, %146 ]
  %155 = phi i16* [ %161, %153 ], [ %148, %146 ]
  %156 = phi i16* [ %160, %153 ], [ %149, %146 ]
  %157 = phi i64 [ %162, %153 ], [ %151, %146 ]
  %158 = load i16, i16* %155, align 2
  store i16 %158, i16* %156, align 2
  %159 = add i64 %154, -1
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = getelementptr inbounds i16, i16* %155, i64 1
  %162 = add i64 %157, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %153, !llvm.loop !20

164:                                              ; preds = %153, %146
  %165 = phi i64 [ %147, %146 ], [ %159, %153 ]
  %166 = phi i16* [ %148, %146 ], [ %161, %153 ]
  %167 = phi i16* [ %149, %146 ], [ %160, %153 ]
  %168 = icmp ult i64 %150, 7
  br i1 %168, label %199, label %169

169:                                              ; preds = %164, %169
  %170 = phi i64 [ %195, %169 ], [ %165, %164 ]
  %171 = phi i16* [ %197, %169 ], [ %166, %164 ]
  %172 = phi i16* [ %196, %169 ], [ %167, %164 ]
  %173 = load i16, i16* %171, align 2
  store i16 %173, i16* %172, align 2
  %174 = getelementptr inbounds i16, i16* %172, i64 1
  %175 = getelementptr inbounds i16, i16* %171, i64 1
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %172, i64 2
  %178 = getelementptr inbounds i16, i16* %171, i64 2
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %172, i64 3
  %181 = getelementptr inbounds i16, i16* %171, i64 3
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %172, i64 4
  %184 = getelementptr inbounds i16, i16* %171, i64 4
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %172, i64 5
  %187 = getelementptr inbounds i16, i16* %171, i64 5
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %172, i64 6
  %190 = getelementptr inbounds i16, i16* %171, i64 6
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds i16, i16* %172, i64 7
  %193 = getelementptr inbounds i16, i16* %171, i64 7
  %194 = load i16, i16* %193, align 2
  store i16 %194, i16* %192, align 2
  %195 = add i64 %170, -8
  %196 = getelementptr inbounds i16, i16* %172, i64 8
  %197 = getelementptr inbounds i16, i16* %171, i64 8
  %198 = icmp eq i64 %195, 0
  br i1 %198, label %199, label %169, !llvm.loop !21

199:                                              ; preds = %164, %169, %144, %18
  %200 = getelementptr inbounds i8, i8* %13, i64 24
  %201 = getelementptr inbounds %"class.tab_groups::TabGroupVisualData", %"class.tab_groups::TabGroupVisualData"* %1, i64 0, i32 1
  %202 = bitcast i32* %201 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %202, i64 5, i1 false) #9
  %203 = ptrtoint i8* %13 to i64
  %204 = load %"class.tab_groups::TabGroupVisualData"*, %"class.tab_groups::TabGroupVisualData"** %6, align 8
  store i64 %203, i64* %7, align 8
  %205 = icmp eq %"class.tab_groups::TabGroupVisualData"* %204, null
  br i1 %205, label %216, label %206

206:                                              ; preds = %199
  %207 = bitcast %"class.tab_groups::TabGroupVisualData"* %204 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %208 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %207, i64 0, i32 1, i32 1
  %209 = load i8, i8* %208, align 1
  %210 = icmp slt i8 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %206
  %212 = bitcast %"class.tab_groups::TabGroupVisualData"* %204 to i8**
  %213 = load i8*, i8** %212, align 8
  call void @_ZdlPv(i8* %213) #10
  br label %214

214:                                              ; preds = %211, %206
  %215 = bitcast %"class.tab_groups::TabGroupVisualData"* %204 to i8*
  call void @_ZdlPv(i8* %215) #10
  br label %216

216:                                              ; preds = %214, %199
  %217 = zext i1 %2 to i8
  %218 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 4
  %219 = load i8, i8* %218, align 4, !range !22
  %220 = or i8 %219, %217
  store i8 %220, i8* %218, align 4
  %221 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %222 = load %class.TabGroupController*, %class.TabGroupController** %221, align 8
  %223 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %224 = bitcast %class.TabGroupController* %222 to void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)***
  %225 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)**, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*** %224, align 8
  %226 = getelementptr inbounds void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)** %225, i64 3
  %227 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)** %226, align 8
  call void %227(%class.TabGroupController* %222, %"class.tab_groups::TabGroupId"* dereferenceable(16) %223, %"struct.TabGroupChange::VisualsChange"* nonnull dereferenceable(24) %4) #9
  call void @_ZN14TabGroupChange13VisualsChangeD1Ev(%"struct.TabGroupChange::VisualsChange"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  %228 = icmp eq %"class.tab_groups::TabGroupVisualData"* %8, null
  br i1 %228, label %239, label %229

229:                                              ; preds = %216
  %230 = bitcast %"class.tab_groups::TabGroupVisualData"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %231 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %230, i64 0, i32 1, i32 1
  %232 = load i8, i8* %231, align 1
  %233 = icmp slt i8 %232, 0
  br i1 %233, label %234, label %237

234:                                              ; preds = %229
  %235 = bitcast %"class.tab_groups::TabGroupVisualData"* %8 to i8**
  %236 = load i8*, i8** %235, align 8
  call void @_ZdlPv(i8* %236) #10
  br label %237

237:                                              ; preds = %234, %229
  %238 = bitcast %"class.tab_groups::TabGroupVisualData"* %8 to i8*
  call void @_ZdlPv(i8* %238) #10
  br label %239

239:                                              ; preds = %216, %237
  ret void
}

declare void @_ZN14TabGroupChange13VisualsChangeC1Ev(%"struct.TabGroupChange::VisualsChange"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN14TabGroupChange13VisualsChangeD1Ev(%"struct.TabGroupChange::VisualsChange"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8TabGroup16GetContentStringEv(%"class.std::__1::basic_string"* noalias sret, %class.TabGroup*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = tail call i64 @_ZNK8TabGroup8ListTabsEv(%class.TabGroup* %1)
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %6, 32
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %1, i64 0, i32 0
  %11 = load %class.TabGroupController*, %class.TabGroupController** %10, align 8
  %12 = bitcast %class.TabGroupController* %11 to %"class.content::WebContents"* (%class.TabGroupController*, i32)***
  %13 = load %"class.content::WebContents"* (%class.TabGroupController*, i32)**, %"class.content::WebContents"* (%class.TabGroupController*, i32)*** %12, align 8
  %14 = getelementptr inbounds %"class.content::WebContents"* (%class.TabGroupController*, i32)*, %"class.content::WebContents"* (%class.TabGroupController*, i32)** %13, i64 7
  %15 = load %"class.content::WebContents"* (%class.TabGroupController*, i32)*, %"class.content::WebContents"* (%class.TabGroupController*, i32)** %14, align 8
  %16 = tail call %"class.content::WebContents"* %15(%class.TabGroupController* %11, i32 %7) #9
  %17 = getelementptr inbounds %"class.content::WebContents", %"class.content::WebContents"* %16, i64 0, i32 1
  %18 = bitcast %"class.base::SupportsUserData.base"* %17 to %"class.base::SupportsUserData"*
  %19 = tail call %"class.base::SupportsUserData::Data"* @_ZNK4base16SupportsUserData11GetUserDataEPKv(%"class.base::SupportsUserData"* %18, i8* bitcast (i32* @_ZN11TabUIHelper12kUserDataKeyE to i8*)) #9
  %20 = icmp eq %"class.base::SupportsUserData::Data"* %19, null
  %21 = getelementptr inbounds %"class.base::SupportsUserData::Data", %"class.base::SupportsUserData::Data"* %19, i64 -2
  %22 = bitcast %"class.base::SupportsUserData::Data"* %21 to %class.TabUIHelper*
  %23 = select i1 %20, %class.TabUIHelper* null, %class.TabUIHelper* %22
  %24 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #9
  %25 = icmp ugt i32 %7, %9
  %26 = select i1 %25, i32 %7, i32 %9
  %27 = icmp ult i32 %7, %9
  %28 = select i1 %27, i32 %7, i32 %9
  %29 = xor i32 %28, -1
  %30 = add i32 %26, %29
  %31 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false)
  call void @_ZN9l10n_util21GetPluralStringFUTF16Eii(%"class.std::__1::basic_string"* nonnull sret %3, i32 8186, i32 %30) #9
  %32 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #9
  %33 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #9
  call void @_ZNK11TabUIHelper8GetTitleEv(%"class.std::__1::basic_string"* nonnull sret %5, %class.TabUIHelper* %23) #9
  %34 = call zeroext i1 @_ZN3gfx11ElideStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEmPS6_(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %5, i64 30, %"class.std::__1::basic_string"* nonnull %4) #9
  %35 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %35, i64 0, i32 1, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %2
  %40 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %41 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %41) #10
  br label %42

42:                                               ; preds = %2, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #9
  call void @_ZN4base25ReplaceStringPlaceholdersERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_Pm(%"class.std::__1::basic_string"* sret %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4, i64* null) #9
  %43 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %43, i64 0, i32 1, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %42
  %48 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %49 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %49) #10
  br label %50

50:                                               ; preds = %42, %47
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #9
  %51 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %51, i64 0, i32 1, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %50
  %56 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %57 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %57) #10
  br label %58

58:                                               ; preds = %50, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK8TabGroup8ListTabsEv(%class.TabGroup*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional.41", align 8
  %3 = alloca %"class.absl::optional.41", align 8
  %4 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %5 = load %class.TabGroupController*, %class.TabGroupController** %4, align 8
  %6 = bitcast %class.TabGroupController* %5 to i32 (%class.TabGroupController*)***
  %7 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %6, align 8
  %8 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %7, i64 8
  %9 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %8, align 8
  %10 = tail call i32 %9(%class.TabGroupController* %5) #9
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %68

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %28, %12
  %17 = phi i32 [ 0, %12 ], [ %29, %28 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #9
  %18 = load %class.TabGroupController*, %class.TabGroupController** %4, align 8
  %19 = bitcast %class.TabGroupController* %18 to void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)***
  %20 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)**, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %20, i64 6
  %22 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %21, align 8
  call void %22(%"class.absl::optional.41"* nonnull sret %3, %class.TabGroupController* %18, i32 %17) #9
  %23 = load i8, i8* %13, align 8, !range !22
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  br label %28

26:                                               ; preds = %16
  %27 = call zeroext i1 @_ZNK10tab_groups10TabGroupIdeqERKS0_(%"class.tab_groups::TabGroupId"* %15, %"class.tab_groups::TabGroupId"* dereferenceable(16) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  br i1 %27, label %37, label %28

28:                                               ; preds = %26, %25
  %29 = add nuw nsw i32 %17, 1
  %30 = load %class.TabGroupController*, %class.TabGroupController** %4, align 8
  %31 = bitcast %class.TabGroupController* %30 to i32 (%class.TabGroupController*)***
  %32 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %32, i64 8
  %34 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %33, align 8
  %35 = call i32 %34(%class.TabGroupController* %30) #9
  %36 = icmp slt i32 %29, %35
  br i1 %36, label %16, label %68

37:                                               ; preds = %26
  %38 = load %class.TabGroupController*, %class.TabGroupController** %4, align 8
  %39 = bitcast %class.TabGroupController* %38 to i32 (%class.TabGroupController*)***
  %40 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %39, align 8
  %41 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %40, i64 8
  %42 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %41, align 8
  %43 = call i32 %42(%class.TabGroupController* %38) #9
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %64

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %48 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %49

49:                                               ; preds = %62, %45
  %50 = phi i32 [ %43, %45 ], [ %51, %62 ]
  %51 = add nsw i32 %50, -1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #9
  %52 = load %class.TabGroupController*, %class.TabGroupController** %4, align 8
  %53 = bitcast %class.TabGroupController* %52 to void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)***
  %54 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)**, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %54, i64 6
  %56 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %55, align 8
  call void %56(%"class.absl::optional.41"* nonnull sret %2, %class.TabGroupController* %52, i32 %51) #9
  %57 = load i8, i8* %46, align 8, !range !22
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #9
  br label %62

60:                                               ; preds = %49
  %61 = call zeroext i1 @_ZNK10tab_groups10TabGroupIdeqERKS0_(%"class.tab_groups::TabGroupId"* %48, %"class.tab_groups::TabGroupId"* dereferenceable(16) %47) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #9
  br i1 %61, label %65, label %62

62:                                               ; preds = %60, %59
  %63 = icmp sgt i32 %51, 0
  br i1 %63, label %49, label %64

64:                                               ; preds = %62, %37
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

65:                                               ; preds = %60
  %66 = zext i32 %50 to i64
  %67 = shl nuw i64 %66, 32
  br label %68

68:                                               ; preds = %28, %1, %65
  %69 = phi i32 [ %17, %65 ], [ 0, %1 ], [ 0, %28 ]
  %70 = phi i64 [ %67, %65 ], [ 0, %1 ], [ 0, %28 ]
  %71 = zext i32 %69 to i64
  %72 = or i64 %70, %71
  ret i64 %72
}

declare void @_ZN9l10n_util21GetPluralStringFUTF16Eii(%"class.std::__1::basic_string"* sret, i32, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN3gfx11ElideStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEmPS6_(%"class.std::__1::basic_string"* dereferenceable(24), i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare void @_ZNK11TabUIHelper8GetTitleEv(%"class.std::__1::basic_string"* sret, %class.TabUIHelper*) local_unnamed_addr #1

declare void @_ZN4base25ReplaceStringPlaceholdersERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_Pm(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8TabGroup6AddTabEv(%class.TabGroup*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.TabGroupChange::VisualsChange", align 8
  %3 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %21

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %8 = load %class.TabGroupController*, %class.TabGroupController** %7, align 8
  %9 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %10 = bitcast %class.TabGroupController* %8 to void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)***
  %11 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)**, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*** %10, align 8
  %12 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %11, align 8
  tail call void %12(%class.TabGroupController* %8, %"class.tab_groups::TabGroupId"* dereferenceable(16) %9) #9
  %13 = bitcast %"struct.TabGroupChange::VisualsChange"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"struct.TabGroupChange::VisualsChange", %"struct.TabGroupChange::VisualsChange"* %2, i64 0, i32 1
  %15 = bitcast %"struct.TabGroupChange::VisualsChange"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @_ZN14TabGroupChange13VisualsChangeC1Ev(%"struct.TabGroupChange::VisualsChange"* nonnull %2) #9
  store %"class.tab_groups::TabGroupVisualData"* null, %"class.tab_groups::TabGroupVisualData"** %14, align 8
  %16 = load %class.TabGroupController*, %class.TabGroupController** %7, align 8
  %17 = bitcast %class.TabGroupController* %16 to void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)***
  %18 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)**, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)** %18, i64 3
  %20 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*, %"struct.TabGroupChange::VisualsChange"*)** %19, align 8
  call void %20(%class.TabGroupController* %16, %"class.tab_groups::TabGroupId"* dereferenceable(16) %9, %"struct.TabGroupChange::VisualsChange"* nonnull dereferenceable(24) %2) #9
  call void @_ZN14TabGroupChange13VisualsChangeD1Ev(%"struct.TabGroupChange::VisualsChange"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  br label %21

21:                                               ; preds = %6, %1
  %22 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %23 = load %class.TabGroupController*, %class.TabGroupController** %22, align 8
  %24 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %25 = bitcast %class.TabGroupController* %23 to void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)***
  %26 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)**, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*** %25, align 8
  %27 = getelementptr inbounds void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %26, i64 2
  %28 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %27, align 8
  call void %28(%class.TabGroupController* %23, %"class.tab_groups::TabGroupId"* dereferenceable(16) %24) #9
  %29 = load i32, i32* %3, align 8
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8TabGroup9RemoveTabEv(%class.TabGroup*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %2, align 8
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %7 = load %class.TabGroupController*, %class.TabGroupController** %6, align 8
  %8 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %9 = bitcast %class.TabGroupController* %7 to void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)***
  %10 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)**, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*** %9, align 8
  br i1 %5, label %11, label %14

11:                                               ; preds = %1
  %12 = getelementptr inbounds void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %10, i64 5
  %13 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %12, align 8
  tail call void %13(%class.TabGroupController* %7, %"class.tab_groups::TabGroupId"* dereferenceable(16) %8) #9
  br label %17

14:                                               ; preds = %1
  %15 = getelementptr inbounds void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %10, i64 2
  %16 = load void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)*, void (%class.TabGroupController*, %"class.tab_groups::TabGroupId"*)** %15, align 8
  tail call void %16(%class.TabGroupController* %7, %"class.tab_groups::TabGroupId"* dereferenceable(16) %8) #9
  br label %17

17:                                               ; preds = %14, %11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8TabGroup7IsEmptyEv(%class.TabGroup* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8TabGroup12IsCustomizedEv(%class.TabGroup* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 4, !range !22
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK8TabGroup11GetFirstTabEv(%class.TabGroup*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional.41", align 8
  %3 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %4 = load %class.TabGroupController*, %class.TabGroupController** %3, align 8
  %5 = bitcast %class.TabGroupController* %4 to i32 (%class.TabGroupController*)***
  %6 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %6, i64 8
  %8 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %7, align 8
  %9 = call i32 %8(%class.TabGroupController* %4) #9
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %36

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %15

15:                                               ; preds = %11, %27
  %16 = phi i32 [ 0, %11 ], [ %28, %27 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #9
  %17 = load %class.TabGroupController*, %class.TabGroupController** %3, align 8
  %18 = bitcast %class.TabGroupController* %17 to void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)***
  %19 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)**, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %19, i64 6
  %21 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %20, align 8
  call void %21(%"class.absl::optional.41"* nonnull sret %2, %class.TabGroupController* %17, i32 %16) #9
  %22 = load i8, i8* %12, align 8, !range !22
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  br label %27

25:                                               ; preds = %15
  %26 = call zeroext i1 @_ZNK10tab_groups10TabGroupIdeqERKS0_(%"class.tab_groups::TabGroupId"* %14, %"class.tab_groups::TabGroupId"* dereferenceable(16) %13) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  br i1 %26, label %36, label %27

27:                                               ; preds = %24, %25
  %28 = add nuw nsw i32 %16, 1
  %29 = load %class.TabGroupController*, %class.TabGroupController** %3, align 8
  %30 = bitcast %class.TabGroupController* %29 to i32 (%class.TabGroupController*)***
  %31 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %30, align 8
  %32 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %31, i64 8
  %33 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %32, align 8
  %34 = call i32 %33(%class.TabGroupController* %29) #9
  %35 = icmp slt i32 %28, %34
  br i1 %35, label %15, label %36

36:                                               ; preds = %25, %27, %1
  %37 = phi i32 [ 0, %1 ], [ %28, %27 ], [ %16, %25 ]
  %38 = phi i64 [ 0, %1 ], [ 0, %27 ], [ 1, %25 ]
  %39 = zext i32 %37 to i64
  %40 = shl nuw nsw i64 %39, 32
  %41 = or i64 %38, %40
  ret i64 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK8TabGroup10GetLastTabEv(%class.TabGroup*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional.41", align 8
  %3 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 0
  %4 = load %class.TabGroupController*, %class.TabGroupController** %3, align 8
  %5 = bitcast %class.TabGroupController* %4 to i32 (%class.TabGroupController*)***
  %6 = load i32 (%class.TabGroupController*)**, i32 (%class.TabGroupController*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %6, i64 8
  %8 = load i32 (%class.TabGroupController*)*, i32 (%class.TabGroupController*)** %7, align 8
  %9 = tail call i32 %8(%class.TabGroupController* %4) #9
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %31

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %class.TabGroup, %class.TabGroup* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.absl::optional.41", %"class.absl::optional.41"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %12, %28
  %17 = phi i32 [ %10, %12 ], [ %29, %28 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #9
  %18 = load %class.TabGroupController*, %class.TabGroupController** %3, align 8
  %19 = bitcast %class.TabGroupController* %18 to void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)***
  %20 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)**, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %20, i64 6
  %22 = load void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)*, void (%"class.absl::optional.41"*, %class.TabGroupController*, i32)** %21, align 8
  call void %22(%"class.absl::optional.41"* nonnull sret %2, %class.TabGroupController* %18, i32 %17) #9
  %23 = load i8, i8* %13, align 8, !range !22
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  br label %28

26:                                               ; preds = %16
  %27 = call zeroext i1 @_ZNK10tab_groups10TabGroupIdeqERKS0_(%"class.tab_groups::TabGroupId"* %15, %"class.tab_groups::TabGroupId"* dereferenceable(16) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  br i1 %27, label %31, label %28

28:                                               ; preds = %25, %26
  %29 = add nsw i32 %17, -1
  %30 = icmp sgt i32 %17, 0
  br i1 %30, label %16, label %31

31:                                               ; preds = %26, %28, %1
  %32 = phi i32 [ %10, %1 ], [ %29, %28 ], [ %17, %26 ]
  %33 = phi i64 [ 0, %1 ], [ 0, %28 ], [ 1, %26 ]
  %34 = zext i32 %32 to i64
  %35 = shl nuw i64 %34, 32
  %36 = or i64 %33, %35
  ret i64 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZNK10tab_groups10TabGroupIdeqERKS0_(%"class.tab_groups::TabGroupId"*, %"class.tab_groups::TabGroupId"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare %"class.base::SupportsUserData::Data"* @_ZNK4base16SupportsUserData11GetUserDataEPKv(%"class.base::SupportsUserData"*, i8*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{i8 0, i8 2}
