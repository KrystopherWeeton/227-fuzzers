; ModuleID = '../../third_party/libjpeg_turbo/jdicc.c'
source_filename = "../../third_party/libjpeg_turbo/jdicc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jpeg_read_icc_profile(%struct.jpeg_decompress_struct*, i8**, i32*) local_unnamed_addr #0 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca [256 x i32], align 16
  %6 = alloca [256 x i32], align 16
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1024, i1 false)
  %9 = bitcast [256 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1024, i1 false)
  %10 = icmp eq i8** %1, null
  %11 = icmp eq i32* %2, null
  %12 = or i1 %10, %11
  br i1 %12, label %13, label %21

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %14, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 5
  store i32 23, i32* %16, align 8
  %17 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %14, align 8
  %18 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %17, i64 0, i32 0
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %18, align 8
  %20 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %19(%struct.jpeg_common_struct* %20) #3
  br label %21

21:                                               ; preds = %3, %13
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 202
  br i1 %24, label %25, label %36

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %26, align 8
  %28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 5
  store i32 20, i32* %28, align 8
  %29 = load i32, i32* %22, align 4
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %26, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 6, i32 0, i64 0
  store i32 %29, i32* %31, align 4
  %32 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %26, align 8
  %33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %32, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %33, align 8
  %35 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %34(%struct.jpeg_common_struct* %35) #3
  br label %36

36:                                               ; preds = %25, %21
  store i8* null, i8** %1, align 8
  store i32 0, i32* %2, align 4
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 0, i64 255, i1 false)
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 60
  %39 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %38, align 8
  %40 = icmp eq %struct.jpeg_marker_struct* %39, null
  br i1 %40, label %436, label %41

41:                                               ; preds = %36, %147
  %42 = phi %struct.jpeg_marker_struct* [ %150, %147 ], [ %39, %36 ]
  %43 = phi i32 [ %148, %147 ], [ 0, %36 ]
  %44 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %42, i64 0, i32 1
  %45 = load i8, i8* %44, align 8
  %46 = icmp eq i8 %45, -30
  br i1 %46, label %47, label %147

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %42, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp ugt i32 %49, 13
  br i1 %50, label %51, label %147

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %42, i64 0, i32 4
  %53 = load i8*, i8** %52, align 8
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 73
  br i1 %55, label %56, label %147

56:                                               ; preds = %51
  %57 = getelementptr inbounds i8, i8* %53, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 67
  br i1 %59, label %60, label %147

60:                                               ; preds = %56
  %61 = getelementptr inbounds i8, i8* %53, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 67
  br i1 %63, label %64, label %147

64:                                               ; preds = %60
  %65 = getelementptr inbounds i8, i8* %53, i64 3
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 95
  br i1 %67, label %68, label %147

68:                                               ; preds = %64
  %69 = getelementptr inbounds i8, i8* %53, i64 4
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 80
  br i1 %71, label %72, label %147

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %53, i64 5
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 82
  br i1 %75, label %76, label %147

76:                                               ; preds = %72
  %77 = getelementptr inbounds i8, i8* %53, i64 6
  %78 = load i8, i8* %77, align 1
  %79 = icmp eq i8 %78, 79
  br i1 %79, label %80, label %147

80:                                               ; preds = %76
  %81 = getelementptr inbounds i8, i8* %53, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 70
  br i1 %83, label %84, label %147

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %53, i64 8
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, 73
  br i1 %87, label %88, label %147

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %53, i64 9
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 76
  br i1 %91, label %92, label %147

92:                                               ; preds = %88
  %93 = getelementptr inbounds i8, i8* %53, i64 10
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 69
  br i1 %95, label %96, label %147

96:                                               ; preds = %92
  %97 = getelementptr inbounds i8, i8* %53, i64 11
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %147

100:                                              ; preds = %96
  %101 = icmp eq i32 %43, 0
  %102 = getelementptr inbounds i8, i8* %53, i64 13
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  br i1 %101, label %115, label %105

105:                                              ; preds = %100
  %106 = icmp eq i32 %43, %104
  br i1 %106, label %115, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %109 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %108, align 8
  %110 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %109, i64 0, i32 5
  store i32 125, i32* %110, align 8
  %111 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %108, align 8
  %112 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %111, i64 0, i32 1
  %113 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %112, align 8
  %114 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %113(%struct.jpeg_common_struct* %114, i32 -1) #3
  br label %436

115:                                              ; preds = %100, %105
  %116 = phi i32 [ %43, %105 ], [ %104, %100 ]
  %117 = getelementptr inbounds i8, i8* %53, i64 12
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  %120 = zext i8 %118 to i32
  %121 = icmp slt i32 %116, %120
  %122 = or i1 %119, %121
  br i1 %122, label %123, label %131

123:                                              ; preds = %115
  %124 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %125 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %124, align 8
  %126 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %125, i64 0, i32 5
  store i32 125, i32* %126, align 8
  %127 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %124, align 8
  %128 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %127, i64 0, i32 1
  %129 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %128, align 8
  %130 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %129(%struct.jpeg_common_struct* %130, i32 -1) #3
  br label %436

131:                                              ; preds = %115
  %132 = zext i8 %118 to i64
  %133 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %144, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %138 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %137, align 8
  %139 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %138, i64 0, i32 5
  store i32 125, i32* %139, align 8
  %140 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %137, align 8
  %141 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %140, i64 0, i32 1
  %142 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %141, align 8
  %143 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %142(%struct.jpeg_common_struct* %143, i32 -1) #3
  br label %436

144:                                              ; preds = %131
  store i8 1, i8* %133, align 1
  %145 = add i32 %49, -14
  %146 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %132
  store i32 %145, i32* %146, align 4
  br label %147

147:                                              ; preds = %96, %41, %47, %51, %56, %60, %64, %68, %72, %76, %80, %84, %88, %92, %144
  %148 = phi i32 [ %116, %144 ], [ %43, %96 ], [ %43, %92 ], [ %43, %88 ], [ %43, %84 ], [ %43, %80 ], [ %43, %76 ], [ %43, %72 ], [ %43, %68 ], [ %43, %64 ], [ %43, %60 ], [ %43, %56 ], [ %43, %51 ], [ %43, %47 ], [ %43, %41 ]
  %149 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %42, i64 0, i32 0
  %150 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %149, align 8
  %151 = icmp eq %struct.jpeg_marker_struct* %150, null
  br i1 %151, label %152, label %41

152:                                              ; preds = %147
  %153 = icmp eq i32 %148, 0
  br i1 %153, label %436, label %154

154:                                              ; preds = %152
  %155 = icmp slt i32 %148, 1
  br i1 %155, label %182, label %156

156:                                              ; preds = %154
  %157 = add nuw i32 %148, 1
  %158 = zext i32 %157 to i64
  br label %159

159:                                              ; preds = %173, %156
  %160 = phi i64 [ 1, %156 ], [ %178, %173 ]
  %161 = phi i32 [ 0, %156 ], [ %177, %173 ]
  %162 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %160
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %165, label %173

165:                                              ; preds = %159
  %166 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %167 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %166, align 8
  %168 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %167, i64 0, i32 5
  store i32 125, i32* %168, align 8
  %169 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %166, align 8
  %170 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %169, i64 0, i32 1
  %171 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %170, align 8
  %172 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %171(%struct.jpeg_common_struct* %172, i32 -1) #3
  br label %436

173:                                              ; preds = %159
  %174 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %160
  store i32 %161, i32* %174, align 4
  %175 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %160
  %176 = load i32, i32* %175, align 4
  %177 = add i32 %176, %161
  %178 = add nuw nsw i64 %160, 1
  %179 = icmp eq i64 %178, %158
  br i1 %179, label %180, label %159

180:                                              ; preds = %173
  %181 = icmp eq i32 %177, 0
  br i1 %181, label %182, label %190

182:                                              ; preds = %154, %180
  %183 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %184 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %183, align 8
  %185 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %184, i64 0, i32 5
  store i32 125, i32* %185, align 8
  %186 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %183, align 8
  %187 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %186, i64 0, i32 1
  %188 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %187, align 8
  %189 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %188(%struct.jpeg_common_struct* %189, i32 -1) #3
  br label %436

190:                                              ; preds = %180
  %191 = zext i32 %177 to i64
  %192 = tail call noalias i8* @malloc(i64 %191) #3
  %193 = icmp eq i8* %192, null
  br i1 %193, label %194, label %205

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %196 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %195, align 8
  %197 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %196, i64 0, i32 5
  store i32 54, i32* %197, align 8
  %198 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %195, align 8
  %199 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %198, i64 0, i32 6, i32 0, i64 0
  store i32 11, i32* %199, align 4
  %200 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %195, align 8
  %201 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %200, i64 0, i32 0
  %202 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %201, align 8
  %203 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %202(%struct.jpeg_common_struct* %203) #3
  %204 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %38, align 8
  br label %205

205:                                              ; preds = %194, %190
  %206 = phi %struct.jpeg_marker_struct* [ %204, %194 ], [ %39, %190 ]
  %207 = icmp eq %struct.jpeg_marker_struct* %206, null
  br i1 %207, label %435, label %208

208:                                              ; preds = %205
  %209 = getelementptr i8, i8* %192, i64 1
  br label %210

210:                                              ; preds = %208, %431
  %211 = phi %struct.jpeg_marker_struct* [ %433, %431 ], [ %206, %208 ]
  %212 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %211, i64 0, i32 1
  %213 = load i8, i8* %212, align 8
  %214 = icmp eq i8 %213, -30
  br i1 %214, label %215, label %431

215:                                              ; preds = %210
  %216 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %211, i64 0, i32 3
  %217 = load i32, i32* %216, align 8
  %218 = icmp ugt i32 %217, 13
  br i1 %218, label %219, label %431

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %211, i64 0, i32 4
  %221 = load i8*, i8** %220, align 8
  %222 = load i8, i8* %221, align 1
  %223 = icmp eq i8 %222, 73
  br i1 %223, label %224, label %431

224:                                              ; preds = %219
  %225 = getelementptr inbounds i8, i8* %221, i64 1
  %226 = load i8, i8* %225, align 1
  %227 = icmp eq i8 %226, 67
  br i1 %227, label %228, label %431

228:                                              ; preds = %224
  %229 = getelementptr inbounds i8, i8* %221, i64 2
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 67
  br i1 %231, label %232, label %431

232:                                              ; preds = %228
  %233 = getelementptr inbounds i8, i8* %221, i64 3
  %234 = load i8, i8* %233, align 1
  %235 = icmp eq i8 %234, 95
  br i1 %235, label %236, label %431

236:                                              ; preds = %232
  %237 = getelementptr inbounds i8, i8* %221, i64 4
  %238 = load i8, i8* %237, align 1
  %239 = icmp eq i8 %238, 80
  br i1 %239, label %240, label %431

240:                                              ; preds = %236
  %241 = getelementptr inbounds i8, i8* %221, i64 5
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %242, 82
  br i1 %243, label %244, label %431

244:                                              ; preds = %240
  %245 = getelementptr inbounds i8, i8* %221, i64 6
  %246 = load i8, i8* %245, align 1
  %247 = icmp eq i8 %246, 79
  br i1 %247, label %248, label %431

248:                                              ; preds = %244
  %249 = getelementptr inbounds i8, i8* %221, i64 7
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 70
  br i1 %251, label %252, label %431

252:                                              ; preds = %248
  %253 = getelementptr inbounds i8, i8* %221, i64 8
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, 73
  br i1 %255, label %256, label %431

256:                                              ; preds = %252
  %257 = getelementptr inbounds i8, i8* %221, i64 9
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 76
  br i1 %259, label %260, label %431

260:                                              ; preds = %256
  %261 = getelementptr inbounds i8, i8* %221, i64 10
  %262 = load i8, i8* %261, align 1
  %263 = icmp eq i8 %262, 69
  br i1 %263, label %264, label %431

264:                                              ; preds = %260
  %265 = getelementptr inbounds i8, i8* %221, i64 11
  %266 = load i8, i8* %265, align 1
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %268, label %431

268:                                              ; preds = %264
  %269 = getelementptr inbounds i8, i8* %221, i64 12
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i64
  %272 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %431, label %275

275:                                              ; preds = %268
  %276 = getelementptr inbounds i8, i8* %221, i64 14
  %277 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %271
  %278 = load i32, i32* %277, align 4
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %192, i64 %279
  %281 = add i32 %273, -1
  %282 = zext i32 %281 to i64
  %283 = add nuw nsw i64 %282, 1
  %284 = icmp ult i64 %283, 32
  br i1 %284, label %378, label %285

285:                                              ; preds = %275
  %286 = add i32 %273, -1
  %287 = zext i32 %286 to i64
  %288 = add nuw nsw i64 %279, %287
  %289 = getelementptr i8, i8* %209, i64 %288
  %290 = getelementptr i8, i8* %221, i64 15
  %291 = getelementptr i8, i8* %290, i64 %287
  %292 = icmp ult i8* %280, %291
  %293 = icmp ult i8* %276, %289
  %294 = and i1 %292, %293
  br i1 %294, label %378, label %295

295:                                              ; preds = %285
  %296 = and i64 %283, 8589934560
  %297 = trunc i64 %296 to i32
  %298 = sub i32 %273, %297
  %299 = getelementptr i8, i8* %280, i64 %296
  %300 = getelementptr i8, i8* %276, i64 %296
  %301 = add nsw i64 %296, -32
  %302 = lshr exact i64 %301, 5
  %303 = add nuw nsw i64 %302, 1
  %304 = and i64 %303, 3
  %305 = icmp ult i64 %301, 96
  br i1 %305, label %357, label %306

306:                                              ; preds = %295
  %307 = sub nsw i64 %303, %304
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ 0, %306 ], [ %354, %308 ]
  %310 = phi i64 [ %307, %306 ], [ %355, %308 ]
  %311 = getelementptr i8, i8* %280, i64 %309
  %312 = getelementptr i8, i8* %276, i64 %309
  %313 = bitcast i8* %312 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1, !alias.scope !2
  %315 = getelementptr i8, i8* %312, i64 16
  %316 = bitcast i8* %315 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1, !alias.scope !2
  %318 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %318, align 1, !alias.scope !5, !noalias !2
  %319 = getelementptr i8, i8* %311, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %320, align 1, !alias.scope !5, !noalias !2
  %321 = or i64 %309, 32
  %322 = getelementptr i8, i8* %280, i64 %321
  %323 = getelementptr i8, i8* %276, i64 %321
  %324 = bitcast i8* %323 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1, !alias.scope !2
  %326 = getelementptr i8, i8* %323, i64 16
  %327 = bitcast i8* %326 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1, !alias.scope !2
  %329 = bitcast i8* %322 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %329, align 1, !alias.scope !5, !noalias !2
  %330 = getelementptr i8, i8* %322, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %331, align 1, !alias.scope !5, !noalias !2
  %332 = or i64 %309, 64
  %333 = getelementptr i8, i8* %280, i64 %332
  %334 = getelementptr i8, i8* %276, i64 %332
  %335 = bitcast i8* %334 to <16 x i8>*
  %336 = load <16 x i8>, <16 x i8>* %335, align 1, !alias.scope !2
  %337 = getelementptr i8, i8* %334, i64 16
  %338 = bitcast i8* %337 to <16 x i8>*
  %339 = load <16 x i8>, <16 x i8>* %338, align 1, !alias.scope !2
  %340 = bitcast i8* %333 to <16 x i8>*
  store <16 x i8> %336, <16 x i8>* %340, align 1, !alias.scope !5, !noalias !2
  %341 = getelementptr i8, i8* %333, i64 16
  %342 = bitcast i8* %341 to <16 x i8>*
  store <16 x i8> %339, <16 x i8>* %342, align 1, !alias.scope !5, !noalias !2
  %343 = or i64 %309, 96
  %344 = getelementptr i8, i8* %280, i64 %343
  %345 = getelementptr i8, i8* %276, i64 %343
  %346 = bitcast i8* %345 to <16 x i8>*
  %347 = load <16 x i8>, <16 x i8>* %346, align 1, !alias.scope !2
  %348 = getelementptr i8, i8* %345, i64 16
  %349 = bitcast i8* %348 to <16 x i8>*
  %350 = load <16 x i8>, <16 x i8>* %349, align 1, !alias.scope !2
  %351 = bitcast i8* %344 to <16 x i8>*
  store <16 x i8> %347, <16 x i8>* %351, align 1, !alias.scope !5, !noalias !2
  %352 = getelementptr i8, i8* %344, i64 16
  %353 = bitcast i8* %352 to <16 x i8>*
  store <16 x i8> %350, <16 x i8>* %353, align 1, !alias.scope !5, !noalias !2
  %354 = add i64 %309, 128
  %355 = add i64 %310, -4
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %308, !llvm.loop !7

357:                                              ; preds = %308, %295
  %358 = phi i64 [ 0, %295 ], [ %354, %308 ]
  %359 = icmp eq i64 %304, 0
  br i1 %359, label %376, label %360

360:                                              ; preds = %357, %360
  %361 = phi i64 [ %373, %360 ], [ %358, %357 ]
  %362 = phi i64 [ %374, %360 ], [ %304, %357 ]
  %363 = getelementptr i8, i8* %280, i64 %361
  %364 = getelementptr i8, i8* %276, i64 %361
  %365 = bitcast i8* %364 to <16 x i8>*
  %366 = load <16 x i8>, <16 x i8>* %365, align 1, !alias.scope !2
  %367 = getelementptr i8, i8* %364, i64 16
  %368 = bitcast i8* %367 to <16 x i8>*
  %369 = load <16 x i8>, <16 x i8>* %368, align 1, !alias.scope !2
  %370 = bitcast i8* %363 to <16 x i8>*
  store <16 x i8> %366, <16 x i8>* %370, align 1, !alias.scope !5, !noalias !2
  %371 = getelementptr i8, i8* %363, i64 16
  %372 = bitcast i8* %371 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %372, align 1, !alias.scope !5, !noalias !2
  %373 = add i64 %361, 32
  %374 = add i64 %362, -1
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %376, label %360, !llvm.loop !9

376:                                              ; preds = %360, %357
  %377 = icmp eq i64 %283, %296
  br i1 %377, label %431, label %378

378:                                              ; preds = %376, %285, %275
  %379 = phi i32 [ %273, %285 ], [ %273, %275 ], [ %298, %376 ]
  %380 = phi i8* [ %280, %285 ], [ %280, %275 ], [ %299, %376 ]
  %381 = phi i8* [ %276, %285 ], [ %276, %275 ], [ %300, %376 ]
  %382 = add i32 %379, -1
  %383 = and i32 %379, 7
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %396, label %385

385:                                              ; preds = %378, %385
  %386 = phi i32 [ %390, %385 ], [ %379, %378 ]
  %387 = phi i8* [ %393, %385 ], [ %380, %378 ]
  %388 = phi i8* [ %391, %385 ], [ %381, %378 ]
  %389 = phi i32 [ %394, %385 ], [ %383, %378 ]
  %390 = add i32 %386, -1
  %391 = getelementptr inbounds i8, i8* %388, i64 1
  %392 = load i8, i8* %388, align 1
  %393 = getelementptr inbounds i8, i8* %387, i64 1
  store i8 %392, i8* %387, align 1
  %394 = add i32 %389, -1
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %385, !llvm.loop !11

396:                                              ; preds = %385, %378
  %397 = phi i32 [ %379, %378 ], [ %390, %385 ]
  %398 = phi i8* [ %380, %378 ], [ %393, %385 ]
  %399 = phi i8* [ %381, %378 ], [ %391, %385 ]
  %400 = icmp ult i32 %382, 7
  br i1 %400, label %431, label %401

401:                                              ; preds = %396, %401
  %402 = phi i32 [ %426, %401 ], [ %397, %396 ]
  %403 = phi i8* [ %429, %401 ], [ %398, %396 ]
  %404 = phi i8* [ %427, %401 ], [ %399, %396 ]
  %405 = getelementptr inbounds i8, i8* %404, i64 1
  %406 = load i8, i8* %404, align 1
  %407 = getelementptr inbounds i8, i8* %403, i64 1
  store i8 %406, i8* %403, align 1
  %408 = getelementptr inbounds i8, i8* %404, i64 2
  %409 = load i8, i8* %405, align 1
  %410 = getelementptr inbounds i8, i8* %403, i64 2
  store i8 %409, i8* %407, align 1
  %411 = getelementptr inbounds i8, i8* %404, i64 3
  %412 = load i8, i8* %408, align 1
  %413 = getelementptr inbounds i8, i8* %403, i64 3
  store i8 %412, i8* %410, align 1
  %414 = getelementptr inbounds i8, i8* %404, i64 4
  %415 = load i8, i8* %411, align 1
  %416 = getelementptr inbounds i8, i8* %403, i64 4
  store i8 %415, i8* %413, align 1
  %417 = getelementptr inbounds i8, i8* %404, i64 5
  %418 = load i8, i8* %414, align 1
  %419 = getelementptr inbounds i8, i8* %403, i64 5
  store i8 %418, i8* %416, align 1
  %420 = getelementptr inbounds i8, i8* %404, i64 6
  %421 = load i8, i8* %417, align 1
  %422 = getelementptr inbounds i8, i8* %403, i64 6
  store i8 %421, i8* %419, align 1
  %423 = getelementptr inbounds i8, i8* %404, i64 7
  %424 = load i8, i8* %420, align 1
  %425 = getelementptr inbounds i8, i8* %403, i64 7
  store i8 %424, i8* %422, align 1
  %426 = add i32 %402, -8
  %427 = getelementptr inbounds i8, i8* %404, i64 8
  %428 = load i8, i8* %423, align 1
  %429 = getelementptr inbounds i8, i8* %403, i64 8
  store i8 %428, i8* %425, align 1
  %430 = icmp eq i32 %426, 0
  br i1 %430, label %431, label %401, !llvm.loop !12

431:                                              ; preds = %396, %401, %376, %268, %264, %210, %215, %219, %224, %228, %232, %236, %240, %244, %248, %252, %256, %260
  %432 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %211, i64 0, i32 0
  %433 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %432, align 8
  %434 = icmp eq %struct.jpeg_marker_struct* %433, null
  br i1 %434, label %435, label %210

435:                                              ; preds = %431, %205
  store i8* %192, i8** %1, align 8
  store i32 %177, i32* %2, align 4
  br label %436

436:                                              ; preds = %36, %152, %435, %182, %165, %136, %123, %107
  %437 = phi i32 [ 0, %123 ], [ 0, %136 ], [ 0, %107 ], [ 0, %165 ], [ 0, %182 ], [ 1, %435 ], [ 0, %152 ], [ 0, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret i32 %437
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
