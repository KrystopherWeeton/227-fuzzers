; ModuleID = '../../base/i18n/character_encoding.cc'
source_filename = "../../base/i18n/character_encoding.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZN4base12_GLOBAL__N_123kCanonicalEncodingNamesE = internal constant [36 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"HTML\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"MIME\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"IANA\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Big5\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"EUC-JP\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"EUC-KR\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"gb18030\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"GBK\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"IBM866\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"ISO-2022-JP\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"ISO-8859-10\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"ISO-8859-13\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"ISO-8859-14\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"ISO-8859-15\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"ISO-8859-16\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"ISO-8859-2\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"ISO-8859-3\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"ISO-8859-4\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"ISO-8859-5\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"ISO-8859-6\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"ISO-8859-7\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"ISO-8859-8\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"ISO-8859-8-I\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"KOI8-R\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"KOI8-U\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"macintosh\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Shift_JIS\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"UTF-16LE\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"windows-1250\00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c"windows-1251\00", align 1
@.str.31 = private unnamed_addr constant [13 x i8] c"windows-1252\00", align 1
@.str.32 = private unnamed_addr constant [13 x i8] c"windows-1253\00", align 1
@.str.33 = private unnamed_addr constant [13 x i8] c"windows-1254\00", align 1
@.str.34 = private unnamed_addr constant [13 x i8] c"windows-1255\00", align 1
@.str.35 = private unnamed_addr constant [13 x i8] c"windows-1256\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"windows-1257\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"windows-1258\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"windows-874\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base35GetCanonicalEncodingNameByAliasNameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %20

7:                                                ; preds = %43
  %8 = bitcast i32* %3 to i8*
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  store i32 0, i32* %3, align 4
  %11 = load i8, i8* %5, align 1
  %12 = icmp slt i8 %11, 0
  %13 = load i8*, i8** %9, align 8
  %14 = select i1 %12, i8* %13, i8* %10
  %15 = call i8* @ucnv_getStandardName_69(i8* %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %3) #6
  %16 = load i32, i32* %3, align 4
  %17 = icmp slt i32 %16, 1
  %18 = icmp ne i8* %15, null
  %19 = and i1 %18, %17
  br i1 %19, label %46, label %70

20:                                               ; preds = %2, %43
  %21 = phi i8** [ getelementptr inbounds ([36 x i8*], [36 x i8*]* @_ZN4base12_GLOBAL__N_123kCanonicalEncodingNamesE, i64 0, i64 0), %2 ], [ %44, %43 ]
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i64 @strlen(i8* %22) #6
  %24 = load i8, i8* %5, align 1
  %25 = icmp slt i8 %24, 0
  %26 = load i64, i64* %6, align 8
  %27 = zext i8 %24 to i64
  %28 = select i1 %25, i64 %26, i64 %27
  %29 = icmp eq i64 %23, %28
  br i1 %29, label %30, label %43

30:                                               ; preds = %20
  %31 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1, i64 0, i64 -1, i8* %22, i64 %23) #6
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %30
  %34 = load i8, i8* %5, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #6
  br label %83

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = load i64, i64* %6, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %41, i64 %42) #6
  br label %83

43:                                               ; preds = %20, %30
  %44 = getelementptr inbounds i8*, i8** %21, i64 1
  %45 = icmp eq i8** %44, getelementptr inbounds ([36 x i8*], [36 x i8*]* @_ZN4base12_GLOBAL__N_123kCanonicalEncodingNamesE, i64 1, i64 0)
  br i1 %45, label %7, label %20

46:                                               ; preds = %84, %70, %7
  %47 = phi i8* [ %15, %7 ], [ %75, %70 ], [ %89, %84 ]
  %48 = call i64 @strlen(i8* nonnull %47) #6
  %49 = icmp ugt i64 %48, -17
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %51) #7
  unreachable

52:                                               ; preds = %46
  %53 = icmp ult i64 %48, 23
  br i1 %53, label %62, label %54

54:                                               ; preds = %52
  %55 = add nuw i64 %48, 16
  %56 = and i64 %55, -16
  %57 = call i8* @_Znwm(i64 %56) #8
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %57, i8** %58, align 8
  %59 = or i64 %56, -9223372036854775808
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %48, i64* %61, align 8
  br label %68

62:                                               ; preds = %52
  %63 = trunc i64 %48 to i8
  %64 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  store i8 %63, i8* %65, align 1
  %66 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %67 = icmp eq i64 %48, 0
  br i1 %67, label %80, label %68

68:                                               ; preds = %62, %54
  %69 = phi i8* [ %57, %54 ], [ %66, %62 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* nonnull align 1 %47, i64 %48, i1 false) #6
  br label %80

70:                                               ; preds = %7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  store i32 0, i32* %3, align 4
  %71 = load i8, i8* %5, align 1
  %72 = icmp slt i8 %71, 0
  %73 = load i8*, i8** %9, align 8
  %74 = select i1 %72, i8* %73, i8* %10
  %75 = call i8* @ucnv_getStandardName_69(i8* %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %3) #6
  %76 = load i32, i32* %3, align 4
  %77 = icmp slt i32 %76, 1
  %78 = icmp ne i8* %75, null
  %79 = and i1 %78, %77
  br i1 %79, label %46, label %84

80:                                               ; preds = %62, %68
  %81 = phi i8* [ %66, %62 ], [ %69, %68 ]
  %82 = getelementptr inbounds i8, i8* %81, i64 %48
  store i8 0, i8* %82, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  br label %83

83:                                               ; preds = %39, %36, %80, %94
  ret void

84:                                               ; preds = %70
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  store i32 0, i32* %3, align 4
  %85 = load i8, i8* %5, align 1
  %86 = icmp slt i8 %85, 0
  %87 = load i8*, i8** %9, align 8
  %88 = select i1 %86, i8* %87, i8* %10
  %89 = call i8* @ucnv_getStandardName_69(i8* %88, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %3) #6
  %90 = load i32, i32* %3, align 4
  %91 = icmp slt i32 %90, 1
  %92 = icmp ne i8* %89, null
  %93 = and i1 %92, %91
  br i1 %93, label %46, label %94

94:                                               ; preds = %84
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  %95 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #6
  br label %83
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @ucnv_getStandardName_69(i8*, i8*, i32*) local_unnamed_addr #2

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
