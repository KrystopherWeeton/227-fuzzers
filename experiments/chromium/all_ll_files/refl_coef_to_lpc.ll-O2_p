; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/refl_coef_to_lpc.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/refl_coef_to_lpc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcSpl_ReflCoefToLpc(i16* nocapture readonly, i32, i16* nocapture) local_unnamed_addr #0 {
  %4 = alloca [15 x i16], align 16
  %5 = bitcast [15 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 30, i8* nonnull %5) #2
  %6 = getelementptr inbounds [15 x i16], [15 x i16]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [15 x i16], [15 x i16]* %4, i64 0, i64 1
  %8 = bitcast [15 x i16]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 30, i1 false)
  store i16 4096, i16* %2, align 2
  store i16 4096, i16* %6, align 16
  %9 = load i16, i16* %0, align 2
  %10 = ashr i16 %9, 3
  %11 = getelementptr inbounds i16, i16* %2, i64 1
  store i16 %10, i16* %11, align 2
  %12 = icmp sgt i32 %1, 1
  br i1 %12, label %13, label %215

13:                                               ; preds = %3
  %14 = zext i32 %1 to i64
  %15 = getelementptr inbounds [15 x i16], [15 x i16]* %4, i64 0, i64 1
  %16 = bitcast i16* %15 to i8*
  %17 = getelementptr i16, i16* %2, i64 1
  %18 = getelementptr i16, i16* %2, i64 1
  br label %24

19:                                               ; preds = %206, %200
  %20 = add nuw i32 %28, 1
  %21 = icmp eq i64 %47, %14
  %22 = add i32 %26, 1
  %23 = add i64 %25, 1
  br i1 %21, label %215, label %24

24:                                               ; preds = %19, %13
  %25 = phi i64 [ %23, %19 ], [ 0, %13 ]
  %26 = phi i32 [ %22, %19 ], [ 0, %13 ]
  %27 = phi i64 [ %47, %19 ], [ 1, %13 ]
  %28 = phi i32 [ %20, %19 ], [ 3, %13 ]
  %29 = phi i16* [ %43, %19 ], [ %0, %13 ]
  %30 = add i64 %25, 2
  %31 = and i64 %30, 4294967295
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 8589934576
  %34 = add nsw i64 %33, -16
  %35 = lshr exact i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = add i64 %25, 2
  %38 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %37
  %39 = add i64 %25, 1
  %40 = add i32 %26, 2
  %41 = zext i32 %40 to i64
  %42 = add nuw nsw i64 %41, 1
  %43 = getelementptr inbounds i16, i16* %29, i64 1
  %44 = getelementptr inbounds i16, i16* %2, i64 %27
  %45 = load i16, i16* %43, align 2
  %46 = ashr i16 %45, 3
  %47 = add nuw nsw i64 %27, 1
  %48 = getelementptr inbounds [15 x i16], [15 x i16]* %4, i64 0, i64 %47
  store i16 %46, i16* %48, align 2
  %49 = icmp ult i64 %39, 8
  br i1 %49, label %96, label %50

50:                                               ; preds = %24
  %51 = add i64 %25, 1
  %52 = getelementptr i16, i16* %0, i64 %51
  %53 = bitcast i16* %52 to i8*
  %54 = getelementptr i8, i8* %53, i64 1
  %55 = getelementptr i16, i16* %2, i64 %37
  %56 = icmp ult i16* %15, %55
  %57 = icmp ult i16* %17, %38
  %58 = and i1 %56, %57
  %59 = icmp ugt i8* %54, %16
  %60 = icmp ult i16* %43, %38
  %61 = and i1 %59, %60
  %62 = or i1 %58, %61
  br i1 %62, label %96, label %63

63:                                               ; preds = %50
  %64 = and i64 %39, -8
  %65 = getelementptr i16, i16* %2, i64 %64
  %66 = trunc i64 %64 to i32
  %67 = getelementptr i16, i16* %7, i64 %64
  %68 = sub i64 0, %64
  %69 = getelementptr i16, i16* %44, i64 %68
  %70 = getelementptr i16, i16* %44, i64 -7
  %71 = load i16, i16* %43, align 2, !alias.scope !2
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = sext <8 x i16> %73 to <8 x i32>
  br label %75

75:                                               ; preds = %75, %63
  %76 = phi i64 [ 0, %63 ], [ %92, %75 ]
  %77 = getelementptr i16, i16* %7, i64 %76
  %78 = sub i64 0, %76
  %79 = getelementptr inbounds i16, i16* %18, i64 %76
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !5
  %82 = getelementptr i16, i16* %70, i64 %78
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !5
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %86 = sext <8 x i16> %85 to <8 x i32>
  %87 = mul nsw <8 x i32> %74, %86
  %88 = lshr <8 x i32> %87, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = add <8 x i16> %81, %89
  %91 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 2, !alias.scope !7, !noalias !9
  %92 = add i64 %76, 8
  %93 = icmp eq i64 %92, %64
  br i1 %93, label %94, label %75, !llvm.loop !10

94:                                               ; preds = %75
  %95 = icmp eq i64 %39, %64
  br i1 %95, label %121, label %96

96:                                               ; preds = %94, %50, %24
  %97 = phi i16* [ %2, %50 ], [ %2, %24 ], [ %65, %94 ]
  %98 = phi i32 [ 0, %50 ], [ 0, %24 ], [ %66, %94 ]
  %99 = phi i16* [ %7, %50 ], [ %7, %24 ], [ %67, %94 ]
  %100 = phi i16* [ %44, %50 ], [ %44, %24 ], [ %69, %94 ]
  br label %101

101:                                              ; preds = %96, %101
  %102 = phi i16* [ %106, %101 ], [ %97, %96 ]
  %103 = phi i32 [ %118, %101 ], [ %98, %96 ]
  %104 = phi i16* [ %116, %101 ], [ %99, %96 ]
  %105 = phi i16* [ %117, %101 ], [ %100, %96 ]
  %106 = getelementptr inbounds i16, i16* %102, i64 1
  %107 = load i16, i16* %106, align 2
  %108 = load i16, i16* %105, align 2
  %109 = sext i16 %108 to i32
  %110 = load i16, i16* %43, align 2
  %111 = sext i16 %110 to i32
  %112 = mul nsw i32 %111, %109
  %113 = lshr i32 %112, 15
  %114 = trunc i32 %113 to i16
  %115 = add i16 %107, %114
  store i16 %115, i16* %104, align 2
  %116 = getelementptr inbounds i16, i16* %104, i64 1
  %117 = getelementptr inbounds i16, i16* %105, i64 -1
  %118 = add nuw nsw i32 %103, 1
  %119 = zext i32 %118 to i64
  %120 = icmp eq i64 %27, %119
  br i1 %120, label %121, label %101, !llvm.loop !12

121:                                              ; preds = %101, %94
  %122 = icmp ult i64 %42, 16
  br i1 %122, label %202, label %123

123:                                              ; preds = %121
  %124 = and i64 %42, 8589934576
  %125 = trunc i64 %124 to i32
  %126 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %124
  %127 = getelementptr i16, i16* %2, i64 %124
  %128 = and i64 %36, 3
  %129 = icmp ult i64 %34, 48
  br i1 %129, label %181, label %130

130:                                              ; preds = %123
  %131 = sub nsw i64 %36, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %178, %132 ]
  %134 = phi i64 [ %131, %130 ], [ %179, %132 ]
  %135 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %133
  %136 = getelementptr i16, i16* %2, i64 %133
  %137 = bitcast i16* %135 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 16
  %139 = getelementptr i16, i16* %135, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 16
  %142 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 2
  %143 = getelementptr i16, i16* %136, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2
  %145 = or i64 %133, 16
  %146 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %145
  %147 = getelementptr i16, i16* %2, i64 %145
  %148 = bitcast i16* %146 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 16
  %150 = getelementptr i16, i16* %146, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 16
  %153 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %153, align 2
  %154 = getelementptr i16, i16* %147, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2
  %156 = or i64 %133, 32
  %157 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %156
  %158 = getelementptr i16, i16* %2, i64 %156
  %159 = bitcast i16* %157 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 16
  %161 = getelementptr i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 16
  %164 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2
  %165 = getelementptr i16, i16* %158, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2
  %167 = or i64 %133, 48
  %168 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %167
  %169 = getelementptr i16, i16* %2, i64 %167
  %170 = bitcast i16* %168 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 16
  %172 = getelementptr i16, i16* %168, i64 8
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %175, align 2
  %176 = getelementptr i16, i16* %169, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %177, align 2
  %178 = add i64 %133, 64
  %179 = add i64 %134, -4
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %132, !llvm.loop !13

181:                                              ; preds = %132, %123
  %182 = phi i64 [ 0, %123 ], [ %178, %132 ]
  %183 = icmp eq i64 %128, 0
  br i1 %183, label %200, label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %197, %184 ], [ %182, %181 ]
  %186 = phi i64 [ %198, %184 ], [ %128, %181 ]
  %187 = getelementptr [15 x i16], [15 x i16]* %4, i64 0, i64 %185
  %188 = getelementptr i16, i16* %2, i64 %185
  %189 = bitcast i16* %187 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = getelementptr i16, i16* %187, i64 8
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 16
  %194 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %190, <8 x i16>* %194, align 2
  %195 = getelementptr i16, i16* %188, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %193, <8 x i16>* %196, align 2
  %197 = add i64 %185, 16
  %198 = add i64 %186, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %184, !llvm.loop !14

200:                                              ; preds = %184, %181
  %201 = icmp eq i64 %42, %124
  br i1 %201, label %19, label %202

202:                                              ; preds = %200, %121
  %203 = phi i32 [ 0, %121 ], [ %125, %200 ]
  %204 = phi i16* [ %6, %121 ], [ %126, %200 ]
  %205 = phi i16* [ %2, %121 ], [ %127, %200 ]
  br label %206

206:                                              ; preds = %202, %206
  %207 = phi i32 [ %213, %206 ], [ %203, %202 ]
  %208 = phi i16* [ %212, %206 ], [ %204, %202 ]
  %209 = phi i16* [ %211, %206 ], [ %205, %202 ]
  %210 = load i16, i16* %208, align 2
  store i16 %210, i16* %209, align 2
  %211 = getelementptr inbounds i16, i16* %209, i64 1
  %212 = getelementptr inbounds i16, i16* %208, i64 1
  %213 = add nuw nsw i32 %207, 1
  %214 = icmp eq i32 %213, %28
  br i1 %214, label %19, label %206, !llvm.loop !16

215:                                              ; preds = %19, %3
  call void @llvm.lifetime.end.p0i8(i64 30, i8* nonnull %5) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!6, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !17, !11}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
