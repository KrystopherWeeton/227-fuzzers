; ModuleID = '../../third_party/skia/src/sksl/codegen/SkSLVMCodeGenerator.cpp'
source_filename = "../../third_party/skia/src/sksl/codegen/SkSLVMCodeGenerator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Variable" = type <{ %"class.SkSL::Symbol", %"class.SkSL::VarDeclaration"*, %"struct.SkSL::Modifiers"*, i8, i8, [6 x i8] }>
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector.13", i32, i32, %"class.std::__1::vector.19", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.21" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::VarDeclaration" = type { %"class.SkSL::Statement", %"class.SkSL::Variable"*, %"class.SkSL::Type"*, i32, %"class.std::__1::unique_ptr.200" }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::unique_ptr.200" = type { %"class.std::__1::__compressed_pair.201" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::SkVMGenerator" = type { %"struct.SkSL::Program"*, %"class.skvm::Builder"*, %"struct.skvm::Coord", %"struct.skvm::Color", %"class.std::__1::function", %"class.std::__1::unordered_map", %"class.std::__1::vector.125", %"struct.skvm::I32", %"struct.skvm::I32", %"struct.skvm::I32", %"class.std::__1::vector.156" }
%"struct.SkSL::Program" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.49", %"class.std::__1::unique_ptr.50", %"struct.SkSL::Program::Inputs", %"class.std::__1::vector.62", %"class.std::__1::vector.75", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.88" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::String"* }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.SkSL::ProgramConfig"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector"* }
%"class.std::__1::vector" = type opaque
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.29" }
%"struct.std::__1::__atomic_base.29" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.30", %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.46", [4 x i8] }>
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i64 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { float }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.49" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.49", %"class.std::__1::vector.163", i8, %"class.std::__1::vector.171", %"class.std::__1::forward_list", %class.SkTHashMap.184, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"class.std::__1::unique_ptr.165"*, %"class.std::__1::unique_ptr.165"*, %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.279" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.std::__1::unique_ptr.165"* }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"class.std::__1::unique_ptr.173"*, %"class.std::__1::unique_ptr.173"*, %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::unique_ptr.173"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.184 = type { %class.SkTHashTable.185 }
%class.SkTHashTable.185 = type { i32, i32, %class.SkAutoTArray.186 }
%class.SkAutoTArray.186 = type { %"class.std::__1::unique_ptr.187" }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.289" }
%"struct.std::__1::pair.289" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.SkSL::Pool"* }
%"class.SkSL::Pool" = type { %"class.std::__1::unique_ptr.53" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %class.GrMemoryPool* }
%class.GrMemoryPool = type { %class.GrBlockAllocator }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%"struct.SkSL::Program::Inputs" = type { i8, i8 }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.SkSL::ProgramElement"* }
%"class.SkSL::ProgramElement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.std::__1::unique_ptr.64"* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"**, %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.SkSL::ProgramElement"** }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.SkSL::ModifiersPool"* }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.SkSL::ProgramUsage"* }
%"class.SkSL::ProgramUsage" = type { %class.SkTHashMap, %class.SkTHashMap.97 }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.91" }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", i32, [4 x i8] }
%"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.base", [4 x i8] }
%"struct.std::__1::pair.base" = type <{ %"class.SkSL::Variable"*, %"struct.SkSL::ProgramUsage::VariableCounts" }>
%"struct.SkSL::ProgramUsage::VariableCounts" = type { i32, i32, i32 }
%class.SkTHashMap.97 = type { %class.SkTHashTable.98 }
%class.SkTHashTable.98 = type { i32, i32, %class.SkAutoTArray.99 }
%class.SkAutoTArray.99 = type { %"class.std::__1::unique_ptr.100" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", i32, [4 x i8] }
%"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.base.292", [4 x i8] }
%"struct.std::__1::pair.base.292" = type <{ %"class.SkSL::FunctionDeclaration"*, i32 }>
%"class.SkSL::FunctionDeclaration" = type { %"class.SkSL::Symbol", %"class.SkSL::FunctionDefinition"*, %"struct.SkSL::Modifiers"*, %"class.std::__1::vector.207", %"class.SkSL::Type"*, i8, i8, i32 }
%"class.SkSL::FunctionDefinition" = type { %"class.SkSL::ProgramElement", %"class.SkSL::FunctionDeclaration"*, i8, %"class.std::__1::unique_ptr.194", %"class.std::__1::unordered_set.214", %"struct.SkSL::ASTNode"* }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.SkSL::Statement"* }
%"class.std::__1::unordered_set.214" = type { %"class.std::__1::__hash_table.215" }
%"class.std::__1::__hash_table.215" = type <{ %"class.std::__1::unique_ptr.216", %"class.std::__1::__compressed_pair.226", %"class.std::__1::__compressed_pair.231", %"class.std::__1::__compressed_pair.235", [4 x i8] }>
%"class.std::__1::unique_ptr.216" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218", %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.std::__1::__hash_node_base.219"** }
%"struct.std::__1::__hash_node_base.219" = type { %"struct.std::__1::__hash_node_base.219"* }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.std::__1::__bucket_list_deallocator.221" }
%"class.std::__1::__bucket_list_deallocator.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"struct.std::__1::__hash_node_base.219" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.SkSL::ASTNode" = type { %"class.std::__1::vector.240"*, %"struct.SkSL::ASTNode::NodeData", i32, i32, %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID" }
%"class.std::__1::vector.240" = type { %"class.std::__1::__vector_base.241" }
%"class.std::__1::__vector_base.241" = type { %"struct.SkSL::ASTNode"*, %"struct.SkSL::ASTNode"*, %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.SkSL::ASTNode"* }
%"struct.SkSL::ASTNode::NodeData" = type { [128 x i8], i32 }
%"class.SkSL::ASTNode::ID" = type { i32 }
%"class.std::__1::vector.207" = type { %"class.std::__1::__vector_base.208" }
%"class.std::__1::__vector_base.208" = type { %"class.SkSL::Variable"**, %"class.SkSL::Variable"**, %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.SkSL::Variable"** }
%"class.skvm::Builder" = type <{ %class.SkTHashMap.109, %"class.std::__1::vector.118", %"class.std::__1::vector.125", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.109 = type { %class.SkTHashTable.110 }
%class.SkTHashTable.110 = type { i32, i32, %class.SkAutoTArray.111 }
%class.SkAutoTArray.111 = type { %"class.std::__1::unique_ptr.112" }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.120" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"struct.skvm::Instruction"* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.132" }
%"class.std::__1::__hash_table.132" = type <{ %"class.std::__1::unique_ptr.133", %"class.std::__1::__compressed_pair.143", %"class.std::__1::__compressed_pair.148", %"class.std::__1::__compressed_pair.151", [4 x i8] }>
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135", %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.std::__1::__hash_node_base.136"** }
%"struct.std::__1::__hash_node_base.136" = type { %"struct.std::__1::__hash_node_base.136"* }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.std::__1::__bucket_list_deallocator.138" }
%"class.std::__1::__bucket_list_deallocator.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.std::__1::__hash_node_base.136" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { i32*, i32*, %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { i32* }
%"struct.skvm::I32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"*, %"class.std::__1::__compressed_pair.158" }
%"struct.SkSL::SkVMGenerator::Function" = type { %class.SkSpan, %"struct.skvm::I32" }
%class.SkSpan = type { i32*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.SkSL::SkVMGenerator::Function"* }
%"struct.std::__1::piecewise_construct_t" = type { i8 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf" }
%"class.std::__1::__tuple_leaf" = type { %"class.SkSL::Variable"** }
%"class.std::__1::tuple.442" = type { i8 }
%"struct.SkSL::(anonymous namespace)::Value" = type { %class.SkSTArray }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { i32*, i64 }
%"class.std::__1::vector.419" = type { %"class.std::__1::__vector_base.420" }
%"class.std::__1::__vector_base.420" = type { %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.std::__1::__compressed_pair.421" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.422" }
%"struct.std::__1::__compressed_pair_elem.422" = type { %"struct.skvm::F32"* }
%"class.SkSL::BinaryExpression" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr.200", %"class.SkSL::Operator", %"class.std::__1::unique_ptr.200" }
%"class.SkSL::Operator" = type { i32 }
%"class.SkSL::AnyConstructor" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr.200" }
%"struct.SkSL::IndexExpression" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200" }
%"class.SkSL::FunctionCall" = type { %"class.SkSL::Expression", %"class.SkSL::FunctionDeclaration"*, %class.SkSTArray.295 }
%class.SkSTArray.295 = type { %class.SkAlignedSTStorage.296, %class.SkTArray.297 }
%class.SkAlignedSTStorage.296 = type { [16 x i8] }
%class.SkTArray.297 = type { %"class.std::__1::unique_ptr.200"*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.SkSL::ExternalFunction" = type { %"class.SkSL::Symbol" }
%"class.SkSL::ForStatement" = type { %"class.SkSL::Statement", %"class.std::__1::shared_ptr.49", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.194" }
%"class.SkSL::IfStatement" = type <{ %"class.SkSL::Statement", %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194", i8, [7 x i8] }>
%"class.SkSL::ReturnStatement" = type { %"class.SkSL::Statement", %"class.std::__1::unique_ptr.200" }
%"class.SkSL::FieldAccess" = type { %"class.SkSL::Expression", i32, i8, %"class.std::__1::unique_ptr.200" }
%"class.SkSL::Block" = type <{ %"class.SkSL::Statement", %class.SkSTArray.248, %"class.std::__1::shared_ptr.49", i8, [7 x i8] }>
%class.SkSTArray.248 = type { %class.SkAlignedSTStorage.249, %class.SkTArray.250 }
%class.SkAlignedSTStorage.249 = type { [16 x i8] }
%class.SkTArray.250 = type { %"class.std::__1::unique_ptr.194"*, i64 }
%"struct.SkSL::Analysis::UnrollableLoopInfo" = type { %"class.SkSL::Variable"*, double, double, i32 }
%"struct.SkSL::SkVMSignature" = type { i64, i64 }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"*, %"class.std::__1::__compressed_pair.253" }
%"struct.skvm::Ptr" = type { i32 }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.skvm::Ptr"* }
%"struct.SkSL::UniformInfo" = type <{ %"class.std::__1::vector.261", i32, [4 x i8] }>
%"class.std::__1::vector.261" = type { %"class.std::__1::__vector_base.262" }
%"class.std::__1::__vector_base.262" = type { %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"*, %"class.std::__1::__compressed_pair.263" }
%"struct.SkSL::UniformInfo::Uniform" = type { %"class.SkSL::String", i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"struct.SkSL::UniformInfo::Uniform"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.125" }
%"class.std::__1::vector.271" = type { %"class.std::__1::__vector_base.272" }
%"class.std::__1::__vector_base.272" = type { %struct.Child*, %struct.Child*, %"class.std::__1::__compressed_pair.273" }
%struct.Child = type { %"struct.skvm::Uniform", %"struct.skvm::I32" }
%"struct.skvm::Uniform" = type { %"struct.skvm::Ptr", i32 }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %struct.Child* }
%class.SkSTArray.350 = type { %class.SkAlignedSTStorage.351, %class.SkTArray.352 }
%class.SkAlignedSTStorage.351 = type { [32 x i8] }
%class.SkTArray.352 = type { i64*, i64 }
%"struct.skvm::PixelFormat" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }

$_ZNK4SkSL4Type9slotCountEv = comdat any

$_ZN8SkTArrayImLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZNSt3__16vectorIN4SkSL11UniformInfo7UniformENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZN4skvm8Uniforms5pushFEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE12__call_emptyEPKNS0_16__policy_storageEiOS4_OS3_ = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@__const._ZN4SkSL13SkVMGenerator17writeForStatementERKNS_12ForStatementE.loop = private unnamed_addr constant { %"class.SkSL::Variable"*, double, double, i32, [4 x i8] } { %"class.SkSL::Variable"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Variable"*), double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@__const._ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiEPNS_13SkVMSignatureE.generator = private unnamed_addr constant %"class.SkSL::SkVMGenerator" { %"struct.SkSL::Program"* inttoptr (i64 -6148914691236517206 to %"struct.SkSL::Program"*), %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), %"struct.skvm::Coord" { %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }> }, %"struct.skvm::Color" { %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::F32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }> }, %"class.std::__1::function" { %"class.std::__1::__function::__policy_func" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker" { void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* inttoptr (i64 -6148914691236517206 to void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } }, %"class.std::__1::unordered_map" { %"class.std::__1::__hash_table.132" <{ %"class.std::__1::unique_ptr.133" { %"class.std::__1::__compressed_pair.134" { %"struct.std::__1::__compressed_pair_elem.135" { %"struct.std::__1::__hash_node_base.136"** inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base.136"**) }, %"struct.std::__1::__compressed_pair_elem.137" { %"class.std::__1::__bucket_list_deallocator.138" { %"class.std::__1::__compressed_pair.139" { %"struct.std::__1::__compressed_pair_elem.35" { i64 -6148914691236517206 } } } } } }, %"class.std::__1::__compressed_pair.143" { %"struct.std::__1::__compressed_pair_elem.144" { %"struct.std::__1::__hash_node_base.136" { %"struct.std::__1::__hash_node_base.136"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base.136"*) } } }, %"class.std::__1::__compressed_pair.148" { %"struct.std::__1::__compressed_pair_elem.35" { i64 -6148914691236517206 } }, %"class.std::__1::__compressed_pair.151" { %"struct.std::__1::__compressed_pair_elem.47" { float 0xFFFFFFFFE0000000 } }, [4 x i8] c"\AA\AA\AA\AA" }> }, %"class.std::__1::vector.125" { %"class.std::__1::__vector_base.126" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.127" { %"struct.std::__1::__compressed_pair_elem.128" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"struct.skvm::I32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::I32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.skvm::I32" <{ %"class.skvm::Builder"* inttoptr (i64 -6148914691236517206 to %"class.skvm::Builder"*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { %"struct.SkSL::SkVMGenerator::Function"* inttoptr (i64 -6148914691236517206 to %"struct.SkSL::SkVMGenerator::Function"*), %"struct.SkSL::SkVMGenerator::Function"* inttoptr (i64 -6148914691236517206 to %"struct.SkSL::SkVMGenerator::Function"*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { %"struct.SkSL::SkVMGenerator::Function"* inttoptr (i64 -6148914691236517206 to %"struct.SkSL::SkVMGenerator::Function"*) } } } } }, align 8
@.str = private unnamed_addr constant [5 x i8] c"main\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%s[%d]\00", align 1
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS4_7ProgramEPN4skvm7BuilderEE4$_52FNS8_5ColorEiNS8_5CoordESC_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8

@_ZN4SkSL13SkVMGeneratorC1ERKNS_7ProgramEPN4skvm7BuilderE6SkSpanIiENS4_5CoordES9_NS4_5ColorENSt3__18functionIFSA_iS9_SA_EEE = hidden unnamed_addr alias void (%"class.SkSL::SkVMGenerator"*, %"struct.SkSL::Program"*, %"class.skvm::Builder"*, i32*, i64, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %"class.std::__1::function"*), void (%"class.SkSL::SkVMGenerator"*, %"struct.SkSL::Program"*, %"class.skvm::Builder"*, i32*, i64, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %"class.std::__1::function"*)* @_ZN4SkSL13SkVMGeneratorC2ERKNS_7ProgramEPN4skvm7BuilderE6SkSpanIiENS4_5CoordES9_NS4_5ColorENSt3__18functionIFSA_iS9_SA_EEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGeneratorC2ERKNS_7ProgramEPN4skvm7BuilderE6SkSpanIiENS4_5CoordES9_NS4_5ColorENSt3__18functionIFSA_iS9_SA_EEE(%"class.SkSL::SkVMGenerator"*, %"struct.SkSL::Program"* dereferenceable(128), %"class.skvm::Builder"*, i32*, i64, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readonly byval(%"struct.skvm::Color") align 8, %"class.std::__1::function"* nocapture) unnamed_addr #0 align 2 {
  %10 = alloca %"class.std::__1::tuple", align 8
  %11 = alloca %"class.std::__1::tuple.442", align 1
  %12 = alloca %"class.SkSL::Variable"*, align 8
  %13 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %14 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 0
  store %"struct.SkSL::Program"* %1, %"struct.SkSL::Program"** %14, align 8
  %15 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  store %"class.skvm::Builder"* %2, %"class.skvm::Builder"** %15, align 8
  %16 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 2
  %17 = bitcast %"struct.skvm::Coord"* %16 to i8*
  %18 = bitcast %"struct.skvm::Coord"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* nonnull align 8 %18, i64 32, i1 false)
  %19 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 3
  %20 = bitcast %"struct.skvm::Color"* %19 to i8*
  %21 = bitcast %"struct.skvm::Color"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* nonnull align 8 %21, i64 64, i1 false)
  %22 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 4
  %23 = bitcast %"class.std::__1::function"* %22 to i8*
  %24 = bitcast %"class.std::__1::function"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false) #12
  %25 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 4, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %8, i64 0, i32 0, i32 1
  %27 = bitcast %"struct.std::__1::__function::__policy_invoker"* %26 to i64*
  %28 = bitcast %"struct.std::__1::__function::__policy_invoker"* %25 to i64*
  %29 = load i64, i64* %27, align 8
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 4, i32 0, i32 2
  %31 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %8, i64 0, i32 0, i32 2
  %32 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %31, align 8
  store %"struct.std::__1::__function::__policy"* %32, %"struct.std::__1::__function::__policy"** %30, align 8
  %33 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %32, i64 0, i32 1
  %34 = load void (i8*)*, void (i8*)** %33, align 8
  %35 = icmp eq void (i8*)* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %9
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %31, align 8
  store i64 ptrtoint (void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* @_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE12__call_emptyEPKNS0_16__policy_storageEiOS4_OS3_ to i64), i64* %27, align 8
  %37 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  br label %38

38:                                               ; preds = %9, %36
  %39 = phi %"class.skvm::Builder"* [ %2, %9 ], [ %37, %36 ]
  %40 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 5
  %41 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 5, i32 0, i32 3
  %42 = bitcast %"class.std::__1::__compressed_pair.151"* %41 to i32*
  %43 = bitcast %"class.std::__1::unordered_map"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 32, i1 false) #12
  store i32 1065353216, i32* %42, align 4
  %44 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6
  %45 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7
  %46 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 1
  %47 = bitcast %"class.std::__1::vector.125"* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 32, i1 false)
  store i32 -1, i32* %46, align 8
  %48 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8
  %49 = getelementptr inbounds %"struct.skvm::I32", %"struct.skvm::I32"* %48, i64 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %49, align 8
  %50 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 1
  store i32 -1, i32* %50, align 8
  %51 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %51, align 8
  %52 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 1
  store i32 -1, i32* %52, align 8
  %53 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10
  %54 = bitcast %"class.std::__1::vector.156"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #12
  %55 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %39, i32 -1) #12
  %56 = extractvalue { %"class.skvm::Builder"*, i32 } %55, 0
  %57 = extractvalue { %"class.skvm::Builder"*, i32 } %55, 1
  %58 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 0
  store %"class.skvm::Builder"* %56, %"class.skvm::Builder"** %58, align 8
  store i32 %57, i32* %50, align 8
  %59 = bitcast %"struct.skvm::I32"* %45 to i8*
  %60 = bitcast %"struct.skvm::I32"* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 12, i1 false)
  %61 = load %"struct.SkSL::Program"*, %"struct.SkSL::Program"** %14, align 8
  %62 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %61, i64 0, i32 6
  %63 = bitcast %"class.std::__1::vector.62"* %62 to i64*
  %64 = load i64, i64* %63, align 8, !noalias !2
  %65 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %61, i64 0, i32 6, i32 0, i32 1
  %66 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %61, i64 0, i32 7
  %67 = bitcast %"class.std::__1::vector.75"* %66 to i64*
  %68 = load i64, i64* %67, align 8, !noalias !2
  %69 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %61, i64 0, i32 7, i32 0, i32 1
  %70 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %69, align 8, !noalias !2
  %71 = load %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"** %65, align 8, !noalias !5
  %72 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %44, i64 0, i32 0, i32 0
  %73 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  %74 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 16
  %75 = bitcast i8* %74 to i32**
  %76 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 24
  %77 = bitcast i8* %76 to i64*
  %78 = bitcast i8* %74 to i8**
  %79 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %5, i64 0, i32 0, i32 1
  %80 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %5, i64 0, i32 1, i32 1
  %81 = bitcast %"class.SkSL::Variable"** %12 to i8*
  %82 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %40, i64 0, i32 0
  %83 = bitcast %"class.std::__1::tuple"* %10 to i8*
  %84 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %10, i64 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.std::__1::tuple.442", %"class.std::__1::tuple.442"* %11, i64 0, i32 0
  %86 = inttoptr i64 %64 to %"class.std::__1::unique_ptr.64"*
  %87 = icmp eq %"class.std::__1::unique_ptr.64"* %71, %86
  %88 = inttoptr i64 %68 to %"class.SkSL::ProgramElement"**
  %89 = icmp eq %"class.SkSL::ProgramElement"** %70, %88
  %90 = and i1 %87, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %222, %38
  ret void

92:                                               ; preds = %38, %222
  %93 = phi i1 [ %234, %222 ], [ %89, %38 ]
  %94 = phi %"class.SkSL::ProgramElement"** [ %233, %222 ], [ %88, %38 ]
  %95 = phi %"class.std::__1::unique_ptr.64"* [ %231, %222 ], [ %86, %38 ]
  %96 = phi i32* [ %224, %222 ], [ %3, %38 ]
  %97 = phi i64 [ %223, %222 ], [ 0, %38 ]
  %98 = phi i64 [ %230, %222 ], [ %68, %38 ]
  %99 = phi i64 [ %229, %222 ], [ %64, %38 ]
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %95, i64 0, i32 0, i32 0, i32 0
  %101 = select i1 %93, %"class.SkSL::ProgramElement"** %100, %"class.SkSL::ProgramElement"** %94
  %102 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %101, align 8
  %103 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %102, i64 0, i32 0, i32 2
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 4
  br i1 %105, label %106, label %222

106:                                              ; preds = %92
  %107 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %102, i64 1
  %108 = bitcast %"class.SkSL::ProgramElement"* %107 to %"class.SkSL::VarDeclaration"**
  %109 = load %"class.SkSL::VarDeclaration"*, %"class.SkSL::VarDeclaration"** %108, align 8
  %110 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %109, i64 0, i32 1
  %111 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %110, align 8
  %112 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %111, i64 0, i32 0, i32 2
  %113 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %112, align 8
  %114 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %113, i64 0, i32 3
  %115 = load i32, i32* %114, align 8
  %116 = add i32 %115, -13
  %117 = icmp ult i32 %116, 2
  br i1 %117, label %118, label %124

118:                                              ; preds = %106
  %119 = add i64 %97, 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #12
  store %"class.SkSL::Variable"* %111, %"class.SkSL::Variable"** %12, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #12
  store %"class.SkSL::Variable"** %12, %"class.SkSL::Variable"*** %84, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %85) #12
  %120 = call { %"struct.std::__1::__hash_node_base.136"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.132"* %82, %"class.SkSL::Variable"** nonnull dereferenceable(8) %12, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %10, %"class.std::__1::tuple.442"* nonnull dereferenceable(1) %11) #12
  %121 = extractvalue { %"struct.std::__1::__hash_node_base.136"*, i8 } %120, 0
  %122 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %121, i64 3
  %123 = bitcast %"struct.std::__1::__hash_node_base.136"* %122 to i64*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %85) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #12
  store i64 %97, i64* %123, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #12
  br label %222

124:                                              ; preds = %106
  %125 = call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Variable"* dereferenceable(64) %111)
  %126 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %112, align 8
  %127 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %126)
  %128 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %111, i64 0, i32 2
  %129 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %128, align 8
  %130 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %129, i64 0, i32 0, i32 6
  %131 = load i32, i32* %130, align 8
  %132 = icmp sgt i32 %131, -1
  br i1 %132, label %133, label %155

133:                                              ; preds = %124
  %134 = icmp eq i32 %131, 15
  br i1 %134, label %135, label %222

135:                                              ; preds = %133
  %136 = load i32, i32* %79, align 8
  %137 = load i32*, i32** %72, align 8
  %138 = getelementptr inbounds i32, i32* %137, i64 %125
  store i32 %136, i32* %138, align 4
  %139 = load i32, i32* %80, align 8
  %140 = add i64 %125, 1
  %141 = load i32*, i32** %72, align 8
  %142 = getelementptr inbounds i32, i32* %141, i64 %140
  store i32 %139, i32* %142, align 4
  %143 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  %144 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %143, i32 0) #12
  %145 = extractvalue { %"class.skvm::Builder"*, i32 } %144, 1
  %146 = add i64 %125, 2
  %147 = load i32*, i32** %72, align 8
  %148 = getelementptr inbounds i32, i32* %147, i64 %146
  store i32 %145, i32* %148, align 4
  %149 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  %150 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %149, i32 1065353216) #12
  %151 = extractvalue { %"class.skvm::Builder"*, i32 } %150, 1
  %152 = add i64 %125, 3
  %153 = load i32*, i32** %72, align 8
  %154 = getelementptr inbounds i32, i32* %153, i64 %152
  store i32 %151, i32* %154, align 4
  br label %222

155:                                              ; preds = %124
  %156 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %129, i64 0, i32 1
  %157 = load i32, i32* %156, align 8
  %158 = and i32 %157, 8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %169, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds i32, i32* %96, i64 %127
  %162 = icmp eq i64 %127, 0
  br i1 %162, label %222, label %163

163:                                              ; preds = %160
  %164 = shl nuw i64 %127, 2
  %165 = load i32*, i32** %72, align 8
  %166 = getelementptr inbounds i32, i32* %165, i64 %125
  %167 = bitcast i32* %166 to i8*
  %168 = bitcast i32* %96 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %167, i8* align 4 %168, i64 %164, i1 false) #12
  br label %222

169:                                              ; preds = %155
  %170 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %109, i64 0, i32 4, i32 0, i32 0, i32 0
  %171 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %170, align 8
  %172 = icmp eq %"class.SkSL::Expression"* %171, null
  br i1 %172, label %222, label %173

173:                                              ; preds = %169
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %13, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* nonnull dereferenceable(24) %171)
  %174 = icmp eq i64 %127, 0
  br i1 %174, label %192, label %175

175:                                              ; preds = %173
  %176 = and i64 %127, 1
  %177 = icmp eq i64 %127, 1
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = sub i64 %127, %176
  br label %199

180:                                              ; preds = %199, %175
  %181 = phi i64 [ 0, %175 ], [ %219, %199 ]
  %182 = icmp eq i64 %176, 0
  br i1 %182, label %192, label %183

183:                                              ; preds = %180
  %184 = load i32*, i32** %75, align 8
  %185 = shl i64 %181, 32
  %186 = ashr exact i64 %185, 32
  %187 = getelementptr inbounds i32, i32* %184, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = add i64 %181, %125
  %190 = load i32*, i32** %72, align 8
  %191 = getelementptr inbounds i32, i32* %190, i64 %189
  store i32 %188, i32* %191, align 4
  br label %192

192:                                              ; preds = %183, %180, %173
  %193 = load i64, i64* %77, align 8
  %194 = and i64 %193, 1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  %197 = load i8*, i8** %78, align 8
  call void @_Z7sk_freePv(i8* %197) #12
  br label %198

198:                                              ; preds = %192, %196
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #12
  br label %222

199:                                              ; preds = %199, %178
  %200 = phi i64 [ 0, %178 ], [ %219, %199 ]
  %201 = phi i64 [ %179, %178 ], [ %220, %199 ]
  %202 = load i32*, i32** %75, align 8
  %203 = shl i64 %200, 32
  %204 = ashr exact i64 %203, 32
  %205 = getelementptr inbounds i32, i32* %202, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = add i64 %200, %125
  %208 = load i32*, i32** %72, align 8
  %209 = getelementptr inbounds i32, i32* %208, i64 %207
  store i32 %206, i32* %209, align 4
  %210 = or i64 %200, 1
  %211 = load i32*, i32** %75, align 8
  %212 = shl i64 %210, 32
  %213 = ashr exact i64 %212, 32
  %214 = getelementptr inbounds i32, i32* %211, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = add i64 %210, %125
  %217 = load i32*, i32** %72, align 8
  %218 = getelementptr inbounds i32, i32* %217, i64 %216
  store i32 %215, i32* %218, align 4
  %219 = add nuw i64 %200, 2
  %220 = add i64 %201, -2
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %180, label %199

222:                                              ; preds = %169, %163, %160, %118, %198, %135, %133, %92
  %223 = phi i64 [ %97, %92 ], [ %119, %118 ], [ %97, %198 ], [ %97, %169 ], [ %97, %135 ], [ %97, %133 ], [ %97, %160 ], [ %97, %163 ]
  %224 = phi i32* [ %96, %92 ], [ %96, %118 ], [ %96, %198 ], [ %96, %169 ], [ %96, %135 ], [ %96, %133 ], [ %161, %160 ], [ %161, %163 ]
  %225 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %95, i64 1
  %226 = ptrtoint %"class.std::__1::unique_ptr.64"* %225 to i64
  %227 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %94, i64 1
  %228 = ptrtoint %"class.SkSL::ProgramElement"** %227 to i64
  %229 = select i1 %93, i64 %226, i64 %99
  %230 = select i1 %93, i64 %98, i64 %228
  %231 = inttoptr i64 %229 to %"class.std::__1::unique_ptr.64"*
  %232 = icmp eq %"class.std::__1::unique_ptr.64"* %71, %231
  %233 = inttoptr i64 %230 to %"class.SkSL::ProgramElement"**
  %234 = icmp eq %"class.SkSL::ProgramElement"** %70, %233
  %235 = and i1 %232, %234
  br i1 %235, label %91, label %92
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::Variable"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::tuple", align 8
  %4 = alloca %"class.std::__1::tuple.442", align 1
  %5 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %6 = alloca %"class.SkSL::Variable"*, align 8
  %7 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 5
  %8 = ptrtoint %"class.SkSL::Variable"* %1 to i64
  %9 = lshr i64 %8, 32
  %10 = shl i64 %8, 3
  %11 = and i64 %10, 4294967288
  %12 = add nuw nsw i64 %11, 8
  %13 = xor i64 %12, %9
  %14 = mul i64 %13, -7070675565921424023
  %15 = lshr i64 %14, 47
  %16 = xor i64 %14, %9
  %17 = xor i64 %16, %15
  %18 = mul i64 %17, -7070675565921424023
  %19 = lshr i64 %18, 47
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, -7070675565921424023
  %22 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %77, label %25

25:                                               ; preds = %2
  %26 = tail call i64 @llvm.ctpop.i64(i64 %23) #12, !range !8
  %27 = icmp ugt i64 %26, 1
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = add i64 %23, -1
  %30 = and i64 %29, %21
  br label %35

31:                                               ; preds = %25
  %32 = icmp ult i64 %21, %23
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = urem i64 %21, %23
  br label %35

35:                                               ; preds = %33, %31, %28
  %36 = phi i64 [ %30, %28 ], [ %34, %33 ], [ %21, %31 ]
  %37 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %37, align 8
  %39 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %38, i64 %36
  %40 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %39, align 8
  %41 = icmp eq %"struct.std::__1::__hash_node_base.136"* %40, null
  br i1 %41, label %77, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %40, i64 0, i32 0
  %44 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %43, align 8
  %45 = icmp eq %"struct.std::__1::__hash_node_base.136"* %44, null
  br i1 %45, label %77, label %46

46:                                               ; preds = %42
  %47 = add i64 %23, -1
  br label %48

48:                                               ; preds = %69, %46
  %49 = phi %"struct.std::__1::__hash_node_base.136"* [ %44, %46 ], [ %71, %69 ]
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %49, i64 1
  %51 = bitcast %"struct.std::__1::__hash_node_base.136"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, %21
  br i1 %53, label %64, label %54

54:                                               ; preds = %48
  br i1 %27, label %57, label %55

55:                                               ; preds = %54
  %56 = and i64 %52, %47
  br label %61

57:                                               ; preds = %54
  %58 = icmp ult i64 %52, %23
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  %60 = urem i64 %52, %23
  br label %61

61:                                               ; preds = %59, %57, %55
  %62 = phi i64 [ %56, %55 ], [ %60, %59 ], [ %52, %57 ]
  %63 = icmp eq i64 %62, %36
  br i1 %63, label %69, label %77

64:                                               ; preds = %48
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %49, i64 2
  %66 = bitcast %"struct.std::__1::__hash_node_base.136"* %65 to %"class.SkSL::Variable"**
  %67 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %66, align 8
  %68 = icmp eq %"class.SkSL::Variable"* %67, %1
  br i1 %68, label %73, label %69

69:                                               ; preds = %64, %61
  %70 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %49, i64 0, i32 0
  %71 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %70, align 8
  %72 = icmp eq %"struct.std::__1::__hash_node_base.136"* %71, null
  br i1 %72, label %77, label %48

73:                                               ; preds = %64
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %49, i64 3
  %75 = bitcast %"struct.std::__1::__hash_node_base.136"* %74 to i64*
  %76 = load i64, i64* %75, align 8
  br label %120

77:                                               ; preds = %61, %69, %35, %2, %42
  %78 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6
  %79 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6, i32 0, i32 1
  %80 = bitcast i32** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.std::__1::vector.125"* %78 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %81, %83
  %85 = ashr exact i64 %84, 2
  %86 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %1, i64 0, i32 0, i32 2
  %87 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %86, align 8
  %88 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %87)
  %89 = add i64 %85, %88
  %90 = bitcast { %"class.skvm::Builder"*, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #12
  %91 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %92 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %91, align 8
  %93 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %92, i32 0) #12
  %94 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %5, i64 0, i32 0
  %95 = extractvalue { %"class.skvm::Builder"*, i32 } %93, 0
  store %"class.skvm::Builder"* %95, %"class.skvm::Builder"** %94, align 8
  %96 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %5, i64 0, i32 1
  %97 = extractvalue { %"class.skvm::Builder"*, i32 } %93, 1
  store i32 %97, i32* %96, align 8
  %98 = load i64, i64* %80, align 8
  %99 = load i64, i64* %82, align 8
  %100 = sub i64 %98, %99
  %101 = ashr exact i64 %100, 2
  %102 = icmp ugt i64 %89, %101
  %103 = inttoptr i64 %99 to i32*
  br i1 %102, label %104, label %106

104:                                              ; preds = %77
  %105 = sub i64 %89, %101
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.125"* %78, i64 %105, i32* dereferenceable(4) %96) #12
  br label %110

106:                                              ; preds = %77
  %107 = icmp ult i64 %89, %101
  br i1 %107, label %108, label %110

108:                                              ; preds = %106
  %109 = getelementptr inbounds i32, i32* %103, i64 %89
  store i32* %109, i32** %79, align 8
  br label %110

110:                                              ; preds = %104, %106, %108
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #12
  %111 = bitcast %"class.SkSL::Variable"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #12
  store %"class.SkSL::Variable"* %1, %"class.SkSL::Variable"** %6, align 8
  %112 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0
  %113 = bitcast %"class.std::__1::tuple"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113) #12
  %114 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.SkSL::Variable"** %6, %"class.SkSL::Variable"*** %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::tuple.442", %"class.std::__1::tuple.442"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %115) #12
  %116 = call { %"struct.std::__1::__hash_node_base.136"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.132"* %112, %"class.SkSL::Variable"** nonnull dereferenceable(8) %6, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %3, %"class.std::__1::tuple.442"* nonnull dereferenceable(1) %4) #12
  %117 = extractvalue { %"struct.std::__1::__hash_node_base.136"*, i8 } %116, 0
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %117, i64 3
  %119 = bitcast %"struct.std::__1::__hash_node_base.136"* %118 to i64*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %115) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %113) #12
  store i64 %85, i64* %119, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #12
  br label %120

120:                                              ; preds = %110, %73
  %121 = phi i64 [ %76, %73 ], [ %85, %110 ]
  ret i64 %121
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %41 [
    i32 13, label %42
    i32 2, label %42
    i32 3, label %42
    i32 5, label %42
    i32 6, label %42
    i32 7, label %42
    i32 14, label %42
    i32 10, label %42
    i32 12, label %42
    i32 8, label %4
    i32 1, label %4
    i32 11, label %5
    i32 4, label %9
    i32 9, label %16
    i32 0, label %31
  ]

4:                                                ; preds = %1, %1
  br label %42

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  br label %42

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 9
  %13 = load i32, i32* %12, align 4
  %14 = mul nsw i32 %13, %11
  %15 = sext i32 %14 to i64
  br label %42

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 10, i32 0, i32 0
  %18 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 10, i32 0, i32 1
  %20 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %19, align 8
  %21 = icmp eq %"struct.SkSL::Type::Field"* %18, %20
  br i1 %21, label %42, label %22

22:                                               ; preds = %16, %22
  %23 = phi i64 [ %28, %22 ], [ 0, %16 ]
  %24 = phi %"struct.SkSL::Type::Field"* [ %29, %22 ], [ %18, %16 ]
  %25 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %24, i64 0, i32 2
  %26 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %25, align 8
  %27 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %26)
  %28 = add i64 %27, %23
  %29 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %24, i64 1
  %30 = icmp eq %"struct.SkSL::Type::Field"* %29, %20
  br i1 %30, label %42, label %22

31:                                               ; preds = %1
  %32 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 8
  %33 = load i32, i32* %32, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %0, i64 0, i32 6
  %36 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %35, align 8
  %37 = icmp eq %"class.SkSL::Type"* %36, null
  %38 = select i1 %37, %"class.SkSL::Type"* %0, %"class.SkSL::Type"* %36
  %39 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %38)
  %40 = mul i64 %39, %34
  ret i64 %40

41:                                               ; preds = %1
  tail call void @llvm.trap()
  unreachable

42:                                               ; preds = %22, %16, %1, %1, %1, %1, %1, %1, %1, %1, %1, %9, %5, %4
  %43 = phi i64 [ %15, %9 ], [ %8, %5 ], [ 1, %4 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %1 ], [ 0, %16 ], [ %28, %22 ]
  ret i64 %43
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* noalias sret, %"class.SkSL::SkVMGenerator"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.skvm::I32", align 8
  %5 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %6 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %7 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %8 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %9 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %10 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %11 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %12 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %13 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %14 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %15 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %16 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %17 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %18 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %19 = alloca %"class.std::__1::vector.419", align 8
  %20 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %21 = alloca %"class.std::__1::vector.419", align 8
  %22 = alloca %"class.std::__1::vector.125", align 8
  %23 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %24 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %25 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %26 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %27 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %28 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %29 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %30 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %31 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %32 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %33 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %34 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %35 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %36 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %37 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  switch i32 %38, label %2827 [
    i32 30, label %39
    i32 31, label %41
    i32 33, label %58
    i32 34, label %58
    i32 40, label %58
    i32 36, label %142
    i32 37, label %230
    i32 38, label %339
    i32 35, label %339
    i32 39, label %823
    i32 44, label %911
    i32 48, label %1001
    i32 55, label %1068
    i32 45, label %1120
    i32 47, label %1134
    i32 41, label %1488
    i32 43, label %1784
    i32 49, label %1799
    i32 50, label %2189
    i32 52, label %2504
    i32 53, label %2570
  ]

39:                                               ; preds = %3
  %40 = bitcast %"class.SkSL::Expression"* %2 to %"class.SkSL::BinaryExpression"*
  tail call fastcc void @_ZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::BinaryExpression"* dereferenceable(48) %40)
  br label %2833

41:                                               ; preds = %3
  %42 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %43 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %42, align 8
  %44 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %45 = bitcast %"class.SkSL::Expression"* %44 to i8*
  %46 = load i8, i8* %45, align 8, !range !9
  %47 = shl nuw i8 %46, 7
  %48 = ashr exact i8 %47, 7
  %49 = sext i8 %48 to i32
  %50 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %43, i32 %49) #12
  %51 = extractvalue { %"class.skvm::Builder"*, i32 } %50, 1
  %52 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %53 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %54 = bitcast i8* %53 to i64*
  %55 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = bitcast i8* %52 to i8**
  store i8* %55, i8** %56, align 8
  %57 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %54, align 8
  store i32 %51, i32* %57, align 8
  br label %2833

58:                                               ; preds = %3, %3, %3
  %59 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %2) #12
  %60 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %61 = getelementptr inbounds %"class.SkSL::AnyConstructor", %"class.SkSL::AnyConstructor"* %59, i64 0, i32 0
  %62 = bitcast %"class.SkSL::AnyConstructor"* %59 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 -86, i64 32, i1 false)
  %63 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %62, align 8, !noalias !10
  %64 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %63, i64 3
  %65 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %64, align 8
  %66 = tail call dereferenceable(184) %"class.SkSL::Type"* %65(%"class.SkSL::Expression"* %61) #12
  %67 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %66) #12
  %68 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %69 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %70 = bitcast i8* %69 to i64*
  %71 = bitcast i8* %68 to i8**
  store i8* %60, i8** %71, align 8, !alias.scope !10
  store i64 34359738368, i64* %70, align 8, !alias.scope !10
  %72 = bitcast i8* %68 to %class.SkTArray*
  %73 = trunc i64 %67 to i32
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %82

75:                                               ; preds = %58
  tail call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %72, i32 %73, i32 1) #12
  %76 = load i64, i64* %70, align 8, !alias.scope !10
  %77 = shl i64 %67, 1
  %78 = add i64 %76, %77
  %79 = and i64 %78, 4294967294
  %80 = and i64 %76, -4294967295
  %81 = or i64 %79, %80
  store i64 %81, i64* %70, align 8, !alias.scope !10
  br label %88

82:                                               ; preds = %58
  %83 = icmp slt i32 %73, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %82
  %85 = shl i64 %67, 1
  %86 = and i64 %85, 4294967294
  %87 = or i64 %86, 34359738368
  store i64 %87, i64* %70, align 8, !alias.scope !10
  tail call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %72, i32 0, i32 2) #12
  br label %88

88:                                               ; preds = %84, %82, %75
  %89 = bitcast %"class.SkSL::AnyConstructor"* %59 to { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %90 = load { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %89, align 8, !noalias !10
  %91 = getelementptr inbounds { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)** %90, i64 12
  %92 = load { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)** %91, align 8
  %93 = tail call { %"class.std::__1::unique_ptr.200"*, i64 } %92(%"class.SkSL::AnyConstructor"* %59) #12
  %94 = extractvalue { %"class.std::__1::unique_ptr.200"*, i64 } %93, 0
  %95 = extractvalue { %"class.std::__1::unique_ptr.200"*, i64 } %93, 1
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %94, i64 %95
  %97 = icmp eq i64 %95, 0
  br i1 %97, label %2833, label %98

98:                                               ; preds = %88
  %99 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %36, i64 0, i32 0, i32 0, i32 0, i64 0
  %100 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %36, i64 0, i32 0, i32 0, i32 0, i64 24
  %101 = bitcast i8* %100 to i64*
  %102 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %36, i64 0, i32 0, i32 0, i32 0, i64 16
  %103 = bitcast i8* %102 to i32**
  %104 = bitcast i8* %68 to i32**
  %105 = bitcast i8* %102 to i8**
  br label %106

106:                                              ; preds = %98, %121
  %107 = phi i64 [ 0, %98 ], [ %115, %121 ]
  %108 = phi %"class.std::__1::unique_ptr.200"* [ %94, %98 ], [ %122, %121 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %99) #12, !noalias !10
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %108, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %99, i8 -86, i64 32, i1 false)
  %110 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %109, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %36, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %110) #12
  %111 = load i64, i64* %101, align 8, !noalias !10
  %112 = and i64 %111, 4294967294
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %124

114:                                              ; preds = %124, %106
  %115 = phi i64 [ %107, %106 ], [ %131, %124 ]
  %116 = phi i64 [ %111, %106 ], [ %138, %124 ]
  %117 = and i64 %116, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %114
  %120 = load i8*, i8** %105, align 8, !noalias !10
  call void @_Z7sk_freePv(i8* %120) #12
  br label %121

121:                                              ; preds = %119, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %99) #12, !noalias !10
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %108, i64 1
  %123 = icmp eq %"class.std::__1::unique_ptr.200"* %122, %96
  br i1 %123, label %2833, label %106

124:                                              ; preds = %106, %124
  %125 = phi i64 [ %137, %124 ], [ 0, %106 ]
  %126 = phi i64 [ %131, %124 ], [ %107, %106 ]
  %127 = load i32*, i32** %103, align 8, !noalias !10
  %128 = shl i64 %125, 32
  %129 = ashr exact i64 %128, 32
  %130 = getelementptr inbounds i32, i32* %127, i64 %129
  %131 = add i64 %126, 1
  %132 = load i32*, i32** %104, align 8, !alias.scope !10
  %133 = shl i64 %126, 32
  %134 = ashr exact i64 %133, 32
  %135 = getelementptr inbounds i32, i32* %132, i64 %134
  %136 = load i32, i32* %130, align 4
  store i32 %136, i32* %135, align 4
  %137 = add nuw nsw i64 %125, 1
  %138 = load i64, i64* %101, align 8, !noalias !10
  %139 = lshr i64 %138, 1
  %140 = and i64 %139, 2147483647
  %141 = icmp ult i64 %137, %140
  br i1 %141, label %124, label %114

142:                                              ; preds = %3
  %143 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %144 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %143, align 8, !noalias !13
  %145 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %35, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %145) #12, !noalias !13
  %146 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %147 = bitcast i32* %146 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %145, i8 -86, i64 32, i1 false)
  %148 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %147, align 8, !noalias !13
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %35, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %148) #12
  %149 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %150 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %144, i64 0, i32 9
  call void @llvm.memset.p0i8.i64(i8* align 8 %149, i8 -86, i64 32, i1 false)
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %144, i64 0, i32 8
  %153 = load i32, i32* %152, align 8
  %154 = mul nsw i32 %153, %151
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %157 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %158 = bitcast i8* %157 to i64*
  %159 = bitcast i8* %156 to i8**
  store i8* %149, i8** %159, align 8, !alias.scope !13
  store i64 34359738368, i64* %158, align 8, !alias.scope !13
  %160 = bitcast i8* %156 to %class.SkTArray*
  %161 = icmp sgt i32 %154, 0
  br i1 %161, label %162, label %169

162:                                              ; preds = %142
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %160, i32 %154, i32 1) #12
  %163 = load i64, i64* %158, align 8, !alias.scope !13
  %164 = shl nsw i64 %155, 1
  %165 = add i64 %163, %164
  %166 = and i64 %165, 4294967294
  %167 = and i64 %163, -4294967295
  %168 = or i64 %166, %167
  store i64 %168, i64* %158, align 8, !alias.scope !13
  br label %175

169:                                              ; preds = %142
  %170 = icmp slt i32 %154, 0
  br i1 %170, label %171, label %175

171:                                              ; preds = %169
  %172 = shl nsw i64 %155, 1
  %173 = and i64 %172, 4294967294
  %174 = or i64 %173, 34359738368
  store i64 %174, i64* %158, align 8, !alias.scope !13
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %160, i32 0, i32 2) #12
  br label %175

175:                                              ; preds = %171, %169, %162
  %176 = load i32, i32* %152, align 8
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %178, label %219

178:                                              ; preds = %175
  %179 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %180 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %35, i64 0, i32 0, i32 0, i32 0, i64 16
  %181 = bitcast i8* %180 to i32**
  %182 = bitcast i8* %156 to i32**
  %183 = load i32, i32* %150, align 4
  br label %184

184:                                              ; preds = %178, %192
  %185 = phi i32 [ %176, %178 ], [ %193, %192 ]
  %186 = phi i32 [ %183, %178 ], [ %194, %192 ]
  %187 = phi i32 [ 0, %178 ], [ %196, %192 ]
  %188 = phi i64 [ 0, %178 ], [ %195, %192 ]
  %189 = icmp sgt i32 %186, 0
  br i1 %189, label %198, label %192

190:                                              ; preds = %209
  %191 = load i32, i32* %152, align 8
  br label %192

192:                                              ; preds = %190, %184
  %193 = phi i32 [ %185, %184 ], [ %191, %190 ]
  %194 = phi i32 [ %186, %184 ], [ %217, %190 ]
  %195 = phi i64 [ %188, %184 ], [ %211, %190 ]
  %196 = add nuw nsw i32 %187, 1
  %197 = icmp slt i32 %196, %193
  br i1 %197, label %184, label %219

198:                                              ; preds = %184, %209
  %199 = phi i32 [ %216, %209 ], [ 0, %184 ]
  %200 = phi i64 [ %211, %209 ], [ %188, %184 ]
  %201 = icmp eq i32 %187, %199
  br i1 %201, label %202, label %205

202:                                              ; preds = %198
  %203 = load i32*, i32** %181, align 8, !noalias !13
  %204 = load i32, i32* %203, align 4
  br label %209

205:                                              ; preds = %198
  %206 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %179, align 8, !noalias !13
  %207 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %206, i32 0) #12
  %208 = extractvalue { %"class.skvm::Builder"*, i32 } %207, 1
  br label %209

209:                                              ; preds = %205, %202
  %210 = phi i32 [ %204, %202 ], [ %208, %205 ]
  %211 = add i64 %200, 1
  %212 = load i32*, i32** %182, align 8, !alias.scope !13
  %213 = shl i64 %200, 32
  %214 = ashr exact i64 %213, 32
  %215 = getelementptr inbounds i32, i32* %212, i64 %214
  store i32 %210, i32* %215, align 4
  %216 = add nuw nsw i32 %199, 1
  %217 = load i32, i32* %150, align 4
  %218 = icmp slt i32 %216, %217
  br i1 %218, label %198, label %190

219:                                              ; preds = %192, %175
  %220 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %35, i64 0, i32 0, i32 0, i32 0, i64 24
  %221 = bitcast i8* %220 to i64*
  %222 = load i64, i64* %221, align 8, !noalias !13
  %223 = and i64 %222, 1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %229, label %225

225:                                              ; preds = %219
  %226 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %35, i64 0, i32 0, i32 0, i32 0, i64 16
  %227 = bitcast i8* %226 to i8**
  %228 = load i8*, i8** %227, align 8, !noalias !13
  call void @_Z7sk_freePv(i8* %228) #12
  br label %229

229:                                              ; preds = %219, %225
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %145) #12, !noalias !13
  br label %2833

230:                                              ; preds = %3
  %231 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %232 = bitcast i32* %231 to %"class.SkSL::Expression"**
  %233 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %232, align 8, !noalias !16
  %234 = bitcast %"class.SkSL::Expression"* %233 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %235 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %234, align 8
  %236 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %235, i64 3
  %237 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %236, align 8
  %238 = tail call dereferenceable(184) %"class.SkSL::Type"* %237(%"class.SkSL::Expression"* %233) #12
  %239 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %240 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %239, align 8, !noalias !16
  %241 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %241) #12, !noalias !16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %241, i8 -86, i64 32, i1 false)
  %242 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %232, align 8, !noalias !16
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %34, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %242) #12
  %243 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %244 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %240, i64 0, i32 9
  call void @llvm.memset.p0i8.i64(i8* align 8 %243, i8 -86, i64 32, i1 false)
  %245 = load i32, i32* %244, align 4
  %246 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %240, i64 0, i32 8
  %247 = load i32, i32* %246, align 8
  %248 = mul nsw i32 %247, %245
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %251 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %252 = bitcast i8* %251 to i64*
  %253 = bitcast i8* %250 to i8**
  store i8* %243, i8** %253, align 8, !alias.scope !16
  store i64 34359738368, i64* %252, align 8, !alias.scope !16
  %254 = bitcast i8* %250 to %class.SkTArray*
  %255 = icmp sgt i32 %248, 0
  br i1 %255, label %256, label %263

256:                                              ; preds = %230
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %254, i32 %248, i32 1) #12
  %257 = load i64, i64* %252, align 8, !alias.scope !16
  %258 = shl nsw i64 %249, 1
  %259 = add i64 %257, %258
  %260 = and i64 %259, 4294967294
  %261 = and i64 %257, -4294967295
  %262 = or i64 %260, %261
  store i64 %262, i64* %252, align 8, !alias.scope !16
  br label %269

263:                                              ; preds = %230
  %264 = icmp slt i32 %248, 0
  br i1 %264, label %265, label %269

265:                                              ; preds = %263
  %266 = shl nsw i64 %249, 1
  %267 = and i64 %266, 4294967294
  %268 = or i64 %267, 34359738368
  store i64 %268, i64* %252, align 8, !alias.scope !16
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %254, i32 0, i32 2) #12
  br label %269

269:                                              ; preds = %265, %263, %256
  %270 = load i32, i32* %246, align 8
  %271 = icmp sgt i32 %270, 0
  br i1 %271, label %272, label %328

272:                                              ; preds = %269
  %273 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %238, i64 0, i32 8
  %274 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %238, i64 0, i32 9
  %275 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %276 = bitcast i8* %250 to i32**
  %277 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 16
  %278 = bitcast i8* %277 to i32**
  %279 = load i32, i32* %244, align 4
  br label %280

280:                                              ; preds = %272, %288
  %281 = phi i32 [ %270, %272 ], [ %289, %288 ]
  %282 = phi i32 [ %279, %272 ], [ %290, %288 ]
  %283 = phi i32 [ 0, %272 ], [ %292, %288 ]
  %284 = phi i64 [ 0, %272 ], [ %291, %288 ]
  %285 = icmp sgt i32 %282, 0
  br i1 %285, label %294, label %288

286:                                              ; preds = %323
  %287 = load i32, i32* %246, align 8
  br label %288

288:                                              ; preds = %286, %280
  %289 = phi i32 [ %281, %280 ], [ %287, %286 ]
  %290 = phi i32 [ %282, %280 ], [ %326, %286 ]
  %291 = phi i64 [ %284, %280 ], [ %324, %286 ]
  %292 = add nuw nsw i32 %283, 1
  %293 = icmp slt i32 %292, %289
  br i1 %293, label %280, label %328

294:                                              ; preds = %280, %323
  %295 = phi i32 [ %325, %323 ], [ 0, %280 ]
  %296 = phi i64 [ %324, %323 ], [ %284, %280 ]
  %297 = load i32, i32* %273, align 8
  %298 = icmp slt i32 %283, %297
  br i1 %298, label %299, label %313

299:                                              ; preds = %294
  %300 = load i32, i32* %274, align 4
  %301 = icmp slt i32 %295, %300
  br i1 %301, label %302, label %313

302:                                              ; preds = %299
  %303 = mul nsw i32 %300, %283
  %304 = add nsw i32 %303, %295
  %305 = load i32*, i32** %278, align 8, !noalias !16
  %306 = sext i32 %304 to i64
  %307 = getelementptr inbounds i32, i32* %305, i64 %306
  %308 = load i32*, i32** %276, align 8, !alias.scope !16
  %309 = shl i64 %296, 32
  %310 = ashr exact i64 %309, 32
  %311 = getelementptr inbounds i32, i32* %308, i64 %310
  %312 = load i32, i32* %307, align 4
  store i32 %312, i32* %311, align 4
  br label %323

313:                                              ; preds = %299, %294
  %314 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %275, align 8, !noalias !16
  %315 = icmp eq i32 %283, %295
  %316 = select i1 %315, i32 1065353216, i32 0
  %317 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %314, i32 %316) #12
  %318 = extractvalue { %"class.skvm::Builder"*, i32 } %317, 1
  %319 = load i32*, i32** %276, align 8, !alias.scope !16
  %320 = shl i64 %296, 32
  %321 = ashr exact i64 %320, 32
  %322 = getelementptr inbounds i32, i32* %319, i64 %321
  store i32 %318, i32* %322, align 4
  br label %323

323:                                              ; preds = %313, %302
  %324 = add i64 %296, 1
  %325 = add nuw nsw i32 %295, 1
  %326 = load i32, i32* %244, align 4
  %327 = icmp slt i32 %325, %326
  br i1 %327, label %294, label %286

328:                                              ; preds = %288, %269
  %329 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 24
  %330 = bitcast i8* %329 to i64*
  %331 = load i64, i64* %330, align 8, !noalias !16
  %332 = and i64 %331, 1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %338, label %334

334:                                              ; preds = %328
  %335 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 16
  %336 = bitcast i8* %335 to i8**
  %337 = load i8*, i8** %336, align 8, !noalias !16
  call void @_Z7sk_freePv(i8* %337) #12
  br label %338

338:                                              ; preds = %328, %334
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %241) #12, !noalias !16
  br label %2833

339:                                              ; preds = %3, %3
  %340 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %2) #12
  %341 = bitcast %"class.SkSL::AnyConstructor"* %340 to { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %342 = load { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %341, align 8, !noalias !19
  %343 = getelementptr inbounds { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)** %342, i64 12
  %344 = load { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.200"*, i64 } (%"class.SkSL::AnyConstructor"*)** %343, align 8
  %345 = tail call { %"class.std::__1::unique_ptr.200"*, i64 } %344(%"class.SkSL::AnyConstructor"* %340) #12
  %346 = extractvalue { %"class.std::__1::unique_ptr.200"*, i64 } %345, 0
  %347 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %346, i64 0, i32 0, i32 0, i32 0
  %348 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %347, align 8
  %349 = bitcast %"class.SkSL::Expression"* %348 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %350 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %349, align 8
  %351 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %350, i64 3
  %352 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %351, align 8
  %353 = tail call dereferenceable(184) %"class.SkSL::Type"* %352(%"class.SkSL::Expression"* %348) #12
  %354 = getelementptr inbounds %"class.SkSL::AnyConstructor", %"class.SkSL::AnyConstructor"* %340, i64 0, i32 0
  %355 = bitcast %"class.SkSL::AnyConstructor"* %340 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %356 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %355, align 8, !noalias !19
  %357 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %356, i64 3
  %358 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %357, align 8
  %359 = tail call dereferenceable(184) %"class.SkSL::Type"* %358(%"class.SkSL::Expression"* %354) #12
  br label %360

360:                                              ; preds = %364, %339
  %361 = phi %"class.SkSL::Type"* [ %353, %339 ], [ %368, %364 ]
  %362 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %361, i64 0, i32 3
  %363 = load i32, i32* %362, align 8
  switch i32 %363, label %369 [
    i32 4, label %364
    i32 11, label %364
  ]

364:                                              ; preds = %360, %360
  %365 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %361, i64 0, i32 6
  %366 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %365, align 8
  %367 = icmp eq %"class.SkSL::Type"* %366, null
  %368 = select i1 %367, %"class.SkSL::Type"* %361, %"class.SkSL::Type"* %366
  br label %360

369:                                              ; preds = %360
  %370 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %361, i64 0, i32 4
  %371 = load i32, i32* %370, align 4
  br label %372

372:                                              ; preds = %376, %369
  %373 = phi %"class.SkSL::Type"* [ %359, %369 ], [ %380, %376 ]
  %374 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %373, i64 0, i32 3
  %375 = load i32, i32* %374, align 8
  switch i32 %375, label %381 [
    i32 4, label %376
    i32 11, label %376
  ]

376:                                              ; preds = %372, %372
  %377 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %373, i64 0, i32 6
  %378 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %377, align 8
  %379 = icmp eq %"class.SkSL::Type"* %378, null
  %380 = select i1 %379, %"class.SkSL::Type"* %373, %"class.SkSL::Type"* %378
  br label %372

381:                                              ; preds = %372
  %382 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %373, i64 0, i32 4
  %383 = load i32, i32* %382, align 4
  %384 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %384) #12, !noalias !19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %384, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %33, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %348) #12
  %385 = icmp eq i32 %371, %383
  br i1 %385, label %386, label %423

386:                                              ; preds = %381
  %387 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %388 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %389 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %390 = bitcast i8* %389 to i64*
  %391 = bitcast i8* %387 to i8**
  store i8* %388, i8** %391, align 8, !alias.scope !22
  store i64 34359738368, i64* %390, align 8, !alias.scope !22
  %392 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %33, %0
  br i1 %392, label %812, label %393

393:                                              ; preds = %386
  %394 = bitcast i8* %387 to %class.SkTArray*
  %395 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  store i64 34359738368, i64* %390, align 8, !alias.scope !22
  %396 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 24
  %397 = bitcast i8* %396 to i64*
  %398 = load i64, i64* %397, align 8, !noalias !22
  %399 = lshr i64 %398, 1
  %400 = trunc i64 %399 to i32
  %401 = and i32 %400, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %394, i32 %401, i32 0) #12
  %402 = load i64, i64* %397, align 8, !noalias !22
  %403 = and i64 %402, 4294967294
  %404 = load i64, i64* %390, align 8, !alias.scope !22
  %405 = and i64 %404, -4294967295
  %406 = or i64 %405, %403
  store i64 %406, i64* %390, align 8, !alias.scope !22
  %407 = bitcast i8* %395 to i32**
  %408 = load i32*, i32** %407, align 8, !noalias !22
  %409 = icmp eq i64 %403, 0
  br i1 %409, label %812, label %410

410:                                              ; preds = %393
  %411 = bitcast i8* %387 to i32**
  br label %412

412:                                              ; preds = %412, %410
  %413 = phi i64 [ 0, %410 ], [ %418, %412 ]
  %414 = load i32*, i32** %411, align 8, !alias.scope !22
  %415 = getelementptr inbounds i32, i32* %414, i64 %413
  %416 = getelementptr inbounds i32, i32* %408, i64 %413
  %417 = load i32, i32* %416, align 4
  store i32 %417, i32* %415, align 4
  %418 = add nuw nsw i64 %413, 1
  %419 = load i64, i64* %390, align 8, !alias.scope !22
  %420 = lshr i64 %419, 1
  %421 = and i64 %420, 2147483647
  %422 = icmp ult i64 %418, %421
  br i1 %422, label %412, label %812

423:                                              ; preds = %381
  %424 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %32, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %424) #12, !noalias !22
  %425 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 24
  %426 = bitcast i8* %425 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %424, i8 -86, i64 16, i1 false) #12, !noalias !22
  %427 = load i64, i64* %426, align 8, !noalias !22
  %428 = lshr i64 %427, 1
  %429 = and i64 %428, 2147483647
  %430 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %32, i64 0, i32 0, i32 0, i32 0, i64 16
  %431 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %32, i64 0, i32 0, i32 0, i32 0, i64 24
  %432 = bitcast i8* %431 to i64*
  %433 = bitcast i8* %430 to i8**
  store i8* %424, i8** %433, align 8, !noalias !22
  store i64 34359738368, i64* %432, align 8, !noalias !22
  %434 = trunc i64 %429 to i32
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %444, label %436

436:                                              ; preds = %423
  %437 = bitcast i8* %430 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %437, i32 %434, i32 1) #12
  %438 = load i64, i64* %432, align 8, !noalias !22
  %439 = shl nuw nsw i64 %429, 1
  %440 = add i64 %438, %439
  %441 = and i64 %440, 4294967294
  %442 = and i64 %438, -4294967295
  %443 = or i64 %441, %442
  store i64 %443, i64* %432, align 8, !noalias !22
  br label %444

444:                                              ; preds = %436, %423
  switch i32 %383, label %799 [
    i32 0, label %445
    i32 1, label %565
    i32 3, label %684
  ]

445:                                              ; preds = %444
  switch i32 %371, label %799 [
    i32 1, label %459
    i32 3, label %446
  ]

446:                                              ; preds = %445
  %447 = load i64, i64* %426, align 8, !noalias !22
  %448 = and i64 %447, 4294967294
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %513, label %450

450:                                              ; preds = %446
  %451 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %452 = bitcast i8* %451 to i32**
  %453 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %454 = bitcast { %"class.skvm::Builder"*, i32 }* %30 to i8*
  %455 = bitcast { %"class.skvm::Builder"*, i32 }* %30 to %"struct.skvm::I32"*
  %456 = bitcast { %"class.skvm::Builder"*, i32 }* %30 to i64*
  %457 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %30, i64 0, i32 1
  %458 = bitcast i8* %430 to i32**
  br label %541

459:                                              ; preds = %445
  %460 = load i64, i64* %426, align 8, !noalias !22
  %461 = and i64 %460, 4294967294
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %463

463:                                              ; preds = %459
  %464 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %465 = bitcast i8* %464 to i32**
  %466 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %467 = bitcast i8* %430 to i32**
  br label %496

468:                                              ; preds = %496, %459
  %469 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %470 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %471 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %472 = bitcast i8* %471 to i64*
  %473 = bitcast i8* %469 to i8**
  store i8* %470, i8** %473, align 8, !alias.scope !22
  store i64 34359738368, i64* %472, align 8, !alias.scope !22
  %474 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %474, label %805, label %475

475:                                              ; preds = %468
  %476 = bitcast i8* %469 to %class.SkTArray*
  store i64 34359738368, i64* %472, align 8, !alias.scope !22
  %477 = load i64, i64* %432, align 8, !noalias !22
  %478 = lshr i64 %477, 1
  %479 = trunc i64 %478 to i32
  %480 = and i32 %479, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %476, i32 %480, i32 0) #12
  %481 = load i64, i64* %432, align 8, !noalias !22
  %482 = and i64 %481, 4294967294
  %483 = load i64, i64* %472, align 8, !alias.scope !22
  %484 = and i64 %483, -4294967295
  %485 = or i64 %484, %482
  store i64 %485, i64* %472, align 8, !alias.scope !22
  %486 = shl i64 %481, 1
  %487 = and i64 %486, 8589934588
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %493, label %489

489:                                              ; preds = %475
  %490 = load i8*, i8** %473, align 8, !alias.scope !22
  %491 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %490, i8* align 1 %491, i64 %487, i1 false) #12
  %492 = load i64, i64* %432, align 8, !noalias !22
  br label %493

493:                                              ; preds = %489, %475
  %494 = phi i64 [ %481, %475 ], [ %492, %489 ]
  %495 = and i64 %494, -4294967295
  store i64 %495, i64* %432, align 8, !noalias !22
  br label %805

496:                                              ; preds = %496, %463
  %497 = phi i64 [ 0, %463 ], [ %508, %496 ]
  %498 = load i32*, i32** %465, align 8, !noalias !22
  %499 = shl i64 %497, 32
  %500 = ashr exact i64 %499, 32
  %501 = getelementptr inbounds i32, i32* %498, i64 %500
  %502 = load i32, i32* %501, align 4
  %503 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %466, align 8, !noalias !22
  %504 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6to_F32ENS_3I32E(%"class.skvm::Builder"* %503, %"class.skvm::Builder"* %503, i32 %502) #12
  %505 = extractvalue { %"class.skvm::Builder"*, i32 } %504, 1
  %506 = load i32*, i32** %467, align 8, !noalias !22
  %507 = getelementptr inbounds i32, i32* %506, i64 %500
  store i32 %505, i32* %507, align 4
  %508 = add nuw nsw i64 %497, 1
  %509 = load i64, i64* %426, align 8, !noalias !22
  %510 = lshr i64 %509, 1
  %511 = and i64 %510, 2147483647
  %512 = icmp ult i64 %508, %511
  br i1 %512, label %496, label %468

513:                                              ; preds = %541, %446
  %514 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %515 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %516 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %517 = bitcast i8* %516 to i64*
  %518 = bitcast i8* %514 to i8**
  store i8* %515, i8** %518, align 8, !alias.scope !22
  store i64 34359738368, i64* %517, align 8, !alias.scope !22
  %519 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %519, label %805, label %520

520:                                              ; preds = %513
  %521 = bitcast i8* %514 to %class.SkTArray*
  store i64 34359738368, i64* %517, align 8, !alias.scope !22
  %522 = load i64, i64* %432, align 8, !noalias !22
  %523 = lshr i64 %522, 1
  %524 = trunc i64 %523 to i32
  %525 = and i32 %524, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %521, i32 %525, i32 0) #12
  %526 = load i64, i64* %432, align 8, !noalias !22
  %527 = and i64 %526, 4294967294
  %528 = load i64, i64* %517, align 8, !alias.scope !22
  %529 = and i64 %528, -4294967295
  %530 = or i64 %529, %527
  store i64 %530, i64* %517, align 8, !alias.scope !22
  %531 = shl i64 %526, 1
  %532 = and i64 %531, 8589934588
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %538, label %534

534:                                              ; preds = %520
  %535 = load i8*, i8** %518, align 8, !alias.scope !22
  %536 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %535, i8* align 1 %536, i64 %532, i1 false) #12
  %537 = load i64, i64* %432, align 8, !noalias !22
  br label %538

538:                                              ; preds = %534, %520
  %539 = phi i64 [ %526, %520 ], [ %537, %534 ]
  %540 = and i64 %539, -4294967295
  store i64 %540, i64* %432, align 8, !noalias !22
  br label %805

541:                                              ; preds = %541, %450
  %542 = phi i64 [ 0, %450 ], [ %560, %541 ]
  %543 = load i32*, i32** %452, align 8, !noalias !22
  %544 = shl i64 %542, 32
  %545 = ashr exact i64 %544, 32
  %546 = getelementptr inbounds i32, i32* %543, i64 %545
  %547 = load i32, i32* %546, align 4
  %548 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %453, align 8, !noalias !22
  %549 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %548, i32 1065353216) #12
  %550 = extractvalue { %"class.skvm::Builder"*, i32 } %549, 0
  %551 = extractvalue { %"class.skvm::Builder"*, i32 } %549, 1
  %552 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %548, i32 0) #12
  %553 = extractvalue { %"class.skvm::Builder"*, i32 } %552, 0
  %554 = extractvalue { %"class.skvm::Builder"*, i32 } %552, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %454) #12, !noalias !22
  %555 = ptrtoint %"class.skvm::Builder"* %553 to i64
  store i64 %555, i64* %456, align 8, !noalias !22
  store i32 %554, i32* %457, align 8, !noalias !22
  %556 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %548, %"class.skvm::Builder"* %548, i32 %547, %"class.skvm::Builder"* %550, i32 %551, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %455) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %454) #12, !noalias !22
  %557 = extractvalue { %"class.skvm::Builder"*, i32 } %556, 1
  %558 = load i32*, i32** %458, align 8, !noalias !22
  %559 = getelementptr inbounds i32, i32* %558, i64 %545
  store i32 %557, i32* %559, align 4
  %560 = add nuw nsw i64 %542, 1
  %561 = load i64, i64* %426, align 8, !noalias !22
  %562 = lshr i64 %561, 1
  %563 = and i64 %562, 2147483647
  %564 = icmp ult i64 %560, %563
  br i1 %564, label %541, label %513

565:                                              ; preds = %444
  switch i32 %371, label %799 [
    i32 0, label %579
    i32 3, label %566
  ]

566:                                              ; preds = %565
  %567 = load i64, i64* %426, align 8, !noalias !22
  %568 = and i64 %567, 4294967294
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %633, label %570

570:                                              ; preds = %566
  %571 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %572 = bitcast i8* %571 to i32**
  %573 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %574 = bitcast { %"class.skvm::Builder"*, i32 }* %31 to i8*
  %575 = bitcast { %"class.skvm::Builder"*, i32 }* %31 to %"struct.skvm::I32"*
  %576 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %31, i64 0, i32 0
  %577 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %31, i64 0, i32 1
  %578 = bitcast i8* %430 to i32**
  br label %661

579:                                              ; preds = %565
  %580 = load i64, i64* %426, align 8, !noalias !22
  %581 = and i64 %580, 4294967294
  %582 = icmp eq i64 %581, 0
  br i1 %582, label %588, label %583

583:                                              ; preds = %579
  %584 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %585 = bitcast i8* %584 to i32**
  %586 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %587 = bitcast i8* %430 to i32**
  br label %616

588:                                              ; preds = %616, %579
  %589 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %590 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %591 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %592 = bitcast i8* %591 to i64*
  %593 = bitcast i8* %589 to i8**
  store i8* %590, i8** %593, align 8, !alias.scope !22
  store i64 34359738368, i64* %592, align 8, !alias.scope !22
  %594 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %594, label %805, label %595

595:                                              ; preds = %588
  %596 = bitcast i8* %589 to %class.SkTArray*
  store i64 34359738368, i64* %592, align 8, !alias.scope !22
  %597 = load i64, i64* %432, align 8, !noalias !22
  %598 = lshr i64 %597, 1
  %599 = trunc i64 %598 to i32
  %600 = and i32 %599, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %596, i32 %600, i32 0) #12
  %601 = load i64, i64* %432, align 8, !noalias !22
  %602 = and i64 %601, 4294967294
  %603 = load i64, i64* %592, align 8, !alias.scope !22
  %604 = and i64 %603, -4294967295
  %605 = or i64 %604, %602
  store i64 %605, i64* %592, align 8, !alias.scope !22
  %606 = shl i64 %601, 1
  %607 = and i64 %606, 8589934588
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %613, label %609

609:                                              ; preds = %595
  %610 = load i8*, i8** %593, align 8, !alias.scope !22
  %611 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %610, i8* align 1 %611, i64 %607, i1 false) #12
  %612 = load i64, i64* %432, align 8, !noalias !22
  br label %613

613:                                              ; preds = %609, %595
  %614 = phi i64 [ %601, %595 ], [ %612, %609 ]
  %615 = and i64 %614, -4294967295
  store i64 %615, i64* %432, align 8, !noalias !22
  br label %805

616:                                              ; preds = %616, %583
  %617 = phi i64 [ 0, %583 ], [ %628, %616 ]
  %618 = load i32*, i32** %585, align 8, !noalias !22
  %619 = shl i64 %617, 32
  %620 = ashr exact i64 %619, 32
  %621 = getelementptr inbounds i32, i32* %618, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %586, align 8, !noalias !22
  %624 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"* %623, %"class.skvm::Builder"* %623, i32 %622) #12
  %625 = extractvalue { %"class.skvm::Builder"*, i32 } %624, 1
  %626 = load i32*, i32** %587, align 8, !noalias !22
  %627 = getelementptr inbounds i32, i32* %626, i64 %620
  store i32 %625, i32* %627, align 4
  %628 = add nuw nsw i64 %617, 1
  %629 = load i64, i64* %426, align 8, !noalias !22
  %630 = lshr i64 %629, 1
  %631 = and i64 %630, 2147483647
  %632 = icmp ult i64 %628, %631
  br i1 %632, label %616, label %588

633:                                              ; preds = %661, %566
  %634 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %635 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %636 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %637 = bitcast i8* %636 to i64*
  %638 = bitcast i8* %634 to i8**
  store i8* %635, i8** %638, align 8, !alias.scope !22
  store i64 34359738368, i64* %637, align 8, !alias.scope !22
  %639 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %639, label %805, label %640

640:                                              ; preds = %633
  %641 = bitcast i8* %634 to %class.SkTArray*
  store i64 34359738368, i64* %637, align 8, !alias.scope !22
  %642 = load i64, i64* %432, align 8, !noalias !22
  %643 = lshr i64 %642, 1
  %644 = trunc i64 %643 to i32
  %645 = and i32 %644, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %641, i32 %645, i32 0) #12
  %646 = load i64, i64* %432, align 8, !noalias !22
  %647 = and i64 %646, 4294967294
  %648 = load i64, i64* %637, align 8, !alias.scope !22
  %649 = and i64 %648, -4294967295
  %650 = or i64 %649, %647
  store i64 %650, i64* %637, align 8, !alias.scope !22
  %651 = shl i64 %646, 1
  %652 = and i64 %651, 8589934588
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %658, label %654

654:                                              ; preds = %640
  %655 = load i8*, i8** %638, align 8, !alias.scope !22
  %656 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %655, i8* align 1 %656, i64 %652, i1 false) #12
  %657 = load i64, i64* %432, align 8, !noalias !22
  br label %658

658:                                              ; preds = %654, %640
  %659 = phi i64 [ %646, %640 ], [ %657, %654 ]
  %660 = and i64 %659, -4294967295
  store i64 %660, i64* %432, align 8, !noalias !22
  br label %805

661:                                              ; preds = %661, %570
  %662 = phi i64 [ 0, %570 ], [ %679, %661 ]
  %663 = load i32*, i32** %572, align 8, !noalias !22
  %664 = shl i64 %662, 32
  %665 = ashr exact i64 %664, 32
  %666 = getelementptr inbounds i32, i32* %663, i64 %665
  %667 = load i32, i32* %666, align 4
  %668 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %573, align 8, !noalias !22
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %574) #12, !noalias !22
  %669 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %668, i32 1) #12
  %670 = extractvalue { %"class.skvm::Builder"*, i32 } %669, 0
  %671 = extractvalue { %"class.skvm::Builder"*, i32 } %669, 1
  %672 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %668, i32 0) #12
  %673 = extractvalue { %"class.skvm::Builder"*, i32 } %672, 0
  store %"class.skvm::Builder"* %673, %"class.skvm::Builder"** %576, align 8, !noalias !22
  %674 = extractvalue { %"class.skvm::Builder"*, i32 } %672, 1
  store i32 %674, i32* %577, align 8, !noalias !22
  %675 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %668, %"class.skvm::Builder"* %668, i32 %667, %"class.skvm::Builder"* %670, i32 %671, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %575) #12
  %676 = extractvalue { %"class.skvm::Builder"*, i32 } %675, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %574) #12, !noalias !22
  %677 = load i32*, i32** %578, align 8, !noalias !22
  %678 = getelementptr inbounds i32, i32* %677, i64 %665
  store i32 %676, i32* %678, align 4
  %679 = add nuw nsw i64 %662, 1
  %680 = load i64, i64* %426, align 8, !noalias !22
  %681 = lshr i64 %680, 1
  %682 = and i64 %681, 2147483647
  %683 = icmp ult i64 %679, %682
  br i1 %683, label %661, label %633

684:                                              ; preds = %444
  switch i32 %371, label %799 [
    i32 1, label %694
    i32 0, label %685
  ]

685:                                              ; preds = %684
  %686 = load i64, i64* %426, align 8, !noalias !22
  %687 = and i64 %686, 4294967294
  %688 = icmp eq i64 %687, 0
  br i1 %688, label %751, label %689

689:                                              ; preds = %685
  %690 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %691 = bitcast i8* %690 to i32**
  %692 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %693 = bitcast i8* %430 to i32**
  br label %779

694:                                              ; preds = %684
  %695 = load i64, i64* %426, align 8, !noalias !22
  %696 = and i64 %695, 4294967294
  %697 = icmp eq i64 %696, 0
  br i1 %697, label %703, label %698

698:                                              ; preds = %694
  %699 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %700 = bitcast i8* %699 to i32**
  %701 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %702 = bitcast i8* %430 to i32**
  br label %731

703:                                              ; preds = %731, %694
  %704 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %705 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %706 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %707 = bitcast i8* %706 to i64*
  %708 = bitcast i8* %704 to i8**
  store i8* %705, i8** %708, align 8, !alias.scope !22
  store i64 34359738368, i64* %707, align 8, !alias.scope !22
  %709 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %709, label %805, label %710

710:                                              ; preds = %703
  %711 = bitcast i8* %704 to %class.SkTArray*
  store i64 34359738368, i64* %707, align 8, !alias.scope !22
  %712 = load i64, i64* %432, align 8, !noalias !22
  %713 = lshr i64 %712, 1
  %714 = trunc i64 %713 to i32
  %715 = and i32 %714, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %711, i32 %715, i32 0) #12
  %716 = load i64, i64* %432, align 8, !noalias !22
  %717 = and i64 %716, 4294967294
  %718 = load i64, i64* %707, align 8, !alias.scope !22
  %719 = and i64 %718, -4294967295
  %720 = or i64 %719, %717
  store i64 %720, i64* %707, align 8, !alias.scope !22
  %721 = shl i64 %716, 1
  %722 = and i64 %721, 8589934588
  %723 = icmp eq i64 %722, 0
  br i1 %723, label %728, label %724

724:                                              ; preds = %710
  %725 = load i8*, i8** %708, align 8, !alias.scope !22
  %726 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %725, i8* align 1 %726, i64 %722, i1 false) #12
  %727 = load i64, i64* %432, align 8, !noalias !22
  br label %728

728:                                              ; preds = %724, %710
  %729 = phi i64 [ %716, %710 ], [ %727, %724 ]
  %730 = and i64 %729, -4294967295
  store i64 %730, i64* %432, align 8, !noalias !22
  br label %805

731:                                              ; preds = %731, %698
  %732 = phi i64 [ 0, %698 ], [ %746, %731 ]
  %733 = load i32*, i32** %700, align 8, !noalias !22
  %734 = shl i64 %732, 32
  %735 = ashr exact i64 %734, 32
  %736 = getelementptr inbounds i32, i32* %733, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %701, align 8, !noalias !22
  %739 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %738, i32 0) #12
  %740 = extractvalue { %"class.skvm::Builder"*, i32 } %739, 0
  %741 = extractvalue { %"class.skvm::Builder"*, i32 } %739, 1
  %742 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3I32ES1_(%"class.skvm::Builder"* %738, %"class.skvm::Builder"* %738, i32 %737, %"class.skvm::Builder"* %740, i32 %741) #12
  %743 = extractvalue { %"class.skvm::Builder"*, i32 } %742, 1
  %744 = load i32*, i32** %702, align 8, !noalias !22
  %745 = getelementptr inbounds i32, i32* %744, i64 %735
  store i32 %743, i32* %745, align 4
  %746 = add nuw nsw i64 %732, 1
  %747 = load i64, i64* %426, align 8, !noalias !22
  %748 = lshr i64 %747, 1
  %749 = and i64 %748, 2147483647
  %750 = icmp ult i64 %746, %749
  br i1 %750, label %731, label %703

751:                                              ; preds = %779, %685
  %752 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %753 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %754 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %755 = bitcast i8* %754 to i64*
  %756 = bitcast i8* %752 to i8**
  store i8* %753, i8** %756, align 8, !alias.scope !22
  store i64 34359738368, i64* %755, align 8, !alias.scope !22
  %757 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %32, %0
  br i1 %757, label %805, label %758

758:                                              ; preds = %751
  %759 = bitcast i8* %752 to %class.SkTArray*
  store i64 34359738368, i64* %755, align 8, !alias.scope !22
  %760 = load i64, i64* %432, align 8, !noalias !22
  %761 = lshr i64 %760, 1
  %762 = trunc i64 %761 to i32
  %763 = and i32 %762, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %759, i32 %763, i32 0) #12
  %764 = load i64, i64* %432, align 8, !noalias !22
  %765 = and i64 %764, 4294967294
  %766 = load i64, i64* %755, align 8, !alias.scope !22
  %767 = and i64 %766, -4294967295
  %768 = or i64 %767, %765
  store i64 %768, i64* %755, align 8, !alias.scope !22
  %769 = shl i64 %764, 1
  %770 = and i64 %769, 8589934588
  %771 = icmp eq i64 %770, 0
  br i1 %771, label %776, label %772

772:                                              ; preds = %758
  %773 = load i8*, i8** %756, align 8, !alias.scope !22
  %774 = load i8*, i8** %433, align 8, !noalias !22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %773, i8* align 1 %774, i64 %770, i1 false) #12
  %775 = load i64, i64* %432, align 8, !noalias !22
  br label %776

776:                                              ; preds = %772, %758
  %777 = phi i64 [ %764, %758 ], [ %775, %772 ]
  %778 = and i64 %777, -4294967295
  store i64 %778, i64* %432, align 8, !noalias !22
  br label %805

779:                                              ; preds = %779, %689
  %780 = phi i64 [ 0, %689 ], [ %794, %779 ]
  %781 = load i32*, i32** %691, align 8, !noalias !22
  %782 = shl i64 %780, 32
  %783 = ashr exact i64 %782, 32
  %784 = getelementptr inbounds i32, i32* %781, i64 %783
  %785 = load i32, i32* %784, align 4
  %786 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %692, align 8, !noalias !22
  %787 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %786, i32 0) #12
  %788 = extractvalue { %"class.skvm::Builder"*, i32 } %787, 0
  %789 = extractvalue { %"class.skvm::Builder"*, i32 } %787, 1
  %790 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3F32ES1_(%"class.skvm::Builder"* %786, %"class.skvm::Builder"* %786, i32 %785, %"class.skvm::Builder"* %788, i32 %789) #12
  %791 = extractvalue { %"class.skvm::Builder"*, i32 } %790, 1
  %792 = load i32*, i32** %693, align 8, !noalias !22
  %793 = getelementptr inbounds i32, i32* %792, i64 %783
  store i32 %791, i32* %793, align 4
  %794 = add nuw nsw i64 %780, 1
  %795 = load i64, i64* %426, align 8, !noalias !22
  %796 = lshr i64 %795, 1
  %797 = and i64 %796, 2147483647
  %798 = icmp ult i64 %794, %797
  br i1 %798, label %779, label %751

799:                                              ; preds = %684, %565, %445, %444
  %800 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %800, i8 0, i64 16, i1 false) #12, !alias.scope !22
  %801 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %802 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %803 = bitcast i8* %802 to i64*
  %804 = bitcast i8* %801 to i8**
  store i8* %800, i8** %804, align 8, !alias.scope !22
  store i64 34359738368, i64* %803, align 8, !alias.scope !22
  br label %805

805:                                              ; preds = %799, %776, %751, %728, %703, %658, %633, %613, %588, %538, %513, %493, %468
  %806 = load i64, i64* %432, align 8, !noalias !22
  %807 = and i64 %806, 1
  %808 = icmp eq i64 %807, 0
  br i1 %808, label %811, label %809

809:                                              ; preds = %805
  %810 = load i8*, i8** %433, align 8, !noalias !22
  call void @_Z7sk_freePv(i8* %810) #12
  br label %811

811:                                              ; preds = %809, %805
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %424) #12, !noalias !22
  br label %812

812:                                              ; preds = %412, %386, %811, %393
  %813 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 24
  %814 = bitcast i8* %813 to i64*
  %815 = load i64, i64* %814, align 8, !noalias !19
  %816 = and i64 %815, 1
  %817 = icmp eq i64 %816, 0
  br i1 %817, label %822, label %818

818:                                              ; preds = %812
  %819 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %820 = bitcast i8* %819 to i8**
  %821 = load i8*, i8** %820, align 8, !noalias !19
  call void @_Z7sk_freePv(i8* %821) #12
  br label %822

822:                                              ; preds = %812, %818
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %384) #12, !noalias !19
  br label %2833

823:                                              ; preds = %3
  %824 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %825 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %824, align 8, !noalias !25
  %826 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %825, i64 0, i32 8
  %827 = load i32, i32* %826, align 8
  %828 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %828) #12, !noalias !25
  %829 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %830 = bitcast i32* %829 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %828, i8 -86, i64 32, i1 false)
  %831 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %830, align 8, !noalias !25
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %29, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %831) #12
  %832 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %833 = sext i32 %827 to i64
  %834 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %835 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %836 = bitcast i8* %835 to i64*
  %837 = bitcast i8* %834 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %832, i8 -86, i64 16, i1 false)
  store i8* %832, i8** %837, align 8, !alias.scope !25
  store i64 34359738368, i64* %836, align 8, !alias.scope !25
  %838 = bitcast i8* %834 to %class.SkTArray*
  %839 = icmp sgt i32 %827, 0
  br i1 %839, label %846, label %840

840:                                              ; preds = %823
  %841 = icmp slt i32 %827, 0
  br i1 %841, label %842, label %900

842:                                              ; preds = %840
  %843 = shl nsw i64 %833, 1
  %844 = and i64 %843, 4294967294
  %845 = or i64 %844, 34359738368
  store i64 %845, i64* %836, align 8, !alias.scope !25
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %838, i32 0, i32 2) #12
  br label %900

846:                                              ; preds = %823
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %838, i32 %827, i32 1) #12
  %847 = load i64, i64* %836, align 8, !alias.scope !25
  %848 = shl nsw i64 %833, 1
  %849 = add i64 %847, %848
  %850 = and i64 %849, 4294967294
  %851 = and i64 %847, -4294967295
  %852 = or i64 %850, %851
  store i64 %852, i64* %836, align 8, !alias.scope !25
  %853 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 16
  %854 = bitcast i8* %853 to i32**
  %855 = bitcast i8* %834 to i32**
  %856 = zext i32 %827 to i64
  %857 = add nsw i64 %856, -1
  %858 = and i64 %856, 3
  %859 = icmp ult i64 %857, 3
  br i1 %859, label %887, label %860

860:                                              ; preds = %846
  %861 = sub nsw i64 %856, %858
  br label %862

862:                                              ; preds = %862, %860
  %863 = phi i64 [ 0, %860 ], [ %884, %862 ]
  %864 = phi i64 [ %861, %860 ], [ %885, %862 ]
  %865 = load i32*, i32** %854, align 8, !noalias !25
  %866 = load i32*, i32** %855, align 8, !alias.scope !25
  %867 = getelementptr inbounds i32, i32* %866, i64 %863
  %868 = load i32, i32* %865, align 4
  store i32 %868, i32* %867, align 4
  %869 = or i64 %863, 1
  %870 = load i32*, i32** %854, align 8, !noalias !25
  %871 = load i32*, i32** %855, align 8, !alias.scope !25
  %872 = getelementptr inbounds i32, i32* %871, i64 %869
  %873 = load i32, i32* %870, align 4
  store i32 %873, i32* %872, align 4
  %874 = or i64 %863, 2
  %875 = load i32*, i32** %854, align 8, !noalias !25
  %876 = load i32*, i32** %855, align 8, !alias.scope !25
  %877 = getelementptr inbounds i32, i32* %876, i64 %874
  %878 = load i32, i32* %875, align 4
  store i32 %878, i32* %877, align 4
  %879 = or i64 %863, 3
  %880 = load i32*, i32** %854, align 8, !noalias !25
  %881 = load i32*, i32** %855, align 8, !alias.scope !25
  %882 = getelementptr inbounds i32, i32* %881, i64 %879
  %883 = load i32, i32* %880, align 4
  store i32 %883, i32* %882, align 4
  %884 = add nuw nsw i64 %863, 4
  %885 = add i64 %864, -4
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %887, label %862

887:                                              ; preds = %862, %846
  %888 = phi i64 [ 0, %846 ], [ %884, %862 ]
  %889 = icmp eq i64 %858, 0
  br i1 %889, label %900, label %890

890:                                              ; preds = %887, %890
  %891 = phi i64 [ %897, %890 ], [ %888, %887 ]
  %892 = phi i64 [ %898, %890 ], [ %858, %887 ]
  %893 = load i32*, i32** %854, align 8, !noalias !25
  %894 = load i32*, i32** %855, align 8, !alias.scope !25
  %895 = getelementptr inbounds i32, i32* %894, i64 %891
  %896 = load i32, i32* %893, align 4
  store i32 %896, i32* %895, align 4
  %897 = add nuw nsw i64 %891, 1
  %898 = add i64 %892, -1
  %899 = icmp eq i64 %898, 0
  br i1 %899, label %900, label %890, !llvm.loop !28

900:                                              ; preds = %887, %890, %840, %842
  %901 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 24
  %902 = bitcast i8* %901 to i64*
  %903 = load i64, i64* %902, align 8, !noalias !25
  %904 = and i64 %903, 1
  %905 = icmp eq i64 %904, 0
  br i1 %905, label %910, label %906

906:                                              ; preds = %900
  %907 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 16
  %908 = bitcast i8* %907 to i8**
  %909 = load i8*, i8** %908, align 8, !noalias !25
  call void @_Z7sk_freePv(i8* %909) #12
  br label %910

910:                                              ; preds = %900, %906
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %828) #12, !noalias !25
  br label %2833

911:                                              ; preds = %3
  %912 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %912) #12, !noalias !30
  %913 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %914 = bitcast i32* %913 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %912, i8 -86, i64 32, i1 false)
  %915 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %914, align 8, !noalias !30
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %28, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %915) #12
  %916 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %917 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %916, i8 -86, i64 32, i1 false)
  %918 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %917, align 8, !noalias !30
  %919 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %918) #12
  %920 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %921 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %922 = bitcast i8* %921 to i64*
  %923 = bitcast i8* %920 to i8**
  store i8* %916, i8** %923, align 8, !alias.scope !30
  store i64 34359738368, i64* %922, align 8, !alias.scope !30
  %924 = bitcast i8* %920 to %class.SkTArray*
  %925 = trunc i64 %919 to i32
  %926 = icmp sgt i32 %925, 0
  br i1 %926, label %927, label %934

927:                                              ; preds = %911
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %924, i32 %925, i32 1) #12
  %928 = load i64, i64* %922, align 8, !alias.scope !30
  %929 = shl i64 %919, 1
  %930 = add i64 %928, %929
  %931 = and i64 %930, 4294967294
  %932 = and i64 %928, -4294967295
  %933 = or i64 %931, %932
  store i64 %933, i64* %922, align 8, !alias.scope !30
  br label %940

934:                                              ; preds = %911
  %935 = icmp slt i32 %925, 0
  br i1 %935, label %936, label %940

936:                                              ; preds = %934
  %937 = shl i64 %919, 1
  %938 = and i64 %937, 4294967294
  %939 = or i64 %938, 34359738368
  store i64 %939, i64* %922, align 8, !alias.scope !30
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %924, i32 0, i32 2) #12
  br label %940

940:                                              ; preds = %936, %934, %927
  %941 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %942 = bitcast %"class.SkSL::Expression"* %941 to i32*
  %943 = load i32, i32* %942, align 8, !noalias !30
  %944 = icmp sgt i32 %943, 0
  br i1 %944, label %945, label %964

945:                                              ; preds = %940, %945
  %946 = phi i64 [ %960, %945 ], [ 0, %940 ]
  %947 = phi i64 [ %959, %945 ], [ 0, %940 ]
  %948 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %914, align 8, !noalias !30
  %949 = bitcast %"class.SkSL::Expression"* %948 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %950 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %949, align 8
  %951 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %950, i64 3
  %952 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %951, align 8
  %953 = call dereferenceable(184) %"class.SkSL::Type"* %952(%"class.SkSL::Expression"* %948) #12
  %954 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %953, i64 0, i32 10, i32 0, i32 0
  %955 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %954, align 8
  %956 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %955, i64 %946, i32 2
  %957 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %956, align 8
  %958 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %957) #12
  %959 = add i64 %958, %947
  %960 = add nuw nsw i64 %946, 1
  %961 = load i32, i32* %942, align 8, !noalias !30
  %962 = sext i32 %961 to i64
  %963 = icmp slt i64 %960, %962
  br i1 %963, label %945, label %964

964:                                              ; preds = %945, %940
  %965 = phi i64 [ 0, %940 ], [ %959, %945 ]
  %966 = load i64, i64* %922, align 8, !alias.scope !30
  %967 = and i64 %966, 4294967294
  %968 = icmp eq i64 %967, 0
  br i1 %968, label %990, label %969

969:                                              ; preds = %964
  %970 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 16
  %971 = bitcast i8* %970 to i32**
  %972 = bitcast i8* %920 to i32**
  br label %973

973:                                              ; preds = %969, %973
  %974 = phi i64 [ 0, %969 ], [ %985, %973 ]
  %975 = add i64 %974, %965
  %976 = load i32*, i32** %971, align 8, !noalias !30
  %977 = shl i64 %975, 32
  %978 = ashr exact i64 %977, 32
  %979 = getelementptr inbounds i32, i32* %976, i64 %978
  %980 = load i32*, i32** %972, align 8, !alias.scope !30
  %981 = shl i64 %974, 32
  %982 = ashr exact i64 %981, 32
  %983 = getelementptr inbounds i32, i32* %980, i64 %982
  %984 = load i32, i32* %979, align 4
  store i32 %984, i32* %983, align 4
  %985 = add nuw nsw i64 %974, 1
  %986 = load i64, i64* %922, align 8, !alias.scope !30
  %987 = lshr i64 %986, 1
  %988 = and i64 %987, 2147483647
  %989 = icmp ult i64 %985, %988
  br i1 %989, label %973, label %990

990:                                              ; preds = %973, %964
  %991 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 24
  %992 = bitcast i8* %991 to i64*
  %993 = load i64, i64* %992, align 8, !noalias !30
  %994 = and i64 %993, 1
  %995 = icmp eq i64 %994, 0
  br i1 %995, label %1000, label %996

996:                                              ; preds = %990
  %997 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 16
  %998 = bitcast i8* %997 to i8**
  %999 = load i8*, i8** %998, align 8, !noalias !30
  call void @_Z7sk_freePv(i8* %999) #12
  br label %1000

1000:                                             ; preds = %990, %996
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %912) #12, !noalias !30
  br label %2833

1001:                                             ; preds = %3
  %1002 = bitcast %"class.SkSL::Expression"* %2 to %"struct.SkSL::IndexExpression"*
  %1003 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1003) #12, !noalias !33
  %1004 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1005 = bitcast %"class.SkSL::Expression"* %1004 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1003, i8 -86, i64 32, i1 false)
  %1006 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1005, align 8, !noalias !33
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %27, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1006) #12
  %1007 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1008 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %1007, i8 -86, i64 32, i1 false)
  %1009 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1008, align 8, !noalias !33
  %1010 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %1009) #12
  %1011 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1012 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1013 = bitcast i8* %1012 to i64*
  %1014 = bitcast i8* %1011 to i8**
  store i8* %1007, i8** %1014, align 8, !alias.scope !33
  store i64 34359738368, i64* %1013, align 8, !alias.scope !33
  %1015 = bitcast i8* %1011 to %class.SkTArray*
  %1016 = trunc i64 %1010 to i32
  %1017 = icmp sgt i32 %1016, 0
  br i1 %1017, label %1018, label %1025

1018:                                             ; preds = %1001
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1015, i32 %1016, i32 1) #12
  %1019 = load i64, i64* %1013, align 8, !alias.scope !33
  %1020 = shl i64 %1010, 1
  %1021 = add i64 %1019, %1020
  %1022 = and i64 %1021, 4294967294
  %1023 = and i64 %1019, -4294967295
  %1024 = or i64 %1022, %1023
  store i64 %1024, i64* %1013, align 8, !alias.scope !33
  br label %1031

1025:                                             ; preds = %1001
  %1026 = icmp slt i32 %1016, 0
  br i1 %1026, label %1027, label %1031

1027:                                             ; preds = %1025
  %1028 = shl i64 %1010, 1
  %1029 = and i64 %1028, 4294967294
  %1030 = or i64 %1029, 34359738368
  store i64 %1030, i64* %1013, align 8, !alias.scope !33
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1015, i32 0, i32 2) #12
  br label %1031

1031:                                             ; preds = %1027, %1025, %1018
  %1032 = call i64 @_ZN4SkSL13SkVMGenerator15indexSlotOffsetERKNS_15IndexExpressionE(%"class.SkSL::SkVMGenerator"* %1, %"struct.SkSL::IndexExpression"* dereferenceable(40) %1002) #12
  %1033 = load i64, i64* %1013, align 8, !alias.scope !33
  %1034 = and i64 %1033, 4294967294
  %1035 = icmp eq i64 %1034, 0
  br i1 %1035, label %1057, label %1036

1036:                                             ; preds = %1031
  %1037 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 16
  %1038 = bitcast i8* %1037 to i32**
  %1039 = bitcast i8* %1011 to i32**
  br label %1040

1040:                                             ; preds = %1036, %1040
  %1041 = phi i64 [ 0, %1036 ], [ %1052, %1040 ]
  %1042 = add i64 %1041, %1032
  %1043 = load i32*, i32** %1038, align 8, !noalias !33
  %1044 = shl i64 %1042, 32
  %1045 = ashr exact i64 %1044, 32
  %1046 = getelementptr inbounds i32, i32* %1043, i64 %1045
  %1047 = load i32*, i32** %1039, align 8, !alias.scope !33
  %1048 = shl i64 %1041, 32
  %1049 = ashr exact i64 %1048, 32
  %1050 = getelementptr inbounds i32, i32* %1047, i64 %1049
  %1051 = load i32, i32* %1046, align 4
  store i32 %1051, i32* %1050, align 4
  %1052 = add nuw nsw i64 %1041, 1
  %1053 = load i64, i64* %1013, align 8, !alias.scope !33
  %1054 = lshr i64 %1053, 1
  %1055 = and i64 %1054, 2147483647
  %1056 = icmp ult i64 %1052, %1055
  br i1 %1056, label %1040, label %1057

1057:                                             ; preds = %1040, %1031
  %1058 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 24
  %1059 = bitcast i8* %1058 to i64*
  %1060 = load i64, i64* %1059, align 8, !noalias !33
  %1061 = and i64 %1060, 1
  %1062 = icmp eq i64 %1061, 0
  br i1 %1062, label %1067, label %1063

1063:                                             ; preds = %1057
  %1064 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 16
  %1065 = bitcast i8* %1064 to i8**
  %1066 = load i8*, i8** %1065, align 8, !noalias !33
  call void @_Z7sk_freePv(i8* %1066) #12
  br label %1067

1067:                                             ; preds = %1057, %1063
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1003) #12, !noalias !33
  br label %2833

1068:                                             ; preds = %3
  %1069 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1070 = bitcast %"class.SkSL::Expression"* %1069 to %"class.SkSL::Variable"**
  %1071 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %1070, align 8, !noalias !36
  %1072 = tail call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Variable"* dereferenceable(64) %1071) #12, !noalias !36
  %1073 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1074 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1073, i8 -86, i64 16, i1 false) #12, !alias.scope !36
  %1075 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1074, align 8, !noalias !36
  %1076 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %1075) #12, !noalias !36
  %1077 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1078 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1079 = bitcast i8* %1078 to i64*
  %1080 = bitcast i8* %1077 to i8**
  store i8* %1073, i8** %1080, align 8, !alias.scope !36
  store i64 34359738368, i64* %1079, align 8, !alias.scope !36
  %1081 = bitcast i8* %1077 to %class.SkTArray*
  %1082 = trunc i64 %1076 to i32
  %1083 = icmp sgt i32 %1082, 0
  br i1 %1083, label %1084, label %1091

1084:                                             ; preds = %1068
  tail call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1081, i32 %1082, i32 1) #12
  %1085 = load i64, i64* %1079, align 8, !alias.scope !36
  %1086 = shl i64 %1076, 1
  %1087 = add i64 %1085, %1086
  %1088 = and i64 %1087, 4294967294
  %1089 = and i64 %1085, -4294967295
  %1090 = or i64 %1088, %1089
  store i64 %1090, i64* %1079, align 8, !alias.scope !36
  br label %1098

1091:                                             ; preds = %1068
  %1092 = icmp slt i32 %1082, 0
  br i1 %1092, label %1093, label %2833

1093:                                             ; preds = %1091
  %1094 = shl i64 %1076, 1
  %1095 = and i64 %1094, 4294967294
  %1096 = or i64 %1095, 34359738368
  store i64 %1096, i64* %1079, align 8, !alias.scope !36
  tail call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1081, i32 0, i32 2) #12
  %1097 = load i64, i64* %1079, align 8, !alias.scope !36
  br label %1098

1098:                                             ; preds = %1093, %1084
  %1099 = phi i64 [ %1090, %1084 ], [ %1097, %1093 ]
  %1100 = and i64 %1099, 4294967294
  %1101 = icmp eq i64 %1100, 0
  br i1 %1101, label %2833, label %1102

1102:                                             ; preds = %1098
  %1103 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 6, i32 0, i32 0
  %1104 = bitcast i8* %1077 to i32**
  br label %1105

1105:                                             ; preds = %1105, %1102
  %1106 = phi i64 [ 0, %1102 ], [ %1115, %1105 ]
  %1107 = add i64 %1106, %1072
  %1108 = load i32*, i32** %1103, align 8, !noalias !36
  %1109 = getelementptr inbounds i32, i32* %1108, i64 %1107
  %1110 = load i32, i32* %1109, align 4
  %1111 = load i32*, i32** %1104, align 8, !alias.scope !36
  %1112 = shl i64 %1106, 32
  %1113 = ashr exact i64 %1112, 32
  %1114 = getelementptr inbounds i32, i32* %1111, i64 %1113
  store i32 %1110, i32* %1114, align 4
  %1115 = add nuw nsw i64 %1106, 1
  %1116 = load i64, i64* %1079, align 8, !alias.scope !36
  %1117 = lshr i64 %1116, 1
  %1118 = and i64 %1117, 2147483647
  %1119 = icmp ult i64 %1115, %1118
  br i1 %1119, label %1105, label %2833

1120:                                             ; preds = %3
  %1121 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1122 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1121, align 8
  %1123 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1124 = bitcast %"class.SkSL::Expression"* %1123 to i32*
  %1125 = load i32, i32* %1124, align 8
  %1126 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1122, i32 %1125) #12
  %1127 = extractvalue { %"class.skvm::Builder"*, i32 } %1126, 1
  %1128 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1129 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1130 = bitcast i8* %1129 to i64*
  %1131 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1132 = bitcast i8* %1128 to i8**
  store i8* %1131, i8** %1132, align 8
  %1133 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %1130, align 8
  store i32 %1127, i32* %1133, align 8
  br label %2833

1134:                                             ; preds = %3
  %1135 = bitcast %"class.SkSL::Expression"* %2 to %"class.SkSL::FunctionCall"*
  %1136 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1136)
  %1137 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1138 = bitcast %"class.SkSL::Expression"* %1137 to %"class.SkSL::FunctionDeclaration"**
  %1139 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %1138, align 8, !noalias !39
  %1140 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %1139, i64 0, i32 7
  %1141 = load i32, i32* %1140, align 4, !noalias !39
  %1142 = icmp eq i32 %1141, -1
  br i1 %1142, label %1148, label %1143

1143:                                             ; preds = %1134
  %1144 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %1139, i64 0, i32 1
  %1145 = load %"class.SkSL::FunctionDefinition"*, %"class.SkSL::FunctionDefinition"** %1144, align 8
  %1146 = icmp eq %"class.SkSL::FunctionDefinition"* %1145, null
  br i1 %1146, label %1147, label %1148

1147:                                             ; preds = %1143
  tail call fastcc void @_ZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::FunctionCall"* dereferenceable(64) %1135) #12
  br label %1487

1148:                                             ; preds = %1134, %1143
  %1149 = bitcast %"class.std::__1::vector.125"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1149) #12, !noalias !39
  %1150 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %22, i64 0, i32 0, i32 0
  %1151 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %22, i64 0, i32 0, i32 1
  %1152 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1149, i8 0, i64 24, i1 false) #12, !noalias !39
  %1153 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %1154 = getelementptr inbounds i32, i32* %1153, i64 4
  %1155 = bitcast i32* %1154 to %"class.std::__1::unique_ptr.200"**
  %1156 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %1155, align 8, !noalias !39
  %1157 = icmp eq %"class.std::__1::unique_ptr.200"* %1156, null
  br i1 %1157, label %1176, label %1158

1158:                                             ; preds = %1148
  %1159 = getelementptr inbounds i32, i32* %1153, i64 6
  %1160 = bitcast i32* %1159 to i64*
  %1161 = load i64, i64* %1160, align 8, !noalias !39
  %1162 = lshr i64 %1161, 1
  %1163 = and i64 %1162, 2147483647
  %1164 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1156, i64 %1163
  %1165 = icmp eq i64 %1163, 0
  br i1 %1165, label %1176, label %1166

1166:                                             ; preds = %1158
  %1167 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %23, i64 0, i32 0, i32 0, i32 0, i64 0
  %1168 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %23, i64 0, i32 0, i32 0, i32 0, i64 24
  %1169 = bitcast i8* %1168 to i64*
  %1170 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %23, i64 0, i32 0, i32 0, i32 0, i64 16
  %1171 = bitcast i8* %1170 to i32**
  %1172 = bitcast i32** %1151 to i64*
  %1173 = bitcast %"class.std::__1::vector.125"* %22 to i64*
  %1174 = bitcast i32** %1152 to i64*
  %1175 = bitcast i8* %1170 to i8**
  br label %1208

1176:                                             ; preds = %1221, %1148, %1158
  %1177 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %1178 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1177, align 8, !noalias !39
  %1179 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %1178) #12
  %1180 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1180) #12, !noalias !39
  %1181 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1182 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 24
  %1183 = bitcast i8* %1182 to i64*
  %1184 = bitcast i8* %1181 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1180, i8 -86, i64 16, i1 false)
  store i8* %1180, i8** %1184, align 8, !noalias !39
  store i64 34359738368, i64* %1183, align 8, !noalias !39
  %1185 = bitcast i8* %1181 to %class.SkTArray*
  %1186 = trunc i64 %1179 to i32
  %1187 = icmp sgt i32 %1186, 0
  br i1 %1187, label %1188, label %1195

1188:                                             ; preds = %1176
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1185, i32 %1186, i32 1) #12
  %1189 = load i64, i64* %1183, align 8, !noalias !39
  %1190 = shl i64 %1179, 1
  %1191 = add i64 %1189, %1190
  %1192 = and i64 %1191, 4294967294
  %1193 = and i64 %1189, -4294967295
  %1194 = or i64 %1192, %1193
  store i64 %1194, i64* %1183, align 8, !noalias !39
  br label %1201

1195:                                             ; preds = %1176
  %1196 = icmp slt i32 %1186, 0
  br i1 %1196, label %1197, label %1201

1197:                                             ; preds = %1195
  %1198 = shl i64 %1179, 1
  %1199 = and i64 %1198, 4294967294
  %1200 = or i64 %1199, 34359738368
  store i64 %1200, i64* %1183, align 8, !noalias !39
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1185, i32 0, i32 2) #12
  br label %1201

1201:                                             ; preds = %1197, %1195, %1188
  %1202 = icmp eq i64 %1179, 0
  br i1 %1202, label %1203, label %1205

1203:                                             ; preds = %1201
  %1204 = bitcast i8* %1181 to i32**
  br label %1287

1205:                                             ; preds = %1201
  %1206 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1207 = bitcast i8* %1181 to i32**
  br label %1341

1208:                                             ; preds = %1166, %1221
  %1209 = phi %"class.std::__1::unique_ptr.200"* [ %1156, %1166 ], [ %1222, %1221 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1167) #12, !noalias !39
  %1210 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1209, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1167, i8 -86, i64 32, i1 false)
  %1211 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1210, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %23, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1211) #12
  %1212 = load i64, i64* %1169, align 8, !noalias !39
  %1213 = and i64 %1212, 4294967294
  %1214 = icmp eq i64 %1213, 0
  br i1 %1214, label %1215, label %1224

1215:                                             ; preds = %1281, %1208
  %1216 = phi i64 [ %1212, %1208 ], [ %1283, %1281 ]
  %1217 = and i64 %1216, 1
  %1218 = icmp eq i64 %1217, 0
  br i1 %1218, label %1221, label %1219

1219:                                             ; preds = %1215
  %1220 = load i8*, i8** %1175, align 8, !noalias !39
  call void @_Z7sk_freePv(i8* %1220) #12
  br label %1221

1221:                                             ; preds = %1219, %1215
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1167) #12, !noalias !39
  %1222 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1209, i64 1
  %1223 = icmp eq %"class.std::__1::unique_ptr.200"* %1222, %1164
  br i1 %1223, label %1176, label %1208

1224:                                             ; preds = %1208, %1281
  %1225 = phi i64 [ %1282, %1281 ], [ 0, %1208 ]
  %1226 = load i32*, i32** %1171, align 8, !noalias !39
  %1227 = shl i64 %1225, 32
  %1228 = ashr exact i64 %1227, 32
  %1229 = getelementptr inbounds i32, i32* %1226, i64 %1228
  %1230 = load i32, i32* %1229, align 4
  %1231 = load i32*, i32** %1151, align 8, !noalias !39
  %1232 = load i32*, i32** %1152, align 8, !noalias !39
  %1233 = icmp ult i32* %1231, %1232
  %1234 = ptrtoint i32* %1232 to i64
  br i1 %1233, label %1235, label %1238

1235:                                             ; preds = %1224
  store i32 %1230, i32* %1231, align 4
  %1236 = getelementptr inbounds i32, i32* %1231, i64 1
  %1237 = ptrtoint i32* %1236 to i64
  store i64 %1237, i64* %1172, align 8, !noalias !39
  br label %1281

1238:                                             ; preds = %1224
  %1239 = ptrtoint i32* %1231 to i64
  %1240 = load i64, i64* %1173, align 8, !noalias !39
  %1241 = sub i64 %1239, %1240
  %1242 = ashr exact i64 %1241, 2
  %1243 = add nsw i64 %1242, 1
  %1244 = icmp ugt i64 %1243, 4611686018427387903
  br i1 %1244, label %1245, label %1247

1245:                                             ; preds = %1238
  %1246 = bitcast %"class.std::__1::vector.125"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1246) #13
  unreachable

1247:                                             ; preds = %1238
  %1248 = sub i64 %1234, %1240
  %1249 = ashr exact i64 %1248, 2
  %1250 = icmp ult i64 %1249, 2305843009213693951
  br i1 %1250, label %1251, label %1259

1251:                                             ; preds = %1247
  %1252 = ashr exact i64 %1248, 1
  %1253 = icmp ult i64 %1252, %1243
  %1254 = select i1 %1253, i64 %1243, i64 %1252
  %1255 = icmp eq i64 %1254, 0
  br i1 %1255, label %1264, label %1256

1256:                                             ; preds = %1251
  %1257 = icmp ugt i64 %1254, 4611686018427387903
  br i1 %1257, label %1258, label %1259

1258:                                             ; preds = %1256
  call void @abort() #13
  unreachable

1259:                                             ; preds = %1256, %1247
  %1260 = phi i64 [ %1254, %1256 ], [ 4611686018427387903, %1247 ]
  %1261 = shl i64 %1260, 2
  %1262 = call i8* @_Znwm(i64 %1261) #14
  %1263 = bitcast i8* %1262 to i32*
  br label %1264

1264:                                             ; preds = %1259, %1251
  %1265 = phi i64 [ %1260, %1259 ], [ 0, %1251 ]
  %1266 = phi i8* [ %1262, %1259 ], [ null, %1251 ]
  %1267 = phi i32* [ %1263, %1259 ], [ null, %1251 ]
  %1268 = getelementptr inbounds i32, i32* %1267, i64 %1242
  %1269 = getelementptr inbounds i32, i32* %1267, i64 %1265
  %1270 = ptrtoint i32* %1269 to i64
  store i32 %1230, i32* %1268, align 4, !noalias !39
  %1271 = getelementptr inbounds i32, i32* %1268, i64 1
  %1272 = ptrtoint i32* %1271 to i64
  %1273 = ptrtoint i32* %1267 to i64
  %1274 = icmp sgt i64 %1241, 0
  br i1 %1274, label %1275, label %1277

1275:                                             ; preds = %1264
  %1276 = inttoptr i64 %1240 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1266, i8* align 4 %1276, i64 %1241, i1 false) #12
  br label %1277

1277:                                             ; preds = %1275, %1264
  store i64 %1273, i64* %1173, align 8, !noalias !39
  store i64 %1272, i64* %1172, align 8, !noalias !39
  store i64 %1270, i64* %1174, align 8, !noalias !39
  %1278 = icmp eq i64 %1240, 0
  br i1 %1278, label %1281, label %1279

1279:                                             ; preds = %1277
  %1280 = inttoptr i64 %1240 to i8*
  call void @_ZdlPv(i8* %1280) #14
  br label %1281

1281:                                             ; preds = %1279, %1277, %1235
  %1282 = add nuw nsw i64 %1225, 1
  %1283 = load i64, i64* %1169, align 8, !noalias !39
  %1284 = lshr i64 %1283, 1
  %1285 = and i64 %1284, 2147483647
  %1286 = icmp ult i64 %1282, %1285
  br i1 %1286, label %1224, label %1215

1287:                                             ; preds = %1341, %1203
  %1288 = phi i32** [ %1204, %1203 ], [ %1207, %1341 ]
  %1289 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 10, i32 0, i32 1
  %1290 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %1289, align 8, !noalias !39
  %1291 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %1290, i64 -1, i32 1, i32 0
  %1292 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1291, align 8
  %1293 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %1290, i64 -1, i32 1, i32 1
  %1294 = load i32, i32* %1293, align 8
  %1295 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1292, i32 -1) #12
  %1296 = extractvalue { %"class.skvm::Builder"*, i32 } %1295, 0
  %1297 = extractvalue { %"class.skvm::Builder"*, i32 } %1295, 1
  %1298 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %1292, %"class.skvm::Builder"* %1296, i32 %1297, %"class.skvm::Builder"* %1292, i32 %1294) #12
  %1299 = extractvalue { %"class.skvm::Builder"*, i32 } %1298, 0
  %1300 = extractvalue { %"class.skvm::Builder"*, i32 } %1298, 1
  %1301 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %1302 = bitcast %"class.skvm::Builder"** %1301 to i64*
  %1303 = load i64, i64* %1302, align 8, !noalias !39
  %1304 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %1305 = load i32, i32* %1304, align 8, !noalias !39
  %1306 = inttoptr i64 %1303 to %"class.skvm::Builder"*
  %1307 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1306, %"class.skvm::Builder"* %1306, i32 %1305, %"class.skvm::Builder"* %1299, i32 %1300) #12
  %1308 = extractvalue { %"class.skvm::Builder"*, i32 } %1307, 0
  %1309 = extractvalue { %"class.skvm::Builder"*, i32 } %1307, 1
  store %"class.skvm::Builder"* %1308, %"class.skvm::Builder"** %1301, align 8, !noalias !39
  store i32 %1309, i32* %1304, align 8, !noalias !39
  %1310 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %1138, align 8, !noalias !39
  %1311 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %1310, i64 0, i32 1
  %1312 = load %"class.SkSL::FunctionDefinition"*, %"class.SkSL::FunctionDefinition"** %1311, align 8
  %1313 = load i32*, i32** %1150, align 8, !noalias !39
  %1314 = bitcast i32** %1151 to i64*
  %1315 = load i64, i64* %1314, align 8, !noalias !39
  %1316 = ptrtoint i32* %1313 to i64
  %1317 = sub i64 %1315, %1316
  %1318 = ashr exact i64 %1317, 2
  %1319 = load i32*, i32** %1288, align 8, !noalias !39
  %1320 = load i64, i64* %1183, align 8, !noalias !39
  %1321 = lshr i64 %1320, 1
  %1322 = and i64 %1321, 2147483647
  call void @_ZN4SkSL13SkVMGenerator13writeFunctionERKNS_18FunctionDefinitionE6SkSpanIiES5_(%"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::FunctionDefinition"* dereferenceable(88) %1312, i32* %1313, i64 %1318, i32* %1319, i64 %1322) #12
  store i64 %1303, i64* %1302, align 8
  store i32 %1305, i32* %1304, align 8
  %1323 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %1139, i64 0, i32 3, i32 0, i32 0
  %1324 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %1323, align 8
  %1325 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %1139, i64 0, i32 3, i32 0, i32 1
  %1326 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %1325, align 8
  %1327 = icmp eq %"class.SkSL::Variable"** %1324, %1326
  br i1 %1327, label %1352, label %1328

1328:                                             ; preds = %1287
  %1329 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %1155, align 8, !noalias !39
  %1330 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 0
  %1331 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1332 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 24
  %1333 = bitcast i8* %1332 to i64*
  %1334 = bitcast i8* %1331 to i8**
  %1335 = bitcast i8* %1331 to %class.SkTArray*
  %1336 = bitcast i8* %1331 to i32**
  %1337 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 24
  %1338 = bitcast i8* %1337 to i64*
  %1339 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 16
  %1340 = bitcast i8* %1339 to i8**
  br label %1395

1341:                                             ; preds = %1341, %1205
  %1342 = phi i64 [ 0, %1205 ], [ %1350, %1341 ]
  %1343 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1206, align 8, !noalias !39
  %1344 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1343, i32 0) #12
  %1345 = extractvalue { %"class.skvm::Builder"*, i32 } %1344, 1
  %1346 = load i32*, i32** %1207, align 8, !noalias !39
  %1347 = shl i64 %1342, 32
  %1348 = ashr exact i64 %1347, 32
  %1349 = getelementptr inbounds i32, i32* %1346, i64 %1348
  store i32 %1345, i32* %1349, align 4
  %1350 = add nuw i64 %1342, 1
  %1351 = icmp eq i64 %1350, %1179
  br i1 %1351, label %1287, label %1341

1352:                                             ; preds = %1482, %1287
  %1353 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1354 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1355 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1356 = bitcast i8* %1355 to i64*
  %1357 = bitcast i8* %1353 to i8**
  store i8* %1354, i8** %1357, align 8, !alias.scope !39
  store i64 34359738368, i64* %1356, align 8, !alias.scope !39
  %1358 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %24, %0
  br i1 %1358, label %1359, label %1361

1359:                                             ; preds = %1352
  %1360 = load i64, i64* %1183, align 8, !noalias !39
  br label %1382

1361:                                             ; preds = %1352
  %1362 = bitcast i8* %1353 to %class.SkTArray*
  store i64 34359738368, i64* %1356, align 8, !alias.scope !39
  %1363 = load i64, i64* %1183, align 8, !noalias !39
  %1364 = lshr i64 %1363, 1
  %1365 = trunc i64 %1364 to i32
  %1366 = and i32 %1365, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1362, i32 %1366, i32 0) #12
  %1367 = load i64, i64* %1183, align 8, !noalias !39
  %1368 = and i64 %1367, 4294967294
  %1369 = load i64, i64* %1356, align 8, !alias.scope !39
  %1370 = and i64 %1369, -4294967295
  %1371 = or i64 %1370, %1368
  store i64 %1371, i64* %1356, align 8, !alias.scope !39
  %1372 = shl i64 %1367, 1
  %1373 = and i64 %1372, 8589934588
  %1374 = icmp eq i64 %1373, 0
  br i1 %1374, label %1379, label %1375

1375:                                             ; preds = %1361
  %1376 = load i8*, i8** %1357, align 8, !alias.scope !39
  %1377 = load i8*, i8** %1184, align 8, !noalias !39
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1376, i8* align 1 %1377, i64 %1373, i1 false) #12
  %1378 = load i64, i64* %1183, align 8, !noalias !39
  br label %1379

1379:                                             ; preds = %1375, %1361
  %1380 = phi i64 [ %1367, %1361 ], [ %1378, %1375 ]
  %1381 = and i64 %1380, -4294967295
  store i64 %1381, i64* %1183, align 8, !noalias !39
  br label %1382

1382:                                             ; preds = %1359, %1379
  %1383 = phi i64 [ %1360, %1359 ], [ %1381, %1379 ]
  %1384 = and i64 %1383, 1
  %1385 = icmp eq i64 %1384, 0
  br i1 %1385, label %1388, label %1386

1386:                                             ; preds = %1382
  %1387 = load i8*, i8** %1184, align 8, !noalias !39
  call void @_Z7sk_freePv(i8* %1387) #12
  br label %1388

1388:                                             ; preds = %1386, %1382
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1180) #12, !noalias !39
  %1389 = load i32*, i32** %1150, align 8, !noalias !39
  %1390 = icmp eq i32* %1389, null
  br i1 %1390, label %1394, label %1391

1391:                                             ; preds = %1388
  %1392 = ptrtoint i32* %1389 to i64
  store i64 %1392, i64* %1314, align 8, !noalias !39
  %1393 = bitcast i32* %1389 to i8*
  call void @_ZdlPv(i8* %1393) #14
  br label %1394

1394:                                             ; preds = %1391, %1388
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1149) #12, !noalias !39
  br label %1487

1395:                                             ; preds = %1328, %1482
  %1396 = phi i64 [ 0, %1328 ], [ %1483, %1482 ]
  %1397 = phi %"class.std::__1::unique_ptr.200"* [ %1329, %1328 ], [ %1484, %1482 ]
  %1398 = phi %"class.SkSL::Variable"** [ %1324, %1328 ], [ %1485, %1482 ]
  %1399 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %1398, align 8
  %1400 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %1399, i64 0, i32 0, i32 2
  %1401 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1400, align 8
  %1402 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %1401) #12
  %1403 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %1399, i64 0, i32 2
  %1404 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %1403, align 8
  %1405 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %1404, i64 0, i32 1
  %1406 = load i32, i32* %1405, align 8
  %1407 = and i32 %1406, 4
  %1408 = icmp eq i32 %1407, 0
  br i1 %1408, label %1482, label %1409

1409:                                             ; preds = %1395
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1330) #12, !noalias !39
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1330, i8 -86, i64 16, i1 false)
  store i8* %1330, i8** %1334, align 8, !noalias !39
  store i64 34359738368, i64* %1333, align 8, !noalias !39
  %1410 = trunc i64 %1402 to i32
  %1411 = icmp sgt i32 %1410, 0
  br i1 %1411, label %1412, label %1419

1412:                                             ; preds = %1409
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1335, i32 %1410, i32 1) #12
  %1413 = load i64, i64* %1333, align 8, !noalias !39
  %1414 = shl i64 %1402, 1
  %1415 = add i64 %1413, %1414
  %1416 = and i64 %1415, 4294967294
  %1417 = and i64 %1413, -4294967295
  %1418 = or i64 %1416, %1417
  store i64 %1418, i64* %1333, align 8, !noalias !39
  br label %1425

1419:                                             ; preds = %1409
  %1420 = icmp slt i32 %1410, 0
  br i1 %1420, label %1421, label %1425

1421:                                             ; preds = %1419
  %1422 = shl i64 %1402, 1
  %1423 = and i64 %1422, 4294967294
  %1424 = or i64 %1423, 34359738368
  store i64 %1424, i64* %1333, align 8, !noalias !39
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1335, i32 0, i32 2) #12
  br label %1425

1425:                                             ; preds = %1421, %1419, %1412
  %1426 = icmp eq i64 %1402, 0
  br i1 %1426, label %1444, label %1427

1427:                                             ; preds = %1425
  %1428 = and i64 %1402, 1
  %1429 = icmp eq i64 %1402, 1
  br i1 %1429, label %1432, label %1430

1430:                                             ; preds = %1427
  %1431 = sub i64 %1402, %1428
  br label %1459

1432:                                             ; preds = %1459, %1427
  %1433 = phi i64 [ 0, %1427 ], [ %1479, %1459 ]
  %1434 = icmp eq i64 %1428, 0
  br i1 %1434, label %1444, label %1435

1435:                                             ; preds = %1432
  %1436 = add i64 %1433, %1396
  %1437 = load i32*, i32** %1150, align 8, !noalias !39
  %1438 = getelementptr inbounds i32, i32* %1437, i64 %1436
  %1439 = load i32, i32* %1438, align 4
  %1440 = load i32*, i32** %1336, align 8, !noalias !39
  %1441 = shl i64 %1433, 32
  %1442 = ashr exact i64 %1441, 32
  %1443 = getelementptr inbounds i32, i32* %1440, i64 %1442
  store i32 %1439, i32* %1443, align 4
  br label %1444

1444:                                             ; preds = %1435, %1432, %1425
  %1445 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1397, i64 0, i32 0, i32 0, i32 0
  %1446 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1445, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %26, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1446, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %25) #12
  %1447 = load i64, i64* %1338, align 8, !noalias !39
  %1448 = and i64 %1447, 1
  %1449 = icmp eq i64 %1448, 0
  br i1 %1449, label %1452, label %1450

1450:                                             ; preds = %1444
  %1451 = load i8*, i8** %1340, align 8, !noalias !39
  call void @_Z7sk_freePv(i8* %1451) #12
  br label %1452

1452:                                             ; preds = %1450, %1444
  %1453 = load i64, i64* %1333, align 8, !noalias !39
  %1454 = and i64 %1453, 1
  %1455 = icmp eq i64 %1454, 0
  br i1 %1455, label %1458, label %1456

1456:                                             ; preds = %1452
  %1457 = load i8*, i8** %1334, align 8, !noalias !39
  call void @_Z7sk_freePv(i8* %1457) #12
  br label %1458

1458:                                             ; preds = %1456, %1452
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1330) #12, !noalias !39
  br label %1482

1459:                                             ; preds = %1459, %1430
  %1460 = phi i64 [ 0, %1430 ], [ %1479, %1459 ]
  %1461 = phi i64 [ %1431, %1430 ], [ %1480, %1459 ]
  %1462 = add i64 %1460, %1396
  %1463 = load i32*, i32** %1150, align 8, !noalias !39
  %1464 = getelementptr inbounds i32, i32* %1463, i64 %1462
  %1465 = load i32, i32* %1464, align 4
  %1466 = load i32*, i32** %1336, align 8, !noalias !39
  %1467 = shl i64 %1460, 32
  %1468 = ashr exact i64 %1467, 32
  %1469 = getelementptr inbounds i32, i32* %1466, i64 %1468
  store i32 %1465, i32* %1469, align 4
  %1470 = or i64 %1460, 1
  %1471 = add i64 %1470, %1396
  %1472 = load i32*, i32** %1150, align 8, !noalias !39
  %1473 = getelementptr inbounds i32, i32* %1472, i64 %1471
  %1474 = load i32, i32* %1473, align 4
  %1475 = load i32*, i32** %1336, align 8, !noalias !39
  %1476 = shl i64 %1470, 32
  %1477 = ashr exact i64 %1476, 32
  %1478 = getelementptr inbounds i32, i32* %1475, i64 %1477
  store i32 %1474, i32* %1478, align 4
  %1479 = add nuw i64 %1460, 2
  %1480 = add i64 %1461, -2
  %1481 = icmp eq i64 %1480, 0
  br i1 %1481, label %1432, label %1459

1482:                                             ; preds = %1458, %1395
  %1483 = add i64 %1402, %1396
  %1484 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1397, i64 1
  %1485 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %1398, i64 1
  %1486 = icmp eq %"class.SkSL::Variable"** %1485, %1326
  br i1 %1486, label %1352, label %1395

1487:                                             ; preds = %1147, %1394
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1136)
  br label %2833

1488:                                             ; preds = %3
  %1489 = bitcast %"class.std::__1::vector.419"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1489) #12, !noalias !42
  %1490 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %19, i64 0, i32 0, i32 0
  %1491 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %19, i64 0, i32 0, i32 1
  %1492 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1489, i8 0, i64 24, i1 false) #12, !noalias !42
  %1493 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %1494 = getelementptr inbounds i32, i32* %1493, i64 4
  %1495 = bitcast i32* %1494 to %"class.std::__1::unique_ptr.200"**
  %1496 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %1495, align 8, !noalias !42
  %1497 = icmp eq %"class.std::__1::unique_ptr.200"* %1496, null
  br i1 %1497, label %1518, label %1498

1498:                                             ; preds = %1488
  %1499 = getelementptr inbounds i32, i32* %1493, i64 6
  %1500 = bitcast i32* %1499 to i64*
  %1501 = load i64, i64* %1500, align 8, !noalias !42
  %1502 = lshr i64 %1501, 1
  %1503 = and i64 %1502, 2147483647
  %1504 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1496, i64 %1503
  %1505 = icmp eq i64 %1503, 0
  br i1 %1505, label %1518, label %1506

1506:                                             ; preds = %1498
  %1507 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 0
  %1508 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 24
  %1509 = bitcast i8* %1508 to i64*
  %1510 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 16
  %1511 = bitcast i8* %1510 to i32**
  %1512 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1513 = bitcast %"class.skvm::Builder"** %1512 to i64*
  %1514 = bitcast %"struct.skvm::F32"** %1491 to i64*
  %1515 = bitcast %"class.std::__1::vector.419"* %19 to i64*
  %1516 = bitcast %"struct.skvm::F32"** %1492 to i64*
  %1517 = bitcast i8* %1510 to i8**
  br label %1650

1518:                                             ; preds = %1663, %1488, %1498
  %1519 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %1520 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1519, align 8, !noalias !42
  %1521 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %1520) #12
  %1522 = bitcast %"class.std::__1::vector.419"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1522) #12, !noalias !42
  %1523 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %21, i64 0, i32 0, i32 0
  %1524 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %21, i64 0, i32 0, i32 1
  %1525 = getelementptr inbounds %"class.std::__1::vector.419", %"class.std::__1::vector.419"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  %1526 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1527 = bitcast %"class.std::__1::vector.419"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1527, i8 -86, i64 24, i1 false)
  %1528 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1526, align 8, !noalias !42
  %1529 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1528, i32 0) #12
  %1530 = extractvalue { %"class.skvm::Builder"*, i32 } %1529, 0
  %1531 = extractvalue { %"class.skvm::Builder"*, i32 } %1529, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1522, i8 0, i64 24, i1 false) #12, !noalias !42
  %1532 = icmp eq i64 %1521, 0
  br i1 %1532, label %1584, label %1533

1533:                                             ; preds = %1518
  %1534 = icmp ugt i64 %1521, 1152921504606846975
  br i1 %1534, label %1535, label %1537

1535:                                             ; preds = %1533
  %1536 = bitcast %"class.std::__1::vector.419"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1536) #13
  unreachable

1537:                                             ; preds = %1533
  %1538 = shl i64 %1521, 4
  %1539 = call i8* @_Znwm(i64 %1538) #14
  %1540 = bitcast i8* %1539 to %"struct.skvm::F32"*
  %1541 = bitcast %"struct.skvm::F32"** %1524 to i8**
  store i8* %1539, i8** %1541, align 8, !noalias !42
  %1542 = bitcast %"class.std::__1::vector.419"* %21 to i8**
  store i8* %1539, i8** %1542, align 8, !noalias !42
  %1543 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1540, i64 %1521
  store %"struct.skvm::F32"* %1543, %"struct.skvm::F32"** %1525, align 8, !noalias !42
  %1544 = shl nsw i64 %1521, 4
  %1545 = add i64 %1544, -16
  %1546 = lshr exact i64 %1545, 4
  %1547 = add nuw nsw i64 %1546, 1
  %1548 = and i64 %1547, 7
  %1549 = icmp eq i64 %1548, 0
  br i1 %1549, label %1558, label %1550

1550:                                             ; preds = %1537, %1550
  %1551 = phi %"struct.skvm::F32"* [ %1555, %1550 ], [ %1540, %1537 ]
  %1552 = phi i64 [ %1556, %1550 ], [ %1548, %1537 ]
  %1553 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1551, i64 0, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1553, align 8, !noalias !42
  %1554 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1551, i64 0, i32 1
  store i32 %1531, i32* %1554, align 8, !noalias !42
  %1555 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1551, i64 1
  %1556 = add i64 %1552, -1
  %1557 = icmp eq i64 %1556, 0
  br i1 %1557, label %1558, label %1550, !llvm.loop !45

1558:                                             ; preds = %1550, %1537
  %1559 = phi %"struct.skvm::F32"* [ %1540, %1537 ], [ %1555, %1550 ]
  %1560 = icmp ult i64 %1545, 112
  br i1 %1560, label %1581, label %1561

1561:                                             ; preds = %1558, %1561
  %1562 = phi %"struct.skvm::F32"* [ %1579, %1561 ], [ %1559, %1558 ]
  %1563 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 0, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1563, align 8, !noalias !42
  %1564 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 0, i32 1
  store i32 %1531, i32* %1564, align 8, !noalias !42
  %1565 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 1, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1565, align 8, !noalias !42
  %1566 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 1, i32 1
  store i32 %1531, i32* %1566, align 8, !noalias !42
  %1567 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 2, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1567, align 8, !noalias !42
  %1568 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 2, i32 1
  store i32 %1531, i32* %1568, align 8, !noalias !42
  %1569 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 3, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1569, align 8, !noalias !42
  %1570 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 3, i32 1
  store i32 %1531, i32* %1570, align 8, !noalias !42
  %1571 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 4, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1571, align 8, !noalias !42
  %1572 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 4, i32 1
  store i32 %1531, i32* %1572, align 8, !noalias !42
  %1573 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 5, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1573, align 8, !noalias !42
  %1574 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 5, i32 1
  store i32 %1531, i32* %1574, align 8, !noalias !42
  %1575 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 6, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1575, align 8, !noalias !42
  %1576 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 6, i32 1
  store i32 %1531, i32* %1576, align 8, !noalias !42
  %1577 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 7, i32 0
  store %"class.skvm::Builder"* %1530, %"class.skvm::Builder"** %1577, align 8, !noalias !42
  %1578 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 7, i32 1
  store i32 %1531, i32* %1578, align 8, !noalias !42
  %1579 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1562, i64 8
  %1580 = icmp eq %"struct.skvm::F32"* %1579, %1543
  br i1 %1580, label %1581, label %1561

1581:                                             ; preds = %1561, %1558
  %1582 = bitcast %"struct.skvm::F32"** %1524 to i64*
  %1583 = ptrtoint %"struct.skvm::F32"* %1543 to i64
  store i64 %1583, i64* %1582, align 8, !noalias !42
  br label %1584

1584:                                             ; preds = %1581, %1518
  %1585 = phi %"struct.skvm::F32"* [ %1540, %1581 ], [ null, %1518 ]
  %1586 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1587 = bitcast %"class.SkSL::Expression"* %1586 to %"class.SkSL::ExternalFunction"**
  %1588 = load %"class.SkSL::ExternalFunction"*, %"class.SkSL::ExternalFunction"** %1587, align 8, !noalias !42
  %1589 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1526, align 8, !noalias !42
  %1590 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1490, align 8, !noalias !42
  %1591 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %1592 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1591, align 8, !noalias !42
  %1593 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %1594 = load i32, i32* %1593, align 8, !noalias !42
  %1595 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 8, i32 0
  %1596 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1595, align 8, !noalias !42
  %1597 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 8, i32 1
  %1598 = load i32, i32* %1597, align 8, !noalias !42
  %1599 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1592, %"class.skvm::Builder"* %1592, i32 %1594, %"class.skvm::Builder"* %1596, i32 %1598) #12
  %1600 = extractvalue { %"class.skvm::Builder"*, i32 } %1599, 0
  %1601 = extractvalue { %"class.skvm::Builder"*, i32 } %1599, 1
  %1602 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 10, i32 0, i32 1
  %1603 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %1602, align 8, !noalias !42
  %1604 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %1603, i64 -1, i32 1, i32 0
  %1605 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1604, align 8
  %1606 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %1603, i64 -1, i32 1, i32 1
  %1607 = load i32, i32* %1606, align 8
  %1608 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1605, i32 -1) #12
  %1609 = extractvalue { %"class.skvm::Builder"*, i32 } %1608, 0
  %1610 = extractvalue { %"class.skvm::Builder"*, i32 } %1608, 1
  %1611 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %1605, %"class.skvm::Builder"* %1609, i32 %1610, %"class.skvm::Builder"* %1605, i32 %1607) #12
  %1612 = extractvalue { %"class.skvm::Builder"*, i32 } %1611, 0
  %1613 = extractvalue { %"class.skvm::Builder"*, i32 } %1611, 1
  %1614 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1600, %"class.skvm::Builder"* %1600, i32 %1601, %"class.skvm::Builder"* %1612, i32 %1613) #12
  %1615 = extractvalue { %"class.skvm::Builder"*, i32 } %1614, 0
  %1616 = extractvalue { %"class.skvm::Builder"*, i32 } %1614, 1
  %1617 = bitcast %"class.SkSL::ExternalFunction"* %1588 to void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)***
  %1618 = load void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)**, void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)*** %1617, align 8
  %1619 = getelementptr inbounds void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)*, void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)** %1618, i64 5
  %1620 = load void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)*, void (%"class.SkSL::ExternalFunction"*, %"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32)** %1619, align 8
  call void %1620(%"class.SkSL::ExternalFunction"* %1588, %"class.skvm::Builder"* %1589, %"struct.skvm::F32"* %1590, %"struct.skvm::F32"* %1585, %"class.skvm::Builder"* %1615, i32 %1616) #12
  %1621 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1622 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1623 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1624 = bitcast i8* %1623 to i64*
  %1625 = bitcast i8* %1622 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %1621, i8 -86, i64 16, i1 false)
  store i8* %1621, i8** %1625, align 8, !alias.scope !42
  store i64 34359738368, i64* %1624, align 8, !alias.scope !42
  %1626 = bitcast i8* %1622 to %class.SkTArray*
  %1627 = trunc i64 %1521 to i32
  %1628 = icmp sgt i32 %1627, 0
  br i1 %1628, label %1629, label %1636

1629:                                             ; preds = %1584
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1626, i32 %1627, i32 1) #12
  %1630 = load i64, i64* %1624, align 8, !alias.scope !42
  %1631 = shl i64 %1521, 1
  %1632 = add i64 %1630, %1631
  %1633 = and i64 %1632, 4294967294
  %1634 = and i64 %1630, -4294967295
  %1635 = or i64 %1633, %1634
  store i64 %1635, i64* %1624, align 8, !alias.scope !42
  br label %1642

1636:                                             ; preds = %1584
  %1637 = icmp slt i32 %1627, 0
  br i1 %1637, label %1638, label %1642

1638:                                             ; preds = %1636
  %1639 = shl i64 %1521, 1
  %1640 = and i64 %1639, 4294967294
  %1641 = or i64 %1640, 34359738368
  store i64 %1641, i64* %1624, align 8, !alias.scope !42
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1626, i32 0, i32 2) #12
  br label %1642

1642:                                             ; preds = %1638, %1636, %1629
  %1643 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1523, align 8
  br i1 %1532, label %1769, label %1644

1644:                                             ; preds = %1642
  %1645 = bitcast i8* %1622 to i32**
  %1646 = and i64 %1521, 1
  %1647 = icmp eq i64 %1521, 1
  br i1 %1647, label %1756, label %1648

1648:                                             ; preds = %1644
  %1649 = sub i64 %1521, %1646
  br label %1734

1650:                                             ; preds = %1506, %1663
  %1651 = phi %"class.std::__1::unique_ptr.200"* [ %1496, %1506 ], [ %1664, %1663 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1507) #12, !noalias !42
  %1652 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1651, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1507, i8 -86, i64 32, i1 false)
  %1653 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1652, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %20, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1653) #12
  %1654 = load i64, i64* %1509, align 8, !noalias !42
  %1655 = and i64 %1654, 4294967294
  %1656 = icmp eq i64 %1655, 0
  br i1 %1656, label %1657, label %1666

1657:                                             ; preds = %1728, %1650
  %1658 = phi i64 [ %1654, %1650 ], [ %1730, %1728 ]
  %1659 = and i64 %1658, 1
  %1660 = icmp eq i64 %1659, 0
  br i1 %1660, label %1663, label %1661

1661:                                             ; preds = %1657
  %1662 = load i8*, i8** %1517, align 8, !noalias !42
  call void @_Z7sk_freePv(i8* %1662) #12
  br label %1663

1663:                                             ; preds = %1661, %1657
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1507) #12, !noalias !42
  %1664 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %1651, i64 1
  %1665 = icmp eq %"class.std::__1::unique_ptr.200"* %1664, %1504
  br i1 %1665, label %1518, label %1650

1666:                                             ; preds = %1650, %1728
  %1667 = phi i64 [ %1729, %1728 ], [ 0, %1650 ]
  %1668 = load i32*, i32** %1511, align 8, !noalias !42
  %1669 = shl i64 %1667, 32
  %1670 = ashr exact i64 %1669, 32
  %1671 = getelementptr inbounds i32, i32* %1668, i64 %1670
  %1672 = load i32, i32* %1671, align 4
  %1673 = load i64, i64* %1513, align 8, !noalias !42
  %1674 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1491, align 8, !noalias !42
  %1675 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1492, align 8, !noalias !42
  %1676 = icmp ult %"struct.skvm::F32"* %1674, %1675
  %1677 = ptrtoint %"struct.skvm::F32"* %1675 to i64
  br i1 %1676, label %1678, label %1683

1678:                                             ; preds = %1666
  %1679 = bitcast %"struct.skvm::F32"* %1674 to i64*
  store i64 %1673, i64* %1679, align 8
  %1680 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1674, i64 0, i32 1
  store i32 %1672, i32* %1680, align 8
  %1681 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1674, i64 1
  %1682 = ptrtoint %"struct.skvm::F32"* %1681 to i64
  store i64 %1682, i64* %1514, align 8, !noalias !42
  br label %1728

1683:                                             ; preds = %1666
  %1684 = ptrtoint %"struct.skvm::F32"* %1674 to i64
  %1685 = load i64, i64* %1515, align 8, !noalias !42
  %1686 = sub i64 %1684, %1685
  %1687 = ashr exact i64 %1686, 4
  %1688 = add nsw i64 %1687, 1
  %1689 = icmp ugt i64 %1688, 1152921504606846975
  br i1 %1689, label %1690, label %1692

1690:                                             ; preds = %1683
  %1691 = bitcast %"class.std::__1::vector.419"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1691) #13
  unreachable

1692:                                             ; preds = %1683
  %1693 = sub i64 %1677, %1685
  %1694 = ashr exact i64 %1693, 4
  %1695 = icmp ult i64 %1694, 576460752303423487
  br i1 %1695, label %1696, label %1704

1696:                                             ; preds = %1692
  %1697 = ashr exact i64 %1693, 3
  %1698 = icmp ult i64 %1697, %1688
  %1699 = select i1 %1698, i64 %1688, i64 %1697
  %1700 = icmp eq i64 %1699, 0
  br i1 %1700, label %1709, label %1701

1701:                                             ; preds = %1696
  %1702 = icmp ugt i64 %1699, 1152921504606846975
  br i1 %1702, label %1703, label %1704

1703:                                             ; preds = %1701
  call void @abort() #13
  unreachable

1704:                                             ; preds = %1701, %1692
  %1705 = phi i64 [ %1699, %1701 ], [ 1152921504606846975, %1692 ]
  %1706 = shl i64 %1705, 4
  %1707 = call i8* @_Znwm(i64 %1706) #14
  %1708 = bitcast i8* %1707 to %"struct.skvm::F32"*
  br label %1709

1709:                                             ; preds = %1704, %1696
  %1710 = phi i64 [ %1705, %1704 ], [ 0, %1696 ]
  %1711 = phi i8* [ %1707, %1704 ], [ null, %1696 ]
  %1712 = phi %"struct.skvm::F32"* [ %1708, %1704 ], [ null, %1696 ]
  %1713 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1712, i64 %1687
  %1714 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1712, i64 %1710
  %1715 = ptrtoint %"struct.skvm::F32"* %1714 to i64
  %1716 = bitcast %"struct.skvm::F32"* %1713 to i64*
  store i64 %1673, i64* %1716, align 8, !noalias !42
  %1717 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1712, i64 %1687, i32 1
  store i32 %1672, i32* %1717, align 8, !noalias !42
  %1718 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1713, i64 1
  %1719 = ptrtoint %"struct.skvm::F32"* %1718 to i64
  %1720 = ptrtoint %"struct.skvm::F32"* %1712 to i64
  %1721 = icmp sgt i64 %1686, 0
  br i1 %1721, label %1722, label %1724

1722:                                             ; preds = %1709
  %1723 = inttoptr i64 %1685 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1711, i8* align 8 %1723, i64 %1686, i1 false) #12
  br label %1724

1724:                                             ; preds = %1722, %1709
  store i64 %1720, i64* %1515, align 8, !noalias !42
  store i64 %1719, i64* %1514, align 8, !noalias !42
  store i64 %1715, i64* %1516, align 8, !noalias !42
  %1725 = icmp eq i64 %1685, 0
  br i1 %1725, label %1728, label %1726

1726:                                             ; preds = %1724
  %1727 = inttoptr i64 %1685 to i8*
  call void @_ZdlPv(i8* %1727) #14
  br label %1728

1728:                                             ; preds = %1726, %1724, %1678
  %1729 = add nuw nsw i64 %1667, 1
  %1730 = load i64, i64* %1509, align 8, !noalias !42
  %1731 = lshr i64 %1730, 1
  %1732 = and i64 %1731, 2147483647
  %1733 = icmp ult i64 %1729, %1732
  br i1 %1733, label %1666, label %1657

1734:                                             ; preds = %1734, %1648
  %1735 = phi %"struct.skvm::F32"* [ %1643, %1648 ], [ %1753, %1734 ]
  %1736 = phi i64 [ 0, %1648 ], [ %1752, %1734 ]
  %1737 = phi i64 [ %1649, %1648 ], [ %1754, %1734 ]
  %1738 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1735, i64 %1736, i32 1
  %1739 = load i32, i32* %1738, align 8
  %1740 = load i32*, i32** %1645, align 8, !alias.scope !42
  %1741 = shl i64 %1736, 32
  %1742 = ashr exact i64 %1741, 32
  %1743 = getelementptr inbounds i32, i32* %1740, i64 %1742
  store i32 %1739, i32* %1743, align 4
  %1744 = or i64 %1736, 1
  %1745 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1523, align 8
  %1746 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1745, i64 %1744, i32 1
  %1747 = load i32, i32* %1746, align 8
  %1748 = load i32*, i32** %1645, align 8, !alias.scope !42
  %1749 = shl i64 %1744, 32
  %1750 = ashr exact i64 %1749, 32
  %1751 = getelementptr inbounds i32, i32* %1748, i64 %1750
  store i32 %1747, i32* %1751, align 4
  %1752 = add nuw i64 %1736, 2
  %1753 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1523, align 8
  %1754 = add i64 %1737, -2
  %1755 = icmp eq i64 %1754, 0
  br i1 %1755, label %1756, label %1734

1756:                                             ; preds = %1734, %1644
  %1757 = phi %"struct.skvm::F32"* [ undef, %1644 ], [ %1753, %1734 ]
  %1758 = phi %"struct.skvm::F32"* [ %1643, %1644 ], [ %1753, %1734 ]
  %1759 = phi i64 [ 0, %1644 ], [ %1752, %1734 ]
  %1760 = icmp eq i64 %1646, 0
  br i1 %1760, label %1769, label %1761

1761:                                             ; preds = %1756
  %1762 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %1758, i64 %1759, i32 1
  %1763 = load i32, i32* %1762, align 8
  %1764 = load i32*, i32** %1645, align 8, !alias.scope !42
  %1765 = shl i64 %1759, 32
  %1766 = ashr exact i64 %1765, 32
  %1767 = getelementptr inbounds i32, i32* %1764, i64 %1766
  store i32 %1763, i32* %1767, align 4
  %1768 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1523, align 8
  br label %1769

1769:                                             ; preds = %1761, %1756, %1642
  %1770 = phi %"struct.skvm::F32"* [ %1643, %1642 ], [ %1757, %1756 ], [ %1768, %1761 ]
  %1771 = icmp eq %"struct.skvm::F32"* %1770, null
  br i1 %1771, label %1776, label %1772

1772:                                             ; preds = %1769
  %1773 = ptrtoint %"struct.skvm::F32"* %1770 to i64
  %1774 = bitcast %"struct.skvm::F32"** %1524 to i64*
  store i64 %1773, i64* %1774, align 8, !noalias !42
  %1775 = bitcast %"struct.skvm::F32"* %1770 to i8*
  call void @_ZdlPv(i8* %1775) #14
  br label %1776

1776:                                             ; preds = %1772, %1769
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1522) #12, !noalias !42
  %1777 = load %"struct.skvm::F32"*, %"struct.skvm::F32"** %1490, align 8, !noalias !42
  %1778 = icmp eq %"struct.skvm::F32"* %1777, null
  br i1 %1778, label %1783, label %1779

1779:                                             ; preds = %1776
  %1780 = ptrtoint %"struct.skvm::F32"* %1777 to i64
  %1781 = bitcast %"struct.skvm::F32"** %1491 to i64*
  store i64 %1780, i64* %1781, align 8, !noalias !42
  %1782 = bitcast %"struct.skvm::F32"* %1777 to i8*
  call void @_ZdlPv(i8* %1782) #14
  br label %1783

1783:                                             ; preds = %1776, %1779
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1489) #12, !noalias !42
  br label %2833

1784:                                             ; preds = %3
  %1785 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1786 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1785, align 8
  %1787 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1788 = bitcast %"class.SkSL::Expression"* %1787 to i64*
  %1789 = load i64, i64* %1788, align 8
  %1790 = trunc i64 %1789 to i32
  %1791 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1786, i32 %1790) #12
  %1792 = extractvalue { %"class.skvm::Builder"*, i32 } %1791, 1
  %1793 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1794 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1795 = bitcast i8* %1794 to i64*
  %1796 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1797 = bitcast i8* %1793 to i8**
  store i8* %1796, i8** %1797, align 8
  %1798 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %1795, align 8
  store i32 %1792, i32* %1798, align 8
  br label %2833

1799:                                             ; preds = %3
  %1800 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1800) #12, !noalias !46
  %1801 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %1802 = bitcast i32* %1801 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1800, i8 -86, i64 32, i1 false)
  %1803 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1802, align 8, !noalias !46
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %16, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1803) #12
  %1804 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %1805 = bitcast %"class.SkSL::Expression"* %1804 to i32*
  %1806 = load i32, i32* %1805, align 8, !noalias !46
  switch i32 %1806, label %2172 [
    i32 44, label %1807
    i32 45, label %1807
    i32 47, label %1998
    i32 60, label %2121
    i32 56, label %2121
  ]

1807:                                             ; preds = %1799, %1799
  %1808 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %1809 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1808, align 8, !noalias !46
  br label %1810

1810:                                             ; preds = %1814, %1807
  %1811 = phi %"class.SkSL::Type"* [ %1809, %1807 ], [ %1818, %1814 ]
  %1812 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1811, i64 0, i32 3
  %1813 = load i32, i32* %1812, align 8
  switch i32 %1813, label %1819 [
    i32 4, label %1814
    i32 11, label %1814
  ]

1814:                                             ; preds = %1810, %1810
  %1815 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1811, i64 0, i32 6
  %1816 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1815, align 8
  %1817 = icmp eq %"class.SkSL::Type"* %1816, null
  %1818 = select i1 %1817, %"class.SkSL::Type"* %1811, %"class.SkSL::Type"* %1816
  br label %1810

1819:                                             ; preds = %1810
  %1820 = icmp eq i32 %1806, 44
  %1821 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1811, i64 0, i32 4
  %1822 = load i32, i32* %1821, align 4
  switch i32 %1822, label %1989 [
    i32 0, label %1823
    i32 1, label %1906
  ]

1823:                                             ; preds = %1819
  %1824 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %17, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1824) #12, !noalias !46
  %1825 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %1826 = bitcast i8* %1825 to i32**
  %1827 = load i32*, i32** %1826, align 8, !noalias !46
  %1828 = load i32, i32* %1827, align 4
  %1829 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1830 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1829, align 8, !noalias !46
  %1831 = select i1 %1820, i32 1065353216, i32 -1082130432
  %1832 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1830, i32 %1831) #12
  %1833 = extractvalue { %"class.skvm::Builder"*, i32 } %1832, 0
  %1834 = extractvalue { %"class.skvm::Builder"*, i32 } %1832, 1
  %1835 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1830, %"class.skvm::Builder"* %1830, i32 %1828, %"class.skvm::Builder"* %1833, i32 %1834) #12
  %1836 = extractvalue { %"class.skvm::Builder"*, i32 } %1835, 1
  %1837 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %17, i64 0, i32 0, i32 0, i32 0, i64 16
  %1838 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %17, i64 0, i32 0, i32 0, i32 0, i64 24
  %1839 = bitcast i8* %1838 to i64*
  %1840 = bitcast i8* %1837 to i8**
  store i8* %1824, i8** %1840, align 8, !noalias !46
  %1841 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %17 to i32*
  store i64 34359738370, i64* %1839, align 8, !noalias !46
  store i32 %1836, i32* %1841, align 8, !noalias !46
  %1842 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %1843 = bitcast i8* %1842 to i64*
  %1844 = load i64, i64* %1843, align 8, !noalias !46
  %1845 = and i64 %1844, -4294967295
  store i64 %1845, i64* %1843, align 8, !noalias !46
  %1846 = lshr i64 %1844, 33
  %1847 = icmp eq i64 %1846, 0
  %1848 = icmp ult i64 %1844, 34359738368
  %1849 = and i64 %1844, 1
  %1850 = icmp eq i64 %1849, 0
  %1851 = or i1 %1848, %1850
  br i1 %1851, label %1855, label %1852

1852:                                             ; preds = %1823
  %1853 = and i64 %1844, 4294967296
  %1854 = icmp eq i64 %1853, 0
  br label %1855

1855:                                             ; preds = %1852, %1823
  %1856 = phi i1 [ false, %1823 ], [ %1854, %1852 ]
  %1857 = or i1 %1847, %1856
  %1858 = xor i1 %1857, true
  %1859 = icmp eq i64 %1846, 1
  %1860 = or i1 %1859, %1858
  br i1 %1860, label %1885, label %1861

1861:                                             ; preds = %1855
  %1862 = and i64 %1844, 4294967297
  %1863 = or i64 %1862, 8589934592
  store i64 %1863, i64* %1843, align 8
  %1864 = call i8* @_Z15sk_malloc_throwmm(i64 1, i64 4) #12
  %1865 = load i64, i64* %1843, align 8
  %1866 = shl i64 %1865, 1
  %1867 = and i64 %1866, 8589934588
  %1868 = icmp eq i64 %1867, 0
  %1869 = bitcast i8* %1825 to i8**
  br i1 %1868, label %1873, label %1870

1870:                                             ; preds = %1861
  %1871 = load i8*, i8** %1869, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1864, i8* align 1 %1871, i64 %1867, i1 false) #12
  %1872 = load i64, i64* %1843, align 8
  br label %1873

1873:                                             ; preds = %1861, %1870
  %1874 = phi i64 [ %1872, %1870 ], [ %1865, %1861 ]
  %1875 = and i64 %1874, 1
  %1876 = icmp eq i64 %1875, 0
  br i1 %1876, label %1880, label %1877

1877:                                             ; preds = %1873
  %1878 = load i8*, i8** %1869, align 8
  call void @_Z7sk_freePv(i8* %1878) #12
  %1879 = load i64, i64* %1843, align 8
  br label %1880

1880:                                             ; preds = %1877, %1873
  %1881 = phi i64 [ %1879, %1877 ], [ %1874, %1873 ]
  store i8* %1864, i8** %1869, align 8
  %1882 = and i64 %1881, -4294967298
  %1883 = or i64 %1882, 1
  store i64 %1883, i64* %1843, align 8
  %1884 = load i64, i64* %1839, align 8, !noalias !46
  br label %1885

1885:                                             ; preds = %1855, %1880
  %1886 = phi i64 [ %1845, %1855 ], [ %1883, %1880 ]
  %1887 = phi i64 [ 34359738370, %1855 ], [ %1884, %1880 ]
  %1888 = and i64 %1887, 4294967294
  %1889 = and i64 %1886, -4294967295
  %1890 = or i64 %1889, %1888
  store i64 %1890, i64* %1843, align 8, !noalias !46
  %1891 = shl i64 %1887, 1
  %1892 = and i64 %1891, 8589934588
  %1893 = icmp eq i64 %1892, 0
  br i1 %1893, label %1899, label %1894

1894:                                             ; preds = %1885
  %1895 = bitcast i8* %1825 to i8**
  %1896 = load i8*, i8** %1895, align 8, !noalias !46
  %1897 = load i8*, i8** %1840, align 8, !noalias !46
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1896, i8* align 1 %1897, i64 %1892, i1 false) #12
  %1898 = load i64, i64* %1839, align 8, !noalias !46
  br label %1899

1899:                                             ; preds = %1894, %1885
  %1900 = phi i64 [ %1887, %1885 ], [ %1898, %1894 ]
  %1901 = and i64 %1900, -4294967295
  store i64 %1901, i64* %1839, align 8, !noalias !46
  %1902 = and i64 %1900, 1
  %1903 = icmp eq i64 %1902, 0
  br i1 %1903, label %1995, label %1904

1904:                                             ; preds = %1899
  %1905 = load i8*, i8** %1840, align 8, !noalias !46
  call void @_Z7sk_freePv(i8* %1905) #12
  br label %1995

1906:                                             ; preds = %1819
  %1907 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1907) #12, !noalias !46
  %1908 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %1909 = bitcast i8* %1908 to i32**
  %1910 = load i32*, i32** %1909, align 8, !noalias !46
  %1911 = load i32, i32* %1910, align 4
  %1912 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1913 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1912, align 8, !noalias !46
  %1914 = select i1 %1820, i32 1, i32 -1
  %1915 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1913, i32 %1914) #12
  %1916 = extractvalue { %"class.skvm::Builder"*, i32 } %1915, 0
  %1917 = extractvalue { %"class.skvm::Builder"*, i32 } %1915, 1
  %1918 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %1913, %"class.skvm::Builder"* %1913, i32 %1911, %"class.skvm::Builder"* %1916, i32 %1917) #12
  %1919 = extractvalue { %"class.skvm::Builder"*, i32 } %1918, 1
  %1920 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 16
  %1921 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 24
  %1922 = bitcast i8* %1921 to i64*
  %1923 = bitcast i8* %1920 to i8**
  store i8* %1907, i8** %1923, align 8, !noalias !46
  %1924 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %18 to i32*
  store i64 34359738370, i64* %1922, align 8, !noalias !46
  store i32 %1919, i32* %1924, align 8, !noalias !46
  %1925 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %1926 = bitcast i8* %1925 to i64*
  %1927 = load i64, i64* %1926, align 8, !noalias !46
  %1928 = and i64 %1927, -4294967295
  store i64 %1928, i64* %1926, align 8, !noalias !46
  %1929 = lshr i64 %1927, 33
  %1930 = icmp eq i64 %1929, 0
  %1931 = icmp ult i64 %1927, 34359738368
  %1932 = and i64 %1927, 1
  %1933 = icmp eq i64 %1932, 0
  %1934 = or i1 %1931, %1933
  br i1 %1934, label %1938, label %1935

1935:                                             ; preds = %1906
  %1936 = and i64 %1927, 4294967296
  %1937 = icmp eq i64 %1936, 0
  br label %1938

1938:                                             ; preds = %1935, %1906
  %1939 = phi i1 [ false, %1906 ], [ %1937, %1935 ]
  %1940 = or i1 %1930, %1939
  %1941 = xor i1 %1940, true
  %1942 = icmp eq i64 %1929, 1
  %1943 = or i1 %1942, %1941
  br i1 %1943, label %1968, label %1944

1944:                                             ; preds = %1938
  %1945 = and i64 %1927, 4294967297
  %1946 = or i64 %1945, 8589934592
  store i64 %1946, i64* %1926, align 8
  %1947 = call i8* @_Z15sk_malloc_throwmm(i64 1, i64 4) #12
  %1948 = load i64, i64* %1926, align 8
  %1949 = shl i64 %1948, 1
  %1950 = and i64 %1949, 8589934588
  %1951 = icmp eq i64 %1950, 0
  %1952 = bitcast i8* %1908 to i8**
  br i1 %1951, label %1956, label %1953

1953:                                             ; preds = %1944
  %1954 = load i8*, i8** %1952, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1947, i8* align 1 %1954, i64 %1950, i1 false) #12
  %1955 = load i64, i64* %1926, align 8
  br label %1956

1956:                                             ; preds = %1944, %1953
  %1957 = phi i64 [ %1955, %1953 ], [ %1948, %1944 ]
  %1958 = and i64 %1957, 1
  %1959 = icmp eq i64 %1958, 0
  br i1 %1959, label %1963, label %1960

1960:                                             ; preds = %1956
  %1961 = load i8*, i8** %1952, align 8
  call void @_Z7sk_freePv(i8* %1961) #12
  %1962 = load i64, i64* %1926, align 8
  br label %1963

1963:                                             ; preds = %1960, %1956
  %1964 = phi i64 [ %1962, %1960 ], [ %1957, %1956 ]
  store i8* %1947, i8** %1952, align 8
  %1965 = and i64 %1964, -4294967298
  %1966 = or i64 %1965, 1
  store i64 %1966, i64* %1926, align 8
  %1967 = load i64, i64* %1922, align 8, !noalias !46
  br label %1968

1968:                                             ; preds = %1938, %1963
  %1969 = phi i64 [ %1928, %1938 ], [ %1966, %1963 ]
  %1970 = phi i64 [ 34359738370, %1938 ], [ %1967, %1963 ]
  %1971 = and i64 %1970, 4294967294
  %1972 = and i64 %1969, -4294967295
  %1973 = or i64 %1972, %1971
  store i64 %1973, i64* %1926, align 8, !noalias !46
  %1974 = shl i64 %1970, 1
  %1975 = and i64 %1974, 8589934588
  %1976 = icmp eq i64 %1975, 0
  br i1 %1976, label %1982, label %1977

1977:                                             ; preds = %1968
  %1978 = bitcast i8* %1908 to i8**
  %1979 = load i8*, i8** %1978, align 8, !noalias !46
  %1980 = load i8*, i8** %1923, align 8, !noalias !46
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1979, i8* align 1 %1980, i64 %1975, i1 false) #12
  %1981 = load i64, i64* %1922, align 8, !noalias !46
  br label %1982

1982:                                             ; preds = %1977, %1968
  %1983 = phi i64 [ %1970, %1968 ], [ %1981, %1977 ]
  %1984 = and i64 %1983, -4294967295
  store i64 %1984, i64* %1922, align 8, !noalias !46
  %1985 = and i64 %1983, 1
  %1986 = icmp eq i64 %1985, 0
  br i1 %1986, label %1995, label %1987

1987:                                             ; preds = %1982
  %1988 = load i8*, i8** %1923, align 8, !noalias !46
  call void @_Z7sk_freePv(i8* %1988) #12
  br label %1995

1989:                                             ; preds = %1819
  %1990 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %1990, i8 0, i64 16, i1 false) #12, !alias.scope !46
  %1991 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1992 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1993 = bitcast i8* %1992 to i64*
  %1994 = bitcast i8* %1991 to i8**
  store i8* %1990, i8** %1994, align 8, !alias.scope !46
  store i64 34359738368, i64* %1993, align 8, !alias.scope !46
  br label %2178

1995:                                             ; preds = %1982, %1987, %1899, %1904
  %1996 = phi i8* [ %1824, %1904 ], [ %1824, %1899 ], [ %1907, %1987 ], [ %1907, %1982 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1996) #12, !noalias !46
  %1997 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1802, align 8, !noalias !46
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %1997, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %16) #12
  br label %2178

1998:                                             ; preds = %1799
  %1999 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %2000 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %1999, align 8, !noalias !46
  br label %2001

2001:                                             ; preds = %2005, %1998
  %2002 = phi %"class.SkSL::Type"* [ %2000, %1998 ], [ %2009, %2005 ]
  %2003 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2002, i64 0, i32 3
  %2004 = load i32, i32* %2003, align 8
  switch i32 %2004, label %2010 [
    i32 4, label %2005
    i32 11, label %2005
  ]

2005:                                             ; preds = %2001, %2001
  %2006 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2002, i64 0, i32 6
  %2007 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2006, align 8
  %2008 = icmp eq %"class.SkSL::Type"* %2007, null
  %2009 = select i1 %2008, %"class.SkSL::Type"* %2002, %"class.SkSL::Type"* %2007
  br label %2001

2010:                                             ; preds = %2001
  %2011 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2002, i64 0, i32 4
  %2012 = load i32, i32* %2011, align 4
  switch i32 %2012, label %2115 [
    i32 0, label %2013
    i32 1, label %2064
  ]

2013:                                             ; preds = %2010
  %2014 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2015 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %2016 = bitcast i8* %2015 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2014, i8 -86, i64 16, i1 false) #12, !alias.scope !49
  %2017 = load i64, i64* %2016, align 8, !noalias !49
  %2018 = lshr i64 %2017, 1
  %2019 = and i64 %2018, 2147483647
  %2020 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2021 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2022 = bitcast i8* %2021 to i64*
  %2023 = bitcast i8* %2020 to i8**
  store i8* %2014, i8** %2023, align 8, !alias.scope !49
  store i64 34359738368, i64* %2022, align 8, !alias.scope !49
  %2024 = trunc i64 %2019 to i32
  %2025 = icmp eq i32 %2024, 0
  br i1 %2025, label %2035, label %2026

2026:                                             ; preds = %2013
  %2027 = bitcast i8* %2020 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2027, i32 %2024, i32 1) #12
  %2028 = load i64, i64* %2022, align 8, !alias.scope !49
  %2029 = shl nuw nsw i64 %2019, 1
  %2030 = add i64 %2028, %2029
  %2031 = and i64 %2030, 4294967294
  %2032 = and i64 %2028, -4294967295
  %2033 = or i64 %2031, %2032
  store i64 %2033, i64* %2022, align 8, !alias.scope !49
  %2034 = load i64, i64* %2016, align 8, !noalias !49
  br label %2035

2035:                                             ; preds = %2026, %2013
  %2036 = phi i64 [ %2017, %2013 ], [ %2034, %2026 ]
  %2037 = and i64 %2036, 4294967294
  %2038 = icmp eq i64 %2037, 0
  br i1 %2038, label %2178, label %2039

2039:                                             ; preds = %2035
  %2040 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2041 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %2042 = bitcast i8* %2041 to i32**
  %2043 = bitcast i8* %2020 to i32**
  br label %2044

2044:                                             ; preds = %2044, %2039
  %2045 = phi i64 [ 0, %2039 ], [ %2059, %2044 ]
  %2046 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2040, align 8, !noalias !49
  %2047 = load i32*, i32** %2042, align 8, !noalias !49
  %2048 = shl i64 %2045, 32
  %2049 = ashr exact i64 %2048, 32
  %2050 = getelementptr inbounds i32, i32* %2047, i64 %2049
  %2051 = load i32, i32* %2050, align 4
  %2052 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2046, i32 0) #12
  %2053 = extractvalue { %"class.skvm::Builder"*, i32 } %2052, 0
  %2054 = extractvalue { %"class.skvm::Builder"*, i32 } %2052, 1
  %2055 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2046, %"class.skvm::Builder"* %2053, i32 %2054, %"class.skvm::Builder"* %2046, i32 %2051) #12
  %2056 = extractvalue { %"class.skvm::Builder"*, i32 } %2055, 1
  %2057 = load i32*, i32** %2043, align 8, !alias.scope !49
  %2058 = getelementptr inbounds i32, i32* %2057, i64 %2049
  store i32 %2056, i32* %2058, align 4
  %2059 = add nuw nsw i64 %2045, 1
  %2060 = load i64, i64* %2016, align 8, !noalias !49
  %2061 = lshr i64 %2060, 1
  %2062 = and i64 %2061, 2147483647
  %2063 = icmp ult i64 %2059, %2062
  br i1 %2063, label %2044, label %2178

2064:                                             ; preds = %2010
  %2065 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2066 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %2067 = bitcast i8* %2066 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2065, i8 -86, i64 16, i1 false) #12, !alias.scope !52
  %2068 = load i64, i64* %2067, align 8, !noalias !52
  %2069 = lshr i64 %2068, 1
  %2070 = and i64 %2069, 2147483647
  %2071 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2072 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2073 = bitcast i8* %2072 to i64*
  %2074 = bitcast i8* %2071 to i8**
  store i8* %2065, i8** %2074, align 8, !alias.scope !52
  store i64 34359738368, i64* %2073, align 8, !alias.scope !52
  %2075 = trunc i64 %2070 to i32
  %2076 = icmp eq i32 %2075, 0
  br i1 %2076, label %2086, label %2077

2077:                                             ; preds = %2064
  %2078 = bitcast i8* %2071 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2078, i32 %2075, i32 1) #12
  %2079 = load i64, i64* %2073, align 8, !alias.scope !52
  %2080 = shl nuw nsw i64 %2070, 1
  %2081 = add i64 %2079, %2080
  %2082 = and i64 %2081, 4294967294
  %2083 = and i64 %2079, -4294967295
  %2084 = or i64 %2082, %2083
  store i64 %2084, i64* %2073, align 8, !alias.scope !52
  %2085 = load i64, i64* %2067, align 8, !noalias !52
  br label %2086

2086:                                             ; preds = %2077, %2064
  %2087 = phi i64 [ %2068, %2064 ], [ %2085, %2077 ]
  %2088 = and i64 %2087, 4294967294
  %2089 = icmp eq i64 %2088, 0
  br i1 %2089, label %2178, label %2090

2090:                                             ; preds = %2086
  %2091 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2092 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %2093 = bitcast i8* %2092 to i32**
  %2094 = bitcast i8* %2071 to i32**
  br label %2095

2095:                                             ; preds = %2095, %2090
  %2096 = phi i64 [ 0, %2090 ], [ %2110, %2095 ]
  %2097 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2091, align 8, !noalias !52
  %2098 = load i32*, i32** %2093, align 8, !noalias !52
  %2099 = shl i64 %2096, 32
  %2100 = ashr exact i64 %2099, 32
  %2101 = getelementptr inbounds i32, i32* %2098, i64 %2100
  %2102 = load i32, i32* %2101, align 4
  %2103 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2097, i32 0) #12
  %2104 = extractvalue { %"class.skvm::Builder"*, i32 } %2103, 0
  %2105 = extractvalue { %"class.skvm::Builder"*, i32 } %2103, 1
  %2106 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3I32ES1_(%"class.skvm::Builder"* %2097, %"class.skvm::Builder"* %2104, i32 %2105, %"class.skvm::Builder"* %2097, i32 %2102) #12
  %2107 = extractvalue { %"class.skvm::Builder"*, i32 } %2106, 1
  %2108 = load i32*, i32** %2094, align 8, !alias.scope !52
  %2109 = getelementptr inbounds i32, i32* %2108, i64 %2100
  store i32 %2107, i32* %2109, align 4
  %2110 = add nuw nsw i64 %2096, 1
  %2111 = load i64, i64* %2067, align 8, !noalias !52
  %2112 = lshr i64 %2111, 1
  %2113 = and i64 %2112, 2147483647
  %2114 = icmp ult i64 %2110, %2113
  br i1 %2114, label %2095, label %2178

2115:                                             ; preds = %2010
  %2116 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %2116, i8 0, i64 16, i1 false) #12, !alias.scope !46
  %2117 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2118 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2119 = bitcast i8* %2118 to i64*
  %2120 = bitcast i8* %2117 to i8**
  store i8* %2116, i8** %2120, align 8, !alias.scope !46
  store i64 34359738368, i64* %2119, align 8, !alias.scope !46
  br label %2178

2121:                                             ; preds = %1799, %1799
  %2122 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2123 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %2124 = bitcast i8* %2123 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2122, i8 -86, i64 16, i1 false) #12, !alias.scope !55
  %2125 = load i64, i64* %2124, align 8, !noalias !55
  %2126 = lshr i64 %2125, 1
  %2127 = and i64 %2126, 2147483647
  %2128 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2129 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2130 = bitcast i8* %2129 to i64*
  %2131 = bitcast i8* %2128 to i8**
  store i8* %2122, i8** %2131, align 8, !alias.scope !55
  store i64 34359738368, i64* %2130, align 8, !alias.scope !55
  %2132 = trunc i64 %2127 to i32
  %2133 = icmp eq i32 %2132, 0
  br i1 %2133, label %2143, label %2134

2134:                                             ; preds = %2121
  %2135 = bitcast i8* %2128 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2135, i32 %2132, i32 1) #12
  %2136 = load i64, i64* %2130, align 8, !alias.scope !55
  %2137 = shl nuw nsw i64 %2127, 1
  %2138 = add i64 %2136, %2137
  %2139 = and i64 %2138, 4294967294
  %2140 = and i64 %2136, -4294967295
  %2141 = or i64 %2139, %2140
  store i64 %2141, i64* %2130, align 8, !alias.scope !55
  %2142 = load i64, i64* %2124, align 8, !noalias !55
  br label %2143

2143:                                             ; preds = %2134, %2121
  %2144 = phi i64 [ %2125, %2121 ], [ %2142, %2134 ]
  %2145 = and i64 %2144, 4294967294
  %2146 = icmp eq i64 %2145, 0
  br i1 %2146, label %2178, label %2147

2147:                                             ; preds = %2143
  %2148 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2149 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %2150 = bitcast i8* %2149 to i32**
  %2151 = bitcast i8* %2128 to i32**
  br label %2152

2152:                                             ; preds = %2152, %2147
  %2153 = phi i64 [ 0, %2147 ], [ %2167, %2152 ]
  %2154 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2148, align 8, !noalias !55
  %2155 = load i32*, i32** %2150, align 8, !noalias !55
  %2156 = shl i64 %2153, 32
  %2157 = ashr exact i64 %2156, 32
  %2158 = getelementptr inbounds i32, i32* %2155, i64 %2157
  %2159 = load i32, i32* %2158, align 4
  %2160 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2154, i32 -1) #12
  %2161 = extractvalue { %"class.skvm::Builder"*, i32 } %2160, 0
  %2162 = extractvalue { %"class.skvm::Builder"*, i32 } %2160, 1
  %2163 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %2154, %"class.skvm::Builder"* %2161, i32 %2162, %"class.skvm::Builder"* %2154, i32 %2159) #12
  %2164 = extractvalue { %"class.skvm::Builder"*, i32 } %2163, 1
  %2165 = load i32*, i32** %2151, align 8, !alias.scope !55
  %2166 = getelementptr inbounds i32, i32* %2165, i64 %2157
  store i32 %2164, i32* %2166, align 4
  %2167 = add nuw nsw i64 %2153, 1
  %2168 = load i64, i64* %2124, align 8, !noalias !55
  %2169 = lshr i64 %2168, 1
  %2170 = and i64 %2169, 2147483647
  %2171 = icmp ult i64 %2167, %2170
  br i1 %2171, label %2152, label %2178

2172:                                             ; preds = %1799
  %2173 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %2173, i8 0, i64 16, i1 false) #12, !alias.scope !46
  %2174 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2175 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2176 = bitcast i8* %2175 to i64*
  %2177 = bitcast i8* %2174 to i8**
  store i8* %2173, i8** %2177, align 8, !alias.scope !46
  store i64 34359738368, i64* %2176, align 8, !alias.scope !46
  br label %2178

2178:                                             ; preds = %2152, %2095, %2044, %2143, %2086, %2035, %2172, %2115, %1995, %1989
  %2179 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %2180 = bitcast i8* %2179 to i64*
  %2181 = load i64, i64* %2180, align 8, !noalias !46
  %2182 = and i64 %2181, 1
  %2183 = icmp eq i64 %2182, 0
  br i1 %2183, label %2188, label %2184

2184:                                             ; preds = %2178
  %2185 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %2186 = bitcast i8* %2185 to i8**
  %2187 = load i8*, i8** %2186, align 8, !noalias !46
  call void @_Z7sk_freePv(i8* %2187) #12
  br label %2188

2188:                                             ; preds = %2178, %2184
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1800) #12, !noalias !46
  br label %2833

2189:                                             ; preds = %3
  %2190 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2190)
  %2191 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %2192 = load i32, i32* %2191, align 8, !noalias !58
  %2193 = and i32 %2192, -2
  %2194 = icmp eq i32 %2193, 44
  br i1 %2194, label %2195, label %2497

2195:                                             ; preds = %2189
  %2196 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2196) #12, !noalias !58
  %2197 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %2198 = bitcast %"class.SkSL::Expression"* %2197 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2196, i8 -86, i64 32, i1 false)
  %2199 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2198, align 8, !noalias !58
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %11, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2199) #12
  %2200 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2200) #12, !noalias !58
  %2201 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 16
  %2202 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 24
  %2203 = bitcast i8* %2202 to i64*
  %2204 = bitcast i8* %2201 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2200, i8 -86, i64 16, i1 false)
  store i8* %2200, i8** %2204, align 8, !noalias !58
  %2205 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 16
  store i64 34359738368, i64* %2203, align 8, !noalias !58
  %2206 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 24
  %2207 = bitcast i8* %2206 to i64*
  %2208 = load i64, i64* %2207, align 8, !noalias !58
  %2209 = lshr i64 %2208, 1
  %2210 = and i64 %2209, 2147483647
  %2211 = icmp ult i64 %2210, 5
  %2212 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %12 to i32*
  br i1 %2211, label %2236, label %2213

2213:                                             ; preds = %2195
  %2214 = shl nuw i64 %2210, 33
  store i64 %2214, i64* %2203, align 8
  %2215 = call i8* @_Z15sk_malloc_throwmm(i64 %2210, i64 4) #12
  %2216 = load i64, i64* %2203, align 8
  %2217 = shl i64 %2216, 1
  %2218 = and i64 %2217, 8589934588
  %2219 = icmp eq i64 %2218, 0
  br i1 %2219, label %2223, label %2220

2220:                                             ; preds = %2213
  %2221 = load i8*, i8** %2204, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2215, i8* align 1 %2221, i64 %2218, i1 false) #12
  %2222 = load i64, i64* %2203, align 8
  br label %2223

2223:                                             ; preds = %2220, %2213
  %2224 = phi i64 [ %2216, %2213 ], [ %2222, %2220 ]
  %2225 = and i64 %2224, 1
  %2226 = icmp eq i64 %2225, 0
  br i1 %2226, label %2230, label %2227

2227:                                             ; preds = %2223
  %2228 = load i8*, i8** %2204, align 8
  call void @_Z7sk_freePv(i8* %2228) #12
  %2229 = load i64, i64* %2203, align 8
  br label %2230

2230:                                             ; preds = %2227, %2223
  %2231 = phi i64 [ %2229, %2227 ], [ %2224, %2223 ]
  store i8* %2215, i8** %2204, align 8
  %2232 = and i64 %2231, -4294967298
  %2233 = or i64 %2232, 1
  store i64 %2233, i64* %2203, align 8
  %2234 = load i64, i64* %2207, align 8, !noalias !58
  %2235 = bitcast i8* %2215 to i32*
  br label %2236

2236:                                             ; preds = %2195, %2230
  %2237 = phi i32* [ %2212, %2195 ], [ %2235, %2230 ]
  %2238 = phi i64 [ 34359738368, %2195 ], [ %2233, %2230 ]
  %2239 = phi i64 [ %2208, %2195 ], [ %2234, %2230 ]
  %2240 = and i64 %2239, 4294967294
  %2241 = and i64 %2238, -4294967295
  %2242 = or i64 %2241, %2240
  store i64 %2242, i64* %2203, align 8, !noalias !58
  %2243 = bitcast i8* %2205 to i32**
  %2244 = load i32*, i32** %2243, align 8, !noalias !58
  %2245 = icmp eq i64 %2240, 0
  br i1 %2245, label %2263, label %2246

2246:                                             ; preds = %2236
  %2247 = bitcast i8* %2201 to i32**
  %2248 = load i32, i32* %2244, align 4
  store i32 %2248, i32* %2237, align 4
  %2249 = load i64, i64* %2203, align 8, !noalias !58
  %2250 = and i64 %2249, 4294967292
  %2251 = icmp eq i64 %2250, 0
  br i1 %2251, label %2263, label %2252

2252:                                             ; preds = %2246, %2252
  %2253 = phi i64 [ %2258, %2252 ], [ 1, %2246 ]
  %2254 = load i32*, i32** %2247, align 8, !noalias !58
  %2255 = getelementptr inbounds i32, i32* %2254, i64 %2253
  %2256 = getelementptr inbounds i32, i32* %2244, i64 %2253
  %2257 = load i32, i32* %2256, align 4
  store i32 %2257, i32* %2255, align 4
  %2258 = add nuw nsw i64 %2253, 1
  %2259 = load i64, i64* %2203, align 8, !noalias !58
  %2260 = lshr i64 %2259, 1
  %2261 = and i64 %2260, 2147483647
  %2262 = icmp ult i64 %2258, %2261
  br i1 %2262, label %2252, label %2263

2263:                                             ; preds = %2252, %2246, %2236
  %2264 = load i32, i32* %2191, align 8, !noalias !58
  %2265 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 1
  %2266 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2265, align 8, !noalias !58
  br label %2267

2267:                                             ; preds = %2271, %2263
  %2268 = phi %"class.SkSL::Type"* [ %2266, %2263 ], [ %2275, %2271 ]
  %2269 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2268, i64 0, i32 3
  %2270 = load i32, i32* %2269, align 8
  switch i32 %2270, label %2276 [
    i32 4, label %2271
    i32 11, label %2271
  ]

2271:                                             ; preds = %2267, %2267
  %2272 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2268, i64 0, i32 6
  %2273 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2272, align 8
  %2274 = icmp eq %"class.SkSL::Type"* %2273, null
  %2275 = select i1 %2274, %"class.SkSL::Type"* %2268, %"class.SkSL::Type"* %2273
  br label %2267

2276:                                             ; preds = %2267
  %2277 = icmp eq i32 %2264, 44
  %2278 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2268, i64 0, i32 4
  %2279 = load i32, i32* %2278, align 4
  switch i32 %2279, label %2436 [
    i32 0, label %2280
    i32 1, label %2358
  ]

2280:                                             ; preds = %2276
  %2281 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2281) #12, !noalias !58
  %2282 = bitcast i8* %2201 to i32**
  %2283 = load i32*, i32** %2282, align 8, !noalias !58
  %2284 = load i32, i32* %2283, align 4
  %2285 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2286 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2285, align 8, !noalias !58
  %2287 = select i1 %2277, i32 1065353216, i32 -1082130432
  %2288 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2286, i32 %2287) #12
  %2289 = extractvalue { %"class.skvm::Builder"*, i32 } %2288, 0
  %2290 = extractvalue { %"class.skvm::Builder"*, i32 } %2288, 1
  %2291 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2286, %"class.skvm::Builder"* %2286, i32 %2284, %"class.skvm::Builder"* %2289, i32 %2290) #12
  %2292 = extractvalue { %"class.skvm::Builder"*, i32 } %2291, 1
  %2293 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 16
  %2294 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 24
  %2295 = bitcast i8* %2294 to i64*
  %2296 = bitcast i8* %2293 to i8**
  store i8* %2281, i8** %2296, align 8, !noalias !58
  %2297 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %13 to i32*
  store i64 34359738370, i64* %2295, align 8, !noalias !58
  store i32 %2292, i32* %2297, align 8, !noalias !58
  %2298 = load i64, i64* %2203, align 8, !noalias !58
  %2299 = and i64 %2298, -4294967295
  store i64 %2299, i64* %2203, align 8, !noalias !58
  %2300 = lshr i64 %2298, 33
  %2301 = icmp eq i64 %2300, 0
  %2302 = icmp ult i64 %2298, 34359738368
  %2303 = and i64 %2298, 1
  %2304 = icmp eq i64 %2303, 0
  %2305 = or i1 %2302, %2304
  br i1 %2305, label %2309, label %2306

2306:                                             ; preds = %2280
  %2307 = and i64 %2298, 4294967296
  %2308 = icmp eq i64 %2307, 0
  br label %2309

2309:                                             ; preds = %2306, %2280
  %2310 = phi i1 [ false, %2280 ], [ %2308, %2306 ]
  %2311 = or i1 %2301, %2310
  %2312 = xor i1 %2311, true
  %2313 = icmp eq i64 %2300, 1
  %2314 = or i1 %2313, %2312
  br i1 %2314, label %2338, label %2315

2315:                                             ; preds = %2309
  %2316 = and i64 %2298, 4294967297
  %2317 = or i64 %2316, 8589934592
  store i64 %2317, i64* %2203, align 8
  %2318 = call i8* @_Z15sk_malloc_throwmm(i64 1, i64 4) #12
  %2319 = load i64, i64* %2203, align 8
  %2320 = shl i64 %2319, 1
  %2321 = and i64 %2320, 8589934588
  %2322 = icmp eq i64 %2321, 0
  br i1 %2322, label %2326, label %2323

2323:                                             ; preds = %2315
  %2324 = load i8*, i8** %2204, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2318, i8* align 1 %2324, i64 %2321, i1 false) #12
  %2325 = load i64, i64* %2203, align 8
  br label %2326

2326:                                             ; preds = %2323, %2315
  %2327 = phi i64 [ %2319, %2315 ], [ %2325, %2323 ]
  %2328 = and i64 %2327, 1
  %2329 = icmp eq i64 %2328, 0
  br i1 %2329, label %2333, label %2330

2330:                                             ; preds = %2326
  %2331 = load i8*, i8** %2204, align 8
  call void @_Z7sk_freePv(i8* %2331) #12
  %2332 = load i64, i64* %2203, align 8
  br label %2333

2333:                                             ; preds = %2330, %2326
  %2334 = phi i64 [ %2332, %2330 ], [ %2327, %2326 ]
  store i8* %2318, i8** %2204, align 8
  %2335 = and i64 %2334, -4294967298
  %2336 = or i64 %2335, 1
  store i64 %2336, i64* %2203, align 8
  %2337 = load i64, i64* %2295, align 8, !noalias !58
  br label %2338

2338:                                             ; preds = %2309, %2333
  %2339 = phi i64 [ %2299, %2309 ], [ %2336, %2333 ]
  %2340 = phi i64 [ 34359738370, %2309 ], [ %2337, %2333 ]
  %2341 = and i64 %2340, 4294967294
  %2342 = and i64 %2339, -4294967295
  %2343 = or i64 %2342, %2341
  store i64 %2343, i64* %2203, align 8, !noalias !58
  %2344 = shl i64 %2340, 1
  %2345 = and i64 %2344, 8589934588
  %2346 = icmp eq i64 %2345, 0
  br i1 %2346, label %2351, label %2347

2347:                                             ; preds = %2338
  %2348 = load i8*, i8** %2204, align 8, !noalias !58
  %2349 = load i8*, i8** %2296, align 8, !noalias !58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2348, i8* align 1 %2349, i64 %2345, i1 false) #12
  %2350 = load i64, i64* %2295, align 8, !noalias !58
  br label %2351

2351:                                             ; preds = %2347, %2338
  %2352 = phi i64 [ %2340, %2338 ], [ %2350, %2347 ]
  %2353 = and i64 %2352, -4294967295
  store i64 %2353, i64* %2295, align 8, !noalias !58
  %2354 = and i64 %2352, 1
  %2355 = icmp eq i64 %2354, 0
  br i1 %2355, label %2442, label %2356

2356:                                             ; preds = %2351
  %2357 = load i8*, i8** %2296, align 8, !noalias !58
  call void @_Z7sk_freePv(i8* %2357) #12
  br label %2442

2358:                                             ; preds = %2276
  %2359 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2359) #12, !noalias !58
  %2360 = bitcast i8* %2201 to i32**
  %2361 = load i32*, i32** %2360, align 8, !noalias !58
  %2362 = load i32, i32* %2361, align 4
  %2363 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2364 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2363, align 8, !noalias !58
  %2365 = select i1 %2277, i32 1, i32 -1
  %2366 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2364, i32 %2365) #12
  %2367 = extractvalue { %"class.skvm::Builder"*, i32 } %2366, 0
  %2368 = extractvalue { %"class.skvm::Builder"*, i32 } %2366, 1
  %2369 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %2364, %"class.skvm::Builder"* %2364, i32 %2362, %"class.skvm::Builder"* %2367, i32 %2368) #12
  %2370 = extractvalue { %"class.skvm::Builder"*, i32 } %2369, 1
  %2371 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 16
  %2372 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 24
  %2373 = bitcast i8* %2372 to i64*
  %2374 = bitcast i8* %2371 to i8**
  store i8* %2359, i8** %2374, align 8, !noalias !58
  %2375 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %14 to i32*
  store i64 34359738370, i64* %2373, align 8, !noalias !58
  store i32 %2370, i32* %2375, align 8, !noalias !58
  %2376 = load i64, i64* %2203, align 8, !noalias !58
  %2377 = and i64 %2376, -4294967295
  store i64 %2377, i64* %2203, align 8, !noalias !58
  %2378 = lshr i64 %2376, 33
  %2379 = icmp eq i64 %2378, 0
  %2380 = icmp ult i64 %2376, 34359738368
  %2381 = and i64 %2376, 1
  %2382 = icmp eq i64 %2381, 0
  %2383 = or i1 %2380, %2382
  br i1 %2383, label %2387, label %2384

2384:                                             ; preds = %2358
  %2385 = and i64 %2376, 4294967296
  %2386 = icmp eq i64 %2385, 0
  br label %2387

2387:                                             ; preds = %2384, %2358
  %2388 = phi i1 [ false, %2358 ], [ %2386, %2384 ]
  %2389 = or i1 %2379, %2388
  %2390 = xor i1 %2389, true
  %2391 = icmp eq i64 %2378, 1
  %2392 = or i1 %2391, %2390
  br i1 %2392, label %2416, label %2393

2393:                                             ; preds = %2387
  %2394 = and i64 %2376, 4294967297
  %2395 = or i64 %2394, 8589934592
  store i64 %2395, i64* %2203, align 8
  %2396 = call i8* @_Z15sk_malloc_throwmm(i64 1, i64 4) #12
  %2397 = load i64, i64* %2203, align 8
  %2398 = shl i64 %2397, 1
  %2399 = and i64 %2398, 8589934588
  %2400 = icmp eq i64 %2399, 0
  br i1 %2400, label %2404, label %2401

2401:                                             ; preds = %2393
  %2402 = load i8*, i8** %2204, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2396, i8* align 1 %2402, i64 %2399, i1 false) #12
  %2403 = load i64, i64* %2203, align 8
  br label %2404

2404:                                             ; preds = %2401, %2393
  %2405 = phi i64 [ %2397, %2393 ], [ %2403, %2401 ]
  %2406 = and i64 %2405, 1
  %2407 = icmp eq i64 %2406, 0
  br i1 %2407, label %2411, label %2408

2408:                                             ; preds = %2404
  %2409 = load i8*, i8** %2204, align 8
  call void @_Z7sk_freePv(i8* %2409) #12
  %2410 = load i64, i64* %2203, align 8
  br label %2411

2411:                                             ; preds = %2408, %2404
  %2412 = phi i64 [ %2410, %2408 ], [ %2405, %2404 ]
  store i8* %2396, i8** %2204, align 8
  %2413 = and i64 %2412, -4294967298
  %2414 = or i64 %2413, 1
  store i64 %2414, i64* %2203, align 8
  %2415 = load i64, i64* %2373, align 8, !noalias !58
  br label %2416

2416:                                             ; preds = %2387, %2411
  %2417 = phi i64 [ %2377, %2387 ], [ %2414, %2411 ]
  %2418 = phi i64 [ 34359738370, %2387 ], [ %2415, %2411 ]
  %2419 = and i64 %2418, 4294967294
  %2420 = and i64 %2417, -4294967295
  %2421 = or i64 %2420, %2419
  store i64 %2421, i64* %2203, align 8, !noalias !58
  %2422 = shl i64 %2418, 1
  %2423 = and i64 %2422, 8589934588
  %2424 = icmp eq i64 %2423, 0
  br i1 %2424, label %2429, label %2425

2425:                                             ; preds = %2416
  %2426 = load i8*, i8** %2204, align 8, !noalias !58
  %2427 = load i8*, i8** %2374, align 8, !noalias !58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2426, i8* align 1 %2427, i64 %2423, i1 false) #12
  %2428 = load i64, i64* %2373, align 8, !noalias !58
  br label %2429

2429:                                             ; preds = %2425, %2416
  %2430 = phi i64 [ %2418, %2416 ], [ %2428, %2425 ]
  %2431 = and i64 %2430, -4294967295
  store i64 %2431, i64* %2373, align 8, !noalias !58
  %2432 = and i64 %2430, 1
  %2433 = icmp eq i64 %2432, 0
  br i1 %2433, label %2442, label %2434

2434:                                             ; preds = %2429
  %2435 = load i8*, i8** %2374, align 8, !noalias !58
  call void @_Z7sk_freePv(i8* %2435) #12
  br label %2442

2436:                                             ; preds = %2276
  %2437 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %2437, i8 0, i64 16, i1 false) #12, !alias.scope !58
  %2438 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2439 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2440 = bitcast i8* %2439 to i64*
  %2441 = bitcast i8* %2438 to i8**
  store i8* %2437, i8** %2441, align 8, !alias.scope !58
  store i64 34359738368, i64* %2440, align 8, !alias.scope !58
  br label %2483

2442:                                             ; preds = %2429, %2434, %2351, %2356
  %2443 = phi i8* [ %2281, %2356 ], [ %2281, %2351 ], [ %2359, %2434 ], [ %2359, %2429 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2443) #12, !noalias !58
  %2444 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2198, align 8, !noalias !58
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %15, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2444, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %12) #12
  %2445 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 24
  %2446 = bitcast i8* %2445 to i64*
  %2447 = load i64, i64* %2446, align 8, !noalias !58
  %2448 = and i64 %2447, 1
  %2449 = icmp eq i64 %2448, 0
  br i1 %2449, label %2454, label %2450

2450:                                             ; preds = %2442
  %2451 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 16
  %2452 = bitcast i8* %2451 to i8**
  %2453 = load i8*, i8** %2452, align 8, !noalias !58
  call void @_Z7sk_freePv(i8* %2453) #12
  br label %2454

2454:                                             ; preds = %2450, %2442
  %2455 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2456 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2457 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2458 = bitcast i8* %2457 to i64*
  %2459 = bitcast i8* %2455 to i8**
  store i8* %2456, i8** %2459, align 8, !alias.scope !58
  store i64 34359738368, i64* %2458, align 8, !alias.scope !58
  %2460 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %11, %0
  br i1 %2460, label %2483, label %2461

2461:                                             ; preds = %2454
  %2462 = bitcast i8* %2455 to %class.SkTArray*
  store i64 34359738368, i64* %2458, align 8, !alias.scope !58
  %2463 = load i64, i64* %2207, align 8, !noalias !58
  %2464 = lshr i64 %2463, 1
  %2465 = trunc i64 %2464 to i32
  %2466 = and i32 %2465, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2462, i32 %2466, i32 0) #12
  %2467 = load i64, i64* %2207, align 8, !noalias !58
  %2468 = and i64 %2467, 4294967294
  %2469 = load i64, i64* %2458, align 8, !alias.scope !58
  %2470 = and i64 %2469, -4294967295
  %2471 = or i64 %2470, %2468
  store i64 %2471, i64* %2458, align 8, !alias.scope !58
  %2472 = shl i64 %2467, 1
  %2473 = and i64 %2472, 8589934588
  %2474 = icmp eq i64 %2473, 0
  br i1 %2474, label %2480, label %2475

2475:                                             ; preds = %2461
  %2476 = load i8*, i8** %2459, align 8, !alias.scope !58
  %2477 = bitcast i8* %2205 to i8**
  %2478 = load i8*, i8** %2477, align 8, !noalias !58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2476, i8* align 1 %2478, i64 %2473, i1 false) #12
  %2479 = load i64, i64* %2207, align 8, !noalias !58
  br label %2480

2480:                                             ; preds = %2475, %2461
  %2481 = phi i64 [ %2467, %2461 ], [ %2479, %2475 ]
  %2482 = and i64 %2481, -4294967295
  store i64 %2482, i64* %2207, align 8, !noalias !58
  br label %2483

2483:                                             ; preds = %2454, %2480, %2436
  %2484 = load i64, i64* %2203, align 8, !noalias !58
  %2485 = and i64 %2484, 1
  %2486 = icmp eq i64 %2485, 0
  br i1 %2486, label %2489, label %2487

2487:                                             ; preds = %2483
  %2488 = load i8*, i8** %2204, align 8, !noalias !58
  call void @_Z7sk_freePv(i8* %2488) #12
  br label %2489

2489:                                             ; preds = %2487, %2483
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2200) #12, !noalias !58
  %2490 = load i64, i64* %2207, align 8, !noalias !58
  %2491 = and i64 %2490, 1
  %2492 = icmp eq i64 %2491, 0
  br i1 %2492, label %2496, label %2493

2493:                                             ; preds = %2489
  %2494 = bitcast i8* %2205 to i8**
  %2495 = load i8*, i8** %2494, align 8, !noalias !58
  call void @_Z7sk_freePv(i8* %2495) #12
  br label %2496

2496:                                             ; preds = %2493, %2489
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2196) #12, !noalias !58
  br label %2503

2497:                                             ; preds = %2189
  %2498 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2498, i8 0, i64 16, i1 false) #12, !alias.scope !58
  %2499 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2500 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2501 = bitcast i8* %2500 to i64*
  %2502 = bitcast i8* %2499 to i8**
  store i8* %2498, i8** %2502, align 8, !alias.scope !58
  store i64 34359738368, i64* %2501, align 8, !alias.scope !58
  br label %2503

2503:                                             ; preds = %2496, %2497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2190)
  br label %2833

2504:                                             ; preds = %3
  %2505 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2505) #12, !noalias !61
  %2506 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %2507 = bitcast %"class.SkSL::Expression"* %2506 to %"class.SkSL::Expression"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2505, i8 -86, i64 32, i1 false)
  %2508 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2507, align 8, !noalias !61
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %10, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2508) #12
  %2509 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2510 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %2511 = getelementptr inbounds i32, i32* %2510, i64 2
  %2512 = getelementptr inbounds i32, i32* %2510, i64 4
  %2513 = bitcast i32* %2512 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2509, i8 -86, i64 16, i1 false)
  %2514 = load i64, i64* %2513, align 8, !noalias !61
  %2515 = lshr i64 %2514, 1
  %2516 = and i64 %2515, 2147483647
  %2517 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2518 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2519 = bitcast i8* %2518 to i64*
  %2520 = bitcast i8* %2517 to i8**
  store i8* %2509, i8** %2520, align 8, !alias.scope !61
  store i64 34359738368, i64* %2519, align 8, !alias.scope !61
  %2521 = trunc i64 %2516 to i32
  %2522 = icmp eq i32 %2521, 0
  br i1 %2522, label %2532, label %2523

2523:                                             ; preds = %2504
  %2524 = bitcast i8* %2517 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2524, i32 %2521, i32 1) #12
  %2525 = load i64, i64* %2519, align 8, !alias.scope !61
  %2526 = shl nuw nsw i64 %2516, 1
  %2527 = add i64 %2525, %2526
  %2528 = and i64 %2527, 4294967294
  %2529 = and i64 %2525, -4294967295
  %2530 = or i64 %2528, %2529
  store i64 %2530, i64* %2519, align 8, !alias.scope !61
  %2531 = load i64, i64* %2513, align 8, !noalias !61
  br label %2532

2532:                                             ; preds = %2504, %2523
  %2533 = phi i64 [ %2514, %2504 ], [ %2531, %2523 ]
  %2534 = and i64 %2533, 4294967294
  %2535 = icmp eq i64 %2534, 0
  br i1 %2535, label %2559, label %2536

2536:                                             ; preds = %2532
  %2537 = bitcast i32* %2511 to i8**
  %2538 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 16
  %2539 = bitcast i8* %2538 to i32**
  %2540 = bitcast i8* %2517 to i32**
  br label %2541

2541:                                             ; preds = %2536, %2541
  %2542 = phi i64 [ 0, %2536 ], [ %2554, %2541 ]
  %2543 = load i8*, i8** %2537, align 8, !noalias !61
  %2544 = shl i64 %2542, 32
  %2545 = ashr exact i64 %2544, 32
  %2546 = getelementptr inbounds i8, i8* %2543, i64 %2545
  %2547 = load i8, i8* %2546, align 1
  %2548 = sext i8 %2547 to i64
  %2549 = load i32*, i32** %2539, align 8, !noalias !61
  %2550 = getelementptr inbounds i32, i32* %2549, i64 %2548
  %2551 = load i32*, i32** %2540, align 8, !alias.scope !61
  %2552 = getelementptr inbounds i32, i32* %2551, i64 %2545
  %2553 = load i32, i32* %2550, align 4
  store i32 %2553, i32* %2552, align 4
  %2554 = add nuw nsw i64 %2542, 1
  %2555 = load i64, i64* %2513, align 8, !noalias !61
  %2556 = lshr i64 %2555, 1
  %2557 = and i64 %2556, 2147483647
  %2558 = icmp ult i64 %2554, %2557
  br i1 %2558, label %2541, label %2559

2559:                                             ; preds = %2541, %2532
  %2560 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 24
  %2561 = bitcast i8* %2560 to i64*
  %2562 = load i64, i64* %2561, align 8, !noalias !61
  %2563 = and i64 %2562, 1
  %2564 = icmp eq i64 %2563, 0
  br i1 %2564, label %2569, label %2565

2565:                                             ; preds = %2559
  %2566 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 16
  %2567 = bitcast i8* %2566 to i8**
  %2568 = load i8*, i8** %2567, align 8, !noalias !61
  call void @_Z7sk_freePv(i8* %2568) #12
  br label %2569

2569:                                             ; preds = %2559, %2565
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2505) #12, !noalias !61
  br label %2833

2570:                                             ; preds = %3
  %2571 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2571) #12, !noalias !64
  %2572 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %2573 = bitcast %"class.SkSL::Expression"* %2572 to %"class.SkSL::Expression"**
  %2574 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2573, align 8, !noalias !64
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %5, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2574) #12
  %2575 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 16
  %2576 = bitcast i8* %2575 to i32**
  %2577 = load i32*, i32** %2576, align 8, !noalias !64
  %2578 = load i32, i32* %2577, align 4
  %2579 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2580 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2579, align 8, !noalias !64
  %2581 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 24
  %2582 = bitcast i8* %2581 to i64*
  %2583 = load i64, i64* %2582, align 8, !noalias !64
  %2584 = and i64 %2583, 1
  %2585 = icmp eq i64 %2584, 0
  br i1 %2585, label %2588, label %2586

2586:                                             ; preds = %2570
  %2587 = bitcast i32* %2577 to i8*
  call void @_Z7sk_freePv(i8* %2587) #12
  br label %2588

2588:                                             ; preds = %2586, %2570
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2571) #12, !noalias !64
  %2589 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2589) #12, !noalias !64
  %2590 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 16
  %2591 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 24
  %2592 = bitcast i8* %2591 to i64*
  %2593 = bitcast i8* %2590 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2589, i8 -86, i64 16, i1 false)
  store i8* %2589, i8** %2593, align 8, !noalias !64
  store i64 34359738368, i64* %2592, align 8, !noalias !64
  %2594 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2594) #12, !noalias !64
  %2595 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 16
  %2596 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 24
  %2597 = bitcast i8* %2596 to i64*
  %2598 = bitcast i8* %2595 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2594, i8 -86, i64 16, i1 false)
  store i8* %2594, i8** %2598, align 8, !noalias !64
  store i64 34359738368, i64* %2597, align 8, !noalias !64
  %2599 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %2600 = bitcast %"class.skvm::Builder"** %2599 to i64*
  %2601 = load i64, i64* %2600, align 8, !noalias !64
  %2602 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %2603 = load i32, i32* %2602, align 8, !noalias !64
  %2604 = inttoptr i64 %2601 to %"class.skvm::Builder"*
  %2605 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %2604, %"class.skvm::Builder"* %2604, i32 %2603, %"class.skvm::Builder"* %2580, i32 %2578) #12
  %2606 = extractvalue { %"class.skvm::Builder"*, i32 } %2605, 0
  %2607 = extractvalue { %"class.skvm::Builder"*, i32 } %2605, 1
  store %"class.skvm::Builder"* %2606, %"class.skvm::Builder"** %2599, align 8, !noalias !64
  store i32 %2607, i32* %2602, align 8, !noalias !64
  %2608 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2608) #12, !noalias !64
  %2609 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %2610 = bitcast i32* %2609 to %"class.SkSL::Expression"**
  %2611 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2610, align 8, !noalias !64
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %8, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2611) #12
  %2612 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 16
  %2613 = load i64, i64* %2592, align 8, !noalias !64
  %2614 = and i64 %2613, -4294967295
  store i64 %2614, i64* %2592, align 8, !noalias !64
  %2615 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 24
  %2616 = bitcast i8* %2615 to i64*
  %2617 = load i64, i64* %2616, align 8, !noalias !64
  %2618 = lshr i64 %2617, 1
  %2619 = and i64 %2618, 2147483647
  %2620 = lshr i64 %2613, 33
  %2621 = icmp ult i64 %2620, %2619
  %2622 = mul nuw nsw i64 %2619, 3
  %2623 = icmp ule i64 %2620, %2622
  %2624 = and i64 %2613, 1
  %2625 = icmp eq i64 %2624, 0
  %2626 = or i1 %2625, %2623
  br i1 %2626, label %2630, label %2627

2627:                                             ; preds = %2588
  %2628 = and i64 %2613, 4294967296
  %2629 = icmp eq i64 %2628, 0
  br label %2630

2630:                                             ; preds = %2627, %2588
  %2631 = phi i1 [ false, %2588 ], [ %2629, %2627 ]
  %2632 = or i1 %2621, %2631
  %2633 = xor i1 %2632, true
  %2634 = icmp eq i64 %2619, %2620
  %2635 = or i1 %2634, %2633
  br i1 %2635, label %2660, label %2636

2636:                                             ; preds = %2630
  %2637 = shl nuw i64 %2619, 33
  %2638 = and i64 %2613, 4294967297
  %2639 = or i64 %2637, %2638
  store i64 %2639, i64* %2592, align 8
  %2640 = call i8* @_Z15sk_malloc_throwmm(i64 %2619, i64 4) #12
  %2641 = load i64, i64* %2592, align 8
  %2642 = shl i64 %2641, 1
  %2643 = and i64 %2642, 8589934588
  %2644 = icmp eq i64 %2643, 0
  br i1 %2644, label %2648, label %2645

2645:                                             ; preds = %2636
  %2646 = load i8*, i8** %2593, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2640, i8* align 1 %2646, i64 %2643, i1 false) #12
  %2647 = load i64, i64* %2592, align 8
  br label %2648

2648:                                             ; preds = %2645, %2636
  %2649 = phi i64 [ %2641, %2636 ], [ %2647, %2645 ]
  %2650 = and i64 %2649, 1
  %2651 = icmp eq i64 %2650, 0
  br i1 %2651, label %2655, label %2652

2652:                                             ; preds = %2648
  %2653 = load i8*, i8** %2593, align 8
  call void @_Z7sk_freePv(i8* %2653) #12
  %2654 = load i64, i64* %2592, align 8
  br label %2655

2655:                                             ; preds = %2652, %2648
  %2656 = phi i64 [ %2654, %2652 ], [ %2649, %2648 ]
  store i8* %2640, i8** %2593, align 8
  %2657 = and i64 %2656, -4294967298
  %2658 = or i64 %2657, 1
  store i64 %2658, i64* %2592, align 8
  %2659 = load i64, i64* %2616, align 8, !noalias !64
  br label %2660

2660:                                             ; preds = %2630, %2655
  %2661 = phi i64 [ %2614, %2630 ], [ %2658, %2655 ]
  %2662 = phi i64 [ %2617, %2630 ], [ %2659, %2655 ]
  %2663 = and i64 %2662, 4294967294
  %2664 = and i64 %2661, -4294967295
  %2665 = or i64 %2664, %2663
  store i64 %2665, i64* %2592, align 8, !noalias !64
  %2666 = shl i64 %2662, 1
  %2667 = and i64 %2666, 8589934588
  %2668 = icmp eq i64 %2667, 0
  br i1 %2668, label %2674, label %2669

2669:                                             ; preds = %2660
  %2670 = load i8*, i8** %2593, align 8, !noalias !64
  %2671 = bitcast i8* %2612 to i8**
  %2672 = load i8*, i8** %2671, align 8, !noalias !64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2670, i8* align 1 %2672, i64 %2667, i1 false) #12
  %2673 = load i64, i64* %2616, align 8, !noalias !64
  br label %2674

2674:                                             ; preds = %2669, %2660
  %2675 = phi i64 [ %2662, %2660 ], [ %2673, %2669 ]
  %2676 = and i64 %2675, -4294967295
  store i64 %2676, i64* %2616, align 8, !noalias !64
  %2677 = and i64 %2675, 1
  %2678 = icmp eq i64 %2677, 0
  br i1 %2678, label %2682, label %2679

2679:                                             ; preds = %2674
  %2680 = bitcast i8* %2612 to i8**
  %2681 = load i8*, i8** %2680, align 8, !noalias !64
  call void @_Z7sk_freePv(i8* %2681) #12
  br label %2682

2682:                                             ; preds = %2679, %2674
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2608) #12, !noalias !64
  store i64 %2601, i64* %2600, align 8
  store i32 %2603, i32* %2602, align 8
  %2683 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2580, i32 -1) #12
  %2684 = extractvalue { %"class.skvm::Builder"*, i32 } %2683, 0
  %2685 = extractvalue { %"class.skvm::Builder"*, i32 } %2683, 1
  %2686 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %2580, %"class.skvm::Builder"* %2684, i32 %2685, %"class.skvm::Builder"* %2580, i32 %2578) #12
  %2687 = extractvalue { %"class.skvm::Builder"*, i32 } %2686, 0
  %2688 = extractvalue { %"class.skvm::Builder"*, i32 } %2686, 1
  %2689 = load i64, i64* %2600, align 8, !noalias !64
  %2690 = load i32, i32* %2602, align 8, !noalias !64
  %2691 = inttoptr i64 %2689 to %"class.skvm::Builder"*
  %2692 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %2691, %"class.skvm::Builder"* %2691, i32 %2690, %"class.skvm::Builder"* %2687, i32 %2688) #12
  %2693 = extractvalue { %"class.skvm::Builder"*, i32 } %2692, 0
  %2694 = extractvalue { %"class.skvm::Builder"*, i32 } %2692, 1
  store %"class.skvm::Builder"* %2693, %"class.skvm::Builder"** %2599, align 8, !noalias !64
  store i32 %2694, i32* %2602, align 8, !noalias !64
  %2695 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2695) #12, !noalias !64
  %2696 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 1
  %2697 = bitcast %"class.SkSL::Type"** %2696 to %"class.SkSL::Expression"**
  %2698 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2697, align 8, !noalias !64
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %9, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %2698) #12
  %2699 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 16
  %2700 = load i64, i64* %2597, align 8, !noalias !64
  %2701 = and i64 %2700, -4294967295
  store i64 %2701, i64* %2597, align 8, !noalias !64
  %2702 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 24
  %2703 = bitcast i8* %2702 to i64*
  %2704 = load i64, i64* %2703, align 8, !noalias !64
  %2705 = lshr i64 %2704, 1
  %2706 = and i64 %2705, 2147483647
  %2707 = lshr i64 %2700, 33
  %2708 = icmp ult i64 %2707, %2706
  %2709 = mul nuw nsw i64 %2706, 3
  %2710 = icmp ule i64 %2707, %2709
  %2711 = and i64 %2700, 1
  %2712 = icmp eq i64 %2711, 0
  %2713 = or i1 %2712, %2710
  br i1 %2713, label %2717, label %2714

2714:                                             ; preds = %2682
  %2715 = and i64 %2700, 4294967296
  %2716 = icmp eq i64 %2715, 0
  br label %2717

2717:                                             ; preds = %2714, %2682
  %2718 = phi i1 [ false, %2682 ], [ %2716, %2714 ]
  %2719 = or i1 %2708, %2718
  %2720 = xor i1 %2719, true
  %2721 = icmp eq i64 %2706, %2707
  %2722 = or i1 %2721, %2720
  br i1 %2722, label %2747, label %2723

2723:                                             ; preds = %2717
  %2724 = shl nuw i64 %2706, 33
  %2725 = and i64 %2700, 4294967297
  %2726 = or i64 %2724, %2725
  store i64 %2726, i64* %2597, align 8
  %2727 = call i8* @_Z15sk_malloc_throwmm(i64 %2706, i64 4) #12
  %2728 = load i64, i64* %2597, align 8
  %2729 = shl i64 %2728, 1
  %2730 = and i64 %2729, 8589934588
  %2731 = icmp eq i64 %2730, 0
  br i1 %2731, label %2735, label %2732

2732:                                             ; preds = %2723
  %2733 = load i8*, i8** %2598, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2727, i8* align 1 %2733, i64 %2730, i1 false) #12
  %2734 = load i64, i64* %2597, align 8
  br label %2735

2735:                                             ; preds = %2732, %2723
  %2736 = phi i64 [ %2728, %2723 ], [ %2734, %2732 ]
  %2737 = and i64 %2736, 1
  %2738 = icmp eq i64 %2737, 0
  br i1 %2738, label %2742, label %2739

2739:                                             ; preds = %2735
  %2740 = load i8*, i8** %2598, align 8
  call void @_Z7sk_freePv(i8* %2740) #12
  %2741 = load i64, i64* %2597, align 8
  br label %2742

2742:                                             ; preds = %2739, %2735
  %2743 = phi i64 [ %2741, %2739 ], [ %2736, %2735 ]
  store i8* %2727, i8** %2598, align 8
  %2744 = and i64 %2743, -4294967298
  %2745 = or i64 %2744, 1
  store i64 %2745, i64* %2597, align 8
  %2746 = load i64, i64* %2703, align 8, !noalias !64
  br label %2747

2747:                                             ; preds = %2717, %2742
  %2748 = phi i64 [ %2701, %2717 ], [ %2745, %2742 ]
  %2749 = phi i64 [ %2704, %2717 ], [ %2746, %2742 ]
  %2750 = and i64 %2749, 4294967294
  %2751 = and i64 %2748, -4294967295
  %2752 = or i64 %2751, %2750
  store i64 %2752, i64* %2597, align 8, !noalias !64
  %2753 = shl i64 %2749, 1
  %2754 = and i64 %2753, 8589934588
  %2755 = icmp eq i64 %2754, 0
  br i1 %2755, label %2761, label %2756

2756:                                             ; preds = %2747
  %2757 = load i8*, i8** %2598, align 8, !noalias !64
  %2758 = bitcast i8* %2699 to i8**
  %2759 = load i8*, i8** %2758, align 8, !noalias !64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2757, i8* align 1 %2759, i64 %2754, i1 false) #12
  %2760 = load i64, i64* %2703, align 8, !noalias !64
  br label %2761

2761:                                             ; preds = %2756, %2747
  %2762 = phi i64 [ %2749, %2747 ], [ %2760, %2756 ]
  %2763 = and i64 %2762, -4294967295
  store i64 %2763, i64* %2703, align 8, !noalias !64
  %2764 = and i64 %2762, 1
  %2765 = icmp eq i64 %2764, 0
  br i1 %2765, label %2769, label %2766

2766:                                             ; preds = %2761
  %2767 = bitcast i8* %2699 to i8**
  %2768 = load i8*, i8** %2767, align 8, !noalias !64
  call void @_Z7sk_freePv(i8* %2768) #12
  br label %2769

2769:                                             ; preds = %2766, %2761
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2695) #12, !noalias !64
  store i64 %2689, i64* %2600, align 8
  store i32 %2690, i32* %2602, align 8
  %2770 = load i64, i64* %2592, align 8, !noalias !64
  %2771 = lshr i64 %2770, 1
  %2772 = and i64 %2771, 2147483647
  %2773 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2774 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2775 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2776 = bitcast i8* %2775 to i64*
  %2777 = bitcast i8* %2774 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %2773, i8 -86, i64 16, i1 false)
  store i8* %2773, i8** %2777, align 8, !alias.scope !64
  store i64 34359738368, i64* %2776, align 8, !alias.scope !64
  %2778 = trunc i64 %2772 to i32
  %2779 = icmp eq i32 %2778, 0
  br i1 %2779, label %2788, label %2780

2780:                                             ; preds = %2769
  %2781 = bitcast i8* %2774 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2781, i32 %2778, i32 1) #12
  %2782 = load i64, i64* %2776, align 8, !alias.scope !64
  %2783 = shl nuw nsw i64 %2772, 1
  %2784 = add i64 %2782, %2783
  %2785 = and i64 %2784, 4294967294
  %2786 = and i64 %2782, -4294967295
  %2787 = or i64 %2785, %2786
  store i64 %2787, i64* %2776, align 8, !alias.scope !64
  br label %2788

2788:                                             ; preds = %2769, %2780
  %2789 = icmp eq i64 %2772, 0
  br i1 %2789, label %2814, label %2790

2790:                                             ; preds = %2788
  %2791 = bitcast i8* %2590 to i32**
  %2792 = bitcast i8* %2595 to i32**
  %2793 = bitcast %"struct.skvm::I32"* %4 to i8*
  %2794 = getelementptr inbounds %"struct.skvm::I32", %"struct.skvm::I32"* %4, i64 0, i32 0
  %2795 = getelementptr inbounds %"struct.skvm::I32", %"struct.skvm::I32"* %4, i64 0, i32 1
  %2796 = bitcast i8* %2774 to i32**
  br label %2797

2797:                                             ; preds = %2797, %2790
  %2798 = phi i64 [ 0, %2790 ], [ %2812, %2797 ]
  %2799 = load i32*, i32** %2791, align 8, !noalias !64
  %2800 = shl i64 %2798, 32
  %2801 = ashr exact i64 %2800, 32
  %2802 = getelementptr inbounds i32, i32* %2799, i64 %2801
  %2803 = load i32, i32* %2802, align 4
  %2804 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2579, align 8, !noalias !64
  %2805 = load i32*, i32** %2792, align 8, !noalias !64
  %2806 = getelementptr inbounds i32, i32* %2805, i64 %2801
  %2807 = load i32, i32* %2806, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2793) #12, !noalias !64
  store %"class.skvm::Builder"* %2804, %"class.skvm::Builder"** %2794, align 8, !noalias !64
  store i32 %2807, i32* %2795, align 8, !noalias !64
  %2808 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %2580, %"class.skvm::Builder"* %2580, i32 %2578, %"class.skvm::Builder"* %2804, i32 %2803, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %4) #12
  %2809 = extractvalue { %"class.skvm::Builder"*, i32 } %2808, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2793) #12, !noalias !64
  %2810 = load i32*, i32** %2796, align 8, !alias.scope !64
  %2811 = getelementptr inbounds i32, i32* %2810, i64 %2801
  store i32 %2809, i32* %2811, align 4
  %2812 = add nuw nsw i64 %2798, 1
  %2813 = icmp eq i64 %2812, %2772
  br i1 %2813, label %2814, label %2797

2814:                                             ; preds = %2797, %2788
  %2815 = load i64, i64* %2597, align 8, !noalias !64
  %2816 = and i64 %2815, 1
  %2817 = icmp eq i64 %2816, 0
  br i1 %2817, label %2820, label %2818

2818:                                             ; preds = %2814
  %2819 = load i8*, i8** %2598, align 8, !noalias !64
  call void @_Z7sk_freePv(i8* %2819) #12
  br label %2820

2820:                                             ; preds = %2818, %2814
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2594) #12, !noalias !64
  %2821 = load i64, i64* %2592, align 8, !noalias !64
  %2822 = and i64 %2821, 1
  %2823 = icmp eq i64 %2822, 0
  br i1 %2823, label %2826, label %2824

2824:                                             ; preds = %2820
  %2825 = load i8*, i8** %2593, align 8, !noalias !64
  call void @_Z7sk_freePv(i8* %2825) #12
  br label %2826

2826:                                             ; preds = %2820, %2824
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2589) #12, !noalias !64
  br label %2833

2827:                                             ; preds = %3
  %2828 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2828, i8 0, i64 16, i1 false)
  %2829 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2830 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2831 = bitcast i8* %2830 to i64*
  %2832 = bitcast i8* %2829 to i8**
  store i8* %2828, i8** %2832, align 8
  store i64 34359738368, i64* %2831, align 8
  br label %2833

2833:                                             ; preds = %1105, %121, %88, %1098, %1091, %2827, %2826, %2569, %2503, %2188, %1784, %1783, %1487, %1120, %1067, %1000, %910, %822, %338, %229, %41, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator13writeFunctionERKNS_18FunctionDefinitionE6SkSpanIiES5_(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::FunctionDefinition"* nocapture readonly dereferenceable(88), i32*, i64, i32*, i64) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.SkSL::FunctionDefinition", %"class.SkSL::FunctionDefinition"* %1, i64 0, i32 1
  %8 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10
  %10 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %11 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %10, align 8
  %12 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %11, i32 0) #12
  %13 = extractvalue { %"class.skvm::Builder"*, i32 } %12, 0
  %14 = extractvalue { %"class.skvm::Builder"*, i32 } %12, 1
  %15 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10, i32 0, i32 1
  %16 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  %18 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %17, align 8
  %19 = icmp ult %"struct.SkSL::SkVMGenerator::Function"* %16, %18
  %20 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %18 to i64
  br i1 %19, label %21, label %29

21:                                               ; preds = %6
  %22 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %16, i64 0, i32 0, i32 0
  store i32* %4, i32** %22, align 8
  %23 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %16, i64 0, i32 0, i32 1
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %16, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %13, %"class.skvm::Builder"** %24, align 8
  %25 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %16, i64 0, i32 1, i32 1
  store i32 %14, i32* %25, align 8
  %26 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %16, i64 1
  %27 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %26 to i64
  %28 = bitcast %"struct.SkSL::SkVMGenerator::Function"** %15 to i64*
  store i64 %27, i64* %28, align 8
  br label %89

29:                                               ; preds = %6
  %30 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %16 to i64
  %31 = bitcast %"struct.SkSL::SkVMGenerator::Function"** %15 to i64*
  %32 = bitcast %"class.std::__1::vector.156"* %9 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 5
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 576460752303423487
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.156"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #13
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %"struct.SkSL::SkVMGenerator::Function"** %17 to i64*
  %42 = sub i64 %20, %33
  %43 = ashr exact i64 %42, 5
  %44 = icmp ult i64 %43, 288230376151711743
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 4
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 576460752303423487
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #13
  unreachable

53:                                               ; preds = %50, %40
  %54 = phi i64 [ %48, %50 ], [ 576460752303423487, %40 ]
  %55 = shl i64 %54, 5
  %56 = tail call i8* @_Znwm(i64 %55) #14
  %57 = bitcast i8* %56 to %"struct.SkSL::SkVMGenerator::Function"*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi %"struct.SkSL::SkVMGenerator::Function"* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %60, i64 %35
  %62 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %60, i64 %59
  %63 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %62 to i64
  %64 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %61, i64 0, i32 0, i32 0
  store i32* %4, i32** %64, align 8
  %65 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %60, i64 %35, i32 0, i32 1
  store i64 %5, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %60, i64 %35, i32 1, i32 0
  store %"class.skvm::Builder"* %13, %"class.skvm::Builder"** %66, align 8
  %67 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %60, i64 %35, i32 1, i32 1
  store i32 %14, i32* %67, align 8
  %68 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %61, i64 1
  %69 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %68 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %9, i64 0, i32 0, i32 0
  %71 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %70, align 8
  %72 = load i64, i64* %31, align 8
  %73 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %71 to i64
  %74 = sub i64 %72, %73
  %75 = ashr exact i64 %74, 5
  %76 = sub nsw i64 0, %75
  %77 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %61, i64 %76
  %78 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %77 to i64
  %79 = icmp sgt i64 %74, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %58
  %81 = bitcast %"struct.SkSL::SkVMGenerator::Function"* %77 to i8*
  %82 = bitcast %"struct.SkSL::SkVMGenerator::Function"* %71 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 %74, i1 false) #12
  %83 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %70, align 8
  br label %84

84:                                               ; preds = %80, %58
  %85 = phi %"struct.SkSL::SkVMGenerator::Function"* [ %71, %58 ], [ %83, %80 ]
  store i64 %78, i64* %32, align 8
  store i64 %69, i64* %31, align 8
  store i64 %63, i64* %41, align 8
  %86 = icmp eq %"struct.SkSL::SkVMGenerator::Function"* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %84
  %88 = bitcast %"struct.SkSL::SkVMGenerator::Function"* %85 to i8*
  tail call void @_ZdlPv(i8* %88) #14
  br label %89

89:                                               ; preds = %21, %84, %87
  %90 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %8, i64 0, i32 3, i32 0, i32 0
  %91 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %90, align 8
  %92 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %8, i64 0, i32 3, i32 0, i32 1
  %93 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %92, align 8
  %94 = icmp eq %"class.SkSL::Variable"** %91, %93
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6, i32 0, i32 0
  br label %105

97:                                               ; preds = %129, %89
  %98 = getelementptr inbounds %"class.SkSL::FunctionDefinition", %"class.SkSL::FunctionDefinition"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %99 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %98, align 8
  tail call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %99)
  %100 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %90, align 8
  %101 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %92, align 8
  %102 = icmp eq %"class.SkSL::Variable"** %100, %101
  br i1 %102, label %152, label %103

103:                                              ; preds = %97
  %104 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6, i32 0, i32 0
  br label %155

105:                                              ; preds = %95, %129
  %106 = phi i64 [ 0, %95 ], [ %130, %129 ]
  %107 = phi %"class.SkSL::Variable"** [ %91, %95 ], [ %131, %129 ]
  %108 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %107, align 8
  %109 = tail call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Variable"* dereferenceable(64) %108)
  %110 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %108, i64 0, i32 0, i32 2
  %111 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %110, align 8
  %112 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %111)
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %129, label %114

114:                                              ; preds = %105
  %115 = and i64 %112, 1
  %116 = icmp eq i64 %112, 1
  br i1 %116, label %119, label %117

117:                                              ; preds = %114
  %118 = sub i64 %112, %115
  br label %133

119:                                              ; preds = %133, %114
  %120 = phi i64 [ 0, %114 ], [ %149, %133 ]
  %121 = icmp eq i64 %115, 0
  br i1 %121, label %129, label %122

122:                                              ; preds = %119
  %123 = add i64 %120, %106
  %124 = getelementptr inbounds i32, i32* %2, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = add i64 %120, %109
  %127 = load i32*, i32** %96, align 8
  %128 = getelementptr inbounds i32, i32* %127, i64 %126
  store i32 %125, i32* %128, align 4
  br label %129

129:                                              ; preds = %122, %119, %105
  %130 = add i64 %112, %106
  %131 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %107, i64 1
  %132 = icmp eq %"class.SkSL::Variable"** %131, %93
  br i1 %132, label %97, label %105

133:                                              ; preds = %133, %117
  %134 = phi i64 [ 0, %117 ], [ %149, %133 ]
  %135 = phi i64 [ %118, %117 ], [ %150, %133 ]
  %136 = add i64 %134, %106
  %137 = getelementptr inbounds i32, i32* %2, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = add i64 %134, %109
  %140 = load i32*, i32** %96, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 %139
  store i32 %138, i32* %141, align 4
  %142 = or i64 %134, 1
  %143 = add i64 %142, %106
  %144 = getelementptr inbounds i32, i32* %2, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = add i64 %142, %109
  %147 = load i32*, i32** %96, align 8
  %148 = getelementptr inbounds i32, i32* %147, i64 %146
  store i32 %145, i32* %148, align 4
  %149 = add nuw i64 %134, 2
  %150 = add i64 %135, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %119, label %133

152:                                              ; preds = %205, %97
  %153 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %15, align 8
  %154 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %153, i64 -1
  store %"struct.SkSL::SkVMGenerator::Function"* %154, %"struct.SkSL::SkVMGenerator::Function"** %15, align 8
  ret void

155:                                              ; preds = %103, %205
  %156 = phi i64 [ 0, %103 ], [ %206, %205 ]
  %157 = phi %"class.SkSL::Variable"** [ %100, %103 ], [ %207, %205 ]
  %158 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %157, align 8
  %159 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %158, i64 0, i32 0, i32 2
  %160 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %159, align 8
  %161 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %160)
  %162 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %158, i64 0, i32 2
  %163 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %162, align 8
  %164 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %163, i64 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = and i32 %165, 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %205, label %168

168:                                              ; preds = %155
  %169 = tail call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Variable"* dereferenceable(64) %158)
  %170 = icmp eq i64 %161, 0
  br i1 %170, label %205, label %171

171:                                              ; preds = %168
  %172 = and i64 %161, 1
  %173 = icmp eq i64 %161, 1
  br i1 %173, label %195, label %174

174:                                              ; preds = %171
  %175 = sub i64 %161, %172
  br label %176

176:                                              ; preds = %176, %174
  %177 = phi i64 [ 0, %174 ], [ %192, %176 ]
  %178 = phi i64 [ %175, %174 ], [ %193, %176 ]
  %179 = add i64 %177, %169
  %180 = load i32*, i32** %104, align 8
  %181 = getelementptr inbounds i32, i32* %180, i64 %179
  %182 = load i32, i32* %181, align 4
  %183 = add i64 %177, %156
  %184 = getelementptr inbounds i32, i32* %2, i64 %183
  store i32 %182, i32* %184, align 4
  %185 = or i64 %177, 1
  %186 = add i64 %185, %169
  %187 = load i32*, i32** %104, align 8
  %188 = getelementptr inbounds i32, i32* %187, i64 %186
  %189 = load i32, i32* %188, align 4
  %190 = add i64 %185, %156
  %191 = getelementptr inbounds i32, i32* %2, i64 %190
  store i32 %189, i32* %191, align 4
  %192 = add nuw i64 %177, 2
  %193 = add i64 %178, -2
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %176

195:                                              ; preds = %176, %171
  %196 = phi i64 [ 0, %171 ], [ %192, %176 ]
  %197 = icmp eq i64 %172, 0
  br i1 %197, label %205, label %198

198:                                              ; preds = %195
  %199 = add i64 %196, %169
  %200 = load i32*, i32** %104, align 8
  %201 = getelementptr inbounds i32, i32* %200, i64 %199
  %202 = load i32, i32* %201, align 4
  %203 = add i64 %196, %156
  %204 = getelementptr inbounds i32, i32* %2, i64 %203
  store i32 %202, i32* %204, align 4
  br label %205

205:                                              ; preds = %198, %195, %168, %155
  %206 = add i64 %161, %156
  %207 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %157, i64 1
  %208 = icmp eq %"class.SkSL::Variable"** %207, %101
  br i1 %208, label %152, label %155
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::Statement"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %4 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %48 [
    i32 16, label %6
    i32 17, label %25
    i32 18, label %26
    i32 21, label %27
    i32 22, label %40
    i32 23, label %42
    i32 26, label %44
    i32 29, label %46
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %8 = bitcast %"class.SkSL::Statement"* %7 to %"class.std::__1::unique_ptr.194"**
  %9 = load %"class.std::__1::unique_ptr.194"*, %"class.std::__1::unique_ptr.194"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.194"* %9, null
  br i1 %10, label %48, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %13 = bitcast i32* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, 1
  %16 = and i64 %15, 2147483647
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %9, i64 %16
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %48, label %19

19:                                               ; preds = %11, %19
  %20 = phi %"class.std::__1::unique_ptr.194"* [ %23, %19 ], [ %9, %11 ]
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %21, align 8
  tail call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %22) #12
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %20, i64 1
  %24 = icmp eq %"class.std::__1::unique_ptr.194"* %23, %17
  br i1 %24, label %48, label %19

25:                                               ; preds = %2
  tail call void @_ZN4SkSL13SkVMGenerator19writeBreakStatementEv(%"class.SkSL::SkVMGenerator"* %0)
  br label %48

26:                                               ; preds = %2
  tail call void @_ZN4SkSL13SkVMGenerator22writeContinueStatementEv(%"class.SkSL::SkVMGenerator"* %0)
  br label %48

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %29 = bitcast %"class.SkSL::Statement"* %28 to %"class.SkSL::Expression"**
  %30 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %29, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %3, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* dereferenceable(24) %30)
  %31 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %38 = bitcast i8* %37 to i8**
  %39 = load i8*, i8** %38, align 8
  call void @_Z7sk_freePv(i8* %39) #12
  br label %48

40:                                               ; preds = %2
  %41 = bitcast %"class.SkSL::Statement"* %1 to %"class.SkSL::ForStatement"*
  tail call void @_ZN4SkSL13SkVMGenerator17writeForStatementERKNS_12ForStatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::ForStatement"* dereferenceable(64) %41)
  br label %48

42:                                               ; preds = %2
  %43 = bitcast %"class.SkSL::Statement"* %1 to %"class.SkSL::IfStatement"*
  tail call void @_ZN4SkSL13SkVMGenerator16writeIfStatementERKNS_11IfStatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::IfStatement"* dereferenceable(48) %43)
  br label %48

44:                                               ; preds = %2
  %45 = bitcast %"class.SkSL::Statement"* %1 to %"class.SkSL::ReturnStatement"*
  tail call void @_ZN4SkSL13SkVMGenerator20writeReturnStatementERKNS_15ReturnStatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::ReturnStatement"* dereferenceable(24) %45)
  br label %48

46:                                               ; preds = %2
  %47 = bitcast %"class.SkSL::Statement"* %1 to %"class.SkSL::VarDeclaration"*
  tail call void @_ZN4SkSL13SkVMGenerator19writeVarDeclarationERKNS_14VarDeclarationE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::VarDeclaration"* dereferenceable(48) %47)
  br label %48

48:                                               ; preds = %19, %6, %11, %36, %27, %2, %46, %44, %42, %40, %26, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4SkSL13SkVMGenerator15fieldSlotOffsetERKNS_11FieldAccessE(%"class.SkSL::SkVMGenerator"* nocapture readnone, %"class.SkSL::FieldAccess"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  br label %10

8:                                                ; preds = %10, %2
  %9 = phi i64 [ 0, %2 ], [ %24, %10 ]
  ret i64 %9

10:                                               ; preds = %6, %10
  %11 = phi i64 [ 0, %6 ], [ %25, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %24, %10 ]
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %7, align 8
  %14 = bitcast %"class.SkSL::Expression"* %13 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %15 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %15, i64 3
  %17 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %16, align 8
  %18 = tail call dereferenceable(184) %"class.SkSL::Type"* %17(%"class.SkSL::Expression"* %13) #12
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %18, i64 0, i32 10, i32 0, i32 0
  %20 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %19, align 8
  %21 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %20, i64 %11, i32 2
  %22 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %21, align 8
  %23 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %22)
  %24 = add i64 %23, %12
  %25 = add nuw nsw i64 %11, 1
  %26 = load i32, i32* %3, align 8
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %10, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4SkSL13SkVMGenerator15indexSlotOffsetERKNS_15IndexExpressionE(%"class.SkSL::SkVMGenerator"*, %"struct.SkSL::IndexExpression"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %4 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %6 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %5, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %3, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* dereferenceable(24) %6)
  %7 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %8 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %7, align 8
  %9 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %10 = bitcast i8* %9 to i32**
  %11 = load i32*, i32** %10, align 8
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.skvm::Builder", %"class.skvm::Builder"* %8, i64 0, i32 1, i32 0, i32 0
  %15 = load %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"** %14, align 8
  %16 = getelementptr inbounds %"struct.skvm::Instruction", %"struct.skvm::Instruction"* %15, i64 %13, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 16
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"struct.skvm::Instruction", %"struct.skvm::Instruction"* %15, i64 %13, i32 5
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %2, %19
  %23 = phi i32 [ %21, %19 ], [ -1, %2 ]
  %24 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %25 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %24, align 8
  %26 = bitcast %"class.SkSL::Expression"* %25 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %27 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %27, i64 3
  %29 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %28, align 8
  %30 = call dereferenceable(184) %"class.SkSL::Type"* %29(%"class.SkSL::Expression"* %25) #12
  %31 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %30, i64 0, i32 8
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, -1
  %34 = icmp slt i32 %33, %23
  %35 = select i1 %34, i32 %33, i32 %23
  %36 = icmp sgt i32 %35, 0
  %37 = select i1 %36, i32 %35, i32 0
  %38 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %1, i64 0, i32 0, i32 1
  %39 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %38, align 8
  %40 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %39)
  %41 = zext i32 %37 to i64
  %42 = mul i64 %40, %41
  %43 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %22
  %49 = bitcast i8* %9 to i8**
  %50 = load i8*, i8** %49, align 8
  call void @_Z7sk_freePv(i8* %50) #12
  br label %51

51:                                               ; preds = %22, %48
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #12
  ret i64 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator10writeBlockERKNS_5BlockE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::Block"* nocapture readonly dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Block", %"class.SkSL::Block"* %1, i64 0, i32 1, i32 0, i32 0, i64 16
  %4 = bitcast i8* %3 to %"class.std::__1::unique_ptr.194"**
  %5 = load %"class.std::__1::unique_ptr.194"*, %"class.std::__1::unique_ptr.194"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr.194"* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.SkSL::Block", %"class.SkSL::Block"* %1, i64 0, i32 1, i32 0, i32 0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %10, 1
  %12 = and i64 %11, 2147483647
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %5, i64 %12
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %16, %2, %7
  ret void

16:                                               ; preds = %7, %16
  %17 = phi %"class.std::__1::unique_ptr.194"* [ %20, %16 ], [ %5, %7 ]
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %18, align 8
  tail call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %19)
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194"* %17, i64 1
  %21 = icmp eq %"class.std::__1::unique_ptr.194"* %20, %13
  br i1 %21, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator19writeBreakStatementEv(%"class.SkSL::SkVMGenerator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 0
  %3 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2, align 8
  %4 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 0
  %7 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %6, align 8
  %8 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %3, %"class.skvm::Builder"* %3, i32 %5, %"class.skvm::Builder"* %7, i32 %9) #12
  %11 = extractvalue { %"class.skvm::Builder"*, i32 } %10, 0
  %12 = extractvalue { %"class.skvm::Builder"*, i32 } %10, 1
  %13 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10, i32 0, i32 1
  %14 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %13, align 8
  %15 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %14, i64 -1, i32 1, i32 0
  %16 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  %17 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %14, i64 -1, i32 1, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %16, i32 -1) #12
  %20 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 0
  %21 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 1
  %22 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %16, %"class.skvm::Builder"* %20, i32 %21, %"class.skvm::Builder"* %16, i32 %18) #12
  %23 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 0
  %24 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 1
  %25 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %11, %"class.skvm::Builder"* %11, i32 %12, %"class.skvm::Builder"* %23, i32 %24) #12
  %26 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 0
  %27 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 1
  %28 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %26, i32 -1) #12
  %29 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 0
  %30 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 1
  %31 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %26, %"class.skvm::Builder"* %29, i32 %30, %"class.skvm::Builder"* %26, i32 %27) #12
  %32 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 0
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 1
  %34 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %6, align 8
  %35 = load i32, i32* %8, align 8
  %36 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %34, %"class.skvm::Builder"* %34, i32 %35, %"class.skvm::Builder"* %32, i32 %33) #12
  %37 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 0
  %38 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 1
  store %"class.skvm::Builder"* %37, %"class.skvm::Builder"** %6, align 8
  store i32 %38, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator22writeContinueStatementEv(%"class.SkSL::SkVMGenerator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 0
  %3 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2, align 8
  %4 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 0
  %7 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %6, align 8
  %8 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %3, %"class.skvm::Builder"* %3, i32 %5, %"class.skvm::Builder"* %7, i32 %9) #12
  %11 = extractvalue { %"class.skvm::Builder"*, i32 } %10, 0
  %12 = extractvalue { %"class.skvm::Builder"*, i32 } %10, 1
  %13 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10, i32 0, i32 1
  %14 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %13, align 8
  %15 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %14, i64 -1, i32 1, i32 0
  %16 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  %17 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %14, i64 -1, i32 1, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %16, i32 -1) #12
  %20 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 0
  %21 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 1
  %22 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %16, %"class.skvm::Builder"* %20, i32 %21, %"class.skvm::Builder"* %16, i32 %18) #12
  %23 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 0
  %24 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 1
  %25 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %11, %"class.skvm::Builder"* %11, i32 %12, %"class.skvm::Builder"* %23, i32 %24) #12
  %26 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 0
  %27 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 1
  %28 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %26, i32 -1) #12
  %29 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 0
  %30 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 1
  %31 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %26, %"class.skvm::Builder"* %29, i32 %30, %"class.skvm::Builder"* %26, i32 %27) #12
  %32 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 0
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 1
  %34 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %6, align 8
  %35 = load i32, i32* %8, align 8
  %36 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %34, %"class.skvm::Builder"* %34, i32 %35, %"class.skvm::Builder"* %32, i32 %33) #12
  %37 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 0
  %38 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 1
  store %"class.skvm::Builder"* %37, %"class.skvm::Builder"** %6, align 8
  store i32 %38, i32* %8, align 8
  %39 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 0
  %40 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %39, align 8
  %41 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %40, %"class.skvm::Builder"* %40, i32 %42, %"class.skvm::Builder"* %26, i32 %27) #12
  %44 = extractvalue { %"class.skvm::Builder"*, i32 } %43, 0
  %45 = extractvalue { %"class.skvm::Builder"*, i32 } %43, 1
  store %"class.skvm::Builder"* %44, %"class.skvm::Builder"** %39, align 8
  store i32 %45, i32* %41, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator17writeForStatementERKNS_12ForStatementE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::ForStatement"* nocapture readonly dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::Analysis::UnrollableLoopInfo", align 8
  %4 = bitcast %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 bitcast ({ %"class.SkSL::Variable"*, double, double, i32, [4 x i8] }* @__const._ZN4SkSL13SkVMGenerator17writeForStatementERKNS_12ForStatementE.loop to i8*), i64 32, i1 false)
  %5 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %10 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %9, align 8
  %11 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 4, i32 0, i32 0, i32 0
  %12 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 5, i32 0, i32 0, i32 0
  %14 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %13, align 8
  %15 = call zeroext i1 @_ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE(i32 %6, %"class.SkSL::Statement"* %8, %"class.SkSL::Expression"* %10, %"class.SkSL::Expression"* %12, %"class.SkSL::Statement"* %14, %"struct.SkSL::Analysis::UnrollableLoopInfo"* nonnull %3, %"class.SkSL::ErrorReporter"* null) #12
  %16 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3, i64 0, i32 0
  %17 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %16, align 8
  %18 = call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Variable"* dereferenceable(64) %17)
  %19 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 0
  %20 = bitcast %"class.skvm::Builder"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 0
  %25 = bitcast %"class.skvm::Builder"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 9, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3, i64 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %39

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3, i64 0, i32 1
  %34 = load double, double* %33, align 8
  %35 = bitcast %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3 to %"class.SkSL::Symbol"**
  %36 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %37 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6, i32 0, i32 0
  %38 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %3, i64 0, i32 2
  br label %40

39:                                               ; preds = %40, %2
  store i64 %21, i64* %20, align 8
  store i32 %23, i32* %22, align 8
  store i64 %26, i64* %25, align 8
  store i32 %28, i32* %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #12
  ret void

40:                                               ; preds = %32, %40
  %41 = phi double [ %34, %32 ], [ %72, %40 ]
  %42 = phi i32 [ 0, %32 ], [ %73, %40 ]
  %43 = load %"class.SkSL::Symbol"*, %"class.SkSL::Symbol"** %35, align 8
  %44 = getelementptr inbounds %"class.SkSL::Symbol", %"class.SkSL::Symbol"* %43, i64 0, i32 2
  %45 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %44, align 8
  %46 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %45, i64 0, i32 4
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %47, -1
  %49 = icmp ult i32 %48, 2
  %50 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %36, align 8
  %51 = fptrunc double %41 to float
  %52 = bitcast float %51 to i32
  %53 = fptosi double %41 to i32
  %54 = select i1 %49, i32 %53, i32 %52
  %55 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %50, i32 %54) #12
  %56 = extractvalue { %"class.skvm::Builder"*, i32 } %55, 1
  %57 = load i32*, i32** %37, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 %18
  store i32 %56, i32* %58, align 4
  %59 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %36, align 8
  %60 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %59, i32 0) #12
  %61 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 0
  %62 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 1
  store %"class.skvm::Builder"* %61, %"class.skvm::Builder"** %24, align 8
  store i32 %62, i32* %27, align 8
  %63 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %13, align 8
  call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %63)
  %64 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %24, align 8
  %65 = load i32, i32* %27, align 8
  %66 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %19, align 8
  %67 = load i32, i32* %22, align 8
  %68 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %66, %"class.skvm::Builder"* %66, i32 %67, %"class.skvm::Builder"* %64, i32 %65) #12
  %69 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 0
  %70 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 1
  store %"class.skvm::Builder"* %69, %"class.skvm::Builder"** %19, align 8
  store i32 %70, i32* %22, align 8
  %71 = load double, double* %38, align 8
  %72 = fadd double %41, %71
  %73 = add nuw nsw i32 %42, 1
  %74 = load i32, i32* %29, align 8
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %40, label %39
}

declare zeroext i1 @_ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE(i32, %"class.SkSL::Statement"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"struct.SkSL::Analysis::UnrollableLoopInfo"*, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator16writeIfStatementERKNS_11IfStatementE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::IfStatement"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %4 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %6 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %5, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %3, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* dereferenceable(24) %6)
  %7 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %8 = bitcast i8* %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %12 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 0
  %14 = bitcast %"class.skvm::Builder"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = inttoptr i64 %15 to %"class.skvm::Builder"*
  %19 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %18, %"class.skvm::Builder"* %18, i32 %17, %"class.skvm::Builder"* %12, i32 %10) #12
  %20 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 0
  %21 = extractvalue { %"class.skvm::Builder"*, i32 } %19, 1
  store %"class.skvm::Builder"* %20, %"class.skvm::Builder"** %13, align 8
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %22, align 8
  call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %23)
  store i64 %15, i64* %14, align 8
  store i32 %17, i32* %16, align 8
  %24 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %25 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %24, align 8
  %26 = icmp eq %"class.SkSL::Statement"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %2
  %28 = load i32*, i32** %8, align 8
  %29 = load i32, i32* %28, align 4
  %30 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %11, align 8
  %31 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %30, i32 -1) #12
  %32 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 0
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 1
  %34 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %30, %"class.skvm::Builder"* %32, i32 %33, %"class.skvm::Builder"* %30, i32 %29) #12
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 0
  %36 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 1
  %37 = load i64, i64* %14, align 8
  %38 = load i32, i32* %16, align 8
  %39 = inttoptr i64 %37 to %"class.skvm::Builder"*
  %40 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %39, %"class.skvm::Builder"* %39, i32 %38, %"class.skvm::Builder"* %35, i32 %36) #12
  %41 = extractvalue { %"class.skvm::Builder"*, i32 } %40, 0
  %42 = extractvalue { %"class.skvm::Builder"*, i32 } %40, 1
  store %"class.skvm::Builder"* %41, %"class.skvm::Builder"** %13, align 8
  store i32 %42, i32* %16, align 8
  %43 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %24, align 8
  call void @_ZN4SkSL13SkVMGenerator14writeStatementERKNS_9StatementE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Statement"* dereferenceable(16) %43)
  store i64 %37, i64* %14, align 8
  store i32 %38, i32* %16, align 8
  br label %44

44:                                               ; preds = %2, %27
  %45 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast i8* %7 to i8**
  %52 = load i8*, i8** %51, align 8
  call void @_Z7sk_freePv(i8* %52) #12
  br label %53

53:                                               ; preds = %44, %50
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator20writeReturnStatementERKNS_15ReturnStatementE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::ReturnStatement"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %4 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %5 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 0
  %6 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 7, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 0
  %10 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %9, align 8
  %11 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 8, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %6, %"class.skvm::Builder"* %6, i32 %8, %"class.skvm::Builder"* %10, i32 %12) #12
  %14 = extractvalue { %"class.skvm::Builder"*, i32 } %13, 0
  %15 = extractvalue { %"class.skvm::Builder"*, i32 } %13, 1
  %16 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 10, i32 0, i32 1
  %17 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %16, align 8
  %18 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %17, i64 -1, i32 1, i32 0
  %19 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %18, align 8
  %20 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %17, i64 -1, i32 1, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %19, i32 -1) #12
  %23 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 0
  %24 = extractvalue { %"class.skvm::Builder"*, i32 } %22, 1
  %25 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %19, %"class.skvm::Builder"* %23, i32 %24, %"class.skvm::Builder"* %19, i32 %21) #12
  %26 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 0
  %27 = extractvalue { %"class.skvm::Builder"*, i32 } %25, 1
  %28 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %14, %"class.skvm::Builder"* %14, i32 %15, %"class.skvm::Builder"* %26, i32 %27) #12
  %29 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 0
  %30 = extractvalue { %"class.skvm::Builder"*, i32 } %28, 1
  %31 = getelementptr inbounds %"class.SkSL::ReturnStatement", %"class.SkSL::ReturnStatement"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %32 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %31, align 8
  %33 = icmp eq %"class.SkSL::Expression"* %32, null
  br i1 %33, label %76, label %34

34:                                               ; preds = %2
  %35 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %4, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* nonnull dereferenceable(24) %32)
  %36 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %16, align 8
  %37 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %36, i64 -1, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8
  %39 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %36, i64 -1, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 16
  %45 = bitcast i8* %44 to i32**
  %46 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %47 = bitcast { %"class.skvm::Builder"*, i32 }* %3 to i8*
  %48 = bitcast { %"class.skvm::Builder"*, i32 }* %3 to %"struct.skvm::I32"*
  %49 = bitcast { %"class.skvm::Builder"*, i32 }* %3 to i64*
  %50 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %3, i64 0, i32 1
  br label %62

51:                                               ; preds = %62, %34
  %52 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 24
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 16
  %59 = bitcast i8* %58 to i8**
  %60 = load i8*, i8** %59, align 8
  call void @_Z7sk_freePv(i8* %60) #12
  br label %61

61:                                               ; preds = %51, %57
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #12
  br label %76

62:                                               ; preds = %43, %62
  %63 = phi i64 [ 0, %43 ], [ %73, %62 ]
  %64 = phi i32* [ %38, %43 ], [ %74, %62 ]
  %65 = load i32*, i32** %45, align 8
  %66 = getelementptr inbounds i32, i32* %65, i64 %63
  %67 = load i32, i32* %66, align 4
  %68 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %46, align 8
  %69 = load i32, i32* %64, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #12
  %70 = ptrtoint %"class.skvm::Builder"* %68 to i64
  store i64 %70, i64* %49, align 8
  store i32 %69, i32* %50, align 8
  %71 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %29, %"class.skvm::Builder"* %29, i32 %30, %"class.skvm::Builder"* %68, i32 %67, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %48) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #12
  %72 = extractvalue { %"class.skvm::Builder"*, i32 } %71, 1
  store i32 %72, i32* %64, align 4
  %73 = add nuw nsw i64 %63, 1
  %74 = getelementptr inbounds i32, i32* %64, i64 1
  %75 = icmp eq i32* %74, %41
  br i1 %75, label %51, label %62

76:                                               ; preds = %2, %61
  %77 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %16, align 8
  %78 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %77, i64 -1, i32 1, i32 0
  %79 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %78, align 8
  %80 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %77, i64 -1, i32 1, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %79, %"class.skvm::Builder"* %79, i32 %81, %"class.skvm::Builder"* %29, i32 %30) #12
  %83 = extractvalue { %"class.skvm::Builder"*, i32 } %82, 0
  %84 = extractvalue { %"class.skvm::Builder"*, i32 } %82, 1
  store %"class.skvm::Builder"* %83, %"class.skvm::Builder"** %78, align 8
  store i32 %84, i32* %80, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13SkVMGenerator19writeVarDeclarationERKNS_14VarDeclarationE(%"class.SkSL::SkVMGenerator"*, %"class.SkSL::VarDeclaration"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %4 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %1, i64 0, i32 1
  %5 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  %6 = tail call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Variable"* dereferenceable(64) %5)
  %7 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  %8 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %7, i64 0, i32 0, i32 2
  %9 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %8, align 8
  %10 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %9)
  %11 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %1, i64 0, i32 4, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %2
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %3, %"class.SkSL::SkVMGenerator"* %0, %"class.SkSL::Expression"* nonnull dereferenceable(24) %13)
  %16 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8
  br label %24

19:                                               ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 16, i1 false)
  %20 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %21 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %22 = bitcast i8* %21 to i64*
  %23 = bitcast i8* %20 to i8**
  store i8* %11, i8** %23, align 8
  store i64 34359738368, i64* %22, align 8
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i64* [ %22, %19 ], [ %17, %15 ]
  %26 = phi i64 [ 34359738368, %19 ], [ %18, %15 ]
  %27 = icmp eq i64 %10, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %30 = bitcast i8* %29 to i32**
  %31 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 1
  %32 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %0, i64 0, i32 6, i32 0, i32 0
  br label %42

33:                                               ; preds = %57, %24
  %34 = phi i64 [ %26, %24 ], [ %63, %57 ]
  %35 = and i64 %34, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %39 = bitcast i8* %38 to i8**
  %40 = load i8*, i8** %39, align 8
  call void @_Z7sk_freePv(i8* %40) #12
  br label %41

41:                                               ; preds = %33, %37
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

42:                                               ; preds = %57, %28
  %43 = phi i64 [ %26, %28 ], [ %63, %57 ]
  %44 = phi i64 [ 0, %28 ], [ %62, %57 ]
  %45 = and i64 %43, 4294967294
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %42
  %48 = load i32*, i32** %30, align 8
  %49 = shl i64 %44, 32
  %50 = ashr exact i64 %49, 32
  %51 = getelementptr inbounds i32, i32* %48, i64 %50
  %52 = load i32, i32* %51, align 4
  br label %57

53:                                               ; preds = %42
  %54 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %31, align 8
  %55 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %54, i32 0) #12
  %56 = extractvalue { %"class.skvm::Builder"*, i32 } %55, 1
  br label %57

57:                                               ; preds = %53, %47
  %58 = phi i32 [ %52, %47 ], [ %56, %53 ]
  %59 = add i64 %44, %6
  %60 = load i32*, i32** %32, align 8
  %61 = getelementptr inbounds i32, i32* %60, i64 %59
  store i32 %58, i32* %61, align 4
  %62 = add nuw i64 %44, 1
  %63 = load i64, i64* %25, align 8
  %64 = icmp eq i64 %62, %10
  br i1 %64, label %33, label %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiENS6_5CoordESB_NS6_5ColorENSt3__18functionIFSC_iSB_SC_EEE(%"struct.skvm::Color"* noalias nocapture sret, %"struct.SkSL::Program"* dereferenceable(128), %"class.SkSL::FunctionDefinition"* nocapture readonly dereferenceable(88), %"class.skvm::Builder"*, i32*, i64, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readonly byval(%"struct.skvm::Color") align 8, %"class.std::__1::function"* nocapture) local_unnamed_addr #0 {
  %11 = alloca <4 x i32>, align 16
  %12 = alloca [6 x i32], align 16
  %13 = alloca %"class.SkSL::SkVMGenerator", align 8
  %14 = alloca %"struct.skvm::Coord", align 8
  %15 = alloca %"struct.skvm::Coord", align 8
  %16 = alloca %"struct.skvm::Color", align 8
  %17 = alloca %"class.std::__1::function", align 8
  %18 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3, i32 0) #12
  %19 = extractvalue { %"class.skvm::Builder"*, i32 } %18, 1
  %20 = bitcast <4 x i32>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #12
  %21 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 0
  %22 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 1
  %23 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 2
  %24 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 3
  %25 = insertelement <4 x i32> undef, i32 %19, i32 0
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %26, <4 x i32>* %11, align 16
  %27 = bitcast [6 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #12
  %28 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 0
  %29 = getelementptr inbounds %"class.SkSL::FunctionDefinition", %"class.SkSL::FunctionDefinition"* %2, i64 0, i32 1
  %30 = bitcast [6 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 24, i1 false)
  %31 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %29, align 8
  %32 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %31, i64 0, i32 3, i32 0, i32 0
  %33 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %32, align 8
  %34 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %31, i64 0, i32 3, i32 0, i32 1
  %35 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %34, align 8
  %36 = icmp eq %"class.SkSL::Variable"** %33, %35
  br i1 %36, label %82, label %37

37:                                               ; preds = %10
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %8, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %8, i64 0, i32 1, i32 1
  %40 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %8, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %8, i64 0, i32 3, i32 1
  %42 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %7, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %7, i64 0, i32 1, i32 1
  br label %44

44:                                               ; preds = %37, %59
  %45 = phi i64 [ 0, %37 ], [ %69, %59 ]
  %46 = phi %"class.SkSL::Variable"** [ %33, %37 ], [ %71, %59 ]
  %47 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %46, align 8
  %48 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %47, i64 0, i32 2
  %49 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %48, align 8
  %50 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %49, i64 0, i32 0, i32 6
  %51 = load i32, i32* %50, align 8
  switch i32 %51, label %73 [
    i32 10009, label %59
    i32 10010, label %52
  ]

52:                                               ; preds = %44
  %53 = load i32, i32* %38, align 8
  %54 = or i64 %45, 1
  %55 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 %45
  store i32 %53, i32* %55, align 8
  %56 = load i32, i32* %39, align 8
  %57 = add i64 %45, 2
  %58 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 %54
  store i32 %56, i32* %58, align 4
  br label %59

59:                                               ; preds = %44, %52
  %60 = phi i32* [ %40, %52 ], [ %42, %44 ]
  %61 = phi i64 [ 3, %52 ], [ 1, %44 ]
  %62 = phi i64 [ %57, %52 ], [ %45, %44 ]
  %63 = phi i32* [ %41, %52 ], [ %43, %44 ]
  %64 = phi i64 [ 4, %52 ], [ 2, %44 ]
  %65 = load i32, i32* %60, align 8
  %66 = add i64 %45, %61
  %67 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 %62
  store i32 %65, i32* %67, align 4
  %68 = load i32, i32* %63, align 8
  %69 = add i64 %45, %64
  %70 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 %66
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %46, i64 1
  %72 = icmp eq %"class.SkSL::Variable"** %71, %35
  br i1 %72, label %82, label %44

73:                                               ; preds = %44
  %74 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %74, align 8
  %75 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %76, align 8
  %77 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %77, align 8
  %78 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %78, align 8
  %79 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %79, align 8
  %80 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %80, align 8
  %81 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %81, align 8
  br label %169

82:                                               ; preds = %59, %10
  %83 = phi i64 [ 0, %10 ], [ %69, %59 ]
  %84 = bitcast %"class.SkSL::SkVMGenerator"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %84) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %84, i8* align 8 bitcast (%"class.SkSL::SkVMGenerator"* @__const._ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiEPNS_13SkVMSignatureE.generator to i8*), i64 280, i1 false)
  %85 = bitcast %"struct.skvm::Coord"* %14 to i8*
  %86 = bitcast %"struct.skvm::Coord"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %85, i8* nonnull align 8 %86, i64 32, i1 false)
  %87 = bitcast %"struct.skvm::Coord"* %15 to i8*
  %88 = bitcast %"struct.skvm::Coord"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %87, i8* nonnull align 8 %88, i64 32, i1 false)
  %89 = bitcast %"struct.skvm::Color"* %16 to i8*
  %90 = bitcast %"struct.skvm::Color"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %89, i8* nonnull align 8 %90, i64 64, i1 false)
  %91 = bitcast %"class.std::__1::function"* %17 to i8*
  %92 = bitcast %"class.std::__1::function"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %91, i8* align 8 %92, i64 16, i1 false) #12
  %93 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %17, i64 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %9, i64 0, i32 0, i32 1
  %95 = bitcast %"struct.std::__1::__function::__policy_invoker"* %94 to i64*
  %96 = bitcast %"struct.std::__1::__function::__policy_invoker"* %93 to i64*
  %97 = load i64, i64* %95, align 8
  store i64 %97, i64* %96, align 8
  %98 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %17, i64 0, i32 0, i32 2
  %99 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %9, i64 0, i32 0, i32 2
  %100 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %99, align 8
  store %"struct.std::__1::__function::__policy"* %100, %"struct.std::__1::__function::__policy"** %98, align 8
  %101 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %100, i64 0, i32 1
  %102 = load void (i8*)*, void (i8*)** %101, align 8
  %103 = icmp eq void (i8*)* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %82
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %99, align 8
  store i64 ptrtoint (void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* @_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE12__call_emptyEPKNS0_16__policy_storageEiOS4_OS3_ to i64), i64* %95, align 8
  br label %105

105:                                              ; preds = %82, %104
  call void @_ZN4SkSL13SkVMGeneratorC2ERKNS_7ProgramEPN4skvm7BuilderE6SkSpanIiENS4_5CoordES9_NS4_5ColorENSt3__18functionIFSA_iS9_SA_EEE(%"class.SkSL::SkVMGenerator"* nonnull %13, %"struct.SkSL::Program"* dereferenceable(128) %1, %"class.skvm::Builder"* %3, i32* %4, i64 %5, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %14, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %15, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %16, %"class.std::__1::function"* nonnull %17)
  %106 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %98, align 8
  %107 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %106, i64 0, i32 1
  %108 = load void (i8*)*, void (i8*)** %107, align 8
  %109 = icmp eq void (i8*)* %108, null
  br i1 %109, label %113, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %17, i64 0, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  call void %108(i8* %112) #12
  br label %113

113:                                              ; preds = %105, %110
  call void @_ZN4SkSL13SkVMGenerator13writeFunctionERKNS_18FunctionDefinitionE6SkSpanIiES5_(%"class.SkSL::SkVMGenerator"* nonnull %13, %"class.SkSL::FunctionDefinition"* dereferenceable(88) %2, i32* nonnull %28, i64 %83, i32* nonnull %21, i64 4)
  %114 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %3, %"class.skvm::Builder"** %114, align 8
  %115 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  %116 = load i32, i32* %21, align 16
  store i32 %116, i32* %115, align 8
  %117 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %3, %"class.skvm::Builder"** %117, align 8
  %118 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  %119 = load i32, i32* %22, align 4
  store i32 %119, i32* %118, align 8
  %120 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %3, %"class.skvm::Builder"** %120, align 8
  %121 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  %122 = load i32, i32* %23, align 8
  store i32 %122, i32* %121, align 8
  %123 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %3, %"class.skvm::Builder"** %123, align 8
  %124 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  %125 = load i32, i32* %24, align 4
  store i32 %125, i32* %124, align 8
  %126 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 10, i32 0, i32 0
  %127 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %126, align 8
  %128 = icmp eq %"struct.SkSL::SkVMGenerator::Function"* %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %113
  %130 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %127 to i64
  %131 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 10, i32 0, i32 1
  %132 = bitcast %"struct.SkSL::SkVMGenerator::Function"** %131 to i64*
  store i64 %130, i64* %132, align 8
  %133 = bitcast %"struct.SkSL::SkVMGenerator::Function"* %127 to i8*
  call void @_ZdlPv(i8* %133) #14
  br label %134

134:                                              ; preds = %129, %113
  %135 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 6, i32 0, i32 0
  %136 = load i32*, i32** %135, align 8
  %137 = icmp eq i32* %136, null
  br i1 %137, label %143, label %138

138:                                              ; preds = %134
  %139 = ptrtoint i32* %136 to i64
  %140 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 6, i32 0, i32 1
  %141 = bitcast i32** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = bitcast i32* %136 to i8*
  call void @_ZdlPv(i8* %142) #14
  br label %143

143:                                              ; preds = %138, %134
  %144 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %145 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %144, align 8
  %146 = icmp eq %"struct.std::__1::__hash_node_base.136"* %145, null
  br i1 %146, label %153, label %147

147:                                              ; preds = %143, %147
  %148 = phi %"struct.std::__1::__hash_node_base.136"* [ %150, %147 ], [ %145, %143 ]
  %149 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %148, i64 0, i32 0
  %150 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %149, align 8
  %151 = bitcast %"struct.std::__1::__hash_node_base.136"* %148 to i8*
  call void @_ZdlPv(i8* %151) #14
  %152 = icmp eq %"struct.std::__1::__hash_node_base.136"* %150, null
  br i1 %152, label %153, label %147

153:                                              ; preds = %147, %143
  %154 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %154, align 8
  store %"struct.std::__1::__hash_node_base.136"** null, %"struct.std::__1::__hash_node_base.136"*** %154, align 8
  %156 = icmp eq %"struct.std::__1::__hash_node_base.136"** %155, null
  br i1 %156, label %159, label %157

157:                                              ; preds = %153
  %158 = bitcast %"struct.std::__1::__hash_node_base.136"** %155 to i8*
  call void @_ZdlPv(i8* %158) #14
  br label %159

159:                                              ; preds = %157, %153
  %160 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 4, i32 0, i32 2
  %161 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %160, align 8
  %162 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %161, i64 0, i32 1
  %163 = load void (i8*)*, void (i8*)** %162, align 8
  %164 = icmp eq void (i8*)* %163, null
  br i1 %164, label %168, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %13, i64 0, i32 4, i32 0, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  call void %163(i8* %167) #12
  br label %168

168:                                              ; preds = %159, %165
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %84) #12
  br label %169

169:                                              ; preds = %73, %168
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiEPNS_13SkVMSignatureE(%"struct.SkSL::Program"* dereferenceable(128), %"class.SkSL::FunctionDefinition"* nocapture readonly dereferenceable(88), %"class.skvm::Builder"*, i32*, i64, %"struct.SkSL::SkVMSignature"*) local_unnamed_addr #0 {
  %7 = alloca %"struct.SkSL::SkVMSignature", align 8
  %8 = alloca %"class.std::__1::vector.251", align 8
  %9 = alloca %"class.std::__1::vector.125", align 8
  %10 = alloca %"class.std::__1::vector.251", align 8
  %11 = alloca %"class.std::__1::vector.125", align 8
  %12 = alloca %"class.SkSL::SkVMGenerator", align 8
  %13 = alloca %"struct.skvm::Coord", align 8
  %14 = alloca %"struct.skvm::Coord", align 8
  %15 = alloca %"struct.skvm::Color", align 8
  %16 = alloca %"class.std::__1::function", align 8
  %17 = bitcast %"struct.SkSL::SkVMSignature"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 16, i1 false) #12
  %18 = icmp eq %"struct.SkSL::SkVMSignature"* %5, null
  %19 = select i1 %18, %"struct.SkSL::SkVMSignature"* %7, %"struct.SkSL::SkVMSignature"* %5
  %20 = bitcast %"class.std::__1::vector.251"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #12
  %21 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %8, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %8, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #12
  %24 = bitcast %"class.std::__1::vector.125"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %9, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %9, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #12
  %28 = getelementptr inbounds %"class.SkSL::FunctionDefinition", %"class.SkSL::FunctionDefinition"* %1, i64 0, i32 1
  %29 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %28, align 8
  %30 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %29, i64 0, i32 3, i32 0, i32 0
  %31 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %30, align 8
  %32 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %29, i64 0, i32 3, i32 0, i32 1
  %33 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %32, align 8
  %34 = icmp eq %"class.SkSL::Variable"** %31, %33
  br i1 %34, label %45, label %35

35:                                               ; preds = %6
  %36 = getelementptr inbounds %"struct.SkSL::SkVMSignature", %"struct.SkSL::SkVMSignature"* %19, i64 0, i32 0
  %37 = bitcast %"struct.skvm::Ptr"** %22 to i64*
  %38 = bitcast %"class.std::__1::vector.251"* %8 to i64*
  %39 = bitcast %"struct.skvm::Ptr"** %23 to i64*
  %40 = bitcast i32** %26 to i64*
  %41 = bitcast %"class.std::__1::vector.125"* %9 to i64*
  %42 = bitcast i32** %27 to i64*
  br label %67

43:                                               ; preds = %79
  %44 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %28, align 8
  br label %45

45:                                               ; preds = %43, %6
  %46 = phi %"class.SkSL::FunctionDeclaration"* [ %44, %43 ], [ %29, %6 ]
  %47 = bitcast %"class.std::__1::vector.251"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #12
  %48 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %10, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %10, i64 0, i32 0, i32 1
  %50 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 24, i1 false) #12
  %51 = bitcast %"class.std::__1::vector.125"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #12
  %52 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %11, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %11, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 24, i1 false) #12
  %55 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %46, i64 0, i32 4
  %56 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %55, align 8
  %57 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %56)
  %58 = getelementptr inbounds %"struct.SkSL::SkVMSignature", %"struct.SkSL::SkVMSignature"* %19, i64 0, i32 1
  store i64 %57, i64* %58, align 8
  %59 = icmp eq i64 %57, 0
  br i1 %59, label %209, label %60

60:                                               ; preds = %45
  %61 = bitcast %"struct.skvm::Ptr"** %49 to i64*
  %62 = bitcast %"class.std::__1::vector.251"* %10 to i64*
  %63 = bitcast %"struct.skvm::Ptr"** %50 to i64*
  %64 = bitcast i32** %53 to i64*
  %65 = bitcast %"class.std::__1::vector.125"* %11 to i64*
  %66 = bitcast i32** %54 to i64*
  br label %274

67:                                               ; preds = %35, %79
  %68 = phi i64 [ 0, %35 ], [ %80, %79 ]
  %69 = phi i32* [ null, %35 ], [ %81, %79 ]
  %70 = phi %"class.SkSL::Variable"** [ %31, %35 ], [ %82, %79 ]
  %71 = bitcast %"class.SkSL::Variable"** %70 to %"class.SkSL::Symbol"**
  %72 = load %"class.SkSL::Symbol"*, %"class.SkSL::Symbol"** %71, align 8
  %73 = getelementptr inbounds %"class.SkSL::Symbol", %"class.SkSL::Symbol"* %72, i64 0, i32 2
  %74 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %73, align 8
  %75 = tail call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %74)
  %76 = load i64, i64* %36, align 8
  %77 = add i64 %76, %75
  store i64 %77, i64* %36, align 8
  %78 = icmp eq i64 %75, 0
  br i1 %78, label %79, label %84

79:                                               ; preds = %204, %67
  %80 = phi i64 [ %68, %67 ], [ %205, %204 ]
  %81 = phi i32* [ %69, %67 ], [ %206, %204 ]
  %82 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %70, i64 1
  %83 = icmp eq %"class.SkSL::Variable"** %82, %33
  br i1 %83, label %43, label %67

84:                                               ; preds = %67, %204
  %85 = phi i64 [ %205, %204 ], [ %68, %67 ]
  %86 = phi i32* [ %206, %204 ], [ %69, %67 ]
  %87 = phi i64 [ %207, %204 ], [ 0, %67 ]
  %88 = tail call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %2, i32 4) #12
  %89 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %22, align 8
  %90 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %23, align 8
  %91 = icmp ult %"struct.skvm::Ptr"* %89, %90
  %92 = ptrtoint %"struct.skvm::Ptr"* %90 to i64
  br i1 %91, label %93, label %99

93:                                               ; preds = %84
  %94 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %89, i64 0, i32 0
  store i32 %88, i32* %94, align 4
  %95 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %89, i64 1
  %96 = ptrtoint %"struct.skvm::Ptr"* %95 to i64
  store i64 %96, i64* %37, align 8
  %97 = load i32*, i32** %26, align 8
  %98 = ptrtoint i32* %97 to i64
  br label %143

99:                                               ; preds = %84
  %100 = ptrtoint %"struct.skvm::Ptr"* %89 to i64
  %101 = load i64, i64* %38, align 8
  %102 = sub i64 %100, %101
  %103 = ashr exact i64 %102, 2
  %104 = add nsw i64 %103, 1
  %105 = icmp ugt i64 %104, 4611686018427387903
  br i1 %105, label %106, label %108

106:                                              ; preds = %99
  %107 = bitcast %"class.std::__1::vector.251"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %107) #13
  unreachable

108:                                              ; preds = %99
  %109 = sub i64 %92, %101
  %110 = ashr exact i64 %109, 2
  %111 = icmp ult i64 %110, 2305843009213693951
  br i1 %111, label %112, label %120

112:                                              ; preds = %108
  %113 = ashr exact i64 %109, 1
  %114 = icmp ult i64 %113, %104
  %115 = select i1 %114, i64 %104, i64 %113
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %112
  %118 = icmp ugt i64 %115, 4611686018427387903
  br i1 %118, label %119, label %120

119:                                              ; preds = %117
  tail call void @abort() #13
  unreachable

120:                                              ; preds = %117, %108
  %121 = phi i64 [ %115, %117 ], [ 4611686018427387903, %108 ]
  %122 = shl i64 %121, 2
  %123 = tail call i8* @_Znwm(i64 %122) #14
  %124 = bitcast i8* %123 to %"struct.skvm::Ptr"*
  br label %125

125:                                              ; preds = %120, %112
  %126 = phi i64 [ %121, %120 ], [ 0, %112 ]
  %127 = phi i8* [ %123, %120 ], [ null, %112 ]
  %128 = phi %"struct.skvm::Ptr"* [ %124, %120 ], [ null, %112 ]
  %129 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %128, i64 %103
  %130 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %128, i64 %126
  %131 = ptrtoint %"struct.skvm::Ptr"* %130 to i64
  %132 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %129, i64 0, i32 0
  store i32 %88, i32* %132, align 4
  %133 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %129, i64 1
  %134 = ptrtoint %"struct.skvm::Ptr"* %133 to i64
  %135 = ptrtoint %"struct.skvm::Ptr"* %128 to i64
  %136 = icmp sgt i64 %102, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %125
  %138 = inttoptr i64 %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %138, i64 %102, i1 false) #12
  br label %139

139:                                              ; preds = %137, %125
  store i64 %135, i64* %38, align 8
  store i64 %134, i64* %37, align 8
  store i64 %131, i64* %39, align 8
  %140 = icmp eq i64 %101, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %139
  %142 = inttoptr i64 %101 to i8*
  tail call void @_ZdlPv(i8* %142) #14
  br label %143

143:                                              ; preds = %93, %139, %141
  %144 = phi i64 [ %98, %93 ], [ %85, %139 ], [ %85, %141 ]
  %145 = phi i32* [ %97, %93 ], [ %86, %139 ], [ %86, %141 ]
  %146 = phi %"struct.skvm::Ptr"* [ %95, %93 ], [ %133, %139 ], [ %133, %141 ]
  %147 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %146, i64 -1, i32 0
  %148 = load i32, i32* %147, align 4
  %149 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6load32ENS_3PtrE(%"class.skvm::Builder"* %2, i32 %148) #12
  %150 = extractvalue { %"class.skvm::Builder"*, i32 } %149, 1
  %151 = load i32*, i32** %27, align 8
  %152 = icmp ult i32* %145, %151
  %153 = ptrtoint i32* %151 to i64
  br i1 %152, label %154, label %157

154:                                              ; preds = %143
  store i32 %150, i32* %145, align 4
  %155 = getelementptr inbounds i32, i32* %145, i64 1
  %156 = ptrtoint i32* %155 to i64
  store i64 %156, i64* %40, align 8
  br label %204

157:                                              ; preds = %143
  %158 = ptrtoint i32* %145 to i64
  %159 = load i64, i64* %41, align 8
  %160 = sub i64 %158, %159
  %161 = ashr exact i64 %160, 2
  %162 = add nsw i64 %161, 1
  %163 = icmp ugt i64 %162, 4611686018427387903
  br i1 %163, label %164, label %166

164:                                              ; preds = %157
  %165 = bitcast %"class.std::__1::vector.125"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %165) #13
  unreachable

166:                                              ; preds = %157
  %167 = sub i64 %153, %159
  %168 = ashr exact i64 %167, 2
  %169 = icmp ult i64 %168, 2305843009213693951
  br i1 %169, label %170, label %178

170:                                              ; preds = %166
  %171 = ashr exact i64 %167, 1
  %172 = icmp ult i64 %171, %162
  %173 = select i1 %172, i64 %162, i64 %171
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %183, label %175

175:                                              ; preds = %170
  %176 = icmp ugt i64 %173, 4611686018427387903
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  tail call void @abort() #13
  unreachable

178:                                              ; preds = %175, %166
  %179 = phi i64 [ %173, %175 ], [ 4611686018427387903, %166 ]
  %180 = shl i64 %179, 2
  %181 = tail call i8* @_Znwm(i64 %180) #14
  %182 = bitcast i8* %181 to i32*
  br label %183

183:                                              ; preds = %178, %170
  %184 = phi i64 [ %179, %178 ], [ 0, %170 ]
  %185 = phi i32* [ %182, %178 ], [ null, %170 ]
  %186 = getelementptr inbounds i32, i32* %185, i64 %161
  %187 = getelementptr inbounds i32, i32* %185, i64 %184
  %188 = ptrtoint i32* %187 to i64
  store i32 %150, i32* %186, align 4
  %189 = getelementptr inbounds i32, i32* %186, i64 1
  %190 = ptrtoint i32* %189 to i64
  %191 = sub i64 %144, %159
  %192 = ashr exact i64 %191, 2
  %193 = sub nsw i64 0, %192
  %194 = getelementptr inbounds i32, i32* %186, i64 %193
  %195 = ptrtoint i32* %194 to i64
  %196 = icmp sgt i64 %191, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %183
  %198 = bitcast i32* %194 to i8*
  %199 = inttoptr i64 %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %199, i64 %191, i1 false) #12
  br label %200

200:                                              ; preds = %197, %183
  store i64 %195, i64* %41, align 8
  store i64 %190, i64* %40, align 8
  store i64 %188, i64* %42, align 8
  %201 = icmp eq i64 %159, 0
  br i1 %201, label %204, label %202

202:                                              ; preds = %200
  %203 = inttoptr i64 %159 to i8*
  tail call void @_ZdlPv(i8* %203) #14
  br label %204

204:                                              ; preds = %154, %200, %202
  %205 = phi i64 [ %156, %154 ], [ %190, %200 ], [ %190, %202 ]
  %206 = phi i32* [ %155, %154 ], [ %189, %200 ], [ %189, %202 ]
  %207 = add nuw i64 %87, 1
  %208 = icmp eq i64 %207, %75
  br i1 %208, label %79, label %84

209:                                              ; preds = %396, %45
  %210 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2, i32 0) #12
  %211 = extractvalue { %"class.skvm::Builder"*, i32 } %210, 0
  %212 = extractvalue { %"class.skvm::Builder"*, i32 } %210, 1
  %213 = bitcast %"class.SkSL::SkVMGenerator"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %213) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %213, i8* align 8 bitcast (%"class.SkSL::SkVMGenerator"* @__const._ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiEPNS_13SkVMSignatureE.generator to i8*), i64 280, i1 false)
  %214 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %214, align 8
  %215 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 0, i32 1
  store i32 %212, i32* %215, align 8
  %216 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 0, i32 2, i64 0
  %217 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 1, i32 0
  %218 = bitcast i8* %216 to i32*
  store i32 -1431655766, i32* %218, align 4
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %217, align 8
  %219 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 1, i32 1
  store i32 %212, i32* %219, align 8
  %220 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %13, i64 0, i32 1, i32 2, i64 0
  %221 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 0, i32 0
  %222 = bitcast i8* %220 to i32*
  store i32 -1431655766, i32* %222, align 4
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %221, align 8
  %223 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 0, i32 1
  store i32 %212, i32* %223, align 8
  %224 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 0, i32 2, i64 0
  %225 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 1, i32 0
  %226 = bitcast i8* %224 to i32*
  store i32 -1431655766, i32* %226, align 4
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %225, align 8
  %227 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 1, i32 1
  store i32 %212, i32* %227, align 8
  %228 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %14, i64 0, i32 1, i32 2, i64 0
  %229 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 0, i32 0
  %230 = bitcast i8* %228 to i32*
  store i32 -1431655766, i32* %230, align 4
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %229, align 8
  %231 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 0, i32 1
  store i32 %212, i32* %231, align 8
  %232 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 0, i32 2
  %233 = bitcast [4 x i8]* %232 to i32*
  store i32 -1431655766, i32* %233, align 4
  %234 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %234, align 8
  %235 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 1, i32 1
  store i32 %212, i32* %235, align 8
  %236 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 1, i32 2
  %237 = bitcast [4 x i8]* %236 to i32*
  store i32 -1431655766, i32* %237, align 4
  %238 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %238, align 8
  %239 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 2, i32 1
  store i32 %212, i32* %239, align 8
  %240 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 2, i32 2
  %241 = bitcast [4 x i8]* %240 to i32*
  store i32 -1431655766, i32* %241, align 4
  %242 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %211, %"class.skvm::Builder"** %242, align 8
  %243 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 3, i32 1
  store i32 %212, i32* %243, align 8
  %244 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %15, i64 0, i32 3, i32 2
  %245 = bitcast [4 x i8]* %244 to i32*
  store i32 -1431655766, i32* %245, align 4
  %246 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %16, i64 0, i32 0, i32 1, i32 0
  store void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* @_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE12__call_emptyEPKNS0_16__policy_storageEiOS4_OS3_, void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)** %246, align 8
  %247 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %16, i64 0, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %247, align 8
  call void @_ZN4SkSL13SkVMGeneratorC2ERKNS_7ProgramEPN4skvm7BuilderE6SkSpanIiENS4_5CoordES9_NS4_5ColorENSt3__18functionIFSA_iS9_SA_EEE(%"class.SkSL::SkVMGenerator"* nonnull %12, %"struct.SkSL::Program"* dereferenceable(128) %0, %"class.skvm::Builder"* %2, i32* %3, i64 %4, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %13, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %14, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %15, %"class.std::__1::function"* nonnull %16)
  %248 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %247, align 8
  %249 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %248, i64 0, i32 1
  %250 = load void (i8*)*, void (i8*)** %249, align 8
  %251 = icmp eq void (i8*)* %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %209
  %253 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %16, i64 0, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  call void %250(i8* %254) #12
  br label %255

255:                                              ; preds = %209, %252
  %256 = load i32*, i32** %25, align 8
  %257 = bitcast i32** %26 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = ptrtoint i32* %256 to i64
  %260 = sub i64 %258, %259
  %261 = ashr exact i64 %260, 2
  %262 = load i32*, i32** %52, align 8
  %263 = bitcast i32** %53 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = ptrtoint i32* %262 to i64
  %266 = sub i64 %264, %265
  %267 = ashr exact i64 %266, 2
  call void @_ZN4SkSL13SkVMGenerator13writeFunctionERKNS_18FunctionDefinitionE6SkSpanIiES5_(%"class.SkSL::SkVMGenerator"* nonnull %12, %"class.SkSL::FunctionDefinition"* dereferenceable(88) %1, i32* %256, i64 %261, i32* %262, i64 %267)
  %268 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %28, align 8
  %269 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %268, i64 0, i32 3, i32 0, i32 0
  %270 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %269, align 8
  %271 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %268, i64 0, i32 3, i32 0, i32 1
  %272 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %271, align 8
  %273 = icmp eq %"class.SkSL::Variable"** %270, %272
  br i1 %273, label %406, label %409

274:                                              ; preds = %402, %60
  %275 = phi i64 [ 0, %60 ], [ %397, %402 ]
  %276 = phi i32* [ null, %60 ], [ %398, %402 ]
  %277 = phi i64 [ 0, %60 ], [ %405, %402 ]
  %278 = phi %"struct.skvm::Ptr"* [ null, %60 ], [ %404, %402 ]
  %279 = phi %"struct.skvm::Ptr"* [ null, %60 ], [ %403, %402 ]
  %280 = phi i64 [ 0, %60 ], [ %399, %402 ]
  %281 = tail call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %2, i32 4) #12
  %282 = icmp ult %"struct.skvm::Ptr"* %279, %278
  %283 = ptrtoint %"struct.skvm::Ptr"* %278 to i64
  br i1 %282, label %284, label %290

284:                                              ; preds = %274
  %285 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %279, i64 0, i32 0
  store i32 %281, i32* %285, align 4
  %286 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %279, i64 1
  %287 = ptrtoint %"struct.skvm::Ptr"* %286 to i64
  store i64 %287, i64* %61, align 8
  %288 = load i32*, i32** %53, align 8
  %289 = ptrtoint i32* %288 to i64
  br label %338

290:                                              ; preds = %274
  %291 = ptrtoint %"struct.skvm::Ptr"* %279 to i64
  %292 = load i64, i64* %62, align 8
  %293 = sub i64 %291, %292
  %294 = ashr exact i64 %293, 2
  %295 = add nsw i64 %294, 1
  %296 = icmp ugt i64 %295, 4611686018427387903
  br i1 %296, label %297, label %299

297:                                              ; preds = %290
  %298 = bitcast %"class.std::__1::vector.251"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %298) #13
  unreachable

299:                                              ; preds = %290
  %300 = sub i64 %283, %292
  %301 = ashr exact i64 %300, 2
  %302 = icmp ult i64 %301, 2305843009213693951
  br i1 %302, label %303, label %311

303:                                              ; preds = %299
  %304 = ashr exact i64 %300, 1
  %305 = icmp ult i64 %304, %295
  %306 = select i1 %305, i64 %295, i64 %304
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %316, label %308

308:                                              ; preds = %303
  %309 = icmp ugt i64 %306, 4611686018427387903
  br i1 %309, label %310, label %311

310:                                              ; preds = %308
  tail call void @abort() #13
  unreachable

311:                                              ; preds = %308, %299
  %312 = phi i64 [ %306, %308 ], [ 4611686018427387903, %299 ]
  %313 = shl i64 %312, 2
  %314 = tail call i8* @_Znwm(i64 %313) #14
  %315 = bitcast i8* %314 to %"struct.skvm::Ptr"*
  br label %316

316:                                              ; preds = %311, %303
  %317 = phi i64 [ %312, %311 ], [ 0, %303 ]
  %318 = phi %"struct.skvm::Ptr"* [ %315, %311 ], [ null, %303 ]
  %319 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %318, i64 %294
  %320 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %318, i64 %317
  %321 = ptrtoint %"struct.skvm::Ptr"* %320 to i64
  %322 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %319, i64 0, i32 0
  store i32 %281, i32* %322, align 4
  %323 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %319, i64 1
  %324 = ptrtoint %"struct.skvm::Ptr"* %323 to i64
  %325 = sub i64 %277, %292
  %326 = ashr exact i64 %325, 2
  %327 = sub nsw i64 0, %326
  %328 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %319, i64 %327
  %329 = ptrtoint %"struct.skvm::Ptr"* %328 to i64
  %330 = icmp sgt i64 %325, 0
  br i1 %330, label %331, label %334

331:                                              ; preds = %316
  %332 = bitcast %"struct.skvm::Ptr"* %328 to i8*
  %333 = inttoptr i64 %292 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %332, i8* align 4 %333, i64 %325, i1 false) #12
  br label %334

334:                                              ; preds = %331, %316
  store i64 %329, i64* %62, align 8
  store i64 %324, i64* %61, align 8
  store i64 %321, i64* %63, align 8
  %335 = icmp eq i64 %292, 0
  br i1 %335, label %338, label %336

336:                                              ; preds = %334
  %337 = inttoptr i64 %292 to i8*
  tail call void @_ZdlPv(i8* %337) #14
  br label %338

338:                                              ; preds = %284, %334, %336
  %339 = phi i64 [ %289, %284 ], [ %275, %334 ], [ %275, %336 ]
  %340 = phi i32* [ %288, %284 ], [ %276, %334 ], [ %276, %336 ]
  %341 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2, i32 0) #12
  %342 = extractvalue { %"class.skvm::Builder"*, i32 } %341, 1
  %343 = load i32*, i32** %54, align 8
  %344 = icmp ult i32* %340, %343
  %345 = ptrtoint i32* %343 to i64
  br i1 %344, label %346, label %349

346:                                              ; preds = %338
  store i32 %342, i32* %340, align 4
  %347 = getelementptr inbounds i32, i32* %340, i64 1
  %348 = ptrtoint i32* %347 to i64
  store i64 %348, i64* %64, align 8
  br label %396

349:                                              ; preds = %338
  %350 = ptrtoint i32* %340 to i64
  %351 = load i64, i64* %65, align 8
  %352 = sub i64 %350, %351
  %353 = ashr exact i64 %352, 2
  %354 = add nsw i64 %353, 1
  %355 = icmp ugt i64 %354, 4611686018427387903
  br i1 %355, label %356, label %358

356:                                              ; preds = %349
  %357 = bitcast %"class.std::__1::vector.125"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %357) #13
  unreachable

358:                                              ; preds = %349
  %359 = sub i64 %345, %351
  %360 = ashr exact i64 %359, 2
  %361 = icmp ult i64 %360, 2305843009213693951
  br i1 %361, label %362, label %370

362:                                              ; preds = %358
  %363 = ashr exact i64 %359, 1
  %364 = icmp ult i64 %363, %354
  %365 = select i1 %364, i64 %354, i64 %363
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %375, label %367

367:                                              ; preds = %362
  %368 = icmp ugt i64 %365, 4611686018427387903
  br i1 %368, label %369, label %370

369:                                              ; preds = %367
  tail call void @abort() #13
  unreachable

370:                                              ; preds = %367, %358
  %371 = phi i64 [ %365, %367 ], [ 4611686018427387903, %358 ]
  %372 = shl i64 %371, 2
  %373 = tail call i8* @_Znwm(i64 %372) #14
  %374 = bitcast i8* %373 to i32*
  br label %375

375:                                              ; preds = %370, %362
  %376 = phi i64 [ %371, %370 ], [ 0, %362 ]
  %377 = phi i32* [ %374, %370 ], [ null, %362 ]
  %378 = getelementptr inbounds i32, i32* %377, i64 %353
  %379 = getelementptr inbounds i32, i32* %377, i64 %376
  %380 = ptrtoint i32* %379 to i64
  store i32 %342, i32* %378, align 4
  %381 = getelementptr inbounds i32, i32* %378, i64 1
  %382 = ptrtoint i32* %381 to i64
  %383 = sub i64 %339, %351
  %384 = ashr exact i64 %383, 2
  %385 = sub nsw i64 0, %384
  %386 = getelementptr inbounds i32, i32* %378, i64 %385
  %387 = ptrtoint i32* %386 to i64
  %388 = icmp sgt i64 %383, 0
  br i1 %388, label %389, label %392

389:                                              ; preds = %375
  %390 = bitcast i32* %386 to i8*
  %391 = inttoptr i64 %351 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %390, i8* align 4 %391, i64 %383, i1 false) #12
  br label %392

392:                                              ; preds = %389, %375
  store i64 %387, i64* %65, align 8
  store i64 %382, i64* %64, align 8
  store i64 %380, i64* %66, align 8
  %393 = icmp eq i64 %351, 0
  br i1 %393, label %396, label %394

394:                                              ; preds = %392
  %395 = inttoptr i64 %351 to i8*
  tail call void @_ZdlPv(i8* %395) #14
  br label %396

396:                                              ; preds = %346, %392, %394
  %397 = phi i64 [ %348, %346 ], [ %382, %392 ], [ %382, %394 ]
  %398 = phi i32* [ %347, %346 ], [ %381, %392 ], [ %381, %394 ]
  %399 = add nuw i64 %280, 1
  %400 = load i64, i64* %58, align 8
  %401 = icmp ult i64 %399, %400
  br i1 %401, label %402, label %209

402:                                              ; preds = %396
  %403 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %49, align 8
  %404 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %50, align 8
  %405 = ptrtoint %"struct.skvm::Ptr"* %403 to i64
  br label %274

406:                                              ; preds = %435, %255
  %407 = load i64, i64* %58, align 8
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %439, label %509

409:                                              ; preds = %255, %435
  %410 = phi i64 [ %436, %435 ], [ 0, %255 ]
  %411 = phi %"class.SkSL::Variable"** [ %437, %435 ], [ %270, %255 ]
  %412 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %411, align 8
  %413 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %412, i64 0, i32 0, i32 2
  %414 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %413, align 8
  %415 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %414)
  %416 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %412, i64 0, i32 2
  %417 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %416, align 8
  %418 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %417, i64 0, i32 1
  %419 = load i32, i32* %418, align 8
  %420 = and i32 %419, 4
  %421 = icmp ne i32 %420, 0
  %422 = icmp ne i64 %415, 0
  %423 = and i1 %421, %422
  br i1 %423, label %424, label %435

424:                                              ; preds = %409, %424
  %425 = phi i64 [ %433, %424 ], [ 0, %409 ]
  %426 = add i64 %425, %410
  %427 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %21, align 8
  %428 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %427, i64 %426, i32 0
  %429 = load i32, i32* %428, align 4
  %430 = load i32*, i32** %25, align 8
  %431 = getelementptr inbounds i32, i32* %430, i64 %426
  %432 = load i32, i32* %431, align 4
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %2, i32 %429, %"class.skvm::Builder"* %2, i32 %432) #12
  %433 = add nuw i64 %425, 1
  %434 = icmp eq i64 %433, %415
  br i1 %434, label %435, label %424

435:                                              ; preds = %424, %409
  %436 = add i64 %415, %410
  %437 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %411, i64 1
  %438 = icmp eq %"class.SkSL::Variable"** %437, %272
  br i1 %438, label %406, label %409

439:                                              ; preds = %509, %406
  %440 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 10, i32 0, i32 0
  %441 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %440, align 8
  %442 = icmp eq %"struct.SkSL::SkVMGenerator::Function"* %441, null
  br i1 %442, label %448, label %443

443:                                              ; preds = %439
  %444 = ptrtoint %"struct.SkSL::SkVMGenerator::Function"* %441 to i64
  %445 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 10, i32 0, i32 1
  %446 = bitcast %"struct.SkSL::SkVMGenerator::Function"** %445 to i64*
  store i64 %444, i64* %446, align 8
  %447 = bitcast %"struct.SkSL::SkVMGenerator::Function"* %441 to i8*
  call void @_ZdlPv(i8* %447) #14
  br label %448

448:                                              ; preds = %443, %439
  %449 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 6, i32 0, i32 0
  %450 = load i32*, i32** %449, align 8
  %451 = icmp eq i32* %450, null
  br i1 %451, label %457, label %452

452:                                              ; preds = %448
  %453 = ptrtoint i32* %450 to i64
  %454 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 6, i32 0, i32 1
  %455 = bitcast i32** %454 to i64*
  store i64 %453, i64* %455, align 8
  %456 = bitcast i32* %450 to i8*
  call void @_ZdlPv(i8* %456) #14
  br label %457

457:                                              ; preds = %452, %448
  %458 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %459 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %458, align 8
  %460 = icmp eq %"struct.std::__1::__hash_node_base.136"* %459, null
  br i1 %460, label %467, label %461

461:                                              ; preds = %457, %461
  %462 = phi %"struct.std::__1::__hash_node_base.136"* [ %464, %461 ], [ %459, %457 ]
  %463 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %462, i64 0, i32 0
  %464 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %463, align 8
  %465 = bitcast %"struct.std::__1::__hash_node_base.136"* %462 to i8*
  call void @_ZdlPv(i8* %465) #14
  %466 = icmp eq %"struct.std::__1::__hash_node_base.136"* %464, null
  br i1 %466, label %467, label %461

467:                                              ; preds = %461, %457
  %468 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %469 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %468, align 8
  store %"struct.std::__1::__hash_node_base.136"** null, %"struct.std::__1::__hash_node_base.136"*** %468, align 8
  %470 = icmp eq %"struct.std::__1::__hash_node_base.136"** %469, null
  br i1 %470, label %473, label %471

471:                                              ; preds = %467
  %472 = bitcast %"struct.std::__1::__hash_node_base.136"** %469 to i8*
  call void @_ZdlPv(i8* %472) #14
  br label %473

473:                                              ; preds = %471, %467
  %474 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 4, i32 0, i32 2
  %475 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %474, align 8
  %476 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %475, i64 0, i32 1
  %477 = load void (i8*)*, void (i8*)** %476, align 8
  %478 = icmp eq void (i8*)* %477, null
  br i1 %478, label %482, label %479

479:                                              ; preds = %473
  %480 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %12, i64 0, i32 4, i32 0, i32 0, i32 0
  %481 = load i8*, i8** %480, align 8
  call void %477(i8* %481) #12
  br label %482

482:                                              ; preds = %473, %479
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %213) #12
  %483 = load i32*, i32** %52, align 8
  %484 = icmp eq i32* %483, null
  br i1 %484, label %488, label %485

485:                                              ; preds = %482
  %486 = ptrtoint i32* %483 to i64
  store i64 %486, i64* %263, align 8
  %487 = bitcast i32* %483 to i8*
  call void @_ZdlPv(i8* %487) #14
  br label %488

488:                                              ; preds = %482, %485
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #12
  %489 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %48, align 8
  %490 = icmp eq %"struct.skvm::Ptr"* %489, null
  br i1 %490, label %495, label %491

491:                                              ; preds = %488
  %492 = ptrtoint %"struct.skvm::Ptr"* %489 to i64
  %493 = bitcast %"struct.skvm::Ptr"** %49 to i64*
  store i64 %492, i64* %493, align 8
  %494 = bitcast %"struct.skvm::Ptr"* %489 to i8*
  call void @_ZdlPv(i8* %494) #14
  br label %495

495:                                              ; preds = %488, %491
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #12
  %496 = load i32*, i32** %25, align 8
  %497 = icmp eq i32* %496, null
  br i1 %497, label %501, label %498

498:                                              ; preds = %495
  %499 = ptrtoint i32* %496 to i64
  store i64 %499, i64* %257, align 8
  %500 = bitcast i32* %496 to i8*
  call void @_ZdlPv(i8* %500) #14
  br label %501

501:                                              ; preds = %495, %498
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #12
  %502 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %21, align 8
  %503 = icmp eq %"struct.skvm::Ptr"* %502, null
  br i1 %503, label %508, label %504

504:                                              ; preds = %501
  %505 = ptrtoint %"struct.skvm::Ptr"* %502 to i64
  %506 = bitcast %"struct.skvm::Ptr"** %22 to i64*
  store i64 %505, i64* %506, align 8
  %507 = bitcast %"struct.skvm::Ptr"* %502 to i8*
  call void @_ZdlPv(i8* %507) #14
  br label %508

508:                                              ; preds = %501, %504
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  ret i1 true

509:                                              ; preds = %406, %509
  %510 = phi i64 [ %517, %509 ], [ 0, %406 ]
  %511 = load %"struct.skvm::Ptr"*, %"struct.skvm::Ptr"** %48, align 8
  %512 = getelementptr inbounds %"struct.skvm::Ptr", %"struct.skvm::Ptr"* %511, i64 %510, i32 0
  %513 = load i32, i32* %512, align 4
  %514 = load i32*, i32** %52, align 8
  %515 = getelementptr inbounds i32, i32* %514, i64 %510
  %516 = load i32, i32* %515, align 4
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %2, i32 %513, %"class.skvm::Builder"* %2, i32 %516) #12
  %517 = add nuw i64 %510, 1
  %518 = load i64, i64* %58, align 8
  %519 = icmp ult i64 %517, %518
  br i1 %519, label %509, label %439
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::FunctionDefinition"* @_ZN4SkSL19Program_GetFunctionERKNS_7ProgramEPKc(%"struct.SkSL::Program"* dereferenceable(128), i8*) local_unnamed_addr #0 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"struct.SkSL::StringFragment"*
  %5 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %6 = bitcast %"class.std::__1::vector.62"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !noalias !67
  %8 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %10 = bitcast %"class.std::__1::vector.75"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !67
  %12 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %13 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %12, align 8, !noalias !67
  %14 = load %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"** %8, align 8, !noalias !70
  %15 = bitcast <2 x i64>* %3 to i8*
  %16 = inttoptr i64 %7 to %"class.std::__1::unique_ptr.64"*
  %17 = icmp eq %"class.std::__1::unique_ptr.64"* %14, %16
  %18 = inttoptr i64 %11 to %"class.SkSL::ProgramElement"**
  %19 = icmp eq %"class.SkSL::ProgramElement"** %13, %18
  %20 = and i1 %17, %19
  br i1 %20, label %56, label %21

21:                                               ; preds = %2, %42
  %22 = phi i1 [ %52, %42 ], [ %19, %2 ]
  %23 = phi %"class.SkSL::ProgramElement"** [ %51, %42 ], [ %18, %2 ]
  %24 = phi %"class.std::__1::unique_ptr.64"* [ %49, %42 ], [ %16, %2 ]
  %25 = phi i64 [ %48, %42 ], [ %11, %2 ]
  %26 = phi i64 [ %47, %42 ], [ %7, %2 ]
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %24, i64 0, i32 0, i32 0, i32 0
  %28 = select i1 %22, %"class.SkSL::ProgramElement"** %27, %"class.SkSL::ProgramElement"** %23
  %29 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %28, align 8
  %30 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %29, i64 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #12
  br i1 %32, label %33, label %41

33:                                               ; preds = %21
  %34 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %29, i64 1
  %35 = bitcast %"class.SkSL::ProgramElement"* %34 to %"class.SkSL::FunctionDeclaration"**
  %36 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %35, align 8
  %37 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %36, i64 0, i32 0, i32 1, i32 0
  %38 = bitcast i8** %37 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  store <2 x i64> %39, <2 x i64>* %3, align 16
  %40 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqEPKc(%"struct.SkSL::StringFragment"* nonnull %4, i8* %1) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #12
  br i1 %40, label %54, label %42

41:                                               ; preds = %21
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #12
  br label %42

42:                                               ; preds = %41, %33
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %24, i64 1
  %44 = ptrtoint %"class.std::__1::unique_ptr.64"* %43 to i64
  %45 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %23, i64 1
  %46 = ptrtoint %"class.SkSL::ProgramElement"** %45 to i64
  %47 = select i1 %22, i64 %44, i64 %26
  %48 = select i1 %22, i64 %25, i64 %46
  %49 = inttoptr i64 %47 to %"class.std::__1::unique_ptr.64"*
  %50 = icmp eq %"class.std::__1::unique_ptr.64"* %14, %49
  %51 = inttoptr i64 %48 to %"class.SkSL::ProgramElement"**
  %52 = icmp eq %"class.SkSL::ProgramElement"** %13, %51
  %53 = and i1 %50, %52
  br i1 %53, label %56, label %21

54:                                               ; preds = %33
  %55 = bitcast %"class.SkSL::ProgramElement"* %29 to %"class.SkSL::FunctionDefinition"*
  br label %56

56:                                               ; preds = %42, %2, %54
  %57 = phi %"class.SkSL::FunctionDefinition"* [ %55, %54 ], [ null, %2 ], [ null, %42 ]
  ret %"class.SkSL::FunctionDefinition"* %57
}

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqEPKc(%"struct.SkSL::StringFragment"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.SkSL::UniformInfo"* @_ZN4SkSL22Program_GetUniformInfoERKNS_7ProgramE(%"struct.SkSL::Program"* dereferenceable(128)) local_unnamed_addr #0 {
  %2 = alloca %"class.SkSL::String", align 8
  %3 = tail call i8* @_Znwm(i64 32) #14
  %4 = bitcast i8* %3 to %"struct.SkSL::UniformInfo"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 32, i1 false) #12
  %5 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %6 = bitcast %"class.std::__1::vector.62"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !noalias !73
  %8 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %10 = bitcast %"class.std::__1::vector.75"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !73
  %12 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %13 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %12, align 8, !noalias !73
  %14 = load %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"** %8, align 8, !noalias !76
  %15 = bitcast %"class.SkSL::String"* %2 to i8*
  %16 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = bitcast %"class.SkSL::String"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = inttoptr i64 %7 to %"class.std::__1::unique_ptr.64"*
  %22 = icmp eq %"class.std::__1::unique_ptr.64"* %14, %21
  %23 = inttoptr i64 %11 to %"class.SkSL::ProgramElement"**
  %24 = icmp eq %"class.SkSL::ProgramElement"** %13, %23
  %25 = and i1 %22, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %81, %1
  ret %"struct.SkSL::UniformInfo"* %4

27:                                               ; preds = %1, %81
  %28 = phi i1 [ %91, %81 ], [ %24, %1 ]
  %29 = phi %"class.SkSL::ProgramElement"** [ %90, %81 ], [ %23, %1 ]
  %30 = phi %"class.std::__1::unique_ptr.64"* [ %88, %81 ], [ %21, %1 ]
  %31 = phi i64 [ %87, %81 ], [ %7, %1 ]
  %32 = phi i64 [ %86, %81 ], [ %11, %1 ]
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %30, i64 0, i32 0, i32 0, i32 0
  %34 = select i1 %28, %"class.SkSL::ProgramElement"** %33, %"class.SkSL::ProgramElement"** %29
  %35 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %34, align 8
  %36 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %35, i64 0, i32 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 4
  br i1 %38, label %39, label %81

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %35, i64 1
  %41 = bitcast %"class.SkSL::ProgramElement"* %40 to %"class.SkSL::VarDeclaration"**
  %42 = load %"class.SkSL::VarDeclaration"*, %"class.SkSL::VarDeclaration"** %41, align 8
  %43 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %42, i64 0, i32 1
  %44 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %43, align 8
  %45 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %44, i64 0, i32 2
  %46 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %45, align 8
  %47 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %46, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = and i32 %48, 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %81, label %51

51:                                               ; preds = %39
  %52 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %44, i64 0, i32 0, i32 2
  %53 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %52, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #12
  %54 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %44, i64 0, i32 0, i32 1, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %44, i64 0, i32 0, i32 1, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = icmp ugt i64 %57, -17
  br i1 %58, label %59, label %61

59:                                               ; preds = %51
  %60 = bitcast %"class.SkSL::String"* %2 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %60) #13
  unreachable

61:                                               ; preds = %51
  %62 = icmp ult i64 %57, 23
  br i1 %62, label %68, label %63

63:                                               ; preds = %61
  %64 = add nuw i64 %57, 16
  %65 = and i64 %64, -16
  %66 = call i8* @_Znwm(i64 %65) #14
  store i8* %66, i8** %16, align 8
  %67 = or i64 %65, -9223372036854775808
  store i64 %67, i64* %17, align 8
  store i64 %57, i64* %18, align 8
  br label %71

68:                                               ; preds = %61
  %69 = trunc i64 %57 to i8
  store i8 %69, i8* %20, align 1
  %70 = icmp eq i64 %57, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %68, %63
  %72 = phi i8* [ %66, %63 ], [ %15, %68 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %72, i8* align 1 %55, i64 %57, i1 false) #12
  br label %73

73:                                               ; preds = %68, %71
  %74 = phi i8* [ %15, %68 ], [ %72, %71 ]
  %75 = getelementptr inbounds i8, i8* %74, i64 %57
  store i8 0, i8* %75, align 1
  call fastcc void @_ZN4SkSLL15gather_uniformsEPNS_11UniformInfoERKNS_4TypeERKNS_6StringE(%"struct.SkSL::UniformInfo"* nonnull %4, %"class.SkSL::Type"* dereferenceable(184) %53, %"class.SkSL::String"* nonnull dereferenceable(24) %2)
  %76 = load i8, i8* %20, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %73
  %79 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %79) #14
  br label %80

80:                                               ; preds = %73, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #12
  br label %81

81:                                               ; preds = %80, %39, %27
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %30, i64 1
  %83 = ptrtoint %"class.std::__1::unique_ptr.64"* %82 to i64
  %84 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %29, i64 1
  %85 = ptrtoint %"class.SkSL::ProgramElement"** %84 to i64
  %86 = select i1 %28, i64 %32, i64 %85
  %87 = select i1 %28, i64 %83, i64 %31
  %88 = inttoptr i64 %87 to %"class.std::__1::unique_ptr.64"*
  %89 = icmp eq %"class.std::__1::unique_ptr.64"* %14, %88
  %90 = inttoptr i64 %86 to %"class.SkSL::ProgramElement"**
  %91 = icmp eq %"class.SkSL::ProgramElement"** %13, %90
  %92 = and i1 %89, %91
  br i1 %92, label %26, label %27
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSLL15gather_uniformsEPNS_11UniformInfoERKNS_4TypeERKNS_6StringE(%"struct.SkSL::UniformInfo"*, %"class.SkSL::Type"* nocapture readonly dereferenceable(184), %"class.SkSL::String"* dereferenceable(24)) unnamed_addr #0 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"struct.SkSL::UniformInfo::Uniform", align 8
  %8 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %141 [
    i32 9, label %24
    i32 0, label %10
    i32 8, label %76
    i32 11, label %76
    i32 4, label %76
  ]

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 8
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %141

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 6
  %16 = bitcast %"class.SkSL::String"* %6 to i8*
  %17 = bitcast %"class.SkSL::String"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.SkSL::String"* %2 to i8*
  %21 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %59

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 10, i32 0, i32 0
  %26 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 10, i32 0, i32 1
  %28 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %27, align 8
  %29 = icmp eq %"struct.SkSL::Type::Field"* %26, %28
  br i1 %29, label %141, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.SkSL::String"* %4 to i8*
  %32 = bitcast %"class.SkSL::String"* %5 to i8*
  %33 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %39

39:                                               ; preds = %30, %56
  %40 = phi %"struct.SkSL::Type::Field"* [ %26, %30 ], [ %57, %56 ]
  %41 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %40, i64 0, i32 2
  %42 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %41, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #12
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #12
  %43 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %40, i64 0, i32 1, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %40, i64 0, i32 1, i32 1
  %46 = load i64, i64* %45, align 8
  call void @_ZNK4SkSL6StringplENS_14StringFragmentE(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* %44, i64 %46) #12
  call fastcc void @_ZN4SkSLL15gather_uniformsEPNS_11UniformInfoERKNS_4TypeERKNS_6StringE(%"struct.SkSL::UniformInfo"* %0, %"class.SkSL::Type"* dereferenceable(184) %42, %"class.SkSL::String"* nonnull dereferenceable(24) %4)
  %47 = load i8, i8* %34, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = load i8*, i8** %35, align 8
  call void @_ZdlPv(i8* %50) #14
  br label %51

51:                                               ; preds = %39, %49
  %52 = load i8, i8* %37, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %55) #14
  br label %56

56:                                               ; preds = %51, %54
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  %57 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %40, i64 1
  %58 = icmp eq %"struct.SkSL::Type::Field"* %57, %28
  br i1 %58, label %141, label %39

59:                                               ; preds = %14, %72
  %60 = phi i32 [ 0, %14 ], [ %73, %72 ]
  %61 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %15, align 8
  %62 = icmp eq %"class.SkSL::Type"* %61, null
  %63 = select i1 %62, %"class.SkSL::Type"* %1, %"class.SkSL::Type"* %61
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #12
  %64 = load i8, i8* %18, align 1
  %65 = icmp slt i8 %64, 0
  %66 = load i8*, i8** %19, align 8
  %67 = select i1 %65, i8* %66, i8* %20
  call void (%"class.SkSL::String"*, i8*, ...) @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* nonnull sret %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* %67, i32 %60) #12
  call fastcc void @_ZN4SkSLL15gather_uniformsEPNS_11UniformInfoERKNS_4TypeERKNS_6StringE(%"struct.SkSL::UniformInfo"* %0, %"class.SkSL::Type"* dereferenceable(184) %63, %"class.SkSL::String"* nonnull dereferenceable(24) %6)
  %68 = load i8, i8* %22, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %59
  %71 = load i8*, i8** %23, align 8
  call void @_ZdlPv(i8* %71) #14
  br label %72

72:                                               ; preds = %59, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #12
  %73 = add nuw nsw i32 %60, 1
  %74 = load i32, i32* %11, align 8
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %59, label %141

76:                                               ; preds = %3, %3, %3
  %77 = getelementptr inbounds %"struct.SkSL::UniformInfo", %"struct.SkSL::UniformInfo"* %0, i64 0, i32 0
  %78 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %78) #12
  %79 = bitcast %"class.SkSL::String"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %76
  %84 = bitcast %"class.SkSL::String"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %78, i8* align 8 %84, i64 24, i1 false) #12
  br label %91

85:                                               ; preds = %76
  %86 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %86, i8* %88, i64 %90) #12
  br label %91

91:                                               ; preds = %83, %85
  br label %92

92:                                               ; preds = %91, %96
  %93 = phi %"class.SkSL::Type"* [ %100, %96 ], [ %1, %91 ]
  %94 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %93, i64 0, i32 3
  %95 = load i32, i32* %94, align 8
  switch i32 %95, label %101 [
    i32 4, label %96
    i32 11, label %96
  ]

96:                                               ; preds = %92, %92
  %97 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %93, i64 0, i32 6
  %98 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %97, align 8
  %99 = icmp eq %"class.SkSL::Type"* %98, null
  %100 = select i1 %99, %"class.SkSL::Type"* %93, %"class.SkSL::Type"* %98
  br label %92

101:                                              ; preds = %92
  %102 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 1
  %103 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %93, i64 0, i32 4
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %102, align 8
  %105 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 2
  %106 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 9
  %107 = load i32, i32* %106, align 4
  store i32 %107, i32* %105, align 4
  %108 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 3
  %109 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 8
  %110 = load i32, i32* %109, align 8
  store i32 %110, i32* %108, align 8
  %111 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 4
  %112 = getelementptr inbounds %"struct.SkSL::UniformInfo", %"struct.SkSL::UniformInfo"* %0, i64 0, i32 1
  %113 = load i32, i32* %112, align 8
  store i32 %113, i32* %111, align 4
  %114 = getelementptr inbounds %"struct.SkSL::UniformInfo", %"struct.SkSL::UniformInfo"* %0, i64 0, i32 0, i32 0, i32 1
  %115 = load %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"** %114, align 8
  %116 = getelementptr inbounds %"struct.SkSL::UniformInfo", %"struct.SkSL::UniformInfo"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %117 = load %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"** %116, align 8
  %118 = icmp ult %"struct.SkSL::UniformInfo::Uniform"* %115, %117
  br i1 %118, label %119, label %127

119:                                              ; preds = %101
  %120 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %115 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* nonnull align 8 %78, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 24, i1 false) #12
  %121 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %115, i64 0, i32 1
  %122 = bitcast i32* %121 to i8*
  %123 = bitcast i32* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false) #12
  %124 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %115, i64 1
  %125 = ptrtoint %"struct.SkSL::UniformInfo::Uniform"* %124 to i64
  %126 = bitcast %"struct.SkSL::UniformInfo::Uniform"** %114 to i64*
  store i64 %125, i64* %126, align 8
  br label %135

127:                                              ; preds = %101
  call void @_ZNSt3__16vectorIN4SkSL11UniformInfo7UniformENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.261"* %77, %"struct.SkSL::UniformInfo::Uniform"* nonnull dereferenceable(40) %7) #12
  %128 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %129 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %128, i64 0, i32 1, i32 0
  %130 = load i8, i8* %129, align 1
  %131 = icmp slt i8 %130, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  call void @_ZdlPv(i8* %134) #14
  br label %135

135:                                              ; preds = %119, %127, %132
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %78) #12
  %136 = load i32, i32* %109, align 8
  %137 = load i32, i32* %106, align 4
  %138 = mul nsw i32 %137, %136
  %139 = load i32, i32* %112, align 8
  %140 = add nsw i32 %139, %138
  store i32 %140, i32* %112, align 8
  br label %141

141:                                              ; preds = %72, %56, %10, %24, %3, %135
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS_7ProgramEPN4skvm7BuilderE(%"struct.SkSL::Program"* dereferenceable(128), %"class.skvm::Builder"*) local_unnamed_addr #3 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"struct.SkSL::StringFragment"*
  %5 = alloca %"struct.skvm::Uniforms", align 8
  %6 = alloca %"class.std::__1::vector.271", align 8
  %7 = alloca %"class.std::__1::vector.125", align 8
  %8 = alloca %"struct.skvm::Color", align 8
  %9 = alloca %"struct.skvm::Color", align 8
  %10 = alloca %"struct.skvm::Coord", align 8
  %11 = alloca %"struct.skvm::Coord", align 8
  %12 = alloca %"class.std::__1::function", align 8
  %13 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.62"* %13 to i64*
  %15 = load i64, i64* %14, align 8, !noalias !79
  %16 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %17 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %18 = bitcast %"class.std::__1::vector.75"* %17 to i64*
  %19 = load i64, i64* %18, align 8, !noalias !79
  %20 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %21 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %20, align 8, !noalias !79
  %22 = load %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"** %16, align 8, !noalias !82
  %23 = bitcast <2 x i64>* %3 to i8*
  %24 = inttoptr i64 %15 to %"class.std::__1::unique_ptr.64"*
  %25 = icmp eq %"class.std::__1::unique_ptr.64"* %22, %24
  %26 = inttoptr i64 %19 to %"class.SkSL::ProgramElement"**
  %27 = icmp eq %"class.SkSL::ProgramElement"** %21, %26
  %28 = and i1 %25, %27
  br i1 %28, label %559, label %29

29:                                               ; preds = %2, %50
  %30 = phi i1 [ %60, %50 ], [ %27, %2 ]
  %31 = phi %"class.SkSL::ProgramElement"** [ %59, %50 ], [ %26, %2 ]
  %32 = phi %"class.std::__1::unique_ptr.64"* [ %57, %50 ], [ %24, %2 ]
  %33 = phi i64 [ %56, %50 ], [ %19, %2 ]
  %34 = phi i64 [ %55, %50 ], [ %15, %2 ]
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %32, i64 0, i32 0, i32 0, i32 0
  %36 = select i1 %30, %"class.SkSL::ProgramElement"** %35, %"class.SkSL::ProgramElement"** %31
  %37 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %36, align 8
  %38 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %37, i64 0, i32 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #12
  br i1 %40, label %41, label %49

41:                                               ; preds = %29
  %42 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %37, i64 1
  %43 = bitcast %"class.SkSL::ProgramElement"* %42 to %"class.SkSL::FunctionDeclaration"**
  %44 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %43, align 8
  %45 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %44, i64 0, i32 0, i32 1, i32 0
  %46 = bitcast i8** %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  store <2 x i64> %47, <2 x i64>* %3, align 16
  %48 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqEPKc(%"struct.SkSL::StringFragment"* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #12
  br i1 %48, label %62, label %50

49:                                               ; preds = %29
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #12
  br label %50

50:                                               ; preds = %49, %41
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %32, i64 1
  %52 = ptrtoint %"class.std::__1::unique_ptr.64"* %51 to i64
  %53 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %31, i64 1
  %54 = ptrtoint %"class.SkSL::ProgramElement"** %53 to i64
  %55 = select i1 %30, i64 %52, i64 %34
  %56 = select i1 %30, i64 %33, i64 %54
  %57 = inttoptr i64 %55 to %"class.std::__1::unique_ptr.64"*
  %58 = icmp eq %"class.std::__1::unique_ptr.64"* %22, %57
  %59 = inttoptr i64 %56 to %"class.SkSL::ProgramElement"**
  %60 = icmp eq %"class.SkSL::ProgramElement"** %21, %59
  %61 = and i1 %58, %60
  br i1 %61, label %559, label %29

62:                                               ; preds = %41
  %63 = bitcast %"class.SkSL::ProgramElement"* %37 to %"class.SkSL::FunctionDefinition"*
  %64 = icmp eq %"class.SkSL::ProgramElement"* %37, null
  br i1 %64, label %559, label %65

65:                                               ; preds = %62
  %66 = load i64, i64* %14, align 8, !noalias !85
  %67 = load i64, i64* %18, align 8, !noalias !85
  %68 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %20, align 8, !noalias !85
  %69 = load %"class.std::__1::unique_ptr.64"*, %"class.std::__1::unique_ptr.64"** %16, align 8, !noalias !88
  %70 = inttoptr i64 %66 to %"class.std::__1::unique_ptr.64"*
  %71 = icmp eq %"class.std::__1::unique_ptr.64"* %69, %70
  %72 = inttoptr i64 %67 to %"class.SkSL::ProgramElement"**
  %73 = icmp eq %"class.SkSL::ProgramElement"** %68, %72
  %74 = and i1 %71, %73
  br i1 %74, label %75, label %107

75:                                               ; preds = %145, %65
  %76 = phi i32 [ 0, %65 ], [ %146, %145 ]
  %77 = phi i64 [ 0, %65 ], [ %147, %145 ]
  %78 = bitcast %"struct.skvm::Uniforms"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %78) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 32, i1 false)
  %79 = call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %1, i32 0) #12
  %80 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 0, i32 0
  store i32 %79, i32* %80, align 8
  %81 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 1
  %82 = bitcast %"class.std::__1::vector.125"* %81 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 24, i1 false) #12
  %83 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5indexEv(%"class.skvm::Builder"* %1) #12
  %84 = extractvalue { %"class.skvm::Builder"*, i32 } %83, 0
  %85 = extractvalue { %"class.skvm::Builder"*, i32 } %83, 1
  %86 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* nonnull %5, float 0.000000e+00) #12
  %87 = trunc i64 %86 to i32
  %88 = lshr i64 %86, 32
  %89 = trunc i64 %88 to i32
  %90 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %87, i32 %89) #12
  %91 = extractvalue { %"class.skvm::Builder"*, i32 } %90, 0
  %92 = extractvalue { %"class.skvm::Builder"*, i32 } %90, 1
  %93 = bitcast %"class.std::__1::vector.271"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93) #12
  %94 = getelementptr inbounds %"class.std::__1::vector.271", %"class.std::__1::vector.271"* %6, i64 0, i32 0, i32 0
  %95 = getelementptr inbounds %"class.std::__1::vector.271", %"class.std::__1::vector.271"* %6, i64 0, i32 0, i32 1
  %96 = getelementptr inbounds %"class.std::__1::vector.271", %"class.std::__1::vector.271"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 0, i64 24, i1 false) #12
  %97 = icmp sgt i32 %76, 0
  br i1 %97, label %98, label %159

98:                                               ; preds = %75
  %99 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 1, i32 0, i32 1
  %100 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast i32** %99 to i64*
  %102 = bitcast %"class.std::__1::vector.125"* %81 to i64*
  %103 = bitcast i32** %100 to i64*
  %104 = bitcast %struct.Child** %95 to i64*
  %105 = bitcast %"class.std::__1::vector.271"* %6 to i64*
  %106 = bitcast %struct.Child** %96 to i64*
  br label %169

107:                                              ; preds = %65, %145
  %108 = phi i1 [ %157, %145 ], [ %73, %65 ]
  %109 = phi %"class.SkSL::ProgramElement"** [ %156, %145 ], [ %72, %65 ]
  %110 = phi %"class.std::__1::unique_ptr.64"* [ %154, %145 ], [ %70, %65 ]
  %111 = phi i64 [ %147, %145 ], [ 0, %65 ]
  %112 = phi i32 [ %146, %145 ], [ 0, %65 ]
  %113 = phi i64 [ %153, %145 ], [ %67, %65 ]
  %114 = phi i64 [ %152, %145 ], [ %66, %65 ]
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %110, i64 0, i32 0, i32 0, i32 0
  %116 = select i1 %108, %"class.SkSL::ProgramElement"** %115, %"class.SkSL::ProgramElement"** %109
  %117 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %116, align 8
  %118 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %117, i64 0, i32 0, i32 2
  %119 = load i32, i32* %118, align 4
  %120 = icmp eq i32 %119, 4
  br i1 %120, label %121, label %145

121:                                              ; preds = %107
  %122 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %117, i64 1
  %123 = bitcast %"class.SkSL::ProgramElement"* %122 to %"class.SkSL::VarDeclaration"**
  %124 = load %"class.SkSL::VarDeclaration"*, %"class.SkSL::VarDeclaration"** %123, align 8
  %125 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %124, i64 0, i32 1
  %126 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %125, align 8
  %127 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %126, i64 0, i32 0, i32 2
  %128 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %127, align 8
  %129 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %128, i64 0, i32 3
  %130 = load i32, i32* %129, align 8
  %131 = add i32 %130, -13
  %132 = icmp ult i32 %131, 2
  br i1 %132, label %133, label %135

133:                                              ; preds = %121
  %134 = add nsw i32 %112, 1
  br label %145

135:                                              ; preds = %121
  %136 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %126, i64 0, i32 2
  %137 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %136, align 8
  %138 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %137, i64 0, i32 1
  %139 = load i32, i32* %138, align 8
  %140 = and i32 %139, 8
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %145, label %142

142:                                              ; preds = %135
  %143 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %128)
  %144 = add i64 %143, %111
  br label %145

145:                                              ; preds = %135, %133, %142, %107
  %146 = phi i32 [ %112, %107 ], [ %134, %133 ], [ %112, %142 ], [ %112, %135 ]
  %147 = phi i64 [ %111, %107 ], [ %111, %133 ], [ %144, %142 ], [ %111, %135 ]
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64"* %110, i64 1
  %149 = ptrtoint %"class.std::__1::unique_ptr.64"* %148 to i64
  %150 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %109, i64 1
  %151 = ptrtoint %"class.SkSL::ProgramElement"** %150 to i64
  %152 = select i1 %108, i64 %149, i64 %114
  %153 = select i1 %108, i64 %113, i64 %151
  %154 = inttoptr i64 %152 to %"class.std::__1::unique_ptr.64"*
  %155 = icmp eq %"class.std::__1::unique_ptr.64"* %69, %154
  %156 = inttoptr i64 %153 to %"class.SkSL::ProgramElement"**
  %157 = icmp eq %"class.SkSL::ProgramElement"** %68, %156
  %158 = and i1 %155, %157
  br i1 %158, label %75, label %107

159:                                              ; preds = %408, %75
  %160 = bitcast %"class.std::__1::vector.125"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %160) #12
  %161 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %7, i64 0, i32 0, i32 0
  %162 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %7, i64 0, i32 0, i32 1
  %163 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 0, i64 24, i1 false) #12
  %164 = icmp eq i64 %77, 0
  %165 = bitcast i32** %162 to i64*
  br i1 %164, label %411, label %166

166:                                              ; preds = %159
  %167 = bitcast %"class.std::__1::vector.125"* %7 to i64*
  %168 = bitcast i32** %163 to i64*
  br label %489

169:                                              ; preds = %408, %98
  %170 = phi i32 [ 0, %98 ], [ %409, %408 ]
  %171 = load i32*, i32** %99, align 8
  %172 = load i32*, i32** %100, align 8
  %173 = icmp eq i32* %171, %172
  %174 = ptrtoint i32* %172 to i64
  br i1 %173, label %178, label %175

175:                                              ; preds = %169
  store i32 0, i32* %171, align 4
  %176 = getelementptr inbounds i32, i32* %171, i64 1
  %177 = ptrtoint i32* %176 to i64
  store i64 %177, i64* %101, align 8
  br label %223

178:                                              ; preds = %169
  %179 = ptrtoint i32* %171 to i64
  %180 = load i64, i64* %102, align 8
  %181 = sub i64 %179, %180
  %182 = ashr exact i64 %181, 2
  %183 = add nsw i64 %182, 1
  %184 = icmp ugt i64 %183, 4611686018427387903
  br i1 %184, label %185, label %187

185:                                              ; preds = %178
  %186 = bitcast %"class.std::__1::vector.125"* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %186) #13
  unreachable

187:                                              ; preds = %178
  %188 = sub i64 %174, %180
  %189 = ashr exact i64 %188, 2
  %190 = icmp ult i64 %189, 2305843009213693951
  br i1 %190, label %191, label %199

191:                                              ; preds = %187
  %192 = ashr exact i64 %188, 1
  %193 = icmp ult i64 %192, %183
  %194 = select i1 %193, i64 %183, i64 %192
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %204, label %196

196:                                              ; preds = %191
  %197 = icmp ugt i64 %194, 4611686018427387903
  br i1 %197, label %198, label %199

198:                                              ; preds = %196
  call void @abort() #13
  unreachable

199:                                              ; preds = %196, %187
  %200 = phi i64 [ %194, %196 ], [ 4611686018427387903, %187 ]
  %201 = shl i64 %200, 2
  %202 = call i8* @_Znwm(i64 %201) #14
  %203 = bitcast i8* %202 to i32*
  br label %204

204:                                              ; preds = %199, %191
  %205 = phi i64 [ %200, %199 ], [ 0, %191 ]
  %206 = phi i8* [ %202, %199 ], [ null, %191 ]
  %207 = phi i32* [ %203, %199 ], [ null, %191 ]
  %208 = getelementptr inbounds i32, i32* %207, i64 %182
  %209 = getelementptr inbounds i32, i32* %207, i64 %205
  %210 = ptrtoint i32* %209 to i64
  store i32 0, i32* %208, align 4
  %211 = getelementptr inbounds i32, i32* %208, i64 1
  %212 = ptrtoint i32* %211 to i64
  %213 = ptrtoint i32* %207 to i64
  %214 = icmp sgt i64 %181, 0
  br i1 %214, label %215, label %217

215:                                              ; preds = %204
  %216 = inttoptr i64 %180 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %206, i8* align 4 %216, i64 %181, i1 false) #12
  br label %217

217:                                              ; preds = %215, %204
  store i64 %213, i64* %102, align 8
  store i64 %212, i64* %101, align 8
  store i64 %210, i64* %103, align 8
  %218 = icmp eq i64 %180, 0
  br i1 %218, label %223, label %219

219:                                              ; preds = %217
  %220 = inttoptr i64 %180 to i8*
  call void @_ZdlPv(i8* %220) #14
  %221 = load i32*, i32** %99, align 8
  %222 = ptrtoint i32* %221 to i64
  br label %223

223:                                              ; preds = %175, %217, %219
  %224 = phi i64 [ %177, %175 ], [ %212, %217 ], [ %222, %219 ]
  %225 = phi i32* [ %176, %175 ], [ %211, %217 ], [ %221, %219 ]
  %226 = load i32*, i32** %100, align 8
  %227 = icmp eq i32* %225, %226
  br i1 %227, label %231, label %228

228:                                              ; preds = %223
  store i32 0, i32* %225, align 4
  %229 = getelementptr inbounds i32, i32* %225, i64 1
  %230 = ptrtoint i32* %229 to i64
  store i64 %230, i64* %101, align 8
  br label %278

231:                                              ; preds = %223
  %232 = ptrtoint i32* %226 to i64
  %233 = load i64, i64* %102, align 8
  %234 = sub i64 %232, %233
  %235 = ashr exact i64 %234, 2
  %236 = add nsw i64 %235, 1
  %237 = icmp ugt i64 %236, 4611686018427387903
  br i1 %237, label %238, label %240

238:                                              ; preds = %231
  %239 = bitcast %"class.std::__1::vector.125"* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %239) #13
  unreachable

240:                                              ; preds = %231
  %241 = icmp ult i64 %235, 2305843009213693951
  br i1 %241, label %242, label %250

242:                                              ; preds = %240
  %243 = ashr exact i64 %234, 1
  %244 = icmp ult i64 %243, %236
  %245 = select i1 %244, i64 %236, i64 %243
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = icmp ugt i64 %245, 4611686018427387903
  br i1 %248, label %249, label %250

249:                                              ; preds = %247
  call void @abort() #13
  unreachable

250:                                              ; preds = %247, %240
  %251 = phi i64 [ %245, %247 ], [ 4611686018427387903, %240 ]
  %252 = shl i64 %251, 2
  %253 = call i8* @_Znwm(i64 %252) #14
  %254 = bitcast i8* %253 to i32*
  br label %255

255:                                              ; preds = %250, %242
  %256 = phi i64 [ %251, %250 ], [ 0, %242 ]
  %257 = phi i32* [ %254, %250 ], [ null, %242 ]
  %258 = getelementptr inbounds i32, i32* %257, i64 %235
  %259 = getelementptr inbounds i32, i32* %257, i64 %256
  %260 = ptrtoint i32* %259 to i64
  store i32 0, i32* %258, align 4
  %261 = getelementptr inbounds i32, i32* %258, i64 1
  %262 = ptrtoint i32* %261 to i64
  %263 = sub i64 %224, %233
  %264 = ashr exact i64 %263, 2
  %265 = sub nsw i64 0, %264
  %266 = getelementptr inbounds i32, i32* %258, i64 %265
  %267 = ptrtoint i32* %266 to i64
  %268 = icmp sgt i64 %263, 0
  br i1 %268, label %269, label %272

269:                                              ; preds = %255
  %270 = bitcast i32* %266 to i8*
  %271 = inttoptr i64 %233 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %270, i8* align 4 %271, i64 %263, i1 false) #12
  br label %272

272:                                              ; preds = %269, %255
  store i64 %267, i64* %102, align 8
  store i64 %262, i64* %101, align 8
  store i64 %260, i64* %103, align 8
  %273 = icmp eq i64 %233, 0
  br i1 %273, label %282, label %274

274:                                              ; preds = %272
  %275 = inttoptr i64 %233 to i8*
  call void @_ZdlPv(i8* %275) #14
  %276 = load i64, i64* %101, align 8
  %277 = inttoptr i64 %276 to i32*
  br label %278

278:                                              ; preds = %274, %228
  %279 = phi i32* [ %277, %274 ], [ %229, %228 ]
  %280 = phi i64 [ %276, %274 ], [ %230, %228 ]
  %281 = load i64, i64* %102, align 8
  br label %282

282:                                              ; preds = %278, %272
  %283 = phi i64 [ %281, %278 ], [ %267, %272 ]
  %284 = phi i32* [ %279, %278 ], [ %261, %272 ]
  %285 = phi i64 [ %280, %278 ], [ %262, %272 ]
  %286 = load i32, i32* %80, align 8
  %287 = sub i64 %285, %283
  %288 = shl i64 %287, 32
  %289 = add i64 %288, -34359738368
  %290 = zext i32 %286 to i64
  %291 = or i64 %289, %290
  %292 = load i32*, i32** %100, align 8
  %293 = icmp eq i32* %284, %292
  br i1 %293, label %297, label %294

294:                                              ; preds = %282
  store i32 0, i32* %284, align 4
  %295 = getelementptr inbounds i32, i32* %284, i64 1
  %296 = ptrtoint i32* %295 to i64
  store i64 %296, i64* %101, align 8
  br label %341

297:                                              ; preds = %282
  %298 = ptrtoint i32* %292 to i64
  %299 = sub i64 %298, %283
  %300 = ashr exact i64 %299, 2
  %301 = add nsw i64 %300, 1
  %302 = icmp ugt i64 %301, 4611686018427387903
  br i1 %302, label %303, label %305

303:                                              ; preds = %297
  %304 = bitcast %"class.std::__1::vector.125"* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %304) #13
  unreachable

305:                                              ; preds = %297
  %306 = icmp ult i64 %300, 2305843009213693951
  br i1 %306, label %307, label %315

307:                                              ; preds = %305
  %308 = ashr exact i64 %299, 1
  %309 = icmp ult i64 %308, %301
  %310 = select i1 %309, i64 %301, i64 %308
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %320, label %312

312:                                              ; preds = %307
  %313 = icmp ugt i64 %310, 4611686018427387903
  br i1 %313, label %314, label %315

314:                                              ; preds = %312
  call void @abort() #13
  unreachable

315:                                              ; preds = %312, %305
  %316 = phi i64 [ %310, %312 ], [ 4611686018427387903, %305 ]
  %317 = shl i64 %316, 2
  %318 = call i8* @_Znwm(i64 %317) #14
  %319 = bitcast i8* %318 to i32*
  br label %320

320:                                              ; preds = %315, %307
  %321 = phi i64 [ %316, %315 ], [ 0, %307 ]
  %322 = phi i32* [ %319, %315 ], [ null, %307 ]
  %323 = getelementptr inbounds i32, i32* %322, i64 %300
  %324 = getelementptr inbounds i32, i32* %322, i64 %321
  %325 = ptrtoint i32* %324 to i64
  store i32 0, i32* %323, align 4
  %326 = getelementptr inbounds i32, i32* %323, i64 1
  %327 = ptrtoint i32* %326 to i64
  %328 = ashr exact i64 %287, 2
  %329 = sub nsw i64 0, %328
  %330 = getelementptr inbounds i32, i32* %323, i64 %329
  %331 = ptrtoint i32* %330 to i64
  %332 = icmp sgt i64 %287, 0
  br i1 %332, label %333, label %336

333:                                              ; preds = %320
  %334 = bitcast i32* %330 to i8*
  %335 = inttoptr i64 %283 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %334, i8* align 4 %335, i64 %287, i1 false) #12
  br label %336

336:                                              ; preds = %333, %320
  store i64 %331, i64* %102, align 8
  store i64 %327, i64* %101, align 8
  store i64 %325, i64* %103, align 8
  %337 = icmp eq i64 %283, 0
  br i1 %337, label %341, label %338

338:                                              ; preds = %336
  %339 = inttoptr i64 %283 to i8*
  call void @_ZdlPv(i8* %339) #14
  %340 = load i64, i64* %101, align 8
  br label %341

341:                                              ; preds = %294, %336, %338
  %342 = phi i64 [ %296, %294 ], [ %327, %336 ], [ %340, %338 ]
  %343 = load i32, i32* %80, align 8
  %344 = load i64, i64* %102, align 8
  %345 = sub i64 %342, %344
  %346 = shl i64 %345, 32
  %347 = add i64 %346, -17179869184
  %348 = lshr exact i64 %347, 32
  %349 = trunc i64 %348 to i32
  %350 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %343, i32 %349) #12
  %351 = extractvalue { %"class.skvm::Builder"*, i32 } %350, 0
  %352 = extractvalue { %"class.skvm::Builder"*, i32 } %350, 1
  %353 = load %struct.Child*, %struct.Child** %95, align 8
  %354 = load %struct.Child*, %struct.Child** %96, align 8
  %355 = icmp ult %struct.Child* %353, %354
  %356 = ptrtoint %struct.Child* %354 to i64
  br i1 %355, label %357, label %363

357:                                              ; preds = %341
  %358 = bitcast %struct.Child* %353 to i64*
  store i64 %291, i64* %358, align 8
  %359 = getelementptr inbounds %struct.Child, %struct.Child* %353, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %351, %"class.skvm::Builder"** %359, align 8
  %360 = getelementptr inbounds %struct.Child, %struct.Child* %353, i64 0, i32 1, i32 1
  store i32 %352, i32* %360, align 8
  %361 = getelementptr inbounds %struct.Child, %struct.Child* %353, i64 1
  %362 = ptrtoint %struct.Child* %361 to i64
  store i64 %362, i64* %104, align 8
  br label %408

363:                                              ; preds = %341
  %364 = ptrtoint %struct.Child* %353 to i64
  %365 = load i64, i64* %105, align 8
  %366 = sub i64 %364, %365
  %367 = sdiv exact i64 %366, 24
  %368 = add nsw i64 %367, 1
  %369 = icmp ugt i64 %368, 768614336404564650
  br i1 %369, label %370, label %372

370:                                              ; preds = %363
  %371 = bitcast %"class.std::__1::vector.271"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %371) #13
  unreachable

372:                                              ; preds = %363
  %373 = sub i64 %356, %365
  %374 = sdiv exact i64 %373, 24
  %375 = icmp ult i64 %374, 384307168202282325
  br i1 %375, label %376, label %381

376:                                              ; preds = %372
  %377 = shl nsw i64 %374, 1
  %378 = icmp ult i64 %377, %368
  %379 = select i1 %378, i64 %368, i64 %377
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %386, label %381

381:                                              ; preds = %376, %372
  %382 = phi i64 [ %379, %376 ], [ 768614336404564650, %372 ]
  %383 = mul i64 %382, 24
  %384 = call i8* @_Znwm(i64 %383) #14
  %385 = bitcast i8* %384 to %struct.Child*
  br label %386

386:                                              ; preds = %381, %376
  %387 = phi i64 [ %382, %381 ], [ 0, %376 ]
  %388 = phi %struct.Child* [ %385, %381 ], [ null, %376 ]
  %389 = getelementptr inbounds %struct.Child, %struct.Child* %388, i64 %367
  %390 = getelementptr inbounds %struct.Child, %struct.Child* %388, i64 %387
  %391 = ptrtoint %struct.Child* %390 to i64
  %392 = bitcast %struct.Child* %389 to i64*
  store i64 %291, i64* %392, align 8
  %393 = getelementptr inbounds %struct.Child, %struct.Child* %388, i64 %367, i32 1, i32 0
  store %"class.skvm::Builder"* %351, %"class.skvm::Builder"** %393, align 8
  %394 = getelementptr inbounds %struct.Child, %struct.Child* %388, i64 %367, i32 1, i32 1
  store i32 %352, i32* %394, align 8
  %395 = getelementptr inbounds %struct.Child, %struct.Child* %389, i64 1
  %396 = ptrtoint %struct.Child* %395 to i64
  %397 = sdiv exact i64 %366, -24
  %398 = getelementptr inbounds %struct.Child, %struct.Child* %389, i64 %397
  %399 = ptrtoint %struct.Child* %398 to i64
  %400 = icmp sgt i64 %366, 0
  br i1 %400, label %401, label %404

401:                                              ; preds = %386
  %402 = bitcast %struct.Child* %398 to i8*
  %403 = inttoptr i64 %365 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %402, i8* align 8 %403, i64 %366, i1 false) #12
  br label %404

404:                                              ; preds = %401, %386
  store i64 %399, i64* %105, align 8
  store i64 %396, i64* %104, align 8
  store i64 %391, i64* %106, align 8
  %405 = icmp eq i64 %365, 0
  br i1 %405, label %408, label %406

406:                                              ; preds = %404
  %407 = inttoptr i64 %365 to i8*
  call void @_ZdlPv(i8* %407) #14
  br label %408

408:                                              ; preds = %357, %404, %406
  %409 = add nuw nsw i32 %170, 1
  %410 = icmp eq i32 %409, %76
  br i1 %410, label %159, label %169

411:                                              ; preds = %552, %159
  %412 = bitcast %"struct.skvm::Color"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %412) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %412, i8 -86, i64 64, i1 false)
  call void @_ZN4skvm7Builder12uniformColorE8SkRGBA4fIL11SkAlphaType3EEPNS_8UniformsE(%"struct.skvm::Color"* nonnull sret %8, %"class.skvm::Builder"* %1, <2 x float> <float 1.000000e+00, float 1.000000e+00>, <2 x float> <float 1.000000e+00, float 1.000000e+00>, %"struct.skvm::Uniforms"* nonnull %5) #12
  %413 = bitcast %"struct.skvm::Color"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %413) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %413, i8 -86, i64 64, i1 false)
  %414 = load i32*, i32** %161, align 8
  %415 = load i64, i64* %165, align 8
  %416 = ptrtoint i32* %414 to i64
  %417 = sub i64 %415, %416
  %418 = ashr exact i64 %417, 2
  %419 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %84, %"class.skvm::Builder"** %419, align 8
  %420 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 0, i32 1
  store i32 %85, i32* %420, align 8
  %421 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 0, i32 2, i64 0
  %422 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 1, i32 0
  %423 = bitcast i8* %421 to i32*
  store i32 -1431655766, i32* %423, align 4
  store %"class.skvm::Builder"* %91, %"class.skvm::Builder"** %422, align 8
  %424 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 1, i32 1
  store i32 %92, i32* %424, align 8
  %425 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %10, i64 0, i32 1, i32 2, i64 0
  %426 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 0, i32 0
  %427 = bitcast i8* %425 to i32*
  store i32 -1431655766, i32* %427, align 4
  store %"class.skvm::Builder"* %84, %"class.skvm::Builder"** %426, align 8
  %428 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 0, i32 1
  store i32 %85, i32* %428, align 8
  %429 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 0, i32 2, i64 0
  %430 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 1, i32 0
  %431 = bitcast i8* %429 to i32*
  store i32 -1431655766, i32* %431, align 4
  store %"class.skvm::Builder"* %91, %"class.skvm::Builder"** %430, align 8
  %432 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 1, i32 1
  store i32 %92, i32* %432, align 8
  %433 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %11, i64 0, i32 1, i32 2, i64 0
  %434 = bitcast i8* %433 to i32*
  store i32 -1431655766, i32* %434, align 4
  %435 = ptrtoint %"class.std::__1::vector.271"* %6 to i64
  %436 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %12, i64 0, i32 0, i32 1, i32 0
  %437 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %12, i64 0, i32 0, i32 2
  store void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)* @"_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE11__call_implINS0_20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS9_7ProgramEPNS2_7BuilderEE4$_52S5_EEEES3_PKNS0_16__policy_storageEiOS4_OS3_", void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)** %436, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS4_7ProgramEPN4skvm7BuilderEE4$_52FNS8_5ColorEiNS8_5CoordESC_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %437, align 8
  %438 = bitcast %"class.std::__1::function"* %12 to i64*
  store i64 %435, i64* %438, align 8
  call void @_ZN4SkSL13ProgramToSkVMERKNS_7ProgramERKNS_18FunctionDefinitionEPN4skvm7BuilderE6SkSpanIiENS6_5CoordESB_NS6_5ColorENSt3__18functionIFSC_iSB_SC_EEE(%"struct.skvm::Color"* nonnull sret %9, %"struct.SkSL::Program"* dereferenceable(128) %0, %"class.SkSL::FunctionDefinition"* nonnull dereferenceable(88) %63, %"class.skvm::Builder"* %1, i32* %414, i64 %418, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %10, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %11, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %8, %"class.std::__1::function"* nonnull %12)
  %439 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %437, align 8
  %440 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %439, i64 0, i32 1
  %441 = load void (i8*)*, void (i8*)** %440, align 8
  %442 = icmp eq void (i8*)* %441, null
  br i1 %442, label %446, label %443

443:                                              ; preds = %411
  %444 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %12, i64 0, i32 0, i32 0, i32 0
  %445 = load i8*, i8** %444, align 8
  call void %441(i8* %445) #12
  br label %446

446:                                              ; preds = %411, %443
  %447 = call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %1, i32 4) #12
  %448 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 0, i32 0
  %449 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %448, align 8
  %450 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 0, i32 1
  %451 = load i32, i32* %450, align 8
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %449, i32 %447, %"class.skvm::Builder"* %449, i32 %451) #12
  %452 = call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %1, i32 4) #12
  %453 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 1, i32 0
  %454 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %453, align 8
  %455 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 1, i32 1
  %456 = load i32, i32* %455, align 8
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %454, i32 %452, %"class.skvm::Builder"* %454, i32 %456) #12
  %457 = call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %1, i32 4) #12
  %458 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 2, i32 0
  %459 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %458, align 8
  %460 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 2, i32 1
  %461 = load i32, i32* %460, align 8
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %459, i32 %457, %"class.skvm::Builder"* %459, i32 %461) #12
  %462 = call i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"* %1, i32 4) #12
  %463 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 3, i32 0
  %464 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %463, align 8
  %465 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %9, i64 0, i32 3, i32 1
  %466 = load i32, i32* %465, align 8
  call void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"* %464, i32 %462, %"class.skvm::Builder"* %464, i32 %466) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %413) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %412) #12
  %467 = load i32*, i32** %161, align 8
  %468 = icmp eq i32* %467, null
  br i1 %468, label %472, label %469

469:                                              ; preds = %446
  %470 = ptrtoint i32* %467 to i64
  store i64 %470, i64* %165, align 8
  %471 = bitcast i32* %467 to i8*
  call void @_ZdlPv(i8* %471) #14
  br label %472

472:                                              ; preds = %446, %469
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %160) #12
  %473 = load %struct.Child*, %struct.Child** %94, align 8
  %474 = icmp eq %struct.Child* %473, null
  br i1 %474, label %479, label %475

475:                                              ; preds = %472
  %476 = ptrtoint %struct.Child* %473 to i64
  %477 = bitcast %struct.Child** %95 to i64*
  store i64 %476, i64* %477, align 8
  %478 = bitcast %struct.Child* %473 to i8*
  call void @_ZdlPv(i8* %478) #14
  br label %479

479:                                              ; preds = %472, %475
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93) #12
  %480 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 1, i32 0, i32 0
  %481 = load i32*, i32** %480, align 8
  %482 = icmp eq i32* %481, null
  br i1 %482, label %488, label %483

483:                                              ; preds = %479
  %484 = ptrtoint i32* %481 to i64
  %485 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %5, i64 0, i32 1, i32 0, i32 1
  %486 = bitcast i32** %485 to i64*
  store i64 %484, i64* %486, align 8
  %487 = bitcast i32* %481 to i8*
  call void @_ZdlPv(i8* %487) #14
  br label %488

488:                                              ; preds = %479, %483
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %78) #12
  br label %559

489:                                              ; preds = %555, %166
  %490 = phi i64 [ 0, %166 ], [ %558, %555 ]
  %491 = phi i32* [ null, %166 ], [ %557, %555 ]
  %492 = phi i32* [ null, %166 ], [ %556, %555 ]
  %493 = phi i64 [ 0, %166 ], [ %553, %555 ]
  %494 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* nonnull %5, float 0.000000e+00) #12
  %495 = trunc i64 %494 to i32
  %496 = lshr i64 %494, 32
  %497 = trunc i64 %496 to i32
  %498 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %495, i32 %497) #12
  %499 = extractvalue { %"class.skvm::Builder"*, i32 } %498, 1
  %500 = icmp ult i32* %492, %491
  %501 = ptrtoint i32* %491 to i64
  br i1 %500, label %502, label %505

502:                                              ; preds = %489
  store i32 %499, i32* %492, align 4
  %503 = getelementptr inbounds i32, i32* %492, i64 1
  %504 = ptrtoint i32* %503 to i64
  store i64 %504, i64* %165, align 8
  br label %552

505:                                              ; preds = %489
  %506 = ptrtoint i32* %492 to i64
  %507 = load i64, i64* %167, align 8
  %508 = sub i64 %506, %507
  %509 = ashr exact i64 %508, 2
  %510 = add nsw i64 %509, 1
  %511 = icmp ugt i64 %510, 4611686018427387903
  br i1 %511, label %512, label %514

512:                                              ; preds = %505
  %513 = bitcast %"class.std::__1::vector.125"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %513) #13
  unreachable

514:                                              ; preds = %505
  %515 = sub i64 %501, %507
  %516 = ashr exact i64 %515, 2
  %517 = icmp ult i64 %516, 2305843009213693951
  br i1 %517, label %518, label %526

518:                                              ; preds = %514
  %519 = ashr exact i64 %515, 1
  %520 = icmp ult i64 %519, %510
  %521 = select i1 %520, i64 %510, i64 %519
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %531, label %523

523:                                              ; preds = %518
  %524 = icmp ugt i64 %521, 4611686018427387903
  br i1 %524, label %525, label %526

525:                                              ; preds = %523
  call void @abort() #13
  unreachable

526:                                              ; preds = %523, %514
  %527 = phi i64 [ %521, %523 ], [ 4611686018427387903, %514 ]
  %528 = shl i64 %527, 2
  %529 = call i8* @_Znwm(i64 %528) #14
  %530 = bitcast i8* %529 to i32*
  br label %531

531:                                              ; preds = %526, %518
  %532 = phi i64 [ %527, %526 ], [ 0, %518 ]
  %533 = phi i32* [ %530, %526 ], [ null, %518 ]
  %534 = getelementptr inbounds i32, i32* %533, i64 %509
  %535 = getelementptr inbounds i32, i32* %533, i64 %532
  %536 = ptrtoint i32* %535 to i64
  store i32 %499, i32* %534, align 4
  %537 = getelementptr inbounds i32, i32* %534, i64 1
  %538 = ptrtoint i32* %537 to i64
  %539 = sub i64 %490, %507
  %540 = ashr exact i64 %539, 2
  %541 = sub nsw i64 0, %540
  %542 = getelementptr inbounds i32, i32* %534, i64 %541
  %543 = ptrtoint i32* %542 to i64
  %544 = icmp sgt i64 %539, 0
  br i1 %544, label %545, label %548

545:                                              ; preds = %531
  %546 = bitcast i32* %542 to i8*
  %547 = inttoptr i64 %507 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %546, i8* align 4 %547, i64 %539, i1 false) #12
  br label %548

548:                                              ; preds = %545, %531
  store i64 %543, i64* %167, align 8
  store i64 %538, i64* %165, align 8
  store i64 %536, i64* %168, align 8
  %549 = icmp eq i64 %507, 0
  br i1 %549, label %552, label %550

550:                                              ; preds = %548
  %551 = inttoptr i64 %507 to i8*
  call void @_ZdlPv(i8* %551) #14
  br label %552

552:                                              ; preds = %502, %548, %550
  %553 = add nuw i64 %493, 1
  %554 = icmp eq i64 %553, %77
  br i1 %554, label %411, label %555

555:                                              ; preds = %552
  %556 = load i32*, i32** %162, align 8
  %557 = load i32*, i32** %163, align 8
  %558 = ptrtoint i32* %556 to i64
  br label %489

559:                                              ; preds = %50, %2, %62, %488
  %560 = phi i1 [ true, %488 ], [ false, %62 ], [ false, %2 ], [ false, %50 ]
  ret i1 %560
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5indexEv(%"class.skvm::Builder"*) local_unnamed_addr #2

declare void @_ZN4skvm7Builder12uniformColorE8SkRGBA4fIL11SkAlphaType3EEPNS_8UniformsE(%"struct.skvm::Color"* sret, %"class.skvm::Builder"*, <2 x float>, <2 x float>, %"struct.skvm::Uniforms"*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* noalias sret, %"class.SkSL::SkVMGenerator"*, %"class.SkSL::BinaryExpression"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %5 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %6 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %7 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %8 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %9 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %10 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %11 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %12 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %13 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %14 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %15 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %16 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %17 = alloca %"class.SkSL::Operator", align 4
  %18 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %19 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %20 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %21 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %22 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %23 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %24 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %25 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %26 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %27 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %28 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %29 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %30 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %29, align 8
  %31 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %2, i64 0, i32 3, i32 0, i32 0, i32 0
  %32 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %31, align 8
  %33 = bitcast %"class.SkSL::Operator"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %17, i64 0, i32 0
  %35 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %2, i64 0, i32 2, i32 0
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %34, align 4
  %37 = icmp eq i32 %36, 64
  br i1 %37, label %38, label %50

38:                                               ; preds = %3
  %39 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #12
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %18, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %32)
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %18)
  %40 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 16
  %47 = bitcast i8* %46 to i8**
  %48 = load i8*, i8** %47, align 8
  call void @_Z7sk_freePv(i8* %48) #12
  br label %49

49:                                               ; preds = %38, %45
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #12
  br label %1862

50:                                               ; preds = %3
  %51 = bitcast %"class.SkSL::Expression"* %30 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %52 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %51, align 8
  %53 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %52, i64 3
  %54 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %53, align 8
  %55 = tail call dereferenceable(184) %"class.SkSL::Type"* %54(%"class.SkSL::Expression"* %30) #12
  %56 = bitcast %"class.SkSL::Expression"* %32 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %57 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %56, align 8
  %58 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %57, i64 3
  %59 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %58, align 8
  %60 = tail call dereferenceable(184) %"class.SkSL::Type"* %59(%"class.SkSL::Expression"* %32) #12
  %61 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %55, i64 0, i32 3
  %62 = load i32, i32* %61, align 8
  %63 = icmp ne i32 %62, 11
  %64 = icmp ne i32 %62, 4
  %65 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %60, i64 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = icmp ne i32 %66, 11
  %68 = icmp ne i32 %66, 4
  %69 = call zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"* nonnull %17) #12
  br i1 %69, label %70, label %72

70:                                               ; preds = %50
  %71 = call i32 @_ZNK4SkSL8Operator16removeAssignmentEv(%"class.SkSL::Operator"* nonnull %17) #12
  store i32 %71, i32* %34, align 4
  br label %72

72:                                               ; preds = %70, %50
  br label %73

73:                                               ; preds = %72, %77
  %74 = phi %"class.SkSL::Type"* [ %81, %77 ], [ %55, %72 ]
  %75 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %74, i64 0, i32 3
  %76 = load i32, i32* %75, align 8
  switch i32 %76, label %82 [
    i32 4, label %77
    i32 11, label %77
  ]

77:                                               ; preds = %73, %73
  %78 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %74, i64 0, i32 6
  %79 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %78, align 8
  %80 = icmp eq %"class.SkSL::Type"* %79, null
  %81 = select i1 %80, %"class.SkSL::Type"* %74, %"class.SkSL::Type"* %79
  br label %73

82:                                               ; preds = %73
  %83 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %74, i64 0, i32 4
  %84 = load i32, i32* %83, align 4
  %85 = load i32, i32* %34, align 4
  switch i32 %85, label %197 [
    i32 59, label %86
    i32 57, label %133
    i32 43, label %186
  ]

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #12
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %19, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30)
  %88 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 16
  %89 = bitcast i8* %88 to i32**
  %90 = load i32*, i32** %89, align 8
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %93 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %92, align 8
  %94 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 24
  %95 = bitcast i8* %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %86
  %100 = bitcast i32* %90 to i8*
  call void @_Z7sk_freePv(i8* %100) #12
  br label %101

101:                                              ; preds = %86, %99
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #12
  %102 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %103 = bitcast %"class.skvm::Builder"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = inttoptr i64 %104 to %"class.skvm::Builder"*
  %108 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %107, %"class.skvm::Builder"* %107, i32 %106, %"class.skvm::Builder"* %93, i32 %91) #12
  %109 = extractvalue { %"class.skvm::Builder"*, i32 } %108, 0
  %110 = extractvalue { %"class.skvm::Builder"*, i32 } %108, 1
  store %"class.skvm::Builder"* %109, %"class.skvm::Builder"** %102, align 8
  store i32 %110, i32* %105, align 8
  %111 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %111) #12
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %20, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %32)
  %112 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 16
  %113 = bitcast i8* %112 to i32**
  %114 = load i32*, i32** %113, align 8
  %115 = load i32, i32* %114, align 4
  %116 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %92, align 8
  %117 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %20, i64 0, i32 0, i32 0, i32 0, i64 24
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = and i64 %119, 1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %101
  %123 = bitcast i32* %114 to i8*
  call void @_Z7sk_freePv(i8* %123) #12
  br label %124

124:                                              ; preds = %101, %122
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %111) #12
  %125 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %93, %"class.skvm::Builder"* %93, i32 %91, %"class.skvm::Builder"* %116, i32 %115) #12
  %126 = extractvalue { %"class.skvm::Builder"*, i32 } %125, 1
  %127 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %128 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %129 = bitcast i8* %128 to i64*
  %130 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %131 = bitcast i8* %127 to i8**
  store i8* %130, i8** %131, align 8
  %132 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %129, align 8
  store i32 %126, i32* %132, align 8
  store i64 %104, i64* %103, align 8
  store i32 %106, i32* %105, align 8
  br label %1862

133:                                              ; preds = %82
  %134 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %134) #12
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %21, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30)
  %135 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 16
  %136 = bitcast i8* %135 to i32**
  %137 = load i32*, i32** %136, align 8
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %140 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %139, align 8
  %141 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 24
  %142 = bitcast i8* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = and i64 %143, 1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %133
  %147 = bitcast i32* %137 to i8*
  call void @_Z7sk_freePv(i8* %147) #12
  br label %148

148:                                              ; preds = %133, %146
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %134) #12
  %149 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %140, i32 -1) #12
  %150 = extractvalue { %"class.skvm::Builder"*, i32 } %149, 0
  %151 = extractvalue { %"class.skvm::Builder"*, i32 } %149, 1
  %152 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %140, %"class.skvm::Builder"* %150, i32 %151, %"class.skvm::Builder"* %140, i32 %138) #12
  %153 = extractvalue { %"class.skvm::Builder"*, i32 } %152, 0
  %154 = extractvalue { %"class.skvm::Builder"*, i32 } %152, 1
  %155 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %156 = bitcast %"class.skvm::Builder"** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %159 = load i32, i32* %158, align 8
  %160 = inttoptr i64 %157 to %"class.skvm::Builder"*
  %161 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %160, %"class.skvm::Builder"* %160, i32 %159, %"class.skvm::Builder"* %153, i32 %154) #12
  %162 = extractvalue { %"class.skvm::Builder"*, i32 } %161, 0
  %163 = extractvalue { %"class.skvm::Builder"*, i32 } %161, 1
  store %"class.skvm::Builder"* %162, %"class.skvm::Builder"** %155, align 8
  store i32 %163, i32* %158, align 8
  %164 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %164) #12
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %22, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %32)
  %165 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 16
  %166 = bitcast i8* %165 to i32**
  %167 = load i32*, i32** %166, align 8
  %168 = load i32, i32* %167, align 4
  %169 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %139, align 8
  %170 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 24
  %171 = bitcast i8* %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = and i64 %172, 1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %148
  %176 = bitcast i32* %167 to i8*
  call void @_Z7sk_freePv(i8* %176) #12
  br label %177

177:                                              ; preds = %148, %175
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %164) #12
  %178 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %140, %"class.skvm::Builder"* %140, i32 %138, %"class.skvm::Builder"* %169, i32 %168) #12
  %179 = extractvalue { %"class.skvm::Builder"*, i32 } %178, 1
  %180 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %181 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %182 = bitcast i8* %181 to i64*
  %183 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %184 = bitcast i8* %180 to i8**
  store i8* %183, i8** %184, align 8
  %185 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %182, align 8
  store i32 %179, i32* %185, align 8
  store i64 %157, i64* %156, align 8
  store i32 %159, i32* %158, align 8
  br label %1862

186:                                              ; preds = %82
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %23, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30)
  %187 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %23, i64 0, i32 0, i32 0, i32 0, i64 24
  %188 = bitcast i8* %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %196, label %192

192:                                              ; preds = %186
  %193 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %23, i64 0, i32 0, i32 0, i32 0, i64 16
  %194 = bitcast i8* %193 to i8**
  %195 = load i8*, i8** %194, align 8
  call void @_Z7sk_freePv(i8* %195) #12
  br label %196

196:                                              ; preds = %186, %192
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %32)
  br label %1862

197:                                              ; preds = %82
  %198 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %198) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %198, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %24, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30)
  %199 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %199) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %199, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %25, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %32)
  %200 = load i32, i32* %34, align 4
  %201 = icmp ne i32 %200, 48
  %202 = and i1 %63, %64
  %203 = or i1 %202, %201
  %204 = and i1 %67, %68
  %205 = or i1 %204, %203
  br i1 %205, label %365, label %206

206:                                              ; preds = %197
  %207 = load i32, i32* %61, align 8
  %208 = icmp eq i32 %207, 11
  %209 = load i32, i32* %65, align 8
  %210 = icmp eq i32 %209, 11
  %211 = and i1 %208, %210
  br i1 %211, label %212, label %225

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 24
  %214 = bitcast i8* %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = lshr i64 %215, 1
  %217 = and i64 %216, 2147483647
  %218 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 24
  %219 = bitcast i8* %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = lshr i64 %220, 1
  %222 = and i64 %221, 2147483647
  %223 = icmp ult i64 %217, %222
  %224 = select i1 %223, i64 %222, i64 %217
  br label %1316

225:                                              ; preds = %206
  %226 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %60, i64 0, i32 8
  %227 = load i32, i32* %226, align 8
  %228 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %60, i64 0, i32 9
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %55, i64 0, i32 8
  %231 = load i32, i32* %230, align 8
  %232 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %55, i64 0, i32 9
  %233 = load i32, i32* %232, align 4
  %234 = select i1 %210, i32 %229, i32 %227
  %235 = select i1 %210, i32 %227, i32 %229
  %236 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %236) #12
  %237 = mul nsw i32 %234, %233
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 16
  %240 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 24
  %241 = bitcast i8* %240 to i64*
  %242 = bitcast i8* %239 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %236, i8 -86, i64 16, i1 false)
  store i8* %236, i8** %242, align 8
  store i64 34359738368, i64* %241, align 8
  %243 = bitcast i8* %239 to %class.SkTArray*
  %244 = icmp sgt i32 %237, 0
  br i1 %244, label %245, label %252

245:                                              ; preds = %225
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %243, i32 %237, i32 1) #12
  %246 = load i64, i64* %241, align 8
  %247 = shl nsw i64 %238, 1
  %248 = add i64 %246, %247
  %249 = and i64 %248, 4294967294
  %250 = and i64 %246, -4294967295
  %251 = or i64 %249, %250
  store i64 %251, i64* %241, align 8
  br label %258

252:                                              ; preds = %225
  %253 = icmp slt i32 %237, 0
  br i1 %253, label %254, label %258

254:                                              ; preds = %252
  %255 = shl nsw i64 %238, 1
  %256 = and i64 %255, 4294967294
  %257 = or i64 %256, 34359738368
  store i64 %257, i64* %241, align 8
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %243, i32 0, i32 2) #12
  br label %258

258:                                              ; preds = %245, %252, %254
  %259 = icmp sgt i32 %234, 0
  br i1 %259, label %260, label %279

260:                                              ; preds = %258
  %261 = icmp sgt i32 %233, 0
  %262 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %263 = icmp sgt i32 %231, 0
  %264 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %265 = bitcast i8* %264 to i32**
  %266 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %267 = bitcast i8* %266 to i32**
  %268 = bitcast i8* %239 to i32**
  %269 = sext i32 %233 to i64
  %270 = sext i32 %235 to i64
  %271 = zext i32 %234 to i64
  %272 = zext i32 %233 to i64
  %273 = zext i32 %231 to i64
  br label %274

274:                                              ; preds = %280, %260
  %275 = phi i64 [ 0, %260 ], [ %282, %280 ]
  %276 = phi i64 [ 0, %260 ], [ %281, %280 ]
  br i1 %261, label %277, label %280

277:                                              ; preds = %274
  %278 = mul nsw i64 %275, %270
  br label %284

279:                                              ; preds = %280, %258
  br i1 %69, label %323, label %324

280:                                              ; preds = %292, %274
  %281 = phi i64 [ %276, %274 ], [ %294, %292 ]
  %282 = add nuw nsw i64 %275, 1
  %283 = icmp eq i64 %282, %271
  br i1 %283, label %279, label %274

284:                                              ; preds = %292, %277
  %285 = phi i64 [ 0, %277 ], [ %299, %292 ]
  %286 = phi i64 [ %276, %277 ], [ %294, %292 ]
  %287 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %262, align 8
  %288 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %287, i32 0) #12
  %289 = extractvalue { %"class.skvm::Builder"*, i32 } %288, 1
  br i1 %263, label %290, label %292

290:                                              ; preds = %284
  %291 = extractvalue { %"class.skvm::Builder"*, i32 } %288, 0
  br label %301

292:                                              ; preds = %301, %284
  %293 = phi i32 [ %289, %284 ], [ %320, %301 ]
  %294 = add i64 %286, 1
  %295 = load i32*, i32** %268, align 8
  %296 = shl i64 %286, 32
  %297 = ashr exact i64 %296, 32
  %298 = getelementptr inbounds i32, i32* %295, i64 %297
  store i32 %293, i32* %298, align 4
  %299 = add nuw nsw i64 %285, 1
  %300 = icmp eq i64 %299, %272
  br i1 %300, label %280, label %284

301:                                              ; preds = %301, %290
  %302 = phi i64 [ 0, %290 ], [ %321, %301 ]
  %303 = phi %"class.skvm::Builder"* [ %291, %290 ], [ %319, %301 ]
  %304 = phi i32 [ %289, %290 ], [ %320, %301 ]
  %305 = mul nsw i64 %302, %269
  %306 = add nsw i64 %305, %285
  %307 = load i32*, i32** %265, align 8
  %308 = getelementptr inbounds i32, i32* %307, i64 %306
  %309 = load i32, i32* %308, align 4
  %310 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %262, align 8
  %311 = add nsw i64 %302, %278
  %312 = load i32*, i32** %267, align 8
  %313 = getelementptr inbounds i32, i32* %312, i64 %311
  %314 = load i32, i32* %313, align 4
  %315 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %310, %"class.skvm::Builder"* %310, i32 %309, %"class.skvm::Builder"* %310, i32 %314) #12
  %316 = extractvalue { %"class.skvm::Builder"*, i32 } %315, 0
  %317 = extractvalue { %"class.skvm::Builder"*, i32 } %315, 1
  %318 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %303, %"class.skvm::Builder"* %303, i32 %304, %"class.skvm::Builder"* %316, i32 %317) #12
  %319 = extractvalue { %"class.skvm::Builder"*, i32 } %318, 0
  %320 = extractvalue { %"class.skvm::Builder"*, i32 } %318, 1
  %321 = add nuw nsw i64 %302, 1
  %322 = icmp eq i64 %321, %273
  br i1 %322, label %292, label %301

323:                                              ; preds = %279
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %26)
  br label %358

324:                                              ; preds = %279
  %325 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %326 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %327 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %328 = bitcast i8* %327 to i64*
  %329 = bitcast i8* %325 to i8**
  store i8* %326, i8** %329, align 8
  store i64 34359738368, i64* %328, align 8
  %330 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %26, %0
  br i1 %330, label %358, label %331

331:                                              ; preds = %324
  %332 = bitcast i8* %325 to %class.SkTArray*
  store i64 34359738368, i64* %328, align 8
  %333 = load i64, i64* %241, align 8
  %334 = lshr i64 %333, 1
  %335 = trunc i64 %334 to i32
  %336 = and i32 %335, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %332, i32 %336, i32 0) #12
  %337 = load i64, i64* %241, align 8
  %338 = and i64 %337, 4294967294
  %339 = load i64, i64* %328, align 8
  %340 = and i64 %339, -4294967295
  %341 = or i64 %340, %338
  store i64 %341, i64* %328, align 8
  %342 = bitcast i8* %239 to i32**
  %343 = load i32*, i32** %342, align 8
  %344 = icmp eq i64 %338, 0
  br i1 %344, label %358, label %345

345:                                              ; preds = %331
  %346 = bitcast i8* %325 to i32**
  br label %347

347:                                              ; preds = %347, %345
  %348 = phi i64 [ 0, %345 ], [ %353, %347 ]
  %349 = load i32*, i32** %346, align 8
  %350 = getelementptr inbounds i32, i32* %349, i64 %348
  %351 = getelementptr inbounds i32, i32* %343, i64 %348
  %352 = load i32, i32* %351, align 4
  store i32 %352, i32* %350, align 4
  %353 = add nuw nsw i64 %348, 1
  %354 = load i64, i64* %328, align 8
  %355 = lshr i64 %354, 1
  %356 = and i64 %355, 2147483647
  %357 = icmp ult i64 %353, %356
  br i1 %357, label %347, label %358

358:                                              ; preds = %347, %331, %324, %323
  %359 = load i64, i64* %241, align 8
  %360 = and i64 %359, 1
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %364, label %362

362:                                              ; preds = %358
  %363 = load i8*, i8** %242, align 8
  call void @_Z7sk_freePv(i8* %363) #12
  br label %364

364:                                              ; preds = %358, %362
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %236) #12
  br label %1841

365:                                              ; preds = %197
  %366 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 24
  %367 = bitcast i8* %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = lshr i64 %368, 1
  %370 = and i64 %369, 2147483647
  %371 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 24
  %372 = bitcast i8* %371 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = lshr i64 %373, 1
  %375 = and i64 %374, 2147483647
  %376 = icmp ult i64 %370, %375
  %377 = select i1 %376, i64 %375, i64 %370
  switch i32 %200, label %1835 [
    i32 65, label %378
    i32 66, label %550
    i32 67, label %722
    i32 69, label %821
    i32 68, label %920
    i32 70, label %1019
    i32 46, label %1118
    i32 47, label %1217
    i32 48, label %1316
    i32 49, label %1418
    i32 54, label %1526
    i32 58, label %1526
    i32 55, label %1629
    i32 53, label %1732
  ]

378:                                              ; preds = %365
  %379 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %379) #12
  %380 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %379, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %380) #12, !noalias !91
  %381 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %382 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %383 = bitcast i8* %382 to i64*
  %384 = bitcast i8* %381 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %380, i8 -86, i64 16, i1 false)
  store i8* %380, i8** %384, align 8, !noalias !91
  store i64 34359738368, i64* %383, align 8, !noalias !91
  %385 = trunc i64 %377 to i32
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %395, label %387

387:                                              ; preds = %378
  %388 = bitcast i8* %381 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %388, i32 %385, i32 1) #12
  %389 = load i64, i64* %383, align 8, !noalias !91
  %390 = shl nuw nsw i64 %377, 1
  %391 = add i64 %389, %390
  %392 = and i64 %391, 4294967294
  %393 = and i64 %389, -4294967295
  %394 = or i64 %392, %393
  store i64 %394, i64* %383, align 8, !noalias !91
  br label %395

395:                                              ; preds = %378, %387
  %396 = icmp eq i64 %377, 0
  br i1 %396, label %405, label %397

397:                                              ; preds = %395
  %398 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %399 = bitcast i8* %398 to i32**
  %400 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %401 = bitcast i8* %400 to i32**
  %402 = icmp eq i32 %84, 0
  %403 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %404 = bitcast i8* %381 to i32**
  br label %407

405:                                              ; preds = %430, %395
  %406 = phi i64 [ 0, %395 ], [ %377, %430 ]
  br i1 %69, label %437, label %438

407:                                              ; preds = %397, %430
  %408 = phi i64 [ 0, %397 ], [ %435, %430 ]
  %409 = load i64, i64* %367, align 8
  %410 = and i64 %409, 4294967294
  %411 = icmp eq i64 %410, 2
  %412 = load i32*, i32** %399, align 8
  %413 = shl i64 %408, 32
  %414 = ashr exact i64 %413, 32
  %415 = getelementptr inbounds i32, i32* %412, i64 %414
  %416 = select i1 %411, i32* %412, i32* %415
  %417 = load i32, i32* %416, align 4
  %418 = load i64, i64* %372, align 8
  %419 = and i64 %418, 4294967294
  %420 = icmp eq i64 %419, 2
  %421 = load i32*, i32** %401, align 8
  %422 = getelementptr inbounds i32, i32* %421, i64 %414
  %423 = select i1 %420, i32* %421, i32* %422
  %424 = load i32, i32* %423, align 4
  %425 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %403, align 8
  br i1 %402, label %426, label %428

426:                                              ; preds = %407
  %427 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3F32ES1_(%"class.skvm::Builder"* %425, %"class.skvm::Builder"* %425, i32 %417, %"class.skvm::Builder"* %425, i32 %424) #12
  br label %430

428:                                              ; preds = %407
  %429 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3I32ES1_(%"class.skvm::Builder"* %425, %"class.skvm::Builder"* %425, i32 %417, %"class.skvm::Builder"* %425, i32 %424) #12
  br label %430

430:                                              ; preds = %428, %426
  %431 = phi { %"class.skvm::Builder"*, i32 } [ %429, %428 ], [ %427, %426 ]
  %432 = extractvalue { %"class.skvm::Builder"*, i32 } %431, 1
  %433 = load i32*, i32** %404, align 8, !noalias !91
  %434 = getelementptr inbounds i32, i32* %433, i64 %414
  store i32 %432, i32* %434, align 4
  %435 = add nuw nsw i64 %408, 1
  %436 = icmp ult i64 %435, %377
  br i1 %436, label %407, label %405

437:                                              ; preds = %405
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %27, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %16) #12
  br label %498

438:                                              ; preds = %405
  %439 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 16
  %440 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 24
  %441 = bitcast i8* %440 to i64*
  %442 = bitcast i8* %439 to i8**
  store i8* %379, i8** %442, align 8, !alias.scope !91
  store i64 34359738368, i64* %441, align 8, !alias.scope !91
  %443 = load i64, i64* %383, align 8, !noalias !91
  %444 = lshr i64 %443, 1
  %445 = and i64 %444, 2147483647
  %446 = icmp ult i64 %445, 5
  %447 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %27 to i32*
  br i1 %446, label %472, label %448

448:                                              ; preds = %438
  %449 = shl nuw i64 %445, 33
  store i64 %449, i64* %441, align 8
  %450 = call i8* @_Z15sk_malloc_throwmm(i64 %445, i64 4) #12
  %451 = load i64, i64* %441, align 8
  %452 = shl i64 %451, 1
  %453 = and i64 %452, 8589934588
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %458, label %455

455:                                              ; preds = %448
  %456 = load i8*, i8** %442, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %450, i8* align 1 %456, i64 %453, i1 false) #12
  %457 = load i64, i64* %441, align 8
  br label %458

458:                                              ; preds = %455, %448
  %459 = phi i64 [ %451, %448 ], [ %457, %455 ]
  %460 = and i64 %459, 1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %465, label %462

462:                                              ; preds = %458
  %463 = load i8*, i8** %442, align 8
  call void @_Z7sk_freePv(i8* %463) #12
  %464 = load i64, i64* %441, align 8
  br label %465

465:                                              ; preds = %462, %458
  %466 = phi i64 [ %464, %462 ], [ %459, %458 ]
  store i8* %450, i8** %442, align 8
  %467 = and i64 %466, -4294967298
  %468 = or i64 %467, 1
  store i64 %468, i64* %441, align 8
  %469 = load i64, i64* %383, align 8, !noalias !91
  %470 = bitcast i8* %450 to i32*
  %471 = and i64 %468, -8589934591
  br label %472

472:                                              ; preds = %438, %465
  %473 = phi i32* [ %447, %438 ], [ %470, %465 ]
  %474 = phi i64 [ 34359738368, %438 ], [ %471, %465 ]
  %475 = phi i64 [ %443, %438 ], [ %469, %465 ]
  %476 = and i64 %475, 4294967294
  %477 = or i64 %474, %476
  store i64 %477, i64* %441, align 8, !alias.scope !91
  %478 = bitcast i8* %381 to i32**
  %479 = load i32*, i32** %478, align 8, !noalias !91
  %480 = icmp eq i64 %476, 0
  br i1 %480, label %498, label %481

481:                                              ; preds = %472
  %482 = bitcast i8* %439 to i32**
  %483 = load i32, i32* %479, align 4
  store i32 %483, i32* %473, align 4
  %484 = load i64, i64* %441, align 8, !alias.scope !91
  %485 = and i64 %484, 4294967292
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %498, label %487

487:                                              ; preds = %481, %487
  %488 = phi i64 [ %493, %487 ], [ 1, %481 ]
  %489 = load i32*, i32** %482, align 8, !alias.scope !91
  %490 = getelementptr inbounds i32, i32* %489, i64 %488
  %491 = getelementptr inbounds i32, i32* %479, i64 %488
  %492 = load i32, i32* %491, align 4
  store i32 %492, i32* %490, align 4
  %493 = add nuw nsw i64 %488, 1
  %494 = load i64, i64* %441, align 8, !alias.scope !91
  %495 = lshr i64 %494, 1
  %496 = and i64 %495, 2147483647
  %497 = icmp ult i64 %493, %496
  br i1 %497, label %487, label %498

498:                                              ; preds = %487, %481, %472, %437
  %499 = load i64, i64* %383, align 8, !noalias !91
  %500 = and i64 %499, 1
  %501 = icmp eq i64 %500, 0
  br i1 %501, label %504, label %502

502:                                              ; preds = %498
  %503 = load i8*, i8** %384, align 8, !noalias !91
  call void @_Z7sk_freePv(i8* %503) #12
  br label %504

504:                                              ; preds = %498, %502
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %380) #12, !noalias !91
  %505 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 16
  %506 = bitcast i8* %505 to i32**
  %507 = load i32*, i32** %506, align 8
  %508 = load i32, i32* %507, align 4
  %509 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %510 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %509, align 8
  %511 = icmp ugt i64 %406, 1
  br i1 %511, label %512, label %518

512:                                              ; preds = %504
  %513 = getelementptr inbounds i32, i32* %507, i64 1
  %514 = load i32, i32* %513, align 4
  %515 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %510, %"class.skvm::Builder"* %510, i32 %508, %"class.skvm::Builder"* %510, i32 %514) #12
  %516 = extractvalue { %"class.skvm::Builder"*, i32 } %515, 1
  %517 = icmp eq i64 %406, 2
  br i1 %517, label %518, label %535

518:                                              ; preds = %535, %512, %504
  %519 = phi i32 [ %508, %504 ], [ %516, %512 ], [ %547, %535 ]
  %520 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %521 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %522 = bitcast i8* %521 to i64*
  %523 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %524 = bitcast i8* %520 to i8**
  store i8* %523, i8** %524, align 8
  %525 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %522, align 8
  store i32 %519, i32* %525, align 8
  %526 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 24
  %527 = bitcast i8* %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = and i64 %528, 1
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %534, label %531

531:                                              ; preds = %518
  %532 = bitcast i8* %505 to i8**
  %533 = load i8*, i8** %532, align 8
  call void @_Z7sk_freePv(i8* %533) #12
  br label %534

534:                                              ; preds = %518, %531
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %379) #12
  br label %1841

535:                                              ; preds = %512, %535
  %536 = phi i64 [ %548, %535 ], [ 2, %512 ]
  %537 = phi i32 [ %547, %535 ], [ %516, %512 ]
  %538 = phi { %"class.skvm::Builder"*, i32 } [ %546, %535 ], [ %515, %512 ]
  %539 = extractvalue { %"class.skvm::Builder"*, i32 } %538, 0
  %540 = load i32*, i32** %506, align 8
  %541 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %509, align 8
  %542 = shl i64 %536, 32
  %543 = ashr exact i64 %542, 32
  %544 = getelementptr inbounds i32, i32* %540, i64 %543
  %545 = load i32, i32* %544, align 4
  %546 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %539, %"class.skvm::Builder"* %539, i32 %537, %"class.skvm::Builder"* %541, i32 %545) #12
  %547 = extractvalue { %"class.skvm::Builder"*, i32 } %546, 1
  %548 = add nuw nsw i64 %536, 1
  %549 = icmp ult i64 %548, %406
  br i1 %549, label %535, label %518

550:                                              ; preds = %365
  %551 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %551) #12
  %552 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %551, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %552) #12, !noalias !94
  %553 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 16
  %554 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 24
  %555 = bitcast i8* %554 to i64*
  %556 = bitcast i8* %553 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %552, i8 -86, i64 16, i1 false)
  store i8* %552, i8** %556, align 8, !noalias !94
  store i64 34359738368, i64* %555, align 8, !noalias !94
  %557 = trunc i64 %377 to i32
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %567, label %559

559:                                              ; preds = %550
  %560 = bitcast i8* %553 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %560, i32 %557, i32 1) #12
  %561 = load i64, i64* %555, align 8, !noalias !94
  %562 = shl nuw nsw i64 %377, 1
  %563 = add i64 %561, %562
  %564 = and i64 %563, 4294967294
  %565 = and i64 %561, -4294967295
  %566 = or i64 %564, %565
  store i64 %566, i64* %555, align 8, !noalias !94
  br label %567

567:                                              ; preds = %550, %559
  %568 = icmp eq i64 %377, 0
  br i1 %568, label %577, label %569

569:                                              ; preds = %567
  %570 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %571 = bitcast i8* %570 to i32**
  %572 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %573 = bitcast i8* %572 to i32**
  %574 = icmp eq i32 %84, 0
  %575 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %576 = bitcast i8* %553 to i32**
  br label %579

577:                                              ; preds = %602, %567
  %578 = phi i64 [ 0, %567 ], [ %377, %602 ]
  br i1 %69, label %609, label %610

579:                                              ; preds = %569, %602
  %580 = phi i64 [ 0, %569 ], [ %607, %602 ]
  %581 = load i64, i64* %367, align 8
  %582 = and i64 %581, 4294967294
  %583 = icmp eq i64 %582, 2
  %584 = load i32*, i32** %571, align 8
  %585 = shl i64 %580, 32
  %586 = ashr exact i64 %585, 32
  %587 = getelementptr inbounds i32, i32* %584, i64 %586
  %588 = select i1 %583, i32* %584, i32* %587
  %589 = load i32, i32* %588, align 4
  %590 = load i64, i64* %372, align 8
  %591 = and i64 %590, 4294967294
  %592 = icmp eq i64 %591, 2
  %593 = load i32*, i32** %573, align 8
  %594 = getelementptr inbounds i32, i32* %593, i64 %586
  %595 = select i1 %592, i32* %593, i32* %594
  %596 = load i32, i32* %595, align 4
  %597 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %575, align 8
  br i1 %574, label %598, label %600

598:                                              ; preds = %579
  %599 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3F32ES1_(%"class.skvm::Builder"* %597, %"class.skvm::Builder"* %597, i32 %589, %"class.skvm::Builder"* %597, i32 %596) #12
  br label %602

600:                                              ; preds = %579
  %601 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3I32ES1_(%"class.skvm::Builder"* %597, %"class.skvm::Builder"* %597, i32 %589, %"class.skvm::Builder"* %597, i32 %596) #12
  br label %602

602:                                              ; preds = %600, %598
  %603 = phi { %"class.skvm::Builder"*, i32 } [ %601, %600 ], [ %599, %598 ]
  %604 = extractvalue { %"class.skvm::Builder"*, i32 } %603, 1
  %605 = load i32*, i32** %576, align 8, !noalias !94
  %606 = getelementptr inbounds i32, i32* %605, i64 %586
  store i32 %604, i32* %606, align 4
  %607 = add nuw nsw i64 %580, 1
  %608 = icmp ult i64 %607, %377
  br i1 %608, label %579, label %577

609:                                              ; preds = %577
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %28, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %15) #12
  br label %670

610:                                              ; preds = %577
  %611 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 16
  %612 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 24
  %613 = bitcast i8* %612 to i64*
  %614 = bitcast i8* %611 to i8**
  store i8* %551, i8** %614, align 8, !alias.scope !94
  store i64 34359738368, i64* %613, align 8, !alias.scope !94
  %615 = load i64, i64* %555, align 8, !noalias !94
  %616 = lshr i64 %615, 1
  %617 = and i64 %616, 2147483647
  %618 = icmp ult i64 %617, 5
  %619 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %28 to i32*
  br i1 %618, label %644, label %620

620:                                              ; preds = %610
  %621 = shl nuw i64 %617, 33
  store i64 %621, i64* %613, align 8
  %622 = call i8* @_Z15sk_malloc_throwmm(i64 %617, i64 4) #12
  %623 = load i64, i64* %613, align 8
  %624 = shl i64 %623, 1
  %625 = and i64 %624, 8589934588
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %630, label %627

627:                                              ; preds = %620
  %628 = load i8*, i8** %614, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %622, i8* align 1 %628, i64 %625, i1 false) #12
  %629 = load i64, i64* %613, align 8
  br label %630

630:                                              ; preds = %627, %620
  %631 = phi i64 [ %623, %620 ], [ %629, %627 ]
  %632 = and i64 %631, 1
  %633 = icmp eq i64 %632, 0
  br i1 %633, label %637, label %634

634:                                              ; preds = %630
  %635 = load i8*, i8** %614, align 8
  call void @_Z7sk_freePv(i8* %635) #12
  %636 = load i64, i64* %613, align 8
  br label %637

637:                                              ; preds = %634, %630
  %638 = phi i64 [ %636, %634 ], [ %631, %630 ]
  store i8* %622, i8** %614, align 8
  %639 = and i64 %638, -4294967298
  %640 = or i64 %639, 1
  store i64 %640, i64* %613, align 8
  %641 = load i64, i64* %555, align 8, !noalias !94
  %642 = bitcast i8* %622 to i32*
  %643 = and i64 %640, -8589934591
  br label %644

644:                                              ; preds = %610, %637
  %645 = phi i32* [ %619, %610 ], [ %642, %637 ]
  %646 = phi i64 [ 34359738368, %610 ], [ %643, %637 ]
  %647 = phi i64 [ %615, %610 ], [ %641, %637 ]
  %648 = and i64 %647, 4294967294
  %649 = or i64 %646, %648
  store i64 %649, i64* %613, align 8, !alias.scope !94
  %650 = bitcast i8* %553 to i32**
  %651 = load i32*, i32** %650, align 8, !noalias !94
  %652 = icmp eq i64 %648, 0
  br i1 %652, label %670, label %653

653:                                              ; preds = %644
  %654 = bitcast i8* %611 to i32**
  %655 = load i32, i32* %651, align 4
  store i32 %655, i32* %645, align 4
  %656 = load i64, i64* %613, align 8, !alias.scope !94
  %657 = and i64 %656, 4294967292
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %670, label %659

659:                                              ; preds = %653, %659
  %660 = phi i64 [ %665, %659 ], [ 1, %653 ]
  %661 = load i32*, i32** %654, align 8, !alias.scope !94
  %662 = getelementptr inbounds i32, i32* %661, i64 %660
  %663 = getelementptr inbounds i32, i32* %651, i64 %660
  %664 = load i32, i32* %663, align 4
  store i32 %664, i32* %662, align 4
  %665 = add nuw nsw i64 %660, 1
  %666 = load i64, i64* %613, align 8, !alias.scope !94
  %667 = lshr i64 %666, 1
  %668 = and i64 %667, 2147483647
  %669 = icmp ult i64 %665, %668
  br i1 %669, label %659, label %670

670:                                              ; preds = %659, %653, %644, %609
  %671 = load i64, i64* %555, align 8, !noalias !94
  %672 = and i64 %671, 1
  %673 = icmp eq i64 %672, 0
  br i1 %673, label %676, label %674

674:                                              ; preds = %670
  %675 = load i8*, i8** %556, align 8, !noalias !94
  call void @_Z7sk_freePv(i8* %675) #12
  br label %676

676:                                              ; preds = %670, %674
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %552) #12, !noalias !94
  %677 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 16
  %678 = bitcast i8* %677 to i32**
  %679 = load i32*, i32** %678, align 8
  %680 = load i32, i32* %679, align 4
  %681 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %682 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %681, align 8
  %683 = icmp ugt i64 %578, 1
  br i1 %683, label %684, label %690

684:                                              ; preds = %676
  %685 = getelementptr inbounds i32, i32* %679, i64 1
  %686 = load i32, i32* %685, align 4
  %687 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %682, %"class.skvm::Builder"* %682, i32 %680, %"class.skvm::Builder"* %682, i32 %686) #12
  %688 = extractvalue { %"class.skvm::Builder"*, i32 } %687, 1
  %689 = icmp eq i64 %578, 2
  br i1 %689, label %690, label %707

690:                                              ; preds = %707, %684, %676
  %691 = phi i32 [ %680, %676 ], [ %688, %684 ], [ %719, %707 ]
  %692 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %693 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %694 = bitcast i8* %693 to i64*
  %695 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %696 = bitcast i8* %692 to i8**
  store i8* %695, i8** %696, align 8
  %697 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %694, align 8
  store i32 %691, i32* %697, align 8
  %698 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 24
  %699 = bitcast i8* %698 to i64*
  %700 = load i64, i64* %699, align 8
  %701 = and i64 %700, 1
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %706, label %703

703:                                              ; preds = %690
  %704 = bitcast i8* %677 to i8**
  %705 = load i8*, i8** %704, align 8
  call void @_Z7sk_freePv(i8* %705) #12
  br label %706

706:                                              ; preds = %690, %703
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %551) #12
  br label %1841

707:                                              ; preds = %684, %707
  %708 = phi i64 [ %720, %707 ], [ 2, %684 ]
  %709 = phi i32 [ %719, %707 ], [ %688, %684 ]
  %710 = phi { %"class.skvm::Builder"*, i32 } [ %718, %707 ], [ %687, %684 ]
  %711 = extractvalue { %"class.skvm::Builder"*, i32 } %710, 0
  %712 = load i32*, i32** %678, align 8
  %713 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %681, align 8
  %714 = shl i64 %708, 32
  %715 = ashr exact i64 %714, 32
  %716 = getelementptr inbounds i32, i32* %712, i64 %715
  %717 = load i32, i32* %716, align 4
  %718 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %711, %"class.skvm::Builder"* %711, i32 %709, %"class.skvm::Builder"* %713, i32 %717) #12
  %719 = extractvalue { %"class.skvm::Builder"*, i32 } %718, 1
  %720 = add nuw nsw i64 %708, 1
  %721 = icmp ult i64 %720, %578
  br i1 %721, label %707, label %690

722:                                              ; preds = %365
  %723 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %723) #12, !noalias !97
  %724 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 16
  %725 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 24
  %726 = bitcast i8* %725 to i64*
  %727 = bitcast i8* %724 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %723, i8 -86, i64 16, i1 false)
  store i8* %723, i8** %727, align 8, !noalias !97
  store i64 34359738368, i64* %726, align 8, !noalias !97
  %728 = trunc i64 %377 to i32
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %738, label %730

730:                                              ; preds = %722
  %731 = bitcast i8* %724 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %731, i32 %728, i32 1) #12
  %732 = load i64, i64* %726, align 8, !noalias !97
  %733 = shl nuw nsw i64 %377, 1
  %734 = add i64 %732, %733
  %735 = and i64 %734, 4294967294
  %736 = and i64 %732, -4294967295
  %737 = or i64 %735, %736
  store i64 %737, i64* %726, align 8, !noalias !97
  br label %738

738:                                              ; preds = %722, %730
  %739 = icmp eq i64 %377, 0
  br i1 %739, label %748, label %740

740:                                              ; preds = %738
  %741 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %742 = bitcast i8* %741 to i32**
  %743 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %744 = bitcast i8* %743 to i32**
  %745 = icmp eq i32 %84, 0
  %746 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %747 = bitcast i8* %724 to i32**
  br label %749

748:                                              ; preds = %772, %738
  br i1 %69, label %779, label %780

749:                                              ; preds = %740, %772
  %750 = phi i64 [ 0, %740 ], [ %777, %772 ]
  %751 = load i64, i64* %367, align 8
  %752 = and i64 %751, 4294967294
  %753 = icmp eq i64 %752, 2
  %754 = load i32*, i32** %742, align 8
  %755 = shl i64 %750, 32
  %756 = ashr exact i64 %755, 32
  %757 = getelementptr inbounds i32, i32* %754, i64 %756
  %758 = select i1 %753, i32* %754, i32* %757
  %759 = load i32, i32* %758, align 4
  %760 = load i64, i64* %372, align 8
  %761 = and i64 %760, 4294967294
  %762 = icmp eq i64 %761, 2
  %763 = load i32*, i32** %744, align 8
  %764 = getelementptr inbounds i32, i32* %763, i64 %756
  %765 = select i1 %762, i32* %763, i32* %764
  %766 = load i32, i32* %765, align 4
  %767 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %746, align 8
  br i1 %745, label %768, label %770

768:                                              ; preds = %749
  %769 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3F32ES1_(%"class.skvm::Builder"* %767, %"class.skvm::Builder"* %767, i32 %759, %"class.skvm::Builder"* %767, i32 %766) #12
  br label %772

770:                                              ; preds = %749
  %771 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3I32ES1_(%"class.skvm::Builder"* %767, %"class.skvm::Builder"* %767, i32 %759, %"class.skvm::Builder"* %767, i32 %766) #12
  br label %772

772:                                              ; preds = %770, %768
  %773 = phi { %"class.skvm::Builder"*, i32 } [ %771, %770 ], [ %769, %768 ]
  %774 = extractvalue { %"class.skvm::Builder"*, i32 } %773, 1
  %775 = load i32*, i32** %747, align 8, !noalias !97
  %776 = getelementptr inbounds i32, i32* %775, i64 %756
  store i32 %774, i32* %776, align 4
  %777 = add nuw nsw i64 %750, 1
  %778 = icmp ult i64 %777, %377
  br i1 %778, label %749, label %748

779:                                              ; preds = %748
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %14) #12
  br label %814

780:                                              ; preds = %748
  %781 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %782 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %783 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %784 = bitcast i8* %783 to i64*
  %785 = bitcast i8* %781 to i8**
  store i8* %782, i8** %785, align 8, !alias.scope !97
  store i64 34359738368, i64* %784, align 8, !alias.scope !97
  %786 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %14, %0
  br i1 %786, label %814, label %787

787:                                              ; preds = %780
  %788 = bitcast i8* %781 to %class.SkTArray*
  store i64 34359738368, i64* %784, align 8, !alias.scope !97
  %789 = load i64, i64* %726, align 8, !noalias !97
  %790 = lshr i64 %789, 1
  %791 = trunc i64 %790 to i32
  %792 = and i32 %791, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %788, i32 %792, i32 0) #12
  %793 = load i64, i64* %726, align 8, !noalias !97
  %794 = and i64 %793, 4294967294
  %795 = load i64, i64* %784, align 8, !alias.scope !97
  %796 = and i64 %795, -4294967295
  %797 = or i64 %796, %794
  store i64 %797, i64* %784, align 8, !alias.scope !97
  %798 = bitcast i8* %724 to i32**
  %799 = load i32*, i32** %798, align 8, !noalias !97
  %800 = icmp eq i64 %794, 0
  br i1 %800, label %814, label %801

801:                                              ; preds = %787
  %802 = bitcast i8* %781 to i32**
  br label %803

803:                                              ; preds = %803, %801
  %804 = phi i64 [ 0, %801 ], [ %809, %803 ]
  %805 = load i32*, i32** %802, align 8, !alias.scope !97
  %806 = getelementptr inbounds i32, i32* %805, i64 %804
  %807 = getelementptr inbounds i32, i32* %799, i64 %804
  %808 = load i32, i32* %807, align 4
  store i32 %808, i32* %806, align 4
  %809 = add nuw nsw i64 %804, 1
  %810 = load i64, i64* %784, align 8, !alias.scope !97
  %811 = lshr i64 %810, 1
  %812 = and i64 %811, 2147483647
  %813 = icmp ult i64 %809, %812
  br i1 %813, label %803, label %814

814:                                              ; preds = %803, %780, %787, %779
  %815 = load i64, i64* %726, align 8, !noalias !97
  %816 = and i64 %815, 1
  %817 = icmp eq i64 %816, 0
  br i1 %817, label %820, label %818

818:                                              ; preds = %814
  %819 = load i8*, i8** %727, align 8, !noalias !97
  call void @_Z7sk_freePv(i8* %819) #12
  br label %820

820:                                              ; preds = %814, %818
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %723) #12, !noalias !97
  br label %1841

821:                                              ; preds = %365
  %822 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %822) #12, !noalias !100
  %823 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 16
  %824 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 24
  %825 = bitcast i8* %824 to i64*
  %826 = bitcast i8* %823 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %822, i8 -86, i64 16, i1 false)
  store i8* %822, i8** %826, align 8, !noalias !100
  store i64 34359738368, i64* %825, align 8, !noalias !100
  %827 = trunc i64 %377 to i32
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %837, label %829

829:                                              ; preds = %821
  %830 = bitcast i8* %823 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %830, i32 %827, i32 1) #12
  %831 = load i64, i64* %825, align 8, !noalias !100
  %832 = shl nuw nsw i64 %377, 1
  %833 = add i64 %831, %832
  %834 = and i64 %833, 4294967294
  %835 = and i64 %831, -4294967295
  %836 = or i64 %834, %835
  store i64 %836, i64* %825, align 8, !noalias !100
  br label %837

837:                                              ; preds = %821, %829
  %838 = icmp eq i64 %377, 0
  br i1 %838, label %847, label %839

839:                                              ; preds = %837
  %840 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %841 = bitcast i8* %840 to i32**
  %842 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %843 = bitcast i8* %842 to i32**
  %844 = icmp eq i32 %84, 0
  %845 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %846 = bitcast i8* %823 to i32**
  br label %848

847:                                              ; preds = %871, %837
  br i1 %69, label %878, label %879

848:                                              ; preds = %839, %871
  %849 = phi i64 [ 0, %839 ], [ %876, %871 ]
  %850 = load i64, i64* %367, align 8
  %851 = and i64 %850, 4294967294
  %852 = icmp eq i64 %851, 2
  %853 = load i32*, i32** %841, align 8
  %854 = shl i64 %849, 32
  %855 = ashr exact i64 %854, 32
  %856 = getelementptr inbounds i32, i32* %853, i64 %855
  %857 = select i1 %852, i32* %853, i32* %856
  %858 = load i32, i32* %857, align 4
  %859 = load i64, i64* %372, align 8
  %860 = and i64 %859, 4294967294
  %861 = icmp eq i64 %860, 2
  %862 = load i32*, i32** %843, align 8
  %863 = getelementptr inbounds i32, i32* %862, i64 %855
  %864 = select i1 %861, i32* %862, i32* %863
  %865 = load i32, i32* %864, align 4
  %866 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %845, align 8
  br i1 %844, label %867, label %869

867:                                              ; preds = %848
  %868 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3F32ES1_(%"class.skvm::Builder"* %866, %"class.skvm::Builder"* %866, i32 %858, %"class.skvm::Builder"* %866, i32 %865) #12
  br label %871

869:                                              ; preds = %848
  %870 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3I32ES1_(%"class.skvm::Builder"* %866, %"class.skvm::Builder"* %866, i32 %858, %"class.skvm::Builder"* %866, i32 %865) #12
  br label %871

871:                                              ; preds = %869, %867
  %872 = phi { %"class.skvm::Builder"*, i32 } [ %870, %869 ], [ %868, %867 ]
  %873 = extractvalue { %"class.skvm::Builder"*, i32 } %872, 1
  %874 = load i32*, i32** %846, align 8, !noalias !100
  %875 = getelementptr inbounds i32, i32* %874, i64 %855
  store i32 %873, i32* %875, align 4
  %876 = add nuw nsw i64 %849, 1
  %877 = icmp ult i64 %876, %377
  br i1 %877, label %848, label %847

878:                                              ; preds = %847
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %13) #12
  br label %913

879:                                              ; preds = %847
  %880 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %881 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %882 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %883 = bitcast i8* %882 to i64*
  %884 = bitcast i8* %880 to i8**
  store i8* %881, i8** %884, align 8, !alias.scope !100
  store i64 34359738368, i64* %883, align 8, !alias.scope !100
  %885 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %13, %0
  br i1 %885, label %913, label %886

886:                                              ; preds = %879
  %887 = bitcast i8* %880 to %class.SkTArray*
  store i64 34359738368, i64* %883, align 8, !alias.scope !100
  %888 = load i64, i64* %825, align 8, !noalias !100
  %889 = lshr i64 %888, 1
  %890 = trunc i64 %889 to i32
  %891 = and i32 %890, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %887, i32 %891, i32 0) #12
  %892 = load i64, i64* %825, align 8, !noalias !100
  %893 = and i64 %892, 4294967294
  %894 = load i64, i64* %883, align 8, !alias.scope !100
  %895 = and i64 %894, -4294967295
  %896 = or i64 %895, %893
  store i64 %896, i64* %883, align 8, !alias.scope !100
  %897 = bitcast i8* %823 to i32**
  %898 = load i32*, i32** %897, align 8, !noalias !100
  %899 = icmp eq i64 %893, 0
  br i1 %899, label %913, label %900

900:                                              ; preds = %886
  %901 = bitcast i8* %880 to i32**
  br label %902

902:                                              ; preds = %902, %900
  %903 = phi i64 [ 0, %900 ], [ %908, %902 ]
  %904 = load i32*, i32** %901, align 8, !alias.scope !100
  %905 = getelementptr inbounds i32, i32* %904, i64 %903
  %906 = getelementptr inbounds i32, i32* %898, i64 %903
  %907 = load i32, i32* %906, align 4
  store i32 %907, i32* %905, align 4
  %908 = add nuw nsw i64 %903, 1
  %909 = load i64, i64* %883, align 8, !alias.scope !100
  %910 = lshr i64 %909, 1
  %911 = and i64 %910, 2147483647
  %912 = icmp ult i64 %908, %911
  br i1 %912, label %902, label %913

913:                                              ; preds = %902, %879, %886, %878
  %914 = load i64, i64* %825, align 8, !noalias !100
  %915 = and i64 %914, 1
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %919, label %917

917:                                              ; preds = %913
  %918 = load i8*, i8** %826, align 8, !noalias !100
  call void @_Z7sk_freePv(i8* %918) #12
  br label %919

919:                                              ; preds = %913, %917
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %822) #12, !noalias !100
  br label %1841

920:                                              ; preds = %365
  %921 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %921) #12, !noalias !103
  %922 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 16
  %923 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 24
  %924 = bitcast i8* %923 to i64*
  %925 = bitcast i8* %922 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %921, i8 -86, i64 16, i1 false)
  store i8* %921, i8** %925, align 8, !noalias !103
  store i64 34359738368, i64* %924, align 8, !noalias !103
  %926 = trunc i64 %377 to i32
  %927 = icmp eq i32 %926, 0
  br i1 %927, label %936, label %928

928:                                              ; preds = %920
  %929 = bitcast i8* %922 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %929, i32 %926, i32 1) #12
  %930 = load i64, i64* %924, align 8, !noalias !103
  %931 = shl nuw nsw i64 %377, 1
  %932 = add i64 %930, %931
  %933 = and i64 %932, 4294967294
  %934 = and i64 %930, -4294967295
  %935 = or i64 %933, %934
  store i64 %935, i64* %924, align 8, !noalias !103
  br label %936

936:                                              ; preds = %920, %928
  %937 = icmp eq i64 %377, 0
  br i1 %937, label %946, label %938

938:                                              ; preds = %936
  %939 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %940 = bitcast i8* %939 to i32**
  %941 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %942 = bitcast i8* %941 to i32**
  %943 = icmp eq i32 %84, 0
  %944 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %945 = bitcast i8* %922 to i32**
  br label %947

946:                                              ; preds = %970, %936
  br i1 %69, label %977, label %978

947:                                              ; preds = %938, %970
  %948 = phi i64 [ 0, %938 ], [ %975, %970 ]
  %949 = load i64, i64* %367, align 8
  %950 = and i64 %949, 4294967294
  %951 = icmp eq i64 %950, 2
  %952 = load i32*, i32** %940, align 8
  %953 = shl i64 %948, 32
  %954 = ashr exact i64 %953, 32
  %955 = getelementptr inbounds i32, i32* %952, i64 %954
  %956 = select i1 %951, i32* %952, i32* %955
  %957 = load i32, i32* %956, align 4
  %958 = load i64, i64* %372, align 8
  %959 = and i64 %958, 4294967294
  %960 = icmp eq i64 %959, 2
  %961 = load i32*, i32** %942, align 8
  %962 = getelementptr inbounds i32, i32* %961, i64 %954
  %963 = select i1 %960, i32* %961, i32* %962
  %964 = load i32, i32* %963, align 4
  %965 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %944, align 8
  br i1 %943, label %966, label %968

966:                                              ; preds = %947
  %967 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %965, %"class.skvm::Builder"* %965, i32 %957, %"class.skvm::Builder"* %965, i32 %964) #12
  br label %970

968:                                              ; preds = %947
  %969 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3I32ES1_(%"class.skvm::Builder"* %965, %"class.skvm::Builder"* %965, i32 %957, %"class.skvm::Builder"* %965, i32 %964) #12
  br label %970

970:                                              ; preds = %968, %966
  %971 = phi { %"class.skvm::Builder"*, i32 } [ %969, %968 ], [ %967, %966 ]
  %972 = extractvalue { %"class.skvm::Builder"*, i32 } %971, 1
  %973 = load i32*, i32** %945, align 8, !noalias !103
  %974 = getelementptr inbounds i32, i32* %973, i64 %954
  store i32 %972, i32* %974, align 4
  %975 = add nuw nsw i64 %948, 1
  %976 = icmp ult i64 %975, %377
  br i1 %976, label %947, label %946

977:                                              ; preds = %946
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %12) #12
  br label %1012

978:                                              ; preds = %946
  %979 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %980 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %981 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %982 = bitcast i8* %981 to i64*
  %983 = bitcast i8* %979 to i8**
  store i8* %980, i8** %983, align 8, !alias.scope !103
  store i64 34359738368, i64* %982, align 8, !alias.scope !103
  %984 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %12, %0
  br i1 %984, label %1012, label %985

985:                                              ; preds = %978
  %986 = bitcast i8* %979 to %class.SkTArray*
  store i64 34359738368, i64* %982, align 8, !alias.scope !103
  %987 = load i64, i64* %924, align 8, !noalias !103
  %988 = lshr i64 %987, 1
  %989 = trunc i64 %988 to i32
  %990 = and i32 %989, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %986, i32 %990, i32 0) #12
  %991 = load i64, i64* %924, align 8, !noalias !103
  %992 = and i64 %991, 4294967294
  %993 = load i64, i64* %982, align 8, !alias.scope !103
  %994 = and i64 %993, -4294967295
  %995 = or i64 %994, %992
  store i64 %995, i64* %982, align 8, !alias.scope !103
  %996 = bitcast i8* %922 to i32**
  %997 = load i32*, i32** %996, align 8, !noalias !103
  %998 = icmp eq i64 %992, 0
  br i1 %998, label %1012, label %999

999:                                              ; preds = %985
  %1000 = bitcast i8* %979 to i32**
  br label %1001

1001:                                             ; preds = %1001, %999
  %1002 = phi i64 [ 0, %999 ], [ %1007, %1001 ]
  %1003 = load i32*, i32** %1000, align 8, !alias.scope !103
  %1004 = getelementptr inbounds i32, i32* %1003, i64 %1002
  %1005 = getelementptr inbounds i32, i32* %997, i64 %1002
  %1006 = load i32, i32* %1005, align 4
  store i32 %1006, i32* %1004, align 4
  %1007 = add nuw nsw i64 %1002, 1
  %1008 = load i64, i64* %982, align 8, !alias.scope !103
  %1009 = lshr i64 %1008, 1
  %1010 = and i64 %1009, 2147483647
  %1011 = icmp ult i64 %1007, %1010
  br i1 %1011, label %1001, label %1012

1012:                                             ; preds = %1001, %978, %985, %977
  %1013 = load i64, i64* %924, align 8, !noalias !103
  %1014 = and i64 %1013, 1
  %1015 = icmp eq i64 %1014, 0
  br i1 %1015, label %1018, label %1016

1016:                                             ; preds = %1012
  %1017 = load i8*, i8** %925, align 8, !noalias !103
  call void @_Z7sk_freePv(i8* %1017) #12
  br label %1018

1018:                                             ; preds = %1012, %1016
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %921) #12, !noalias !103
  br label %1841

1019:                                             ; preds = %365
  %1020 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1020) #12, !noalias !106
  %1021 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 16
  %1022 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 24
  %1023 = bitcast i8* %1022 to i64*
  %1024 = bitcast i8* %1021 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1020, i8 -86, i64 16, i1 false)
  store i8* %1020, i8** %1024, align 8, !noalias !106
  store i64 34359738368, i64* %1023, align 8, !noalias !106
  %1025 = trunc i64 %377 to i32
  %1026 = icmp eq i32 %1025, 0
  br i1 %1026, label %1035, label %1027

1027:                                             ; preds = %1019
  %1028 = bitcast i8* %1021 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1028, i32 %1025, i32 1) #12
  %1029 = load i64, i64* %1023, align 8, !noalias !106
  %1030 = shl nuw nsw i64 %377, 1
  %1031 = add i64 %1029, %1030
  %1032 = and i64 %1031, 4294967294
  %1033 = and i64 %1029, -4294967295
  %1034 = or i64 %1032, %1033
  store i64 %1034, i64* %1023, align 8, !noalias !106
  br label %1035

1035:                                             ; preds = %1019, %1027
  %1036 = icmp eq i64 %377, 0
  br i1 %1036, label %1045, label %1037

1037:                                             ; preds = %1035
  %1038 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1039 = bitcast i8* %1038 to i32**
  %1040 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1041 = bitcast i8* %1040 to i32**
  %1042 = icmp eq i32 %84, 0
  %1043 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1044 = bitcast i8* %1021 to i32**
  br label %1046

1045:                                             ; preds = %1069, %1035
  br i1 %69, label %1076, label %1077

1046:                                             ; preds = %1037, %1069
  %1047 = phi i64 [ 0, %1037 ], [ %1074, %1069 ]
  %1048 = load i64, i64* %367, align 8
  %1049 = and i64 %1048, 4294967294
  %1050 = icmp eq i64 %1049, 2
  %1051 = load i32*, i32** %1039, align 8
  %1052 = shl i64 %1047, 32
  %1053 = ashr exact i64 %1052, 32
  %1054 = getelementptr inbounds i32, i32* %1051, i64 %1053
  %1055 = select i1 %1050, i32* %1051, i32* %1054
  %1056 = load i32, i32* %1055, align 4
  %1057 = load i64, i64* %372, align 8
  %1058 = and i64 %1057, 4294967294
  %1059 = icmp eq i64 %1058, 2
  %1060 = load i32*, i32** %1041, align 8
  %1061 = getelementptr inbounds i32, i32* %1060, i64 %1053
  %1062 = select i1 %1059, i32* %1060, i32* %1061
  %1063 = load i32, i32* %1062, align 4
  %1064 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1043, align 8
  br i1 %1042, label %1065, label %1067

1065:                                             ; preds = %1046
  %1066 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3F32ES1_(%"class.skvm::Builder"* %1064, %"class.skvm::Builder"* %1064, i32 %1056, %"class.skvm::Builder"* %1064, i32 %1063) #12
  br label %1069

1067:                                             ; preds = %1046
  %1068 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3I32ES1_(%"class.skvm::Builder"* %1064, %"class.skvm::Builder"* %1064, i32 %1056, %"class.skvm::Builder"* %1064, i32 %1063) #12
  br label %1069

1069:                                             ; preds = %1067, %1065
  %1070 = phi { %"class.skvm::Builder"*, i32 } [ %1068, %1067 ], [ %1066, %1065 ]
  %1071 = extractvalue { %"class.skvm::Builder"*, i32 } %1070, 1
  %1072 = load i32*, i32** %1044, align 8, !noalias !106
  %1073 = getelementptr inbounds i32, i32* %1072, i64 %1053
  store i32 %1071, i32* %1073, align 4
  %1074 = add nuw nsw i64 %1047, 1
  %1075 = icmp ult i64 %1074, %377
  br i1 %1075, label %1046, label %1045

1076:                                             ; preds = %1045
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %11) #12
  br label %1111

1077:                                             ; preds = %1045
  %1078 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1079 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1080 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1081 = bitcast i8* %1080 to i64*
  %1082 = bitcast i8* %1078 to i8**
  store i8* %1079, i8** %1082, align 8, !alias.scope !106
  store i64 34359738368, i64* %1081, align 8, !alias.scope !106
  %1083 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %11, %0
  br i1 %1083, label %1111, label %1084

1084:                                             ; preds = %1077
  %1085 = bitcast i8* %1078 to %class.SkTArray*
  store i64 34359738368, i64* %1081, align 8, !alias.scope !106
  %1086 = load i64, i64* %1023, align 8, !noalias !106
  %1087 = lshr i64 %1086, 1
  %1088 = trunc i64 %1087 to i32
  %1089 = and i32 %1088, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1085, i32 %1089, i32 0) #12
  %1090 = load i64, i64* %1023, align 8, !noalias !106
  %1091 = and i64 %1090, 4294967294
  %1092 = load i64, i64* %1081, align 8, !alias.scope !106
  %1093 = and i64 %1092, -4294967295
  %1094 = or i64 %1093, %1091
  store i64 %1094, i64* %1081, align 8, !alias.scope !106
  %1095 = bitcast i8* %1021 to i32**
  %1096 = load i32*, i32** %1095, align 8, !noalias !106
  %1097 = icmp eq i64 %1091, 0
  br i1 %1097, label %1111, label %1098

1098:                                             ; preds = %1084
  %1099 = bitcast i8* %1078 to i32**
  br label %1100

1100:                                             ; preds = %1100, %1098
  %1101 = phi i64 [ 0, %1098 ], [ %1106, %1100 ]
  %1102 = load i32*, i32** %1099, align 8, !alias.scope !106
  %1103 = getelementptr inbounds i32, i32* %1102, i64 %1101
  %1104 = getelementptr inbounds i32, i32* %1096, i64 %1101
  %1105 = load i32, i32* %1104, align 4
  store i32 %1105, i32* %1103, align 4
  %1106 = add nuw nsw i64 %1101, 1
  %1107 = load i64, i64* %1081, align 8, !alias.scope !106
  %1108 = lshr i64 %1107, 1
  %1109 = and i64 %1108, 2147483647
  %1110 = icmp ult i64 %1106, %1109
  br i1 %1110, label %1100, label %1111

1111:                                             ; preds = %1100, %1077, %1084, %1076
  %1112 = load i64, i64* %1023, align 8, !noalias !106
  %1113 = and i64 %1112, 1
  %1114 = icmp eq i64 %1113, 0
  br i1 %1114, label %1117, label %1115

1115:                                             ; preds = %1111
  %1116 = load i8*, i8** %1024, align 8, !noalias !106
  call void @_Z7sk_freePv(i8* %1116) #12
  br label %1117

1117:                                             ; preds = %1111, %1115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1020) #12, !noalias !106
  br label %1841

1118:                                             ; preds = %365
  %1119 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1119) #12, !noalias !109
  %1120 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 16
  %1121 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 24
  %1122 = bitcast i8* %1121 to i64*
  %1123 = bitcast i8* %1120 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1119, i8 -86, i64 16, i1 false)
  store i8* %1119, i8** %1123, align 8, !noalias !109
  store i64 34359738368, i64* %1122, align 8, !noalias !109
  %1124 = trunc i64 %377 to i32
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1134, label %1126

1126:                                             ; preds = %1118
  %1127 = bitcast i8* %1120 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1127, i32 %1124, i32 1) #12
  %1128 = load i64, i64* %1122, align 8, !noalias !109
  %1129 = shl nuw nsw i64 %377, 1
  %1130 = add i64 %1128, %1129
  %1131 = and i64 %1130, 4294967294
  %1132 = and i64 %1128, -4294967295
  %1133 = or i64 %1131, %1132
  store i64 %1133, i64* %1122, align 8, !noalias !109
  br label %1134

1134:                                             ; preds = %1118, %1126
  %1135 = icmp eq i64 %377, 0
  br i1 %1135, label %1144, label %1136

1136:                                             ; preds = %1134
  %1137 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1138 = bitcast i8* %1137 to i32**
  %1139 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1140 = bitcast i8* %1139 to i32**
  %1141 = icmp eq i32 %84, 0
  %1142 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1143 = bitcast i8* %1120 to i32**
  br label %1145

1144:                                             ; preds = %1168, %1134
  br i1 %69, label %1175, label %1176

1145:                                             ; preds = %1136, %1168
  %1146 = phi i64 [ 0, %1136 ], [ %1173, %1168 ]
  %1147 = load i64, i64* %367, align 8
  %1148 = and i64 %1147, 4294967294
  %1149 = icmp eq i64 %1148, 2
  %1150 = load i32*, i32** %1138, align 8
  %1151 = shl i64 %1146, 32
  %1152 = ashr exact i64 %1151, 32
  %1153 = getelementptr inbounds i32, i32* %1150, i64 %1152
  %1154 = select i1 %1149, i32* %1150, i32* %1153
  %1155 = load i32, i32* %1154, align 4
  %1156 = load i64, i64* %372, align 8
  %1157 = and i64 %1156, 4294967294
  %1158 = icmp eq i64 %1157, 2
  %1159 = load i32*, i32** %1140, align 8
  %1160 = getelementptr inbounds i32, i32* %1159, i64 %1152
  %1161 = select i1 %1158, i32* %1159, i32* %1160
  %1162 = load i32, i32* %1161, align 4
  %1163 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1142, align 8
  br i1 %1141, label %1164, label %1166

1164:                                             ; preds = %1145
  %1165 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1163, %"class.skvm::Builder"* %1163, i32 %1155, %"class.skvm::Builder"* %1163, i32 %1162) #12
  br label %1168

1166:                                             ; preds = %1145
  %1167 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %1163, %"class.skvm::Builder"* %1163, i32 %1155, %"class.skvm::Builder"* %1163, i32 %1162) #12
  br label %1168

1168:                                             ; preds = %1166, %1164
  %1169 = phi { %"class.skvm::Builder"*, i32 } [ %1167, %1166 ], [ %1165, %1164 ]
  %1170 = extractvalue { %"class.skvm::Builder"*, i32 } %1169, 1
  %1171 = load i32*, i32** %1143, align 8, !noalias !109
  %1172 = getelementptr inbounds i32, i32* %1171, i64 %1152
  store i32 %1170, i32* %1172, align 4
  %1173 = add nuw nsw i64 %1146, 1
  %1174 = icmp ult i64 %1173, %377
  br i1 %1174, label %1145, label %1144

1175:                                             ; preds = %1144
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %10) #12
  br label %1210

1176:                                             ; preds = %1144
  %1177 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1178 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1179 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1180 = bitcast i8* %1179 to i64*
  %1181 = bitcast i8* %1177 to i8**
  store i8* %1178, i8** %1181, align 8, !alias.scope !109
  store i64 34359738368, i64* %1180, align 8, !alias.scope !109
  %1182 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %10, %0
  br i1 %1182, label %1210, label %1183

1183:                                             ; preds = %1176
  %1184 = bitcast i8* %1177 to %class.SkTArray*
  store i64 34359738368, i64* %1180, align 8, !alias.scope !109
  %1185 = load i64, i64* %1122, align 8, !noalias !109
  %1186 = lshr i64 %1185, 1
  %1187 = trunc i64 %1186 to i32
  %1188 = and i32 %1187, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1184, i32 %1188, i32 0) #12
  %1189 = load i64, i64* %1122, align 8, !noalias !109
  %1190 = and i64 %1189, 4294967294
  %1191 = load i64, i64* %1180, align 8, !alias.scope !109
  %1192 = and i64 %1191, -4294967295
  %1193 = or i64 %1192, %1190
  store i64 %1193, i64* %1180, align 8, !alias.scope !109
  %1194 = bitcast i8* %1120 to i32**
  %1195 = load i32*, i32** %1194, align 8, !noalias !109
  %1196 = icmp eq i64 %1190, 0
  br i1 %1196, label %1210, label %1197

1197:                                             ; preds = %1183
  %1198 = bitcast i8* %1177 to i32**
  br label %1199

1199:                                             ; preds = %1199, %1197
  %1200 = phi i64 [ 0, %1197 ], [ %1205, %1199 ]
  %1201 = load i32*, i32** %1198, align 8, !alias.scope !109
  %1202 = getelementptr inbounds i32, i32* %1201, i64 %1200
  %1203 = getelementptr inbounds i32, i32* %1195, i64 %1200
  %1204 = load i32, i32* %1203, align 4
  store i32 %1204, i32* %1202, align 4
  %1205 = add nuw nsw i64 %1200, 1
  %1206 = load i64, i64* %1180, align 8, !alias.scope !109
  %1207 = lshr i64 %1206, 1
  %1208 = and i64 %1207, 2147483647
  %1209 = icmp ult i64 %1205, %1208
  br i1 %1209, label %1199, label %1210

1210:                                             ; preds = %1199, %1176, %1183, %1175
  %1211 = load i64, i64* %1122, align 8, !noalias !109
  %1212 = and i64 %1211, 1
  %1213 = icmp eq i64 %1212, 0
  br i1 %1213, label %1216, label %1214

1214:                                             ; preds = %1210
  %1215 = load i8*, i8** %1123, align 8, !noalias !109
  call void @_Z7sk_freePv(i8* %1215) #12
  br label %1216

1216:                                             ; preds = %1210, %1214
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1119) #12, !noalias !109
  br label %1841

1217:                                             ; preds = %365
  %1218 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1218) #12, !noalias !112
  %1219 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 16
  %1220 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 24
  %1221 = bitcast i8* %1220 to i64*
  %1222 = bitcast i8* %1219 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1218, i8 -86, i64 16, i1 false)
  store i8* %1218, i8** %1222, align 8, !noalias !112
  store i64 34359738368, i64* %1221, align 8, !noalias !112
  %1223 = trunc i64 %377 to i32
  %1224 = icmp eq i32 %1223, 0
  br i1 %1224, label %1233, label %1225

1225:                                             ; preds = %1217
  %1226 = bitcast i8* %1219 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1226, i32 %1223, i32 1) #12
  %1227 = load i64, i64* %1221, align 8, !noalias !112
  %1228 = shl nuw nsw i64 %377, 1
  %1229 = add i64 %1227, %1228
  %1230 = and i64 %1229, 4294967294
  %1231 = and i64 %1227, -4294967295
  %1232 = or i64 %1230, %1231
  store i64 %1232, i64* %1221, align 8, !noalias !112
  br label %1233

1233:                                             ; preds = %1217, %1225
  %1234 = icmp eq i64 %377, 0
  br i1 %1234, label %1243, label %1235

1235:                                             ; preds = %1233
  %1236 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1237 = bitcast i8* %1236 to i32**
  %1238 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1239 = bitcast i8* %1238 to i32**
  %1240 = icmp eq i32 %84, 0
  %1241 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1242 = bitcast i8* %1219 to i32**
  br label %1244

1243:                                             ; preds = %1267, %1233
  br i1 %69, label %1274, label %1275

1244:                                             ; preds = %1235, %1267
  %1245 = phi i64 [ 0, %1235 ], [ %1272, %1267 ]
  %1246 = load i64, i64* %367, align 8
  %1247 = and i64 %1246, 4294967294
  %1248 = icmp eq i64 %1247, 2
  %1249 = load i32*, i32** %1237, align 8
  %1250 = shl i64 %1245, 32
  %1251 = ashr exact i64 %1250, 32
  %1252 = getelementptr inbounds i32, i32* %1249, i64 %1251
  %1253 = select i1 %1248, i32* %1249, i32* %1252
  %1254 = load i32, i32* %1253, align 4
  %1255 = load i64, i64* %372, align 8
  %1256 = and i64 %1255, 4294967294
  %1257 = icmp eq i64 %1256, 2
  %1258 = load i32*, i32** %1239, align 8
  %1259 = getelementptr inbounds i32, i32* %1258, i64 %1251
  %1260 = select i1 %1257, i32* %1258, i32* %1259
  %1261 = load i32, i32* %1260, align 4
  %1262 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1241, align 8
  br i1 %1240, label %1263, label %1265

1263:                                             ; preds = %1244
  %1264 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %1262, %"class.skvm::Builder"* %1262, i32 %1254, %"class.skvm::Builder"* %1262, i32 %1261) #12
  br label %1267

1265:                                             ; preds = %1244
  %1266 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3I32ES1_(%"class.skvm::Builder"* %1262, %"class.skvm::Builder"* %1262, i32 %1254, %"class.skvm::Builder"* %1262, i32 %1261) #12
  br label %1267

1267:                                             ; preds = %1265, %1263
  %1268 = phi { %"class.skvm::Builder"*, i32 } [ %1266, %1265 ], [ %1264, %1263 ]
  %1269 = extractvalue { %"class.skvm::Builder"*, i32 } %1268, 1
  %1270 = load i32*, i32** %1242, align 8, !noalias !112
  %1271 = getelementptr inbounds i32, i32* %1270, i64 %1251
  store i32 %1269, i32* %1271, align 4
  %1272 = add nuw nsw i64 %1245, 1
  %1273 = icmp ult i64 %1272, %377
  br i1 %1273, label %1244, label %1243

1274:                                             ; preds = %1243
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %9) #12
  br label %1309

1275:                                             ; preds = %1243
  %1276 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1277 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1278 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1279 = bitcast i8* %1278 to i64*
  %1280 = bitcast i8* %1276 to i8**
  store i8* %1277, i8** %1280, align 8, !alias.scope !112
  store i64 34359738368, i64* %1279, align 8, !alias.scope !112
  %1281 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %9, %0
  br i1 %1281, label %1309, label %1282

1282:                                             ; preds = %1275
  %1283 = bitcast i8* %1276 to %class.SkTArray*
  store i64 34359738368, i64* %1279, align 8, !alias.scope !112
  %1284 = load i64, i64* %1221, align 8, !noalias !112
  %1285 = lshr i64 %1284, 1
  %1286 = trunc i64 %1285 to i32
  %1287 = and i32 %1286, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1283, i32 %1287, i32 0) #12
  %1288 = load i64, i64* %1221, align 8, !noalias !112
  %1289 = and i64 %1288, 4294967294
  %1290 = load i64, i64* %1279, align 8, !alias.scope !112
  %1291 = and i64 %1290, -4294967295
  %1292 = or i64 %1291, %1289
  store i64 %1292, i64* %1279, align 8, !alias.scope !112
  %1293 = bitcast i8* %1219 to i32**
  %1294 = load i32*, i32** %1293, align 8, !noalias !112
  %1295 = icmp eq i64 %1289, 0
  br i1 %1295, label %1309, label %1296

1296:                                             ; preds = %1282
  %1297 = bitcast i8* %1276 to i32**
  br label %1298

1298:                                             ; preds = %1298, %1296
  %1299 = phi i64 [ 0, %1296 ], [ %1304, %1298 ]
  %1300 = load i32*, i32** %1297, align 8, !alias.scope !112
  %1301 = getelementptr inbounds i32, i32* %1300, i64 %1299
  %1302 = getelementptr inbounds i32, i32* %1294, i64 %1299
  %1303 = load i32, i32* %1302, align 4
  store i32 %1303, i32* %1301, align 4
  %1304 = add nuw nsw i64 %1299, 1
  %1305 = load i64, i64* %1279, align 8, !alias.scope !112
  %1306 = lshr i64 %1305, 1
  %1307 = and i64 %1306, 2147483647
  %1308 = icmp ult i64 %1304, %1307
  br i1 %1308, label %1298, label %1309

1309:                                             ; preds = %1298, %1275, %1282, %1274
  %1310 = load i64, i64* %1221, align 8, !noalias !112
  %1311 = and i64 %1310, 1
  %1312 = icmp eq i64 %1311, 0
  br i1 %1312, label %1315, label %1313

1313:                                             ; preds = %1309
  %1314 = load i8*, i8** %1222, align 8, !noalias !112
  call void @_Z7sk_freePv(i8* %1314) #12
  br label %1315

1315:                                             ; preds = %1309, %1313
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1218) #12, !noalias !112
  br label %1841

1316:                                             ; preds = %212, %365
  %1317 = phi i64 [ %224, %212 ], [ %377, %365 ]
  %1318 = phi i64* [ %219, %212 ], [ %372, %365 ]
  %1319 = phi i64* [ %214, %212 ], [ %367, %365 ]
  %1320 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1320) #12, !noalias !115
  %1321 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 16
  %1322 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 24
  %1323 = bitcast i8* %1322 to i64*
  %1324 = bitcast i8* %1321 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1320, i8 -86, i64 16, i1 false)
  store i8* %1320, i8** %1324, align 8, !noalias !115
  store i64 34359738368, i64* %1323, align 8, !noalias !115
  %1325 = trunc i64 %1317 to i32
  %1326 = icmp eq i32 %1325, 0
  br i1 %1326, label %1335, label %1327

1327:                                             ; preds = %1316
  %1328 = bitcast i8* %1321 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1328, i32 %1325, i32 1) #12
  %1329 = load i64, i64* %1323, align 8, !noalias !115
  %1330 = shl nuw nsw i64 %1317, 1
  %1331 = add i64 %1329, %1330
  %1332 = and i64 %1331, 4294967294
  %1333 = and i64 %1329, -4294967295
  %1334 = or i64 %1332, %1333
  store i64 %1334, i64* %1323, align 8, !noalias !115
  br label %1335

1335:                                             ; preds = %1316, %1327
  %1336 = icmp eq i64 %1317, 0
  br i1 %1336, label %1345, label %1337

1337:                                             ; preds = %1335
  %1338 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1339 = bitcast i8* %1338 to i32**
  %1340 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1341 = bitcast i8* %1340 to i32**
  %1342 = icmp eq i32 %84, 0
  %1343 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1344 = bitcast i8* %1321 to i32**
  br label %1346

1345:                                             ; preds = %1369, %1335
  br i1 %69, label %1376, label %1377

1346:                                             ; preds = %1337, %1369
  %1347 = phi i64 [ 0, %1337 ], [ %1374, %1369 ]
  %1348 = load i64, i64* %1319, align 8
  %1349 = and i64 %1348, 4294967294
  %1350 = icmp eq i64 %1349, 2
  %1351 = load i32*, i32** %1339, align 8
  %1352 = shl i64 %1347, 32
  %1353 = ashr exact i64 %1352, 32
  %1354 = getelementptr inbounds i32, i32* %1351, i64 %1353
  %1355 = select i1 %1350, i32* %1351, i32* %1354
  %1356 = load i32, i32* %1355, align 4
  %1357 = load i64, i64* %1318, align 8
  %1358 = and i64 %1357, 4294967294
  %1359 = icmp eq i64 %1358, 2
  %1360 = load i32*, i32** %1341, align 8
  %1361 = getelementptr inbounds i32, i32* %1360, i64 %1353
  %1362 = select i1 %1359, i32* %1360, i32* %1361
  %1363 = load i32, i32* %1362, align 4
  %1364 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1343, align 8
  br i1 %1342, label %1365, label %1367

1365:                                             ; preds = %1346
  %1366 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %1364, %"class.skvm::Builder"* %1364, i32 %1356, %"class.skvm::Builder"* %1364, i32 %1363) #12
  br label %1369

1367:                                             ; preds = %1346
  %1368 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3I32ES1_(%"class.skvm::Builder"* %1364, %"class.skvm::Builder"* %1364, i32 %1356, %"class.skvm::Builder"* %1364, i32 %1363) #12
  br label %1369

1369:                                             ; preds = %1367, %1365
  %1370 = phi { %"class.skvm::Builder"*, i32 } [ %1368, %1367 ], [ %1366, %1365 ]
  %1371 = extractvalue { %"class.skvm::Builder"*, i32 } %1370, 1
  %1372 = load i32*, i32** %1344, align 8, !noalias !115
  %1373 = getelementptr inbounds i32, i32* %1372, i64 %1353
  store i32 %1371, i32* %1373, align 4
  %1374 = add nuw nsw i64 %1347, 1
  %1375 = icmp ult i64 %1374, %1317
  br i1 %1375, label %1346, label %1345

1376:                                             ; preds = %1345
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %8) #12
  br label %1411

1377:                                             ; preds = %1345
  %1378 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1379 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1380 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1381 = bitcast i8* %1380 to i64*
  %1382 = bitcast i8* %1378 to i8**
  store i8* %1379, i8** %1382, align 8, !alias.scope !115
  store i64 34359738368, i64* %1381, align 8, !alias.scope !115
  %1383 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %8, %0
  br i1 %1383, label %1411, label %1384

1384:                                             ; preds = %1377
  %1385 = bitcast i8* %1378 to %class.SkTArray*
  store i64 34359738368, i64* %1381, align 8, !alias.scope !115
  %1386 = load i64, i64* %1323, align 8, !noalias !115
  %1387 = lshr i64 %1386, 1
  %1388 = trunc i64 %1387 to i32
  %1389 = and i32 %1388, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1385, i32 %1389, i32 0) #12
  %1390 = load i64, i64* %1323, align 8, !noalias !115
  %1391 = and i64 %1390, 4294967294
  %1392 = load i64, i64* %1381, align 8, !alias.scope !115
  %1393 = and i64 %1392, -4294967295
  %1394 = or i64 %1393, %1391
  store i64 %1394, i64* %1381, align 8, !alias.scope !115
  %1395 = bitcast i8* %1321 to i32**
  %1396 = load i32*, i32** %1395, align 8, !noalias !115
  %1397 = icmp eq i64 %1391, 0
  br i1 %1397, label %1411, label %1398

1398:                                             ; preds = %1384
  %1399 = bitcast i8* %1378 to i32**
  br label %1400

1400:                                             ; preds = %1400, %1398
  %1401 = phi i64 [ 0, %1398 ], [ %1406, %1400 ]
  %1402 = load i32*, i32** %1399, align 8, !alias.scope !115
  %1403 = getelementptr inbounds i32, i32* %1402, i64 %1401
  %1404 = getelementptr inbounds i32, i32* %1396, i64 %1401
  %1405 = load i32, i32* %1404, align 4
  store i32 %1405, i32* %1403, align 4
  %1406 = add nuw nsw i64 %1401, 1
  %1407 = load i64, i64* %1381, align 8, !alias.scope !115
  %1408 = lshr i64 %1407, 1
  %1409 = and i64 %1408, 2147483647
  %1410 = icmp ult i64 %1406, %1409
  br i1 %1410, label %1400, label %1411

1411:                                             ; preds = %1400, %1377, %1384, %1376
  %1412 = load i64, i64* %1323, align 8, !noalias !115
  %1413 = and i64 %1412, 1
  %1414 = icmp eq i64 %1413, 0
  br i1 %1414, label %1417, label %1415

1415:                                             ; preds = %1411
  %1416 = load i8*, i8** %1324, align 8, !noalias !115
  call void @_Z7sk_freePv(i8* %1416) #12
  br label %1417

1417:                                             ; preds = %1411, %1415
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1320) #12, !noalias !115
  br label %1841

1418:                                             ; preds = %365
  %1419 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1419) #12, !noalias !118
  %1420 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 16
  %1421 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 24
  %1422 = bitcast i8* %1421 to i64*
  %1423 = bitcast i8* %1420 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1419, i8 -86, i64 16, i1 false)
  store i8* %1419, i8** %1423, align 8, !noalias !118
  store i64 34359738368, i64* %1422, align 8, !noalias !118
  %1424 = trunc i64 %377 to i32
  %1425 = icmp eq i32 %1424, 0
  br i1 %1425, label %1434, label %1426

1426:                                             ; preds = %1418
  %1427 = bitcast i8* %1420 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1427, i32 %1424, i32 1) #12
  %1428 = load i64, i64* %1422, align 8, !noalias !118
  %1429 = shl nuw nsw i64 %377, 1
  %1430 = add i64 %1428, %1429
  %1431 = and i64 %1430, 4294967294
  %1432 = and i64 %1428, -4294967295
  %1433 = or i64 %1431, %1432
  store i64 %1433, i64* %1422, align 8, !noalias !118
  br label %1434

1434:                                             ; preds = %1418, %1426
  %1435 = icmp eq i64 %377, 0
  br i1 %1435, label %1444, label %1436

1436:                                             ; preds = %1434
  %1437 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1438 = bitcast i8* %1437 to i32**
  %1439 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1440 = bitcast i8* %1439 to i32**
  %1441 = icmp eq i32 %84, 0
  %1442 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1443 = bitcast i8* %1420 to i32**
  br label %1445

1444:                                             ; preds = %1477, %1434
  br i1 %69, label %1484, label %1485

1445:                                             ; preds = %1436, %1477
  %1446 = phi i64 [ 0, %1436 ], [ %1482, %1477 ]
  %1447 = load i64, i64* %367, align 8
  %1448 = and i64 %1447, 4294967294
  %1449 = icmp eq i64 %1448, 2
  %1450 = load i32*, i32** %1438, align 8
  %1451 = shl i64 %1446, 32
  %1452 = ashr exact i64 %1451, 32
  %1453 = getelementptr inbounds i32, i32* %1450, i64 %1452
  %1454 = select i1 %1449, i32* %1450, i32* %1453
  %1455 = load i32, i32* %1454, align 4
  %1456 = load i64, i64* %372, align 8
  %1457 = and i64 %1456, 4294967294
  %1458 = icmp eq i64 %1457, 2
  %1459 = load i32*, i32** %1440, align 8
  %1460 = getelementptr inbounds i32, i32* %1459, i64 %1452
  %1461 = select i1 %1458, i32* %1459, i32* %1460
  %1462 = load i32, i32* %1461, align 4
  %1463 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1442, align 8
  br i1 %1441, label %1464, label %1466

1464:                                             ; preds = %1445
  %1465 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %1463, %"class.skvm::Builder"* %1463, i32 %1455, %"class.skvm::Builder"* %1463, i32 %1462) #12
  br label %1477

1466:                                             ; preds = %1445
  %1467 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6to_F32ENS_3I32E(%"class.skvm::Builder"* %1463, %"class.skvm::Builder"* %1463, i32 %1455) #12
  %1468 = extractvalue { %"class.skvm::Builder"*, i32 } %1467, 0
  %1469 = extractvalue { %"class.skvm::Builder"*, i32 } %1467, 1
  %1470 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6to_F32ENS_3I32E(%"class.skvm::Builder"* %1463, %"class.skvm::Builder"* %1463, i32 %1462) #12
  %1471 = extractvalue { %"class.skvm::Builder"*, i32 } %1470, 0
  %1472 = extractvalue { %"class.skvm::Builder"*, i32 } %1470, 1
  %1473 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %1468, %"class.skvm::Builder"* %1468, i32 %1469, %"class.skvm::Builder"* %1471, i32 %1472) #12
  %1474 = extractvalue { %"class.skvm::Builder"*, i32 } %1473, 0
  %1475 = extractvalue { %"class.skvm::Builder"*, i32 } %1473, 1
  %1476 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"* %1474, %"class.skvm::Builder"* %1474, i32 %1475) #12
  br label %1477

1477:                                             ; preds = %1466, %1464
  %1478 = phi { %"class.skvm::Builder"*, i32 } [ %1476, %1466 ], [ %1465, %1464 ]
  %1479 = extractvalue { %"class.skvm::Builder"*, i32 } %1478, 1
  %1480 = load i32*, i32** %1443, align 8, !noalias !118
  %1481 = getelementptr inbounds i32, i32* %1480, i64 %1452
  store i32 %1479, i32* %1481, align 4
  %1482 = add nuw nsw i64 %1446, 1
  %1483 = icmp ult i64 %1482, %377
  br i1 %1483, label %1445, label %1444

1484:                                             ; preds = %1444
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %7) #12
  br label %1519

1485:                                             ; preds = %1444
  %1486 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1487 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1488 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1489 = bitcast i8* %1488 to i64*
  %1490 = bitcast i8* %1486 to i8**
  store i8* %1487, i8** %1490, align 8, !alias.scope !118
  store i64 34359738368, i64* %1489, align 8, !alias.scope !118
  %1491 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %7, %0
  br i1 %1491, label %1519, label %1492

1492:                                             ; preds = %1485
  %1493 = bitcast i8* %1486 to %class.SkTArray*
  store i64 34359738368, i64* %1489, align 8, !alias.scope !118
  %1494 = load i64, i64* %1422, align 8, !noalias !118
  %1495 = lshr i64 %1494, 1
  %1496 = trunc i64 %1495 to i32
  %1497 = and i32 %1496, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1493, i32 %1497, i32 0) #12
  %1498 = load i64, i64* %1422, align 8, !noalias !118
  %1499 = and i64 %1498, 4294967294
  %1500 = load i64, i64* %1489, align 8, !alias.scope !118
  %1501 = and i64 %1500, -4294967295
  %1502 = or i64 %1501, %1499
  store i64 %1502, i64* %1489, align 8, !alias.scope !118
  %1503 = bitcast i8* %1420 to i32**
  %1504 = load i32*, i32** %1503, align 8, !noalias !118
  %1505 = icmp eq i64 %1499, 0
  br i1 %1505, label %1519, label %1506

1506:                                             ; preds = %1492
  %1507 = bitcast i8* %1486 to i32**
  br label %1508

1508:                                             ; preds = %1508, %1506
  %1509 = phi i64 [ 0, %1506 ], [ %1514, %1508 ]
  %1510 = load i32*, i32** %1507, align 8, !alias.scope !118
  %1511 = getelementptr inbounds i32, i32* %1510, i64 %1509
  %1512 = getelementptr inbounds i32, i32* %1504, i64 %1509
  %1513 = load i32, i32* %1512, align 4
  store i32 %1513, i32* %1511, align 4
  %1514 = add nuw nsw i64 %1509, 1
  %1515 = load i64, i64* %1489, align 8, !alias.scope !118
  %1516 = lshr i64 %1515, 1
  %1517 = and i64 %1516, 2147483647
  %1518 = icmp ult i64 %1514, %1517
  br i1 %1518, label %1508, label %1519

1519:                                             ; preds = %1508, %1485, %1492, %1484
  %1520 = load i64, i64* %1422, align 8, !noalias !118
  %1521 = and i64 %1520, 1
  %1522 = icmp eq i64 %1521, 0
  br i1 %1522, label %1525, label %1523

1523:                                             ; preds = %1519
  %1524 = load i8*, i8** %1423, align 8, !noalias !118
  call void @_Z7sk_freePv(i8* %1524) #12
  br label %1525

1525:                                             ; preds = %1519, %1523
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1419) #12, !noalias !118
  br label %1841

1526:                                             ; preds = %365, %365
  %1527 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1527) #12, !noalias !121
  %1528 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 16
  %1529 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 24
  %1530 = bitcast i8* %1529 to i64*
  %1531 = bitcast i8* %1528 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1527, i8 -86, i64 16, i1 false)
  store i8* %1527, i8** %1531, align 8, !noalias !121
  store i64 34359738368, i64* %1530, align 8, !noalias !121
  %1532 = trunc i64 %377 to i32
  %1533 = icmp eq i32 %1532, 0
  br i1 %1533, label %1542, label %1534

1534:                                             ; preds = %1526
  %1535 = bitcast i8* %1528 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1535, i32 %1532, i32 1) #12
  %1536 = load i64, i64* %1530, align 8, !noalias !121
  %1537 = shl nuw nsw i64 %377, 1
  %1538 = add i64 %1536, %1537
  %1539 = and i64 %1538, 4294967294
  %1540 = and i64 %1536, -4294967295
  %1541 = or i64 %1539, %1540
  store i64 %1541, i64* %1530, align 8, !noalias !121
  br label %1542

1542:                                             ; preds = %1526, %1534
  %1543 = icmp eq i64 %377, 0
  br i1 %1543, label %1552, label %1544

1544:                                             ; preds = %1542
  %1545 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1546 = bitcast i8* %1545 to i32**
  %1547 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1548 = bitcast i8* %1547 to i32**
  %1549 = icmp eq i32 %84, 0
  %1550 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1551 = bitcast i8* %1528 to i32**
  br label %1553

1552:                                             ; preds = %1582, %1542
  br i1 %69, label %1587, label %1588

1553:                                             ; preds = %1544, %1582
  %1554 = phi i64 [ 0, %1544 ], [ %1585, %1582 ]
  %1555 = load i32*, i32** %1546, align 8
  %1556 = load i32*, i32** %1548, align 8
  %1557 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1550, align 8
  br i1 %1549, label %1558, label %1563

1558:                                             ; preds = %1553
  %1559 = load i32*, i32** %1551, align 8, !noalias !121
  %1560 = shl i64 %1554, 32
  %1561 = ashr exact i64 %1560, 32
  %1562 = getelementptr inbounds i32, i32* %1559, i64 %1561
  br label %1582

1563:                                             ; preds = %1553
  %1564 = load i64, i64* %372, align 8
  %1565 = and i64 %1564, 4294967294
  %1566 = icmp eq i64 %1565, 2
  %1567 = shl i64 %1554, 32
  %1568 = ashr exact i64 %1567, 32
  %1569 = getelementptr inbounds i32, i32* %1556, i64 %1568
  %1570 = select i1 %1566, i32* %1556, i32* %1569
  %1571 = load i32, i32* %1570, align 4
  %1572 = load i64, i64* %367, align 8
  %1573 = and i64 %1572, 4294967294
  %1574 = icmp eq i64 %1573, 2
  %1575 = getelementptr inbounds i32, i32* %1555, i64 %1568
  %1576 = select i1 %1574, i32* %1555, i32* %1575
  %1577 = load i32, i32* %1576, align 4
  %1578 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %1557, %"class.skvm::Builder"* %1557, i32 %1577, %"class.skvm::Builder"* %1557, i32 %1571) #12
  %1579 = extractvalue { %"class.skvm::Builder"*, i32 } %1578, 1
  %1580 = load i32*, i32** %1551, align 8, !noalias !121
  %1581 = getelementptr inbounds i32, i32* %1580, i64 %1568
  br label %1582

1582:                                             ; preds = %1563, %1558
  %1583 = phi i32* [ %1581, %1563 ], [ %1562, %1558 ]
  %1584 = phi i32 [ %1579, %1563 ], [ -1, %1558 ]
  store i32 %1584, i32* %1583, align 4
  %1585 = add nuw nsw i64 %1554, 1
  %1586 = icmp ult i64 %1585, %377
  br i1 %1586, label %1553, label %1552

1587:                                             ; preds = %1552
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %6) #12
  br label %1622

1588:                                             ; preds = %1552
  %1589 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1590 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1591 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1592 = bitcast i8* %1591 to i64*
  %1593 = bitcast i8* %1589 to i8**
  store i8* %1590, i8** %1593, align 8, !alias.scope !121
  store i64 34359738368, i64* %1592, align 8, !alias.scope !121
  %1594 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %6, %0
  br i1 %1594, label %1622, label %1595

1595:                                             ; preds = %1588
  %1596 = bitcast i8* %1589 to %class.SkTArray*
  store i64 34359738368, i64* %1592, align 8, !alias.scope !121
  %1597 = load i64, i64* %1530, align 8, !noalias !121
  %1598 = lshr i64 %1597, 1
  %1599 = trunc i64 %1598 to i32
  %1600 = and i32 %1599, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1596, i32 %1600, i32 0) #12
  %1601 = load i64, i64* %1530, align 8, !noalias !121
  %1602 = and i64 %1601, 4294967294
  %1603 = load i64, i64* %1592, align 8, !alias.scope !121
  %1604 = and i64 %1603, -4294967295
  %1605 = or i64 %1604, %1602
  store i64 %1605, i64* %1592, align 8, !alias.scope !121
  %1606 = bitcast i8* %1528 to i32**
  %1607 = load i32*, i32** %1606, align 8, !noalias !121
  %1608 = icmp eq i64 %1602, 0
  br i1 %1608, label %1622, label %1609

1609:                                             ; preds = %1595
  %1610 = bitcast i8* %1589 to i32**
  br label %1611

1611:                                             ; preds = %1611, %1609
  %1612 = phi i64 [ 0, %1609 ], [ %1617, %1611 ]
  %1613 = load i32*, i32** %1610, align 8, !alias.scope !121
  %1614 = getelementptr inbounds i32, i32* %1613, i64 %1612
  %1615 = getelementptr inbounds i32, i32* %1607, i64 %1612
  %1616 = load i32, i32* %1615, align 4
  store i32 %1616, i32* %1614, align 4
  %1617 = add nuw nsw i64 %1612, 1
  %1618 = load i64, i64* %1592, align 8, !alias.scope !121
  %1619 = lshr i64 %1618, 1
  %1620 = and i64 %1619, 2147483647
  %1621 = icmp ult i64 %1617, %1620
  br i1 %1621, label %1611, label %1622

1622:                                             ; preds = %1611, %1588, %1595, %1587
  %1623 = load i64, i64* %1530, align 8, !noalias !121
  %1624 = and i64 %1623, 1
  %1625 = icmp eq i64 %1624, 0
  br i1 %1625, label %1628, label %1626

1626:                                             ; preds = %1622
  %1627 = load i8*, i8** %1531, align 8, !noalias !121
  call void @_Z7sk_freePv(i8* %1627) #12
  br label %1628

1628:                                             ; preds = %1622, %1626
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1527) #12, !noalias !121
  br label %1841

1629:                                             ; preds = %365
  %1630 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1630) #12, !noalias !124
  %1631 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 16
  %1632 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 24
  %1633 = bitcast i8* %1632 to i64*
  %1634 = bitcast i8* %1631 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1630, i8 -86, i64 16, i1 false)
  store i8* %1630, i8** %1634, align 8, !noalias !124
  store i64 34359738368, i64* %1633, align 8, !noalias !124
  %1635 = trunc i64 %377 to i32
  %1636 = icmp eq i32 %1635, 0
  br i1 %1636, label %1645, label %1637

1637:                                             ; preds = %1629
  %1638 = bitcast i8* %1631 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1638, i32 %1635, i32 1) #12
  %1639 = load i64, i64* %1633, align 8, !noalias !124
  %1640 = shl nuw nsw i64 %377, 1
  %1641 = add i64 %1639, %1640
  %1642 = and i64 %1641, 4294967294
  %1643 = and i64 %1639, -4294967295
  %1644 = or i64 %1642, %1643
  store i64 %1644, i64* %1633, align 8, !noalias !124
  br label %1645

1645:                                             ; preds = %1629, %1637
  %1646 = icmp eq i64 %377, 0
  br i1 %1646, label %1655, label %1647

1647:                                             ; preds = %1645
  %1648 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1649 = bitcast i8* %1648 to i32**
  %1650 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1651 = bitcast i8* %1650 to i32**
  %1652 = icmp eq i32 %84, 0
  %1653 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1654 = bitcast i8* %1631 to i32**
  br label %1656

1655:                                             ; preds = %1685, %1645
  br i1 %69, label %1690, label %1691

1656:                                             ; preds = %1647, %1685
  %1657 = phi i64 [ 0, %1647 ], [ %1688, %1685 ]
  %1658 = load i32*, i32** %1649, align 8
  %1659 = load i32*, i32** %1651, align 8
  %1660 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1653, align 8
  br i1 %1652, label %1661, label %1666

1661:                                             ; preds = %1656
  %1662 = load i32*, i32** %1654, align 8, !noalias !124
  %1663 = shl i64 %1657, 32
  %1664 = ashr exact i64 %1663, 32
  %1665 = getelementptr inbounds i32, i32* %1662, i64 %1664
  br label %1685

1666:                                             ; preds = %1656
  %1667 = load i64, i64* %372, align 8
  %1668 = and i64 %1667, 4294967294
  %1669 = icmp eq i64 %1668, 2
  %1670 = shl i64 %1657, 32
  %1671 = ashr exact i64 %1670, 32
  %1672 = getelementptr inbounds i32, i32* %1659, i64 %1671
  %1673 = select i1 %1669, i32* %1659, i32* %1672
  %1674 = load i32, i32* %1673, align 4
  %1675 = load i64, i64* %367, align 8
  %1676 = and i64 %1675, 4294967294
  %1677 = icmp eq i64 %1676, 2
  %1678 = getelementptr inbounds i32, i32* %1658, i64 %1671
  %1679 = select i1 %1677, i32* %1658, i32* %1678
  %1680 = load i32, i32* %1679, align 4
  %1681 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1660, %"class.skvm::Builder"* %1660, i32 %1680, %"class.skvm::Builder"* %1660, i32 %1674) #12
  %1682 = extractvalue { %"class.skvm::Builder"*, i32 } %1681, 1
  %1683 = load i32*, i32** %1654, align 8, !noalias !124
  %1684 = getelementptr inbounds i32, i32* %1683, i64 %1671
  br label %1685

1685:                                             ; preds = %1666, %1661
  %1686 = phi i32* [ %1684, %1666 ], [ %1665, %1661 ]
  %1687 = phi i32 [ %1682, %1666 ], [ -1, %1661 ]
  store i32 %1687, i32* %1686, align 4
  %1688 = add nuw nsw i64 %1657, 1
  %1689 = icmp ult i64 %1688, %377
  br i1 %1689, label %1656, label %1655

1690:                                             ; preds = %1655
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %5) #12
  br label %1725

1691:                                             ; preds = %1655
  %1692 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1693 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1694 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1695 = bitcast i8* %1694 to i64*
  %1696 = bitcast i8* %1692 to i8**
  store i8* %1693, i8** %1696, align 8, !alias.scope !124
  store i64 34359738368, i64* %1695, align 8, !alias.scope !124
  %1697 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %5, %0
  br i1 %1697, label %1725, label %1698

1698:                                             ; preds = %1691
  %1699 = bitcast i8* %1692 to %class.SkTArray*
  store i64 34359738368, i64* %1695, align 8, !alias.scope !124
  %1700 = load i64, i64* %1633, align 8, !noalias !124
  %1701 = lshr i64 %1700, 1
  %1702 = trunc i64 %1701 to i32
  %1703 = and i32 %1702, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1699, i32 %1703, i32 0) #12
  %1704 = load i64, i64* %1633, align 8, !noalias !124
  %1705 = and i64 %1704, 4294967294
  %1706 = load i64, i64* %1695, align 8, !alias.scope !124
  %1707 = and i64 %1706, -4294967295
  %1708 = or i64 %1707, %1705
  store i64 %1708, i64* %1695, align 8, !alias.scope !124
  %1709 = bitcast i8* %1631 to i32**
  %1710 = load i32*, i32** %1709, align 8, !noalias !124
  %1711 = icmp eq i64 %1705, 0
  br i1 %1711, label %1725, label %1712

1712:                                             ; preds = %1698
  %1713 = bitcast i8* %1692 to i32**
  br label %1714

1714:                                             ; preds = %1714, %1712
  %1715 = phi i64 [ 0, %1712 ], [ %1720, %1714 ]
  %1716 = load i32*, i32** %1713, align 8, !alias.scope !124
  %1717 = getelementptr inbounds i32, i32* %1716, i64 %1715
  %1718 = getelementptr inbounds i32, i32* %1710, i64 %1715
  %1719 = load i32, i32* %1718, align 4
  store i32 %1719, i32* %1717, align 4
  %1720 = add nuw nsw i64 %1715, 1
  %1721 = load i64, i64* %1695, align 8, !alias.scope !124
  %1722 = lshr i64 %1721, 1
  %1723 = and i64 %1722, 2147483647
  %1724 = icmp ult i64 %1720, %1723
  br i1 %1724, label %1714, label %1725

1725:                                             ; preds = %1714, %1691, %1698, %1690
  %1726 = load i64, i64* %1633, align 8, !noalias !124
  %1727 = and i64 %1726, 1
  %1728 = icmp eq i64 %1727, 0
  br i1 %1728, label %1731, label %1729

1729:                                             ; preds = %1725
  %1730 = load i8*, i8** %1634, align 8, !noalias !124
  call void @_Z7sk_freePv(i8* %1730) #12
  br label %1731

1731:                                             ; preds = %1725, %1729
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1630) #12, !noalias !124
  br label %1841

1732:                                             ; preds = %365
  %1733 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1733) #12, !noalias !127
  %1734 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 16
  %1735 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 24
  %1736 = bitcast i8* %1735 to i64*
  %1737 = bitcast i8* %1734 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1733, i8 -86, i64 16, i1 false)
  store i8* %1733, i8** %1737, align 8, !noalias !127
  store i64 34359738368, i64* %1736, align 8, !noalias !127
  %1738 = trunc i64 %377 to i32
  %1739 = icmp eq i32 %1738, 0
  br i1 %1739, label %1748, label %1740

1740:                                             ; preds = %1732
  %1741 = bitcast i8* %1734 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1741, i32 %1738, i32 1) #12
  %1742 = load i64, i64* %1736, align 8, !noalias !127
  %1743 = shl nuw nsw i64 %377, 1
  %1744 = add i64 %1742, %1743
  %1745 = and i64 %1744, 4294967294
  %1746 = and i64 %1742, -4294967295
  %1747 = or i64 %1745, %1746
  store i64 %1747, i64* %1736, align 8, !noalias !127
  br label %1748

1748:                                             ; preds = %1732, %1740
  %1749 = icmp eq i64 %377, 0
  br i1 %1749, label %1758, label %1750

1750:                                             ; preds = %1748
  %1751 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1752 = bitcast i8* %1751 to i32**
  %1753 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1754 = bitcast i8* %1753 to i32**
  %1755 = icmp eq i32 %84, 0
  %1756 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1757 = bitcast i8* %1734 to i32**
  br label %1759

1758:                                             ; preds = %1788, %1748
  br i1 %69, label %1793, label %1794

1759:                                             ; preds = %1750, %1788
  %1760 = phi i64 [ 0, %1750 ], [ %1791, %1788 ]
  %1761 = load i32*, i32** %1752, align 8
  %1762 = load i32*, i32** %1754, align 8
  %1763 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1756, align 8
  br i1 %1755, label %1764, label %1769

1764:                                             ; preds = %1759
  %1765 = load i32*, i32** %1757, align 8, !noalias !127
  %1766 = shl i64 %1760, 32
  %1767 = ashr exact i64 %1766, 32
  %1768 = getelementptr inbounds i32, i32* %1765, i64 %1767
  br label %1788

1769:                                             ; preds = %1759
  %1770 = load i64, i64* %372, align 8
  %1771 = and i64 %1770, 4294967294
  %1772 = icmp eq i64 %1771, 2
  %1773 = shl i64 %1760, 32
  %1774 = ashr exact i64 %1773, 32
  %1775 = getelementptr inbounds i32, i32* %1762, i64 %1774
  %1776 = select i1 %1772, i32* %1762, i32* %1775
  %1777 = load i32, i32* %1776, align 4
  %1778 = load i64, i64* %367, align 8
  %1779 = and i64 %1778, 4294967294
  %1780 = icmp eq i64 %1779, 2
  %1781 = getelementptr inbounds i32, i32* %1761, i64 %1774
  %1782 = select i1 %1780, i32* %1761, i32* %1781
  %1783 = load i32, i32* %1782, align 4
  %1784 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %1763, %"class.skvm::Builder"* %1763, i32 %1783, %"class.skvm::Builder"* %1763, i32 %1777) #12
  %1785 = extractvalue { %"class.skvm::Builder"*, i32 } %1784, 1
  %1786 = load i32*, i32** %1757, align 8, !noalias !127
  %1787 = getelementptr inbounds i32, i32* %1786, i64 %1774
  br label %1788

1788:                                             ; preds = %1769, %1764
  %1789 = phi i32* [ %1787, %1769 ], [ %1768, %1764 ]
  %1790 = phi i32 [ %1785, %1769 ], [ -1, %1764 ]
  store i32 %1790, i32* %1789, align 4
  %1791 = add nuw nsw i64 %1760, 1
  %1792 = icmp ult i64 %1791, %377
  br i1 %1792, label %1759, label %1758

1793:                                             ; preds = %1758
  call fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* sret %0, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %30, %"struct.SkSL::(anonymous namespace)::Value"* nonnull dereferenceable(32) %4) #12
  br label %1828

1794:                                             ; preds = %1758
  %1795 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1796 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1797 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1798 = bitcast i8* %1797 to i64*
  %1799 = bitcast i8* %1795 to i8**
  store i8* %1796, i8** %1799, align 8, !alias.scope !127
  store i64 34359738368, i64* %1798, align 8, !alias.scope !127
  %1800 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %4, %0
  br i1 %1800, label %1828, label %1801

1801:                                             ; preds = %1794
  %1802 = bitcast i8* %1795 to %class.SkTArray*
  store i64 34359738368, i64* %1798, align 8, !alias.scope !127
  %1803 = load i64, i64* %1736, align 8, !noalias !127
  %1804 = lshr i64 %1803, 1
  %1805 = trunc i64 %1804 to i32
  %1806 = and i32 %1805, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1802, i32 %1806, i32 0) #12
  %1807 = load i64, i64* %1736, align 8, !noalias !127
  %1808 = and i64 %1807, 4294967294
  %1809 = load i64, i64* %1798, align 8, !alias.scope !127
  %1810 = and i64 %1809, -4294967295
  %1811 = or i64 %1810, %1808
  store i64 %1811, i64* %1798, align 8, !alias.scope !127
  %1812 = bitcast i8* %1734 to i32**
  %1813 = load i32*, i32** %1812, align 8, !noalias !127
  %1814 = icmp eq i64 %1808, 0
  br i1 %1814, label %1828, label %1815

1815:                                             ; preds = %1801
  %1816 = bitcast i8* %1795 to i32**
  br label %1817

1817:                                             ; preds = %1817, %1815
  %1818 = phi i64 [ 0, %1815 ], [ %1823, %1817 ]
  %1819 = load i32*, i32** %1816, align 8, !alias.scope !127
  %1820 = getelementptr inbounds i32, i32* %1819, i64 %1818
  %1821 = getelementptr inbounds i32, i32* %1813, i64 %1818
  %1822 = load i32, i32* %1821, align 4
  store i32 %1822, i32* %1820, align 4
  %1823 = add nuw nsw i64 %1818, 1
  %1824 = load i64, i64* %1798, align 8, !alias.scope !127
  %1825 = lshr i64 %1824, 1
  %1826 = and i64 %1825, 2147483647
  %1827 = icmp ult i64 %1823, %1826
  br i1 %1827, label %1817, label %1828

1828:                                             ; preds = %1817, %1794, %1801, %1793
  %1829 = load i64, i64* %1736, align 8, !noalias !127
  %1830 = and i64 %1829, 1
  %1831 = icmp eq i64 %1830, 0
  br i1 %1831, label %1834, label %1832

1832:                                             ; preds = %1828
  %1833 = load i8*, i8** %1737, align 8, !noalias !127
  call void @_Z7sk_freePv(i8* %1833) #12
  br label %1834

1834:                                             ; preds = %1828, %1832
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1733) #12, !noalias !127
  br label %1841

1835:                                             ; preds = %365
  %1836 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %1836, i8 0, i64 16, i1 false)
  %1837 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1838 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1839 = bitcast i8* %1838 to i64*
  %1840 = bitcast i8* %1837 to i8**
  store i8* %1836, i8** %1840, align 8
  store i64 34359738368, i64* %1839, align 8
  br label %1841

1841:                                             ; preds = %534, %706, %820, %919, %1018, %1117, %1216, %1315, %1417, %1525, %1628, %1731, %1834, %1835, %364
  %1842 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 24
  %1843 = bitcast i8* %1842 to i64*
  %1844 = load i64, i64* %1843, align 8
  %1845 = and i64 %1844, 1
  %1846 = icmp eq i64 %1845, 0
  br i1 %1846, label %1851, label %1847

1847:                                             ; preds = %1841
  %1848 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %25, i64 0, i32 0, i32 0, i32 0, i64 16
  %1849 = bitcast i8* %1848 to i8**
  %1850 = load i8*, i8** %1849, align 8
  call void @_Z7sk_freePv(i8* %1850) #12
  br label %1851

1851:                                             ; preds = %1841, %1847
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %199) #12
  %1852 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 24
  %1853 = bitcast i8* %1852 to i64*
  %1854 = load i64, i64* %1853, align 8
  %1855 = and i64 %1854, 1
  %1856 = icmp eq i64 %1855, 0
  br i1 %1856, label %1861, label %1857

1857:                                             ; preds = %1851
  %1858 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %1859 = bitcast i8* %1858 to i8**
  %1860 = load i8*, i8** %1859, align 8
  call void @_Z7sk_freePv(i8* %1860) #12
  br label %1861

1861:                                             ; preds = %1851, %1857
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %198) #12
  br label %1862

1862:                                             ; preds = %124, %177, %196, %1861, %49
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #12
  ret void
}

declare dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSL13SkVMGenerator10writeStoreERKNS_10ExpressionERKNS_12_GLOBAL__N_15ValueE(%"struct.SkSL::(anonymous namespace)::Value"* noalias sret, %"class.SkSL::SkVMGenerator"*, %"class.SkSL::Expression"* nocapture readonly dereferenceable(24), %"struct.SkSL::(anonymous namespace)::Value"* readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %5 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %6 = alloca %class.SkSTArray.350, align 8
  %7 = getelementptr inbounds %class.SkSTArray.350, %class.SkSTArray.350* %6, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %class.SkSTArray.350, %class.SkSTArray.350* %6, i64 0, i32 0, i32 0, i64 32
  %9 = getelementptr inbounds %class.SkSTArray.350, %class.SkSTArray.350* %6, i64 0, i32 0, i32 0, i64 40
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %8 to i8**
  store i8* %7, i8** %11, align 8
  store i64 34359738368, i64* %10, align 8
  %12 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, 1
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 2147483647
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %4
  %20 = bitcast i8* %8 to %class.SkTArray.352*
  call void @_ZN8SkTArrayImLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.352* %20, i32 %17, i32 1) #12
  %21 = load i64, i64* %10, align 8
  %22 = lshr i64 %21, 1
  %23 = trunc i64 %22 to i32
  %24 = add i32 %16, %23
  %25 = shl i32 %24, 1
  %26 = zext i32 %25 to i64
  %27 = and i64 %21, -4294967295
  %28 = or i64 %27, %26
  store i64 %28, i64* %10, align 8
  %29 = icmp eq i32 %25, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %4, %19
  %31 = bitcast i8* %8 to i64**
  br label %34

32:                                               ; preds = %19
  %33 = bitcast i8* %8 to i64**
  br label %36

34:                                               ; preds = %36, %30
  %35 = phi i64** [ %31, %30 ], [ %33, %36 ]
  br label %47

36:                                               ; preds = %32, %36
  %37 = phi i64 [ 0, %32 ], [ %42, %36 ]
  %38 = load i64*, i64** %33, align 8
  %39 = shl i64 %37, 32
  %40 = ashr exact i64 %39, 32
  %41 = getelementptr inbounds i64, i64* %38, i64 %40
  store i64 %37, i64* %41, align 8
  %42 = add nuw nsw i64 %37, 1
  %43 = load i64, i64* %10, align 8
  %44 = lshr i64 %43, 1
  %45 = and i64 %44, 2147483647
  %46 = icmp ult i64 %42, %45
  br i1 %46, label %36, label %34

47:                                               ; preds = %34, %326
  %48 = phi %"class.SkSL::Expression"* [ %328, %326 ], [ %2, %34 ]
  %49 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  switch i32 %50, label %320 [
    i32 55, label %329
    i32 44, label %51
    i32 48, label %162
    i32 52, label %247
  ]

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1
  %53 = bitcast %"class.SkSL::Expression"* %52 to i32*
  %54 = load i32, i32* %53, align 8
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %78

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1, i32 0, i32 1
  %58 = bitcast i32* %57 to %"class.SkSL::Expression"**
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i64 [ 0, %56 ], [ %74, %59 ]
  %61 = phi i64 [ 0, %56 ], [ %73, %59 ]
  %62 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %58, align 8
  %63 = bitcast %"class.SkSL::Expression"* %62 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %64 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %63, align 8
  %65 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %64, i64 3
  %66 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %65, align 8
  %67 = call dereferenceable(184) %"class.SkSL::Type"* %66(%"class.SkSL::Expression"* %62) #12
  %68 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %67, i64 0, i32 10, i32 0, i32 0
  %69 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %68, align 8
  %70 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %69, i64 %60, i32 2
  %71 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %70, align 8
  %72 = call i64 @_ZNK4SkSL4Type9slotCountEv(%"class.SkSL::Type"* %71) #12
  %73 = add i64 %72, %61
  %74 = add nuw nsw i64 %60, 1
  %75 = load i32, i32* %53, align 8
  %76 = sext i32 %75 to i64
  %77 = icmp slt i64 %74, %76
  br i1 %77, label %59, label %78

78:                                               ; preds = %59, %51
  %79 = phi i64 [ 0, %51 ], [ %73, %59 ]
  %80 = load i64*, i64** %35, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %153, label %82

82:                                               ; preds = %78
  %83 = load i64, i64* %10, align 8
  %84 = lshr i64 %83, 1
  %85 = and i64 %84, 2147483647
  %86 = getelementptr inbounds i64, i64* %80, i64 %85
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %153, label %88

88:                                               ; preds = %82
  %89 = shl nuw nsw i64 %85, 3
  %90 = add nsw i64 %89, -8
  %91 = lshr exact i64 %90, 3
  %92 = add nuw nsw i64 %91, 1
  %93 = icmp ult i64 %92, 4
  br i1 %93, label %94, label %96

94:                                               ; preds = %151, %88
  %95 = phi i64* [ %80, %88 ], [ %98, %151 ]
  br label %156

96:                                               ; preds = %88
  %97 = and i64 %92, 4611686018427387900
  %98 = getelementptr i64, i64* %80, i64 %97
  %99 = insertelement <2 x i64> undef, i64 %79, i32 0
  %100 = shufflevector <2 x i64> %99, <2 x i64> undef, <2 x i32> zeroinitializer
  %101 = insertelement <2 x i64> undef, i64 %79, i32 0
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %103 = add nsw i64 %97, -4
  %104 = lshr exact i64 %103, 2
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %137, label %108

108:                                              ; preds = %96
  %109 = sub nuw nsw i64 %105, %106
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %134, %110 ]
  %112 = phi i64 [ %109, %108 ], [ %135, %110 ]
  %113 = getelementptr i64, i64* %80, i64 %111
  %114 = bitcast i64* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8
  %116 = getelementptr i64, i64* %113, i64 2
  %117 = bitcast i64* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8
  %119 = add <2 x i64> %115, %100
  %120 = add <2 x i64> %118, %102
  %121 = bitcast i64* %113 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %121, align 8
  %122 = bitcast i64* %116 to <2 x i64>*
  store <2 x i64> %120, <2 x i64>* %122, align 8
  %123 = or i64 %111, 4
  %124 = getelementptr i64, i64* %80, i64 %123
  %125 = bitcast i64* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8
  %127 = getelementptr i64, i64* %124, i64 2
  %128 = bitcast i64* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8
  %130 = add <2 x i64> %126, %100
  %131 = add <2 x i64> %129, %102
  %132 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %132, align 8
  %133 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 8
  %134 = add i64 %111, 8
  %135 = add i64 %112, -2
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %110, !llvm.loop !130

137:                                              ; preds = %110, %96
  %138 = phi i64 [ 0, %96 ], [ %134, %110 ]
  %139 = icmp eq i64 %106, 0
  br i1 %139, label %151, label %140

140:                                              ; preds = %137
  %141 = getelementptr i64, i64* %80, i64 %138
  %142 = bitcast i64* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8
  %144 = getelementptr i64, i64* %141, i64 2
  %145 = bitcast i64* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8
  %147 = add <2 x i64> %143, %100
  %148 = add <2 x i64> %146, %102
  %149 = bitcast i64* %141 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %149, align 8
  %150 = bitcast i64* %144 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %150, align 8
  br label %151

151:                                              ; preds = %137, %140
  %152 = icmp eq i64 %92, %97
  br i1 %152, label %153, label %94

153:                                              ; preds = %156, %151, %78, %82
  %154 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1, i32 0, i32 1
  %155 = bitcast i32* %154 to %"class.SkSL::Expression"**
  br label %326

156:                                              ; preds = %94, %156
  %157 = phi i64* [ %160, %156 ], [ %95, %94 ]
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, %79
  store i64 %159, i64* %157, align 8
  %160 = getelementptr inbounds i64, i64* %157, i64 1
  %161 = icmp eq i64* %160, %86
  br i1 %161, label %153, label %156, !llvm.loop !132

162:                                              ; preds = %47
  %163 = bitcast %"class.SkSL::Expression"* %48 to %"struct.SkSL::IndexExpression"*
  %164 = call i64 @_ZN4SkSL13SkVMGenerator15indexSlotOffsetERKNS_15IndexExpressionE(%"class.SkSL::SkVMGenerator"* %1, %"struct.SkSL::IndexExpression"* dereferenceable(40) %163)
  %165 = load i64*, i64** %35, align 8
  %166 = icmp eq i64* %165, null
  br i1 %166, label %238, label %167

167:                                              ; preds = %162
  %168 = load i64, i64* %10, align 8
  %169 = lshr i64 %168, 1
  %170 = and i64 %169, 2147483647
  %171 = getelementptr inbounds i64, i64* %165, i64 %170
  %172 = icmp eq i64 %170, 0
  br i1 %172, label %238, label %173

173:                                              ; preds = %167
  %174 = shl nuw nsw i64 %170, 3
  %175 = add nsw i64 %174, -8
  %176 = lshr exact i64 %175, 3
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 4
  br i1 %178, label %179, label %181

179:                                              ; preds = %236, %173
  %180 = phi i64* [ %165, %173 ], [ %183, %236 ]
  br label %241

181:                                              ; preds = %173
  %182 = and i64 %177, 4611686018427387900
  %183 = getelementptr i64, i64* %165, i64 %182
  %184 = insertelement <2 x i64> undef, i64 %164, i32 0
  %185 = shufflevector <2 x i64> %184, <2 x i64> undef, <2 x i32> zeroinitializer
  %186 = insertelement <2 x i64> undef, i64 %164, i32 0
  %187 = shufflevector <2 x i64> %186, <2 x i64> undef, <2 x i32> zeroinitializer
  %188 = add nsw i64 %182, -4
  %189 = lshr exact i64 %188, 2
  %190 = add nuw nsw i64 %189, 1
  %191 = and i64 %190, 1
  %192 = icmp eq i64 %188, 0
  br i1 %192, label %222, label %193

193:                                              ; preds = %181
  %194 = sub nuw nsw i64 %190, %191
  br label %195

195:                                              ; preds = %195, %193
  %196 = phi i64 [ 0, %193 ], [ %219, %195 ]
  %197 = phi i64 [ %194, %193 ], [ %220, %195 ]
  %198 = getelementptr i64, i64* %165, i64 %196
  %199 = bitcast i64* %198 to <2 x i64>*
  %200 = load <2 x i64>, <2 x i64>* %199, align 8
  %201 = getelementptr i64, i64* %198, i64 2
  %202 = bitcast i64* %201 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 8
  %204 = add <2 x i64> %200, %185
  %205 = add <2 x i64> %203, %187
  %206 = bitcast i64* %198 to <2 x i64>*
  store <2 x i64> %204, <2 x i64>* %206, align 8
  %207 = bitcast i64* %201 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %207, align 8
  %208 = or i64 %196, 4
  %209 = getelementptr i64, i64* %165, i64 %208
  %210 = bitcast i64* %209 to <2 x i64>*
  %211 = load <2 x i64>, <2 x i64>* %210, align 8
  %212 = getelementptr i64, i64* %209, i64 2
  %213 = bitcast i64* %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 8
  %215 = add <2 x i64> %211, %185
  %216 = add <2 x i64> %214, %187
  %217 = bitcast i64* %209 to <2 x i64>*
  store <2 x i64> %215, <2 x i64>* %217, align 8
  %218 = bitcast i64* %212 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %218, align 8
  %219 = add i64 %196, 8
  %220 = add i64 %197, -2
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %195, !llvm.loop !134

222:                                              ; preds = %195, %181
  %223 = phi i64 [ 0, %181 ], [ %219, %195 ]
  %224 = icmp eq i64 %191, 0
  br i1 %224, label %236, label %225

225:                                              ; preds = %222
  %226 = getelementptr i64, i64* %165, i64 %223
  %227 = bitcast i64* %226 to <2 x i64>*
  %228 = load <2 x i64>, <2 x i64>* %227, align 8
  %229 = getelementptr i64, i64* %226, i64 2
  %230 = bitcast i64* %229 to <2 x i64>*
  %231 = load <2 x i64>, <2 x i64>* %230, align 8
  %232 = add <2 x i64> %228, %185
  %233 = add <2 x i64> %231, %187
  %234 = bitcast i64* %226 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %234, align 8
  %235 = bitcast i64* %229 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %235, align 8
  br label %236

236:                                              ; preds = %222, %225
  %237 = icmp eq i64 %177, %182
  br i1 %237, label %238, label %179

238:                                              ; preds = %241, %236, %162, %167
  %239 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1
  %240 = bitcast %"class.SkSL::Expression"* %239 to %"class.SkSL::Expression"**
  br label %326

241:                                              ; preds = %179, %241
  %242 = phi i64* [ %245, %241 ], [ %180, %179 ]
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, %164
  store i64 %244, i64* %242, align 8
  %245 = getelementptr inbounds i64, i64* %242, i64 1
  %246 = icmp eq i64* %245, %171
  br i1 %246, label %238, label %241, !llvm.loop !135

247:                                              ; preds = %47
  %248 = load i64*, i64** %35, align 8
  %249 = icmp eq i64* %248, null
  br i1 %249, label %282, label %250

250:                                              ; preds = %247
  %251 = load i64, i64* %10, align 8
  %252 = lshr i64 %251, 1
  %253 = and i64 %252, 2147483647
  %254 = getelementptr inbounds i64, i64* %248, i64 %253
  %255 = icmp eq i64 %253, 0
  br i1 %255, label %282, label %256

256:                                              ; preds = %250
  %257 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1, i32 0, i32 1
  %258 = getelementptr inbounds i32, i32* %257, i64 2
  %259 = bitcast i32* %258 to i8**
  %260 = shl nuw nsw i64 %253, 3
  %261 = add nsw i64 %260, -8
  %262 = lshr exact i64 %261, 3
  %263 = add nuw nsw i64 %262, 1
  %264 = and i64 %263, 3
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %279, label %266

266:                                              ; preds = %256, %266
  %267 = phi i64* [ %276, %266 ], [ %248, %256 ]
  %268 = phi i64 [ %277, %266 ], [ %264, %256 ]
  %269 = load i64, i64* %267, align 8
  %270 = load i8*, i8** %259, align 8
  %271 = shl i64 %269, 32
  %272 = ashr exact i64 %271, 32
  %273 = getelementptr inbounds i8, i8* %270, i64 %272
  %274 = load i8, i8* %273, align 1
  %275 = sext i8 %274 to i64
  store i64 %275, i64* %267, align 8
  %276 = getelementptr inbounds i64, i64* %267, i64 1
  %277 = add i64 %268, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %266, !llvm.loop !136

279:                                              ; preds = %266, %256
  %280 = phi i64* [ %248, %256 ], [ %276, %266 ]
  %281 = icmp ult i64 %261, 24
  br i1 %281, label %282, label %285

282:                                              ; preds = %279, %285, %247, %250
  %283 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1
  %284 = bitcast %"class.SkSL::Expression"* %283 to %"class.SkSL::Expression"**
  br label %326

285:                                              ; preds = %279, %285
  %286 = phi i64* [ %318, %285 ], [ %280, %279 ]
  %287 = load i64, i64* %286, align 8
  %288 = load i8*, i8** %259, align 8
  %289 = shl i64 %287, 32
  %290 = ashr exact i64 %289, 32
  %291 = getelementptr inbounds i8, i8* %288, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = sext i8 %292 to i64
  store i64 %293, i64* %286, align 8
  %294 = getelementptr inbounds i64, i64* %286, i64 1
  %295 = load i64, i64* %294, align 8
  %296 = load i8*, i8** %259, align 8
  %297 = shl i64 %295, 32
  %298 = ashr exact i64 %297, 32
  %299 = getelementptr inbounds i8, i8* %296, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = sext i8 %300 to i64
  store i64 %301, i64* %294, align 8
  %302 = getelementptr inbounds i64, i64* %286, i64 2
  %303 = load i64, i64* %302, align 8
  %304 = load i8*, i8** %259, align 8
  %305 = shl i64 %303, 32
  %306 = ashr exact i64 %305, 32
  %307 = getelementptr inbounds i8, i8* %304, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = sext i8 %308 to i64
  store i64 %309, i64* %302, align 8
  %310 = getelementptr inbounds i64, i64* %286, i64 3
  %311 = load i64, i64* %310, align 8
  %312 = load i8*, i8** %259, align 8
  %313 = shl i64 %311, 32
  %314 = ashr exact i64 %313, 32
  %315 = getelementptr inbounds i8, i8* %312, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = sext i8 %316 to i64
  store i64 %317, i64* %310, align 8
  %318 = getelementptr inbounds i64, i64* %286, i64 4
  %319 = icmp eq i64* %318, %254
  br i1 %319, label %282, label %285

320:                                              ; preds = %47
  %321 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %321, i8 0, i64 16, i1 false)
  %322 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %323 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %324 = bitcast i8* %323 to i64*
  %325 = bitcast i8* %322 to i8**
  store i8* %321, i8** %325, align 8
  store i64 34359738368, i64* %324, align 8
  br label %434

326:                                              ; preds = %282, %238, %153
  %327 = phi %"class.SkSL::Expression"** [ %284, %282 ], [ %240, %238 ], [ %155, %153 ]
  %328 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %327, align 8
  br label %47

329:                                              ; preds = %47
  %330 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 1
  %331 = bitcast %"class.SkSL::Expression"* %330 to %"class.SkSL::Variable"**
  %332 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %331, align 8
  %333 = call i64 @_ZN4SkSL13SkVMGenerator7getSlotERKNS_8VariableE(%"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Variable"* dereferenceable(64) %332)
  %334 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 0
  %335 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %334, align 8
  %336 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 7, i32 1
  %337 = load i32, i32* %336, align 8
  %338 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 8, i32 0
  %339 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %338, align 8
  %340 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 8, i32 1
  %341 = load i32, i32* %340, align 8
  %342 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %335, %"class.skvm::Builder"* %335, i32 %337, %"class.skvm::Builder"* %339, i32 %341) #12
  %343 = extractvalue { %"class.skvm::Builder"*, i32 } %342, 0
  %344 = extractvalue { %"class.skvm::Builder"*, i32 } %342, 1
  %345 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 10, i32 0, i32 1
  %346 = load %"struct.SkSL::SkVMGenerator::Function"*, %"struct.SkSL::SkVMGenerator::Function"** %345, align 8
  %347 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %346, i64 -1, i32 1, i32 0
  %348 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %347, align 8
  %349 = getelementptr inbounds %"struct.SkSL::SkVMGenerator::Function", %"struct.SkSL::SkVMGenerator::Function"* %346, i64 -1, i32 1, i32 1
  %350 = load i32, i32* %349, align 8
  %351 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %348, i32 -1) #12
  %352 = extractvalue { %"class.skvm::Builder"*, i32 } %351, 0
  %353 = extractvalue { %"class.skvm::Builder"*, i32 } %351, 1
  %354 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %348, %"class.skvm::Builder"* %352, i32 %353, %"class.skvm::Builder"* %348, i32 %350) #12
  %355 = extractvalue { %"class.skvm::Builder"*, i32 } %354, 0
  %356 = extractvalue { %"class.skvm::Builder"*, i32 } %354, 1
  %357 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %343, %"class.skvm::Builder"* %343, i32 %344, %"class.skvm::Builder"* %355, i32 %356) #12
  %358 = extractvalue { %"class.skvm::Builder"*, i32 } %357, 0
  %359 = extractvalue { %"class.skvm::Builder"*, i32 } %357, 1
  %360 = load i64, i64* %13, align 8
  %361 = lshr i64 %360, 1
  %362 = and i64 %361, 2147483647
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %373, label %364

364:                                              ; preds = %329
  %365 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 6, i32 0, i32 0
  %366 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %367 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %368 = bitcast i8* %367 to i32**
  %369 = bitcast { %"class.skvm::Builder"*, i32 }* %5 to i8*
  %370 = bitcast { %"class.skvm::Builder"*, i32 }* %5 to %"struct.skvm::I32"*
  %371 = bitcast { %"class.skvm::Builder"*, i32 }* %5 to i64*
  %372 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %5, i64 0, i32 1
  br label %408

373:                                              ; preds = %408, %329
  %374 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %375 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %376 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %377 = bitcast i8* %376 to i64*
  %378 = bitcast i8* %374 to i8**
  store i8* %375, i8** %378, align 8
  store i64 34359738368, i64* %377, align 8
  %379 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %0, %3
  br i1 %379, label %434, label %380

380:                                              ; preds = %373
  %381 = bitcast i8* %374 to %class.SkTArray*
  %382 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  store i64 34359738368, i64* %377, align 8
  %383 = load i64, i64* %13, align 8
  %384 = lshr i64 %383, 1
  %385 = trunc i64 %384 to i32
  %386 = and i32 %385, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %381, i32 %386, i32 0) #12
  %387 = load i64, i64* %13, align 8
  %388 = and i64 %387, 4294967294
  %389 = load i64, i64* %377, align 8
  %390 = and i64 %389, -4294967295
  %391 = or i64 %390, %388
  store i64 %391, i64* %377, align 8
  %392 = bitcast i8* %382 to i32**
  %393 = load i32*, i32** %392, align 8
  %394 = icmp eq i64 %388, 0
  br i1 %394, label %434, label %395

395:                                              ; preds = %380
  %396 = bitcast i8* %374 to i32**
  br label %397

397:                                              ; preds = %397, %395
  %398 = phi i64 [ 0, %395 ], [ %403, %397 ]
  %399 = load i32*, i32** %396, align 8
  %400 = getelementptr inbounds i32, i32* %399, i64 %398
  %401 = getelementptr inbounds i32, i32* %393, i64 %398
  %402 = load i32, i32* %401, align 4
  store i32 %402, i32* %400, align 4
  %403 = add nuw nsw i64 %398, 1
  %404 = load i64, i64* %377, align 8
  %405 = lshr i64 %404, 1
  %406 = and i64 %405, 2147483647
  %407 = icmp ult i64 %403, %406
  br i1 %407, label %397, label %434

408:                                              ; preds = %364, %408
  %409 = phi i64 [ %362, %364 ], [ %410, %408 ]
  %410 = add nsw i64 %409, -1
  %411 = load i64*, i64** %35, align 8
  %412 = shl i64 %410, 32
  %413 = ashr exact i64 %412, 32
  %414 = getelementptr inbounds i64, i64* %411, i64 %413
  %415 = load i64, i64* %414, align 8
  %416 = add i64 %415, %333
  %417 = load i32*, i32** %365, align 8
  %418 = getelementptr inbounds i32, i32* %417, i64 %416
  %419 = load i32, i32* %418, align 4
  %420 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %366, align 8
  %421 = load i32*, i32** %368, align 8
  %422 = getelementptr inbounds i32, i32* %421, i64 %413
  %423 = load i32, i32* %422, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %369) #12
  %424 = ptrtoint %"class.skvm::Builder"* %420 to i64
  store i64 %424, i64* %371, align 8
  store i32 %419, i32* %372, align 8
  %425 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %358, %"class.skvm::Builder"* %358, i32 %359, %"class.skvm::Builder"* %420, i32 %423, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %370) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %369) #12
  %426 = extractvalue { %"class.skvm::Builder"*, i32 } %425, 1
  %427 = load i64*, i64** %35, align 8
  %428 = getelementptr inbounds i64, i64* %427, i64 %413
  %429 = load i64, i64* %428, align 8
  %430 = add i64 %429, %333
  %431 = load i32*, i32** %365, align 8
  %432 = getelementptr inbounds i32, i32* %431, i64 %430
  store i32 %426, i32* %432, align 4
  %433 = icmp eq i64 %410, 0
  br i1 %433, label %373, label %408

434:                                              ; preds = %397, %380, %373, %320
  %435 = load i64, i64* %10, align 8
  %436 = and i64 %435, 1
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = load i8*, i8** %11, align 8
  call void @_Z7sk_freePv(i8* %439) #12
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #12
  ret void
}

declare zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"*) local_unnamed_addr #2

declare i32 @_ZNK4SkSL8Operator16removeAssignmentEv(%"class.SkSL::Operator"*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayImLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.352*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.352, %class.SkTArray.352* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #12
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.352* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #12
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.352* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #12
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #12
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 1
  %47 = and i64 %46, 8589934588
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #12
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #12
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6to_F32ENS_3I32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32, %"struct.skvm::I32"* byval(%"struct.skvm::I32") align 8) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallE(%"struct.SkSL::(anonymous namespace)::Value"* noalias sret, %"class.SkSL::SkVMGenerator"*, %"class.SkSL::FunctionCall"* nocapture readonly dereferenceable(64)) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %5 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %6 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %7 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %8 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %9 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %10 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %11 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %12 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %13 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %14 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %15 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %16 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %17 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %18 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %19 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %20 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %21 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %22 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %23 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %24 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %25 = alloca %"struct.skvm::F32", align 8
  %26 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %27 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %28 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %29 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %30 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %31 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %32 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %33 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %34 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %35 = alloca %"struct.skvm::Color", align 8
  %36 = alloca %"struct.skvm::Coord", align 8
  %37 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %38 = alloca %"struct.skvm::Color", align 8
  %39 = alloca [3 x %"struct.SkSL::(anonymous namespace)::Value"], align 16
  %40 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %41 = alloca %"struct.SkSL::(anonymous namespace)::Value", align 8
  %42 = getelementptr inbounds %"class.SkSL::FunctionCall", %"class.SkSL::FunctionCall"* %2, i64 0, i32 1
  %43 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %42, align 8
  %44 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %43, i64 0, i32 7
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.SkSL::FunctionCall", %"class.SkSL::FunctionCall"* %2, i64 0, i32 2, i32 0, i32 0, i64 16
  %47 = getelementptr inbounds %"class.SkSL::FunctionCall", %"class.SkSL::FunctionCall"* %2, i64 0, i32 2, i32 0, i32 0, i64 24
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = lshr i64 %49, 1
  %51 = and i64 %50, 2147483647
  %52 = icmp eq i32 %45, 73
  br i1 %52, label %53, label %297

53:                                               ; preds = %3
  %54 = bitcast i8* %46 to %"class.std::__1::unique_ptr.200"**
  %55 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %56, align 8
  %58 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %57, i64 1
  %59 = bitcast %"class.SkSL::Expression"* %58 to %"class.SkSL::Variable"**
  %60 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %59, align 8
  %61 = ptrtoint %"class.SkSL::Variable"* %60 to i64
  %62 = lshr i64 %61, 32
  %63 = shl i64 %61, 3
  %64 = and i64 %63, 4294967288
  %65 = add nuw nsw i64 %64, 8
  %66 = xor i64 %65, %62
  %67 = mul i64 %66, -7070675565921424023
  %68 = lshr i64 %67, 47
  %69 = xor i64 %67, %62
  %70 = xor i64 %69, %68
  %71 = mul i64 %70, -7070675565921424023
  %72 = lshr i64 %71, 47
  %73 = xor i64 %72, %71
  %74 = mul i64 %73, -7070675565921424023
  %75 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %126, label %78

78:                                               ; preds = %53
  %79 = tail call i64 @llvm.ctpop.i64(i64 %76) #12, !range !8
  %80 = icmp ugt i64 %79, 1
  br i1 %80, label %84, label %81

81:                                               ; preds = %78
  %82 = add i64 %76, -1
  %83 = and i64 %74, %82
  br label %88

84:                                               ; preds = %78
  %85 = icmp ult i64 %74, %76
  br i1 %85, label %88, label %86

86:                                               ; preds = %84
  %87 = urem i64 %74, %76
  br label %88

88:                                               ; preds = %86, %84, %81
  %89 = phi i64 [ %83, %81 ], [ %87, %86 ], [ %74, %84 ]
  %90 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %90, align 8
  %92 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %91, i64 %89
  %93 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %92, align 8
  %94 = icmp eq %"struct.std::__1::__hash_node_base.136"* %93, null
  br i1 %94, label %126, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %93, i64 0, i32 0
  %97 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %96, align 8
  %98 = icmp eq %"struct.std::__1::__hash_node_base.136"* %97, null
  br i1 %98, label %126, label %99

99:                                               ; preds = %95
  %100 = add i64 %76, -1
  br label %101

101:                                              ; preds = %122, %99
  %102 = phi %"struct.std::__1::__hash_node_base.136"* [ %97, %99 ], [ %124, %122 ]
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %102, i64 1
  %104 = bitcast %"struct.std::__1::__hash_node_base.136"* %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, %74
  br i1 %106, label %117, label %107

107:                                              ; preds = %101
  br i1 %80, label %110, label %108

108:                                              ; preds = %107
  %109 = and i64 %105, %100
  br label %114

110:                                              ; preds = %107
  %111 = icmp ult i64 %105, %76
  br i1 %111, label %114, label %112

112:                                              ; preds = %110
  %113 = urem i64 %105, %76
  br label %114

114:                                              ; preds = %112, %110, %108
  %115 = phi i64 [ %109, %108 ], [ %113, %112 ], [ %105, %110 ]
  %116 = icmp eq i64 %115, %89
  br i1 %116, label %122, label %126

117:                                              ; preds = %101
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %102, i64 2
  %119 = bitcast %"struct.std::__1::__hash_node_base.136"* %118 to %"class.SkSL::Variable"**
  %120 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %119, align 8
  %121 = icmp eq %"class.SkSL::Variable"* %120, %60
  br i1 %121, label %126, label %122

122:                                              ; preds = %117, %114
  %123 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %102, i64 0, i32 0
  %124 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %123, align 8
  %125 = icmp eq %"struct.std::__1::__hash_node_base.136"* %124, null
  br i1 %125, label %126, label %101

126:                                              ; preds = %114, %117, %122, %53, %88, %95
  %127 = phi %"struct.std::__1::__hash_node_base.136"* [ null, %88 ], [ null, %53 ], [ null, %95 ], [ %102, %117 ], [ null, %122 ], [ null, %114 ]
  %128 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 0, i32 0
  %129 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %128, align 8
  %130 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 0, i32 1
  %131 = load i32, i32* %130, align 8
  %132 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 0, i32 2
  %133 = bitcast [4 x i8]* %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 1, i32 0
  %136 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %135, align 8
  %137 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 1, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 1, i32 2
  %140 = bitcast [4 x i8]* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 2, i32 0
  %143 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %142, align 8
  %144 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 2, i32 1
  %145 = load i32, i32* %144, align 8
  %146 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 2, i32 2
  %147 = bitcast [4 x i8]* %146 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 3, i32 0
  %150 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %149, align 8
  %151 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 3, i32 1
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 3, i32 3, i32 2
  %154 = bitcast [4 x i8]* %153 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 0, i32 0
  %157 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %156, align 8
  %158 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 0, i32 1
  %159 = load i32, i32* %158, align 8
  %160 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 0, i32 2
  %161 = bitcast [4 x i8]* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 1, i32 0
  %164 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %163, align 8
  %165 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 1, i32 1
  %166 = load i32, i32* %165, align 8
  %167 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 2, i32 1, i32 2
  %168 = bitcast [4 x i8]* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %55, i64 1, i32 0, i32 0, i32 0
  %171 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %170, align 8
  %172 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %37, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %172) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %172, i8 -86, i64 32, i1 false)
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %37, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %171)
  %173 = bitcast %"class.SkSL::Expression"* %57 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %174 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %173, align 8
  %175 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %174, i64 3
  %176 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %175, align 8
  %177 = call dereferenceable(184) %"class.SkSL::Type"* %176(%"class.SkSL::Expression"* %57) #12
  %178 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %177, i64 0, i32 3
  %179 = load i32, i32* %178, align 8
  %180 = icmp eq i32 %179, 14
  br i1 %180, label %181, label %190

181:                                              ; preds = %126
  %182 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %37, i64 0, i32 0, i32 0, i32 0, i64 16
  %183 = bitcast i8* %182 to i32**
  %184 = load i32*, i32** %183, align 8
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %187 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %186, align 8
  %188 = getelementptr inbounds i32, i32* %184, i64 1
  %189 = load i32, i32* %188, align 4
  br label %206

190:                                              ; preds = %126
  %191 = and i32 %162, -16777216
  %192 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %37, i64 0, i32 0, i32 0, i32 0, i64 16
  %193 = bitcast i8* %192 to i32**
  %194 = load i32*, i32** %193, align 8
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %197 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %196, align 8
  %198 = getelementptr inbounds i32, i32* %194, i64 1
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds i32, i32* %194, i64 2
  %201 = load i32, i32* %200, align 4
  %202 = getelementptr inbounds i32, i32* %194, i64 3
  %203 = load i32, i32* %202, align 4
  %204 = and i32 %162, 16711680
  %205 = and i32 %162, 65280
  br label %206

206:                                              ; preds = %190, %181
  %207 = phi %"class.skvm::Builder"* [ %187, %181 ], [ %157, %190 ]
  %208 = phi i32 [ %185, %181 ], [ %159, %190 ]
  %209 = phi %"class.skvm::Builder"* [ %187, %181 ], [ %164, %190 ]
  %210 = phi i32 [ %189, %181 ], [ %166, %190 ]
  %211 = phi i32 [ 0, %181 ], [ %205, %190 ]
  %212 = phi i32 [ 0, %181 ], [ %204, %190 ]
  %213 = phi i32 [ 0, %181 ], [ %191, %190 ]
  %214 = phi i32 [ %152, %181 ], [ %203, %190 ]
  %215 = phi %"class.skvm::Builder"* [ %150, %181 ], [ %197, %190 ]
  %216 = phi i32 [ %145, %181 ], [ %201, %190 ]
  %217 = phi %"class.skvm::Builder"* [ %143, %181 ], [ %197, %190 ]
  %218 = phi i32 [ %138, %181 ], [ %199, %190 ]
  %219 = phi %"class.skvm::Builder"* [ %136, %181 ], [ %197, %190 ]
  %220 = phi i32 [ %131, %181 ], [ %195, %190 ]
  %221 = phi %"class.skvm::Builder"* [ %129, %181 ], [ %197, %190 ]
  %222 = bitcast %"struct.skvm::Color"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %222) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %222, i8 -86, i64 64, i1 false)
  %223 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %127, i64 3
  %224 = bitcast %"struct.std::__1::__hash_node_base.136"* %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = trunc i64 %225 to i32
  %227 = and i32 %162, 255
  %228 = or i32 %211, %227
  %229 = or i32 %228, %212
  %230 = or i32 %229, %213
  %231 = bitcast %"struct.skvm::Coord"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %231)
  %232 = bitcast %"struct.skvm::Color"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %232)
  %233 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %221, %"class.skvm::Builder"** %233, align 8
  %234 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 0, i32 1
  store i32 %220, i32* %234, align 8
  %235 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 0, i32 2
  %236 = bitcast [4 x i8]* %235 to i32*
  store i32 %134, i32* %236, align 4
  %237 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %219, %"class.skvm::Builder"** %237, align 8
  %238 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 1, i32 1
  store i32 %218, i32* %238, align 8
  %239 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 1, i32 2
  %240 = bitcast [4 x i8]* %239 to i32*
  store i32 %141, i32* %240, align 4
  %241 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %217, %"class.skvm::Builder"** %241, align 8
  %242 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 2, i32 1
  store i32 %216, i32* %242, align 8
  %243 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 2, i32 2
  %244 = bitcast [4 x i8]* %243 to i32*
  store i32 %148, i32* %244, align 4
  %245 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %215, %"class.skvm::Builder"** %245, align 8
  %246 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 3, i32 1
  store i32 %214, i32* %246, align 8
  %247 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %35, i64 0, i32 3, i32 2
  %248 = bitcast [4 x i8]* %247 to i32*
  store i32 %155, i32* %248, align 4
  %249 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %207, %"class.skvm::Builder"** %249, align 8
  %250 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 0, i32 1
  store i32 %208, i32* %250, align 8
  %251 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 0, i32 2
  %252 = bitcast [4 x i8]* %251 to i32*
  store i32 %230, i32* %252, align 4
  %253 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %209, %"class.skvm::Builder"** %253, align 8
  %254 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 1, i32 1
  store i32 %210, i32* %254, align 8
  %255 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %36, i64 0, i32 1, i32 2
  %256 = bitcast [4 x i8]* %255 to i32*
  store i32 %169, i32* %256, align 4
  %257 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 4, i32 0, i32 1, i32 0
  %258 = load void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)*, void (%"struct.skvm::Color"*, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"*, %"struct.skvm::Color"*)** %257, align 8, !noalias !137
  %259 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 4, i32 0, i32 0
  call void %258(%"struct.skvm::Color"* nonnull sret %38, %"union.std::__1::__function::__policy_storage"* %259, i32 %226, %"struct.skvm::Coord"* nonnull dereferenceable(32) %36, %"struct.skvm::Color"* nonnull dereferenceable(64) %35) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %231)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %232)
  %260 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %261 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %262 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %263 = bitcast i8* %262 to i64*
  %264 = bitcast i8* %261 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %260, i8 -86, i64 16, i1 false)
  store i8* %260, i8** %264, align 8
  store i64 34359738368, i64* %263, align 8
  %265 = bitcast i8* %261 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %265, i32 4, i32 1) #12
  %266 = load i64, i64* %263, align 8
  %267 = add i64 %266, 8
  %268 = and i64 %267, 4294967294
  %269 = and i64 %266, -4294967295
  %270 = or i64 %268, %269
  store i64 %270, i64* %263, align 8
  %271 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 0, i32 1
  %272 = load i32, i32* %271, align 8
  %273 = bitcast i8* %261 to i32**
  %274 = load i32*, i32** %273, align 8
  store i32 %272, i32* %274, align 4
  %275 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 1, i32 1
  %276 = load i32, i32* %275, align 8
  %277 = load i32*, i32** %273, align 8
  %278 = getelementptr inbounds i32, i32* %277, i64 1
  store i32 %276, i32* %278, align 4
  %279 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 2, i32 1
  %280 = load i32, i32* %279, align 8
  %281 = load i32*, i32** %273, align 8
  %282 = getelementptr inbounds i32, i32* %281, i64 2
  store i32 %280, i32* %282, align 4
  %283 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 3, i32 1
  %284 = load i32, i32* %283, align 8
  %285 = load i32*, i32** %273, align 8
  %286 = getelementptr inbounds i32, i32* %285, i64 3
  store i32 %284, i32* %286, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %222) #12
  %287 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %37, i64 0, i32 0, i32 0, i32 0, i64 24
  %288 = bitcast i8* %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = and i64 %289, 1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %296, label %292

292:                                              ; preds = %206
  %293 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %37, i64 0, i32 0, i32 0, i32 0, i64 16
  %294 = bitcast i8* %293 to i8**
  %295 = load i8*, i8** %294, align 8
  call void @_Z7sk_freePv(i8* %295) #12
  br label %296

296:                                              ; preds = %206, %292
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %172) #12
  br label %5501

297:                                              ; preds = %3
  %298 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %298) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %298, i8 -86, i64 80, i1 false)
  %299 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %300 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %301 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %302 = bitcast i8* %301 to i64*
  %303 = bitcast i8* %299 to i8**
  store i8* %300, i8** %303, align 16
  store i64 34359738368, i64* %302, align 8
  %304 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %305 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 0
  %306 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %307 = bitcast i8* %306 to i64*
  %308 = bitcast i8* %304 to i8**
  store i8* %305, i8** %308, align 16
  store i64 34359738368, i64* %307, align 8
  %309 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %310 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 0
  %311 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %312 = bitcast i8* %311 to i64*
  %313 = bitcast i8* %309 to i8**
  store i8* %310, i8** %313, align 16
  store i64 34359738368, i64* %312, align 8
  %314 = icmp eq i64 %51, 0
  br i1 %314, label %315, label %317

315:                                              ; preds = %297
  %316 = bitcast i8* %46 to %"class.std::__1::unique_ptr.200"**
  br label %324

317:                                              ; preds = %297
  %318 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %40, i64 0, i32 0, i32 0, i32 0, i64 0
  %319 = bitcast i8* %46 to %"class.std::__1::unique_ptr.200"**
  %320 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %40, i64 0, i32 0, i32 0, i32 0, i64 16
  %321 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %40, i64 0, i32 0, i32 0, i32 0, i64 24
  %322 = bitcast i8* %321 to i64*
  %323 = bitcast i8* %320 to i8**
  br label %346

324:                                              ; preds = %390, %315
  %325 = phi %"class.std::__1::unique_ptr.200"** [ %316, %315 ], [ %319, %390 ]
  %326 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %325, align 8
  %327 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %326, i64 0, i32 0, i32 0, i32 0
  %328 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %327, align 8
  %329 = bitcast %"class.SkSL::Expression"* %328 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %330 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %329, align 8
  %331 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %330, i64 3
  %332 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %331, align 8
  %333 = call dereferenceable(184) %"class.SkSL::Type"* %332(%"class.SkSL::Expression"* %328) #12
  br label %334

334:                                              ; preds = %338, %324
  %335 = phi %"class.SkSL::Type"* [ %333, %324 ], [ %342, %338 ]
  %336 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %335, i64 0, i32 3
  %337 = load i32, i32* %336, align 8
  switch i32 %337, label %343 [
    i32 4, label %338
    i32 11, label %338
  ]

338:                                              ; preds = %334, %334
  %339 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %335, i64 0, i32 6
  %340 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %339, align 8
  %341 = icmp eq %"class.SkSL::Type"* %340, null
  %342 = select i1 %341, %"class.SkSL::Type"* %335, %"class.SkSL::Type"* %340
  br label %334

343:                                              ; preds = %334
  %344 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %335, i64 0, i32 4
  %345 = load i32, i32* %344, align 4
  switch i32 %45, label %5479 [
    i32 68, label %393
    i32 15, label %444
    i32 77, label %495
    i32 13, label %543
    i32 83, label %597
    i32 6, label %645
    i32 2, label %693
    i32 8, label %747
    i32 67, label %896
    i32 25, label %995
    i32 48, label %1049
    i32 24, label %1103
    i32 47, label %1151
    i32 79, label %1199
    i32 39, label %1247
    i32 0, label %1301
    i32 75, label %1352
    i32 31, label %1434
    i32 10, label %1482
    i32 33, label %1530
    i32 56, label %1581
    i32 53, label %1689
    i32 52, label %1788
    i32 11, label %1887
    i32 74, label %2005
    i32 54, label %2062
    i32 80, label %2181
    i32 78, label %2294
    i32 44, label %2445
    i32 19, label %2492
    i32 20, label %2659
    i32 14, label %2711
    i32 57, label %2771
    i32 26, label %2861
    i32 69, label %2970
    i32 70, label %3117
    i32 50, label %3311
    i32 40, label %3410
    i32 46, label %4208
    i32 45, label %4396
    i32 37, label %4584
    i32 36, label %4772
    i32 23, label %4960
    i32 58, label %5148
    i32 4, label %5336
    i32 3, label %5382
    i32 59, label %5428
  ]

346:                                              ; preds = %390, %317
  %347 = phi i64 [ 0, %317 ], [ %391, %390 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %318) #12
  %348 = load %"class.std::__1::unique_ptr.200"*, %"class.std::__1::unique_ptr.200"** %319, align 8
  %349 = shl i64 %347, 32
  %350 = ashr exact i64 %349, 32
  %351 = getelementptr inbounds %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200"* %348, i64 %350, i32 0, i32 0, i32 0
  %352 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %351, align 8
  call fastcc void @_ZN4SkSL13SkVMGenerator15writeExpressionERKNS_10ExpressionE(%"struct.SkSL::(anonymous namespace)::Value"* nonnull sret %40, %"class.SkSL::SkVMGenerator"* %1, %"class.SkSL::Expression"* dereferenceable(24) %352)
  %353 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 %347
  %354 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 %347, i32 0, i32 0, i32 0, i64 16
  %355 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %353, %40
  br i1 %355, label %356, label %358

356:                                              ; preds = %346
  %357 = load i64, i64* %322, align 8
  br label %384

358:                                              ; preds = %346
  %359 = bitcast i8* %354 to %class.SkTArray*
  %360 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 %347, i32 0, i32 0, i32 0, i64 24
  %361 = bitcast i8* %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = and i64 %362, -4294967295
  store i64 %363, i64* %361, align 8
  %364 = load i64, i64* %322, align 8
  %365 = lshr i64 %364, 1
  %366 = trunc i64 %365 to i32
  %367 = and i32 %366, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %359, i32 %367, i32 0) #12
  %368 = load i64, i64* %322, align 8
  %369 = and i64 %368, 4294967294
  %370 = load i64, i64* %361, align 8
  %371 = and i64 %370, -4294967295
  %372 = or i64 %371, %369
  store i64 %372, i64* %361, align 8
  %373 = shl i64 %368, 1
  %374 = and i64 %373, 8589934588
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %381, label %376

376:                                              ; preds = %358
  %377 = bitcast i8* %354 to i8**
  %378 = load i8*, i8** %377, align 16
  %379 = load i8*, i8** %323, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %378, i8* align 1 %379, i64 %374, i1 false) #12
  %380 = load i64, i64* %322, align 8
  br label %381

381:                                              ; preds = %376, %358
  %382 = phi i64 [ %368, %358 ], [ %380, %376 ]
  %383 = and i64 %382, -4294967295
  store i64 %383, i64* %322, align 8
  br label %384

384:                                              ; preds = %356, %381
  %385 = phi i64 [ %357, %356 ], [ %383, %381 ]
  %386 = and i64 %385, 1
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %390, label %388

388:                                              ; preds = %384
  %389 = load i8*, i8** %323, align 8
  call void @_Z7sk_freePv(i8* %389) #12
  br label %390

390:                                              ; preds = %384, %388
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %318) #12
  %391 = add nuw nsw i64 %347, 1
  %392 = icmp eq i64 %391, %51
  br i1 %392, label %324, label %346

393:                                              ; preds = %343
  %394 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %395 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %396 = bitcast i8* %395 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %394, i8 -86, i64 16, i1 false) #12, !alias.scope !142
  %397 = load i64, i64* %396, align 8, !noalias !142
  %398 = lshr i64 %397, 1
  %399 = and i64 %398, 2147483647
  %400 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %401 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %402 = bitcast i8* %401 to i64*
  %403 = bitcast i8* %400 to i8**
  store i8* %394, i8** %403, align 8, !alias.scope !142
  store i64 34359738368, i64* %402, align 8, !alias.scope !142
  %404 = trunc i64 %399 to i32
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %415, label %406

406:                                              ; preds = %393
  %407 = bitcast i8* %400 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %407, i32 %404, i32 1) #12
  %408 = load i64, i64* %402, align 8, !alias.scope !142
  %409 = shl nuw nsw i64 %399, 1
  %410 = add i64 %408, %409
  %411 = and i64 %410, 4294967294
  %412 = and i64 %408, -4294967295
  %413 = or i64 %411, %412
  store i64 %413, i64* %402, align 8, !alias.scope !142
  %414 = load i64, i64* %396, align 8, !noalias !142
  br label %415

415:                                              ; preds = %406, %393
  %416 = phi i64 [ %397, %393 ], [ %414, %406 ]
  %417 = and i64 %416, 4294967294
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %5485, label %419

419:                                              ; preds = %415
  %420 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %421 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %422 = bitcast i8* %421 to i32**
  %423 = bitcast i8* %400 to i32**
  br label %424

424:                                              ; preds = %424, %419
  %425 = phi i64 [ 0, %419 ], [ %439, %424 ]
  %426 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %420, align 8, !noalias !142
  %427 = load i32*, i32** %422, align 16, !noalias !142
  %428 = shl i64 %425, 32
  %429 = ashr exact i64 %428, 32
  %430 = getelementptr inbounds i32, i32* %427, i64 %429
  %431 = load i32, i32* %430, align 4
  %432 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %426, i32 1016003125) #12
  %433 = extractvalue { %"class.skvm::Builder"*, i32 } %432, 0
  %434 = extractvalue { %"class.skvm::Builder"*, i32 } %432, 1
  %435 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %426, %"class.skvm::Builder"* %426, i32 %431, %"class.skvm::Builder"* %433, i32 %434) #12
  %436 = extractvalue { %"class.skvm::Builder"*, i32 } %435, 1
  %437 = load i32*, i32** %423, align 8, !alias.scope !142
  %438 = getelementptr inbounds i32, i32* %437, i64 %429
  store i32 %436, i32* %438, align 4
  %439 = add nuw nsw i64 %425, 1
  %440 = load i64, i64* %396, align 8, !noalias !142
  %441 = lshr i64 %440, 1
  %442 = and i64 %441, 2147483647
  %443 = icmp ult i64 %439, %442
  br i1 %443, label %424, label %5485

444:                                              ; preds = %343
  %445 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %446 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %447 = bitcast i8* %446 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %445, i8 -86, i64 16, i1 false) #12, !alias.scope !145
  %448 = load i64, i64* %447, align 8, !noalias !145
  %449 = lshr i64 %448, 1
  %450 = and i64 %449, 2147483647
  %451 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %452 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %453 = bitcast i8* %452 to i64*
  %454 = bitcast i8* %451 to i8**
  store i8* %445, i8** %454, align 8, !alias.scope !145
  store i64 34359738368, i64* %453, align 8, !alias.scope !145
  %455 = trunc i64 %450 to i32
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %466, label %457

457:                                              ; preds = %444
  %458 = bitcast i8* %451 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %458, i32 %455, i32 1) #12
  %459 = load i64, i64* %453, align 8, !alias.scope !145
  %460 = shl nuw nsw i64 %450, 1
  %461 = add i64 %459, %460
  %462 = and i64 %461, 4294967294
  %463 = and i64 %459, -4294967295
  %464 = or i64 %462, %463
  store i64 %464, i64* %453, align 8, !alias.scope !145
  %465 = load i64, i64* %447, align 8, !noalias !145
  br label %466

466:                                              ; preds = %457, %444
  %467 = phi i64 [ %448, %444 ], [ %465, %457 ]
  %468 = and i64 %467, 4294967294
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %5485, label %470

470:                                              ; preds = %466
  %471 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %472 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %473 = bitcast i8* %472 to i32**
  %474 = bitcast i8* %451 to i32**
  br label %475

475:                                              ; preds = %475, %470
  %476 = phi i64 [ 0, %470 ], [ %490, %475 ]
  %477 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %471, align 8, !noalias !145
  %478 = load i32*, i32** %473, align 16, !noalias !145
  %479 = shl i64 %476, 32
  %480 = ashr exact i64 %479, 32
  %481 = getelementptr inbounds i32, i32* %478, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %477, i32 1113927392) #12
  %484 = extractvalue { %"class.skvm::Builder"*, i32 } %483, 0
  %485 = extractvalue { %"class.skvm::Builder"*, i32 } %483, 1
  %486 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %477, %"class.skvm::Builder"* %477, i32 %482, %"class.skvm::Builder"* %484, i32 %485) #12
  %487 = extractvalue { %"class.skvm::Builder"*, i32 } %486, 1
  %488 = load i32*, i32** %474, align 8, !alias.scope !145
  %489 = getelementptr inbounds i32, i32* %488, i64 %480
  store i32 %487, i32* %489, align 4
  %490 = add nuw nsw i64 %476, 1
  %491 = load i64, i64* %447, align 8, !noalias !145
  %492 = lshr i64 %491, 1
  %493 = and i64 %492, 2147483647
  %494 = icmp ult i64 %490, %493
  br i1 %494, label %475, label %5485

495:                                              ; preds = %343
  %496 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %497 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %498 = bitcast i8* %497 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %496, i8 -86, i64 16, i1 false) #12, !alias.scope !148
  %499 = load i64, i64* %498, align 8, !noalias !148
  %500 = lshr i64 %499, 1
  %501 = and i64 %500, 2147483647
  %502 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %503 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %504 = bitcast i8* %503 to i64*
  %505 = bitcast i8* %502 to i8**
  store i8* %496, i8** %505, align 8, !alias.scope !148
  store i64 34359738368, i64* %504, align 8, !alias.scope !148
  %506 = trunc i64 %501 to i32
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %517, label %508

508:                                              ; preds = %495
  %509 = bitcast i8* %502 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %509, i32 %506, i32 1) #12
  %510 = load i64, i64* %504, align 8, !alias.scope !148
  %511 = shl nuw nsw i64 %501, 1
  %512 = add i64 %510, %511
  %513 = and i64 %512, 4294967294
  %514 = and i64 %510, -4294967295
  %515 = or i64 %513, %514
  store i64 %515, i64* %504, align 8, !alias.scope !148
  %516 = load i64, i64* %498, align 8, !noalias !148
  br label %517

517:                                              ; preds = %508, %495
  %518 = phi i64 [ %499, %495 ], [ %516, %508 ]
  %519 = and i64 %518, 4294967294
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %5485, label %521

521:                                              ; preds = %517
  %522 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %523 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %524 = bitcast i8* %523 to i32**
  %525 = bitcast i8* %502 to i32**
  br label %526

526:                                              ; preds = %526, %521
  %527 = phi i64 [ 0, %521 ], [ %538, %526 ]
  %528 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %522, align 8, !noalias !148
  %529 = load i32*, i32** %524, align 16, !noalias !148
  %530 = shl i64 %527, 32
  %531 = ashr exact i64 %530, 32
  %532 = getelementptr inbounds i32, i32* %529, i64 %531
  %533 = load i32, i32* %532, align 4
  %534 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder10approx_sinENS_3F32E(%"class.skvm::Builder"* %528, %"class.skvm::Builder"* %528, i32 %533) #12
  %535 = extractvalue { %"class.skvm::Builder"*, i32 } %534, 1
  %536 = load i32*, i32** %525, align 8, !alias.scope !148
  %537 = getelementptr inbounds i32, i32* %536, i64 %531
  store i32 %535, i32* %537, align 4
  %538 = add nuw nsw i64 %527, 1
  %539 = load i64, i64* %498, align 8, !noalias !148
  %540 = lshr i64 %539, 1
  %541 = and i64 %540, 2147483647
  %542 = icmp ult i64 %538, %541
  br i1 %542, label %526, label %5485

543:                                              ; preds = %343
  %544 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %545 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %546 = bitcast i8* %545 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %544, i8 -86, i64 16, i1 false) #12, !alias.scope !151
  %547 = load i64, i64* %546, align 8, !noalias !151
  %548 = lshr i64 %547, 1
  %549 = and i64 %548, 2147483647
  %550 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %551 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %552 = bitcast i8* %551 to i64*
  %553 = bitcast i8* %550 to i8**
  store i8* %544, i8** %553, align 8, !alias.scope !151
  store i64 34359738368, i64* %552, align 8, !alias.scope !151
  %554 = trunc i64 %549 to i32
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %565, label %556

556:                                              ; preds = %543
  %557 = bitcast i8* %550 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %557, i32 %554, i32 1) #12
  %558 = load i64, i64* %552, align 8, !alias.scope !151
  %559 = shl nuw nsw i64 %549, 1
  %560 = add i64 %558, %559
  %561 = and i64 %560, 4294967294
  %562 = and i64 %558, -4294967295
  %563 = or i64 %561, %562
  store i64 %563, i64* %552, align 8, !alias.scope !151
  %564 = load i64, i64* %546, align 8, !noalias !151
  br label %565

565:                                              ; preds = %556, %543
  %566 = phi i64 [ %547, %543 ], [ %564, %556 ]
  %567 = and i64 %566, 4294967294
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %5485, label %569

569:                                              ; preds = %565
  %570 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %571 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %572 = bitcast i8* %571 to i32**
  %573 = bitcast i8* %550 to i32**
  br label %574

574:                                              ; preds = %574, %569
  %575 = phi i64 [ 0, %569 ], [ %592, %574 ]
  %576 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %570, align 8, !noalias !151
  %577 = load i32*, i32** %572, align 16, !noalias !151
  %578 = shl i64 %575, 32
  %579 = ashr exact i64 %578, 32
  %580 = getelementptr inbounds i32, i32* %577, i64 %579
  %581 = load i32, i32* %580, align 4
  %582 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %576, i32 1070141403) #12
  %583 = extractvalue { %"class.skvm::Builder"*, i32 } %582, 0
  %584 = extractvalue { %"class.skvm::Builder"*, i32 } %582, 1
  %585 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %576, %"class.skvm::Builder"* %576, i32 %581, %"class.skvm::Builder"* %583, i32 %584) #12
  %586 = extractvalue { %"class.skvm::Builder"*, i32 } %585, 0
  %587 = extractvalue { %"class.skvm::Builder"*, i32 } %585, 1
  %588 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder10approx_sinENS_3F32E(%"class.skvm::Builder"* %576, %"class.skvm::Builder"* %586, i32 %587) #12
  %589 = extractvalue { %"class.skvm::Builder"*, i32 } %588, 1
  %590 = load i32*, i32** %573, align 8, !alias.scope !151
  %591 = getelementptr inbounds i32, i32* %590, i64 %579
  store i32 %589, i32* %591, align 4
  %592 = add nuw nsw i64 %575, 1
  %593 = load i64, i64* %546, align 8, !noalias !151
  %594 = lshr i64 %593, 1
  %595 = and i64 %594, 2147483647
  %596 = icmp ult i64 %592, %595
  br i1 %596, label %574, label %5485

597:                                              ; preds = %343
  %598 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %599 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %600 = bitcast i8* %599 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %598, i8 -86, i64 16, i1 false) #12, !alias.scope !154
  %601 = load i64, i64* %600, align 8, !noalias !154
  %602 = lshr i64 %601, 1
  %603 = and i64 %602, 2147483647
  %604 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %605 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %606 = bitcast i8* %605 to i64*
  %607 = bitcast i8* %604 to i8**
  store i8* %598, i8** %607, align 8, !alias.scope !154
  store i64 34359738368, i64* %606, align 8, !alias.scope !154
  %608 = trunc i64 %603 to i32
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %619, label %610

610:                                              ; preds = %597
  %611 = bitcast i8* %604 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %611, i32 %608, i32 1) #12
  %612 = load i64, i64* %606, align 8, !alias.scope !154
  %613 = shl nuw nsw i64 %603, 1
  %614 = add i64 %612, %613
  %615 = and i64 %614, 4294967294
  %616 = and i64 %612, -4294967295
  %617 = or i64 %615, %616
  store i64 %617, i64* %606, align 8, !alias.scope !154
  %618 = load i64, i64* %600, align 8, !noalias !154
  br label %619

619:                                              ; preds = %610, %597
  %620 = phi i64 [ %601, %597 ], [ %618, %610 ]
  %621 = and i64 %620, 4294967294
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %5485, label %623

623:                                              ; preds = %619
  %624 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %625 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %626 = bitcast i8* %625 to i32**
  %627 = bitcast i8* %604 to i32**
  br label %628

628:                                              ; preds = %628, %623
  %629 = phi i64 [ 0, %623 ], [ %640, %628 ]
  %630 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %624, align 8, !noalias !154
  %631 = load i32*, i32** %626, align 16, !noalias !154
  %632 = shl i64 %629, 32
  %633 = ashr exact i64 %632, 32
  %634 = getelementptr inbounds i32, i32* %631, i64 %633
  %635 = load i32, i32* %634, align 4
  %636 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder10approx_tanENS_3F32E(%"class.skvm::Builder"* %630, %"class.skvm::Builder"* %630, i32 %635) #12
  %637 = extractvalue { %"class.skvm::Builder"*, i32 } %636, 1
  %638 = load i32*, i32** %627, align 8, !alias.scope !154
  %639 = getelementptr inbounds i32, i32* %638, i64 %633
  store i32 %637, i32* %639, align 4
  %640 = add nuw nsw i64 %629, 1
  %641 = load i64, i64* %600, align 8, !noalias !154
  %642 = lshr i64 %641, 1
  %643 = and i64 %642, 2147483647
  %644 = icmp ult i64 %640, %643
  br i1 %644, label %628, label %5485

645:                                              ; preds = %343
  %646 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %647 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %648 = bitcast i8* %647 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %646, i8 -86, i64 16, i1 false) #12, !alias.scope !157
  %649 = load i64, i64* %648, align 8, !noalias !157
  %650 = lshr i64 %649, 1
  %651 = and i64 %650, 2147483647
  %652 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %653 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %654 = bitcast i8* %653 to i64*
  %655 = bitcast i8* %652 to i8**
  store i8* %646, i8** %655, align 8, !alias.scope !157
  store i64 34359738368, i64* %654, align 8, !alias.scope !157
  %656 = trunc i64 %651 to i32
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %667, label %658

658:                                              ; preds = %645
  %659 = bitcast i8* %652 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %659, i32 %656, i32 1) #12
  %660 = load i64, i64* %654, align 8, !alias.scope !157
  %661 = shl nuw nsw i64 %651, 1
  %662 = add i64 %660, %661
  %663 = and i64 %662, 4294967294
  %664 = and i64 %660, -4294967295
  %665 = or i64 %663, %664
  store i64 %665, i64* %654, align 8, !alias.scope !157
  %666 = load i64, i64* %648, align 8, !noalias !157
  br label %667

667:                                              ; preds = %658, %645
  %668 = phi i64 [ %649, %645 ], [ %666, %658 ]
  %669 = and i64 %668, 4294967294
  %670 = icmp eq i64 %669, 0
  br i1 %670, label %5485, label %671

671:                                              ; preds = %667
  %672 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %673 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %674 = bitcast i8* %673 to i32**
  %675 = bitcast i8* %652 to i32**
  br label %676

676:                                              ; preds = %676, %671
  %677 = phi i64 [ 0, %671 ], [ %688, %676 ]
  %678 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %672, align 8, !noalias !157
  %679 = load i32*, i32** %674, align 16, !noalias !157
  %680 = shl i64 %677, 32
  %681 = ashr exact i64 %680, 32
  %682 = getelementptr inbounds i32, i32* %679, i64 %681
  %683 = load i32, i32* %682, align 4
  %684 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_asinENS_3F32E(%"class.skvm::Builder"* %678, %"class.skvm::Builder"* %678, i32 %683) #12
  %685 = extractvalue { %"class.skvm::Builder"*, i32 } %684, 1
  %686 = load i32*, i32** %675, align 8, !alias.scope !157
  %687 = getelementptr inbounds i32, i32* %686, i64 %681
  store i32 %685, i32* %687, align 4
  %688 = add nuw nsw i64 %677, 1
  %689 = load i64, i64* %648, align 8, !noalias !157
  %690 = lshr i64 %689, 1
  %691 = and i64 %690, 2147483647
  %692 = icmp ult i64 %688, %691
  br i1 %692, label %676, label %5485

693:                                              ; preds = %343
  %694 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %695 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %696 = bitcast i8* %695 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %694, i8 -86, i64 16, i1 false) #12, !alias.scope !160
  %697 = load i64, i64* %696, align 8, !noalias !160
  %698 = lshr i64 %697, 1
  %699 = and i64 %698, 2147483647
  %700 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %701 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %702 = bitcast i8* %701 to i64*
  %703 = bitcast i8* %700 to i8**
  store i8* %694, i8** %703, align 8, !alias.scope !160
  store i64 34359738368, i64* %702, align 8, !alias.scope !160
  %704 = trunc i64 %699 to i32
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %715, label %706

706:                                              ; preds = %693
  %707 = bitcast i8* %700 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %707, i32 %704, i32 1) #12
  %708 = load i64, i64* %702, align 8, !alias.scope !160
  %709 = shl nuw nsw i64 %699, 1
  %710 = add i64 %708, %709
  %711 = and i64 %710, 4294967294
  %712 = and i64 %708, -4294967295
  %713 = or i64 %711, %712
  store i64 %713, i64* %702, align 8, !alias.scope !160
  %714 = load i64, i64* %696, align 8, !noalias !160
  br label %715

715:                                              ; preds = %706, %693
  %716 = phi i64 [ %697, %693 ], [ %714, %706 ]
  %717 = and i64 %716, 4294967294
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %5485, label %719

719:                                              ; preds = %715
  %720 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %721 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %722 = bitcast i8* %721 to i32**
  %723 = bitcast i8* %700 to i32**
  br label %724

724:                                              ; preds = %724, %719
  %725 = phi i64 [ 0, %719 ], [ %742, %724 ]
  %726 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %720, align 8, !noalias !160
  %727 = load i32*, i32** %722, align 16, !noalias !160
  %728 = shl i64 %725, 32
  %729 = ashr exact i64 %728, 32
  %730 = getelementptr inbounds i32, i32* %727, i64 %729
  %731 = load i32, i32* %730, align 4
  %732 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_asinENS_3F32E(%"class.skvm::Builder"* %726, %"class.skvm::Builder"* %726, i32 %731) #12
  %733 = extractvalue { %"class.skvm::Builder"*, i32 } %732, 0
  %734 = extractvalue { %"class.skvm::Builder"*, i32 } %732, 1
  %735 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %726, i32 1070141403) #12
  %736 = extractvalue { %"class.skvm::Builder"*, i32 } %735, 0
  %737 = extractvalue { %"class.skvm::Builder"*, i32 } %735, 1
  %738 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %726, %"class.skvm::Builder"* %736, i32 %737, %"class.skvm::Builder"* %733, i32 %734) #12
  %739 = extractvalue { %"class.skvm::Builder"*, i32 } %738, 1
  %740 = load i32*, i32** %723, align 8, !alias.scope !160
  %741 = getelementptr inbounds i32, i32* %740, i64 %729
  store i32 %739, i32* %741, align 4
  %742 = add nuw nsw i64 %725, 1
  %743 = load i64, i64* %696, align 8, !noalias !160
  %744 = lshr i64 %743, 1
  %745 = and i64 %744, 2147483647
  %746 = icmp ult i64 %742, %745
  br i1 %746, label %724, label %5485

747:                                              ; preds = %343
  %748 = icmp eq i64 %51, 1
  br i1 %748, label %749, label %797

749:                                              ; preds = %747
  %750 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %751 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %752 = bitcast i8* %751 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %750, i8 -86, i64 16, i1 false) #12, !alias.scope !163
  %753 = load i64, i64* %752, align 8, !noalias !163
  %754 = lshr i64 %753, 1
  %755 = and i64 %754, 2147483647
  %756 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %757 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %758 = bitcast i8* %757 to i64*
  %759 = bitcast i8* %756 to i8**
  store i8* %750, i8** %759, align 8, !alias.scope !163
  store i64 34359738368, i64* %758, align 8, !alias.scope !163
  %760 = trunc i64 %755 to i32
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %771, label %762

762:                                              ; preds = %749
  %763 = bitcast i8* %756 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %763, i32 %760, i32 1) #12
  %764 = load i64, i64* %758, align 8, !alias.scope !163
  %765 = shl nuw nsw i64 %755, 1
  %766 = add i64 %764, %765
  %767 = and i64 %766, 4294967294
  %768 = and i64 %764, -4294967295
  %769 = or i64 %767, %768
  store i64 %769, i64* %758, align 8, !alias.scope !163
  %770 = load i64, i64* %752, align 8, !noalias !163
  br label %771

771:                                              ; preds = %762, %749
  %772 = phi i64 [ %753, %749 ], [ %770, %762 ]
  %773 = and i64 %772, 4294967294
  %774 = icmp eq i64 %773, 0
  br i1 %774, label %5485, label %775

775:                                              ; preds = %771
  %776 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %777 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %778 = bitcast i8* %777 to i32**
  %779 = bitcast i8* %756 to i32**
  br label %780

780:                                              ; preds = %780, %775
  %781 = phi i64 [ 0, %775 ], [ %792, %780 ]
  %782 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %776, align 8, !noalias !163
  %783 = load i32*, i32** %778, align 16, !noalias !163
  %784 = shl i64 %781, 32
  %785 = ashr exact i64 %784, 32
  %786 = getelementptr inbounds i32, i32* %783, i64 %785
  %787 = load i32, i32* %786, align 4
  %788 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_atanENS_3F32E(%"class.skvm::Builder"* %782, %"class.skvm::Builder"* %782, i32 %787) #12
  %789 = extractvalue { %"class.skvm::Builder"*, i32 } %788, 1
  %790 = load i32*, i32** %779, align 8, !alias.scope !163
  %791 = getelementptr inbounds i32, i32* %790, i64 %785
  store i32 %789, i32* %791, align 4
  %792 = add nuw nsw i64 %781, 1
  %793 = load i64, i64* %752, align 8, !noalias !163
  %794 = lshr i64 %793, 1
  %795 = and i64 %794, 2147483647
  %796 = icmp ult i64 %792, %795
  br i1 %796, label %780, label %5485

797:                                              ; preds = %747
  %798 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %799 = bitcast i8* %798 to i64*
  %800 = load i64, i64* %799, align 8, !noalias !166
  %801 = lshr i64 %800, 1
  %802 = and i64 %801, 2147483647
  %803 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %804 = bitcast i8* %803 to i64*
  %805 = load i64, i64* %804, align 8, !noalias !166
  %806 = lshr i64 %805, 1
  %807 = and i64 %806, 2147483647
  %808 = icmp ult i64 %802, %807
  %809 = select i1 %808, i64 %807, i64 %802
  %810 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %810) #12, !noalias !166
  %811 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 16
  %812 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %34, i64 0, i32 0, i32 0, i32 0, i64 24
  %813 = bitcast i8* %812 to i64*
  %814 = bitcast i8* %811 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %810, i8 -86, i64 16, i1 false) #12, !noalias !166
  store i8* %810, i8** %814, align 8, !noalias !166
  store i64 34359738368, i64* %813, align 8, !noalias !166
  %815 = trunc i64 %809 to i32
  %816 = icmp eq i32 %815, 0
  br i1 %816, label %825, label %817

817:                                              ; preds = %797
  %818 = bitcast i8* %811 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %818, i32 %815, i32 1) #12
  %819 = load i64, i64* %813, align 8, !noalias !166
  %820 = shl nuw nsw i64 %809, 1
  %821 = add i64 %819, %820
  %822 = and i64 %821, 4294967294
  %823 = and i64 %819, -4294967295
  %824 = or i64 %822, %823
  store i64 %824, i64* %813, align 8, !noalias !166
  br label %825

825:                                              ; preds = %817, %797
  %826 = icmp eq i64 %809, 0
  br i1 %826, label %834, label %827

827:                                              ; preds = %825
  %828 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %829 = bitcast i8* %811 to i32**
  %830 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %831 = bitcast i8* %830 to i32**
  %832 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %833 = bitcast i8* %832 to i32**
  br label %870

834:                                              ; preds = %870, %825
  %835 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %836 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %837 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %838 = bitcast i8* %837 to i64*
  %839 = bitcast i8* %835 to i8**
  store i8* %836, i8** %839, align 8, !alias.scope !166
  store i64 34359738368, i64* %838, align 8, !alias.scope !166
  %840 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %34, %0
  br i1 %840, label %841, label %843

841:                                              ; preds = %834
  %842 = load i64, i64* %813, align 8, !noalias !166
  br label %864

843:                                              ; preds = %834
  %844 = bitcast i8* %835 to %class.SkTArray*
  store i64 34359738368, i64* %838, align 8, !alias.scope !166
  %845 = load i64, i64* %813, align 8, !noalias !166
  %846 = lshr i64 %845, 1
  %847 = trunc i64 %846 to i32
  %848 = and i32 %847, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %844, i32 %848, i32 0) #12
  %849 = load i64, i64* %813, align 8, !noalias !166
  %850 = and i64 %849, 4294967294
  %851 = load i64, i64* %838, align 8, !alias.scope !166
  %852 = and i64 %851, -4294967295
  %853 = or i64 %852, %850
  store i64 %853, i64* %838, align 8, !alias.scope !166
  %854 = shl i64 %849, 1
  %855 = and i64 %854, 8589934588
  %856 = icmp eq i64 %855, 0
  br i1 %856, label %861, label %857

857:                                              ; preds = %843
  %858 = load i8*, i8** %839, align 8, !alias.scope !166
  %859 = load i8*, i8** %814, align 8, !noalias !166
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %858, i8* align 1 %859, i64 %855, i1 false) #12
  %860 = load i64, i64* %813, align 8, !noalias !166
  br label %861

861:                                              ; preds = %857, %843
  %862 = phi i64 [ %849, %843 ], [ %860, %857 ]
  %863 = and i64 %862, -4294967295
  store i64 %863, i64* %813, align 8, !noalias !166
  br label %864

864:                                              ; preds = %861, %841
  %865 = phi i64 [ %842, %841 ], [ %863, %861 ]
  %866 = and i64 %865, 1
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %895, label %868

868:                                              ; preds = %864
  %869 = load i8*, i8** %814, align 8, !noalias !166
  call void @_Z7sk_freePv(i8* %869) #12
  br label %895

870:                                              ; preds = %870, %827
  %871 = phi i64 [ 0, %827 ], [ %893, %870 ]
  %872 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %828, align 8
  %873 = load i64, i64* %799, align 8
  %874 = and i64 %873, 4294967294
  %875 = icmp eq i64 %874, 2
  %876 = load i32*, i32** %831, align 16
  %877 = shl i64 %871, 32
  %878 = ashr exact i64 %877, 32
  %879 = select i1 %875, i64 0, i64 %878
  %880 = getelementptr inbounds i32, i32* %876, i64 %879
  %881 = load i32, i32* %880, align 4
  %882 = load i64, i64* %804, align 8
  %883 = and i64 %882, 4294967294
  %884 = icmp eq i64 %883, 2
  %885 = load i32*, i32** %833, align 16
  %886 = select i1 %884, i64 0, i64 %878
  %887 = getelementptr inbounds i32, i32* %885, i64 %886
  %888 = load i32, i32* %887, align 4
  %889 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder12approx_atan2ENS_3F32ES1_(%"class.skvm::Builder"* %872, %"class.skvm::Builder"* %872, i32 %881, %"class.skvm::Builder"* %872, i32 %888) #12
  %890 = extractvalue { %"class.skvm::Builder"*, i32 } %889, 1
  %891 = load i32*, i32** %829, align 8, !noalias !166
  %892 = getelementptr inbounds i32, i32* %891, i64 %878
  store i32 %890, i32* %892, align 4
  %893 = add nuw nsw i64 %871, 1
  %894 = icmp ult i64 %893, %809
  br i1 %894, label %870, label %834

895:                                              ; preds = %864, %868
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %810) #12, !noalias !166
  br label %5485

896:                                              ; preds = %343
  %897 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %898 = bitcast i8* %897 to i64*
  %899 = load i64, i64* %898, align 8, !noalias !169
  %900 = lshr i64 %899, 1
  %901 = and i64 %900, 2147483647
  %902 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %903 = bitcast i8* %902 to i64*
  %904 = load i64, i64* %903, align 8, !noalias !169
  %905 = lshr i64 %904, 1
  %906 = and i64 %905, 2147483647
  %907 = icmp ult i64 %901, %906
  %908 = select i1 %907, i64 %906, i64 %901
  %909 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %909) #12, !noalias !169
  %910 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 16
  %911 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %33, i64 0, i32 0, i32 0, i32 0, i64 24
  %912 = bitcast i8* %911 to i64*
  %913 = bitcast i8* %910 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %909, i8 -86, i64 16, i1 false) #12, !noalias !169
  store i8* %909, i8** %913, align 8, !noalias !169
  store i64 34359738368, i64* %912, align 8, !noalias !169
  %914 = trunc i64 %908 to i32
  %915 = icmp eq i32 %914, 0
  br i1 %915, label %924, label %916

916:                                              ; preds = %896
  %917 = bitcast i8* %910 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %917, i32 %914, i32 1) #12
  %918 = load i64, i64* %912, align 8, !noalias !169
  %919 = shl nuw nsw i64 %908, 1
  %920 = add i64 %918, %919
  %921 = and i64 %920, 4294967294
  %922 = and i64 %918, -4294967295
  %923 = or i64 %921, %922
  store i64 %923, i64* %912, align 8, !noalias !169
  br label %924

924:                                              ; preds = %916, %896
  %925 = icmp eq i64 %908, 0
  br i1 %925, label %933, label %926

926:                                              ; preds = %924
  %927 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %928 = bitcast i8* %910 to i32**
  %929 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %930 = bitcast i8* %929 to i32**
  %931 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %932 = bitcast i8* %931 to i32**
  br label %969

933:                                              ; preds = %969, %924
  %934 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %935 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %936 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %937 = bitcast i8* %936 to i64*
  %938 = bitcast i8* %934 to i8**
  store i8* %935, i8** %938, align 8, !alias.scope !169
  store i64 34359738368, i64* %937, align 8, !alias.scope !169
  %939 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %33, %0
  br i1 %939, label %940, label %942

940:                                              ; preds = %933
  %941 = load i64, i64* %912, align 8, !noalias !169
  br label %963

942:                                              ; preds = %933
  %943 = bitcast i8* %934 to %class.SkTArray*
  store i64 34359738368, i64* %937, align 8, !alias.scope !169
  %944 = load i64, i64* %912, align 8, !noalias !169
  %945 = lshr i64 %944, 1
  %946 = trunc i64 %945 to i32
  %947 = and i32 %946, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %943, i32 %947, i32 0) #12
  %948 = load i64, i64* %912, align 8, !noalias !169
  %949 = and i64 %948, 4294967294
  %950 = load i64, i64* %937, align 8, !alias.scope !169
  %951 = and i64 %950, -4294967295
  %952 = or i64 %951, %949
  store i64 %952, i64* %937, align 8, !alias.scope !169
  %953 = shl i64 %948, 1
  %954 = and i64 %953, 8589934588
  %955 = icmp eq i64 %954, 0
  br i1 %955, label %960, label %956

956:                                              ; preds = %942
  %957 = load i8*, i8** %938, align 8, !alias.scope !169
  %958 = load i8*, i8** %913, align 8, !noalias !169
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %957, i8* align 1 %958, i64 %954, i1 false) #12
  %959 = load i64, i64* %912, align 8, !noalias !169
  br label %960

960:                                              ; preds = %956, %942
  %961 = phi i64 [ %948, %942 ], [ %959, %956 ]
  %962 = and i64 %961, -4294967295
  store i64 %962, i64* %912, align 8, !noalias !169
  br label %963

963:                                              ; preds = %960, %940
  %964 = phi i64 [ %941, %940 ], [ %962, %960 ]
  %965 = and i64 %964, 1
  %966 = icmp eq i64 %965, 0
  br i1 %966, label %994, label %967

967:                                              ; preds = %963
  %968 = load i8*, i8** %913, align 8, !noalias !169
  call void @_Z7sk_freePv(i8* %968) #12
  br label %994

969:                                              ; preds = %969, %926
  %970 = phi i64 [ 0, %926 ], [ %992, %969 ]
  %971 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %927, align 8
  %972 = load i64, i64* %898, align 8
  %973 = and i64 %972, 4294967294
  %974 = icmp eq i64 %973, 2
  %975 = load i32*, i32** %930, align 16
  %976 = shl i64 %970, 32
  %977 = ashr exact i64 %976, 32
  %978 = select i1 %974, i64 0, i64 %977
  %979 = getelementptr inbounds i32, i32* %975, i64 %978
  %980 = load i32, i32* %979, align 4
  %981 = load i64, i64* %903, align 8
  %982 = and i64 %981, 4294967294
  %983 = icmp eq i64 %982, 2
  %984 = load i32*, i32** %932, align 16
  %985 = select i1 %983, i64 0, i64 %977
  %986 = getelementptr inbounds i32, i32* %984, i64 %985
  %987 = load i32, i32* %986, align 4
  %988 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_powfENS_3F32ES1_(%"class.skvm::Builder"* %971, %"class.skvm::Builder"* %971, i32 %980, %"class.skvm::Builder"* %971, i32 %987) #12
  %989 = extractvalue { %"class.skvm::Builder"*, i32 } %988, 1
  %990 = load i32*, i32** %928, align 8, !noalias !169
  %991 = getelementptr inbounds i32, i32* %990, i64 %977
  store i32 %989, i32* %991, align 4
  %992 = add nuw nsw i64 %970, 1
  %993 = icmp ult i64 %992, %908
  br i1 %993, label %969, label %933

994:                                              ; preds = %963, %967
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %909) #12, !noalias !169
  br label %5485

995:                                              ; preds = %343
  %996 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %997 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %998 = bitcast i8* %997 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %996, i8 -86, i64 16, i1 false) #12, !alias.scope !172
  %999 = load i64, i64* %998, align 8, !noalias !172
  %1000 = lshr i64 %999, 1
  %1001 = and i64 %1000, 2147483647
  %1002 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1003 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1004 = bitcast i8* %1003 to i64*
  %1005 = bitcast i8* %1002 to i8**
  store i8* %996, i8** %1005, align 8, !alias.scope !172
  store i64 34359738368, i64* %1004, align 8, !alias.scope !172
  %1006 = trunc i64 %1001 to i32
  %1007 = icmp eq i32 %1006, 0
  br i1 %1007, label %1017, label %1008

1008:                                             ; preds = %995
  %1009 = bitcast i8* %1002 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1009, i32 %1006, i32 1) #12
  %1010 = load i64, i64* %1004, align 8, !alias.scope !172
  %1011 = shl nuw nsw i64 %1001, 1
  %1012 = add i64 %1010, %1011
  %1013 = and i64 %1012, 4294967294
  %1014 = and i64 %1010, -4294967295
  %1015 = or i64 %1013, %1014
  store i64 %1015, i64* %1004, align 8, !alias.scope !172
  %1016 = load i64, i64* %998, align 8, !noalias !172
  br label %1017

1017:                                             ; preds = %1008, %995
  %1018 = phi i64 [ %999, %995 ], [ %1016, %1008 ]
  %1019 = and i64 %1018, 4294967294
  %1020 = icmp eq i64 %1019, 0
  br i1 %1020, label %5485, label %1021

1021:                                             ; preds = %1017
  %1022 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1023 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1024 = bitcast i8* %1023 to i32**
  %1025 = bitcast i8* %1002 to i32**
  br label %1026

1026:                                             ; preds = %1026, %1021
  %1027 = phi i64 [ 0, %1021 ], [ %1044, %1026 ]
  %1028 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1022, align 8, !noalias !172
  %1029 = load i32*, i32** %1024, align 16, !noalias !172
  %1030 = shl i64 %1027, 32
  %1031 = ashr exact i64 %1030, 32
  %1032 = getelementptr inbounds i32, i32* %1029, i64 %1031
  %1033 = load i32, i32* %1032, align 4
  %1034 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1028, i32 1069066811) #12
  %1035 = extractvalue { %"class.skvm::Builder"*, i32 } %1034, 0
  %1036 = extractvalue { %"class.skvm::Builder"*, i32 } %1034, 1
  %1037 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %1028, %"class.skvm::Builder"* %1028, i32 %1033, %"class.skvm::Builder"* %1035, i32 %1036) #12
  %1038 = extractvalue { %"class.skvm::Builder"*, i32 } %1037, 0
  %1039 = extractvalue { %"class.skvm::Builder"*, i32 } %1037, 1
  %1040 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_pow2ENS_3F32E(%"class.skvm::Builder"* %1028, %"class.skvm::Builder"* %1038, i32 %1039) #12
  %1041 = extractvalue { %"class.skvm::Builder"*, i32 } %1040, 1
  %1042 = load i32*, i32** %1025, align 8, !alias.scope !172
  %1043 = getelementptr inbounds i32, i32* %1042, i64 %1031
  store i32 %1041, i32* %1043, align 4
  %1044 = add nuw nsw i64 %1027, 1
  %1045 = load i64, i64* %998, align 8, !noalias !172
  %1046 = lshr i64 %1045, 1
  %1047 = and i64 %1046, 2147483647
  %1048 = icmp ult i64 %1044, %1047
  br i1 %1048, label %1026, label %5485

1049:                                             ; preds = %343
  %1050 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1051 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1052 = bitcast i8* %1051 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1050, i8 -86, i64 16, i1 false) #12, !alias.scope !175
  %1053 = load i64, i64* %1052, align 8, !noalias !175
  %1054 = lshr i64 %1053, 1
  %1055 = and i64 %1054, 2147483647
  %1056 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1057 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1058 = bitcast i8* %1057 to i64*
  %1059 = bitcast i8* %1056 to i8**
  store i8* %1050, i8** %1059, align 8, !alias.scope !175
  store i64 34359738368, i64* %1058, align 8, !alias.scope !175
  %1060 = trunc i64 %1055 to i32
  %1061 = icmp eq i32 %1060, 0
  br i1 %1061, label %1071, label %1062

1062:                                             ; preds = %1049
  %1063 = bitcast i8* %1056 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1063, i32 %1060, i32 1) #12
  %1064 = load i64, i64* %1058, align 8, !alias.scope !175
  %1065 = shl nuw nsw i64 %1055, 1
  %1066 = add i64 %1064, %1065
  %1067 = and i64 %1066, 4294967294
  %1068 = and i64 %1064, -4294967295
  %1069 = or i64 %1067, %1068
  store i64 %1069, i64* %1058, align 8, !alias.scope !175
  %1070 = load i64, i64* %1052, align 8, !noalias !175
  br label %1071

1071:                                             ; preds = %1062, %1049
  %1072 = phi i64 [ %1053, %1049 ], [ %1070, %1062 ]
  %1073 = and i64 %1072, 4294967294
  %1074 = icmp eq i64 %1073, 0
  br i1 %1074, label %5485, label %1075

1075:                                             ; preds = %1071
  %1076 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1077 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1078 = bitcast i8* %1077 to i32**
  %1079 = bitcast i8* %1056 to i32**
  br label %1080

1080:                                             ; preds = %1080, %1075
  %1081 = phi i64 [ 0, %1075 ], [ %1098, %1080 ]
  %1082 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1076, align 8, !noalias !175
  %1083 = load i32*, i32** %1078, align 16, !noalias !175
  %1084 = shl i64 %1081, 32
  %1085 = ashr exact i64 %1084, 32
  %1086 = getelementptr inbounds i32, i32* %1083, i64 %1085
  %1087 = load i32, i32* %1086, align 4
  %1088 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_log2ENS_3F32E(%"class.skvm::Builder"* %1082, %"class.skvm::Builder"* %1082, i32 %1087) #12
  %1089 = extractvalue { %"class.skvm::Builder"*, i32 } %1088, 0
  %1090 = extractvalue { %"class.skvm::Builder"*, i32 } %1088, 1
  %1091 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1082, i32 1060205080) #12
  %1092 = extractvalue { %"class.skvm::Builder"*, i32 } %1091, 0
  %1093 = extractvalue { %"class.skvm::Builder"*, i32 } %1091, 1
  %1094 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %1082, %"class.skvm::Builder"* %1092, i32 %1093, %"class.skvm::Builder"* %1089, i32 %1090) #12
  %1095 = extractvalue { %"class.skvm::Builder"*, i32 } %1094, 1
  %1096 = load i32*, i32** %1079, align 8, !alias.scope !175
  %1097 = getelementptr inbounds i32, i32* %1096, i64 %1085
  store i32 %1095, i32* %1097, align 4
  %1098 = add nuw nsw i64 %1081, 1
  %1099 = load i64, i64* %1052, align 8, !noalias !175
  %1100 = lshr i64 %1099, 1
  %1101 = and i64 %1100, 2147483647
  %1102 = icmp ult i64 %1098, %1101
  br i1 %1102, label %1080, label %5485

1103:                                             ; preds = %343
  %1104 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1105 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1106 = bitcast i8* %1105 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1104, i8 -86, i64 16, i1 false) #12, !alias.scope !178
  %1107 = load i64, i64* %1106, align 8, !noalias !178
  %1108 = lshr i64 %1107, 1
  %1109 = and i64 %1108, 2147483647
  %1110 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1111 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1112 = bitcast i8* %1111 to i64*
  %1113 = bitcast i8* %1110 to i8**
  store i8* %1104, i8** %1113, align 8, !alias.scope !178
  store i64 34359738368, i64* %1112, align 8, !alias.scope !178
  %1114 = trunc i64 %1109 to i32
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1125, label %1116

1116:                                             ; preds = %1103
  %1117 = bitcast i8* %1110 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1117, i32 %1114, i32 1) #12
  %1118 = load i64, i64* %1112, align 8, !alias.scope !178
  %1119 = shl nuw nsw i64 %1109, 1
  %1120 = add i64 %1118, %1119
  %1121 = and i64 %1120, 4294967294
  %1122 = and i64 %1118, -4294967295
  %1123 = or i64 %1121, %1122
  store i64 %1123, i64* %1112, align 8, !alias.scope !178
  %1124 = load i64, i64* %1106, align 8, !noalias !178
  br label %1125

1125:                                             ; preds = %1116, %1103
  %1126 = phi i64 [ %1107, %1103 ], [ %1124, %1116 ]
  %1127 = and i64 %1126, 4294967294
  %1128 = icmp eq i64 %1127, 0
  br i1 %1128, label %5485, label %1129

1129:                                             ; preds = %1125
  %1130 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1131 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1132 = bitcast i8* %1131 to i32**
  %1133 = bitcast i8* %1110 to i32**
  br label %1134

1134:                                             ; preds = %1134, %1129
  %1135 = phi i64 [ 0, %1129 ], [ %1146, %1134 ]
  %1136 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1130, align 8, !noalias !178
  %1137 = load i32*, i32** %1132, align 16, !noalias !178
  %1138 = shl i64 %1135, 32
  %1139 = ashr exact i64 %1138, 32
  %1140 = getelementptr inbounds i32, i32* %1137, i64 %1139
  %1141 = load i32, i32* %1140, align 4
  %1142 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_pow2ENS_3F32E(%"class.skvm::Builder"* %1136, %"class.skvm::Builder"* %1136, i32 %1141) #12
  %1143 = extractvalue { %"class.skvm::Builder"*, i32 } %1142, 1
  %1144 = load i32*, i32** %1133, align 8, !alias.scope !178
  %1145 = getelementptr inbounds i32, i32* %1144, i64 %1139
  store i32 %1143, i32* %1145, align 4
  %1146 = add nuw nsw i64 %1135, 1
  %1147 = load i64, i64* %1106, align 8, !noalias !178
  %1148 = lshr i64 %1147, 1
  %1149 = and i64 %1148, 2147483647
  %1150 = icmp ult i64 %1146, %1149
  br i1 %1150, label %1134, label %5485

1151:                                             ; preds = %343
  %1152 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1153 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1154 = bitcast i8* %1153 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1152, i8 -86, i64 16, i1 false) #12, !alias.scope !181
  %1155 = load i64, i64* %1154, align 8, !noalias !181
  %1156 = lshr i64 %1155, 1
  %1157 = and i64 %1156, 2147483647
  %1158 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1159 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1160 = bitcast i8* %1159 to i64*
  %1161 = bitcast i8* %1158 to i8**
  store i8* %1152, i8** %1161, align 8, !alias.scope !181
  store i64 34359738368, i64* %1160, align 8, !alias.scope !181
  %1162 = trunc i64 %1157 to i32
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1173, label %1164

1164:                                             ; preds = %1151
  %1165 = bitcast i8* %1158 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1165, i32 %1162, i32 1) #12
  %1166 = load i64, i64* %1160, align 8, !alias.scope !181
  %1167 = shl nuw nsw i64 %1157, 1
  %1168 = add i64 %1166, %1167
  %1169 = and i64 %1168, 4294967294
  %1170 = and i64 %1166, -4294967295
  %1171 = or i64 %1169, %1170
  store i64 %1171, i64* %1160, align 8, !alias.scope !181
  %1172 = load i64, i64* %1154, align 8, !noalias !181
  br label %1173

1173:                                             ; preds = %1164, %1151
  %1174 = phi i64 [ %1155, %1151 ], [ %1172, %1164 ]
  %1175 = and i64 %1174, 4294967294
  %1176 = icmp eq i64 %1175, 0
  br i1 %1176, label %5485, label %1177

1177:                                             ; preds = %1173
  %1178 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1179 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1180 = bitcast i8* %1179 to i32**
  %1181 = bitcast i8* %1158 to i32**
  br label %1182

1182:                                             ; preds = %1182, %1177
  %1183 = phi i64 [ 0, %1177 ], [ %1194, %1182 ]
  %1184 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1178, align 8, !noalias !181
  %1185 = load i32*, i32** %1180, align 16, !noalias !181
  %1186 = shl i64 %1183, 32
  %1187 = ashr exact i64 %1186, 32
  %1188 = getelementptr inbounds i32, i32* %1185, i64 %1187
  %1189 = load i32, i32* %1188, align 4
  %1190 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_log2ENS_3F32E(%"class.skvm::Builder"* %1184, %"class.skvm::Builder"* %1184, i32 %1189) #12
  %1191 = extractvalue { %"class.skvm::Builder"*, i32 } %1190, 1
  %1192 = load i32*, i32** %1181, align 8, !alias.scope !181
  %1193 = getelementptr inbounds i32, i32* %1192, i64 %1187
  store i32 %1191, i32* %1193, align 4
  %1194 = add nuw nsw i64 %1183, 1
  %1195 = load i64, i64* %1154, align 8, !noalias !181
  %1196 = lshr i64 %1195, 1
  %1197 = and i64 %1196, 2147483647
  %1198 = icmp ult i64 %1194, %1197
  br i1 %1198, label %1182, label %5485

1199:                                             ; preds = %343
  %1200 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1201 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1202 = bitcast i8* %1201 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1200, i8 -86, i64 16, i1 false) #12, !alias.scope !184
  %1203 = load i64, i64* %1202, align 8, !noalias !184
  %1204 = lshr i64 %1203, 1
  %1205 = and i64 %1204, 2147483647
  %1206 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1207 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1208 = bitcast i8* %1207 to i64*
  %1209 = bitcast i8* %1206 to i8**
  store i8* %1200, i8** %1209, align 8, !alias.scope !184
  store i64 34359738368, i64* %1208, align 8, !alias.scope !184
  %1210 = trunc i64 %1205 to i32
  %1211 = icmp eq i32 %1210, 0
  br i1 %1211, label %1221, label %1212

1212:                                             ; preds = %1199
  %1213 = bitcast i8* %1206 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1213, i32 %1210, i32 1) #12
  %1214 = load i64, i64* %1208, align 8, !alias.scope !184
  %1215 = shl nuw nsw i64 %1205, 1
  %1216 = add i64 %1214, %1215
  %1217 = and i64 %1216, 4294967294
  %1218 = and i64 %1214, -4294967295
  %1219 = or i64 %1217, %1218
  store i64 %1219, i64* %1208, align 8, !alias.scope !184
  %1220 = load i64, i64* %1202, align 8, !noalias !184
  br label %1221

1221:                                             ; preds = %1212, %1199
  %1222 = phi i64 [ %1203, %1199 ], [ %1220, %1212 ]
  %1223 = and i64 %1222, 4294967294
  %1224 = icmp eq i64 %1223, 0
  br i1 %1224, label %5485, label %1225

1225:                                             ; preds = %1221
  %1226 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1227 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1228 = bitcast i8* %1227 to i32**
  %1229 = bitcast i8* %1206 to i32**
  br label %1230

1230:                                             ; preds = %1230, %1225
  %1231 = phi i64 [ 0, %1225 ], [ %1242, %1230 ]
  %1232 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1226, align 8, !noalias !184
  %1233 = load i32*, i32** %1228, align 16, !noalias !184
  %1234 = shl i64 %1231, 32
  %1235 = ashr exact i64 %1234, 32
  %1236 = getelementptr inbounds i32, i32* %1233, i64 %1235
  %1237 = load i32, i32* %1236, align 4
  %1238 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %1232, %"class.skvm::Builder"* %1232, i32 %1237) #12
  %1239 = extractvalue { %"class.skvm::Builder"*, i32 } %1238, 1
  %1240 = load i32*, i32** %1229, align 8, !alias.scope !184
  %1241 = getelementptr inbounds i32, i32* %1240, i64 %1235
  store i32 %1239, i32* %1241, align 4
  %1242 = add nuw nsw i64 %1231, 1
  %1243 = load i64, i64* %1202, align 8, !noalias !184
  %1244 = lshr i64 %1243, 1
  %1245 = and i64 %1244, 2147483647
  %1246 = icmp ult i64 %1242, %1245
  br i1 %1246, label %1230, label %5485

1247:                                             ; preds = %343
  %1248 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1249 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1250 = bitcast i8* %1249 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1248, i8 -86, i64 16, i1 false) #12, !alias.scope !187
  %1251 = load i64, i64* %1250, align 8, !noalias !187
  %1252 = lshr i64 %1251, 1
  %1253 = and i64 %1252, 2147483647
  %1254 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1255 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1256 = bitcast i8* %1255 to i64*
  %1257 = bitcast i8* %1254 to i8**
  store i8* %1248, i8** %1257, align 8, !alias.scope !187
  store i64 34359738368, i64* %1256, align 8, !alias.scope !187
  %1258 = trunc i64 %1253 to i32
  %1259 = icmp eq i32 %1258, 0
  br i1 %1259, label %1269, label %1260

1260:                                             ; preds = %1247
  %1261 = bitcast i8* %1254 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1261, i32 %1258, i32 1) #12
  %1262 = load i64, i64* %1256, align 8, !alias.scope !187
  %1263 = shl nuw nsw i64 %1253, 1
  %1264 = add i64 %1262, %1263
  %1265 = and i64 %1264, 4294967294
  %1266 = and i64 %1262, -4294967295
  %1267 = or i64 %1265, %1266
  store i64 %1267, i64* %1256, align 8, !alias.scope !187
  %1268 = load i64, i64* %1250, align 8, !noalias !187
  br label %1269

1269:                                             ; preds = %1260, %1247
  %1270 = phi i64 [ %1251, %1247 ], [ %1268, %1260 ]
  %1271 = and i64 %1270, 4294967294
  %1272 = icmp eq i64 %1271, 0
  br i1 %1272, label %5485, label %1273

1273:                                             ; preds = %1269
  %1274 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1275 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1276 = bitcast i8* %1275 to i32**
  %1277 = bitcast i8* %1254 to i32**
  br label %1278

1278:                                             ; preds = %1278, %1273
  %1279 = phi i64 [ 0, %1273 ], [ %1296, %1278 ]
  %1280 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1274, align 8, !noalias !187
  %1281 = load i32*, i32** %1276, align 16, !noalias !187
  %1282 = shl i64 %1279, 32
  %1283 = ashr exact i64 %1282, 32
  %1284 = getelementptr inbounds i32, i32* %1281, i64 %1283
  %1285 = load i32, i32* %1284, align 4
  %1286 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %1280, %"class.skvm::Builder"* %1280, i32 %1285) #12
  %1287 = extractvalue { %"class.skvm::Builder"*, i32 } %1286, 0
  %1288 = extractvalue { %"class.skvm::Builder"*, i32 } %1286, 1
  %1289 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1287, i32 1065353216) #12
  %1290 = extractvalue { %"class.skvm::Builder"*, i32 } %1289, 0
  %1291 = extractvalue { %"class.skvm::Builder"*, i32 } %1289, 1
  %1292 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %1287, %"class.skvm::Builder"* %1290, i32 %1291, %"class.skvm::Builder"* %1287, i32 %1288) #12
  %1293 = extractvalue { %"class.skvm::Builder"*, i32 } %1292, 1
  %1294 = load i32*, i32** %1277, align 8, !alias.scope !187
  %1295 = getelementptr inbounds i32, i32* %1294, i64 %1283
  store i32 %1293, i32* %1295, align 4
  %1296 = add nuw nsw i64 %1279, 1
  %1297 = load i64, i64* %1250, align 8, !noalias !187
  %1298 = lshr i64 %1297, 1
  %1299 = and i64 %1298, 2147483647
  %1300 = icmp ult i64 %1296, %1299
  br i1 %1300, label %1278, label %5485

1301:                                             ; preds = %343
  %1302 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1303 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1304 = bitcast i8* %1303 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1302, i8 -86, i64 16, i1 false) #12, !alias.scope !190
  %1305 = load i64, i64* %1304, align 8, !noalias !190
  %1306 = lshr i64 %1305, 1
  %1307 = and i64 %1306, 2147483647
  %1308 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1309 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1310 = bitcast i8* %1309 to i64*
  %1311 = bitcast i8* %1308 to i8**
  store i8* %1302, i8** %1311, align 8, !alias.scope !190
  store i64 34359738368, i64* %1310, align 8, !alias.scope !190
  %1312 = trunc i64 %1307 to i32
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1323, label %1314

1314:                                             ; preds = %1301
  %1315 = bitcast i8* %1308 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1315, i32 %1312, i32 1) #12
  %1316 = load i64, i64* %1310, align 8, !alias.scope !190
  %1317 = shl nuw nsw i64 %1307, 1
  %1318 = add i64 %1316, %1317
  %1319 = and i64 %1318, 4294967294
  %1320 = and i64 %1316, -4294967295
  %1321 = or i64 %1319, %1320
  store i64 %1321, i64* %1310, align 8, !alias.scope !190
  %1322 = load i64, i64* %1304, align 8, !noalias !190
  br label %1323

1323:                                             ; preds = %1314, %1301
  %1324 = phi i64 [ %1305, %1301 ], [ %1322, %1314 ]
  %1325 = and i64 %1324, 4294967294
  %1326 = icmp eq i64 %1325, 0
  br i1 %1326, label %5485, label %1327

1327:                                             ; preds = %1323
  %1328 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1329 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1330 = bitcast i8* %1329 to i32**
  %1331 = bitcast i8* %1308 to i32**
  br label %1332

1332:                                             ; preds = %1332, %1327
  %1333 = phi i64 [ 0, %1327 ], [ %1347, %1332 ]
  %1334 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1328, align 8, !noalias !190
  %1335 = load i32*, i32** %1330, align 16, !noalias !190
  %1336 = shl i64 %1333, 32
  %1337 = ashr exact i64 %1336, 32
  %1338 = getelementptr inbounds i32, i32* %1335, i64 %1337
  %1339 = load i32, i32* %1338, align 4
  %1340 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1334, i32 2147483647) #12
  %1341 = extractvalue { %"class.skvm::Builder"*, i32 } %1340, 0
  %1342 = extractvalue { %"class.skvm::Builder"*, i32 } %1340, 1
  %1343 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1334, %"class.skvm::Builder"* %1334, i32 %1339, %"class.skvm::Builder"* %1341, i32 %1342) #12
  %1344 = extractvalue { %"class.skvm::Builder"*, i32 } %1343, 1
  %1345 = load i32*, i32** %1331, align 8, !alias.scope !190
  %1346 = getelementptr inbounds i32, i32* %1345, i64 %1337
  store i32 %1344, i32* %1346, align 4
  %1347 = add nuw nsw i64 %1333, 1
  %1348 = load i64, i64* %1304, align 8, !noalias !190
  %1349 = lshr i64 %1348, 1
  %1350 = and i64 %1349, 2147483647
  %1351 = icmp ult i64 %1347, %1350
  br i1 %1351, label %1332, label %5485

1352:                                             ; preds = %343
  %1353 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1354 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1355 = bitcast i8* %1354 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1353, i8 -86, i64 16, i1 false) #12, !alias.scope !193
  %1356 = load i64, i64* %1355, align 8, !noalias !193
  %1357 = lshr i64 %1356, 1
  %1358 = and i64 %1357, 2147483647
  %1359 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1360 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1361 = bitcast i8* %1360 to i64*
  %1362 = bitcast i8* %1359 to i8**
  store i8* %1353, i8** %1362, align 8, !alias.scope !193
  store i64 34359738368, i64* %1361, align 8, !alias.scope !193
  %1363 = trunc i64 %1358 to i32
  %1364 = icmp eq i32 %1363, 0
  br i1 %1364, label %1374, label %1365

1365:                                             ; preds = %1352
  %1366 = bitcast i8* %1359 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1366, i32 %1363, i32 1) #12
  %1367 = load i64, i64* %1361, align 8, !alias.scope !193
  %1368 = shl nuw nsw i64 %1358, 1
  %1369 = add i64 %1367, %1368
  %1370 = and i64 %1369, 4294967294
  %1371 = and i64 %1367, -4294967295
  %1372 = or i64 %1370, %1371
  store i64 %1372, i64* %1361, align 8, !alias.scope !193
  %1373 = load i64, i64* %1355, align 8, !noalias !193
  br label %1374

1374:                                             ; preds = %1365, %1352
  %1375 = phi i64 [ %1356, %1352 ], [ %1373, %1365 ]
  %1376 = and i64 %1375, 4294967294
  %1377 = icmp eq i64 %1376, 0
  br i1 %1377, label %5485, label %1378

1378:                                             ; preds = %1374
  %1379 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1380 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1381 = bitcast i8* %1380 to i32**
  %1382 = bitcast { %"class.skvm::Builder"*, i32 }* %32 to i8*
  %1383 = bitcast { %"class.skvm::Builder"*, i32 }* %32 to %"struct.skvm::I32"*
  %1384 = bitcast { %"class.skvm::Builder"*, i32 }* %32 to i64*
  %1385 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %32, i64 0, i32 1
  %1386 = bitcast { %"class.skvm::Builder"*, i32 }* %31 to i8*
  %1387 = bitcast { %"class.skvm::Builder"*, i32 }* %31 to %"struct.skvm::I32"*
  %1388 = bitcast { %"class.skvm::Builder"*, i32 }* %31 to i64*
  %1389 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %31, i64 0, i32 1
  %1390 = bitcast i8* %1359 to i32**
  br label %1391

1391:                                             ; preds = %1391, %1378
  %1392 = phi i64 [ 0, %1378 ], [ %1429, %1391 ]
  %1393 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1379, align 8, !noalias !193
  %1394 = load i32*, i32** %1381, align 16, !noalias !193
  %1395 = shl i64 %1392, 32
  %1396 = ashr exact i64 %1395, 32
  %1397 = getelementptr inbounds i32, i32* %1394, i64 %1396
  %1398 = load i32, i32* %1397, align 4
  %1399 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1393, i32 0) #12
  %1400 = extractvalue { %"class.skvm::Builder"*, i32 } %1399, 0
  %1401 = extractvalue { %"class.skvm::Builder"*, i32 } %1399, 1
  %1402 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %1393, %"class.skvm::Builder"* %1393, i32 %1398, %"class.skvm::Builder"* %1400, i32 %1401) #12
  %1403 = extractvalue { %"class.skvm::Builder"*, i32 } %1402, 0
  %1404 = extractvalue { %"class.skvm::Builder"*, i32 } %1402, 1
  %1405 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1393, i32 0) #12
  %1406 = extractvalue { %"class.skvm::Builder"*, i32 } %1405, 0
  %1407 = extractvalue { %"class.skvm::Builder"*, i32 } %1405, 1
  %1408 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3F32ES1_(%"class.skvm::Builder"* %1393, %"class.skvm::Builder"* %1393, i32 %1398, %"class.skvm::Builder"* %1406, i32 %1407) #12
  %1409 = extractvalue { %"class.skvm::Builder"*, i32 } %1408, 0
  %1410 = extractvalue { %"class.skvm::Builder"*, i32 } %1408, 1
  %1411 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1409, i32 1065353216) #12
  %1412 = extractvalue { %"class.skvm::Builder"*, i32 } %1411, 0
  %1413 = extractvalue { %"class.skvm::Builder"*, i32 } %1411, 1
  %1414 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1409, i32 0) #12
  %1415 = extractvalue { %"class.skvm::Builder"*, i32 } %1414, 0
  %1416 = extractvalue { %"class.skvm::Builder"*, i32 } %1414, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1382) #12, !noalias !193
  %1417 = ptrtoint %"class.skvm::Builder"* %1415 to i64
  store i64 %1417, i64* %1384, align 8, !noalias !193
  store i32 %1416, i32* %1385, align 8, !noalias !193
  %1418 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %1409, %"class.skvm::Builder"* %1409, i32 %1410, %"class.skvm::Builder"* %1412, i32 %1413, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %1383) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1382) #12, !noalias !193
  %1419 = extractvalue { %"class.skvm::Builder"*, i32 } %1418, 0
  %1420 = extractvalue { %"class.skvm::Builder"*, i32 } %1418, 1
  %1421 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1403, i32 -1082130432) #12
  %1422 = extractvalue { %"class.skvm::Builder"*, i32 } %1421, 0
  %1423 = extractvalue { %"class.skvm::Builder"*, i32 } %1421, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1386) #12, !noalias !193
  %1424 = ptrtoint %"class.skvm::Builder"* %1419 to i64
  store i64 %1424, i64* %1388, align 8, !noalias !193
  store i32 %1420, i32* %1389, align 8, !noalias !193
  %1425 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %1403, %"class.skvm::Builder"* %1403, i32 %1404, %"class.skvm::Builder"* %1422, i32 %1423, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %1387) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1386) #12, !noalias !193
  %1426 = extractvalue { %"class.skvm::Builder"*, i32 } %1425, 1
  %1427 = load i32*, i32** %1390, align 8, !alias.scope !193
  %1428 = getelementptr inbounds i32, i32* %1427, i64 %1396
  store i32 %1426, i32* %1428, align 4
  %1429 = add nuw nsw i64 %1392, 1
  %1430 = load i64, i64* %1355, align 8, !noalias !193
  %1431 = lshr i64 %1430, 1
  %1432 = and i64 %1431, 2147483647
  %1433 = icmp ult i64 %1429, %1432
  br i1 %1433, label %1391, label %5485

1434:                                             ; preds = %343
  %1435 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1436 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1437 = bitcast i8* %1436 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1435, i8 -86, i64 16, i1 false) #12, !alias.scope !196
  %1438 = load i64, i64* %1437, align 8, !noalias !196
  %1439 = lshr i64 %1438, 1
  %1440 = and i64 %1439, 2147483647
  %1441 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1442 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1443 = bitcast i8* %1442 to i64*
  %1444 = bitcast i8* %1441 to i8**
  store i8* %1435, i8** %1444, align 8, !alias.scope !196
  store i64 34359738368, i64* %1443, align 8, !alias.scope !196
  %1445 = trunc i64 %1440 to i32
  %1446 = icmp eq i32 %1445, 0
  br i1 %1446, label %1456, label %1447

1447:                                             ; preds = %1434
  %1448 = bitcast i8* %1441 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1448, i32 %1445, i32 1) #12
  %1449 = load i64, i64* %1443, align 8, !alias.scope !196
  %1450 = shl nuw nsw i64 %1440, 1
  %1451 = add i64 %1449, %1450
  %1452 = and i64 %1451, 4294967294
  %1453 = and i64 %1449, -4294967295
  %1454 = or i64 %1452, %1453
  store i64 %1454, i64* %1443, align 8, !alias.scope !196
  %1455 = load i64, i64* %1437, align 8, !noalias !196
  br label %1456

1456:                                             ; preds = %1447, %1434
  %1457 = phi i64 [ %1438, %1434 ], [ %1455, %1447 ]
  %1458 = and i64 %1457, 4294967294
  %1459 = icmp eq i64 %1458, 0
  br i1 %1459, label %5485, label %1460

1460:                                             ; preds = %1456
  %1461 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1462 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1463 = bitcast i8* %1462 to i32**
  %1464 = bitcast i8* %1441 to i32**
  br label %1465

1465:                                             ; preds = %1465, %1460
  %1466 = phi i64 [ 0, %1460 ], [ %1477, %1465 ]
  %1467 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1461, align 8, !noalias !196
  %1468 = load i32*, i32** %1463, align 16, !noalias !196
  %1469 = shl i64 %1466, 32
  %1470 = ashr exact i64 %1469, 32
  %1471 = getelementptr inbounds i32, i32* %1468, i64 %1470
  %1472 = load i32, i32* %1471, align 4
  %1473 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"* %1467, %"class.skvm::Builder"* %1467, i32 %1472) #12
  %1474 = extractvalue { %"class.skvm::Builder"*, i32 } %1473, 1
  %1475 = load i32*, i32** %1464, align 8, !alias.scope !196
  %1476 = getelementptr inbounds i32, i32* %1475, i64 %1470
  store i32 %1474, i32* %1476, align 4
  %1477 = add nuw nsw i64 %1466, 1
  %1478 = load i64, i64* %1437, align 8, !noalias !196
  %1479 = lshr i64 %1478, 1
  %1480 = and i64 %1479, 2147483647
  %1481 = icmp ult i64 %1477, %1480
  br i1 %1481, label %1465, label %5485

1482:                                             ; preds = %343
  %1483 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1484 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1485 = bitcast i8* %1484 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1483, i8 -86, i64 16, i1 false) #12, !alias.scope !199
  %1486 = load i64, i64* %1485, align 8, !noalias !199
  %1487 = lshr i64 %1486, 1
  %1488 = and i64 %1487, 2147483647
  %1489 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1490 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1491 = bitcast i8* %1490 to i64*
  %1492 = bitcast i8* %1489 to i8**
  store i8* %1483, i8** %1492, align 8, !alias.scope !199
  store i64 34359738368, i64* %1491, align 8, !alias.scope !199
  %1493 = trunc i64 %1488 to i32
  %1494 = icmp eq i32 %1493, 0
  br i1 %1494, label %1504, label %1495

1495:                                             ; preds = %1482
  %1496 = bitcast i8* %1489 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1496, i32 %1493, i32 1) #12
  %1497 = load i64, i64* %1491, align 8, !alias.scope !199
  %1498 = shl nuw nsw i64 %1488, 1
  %1499 = add i64 %1497, %1498
  %1500 = and i64 %1499, 4294967294
  %1501 = and i64 %1497, -4294967295
  %1502 = or i64 %1500, %1501
  store i64 %1502, i64* %1491, align 8, !alias.scope !199
  %1503 = load i64, i64* %1485, align 8, !noalias !199
  br label %1504

1504:                                             ; preds = %1495, %1482
  %1505 = phi i64 [ %1486, %1482 ], [ %1503, %1495 ]
  %1506 = and i64 %1505, 4294967294
  %1507 = icmp eq i64 %1506, 0
  br i1 %1507, label %5485, label %1508

1508:                                             ; preds = %1504
  %1509 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1510 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1511 = bitcast i8* %1510 to i32**
  %1512 = bitcast i8* %1489 to i32**
  br label %1513

1513:                                             ; preds = %1513, %1508
  %1514 = phi i64 [ 0, %1508 ], [ %1525, %1513 ]
  %1515 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1509, align 8, !noalias !199
  %1516 = load i32*, i32** %1511, align 16, !noalias !199
  %1517 = shl i64 %1514, 32
  %1518 = ashr exact i64 %1517, 32
  %1519 = getelementptr inbounds i32, i32* %1516, i64 %1518
  %1520 = load i32, i32* %1519, align 4
  %1521 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4ceilENS_3F32E(%"class.skvm::Builder"* %1515, %"class.skvm::Builder"* %1515, i32 %1520) #12
  %1522 = extractvalue { %"class.skvm::Builder"*, i32 } %1521, 1
  %1523 = load i32*, i32** %1512, align 8, !alias.scope !199
  %1524 = getelementptr inbounds i32, i32* %1523, i64 %1518
  store i32 %1522, i32* %1524, align 4
  %1525 = add nuw nsw i64 %1514, 1
  %1526 = load i64, i64* %1485, align 8, !noalias !199
  %1527 = lshr i64 %1526, 1
  %1528 = and i64 %1527, 2147483647
  %1529 = icmp ult i64 %1525, %1528
  br i1 %1529, label %1513, label %5485

1530:                                             ; preds = %343
  %1531 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1532 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1533 = bitcast i8* %1532 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1531, i8 -86, i64 16, i1 false) #12, !alias.scope !202
  %1534 = load i64, i64* %1533, align 8, !noalias !202
  %1535 = lshr i64 %1534, 1
  %1536 = and i64 %1535, 2147483647
  %1537 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1538 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1539 = bitcast i8* %1538 to i64*
  %1540 = bitcast i8* %1537 to i8**
  store i8* %1531, i8** %1540, align 8, !alias.scope !202
  store i64 34359738368, i64* %1539, align 8, !alias.scope !202
  %1541 = trunc i64 %1536 to i32
  %1542 = icmp eq i32 %1541, 0
  br i1 %1542, label %1552, label %1543

1543:                                             ; preds = %1530
  %1544 = bitcast i8* %1537 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1544, i32 %1541, i32 1) #12
  %1545 = load i64, i64* %1539, align 8, !alias.scope !202
  %1546 = shl nuw nsw i64 %1536, 1
  %1547 = add i64 %1545, %1546
  %1548 = and i64 %1547, 4294967294
  %1549 = and i64 %1545, -4294967295
  %1550 = or i64 %1548, %1549
  store i64 %1550, i64* %1539, align 8, !alias.scope !202
  %1551 = load i64, i64* %1533, align 8, !noalias !202
  br label %1552

1552:                                             ; preds = %1543, %1530
  %1553 = phi i64 [ %1534, %1530 ], [ %1551, %1543 ]
  %1554 = and i64 %1553, 4294967294
  %1555 = icmp eq i64 %1554, 0
  br i1 %1555, label %5485, label %1556

1556:                                             ; preds = %1552
  %1557 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1558 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1559 = bitcast i8* %1558 to i32**
  %1560 = bitcast i8* %1537 to i32**
  br label %1561

1561:                                             ; preds = %1561, %1556
  %1562 = phi i64 [ 0, %1556 ], [ %1576, %1561 ]
  %1563 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1557, align 8, !noalias !202
  %1564 = load i32*, i32** %1559, align 16, !noalias !202
  %1565 = shl i64 %1562, 32
  %1566 = ashr exact i64 %1565, 32
  %1567 = getelementptr inbounds i32, i32* %1564, i64 %1566
  %1568 = load i32, i32* %1567, align 4
  %1569 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"* %1563, %"class.skvm::Builder"* %1563, i32 %1568) #12
  %1570 = extractvalue { %"class.skvm::Builder"*, i32 } %1569, 0
  %1571 = extractvalue { %"class.skvm::Builder"*, i32 } %1569, 1
  %1572 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %1563, %"class.skvm::Builder"* %1563, i32 %1568, %"class.skvm::Builder"* %1570, i32 %1571) #12
  %1573 = extractvalue { %"class.skvm::Builder"*, i32 } %1572, 1
  %1574 = load i32*, i32** %1560, align 8, !alias.scope !202
  %1575 = getelementptr inbounds i32, i32* %1574, i64 %1566
  store i32 %1573, i32* %1575, align 4
  %1576 = add nuw nsw i64 %1562, 1
  %1577 = load i64, i64* %1533, align 8, !noalias !202
  %1578 = lshr i64 %1577, 1
  %1579 = and i64 %1578, 2147483647
  %1580 = icmp ult i64 %1576, %1579
  br i1 %1580, label %1561, label %5485

1581:                                             ; preds = %343
  %1582 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1583 = bitcast i8* %1582 to i64*
  %1584 = load i64, i64* %1583, align 8, !noalias !205
  %1585 = lshr i64 %1584, 1
  %1586 = and i64 %1585, 2147483647
  %1587 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %1588 = bitcast i8* %1587 to i64*
  %1589 = load i64, i64* %1588, align 8, !noalias !205
  %1590 = lshr i64 %1589, 1
  %1591 = and i64 %1590, 2147483647
  %1592 = icmp ult i64 %1586, %1591
  %1593 = select i1 %1592, i64 %1591, i64 %1586
  %1594 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %30, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1594) #12, !noalias !205
  %1595 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %30, i64 0, i32 0, i32 0, i32 0, i64 16
  %1596 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %30, i64 0, i32 0, i32 0, i32 0, i64 24
  %1597 = bitcast i8* %1596 to i64*
  %1598 = bitcast i8* %1595 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1594, i8 -86, i64 16, i1 false) #12, !noalias !205
  store i8* %1594, i8** %1598, align 8, !noalias !205
  store i64 34359738368, i64* %1597, align 8, !noalias !205
  %1599 = trunc i64 %1593 to i32
  %1600 = icmp eq i32 %1599, 0
  br i1 %1600, label %1609, label %1601

1601:                                             ; preds = %1581
  %1602 = bitcast i8* %1595 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1602, i32 %1599, i32 1) #12
  %1603 = load i64, i64* %1597, align 8, !noalias !205
  %1604 = shl nuw nsw i64 %1593, 1
  %1605 = add i64 %1603, %1604
  %1606 = and i64 %1605, 4294967294
  %1607 = and i64 %1603, -4294967295
  %1608 = or i64 %1606, %1607
  store i64 %1608, i64* %1597, align 8, !noalias !205
  br label %1609

1609:                                             ; preds = %1601, %1581
  %1610 = icmp eq i64 %1593, 0
  br i1 %1610, label %1618, label %1611

1611:                                             ; preds = %1609
  %1612 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1613 = bitcast i8* %1595 to i32**
  %1614 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1615 = bitcast i8* %1614 to i32**
  %1616 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %1617 = bitcast i8* %1616 to i32**
  br label %1654

1618:                                             ; preds = %1654, %1609
  %1619 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1620 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1621 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1622 = bitcast i8* %1621 to i64*
  %1623 = bitcast i8* %1619 to i8**
  store i8* %1620, i8** %1623, align 8, !alias.scope !205
  store i64 34359738368, i64* %1622, align 8, !alias.scope !205
  %1624 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %30, %0
  br i1 %1624, label %1625, label %1627

1625:                                             ; preds = %1618
  %1626 = load i64, i64* %1597, align 8, !noalias !205
  br label %1648

1627:                                             ; preds = %1618
  %1628 = bitcast i8* %1619 to %class.SkTArray*
  store i64 34359738368, i64* %1622, align 8, !alias.scope !205
  %1629 = load i64, i64* %1597, align 8, !noalias !205
  %1630 = lshr i64 %1629, 1
  %1631 = trunc i64 %1630 to i32
  %1632 = and i32 %1631, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1628, i32 %1632, i32 0) #12
  %1633 = load i64, i64* %1597, align 8, !noalias !205
  %1634 = and i64 %1633, 4294967294
  %1635 = load i64, i64* %1622, align 8, !alias.scope !205
  %1636 = and i64 %1635, -4294967295
  %1637 = or i64 %1636, %1634
  store i64 %1637, i64* %1622, align 8, !alias.scope !205
  %1638 = shl i64 %1633, 1
  %1639 = and i64 %1638, 8589934588
  %1640 = icmp eq i64 %1639, 0
  br i1 %1640, label %1645, label %1641

1641:                                             ; preds = %1627
  %1642 = load i8*, i8** %1623, align 8, !alias.scope !205
  %1643 = load i8*, i8** %1598, align 8, !noalias !205
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1642, i8* align 1 %1643, i64 %1639, i1 false) #12
  %1644 = load i64, i64* %1597, align 8, !noalias !205
  br label %1645

1645:                                             ; preds = %1641, %1627
  %1646 = phi i64 [ %1633, %1627 ], [ %1644, %1641 ]
  %1647 = and i64 %1646, -4294967295
  store i64 %1647, i64* %1597, align 8, !noalias !205
  br label %1648

1648:                                             ; preds = %1645, %1625
  %1649 = phi i64 [ %1626, %1625 ], [ %1647, %1645 ]
  %1650 = and i64 %1649, 1
  %1651 = icmp eq i64 %1650, 0
  br i1 %1651, label %1688, label %1652

1652:                                             ; preds = %1648
  %1653 = load i8*, i8** %1598, align 8, !noalias !205
  call void @_Z7sk_freePv(i8* %1653) #12
  br label %1688

1654:                                             ; preds = %1654, %1611
  %1655 = phi i64 [ 0, %1611 ], [ %1686, %1654 ]
  %1656 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1612, align 8
  %1657 = load i64, i64* %1583, align 8
  %1658 = and i64 %1657, 4294967294
  %1659 = icmp eq i64 %1658, 2
  %1660 = load i32*, i32** %1615, align 16
  %1661 = shl i64 %1655, 32
  %1662 = ashr exact i64 %1661, 32
  %1663 = select i1 %1659, i64 0, i64 %1662
  %1664 = getelementptr inbounds i32, i32* %1660, i64 %1663
  %1665 = load i32, i32* %1664, align 4
  %1666 = load i64, i64* %1588, align 8
  %1667 = and i64 %1666, 4294967294
  %1668 = icmp eq i64 %1667, 2
  %1669 = load i32*, i32** %1617, align 16
  %1670 = select i1 %1668, i64 0, i64 %1662
  %1671 = getelementptr inbounds i32, i32* %1669, i64 %1670
  %1672 = load i32, i32* %1671, align 4
  %1673 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %1656, %"class.skvm::Builder"* %1656, i32 %1665, %"class.skvm::Builder"* %1656, i32 %1672) #12
  %1674 = extractvalue { %"class.skvm::Builder"*, i32 } %1673, 0
  %1675 = extractvalue { %"class.skvm::Builder"*, i32 } %1673, 1
  %1676 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"* %1674, %"class.skvm::Builder"* %1674, i32 %1675) #12
  %1677 = extractvalue { %"class.skvm::Builder"*, i32 } %1676, 0
  %1678 = extractvalue { %"class.skvm::Builder"*, i32 } %1676, 1
  %1679 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %1656, %"class.skvm::Builder"* %1656, i32 %1672, %"class.skvm::Builder"* %1677, i32 %1678) #12
  %1680 = extractvalue { %"class.skvm::Builder"*, i32 } %1679, 0
  %1681 = extractvalue { %"class.skvm::Builder"*, i32 } %1679, 1
  %1682 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %1656, %"class.skvm::Builder"* %1656, i32 %1665, %"class.skvm::Builder"* %1680, i32 %1681) #12
  %1683 = extractvalue { %"class.skvm::Builder"*, i32 } %1682, 1
  %1684 = load i32*, i32** %1613, align 8, !noalias !205
  %1685 = getelementptr inbounds i32, i32* %1684, i64 %1662
  store i32 %1683, i32* %1685, align 4
  %1686 = add nuw nsw i64 %1655, 1
  %1687 = icmp ult i64 %1686, %1593
  br i1 %1687, label %1654, label %1618

1688:                                             ; preds = %1648, %1652
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1594) #12, !noalias !205
  br label %5485

1689:                                             ; preds = %343
  %1690 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1691 = bitcast i8* %1690 to i64*
  %1692 = load i64, i64* %1691, align 8, !noalias !208
  %1693 = lshr i64 %1692, 1
  %1694 = and i64 %1693, 2147483647
  %1695 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %1696 = bitcast i8* %1695 to i64*
  %1697 = load i64, i64* %1696, align 8, !noalias !208
  %1698 = lshr i64 %1697, 1
  %1699 = and i64 %1698, 2147483647
  %1700 = icmp ult i64 %1694, %1699
  %1701 = select i1 %1700, i64 %1699, i64 %1694
  %1702 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1702) #12, !noalias !208
  %1703 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 16
  %1704 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %29, i64 0, i32 0, i32 0, i32 0, i64 24
  %1705 = bitcast i8* %1704 to i64*
  %1706 = bitcast i8* %1703 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1702, i8 -86, i64 16, i1 false) #12, !noalias !208
  store i8* %1702, i8** %1706, align 8, !noalias !208
  store i64 34359738368, i64* %1705, align 8, !noalias !208
  %1707 = trunc i64 %1701 to i32
  %1708 = icmp eq i32 %1707, 0
  br i1 %1708, label %1717, label %1709

1709:                                             ; preds = %1689
  %1710 = bitcast i8* %1703 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1710, i32 %1707, i32 1) #12
  %1711 = load i64, i64* %1705, align 8, !noalias !208
  %1712 = shl nuw nsw i64 %1701, 1
  %1713 = add i64 %1711, %1712
  %1714 = and i64 %1713, 4294967294
  %1715 = and i64 %1711, -4294967295
  %1716 = or i64 %1714, %1715
  store i64 %1716, i64* %1705, align 8, !noalias !208
  br label %1717

1717:                                             ; preds = %1709, %1689
  %1718 = icmp eq i64 %1701, 0
  br i1 %1718, label %1726, label %1719

1719:                                             ; preds = %1717
  %1720 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1721 = bitcast i8* %1703 to i32**
  %1722 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1723 = bitcast i8* %1722 to i32**
  %1724 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %1725 = bitcast i8* %1724 to i32**
  br label %1762

1726:                                             ; preds = %1762, %1717
  %1727 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1728 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1729 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1730 = bitcast i8* %1729 to i64*
  %1731 = bitcast i8* %1727 to i8**
  store i8* %1728, i8** %1731, align 8, !alias.scope !208
  store i64 34359738368, i64* %1730, align 8, !alias.scope !208
  %1732 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %29, %0
  br i1 %1732, label %1733, label %1735

1733:                                             ; preds = %1726
  %1734 = load i64, i64* %1705, align 8, !noalias !208
  br label %1756

1735:                                             ; preds = %1726
  %1736 = bitcast i8* %1727 to %class.SkTArray*
  store i64 34359738368, i64* %1730, align 8, !alias.scope !208
  %1737 = load i64, i64* %1705, align 8, !noalias !208
  %1738 = lshr i64 %1737, 1
  %1739 = trunc i64 %1738 to i32
  %1740 = and i32 %1739, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1736, i32 %1740, i32 0) #12
  %1741 = load i64, i64* %1705, align 8, !noalias !208
  %1742 = and i64 %1741, 4294967294
  %1743 = load i64, i64* %1730, align 8, !alias.scope !208
  %1744 = and i64 %1743, -4294967295
  %1745 = or i64 %1744, %1742
  store i64 %1745, i64* %1730, align 8, !alias.scope !208
  %1746 = shl i64 %1741, 1
  %1747 = and i64 %1746, 8589934588
  %1748 = icmp eq i64 %1747, 0
  br i1 %1748, label %1753, label %1749

1749:                                             ; preds = %1735
  %1750 = load i8*, i8** %1731, align 8, !alias.scope !208
  %1751 = load i8*, i8** %1706, align 8, !noalias !208
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1750, i8* align 1 %1751, i64 %1747, i1 false) #12
  %1752 = load i64, i64* %1705, align 8, !noalias !208
  br label %1753

1753:                                             ; preds = %1749, %1735
  %1754 = phi i64 [ %1741, %1735 ], [ %1752, %1749 ]
  %1755 = and i64 %1754, -4294967295
  store i64 %1755, i64* %1705, align 8, !noalias !208
  br label %1756

1756:                                             ; preds = %1753, %1733
  %1757 = phi i64 [ %1734, %1733 ], [ %1755, %1753 ]
  %1758 = and i64 %1757, 1
  %1759 = icmp eq i64 %1758, 0
  br i1 %1759, label %1787, label %1760

1760:                                             ; preds = %1756
  %1761 = load i8*, i8** %1706, align 8, !noalias !208
  call void @_Z7sk_freePv(i8* %1761) #12
  br label %1787

1762:                                             ; preds = %1762, %1719
  %1763 = phi i64 [ 0, %1719 ], [ %1785, %1762 ]
  %1764 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1720, align 8
  %1765 = load i64, i64* %1691, align 8
  %1766 = and i64 %1765, 4294967294
  %1767 = icmp eq i64 %1766, 2
  %1768 = load i32*, i32** %1723, align 16
  %1769 = shl i64 %1763, 32
  %1770 = ashr exact i64 %1769, 32
  %1771 = select i1 %1767, i64 0, i64 %1770
  %1772 = getelementptr inbounds i32, i32* %1768, i64 %1771
  %1773 = load i32, i32* %1772, align 4
  %1774 = load i64, i64* %1696, align 8
  %1775 = and i64 %1774, 4294967294
  %1776 = icmp eq i64 %1775, 2
  %1777 = load i32*, i32** %1725, align 16
  %1778 = select i1 %1776, i64 0, i64 %1770
  %1779 = getelementptr inbounds i32, i32* %1777, i64 %1778
  %1780 = load i32, i32* %1779, align 4
  %1781 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1764, %"class.skvm::Builder"* %1764, i32 %1773, %"class.skvm::Builder"* %1764, i32 %1780) #12
  %1782 = extractvalue { %"class.skvm::Builder"*, i32 } %1781, 1
  %1783 = load i32*, i32** %1721, align 8, !noalias !208
  %1784 = getelementptr inbounds i32, i32* %1783, i64 %1770
  store i32 %1782, i32* %1784, align 4
  %1785 = add nuw nsw i64 %1763, 1
  %1786 = icmp ult i64 %1785, %1701
  br i1 %1786, label %1762, label %1726

1787:                                             ; preds = %1756, %1760
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1702) #12, !noalias !208
  br label %5485

1788:                                             ; preds = %343
  %1789 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1790 = bitcast i8* %1789 to i64*
  %1791 = load i64, i64* %1790, align 8, !noalias !211
  %1792 = lshr i64 %1791, 1
  %1793 = and i64 %1792, 2147483647
  %1794 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %1795 = bitcast i8* %1794 to i64*
  %1796 = load i64, i64* %1795, align 8, !noalias !211
  %1797 = lshr i64 %1796, 1
  %1798 = and i64 %1797, 2147483647
  %1799 = icmp ult i64 %1793, %1798
  %1800 = select i1 %1799, i64 %1798, i64 %1793
  %1801 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1801) #12, !noalias !211
  %1802 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 16
  %1803 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %28, i64 0, i32 0, i32 0, i32 0, i64 24
  %1804 = bitcast i8* %1803 to i64*
  %1805 = bitcast i8* %1802 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1801, i8 -86, i64 16, i1 false) #12, !noalias !211
  store i8* %1801, i8** %1805, align 8, !noalias !211
  store i64 34359738368, i64* %1804, align 8, !noalias !211
  %1806 = trunc i64 %1800 to i32
  %1807 = icmp eq i32 %1806, 0
  br i1 %1807, label %1816, label %1808

1808:                                             ; preds = %1788
  %1809 = bitcast i8* %1802 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1809, i32 %1806, i32 1) #12
  %1810 = load i64, i64* %1804, align 8, !noalias !211
  %1811 = shl nuw nsw i64 %1800, 1
  %1812 = add i64 %1810, %1811
  %1813 = and i64 %1812, 4294967294
  %1814 = and i64 %1810, -4294967295
  %1815 = or i64 %1813, %1814
  store i64 %1815, i64* %1804, align 8, !noalias !211
  br label %1816

1816:                                             ; preds = %1808, %1788
  %1817 = icmp eq i64 %1800, 0
  br i1 %1817, label %1825, label %1818

1818:                                             ; preds = %1816
  %1819 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1820 = bitcast i8* %1802 to i32**
  %1821 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1822 = bitcast i8* %1821 to i32**
  %1823 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %1824 = bitcast i8* %1823 to i32**
  br label %1861

1825:                                             ; preds = %1861, %1816
  %1826 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1827 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1828 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1829 = bitcast i8* %1828 to i64*
  %1830 = bitcast i8* %1826 to i8**
  store i8* %1827, i8** %1830, align 8, !alias.scope !211
  store i64 34359738368, i64* %1829, align 8, !alias.scope !211
  %1831 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %28, %0
  br i1 %1831, label %1832, label %1834

1832:                                             ; preds = %1825
  %1833 = load i64, i64* %1804, align 8, !noalias !211
  br label %1855

1834:                                             ; preds = %1825
  %1835 = bitcast i8* %1826 to %class.SkTArray*
  store i64 34359738368, i64* %1829, align 8, !alias.scope !211
  %1836 = load i64, i64* %1804, align 8, !noalias !211
  %1837 = lshr i64 %1836, 1
  %1838 = trunc i64 %1837 to i32
  %1839 = and i32 %1838, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1835, i32 %1839, i32 0) #12
  %1840 = load i64, i64* %1804, align 8, !noalias !211
  %1841 = and i64 %1840, 4294967294
  %1842 = load i64, i64* %1829, align 8, !alias.scope !211
  %1843 = and i64 %1842, -4294967295
  %1844 = or i64 %1843, %1841
  store i64 %1844, i64* %1829, align 8, !alias.scope !211
  %1845 = shl i64 %1840, 1
  %1846 = and i64 %1845, 8589934588
  %1847 = icmp eq i64 %1846, 0
  br i1 %1847, label %1852, label %1848

1848:                                             ; preds = %1834
  %1849 = load i8*, i8** %1830, align 8, !alias.scope !211
  %1850 = load i8*, i8** %1805, align 8, !noalias !211
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1849, i8* align 1 %1850, i64 %1846, i1 false) #12
  %1851 = load i64, i64* %1804, align 8, !noalias !211
  br label %1852

1852:                                             ; preds = %1848, %1834
  %1853 = phi i64 [ %1840, %1834 ], [ %1851, %1848 ]
  %1854 = and i64 %1853, -4294967295
  store i64 %1854, i64* %1804, align 8, !noalias !211
  br label %1855

1855:                                             ; preds = %1852, %1832
  %1856 = phi i64 [ %1833, %1832 ], [ %1854, %1852 ]
  %1857 = and i64 %1856, 1
  %1858 = icmp eq i64 %1857, 0
  br i1 %1858, label %1886, label %1859

1859:                                             ; preds = %1855
  %1860 = load i8*, i8** %1805, align 8, !noalias !211
  call void @_Z7sk_freePv(i8* %1860) #12
  br label %1886

1861:                                             ; preds = %1861, %1818
  %1862 = phi i64 [ 0, %1818 ], [ %1884, %1861 ]
  %1863 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1819, align 8
  %1864 = load i64, i64* %1790, align 8
  %1865 = and i64 %1864, 4294967294
  %1866 = icmp eq i64 %1865, 2
  %1867 = load i32*, i32** %1822, align 16
  %1868 = shl i64 %1862, 32
  %1869 = ashr exact i64 %1868, 32
  %1870 = select i1 %1866, i64 0, i64 %1869
  %1871 = getelementptr inbounds i32, i32* %1867, i64 %1870
  %1872 = load i32, i32* %1871, align 4
  %1873 = load i64, i64* %1795, align 8
  %1874 = and i64 %1873, 4294967294
  %1875 = icmp eq i64 %1874, 2
  %1876 = load i32*, i32** %1824, align 16
  %1877 = select i1 %1875, i64 0, i64 %1869
  %1878 = getelementptr inbounds i32, i32* %1876, i64 %1877
  %1879 = load i32, i32* %1878, align 4
  %1880 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1863, %"class.skvm::Builder"* %1863, i32 %1872, %"class.skvm::Builder"* %1863, i32 %1879) #12
  %1881 = extractvalue { %"class.skvm::Builder"*, i32 } %1880, 1
  %1882 = load i32*, i32** %1820, align 8, !noalias !211
  %1883 = getelementptr inbounds i32, i32* %1882, i64 %1869
  store i32 %1881, i32* %1883, align 4
  %1884 = add nuw nsw i64 %1862, 1
  %1885 = icmp ult i64 %1884, %1800
  br i1 %1885, label %1861, label %1825

1886:                                             ; preds = %1855, %1859
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1801) #12, !noalias !211
  br label %5485

1887:                                             ; preds = %343
  %1888 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1889 = bitcast i8* %1888 to i64*
  %1890 = load i64, i64* %1889, align 8, !noalias !214
  %1891 = lshr i64 %1890, 1
  %1892 = and i64 %1891, 2147483647
  %1893 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %1894 = bitcast i8* %1893 to i64*
  %1895 = load i64, i64* %1894, align 8, !noalias !214
  %1896 = lshr i64 %1895, 1
  %1897 = and i64 %1896, 2147483647
  %1898 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %1899 = bitcast i8* %1898 to i64*
  %1900 = load i64, i64* %1899, align 8, !noalias !214
  %1901 = lshr i64 %1900, 1
  %1902 = and i64 %1901, 2147483647
  %1903 = icmp ult i64 %1892, %1897
  %1904 = select i1 %1903, i64 %1897, i64 %1892
  %1905 = icmp ult i64 %1904, %1902
  %1906 = select i1 %1905, i64 %1902, i64 %1904
  %1907 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1907) #12, !noalias !214
  %1908 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 16
  %1909 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %27, i64 0, i32 0, i32 0, i32 0, i64 24
  %1910 = bitcast i8* %1909 to i64*
  %1911 = bitcast i8* %1908 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1907, i8 -86, i64 16, i1 false) #12, !noalias !214
  store i8* %1907, i8** %1911, align 8, !noalias !214
  store i64 34359738368, i64* %1910, align 8, !noalias !214
  %1912 = trunc i64 %1906 to i32
  %1913 = icmp eq i32 %1912, 0
  br i1 %1913, label %1922, label %1914

1914:                                             ; preds = %1887
  %1915 = bitcast i8* %1908 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1915, i32 %1912, i32 1) #12
  %1916 = load i64, i64* %1910, align 8, !noalias !214
  %1917 = shl nuw nsw i64 %1906, 1
  %1918 = add i64 %1916, %1917
  %1919 = and i64 %1918, 4294967294
  %1920 = and i64 %1916, -4294967295
  %1921 = or i64 %1919, %1920
  store i64 %1921, i64* %1910, align 8, !noalias !214
  br label %1922

1922:                                             ; preds = %1887, %1914
  %1923 = icmp eq i64 %1906, 0
  br i1 %1923, label %1933, label %1924

1924:                                             ; preds = %1922
  %1925 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %1926 = bitcast i8* %1908 to i32**
  %1927 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1928 = bitcast i8* %1927 to i32**
  %1929 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %1930 = bitcast i8* %1929 to i32**
  %1931 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %1932 = bitcast i8* %1931 to i32**
  br label %1969

1933:                                             ; preds = %1969, %1922
  %1934 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %1935 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1936 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %1937 = bitcast i8* %1936 to i64*
  %1938 = bitcast i8* %1934 to i8**
  store i8* %1935, i8** %1938, align 8, !alias.scope !214
  store i64 34359738368, i64* %1937, align 8, !alias.scope !214
  %1939 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %27, %0
  br i1 %1939, label %1940, label %1942

1940:                                             ; preds = %1933
  %1941 = load i64, i64* %1910, align 8, !noalias !214
  br label %1963

1942:                                             ; preds = %1933
  %1943 = bitcast i8* %1934 to %class.SkTArray*
  store i64 34359738368, i64* %1937, align 8, !alias.scope !214
  %1944 = load i64, i64* %1910, align 8, !noalias !214
  %1945 = lshr i64 %1944, 1
  %1946 = trunc i64 %1945 to i32
  %1947 = and i32 %1946, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %1943, i32 %1947, i32 0) #12
  %1948 = load i64, i64* %1910, align 8, !noalias !214
  %1949 = and i64 %1948, 4294967294
  %1950 = load i64, i64* %1937, align 8, !alias.scope !214
  %1951 = and i64 %1950, -4294967295
  %1952 = or i64 %1951, %1949
  store i64 %1952, i64* %1937, align 8, !alias.scope !214
  %1953 = shl i64 %1948, 1
  %1954 = and i64 %1953, 8589934588
  %1955 = icmp eq i64 %1954, 0
  br i1 %1955, label %1960, label %1956

1956:                                             ; preds = %1942
  %1957 = load i8*, i8** %1938, align 8, !alias.scope !214
  %1958 = load i8*, i8** %1911, align 8, !noalias !214
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1957, i8* align 1 %1958, i64 %1954, i1 false) #12
  %1959 = load i64, i64* %1910, align 8, !noalias !214
  br label %1960

1960:                                             ; preds = %1956, %1942
  %1961 = phi i64 [ %1948, %1942 ], [ %1959, %1956 ]
  %1962 = and i64 %1961, -4294967295
  store i64 %1962, i64* %1910, align 8, !noalias !214
  br label %1963

1963:                                             ; preds = %1960, %1940
  %1964 = phi i64 [ %1941, %1940 ], [ %1962, %1960 ]
  %1965 = and i64 %1964, 1
  %1966 = icmp eq i64 %1965, 0
  br i1 %1966, label %2004, label %1967

1967:                                             ; preds = %1963
  %1968 = load i8*, i8** %1911, align 8, !noalias !214
  call void @_Z7sk_freePv(i8* %1968) #12
  br label %2004

1969:                                             ; preds = %1969, %1924
  %1970 = phi i64 [ 0, %1924 ], [ %2002, %1969 ]
  %1971 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %1925, align 8
  %1972 = load i64, i64* %1889, align 8
  %1973 = and i64 %1972, 4294967294
  %1974 = icmp eq i64 %1973, 2
  %1975 = load i32*, i32** %1928, align 16
  %1976 = shl i64 %1970, 32
  %1977 = ashr exact i64 %1976, 32
  %1978 = select i1 %1974, i64 0, i64 %1977
  %1979 = getelementptr inbounds i32, i32* %1975, i64 %1978
  %1980 = load i32, i32* %1979, align 4
  %1981 = load i64, i64* %1894, align 8
  %1982 = and i64 %1981, 4294967294
  %1983 = icmp eq i64 %1982, 2
  %1984 = load i32*, i32** %1930, align 16
  %1985 = select i1 %1983, i64 0, i64 %1977
  %1986 = getelementptr inbounds i32, i32* %1984, i64 %1985
  %1987 = load i32, i32* %1986, align 4
  %1988 = load i64, i64* %1899, align 8
  %1989 = and i64 %1988, 4294967294
  %1990 = icmp eq i64 %1989, 2
  %1991 = load i32*, i32** %1932, align 16
  %1992 = select i1 %1990, i64 0, i64 %1977
  %1993 = getelementptr inbounds i32, i32* %1991, i64 %1992
  %1994 = load i32, i32* %1993, align 4
  %1995 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1971, %"class.skvm::Builder"* %1971, i32 %1980, %"class.skvm::Builder"* %1971, i32 %1994) #12
  %1996 = extractvalue { %"class.skvm::Builder"*, i32 } %1995, 0
  %1997 = extractvalue { %"class.skvm::Builder"*, i32 } %1995, 1
  %1998 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1971, %"class.skvm::Builder"* %1971, i32 %1987, %"class.skvm::Builder"* %1996, i32 %1997) #12
  %1999 = extractvalue { %"class.skvm::Builder"*, i32 } %1998, 1
  %2000 = load i32*, i32** %1926, align 8, !noalias !214
  %2001 = getelementptr inbounds i32, i32* %2000, i64 %1977
  store i32 %1999, i32* %2001, align 4
  %2002 = add nuw nsw i64 %1970, 1
  %2003 = icmp eq i64 %2002, %1906
  br i1 %2003, label %1933, label %1969

2004:                                             ; preds = %1963, %1967
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1907) #12, !noalias !214
  br label %5485

2005:                                             ; preds = %343
  %2006 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2007 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2008 = bitcast i8* %2007 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2006, i8 -86, i64 16, i1 false) #12, !alias.scope !217
  %2009 = load i64, i64* %2008, align 8, !noalias !217
  %2010 = lshr i64 %2009, 1
  %2011 = and i64 %2010, 2147483647
  %2012 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2013 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2014 = bitcast i8* %2013 to i64*
  %2015 = bitcast i8* %2012 to i8**
  store i8* %2006, i8** %2015, align 8, !alias.scope !217
  store i64 34359738368, i64* %2014, align 8, !alias.scope !217
  %2016 = trunc i64 %2011 to i32
  %2017 = icmp eq i32 %2016, 0
  br i1 %2017, label %2027, label %2018

2018:                                             ; preds = %2005
  %2019 = bitcast i8* %2012 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2019, i32 %2016, i32 1) #12
  %2020 = load i64, i64* %2014, align 8, !alias.scope !217
  %2021 = shl nuw nsw i64 %2011, 1
  %2022 = add i64 %2020, %2021
  %2023 = and i64 %2022, 4294967294
  %2024 = and i64 %2020, -4294967295
  %2025 = or i64 %2023, %2024
  store i64 %2025, i64* %2014, align 8, !alias.scope !217
  %2026 = load i64, i64* %2008, align 8, !noalias !217
  br label %2027

2027:                                             ; preds = %2018, %2005
  %2028 = phi i64 [ %2009, %2005 ], [ %2026, %2018 ]
  %2029 = and i64 %2028, 4294967294
  %2030 = icmp eq i64 %2029, 0
  br i1 %2030, label %5485, label %2031

2031:                                             ; preds = %2027
  %2032 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2033 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2034 = bitcast i8* %2033 to i32**
  %2035 = bitcast i8* %2012 to i32**
  br label %2036

2036:                                             ; preds = %2036, %2031
  %2037 = phi i64 [ 0, %2031 ], [ %2057, %2036 ]
  %2038 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2032, align 8, !noalias !217
  %2039 = load i32*, i32** %2034, align 16, !noalias !217
  %2040 = shl i64 %2037, 32
  %2041 = ashr exact i64 %2040, 32
  %2042 = getelementptr inbounds i32, i32* %2039, i64 %2041
  %2043 = load i32, i32* %2042, align 4
  %2044 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2038, i32 0) #12
  %2045 = extractvalue { %"class.skvm::Builder"*, i32 } %2044, 0
  %2046 = extractvalue { %"class.skvm::Builder"*, i32 } %2044, 1
  %2047 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2038, i32 1065353216) #12
  %2048 = extractvalue { %"class.skvm::Builder"*, i32 } %2047, 0
  %2049 = extractvalue { %"class.skvm::Builder"*, i32 } %2047, 1
  %2050 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %2038, %"class.skvm::Builder"* %2038, i32 %2043, %"class.skvm::Builder"* %2048, i32 %2049) #12
  %2051 = extractvalue { %"class.skvm::Builder"*, i32 } %2050, 0
  %2052 = extractvalue { %"class.skvm::Builder"*, i32 } %2050, 1
  %2053 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %2038, %"class.skvm::Builder"* %2045, i32 %2046, %"class.skvm::Builder"* %2051, i32 %2052) #12
  %2054 = extractvalue { %"class.skvm::Builder"*, i32 } %2053, 1
  %2055 = load i32*, i32** %2035, align 8, !alias.scope !217
  %2056 = getelementptr inbounds i32, i32* %2055, i64 %2041
  store i32 %2054, i32* %2056, align 4
  %2057 = add nuw nsw i64 %2037, 1
  %2058 = load i64, i64* %2008, align 8, !noalias !217
  %2059 = lshr i64 %2058, 1
  %2060 = and i64 %2059, 2147483647
  %2061 = icmp ult i64 %2057, %2060
  br i1 %2061, label %2036, label %5485

2062:                                             ; preds = %343
  %2063 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2064 = bitcast i8* %2063 to i64*
  %2065 = load i64, i64* %2064, align 8, !noalias !220
  %2066 = lshr i64 %2065, 1
  %2067 = and i64 %2066, 2147483647
  %2068 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %2069 = bitcast i8* %2068 to i64*
  %2070 = load i64, i64* %2069, align 8, !noalias !220
  %2071 = lshr i64 %2070, 1
  %2072 = and i64 %2071, 2147483647
  %2073 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %2074 = bitcast i8* %2073 to i64*
  %2075 = load i64, i64* %2074, align 8, !noalias !220
  %2076 = lshr i64 %2075, 1
  %2077 = and i64 %2076, 2147483647
  %2078 = icmp ult i64 %2067, %2072
  %2079 = select i1 %2078, i64 %2072, i64 %2067
  %2080 = icmp ult i64 %2079, %2077
  %2081 = select i1 %2080, i64 %2077, i64 %2079
  %2082 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2082) #12, !noalias !220
  %2083 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 16
  %2084 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %26, i64 0, i32 0, i32 0, i32 0, i64 24
  %2085 = bitcast i8* %2084 to i64*
  %2086 = bitcast i8* %2083 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2082, i8 -86, i64 16, i1 false) #12, !noalias !220
  store i8* %2082, i8** %2086, align 8, !noalias !220
  store i64 34359738368, i64* %2085, align 8, !noalias !220
  %2087 = trunc i64 %2081 to i32
  %2088 = icmp eq i32 %2087, 0
  br i1 %2088, label %2097, label %2089

2089:                                             ; preds = %2062
  %2090 = bitcast i8* %2083 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2090, i32 %2087, i32 1) #12
  %2091 = load i64, i64* %2085, align 8, !noalias !220
  %2092 = shl nuw nsw i64 %2081, 1
  %2093 = add i64 %2091, %2092
  %2094 = and i64 %2093, 4294967294
  %2095 = and i64 %2091, -4294967295
  %2096 = or i64 %2094, %2095
  store i64 %2096, i64* %2085, align 8, !noalias !220
  br label %2097

2097:                                             ; preds = %2062, %2089
  %2098 = icmp eq i64 %2081, 0
  br i1 %2098, label %2111, label %2099

2099:                                             ; preds = %2097
  %2100 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2101 = bitcast %"struct.skvm::F32"* %25 to i8*
  %2102 = bitcast %"struct.skvm::F32"* %25 to i64*
  %2103 = getelementptr inbounds %"struct.skvm::F32", %"struct.skvm::F32"* %25, i64 0, i32 1
  %2104 = bitcast i8* %2083 to i32**
  %2105 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2106 = bitcast i8* %2105 to i32**
  %2107 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2108 = bitcast i8* %2107 to i32**
  %2109 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %2110 = bitcast i8* %2109 to i32**
  br label %2147

2111:                                             ; preds = %2147, %2097
  %2112 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2113 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2114 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2115 = bitcast i8* %2114 to i64*
  %2116 = bitcast i8* %2112 to i8**
  store i8* %2113, i8** %2116, align 8, !alias.scope !220
  store i64 34359738368, i64* %2115, align 8, !alias.scope !220
  %2117 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %26, %0
  br i1 %2117, label %2118, label %2120

2118:                                             ; preds = %2111
  %2119 = load i64, i64* %2085, align 8, !noalias !220
  br label %2141

2120:                                             ; preds = %2111
  %2121 = bitcast i8* %2112 to %class.SkTArray*
  store i64 34359738368, i64* %2115, align 8, !alias.scope !220
  %2122 = load i64, i64* %2085, align 8, !noalias !220
  %2123 = lshr i64 %2122, 1
  %2124 = trunc i64 %2123 to i32
  %2125 = and i32 %2124, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2121, i32 %2125, i32 0) #12
  %2126 = load i64, i64* %2085, align 8, !noalias !220
  %2127 = and i64 %2126, 4294967294
  %2128 = load i64, i64* %2115, align 8, !alias.scope !220
  %2129 = and i64 %2128, -4294967295
  %2130 = or i64 %2129, %2127
  store i64 %2130, i64* %2115, align 8, !alias.scope !220
  %2131 = shl i64 %2126, 1
  %2132 = and i64 %2131, 8589934588
  %2133 = icmp eq i64 %2132, 0
  br i1 %2133, label %2138, label %2134

2134:                                             ; preds = %2120
  %2135 = load i8*, i8** %2116, align 8, !alias.scope !220
  %2136 = load i8*, i8** %2086, align 8, !noalias !220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2135, i8* align 1 %2136, i64 %2132, i1 false) #12
  %2137 = load i64, i64* %2085, align 8, !noalias !220
  br label %2138

2138:                                             ; preds = %2134, %2120
  %2139 = phi i64 [ %2126, %2120 ], [ %2137, %2134 ]
  %2140 = and i64 %2139, -4294967295
  store i64 %2140, i64* %2085, align 8, !noalias !220
  br label %2141

2141:                                             ; preds = %2138, %2118
  %2142 = phi i64 [ %2119, %2118 ], [ %2140, %2138 ]
  %2143 = and i64 %2142, 1
  %2144 = icmp eq i64 %2143, 0
  br i1 %2144, label %2180, label %2145

2145:                                             ; preds = %2141
  %2146 = load i8*, i8** %2086, align 8, !noalias !220
  call void @_Z7sk_freePv(i8* %2146) #12
  br label %2180

2147:                                             ; preds = %2147, %2099
  %2148 = phi i64 [ 0, %2099 ], [ %2178, %2147 ]
  %2149 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2100, align 8
  %2150 = load i64, i64* %2064, align 8
  %2151 = and i64 %2150, 4294967294
  %2152 = icmp eq i64 %2151, 2
  %2153 = load i32*, i32** %2106, align 16
  %2154 = shl i64 %2148, 32
  %2155 = ashr exact i64 %2154, 32
  %2156 = select i1 %2152, i64 0, i64 %2155
  %2157 = getelementptr inbounds i32, i32* %2153, i64 %2156
  %2158 = load i32, i32* %2157, align 4
  %2159 = load i64, i64* %2069, align 8
  %2160 = and i64 %2159, 4294967294
  %2161 = icmp eq i64 %2160, 2
  %2162 = load i32*, i32** %2108, align 16
  %2163 = select i1 %2161, i64 0, i64 %2155
  %2164 = getelementptr inbounds i32, i32* %2162, i64 %2163
  %2165 = load i32, i32* %2164, align 4
  %2166 = ptrtoint %"class.skvm::Builder"* %2149 to i64
  %2167 = load i64, i64* %2074, align 8
  %2168 = and i64 %2167, 4294967294
  %2169 = icmp eq i64 %2168, 2
  %2170 = load i32*, i32** %2110, align 16
  %2171 = select i1 %2169, i64 0, i64 %2155
  %2172 = getelementptr inbounds i32, i32* %2170, i64 %2171
  %2173 = load i32, i32* %2172, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2101) #12, !noalias !220
  store i64 %2166, i64* %2102, align 8, !noalias !220
  store i32 %2173, i32* %2103, align 8, !noalias !220
  %2174 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4lerpENS_3F32ES1_S1_(%"class.skvm::Builder"* %2149, %"class.skvm::Builder"* %2149, i32 %2158, %"class.skvm::Builder"* %2149, i32 %2165, %"struct.skvm::F32"* nonnull byval(%"struct.skvm::F32") align 8 %25) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2101) #12, !noalias !220
  %2175 = extractvalue { %"class.skvm::Builder"*, i32 } %2174, 1
  %2176 = load i32*, i32** %2104, align 8, !noalias !220
  %2177 = getelementptr inbounds i32, i32* %2176, i64 %2155
  store i32 %2175, i32* %2177, align 4
  %2178 = add nuw nsw i64 %2148, 1
  %2179 = icmp eq i64 %2178, %2081
  br i1 %2179, label %2111, label %2147

2180:                                             ; preds = %2141, %2145
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2082) #12, !noalias !220
  br label %5485

2181:                                             ; preds = %343
  %2182 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2183 = bitcast i8* %2182 to i64*
  %2184 = load i64, i64* %2183, align 8, !noalias !223
  %2185 = lshr i64 %2184, 1
  %2186 = and i64 %2185, 2147483647
  %2187 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %2188 = bitcast i8* %2187 to i64*
  %2189 = load i64, i64* %2188, align 8, !noalias !223
  %2190 = lshr i64 %2189, 1
  %2191 = and i64 %2190, 2147483647
  %2192 = icmp ult i64 %2186, %2191
  %2193 = select i1 %2192, i64 %2191, i64 %2186
  %2194 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2194) #12, !noalias !223
  %2195 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 16
  %2196 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %24, i64 0, i32 0, i32 0, i32 0, i64 24
  %2197 = bitcast i8* %2196 to i64*
  %2198 = bitcast i8* %2195 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2194, i8 -86, i64 16, i1 false) #12, !noalias !223
  store i8* %2194, i8** %2198, align 8, !noalias !223
  store i64 34359738368, i64* %2197, align 8, !noalias !223
  %2199 = trunc i64 %2193 to i32
  %2200 = icmp eq i32 %2199, 0
  br i1 %2200, label %2209, label %2201

2201:                                             ; preds = %2181
  %2202 = bitcast i8* %2195 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2202, i32 %2199, i32 1) #12
  %2203 = load i64, i64* %2197, align 8, !noalias !223
  %2204 = shl nuw nsw i64 %2193, 1
  %2205 = add i64 %2203, %2204
  %2206 = and i64 %2205, 4294967294
  %2207 = and i64 %2203, -4294967295
  %2208 = or i64 %2206, %2207
  store i64 %2208, i64* %2197, align 8, !noalias !223
  br label %2209

2209:                                             ; preds = %2201, %2181
  %2210 = icmp eq i64 %2193, 0
  br i1 %2210, label %2222, label %2211

2211:                                             ; preds = %2209
  %2212 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2213 = bitcast { %"class.skvm::Builder"*, i32 }* %23 to i8*
  %2214 = bitcast { %"class.skvm::Builder"*, i32 }* %23 to %"struct.skvm::I32"*
  %2215 = bitcast { %"class.skvm::Builder"*, i32 }* %23 to i64*
  %2216 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %23, i64 0, i32 1
  %2217 = bitcast i8* %2195 to i32**
  %2218 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2219 = bitcast i8* %2218 to i32**
  %2220 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2221 = bitcast i8* %2220 to i32**
  br label %2258

2222:                                             ; preds = %2258, %2209
  %2223 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2224 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2225 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2226 = bitcast i8* %2225 to i64*
  %2227 = bitcast i8* %2223 to i8**
  store i8* %2224, i8** %2227, align 8, !alias.scope !223
  store i64 34359738368, i64* %2226, align 8, !alias.scope !223
  %2228 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %24, %0
  br i1 %2228, label %2229, label %2231

2229:                                             ; preds = %2222
  %2230 = load i64, i64* %2197, align 8, !noalias !223
  br label %2252

2231:                                             ; preds = %2222
  %2232 = bitcast i8* %2223 to %class.SkTArray*
  store i64 34359738368, i64* %2226, align 8, !alias.scope !223
  %2233 = load i64, i64* %2197, align 8, !noalias !223
  %2234 = lshr i64 %2233, 1
  %2235 = trunc i64 %2234 to i32
  %2236 = and i32 %2235, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2232, i32 %2236, i32 0) #12
  %2237 = load i64, i64* %2197, align 8, !noalias !223
  %2238 = and i64 %2237, 4294967294
  %2239 = load i64, i64* %2226, align 8, !alias.scope !223
  %2240 = and i64 %2239, -4294967295
  %2241 = or i64 %2240, %2238
  store i64 %2241, i64* %2226, align 8, !alias.scope !223
  %2242 = shl i64 %2237, 1
  %2243 = and i64 %2242, 8589934588
  %2244 = icmp eq i64 %2243, 0
  br i1 %2244, label %2249, label %2245

2245:                                             ; preds = %2231
  %2246 = load i8*, i8** %2227, align 8, !alias.scope !223
  %2247 = load i8*, i8** %2198, align 8, !noalias !223
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2246, i8* align 1 %2247, i64 %2243, i1 false) #12
  %2248 = load i64, i64* %2197, align 8, !noalias !223
  br label %2249

2249:                                             ; preds = %2245, %2231
  %2250 = phi i64 [ %2237, %2231 ], [ %2248, %2245 ]
  %2251 = and i64 %2250, -4294967295
  store i64 %2251, i64* %2197, align 8, !noalias !223
  br label %2252

2252:                                             ; preds = %2249, %2229
  %2253 = phi i64 [ %2230, %2229 ], [ %2251, %2249 ]
  %2254 = and i64 %2253, 1
  %2255 = icmp eq i64 %2254, 0
  br i1 %2255, label %2293, label %2256

2256:                                             ; preds = %2252
  %2257 = load i8*, i8** %2198, align 8, !noalias !223
  call void @_Z7sk_freePv(i8* %2257) #12
  br label %2293

2258:                                             ; preds = %2258, %2211
  %2259 = phi i64 [ 0, %2211 ], [ %2291, %2258 ]
  %2260 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2212, align 8
  %2261 = load i64, i64* %2183, align 8
  %2262 = and i64 %2261, 4294967294
  %2263 = icmp eq i64 %2262, 2
  %2264 = load i32*, i32** %2219, align 16
  %2265 = shl i64 %2259, 32
  %2266 = ashr exact i64 %2265, 32
  %2267 = select i1 %2263, i64 0, i64 %2266
  %2268 = getelementptr inbounds i32, i32* %2264, i64 %2267
  %2269 = load i32, i32* %2268, align 4
  %2270 = load i64, i64* %2188, align 8
  %2271 = and i64 %2270, 4294967294
  %2272 = icmp eq i64 %2271, 2
  %2273 = load i32*, i32** %2221, align 16
  %2274 = select i1 %2272, i64 0, i64 %2266
  %2275 = getelementptr inbounds i32, i32* %2273, i64 %2274
  %2276 = load i32, i32* %2275, align 4
  %2277 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %2260, %"class.skvm::Builder"* %2260, i32 %2276, %"class.skvm::Builder"* %2260, i32 %2269) #12
  %2278 = extractvalue { %"class.skvm::Builder"*, i32 } %2277, 0
  %2279 = extractvalue { %"class.skvm::Builder"*, i32 } %2277, 1
  %2280 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2278, i32 0) #12
  %2281 = extractvalue { %"class.skvm::Builder"*, i32 } %2280, 0
  %2282 = extractvalue { %"class.skvm::Builder"*, i32 } %2280, 1
  %2283 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2278, i32 1065353216) #12
  %2284 = extractvalue { %"class.skvm::Builder"*, i32 } %2283, 0
  %2285 = extractvalue { %"class.skvm::Builder"*, i32 } %2283, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2213) #12, !noalias !223
  %2286 = ptrtoint %"class.skvm::Builder"* %2284 to i64
  store i64 %2286, i64* %2215, align 8, !noalias !223
  store i32 %2285, i32* %2216, align 8, !noalias !223
  %2287 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %2278, %"class.skvm::Builder"* %2278, i32 %2279, %"class.skvm::Builder"* %2281, i32 %2282, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %2214) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2213) #12, !noalias !223
  %2288 = extractvalue { %"class.skvm::Builder"*, i32 } %2287, 1
  %2289 = load i32*, i32** %2217, align 8, !noalias !223
  %2290 = getelementptr inbounds i32, i32* %2289, i64 %2266
  store i32 %2288, i32* %2290, align 4
  %2291 = add nuw nsw i64 %2259, 1
  %2292 = icmp ult i64 %2291, %2193
  br i1 %2292, label %2258, label %2222

2293:                                             ; preds = %2252, %2256
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2194) #12, !noalias !223
  br label %5485

2294:                                             ; preds = %343
  %2295 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2296 = bitcast i8* %2295 to i64*
  %2297 = load i64, i64* %2296, align 8, !noalias !226
  %2298 = lshr i64 %2297, 1
  %2299 = and i64 %2298, 2147483647
  %2300 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %2301 = bitcast i8* %2300 to i64*
  %2302 = load i64, i64* %2301, align 8, !noalias !226
  %2303 = lshr i64 %2302, 1
  %2304 = and i64 %2303, 2147483647
  %2305 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %2306 = bitcast i8* %2305 to i64*
  %2307 = load i64, i64* %2306, align 8, !noalias !226
  %2308 = lshr i64 %2307, 1
  %2309 = and i64 %2308, 2147483647
  %2310 = icmp ult i64 %2299, %2304
  %2311 = select i1 %2310, i64 %2304, i64 %2299
  %2312 = icmp ult i64 %2311, %2309
  %2313 = select i1 %2312, i64 %2309, i64 %2311
  %2314 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2314) #12, !noalias !226
  %2315 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 16
  %2316 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %22, i64 0, i32 0, i32 0, i32 0, i64 24
  %2317 = bitcast i8* %2316 to i64*
  %2318 = bitcast i8* %2315 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2314, i8 -86, i64 16, i1 false) #12, !noalias !226
  store i8* %2314, i8** %2318, align 8, !noalias !226
  store i64 34359738368, i64* %2317, align 8, !noalias !226
  %2319 = trunc i64 %2313 to i32
  %2320 = icmp eq i32 %2319, 0
  br i1 %2320, label %2329, label %2321

2321:                                             ; preds = %2294
  %2322 = bitcast i8* %2315 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2322, i32 %2319, i32 1) #12
  %2323 = load i64, i64* %2317, align 8, !noalias !226
  %2324 = shl nuw nsw i64 %2313, 1
  %2325 = add i64 %2323, %2324
  %2326 = and i64 %2325, 4294967294
  %2327 = and i64 %2323, -4294967295
  %2328 = or i64 %2326, %2327
  store i64 %2328, i64* %2317, align 8, !noalias !226
  br label %2329

2329:                                             ; preds = %2294, %2321
  %2330 = icmp eq i64 %2313, 0
  br i1 %2330, label %2340, label %2331

2331:                                             ; preds = %2329
  %2332 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2333 = bitcast i8* %2315 to i32**
  %2334 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2335 = bitcast i8* %2334 to i32**
  %2336 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2337 = bitcast i8* %2336 to i32**
  %2338 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %2339 = bitcast i8* %2338 to i32**
  br label %2376

2340:                                             ; preds = %2376, %2329
  %2341 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2342 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2343 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2344 = bitcast i8* %2343 to i64*
  %2345 = bitcast i8* %2341 to i8**
  store i8* %2342, i8** %2345, align 8, !alias.scope !226
  store i64 34359738368, i64* %2344, align 8, !alias.scope !226
  %2346 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %22, %0
  br i1 %2346, label %2347, label %2349

2347:                                             ; preds = %2340
  %2348 = load i64, i64* %2317, align 8, !noalias !226
  br label %2370

2349:                                             ; preds = %2340
  %2350 = bitcast i8* %2341 to %class.SkTArray*
  store i64 34359738368, i64* %2344, align 8, !alias.scope !226
  %2351 = load i64, i64* %2317, align 8, !noalias !226
  %2352 = lshr i64 %2351, 1
  %2353 = trunc i64 %2352 to i32
  %2354 = and i32 %2353, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2350, i32 %2354, i32 0) #12
  %2355 = load i64, i64* %2317, align 8, !noalias !226
  %2356 = and i64 %2355, 4294967294
  %2357 = load i64, i64* %2344, align 8, !alias.scope !226
  %2358 = and i64 %2357, -4294967295
  %2359 = or i64 %2358, %2356
  store i64 %2359, i64* %2344, align 8, !alias.scope !226
  %2360 = shl i64 %2355, 1
  %2361 = and i64 %2360, 8589934588
  %2362 = icmp eq i64 %2361, 0
  br i1 %2362, label %2367, label %2363

2363:                                             ; preds = %2349
  %2364 = load i8*, i8** %2345, align 8, !alias.scope !226
  %2365 = load i8*, i8** %2318, align 8, !noalias !226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2364, i8* align 1 %2365, i64 %2361, i1 false) #12
  %2366 = load i64, i64* %2317, align 8, !noalias !226
  br label %2367

2367:                                             ; preds = %2363, %2349
  %2368 = phi i64 [ %2355, %2349 ], [ %2366, %2363 ]
  %2369 = and i64 %2368, -4294967295
  store i64 %2369, i64* %2317, align 8, !noalias !226
  br label %2370

2370:                                             ; preds = %2367, %2347
  %2371 = phi i64 [ %2348, %2347 ], [ %2369, %2367 ]
  %2372 = and i64 %2371, 1
  %2373 = icmp eq i64 %2372, 0
  br i1 %2373, label %2444, label %2374

2374:                                             ; preds = %2370
  %2375 = load i8*, i8** %2318, align 8, !noalias !226
  call void @_Z7sk_freePv(i8* %2375) #12
  br label %2444

2376:                                             ; preds = %2376, %2331
  %2377 = phi i64 [ 0, %2331 ], [ %2442, %2376 ]
  %2378 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2332, align 8
  %2379 = load i64, i64* %2296, align 8
  %2380 = and i64 %2379, 4294967294
  %2381 = icmp eq i64 %2380, 2
  %2382 = load i32*, i32** %2335, align 16
  %2383 = shl i64 %2377, 32
  %2384 = ashr exact i64 %2383, 32
  %2385 = select i1 %2381, i64 0, i64 %2384
  %2386 = getelementptr inbounds i32, i32* %2382, i64 %2385
  %2387 = load i32, i32* %2386, align 4
  %2388 = load i64, i64* %2301, align 8
  %2389 = and i64 %2388, 4294967294
  %2390 = icmp eq i64 %2389, 2
  %2391 = load i32*, i32** %2337, align 16
  %2392 = select i1 %2390, i64 0, i64 %2384
  %2393 = getelementptr inbounds i32, i32* %2391, i64 %2392
  %2394 = load i32, i32* %2393, align 4
  %2395 = load i64, i64* %2306, align 8
  %2396 = and i64 %2395, 4294967294
  %2397 = icmp eq i64 %2396, 2
  %2398 = load i32*, i32** %2339, align 16
  %2399 = select i1 %2397, i64 0, i64 %2384
  %2400 = getelementptr inbounds i32, i32* %2398, i64 %2399
  %2401 = load i32, i32* %2400, align 4
  %2402 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2378, %"class.skvm::Builder"* %2378, i32 %2401, %"class.skvm::Builder"* %2378, i32 %2387) #12
  %2403 = extractvalue { %"class.skvm::Builder"*, i32 } %2402, 0
  %2404 = extractvalue { %"class.skvm::Builder"*, i32 } %2402, 1
  %2405 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2378, %"class.skvm::Builder"* %2378, i32 %2394, %"class.skvm::Builder"* %2378, i32 %2387) #12
  %2406 = extractvalue { %"class.skvm::Builder"*, i32 } %2405, 0
  %2407 = extractvalue { %"class.skvm::Builder"*, i32 } %2405, 1
  %2408 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %2403, %"class.skvm::Builder"* %2403, i32 %2404, %"class.skvm::Builder"* %2406, i32 %2407) #12
  %2409 = extractvalue { %"class.skvm::Builder"*, i32 } %2408, 0
  %2410 = extractvalue { %"class.skvm::Builder"*, i32 } %2408, 1
  %2411 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2409, i32 0) #12
  %2412 = extractvalue { %"class.skvm::Builder"*, i32 } %2411, 0
  %2413 = extractvalue { %"class.skvm::Builder"*, i32 } %2411, 1
  %2414 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2409, i32 1065353216) #12
  %2415 = extractvalue { %"class.skvm::Builder"*, i32 } %2414, 0
  %2416 = extractvalue { %"class.skvm::Builder"*, i32 } %2414, 1
  %2417 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %2409, %"class.skvm::Builder"* %2409, i32 %2410, %"class.skvm::Builder"* %2415, i32 %2416) #12
  %2418 = extractvalue { %"class.skvm::Builder"*, i32 } %2417, 0
  %2419 = extractvalue { %"class.skvm::Builder"*, i32 } %2417, 1
  %2420 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %2409, %"class.skvm::Builder"* %2412, i32 %2413, %"class.skvm::Builder"* %2418, i32 %2419) #12
  %2421 = extractvalue { %"class.skvm::Builder"*, i32 } %2420, 0
  %2422 = extractvalue { %"class.skvm::Builder"*, i32 } %2420, 1
  %2423 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2421, %"class.skvm::Builder"* %2421, i32 %2422, %"class.skvm::Builder"* %2421, i32 %2422) #12
  %2424 = extractvalue { %"class.skvm::Builder"*, i32 } %2423, 0
  %2425 = extractvalue { %"class.skvm::Builder"*, i32 } %2423, 1
  %2426 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2421, i32 1073741824) #12
  %2427 = extractvalue { %"class.skvm::Builder"*, i32 } %2426, 0
  %2428 = extractvalue { %"class.skvm::Builder"*, i32 } %2426, 1
  %2429 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2421, %"class.skvm::Builder"* %2427, i32 %2428, %"class.skvm::Builder"* %2421, i32 %2422) #12
  %2430 = extractvalue { %"class.skvm::Builder"*, i32 } %2429, 0
  %2431 = extractvalue { %"class.skvm::Builder"*, i32 } %2429, 1
  %2432 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2430, i32 1077936128) #12
  %2433 = extractvalue { %"class.skvm::Builder"*, i32 } %2432, 0
  %2434 = extractvalue { %"class.skvm::Builder"*, i32 } %2432, 1
  %2435 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2430, %"class.skvm::Builder"* %2433, i32 %2434, %"class.skvm::Builder"* %2430, i32 %2431) #12
  %2436 = extractvalue { %"class.skvm::Builder"*, i32 } %2435, 0
  %2437 = extractvalue { %"class.skvm::Builder"*, i32 } %2435, 1
  %2438 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2424, %"class.skvm::Builder"* %2424, i32 %2425, %"class.skvm::Builder"* %2436, i32 %2437) #12
  %2439 = extractvalue { %"class.skvm::Builder"*, i32 } %2438, 1
  %2440 = load i32*, i32** %2333, align 8, !noalias !226
  %2441 = getelementptr inbounds i32, i32* %2440, i64 %2384
  store i32 %2439, i32* %2441, align 4
  %2442 = add nuw nsw i64 %2377, 1
  %2443 = icmp eq i64 %2442, %2313
  br i1 %2443, label %2340, label %2376

2444:                                             ; preds = %2370, %2374
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2314) #12, !noalias !226
  br label %5485

2445:                                             ; preds = %343
  %2446 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2447 = bitcast i8* %2446 to i32**
  %2448 = load i32*, i32** %2447, align 16
  %2449 = load i32, i32* %2448, align 4
  %2450 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2451 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2450, align 8
  %2452 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2451, %"class.skvm::Builder"* %2451, i32 %2449, %"class.skvm::Builder"* %2451, i32 %2449) #12
  %2453 = extractvalue { %"class.skvm::Builder"*, i32 } %2452, 0
  %2454 = extractvalue { %"class.skvm::Builder"*, i32 } %2452, 1
  %2455 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2456 = bitcast i8* %2455 to i64*
  %2457 = load i64, i64* %2456, align 8
  %2458 = and i64 %2457, 4294967292
  %2459 = icmp eq i64 %2458, 0
  br i1 %2459, label %2481, label %2460

2460:                                             ; preds = %2445, %2460
  %2461 = phi i64 [ %2476, %2460 ], [ 1, %2445 ]
  %2462 = phi %"class.skvm::Builder"* [ %2474, %2460 ], [ %2453, %2445 ]
  %2463 = phi i32 [ %2475, %2460 ], [ %2454, %2445 ]
  %2464 = load i32*, i32** %2447, align 16
  %2465 = shl i64 %2461, 32
  %2466 = ashr exact i64 %2465, 32
  %2467 = getelementptr inbounds i32, i32* %2464, i64 %2466
  %2468 = load i32, i32* %2467, align 4
  %2469 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2450, align 8
  %2470 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2469, %"class.skvm::Builder"* %2469, i32 %2468, %"class.skvm::Builder"* %2469, i32 %2468) #12
  %2471 = extractvalue { %"class.skvm::Builder"*, i32 } %2470, 0
  %2472 = extractvalue { %"class.skvm::Builder"*, i32 } %2470, 1
  %2473 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2462, %"class.skvm::Builder"* %2462, i32 %2463, %"class.skvm::Builder"* %2471, i32 %2472) #12
  %2474 = extractvalue { %"class.skvm::Builder"*, i32 } %2473, 0
  %2475 = extractvalue { %"class.skvm::Builder"*, i32 } %2473, 1
  %2476 = add nuw nsw i64 %2461, 1
  %2477 = load i64, i64* %2456, align 8
  %2478 = lshr i64 %2477, 1
  %2479 = and i64 %2478, 2147483647
  %2480 = icmp ult i64 %2476, %2479
  br i1 %2480, label %2460, label %2481

2481:                                             ; preds = %2460, %2445
  %2482 = phi i32 [ %2454, %2445 ], [ %2475, %2460 ]
  %2483 = phi %"class.skvm::Builder"* [ %2453, %2445 ], [ %2474, %2460 ]
  %2484 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %2483, %"class.skvm::Builder"* %2483, i32 %2482) #12
  %2485 = extractvalue { %"class.skvm::Builder"*, i32 } %2484, 1
  %2486 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2487 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2488 = bitcast i8* %2487 to i64*
  %2489 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2490 = bitcast i8* %2486 to i8**
  store i8* %2489, i8** %2490, align 8
  %2491 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %2488, align 8
  store i32 %2485, i32* %2491, align 8
  br label %5485

2492:                                             ; preds = %343
  %2493 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %41, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2493) #12
  %2494 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2495 = bitcast i8* %2494 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2493, i8 -86, i64 32, i1 false)
  %2496 = load i64, i64* %2495, align 8, !noalias !229
  %2497 = lshr i64 %2496, 1
  %2498 = and i64 %2497, 2147483647
  %2499 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %2500 = bitcast i8* %2499 to i64*
  %2501 = load i64, i64* %2500, align 8, !noalias !229
  %2502 = lshr i64 %2501, 1
  %2503 = and i64 %2502, 2147483647
  %2504 = icmp ult i64 %2498, %2503
  %2505 = select i1 %2504, i64 %2503, i64 %2498
  %2506 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2506) #12, !noalias !229
  %2507 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 16
  %2508 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %21, i64 0, i32 0, i32 0, i32 0, i64 24
  %2509 = bitcast i8* %2508 to i64*
  %2510 = bitcast i8* %2507 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2506, i8 -86, i64 16, i1 false) #12, !noalias !229
  store i8* %2506, i8** %2510, align 8, !noalias !229
  store i64 34359738368, i64* %2509, align 8, !noalias !229
  %2511 = trunc i64 %2505 to i32
  %2512 = icmp eq i32 %2511, 0
  br i1 %2512, label %2521, label %2513

2513:                                             ; preds = %2492
  %2514 = bitcast i8* %2507 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2514, i32 %2511, i32 1) #12
  %2515 = load i64, i64* %2509, align 8, !noalias !229
  %2516 = shl nuw nsw i64 %2505, 1
  %2517 = add i64 %2515, %2516
  %2518 = and i64 %2517, 4294967294
  %2519 = and i64 %2515, -4294967295
  %2520 = or i64 %2518, %2519
  store i64 %2520, i64* %2509, align 8, !noalias !229
  br label %2521

2521:                                             ; preds = %2513, %2492
  %2522 = phi i64 [ %2520, %2513 ], [ 34359738368, %2492 ]
  %2523 = icmp eq i64 %2505, 0
  br i1 %2523, label %2533, label %2524

2524:                                             ; preds = %2521
  %2525 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2526 = bitcast i8* %2507 to i32**
  %2527 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2528 = bitcast i8* %2527 to i32**
  %2529 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2530 = bitcast i8* %2529 to i32**
  br label %2584

2531:                                             ; preds = %2584
  %2532 = load i64, i64* %2509, align 8, !noalias !229
  br label %2533

2533:                                             ; preds = %2531, %2521
  %2534 = phi i64 [ %2532, %2531 ], [ %2522, %2521 ]
  %2535 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %41, i64 0, i32 0, i32 0, i32 0, i64 16
  %2536 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %41, i64 0, i32 0, i32 0, i32 0, i64 24
  %2537 = bitcast i8* %2536 to i64*
  %2538 = bitcast i8* %2535 to i8**
  store i8* %2493, i8** %2538, align 8, !alias.scope !229
  store i64 34359738368, i64* %2537, align 8, !alias.scope !229
  %2539 = lshr i64 %2534, 1
  %2540 = and i64 %2539, 2147483647
  %2541 = icmp ult i64 %2540, 5
  br i1 %2541, label %2565, label %2542

2542:                                             ; preds = %2533
  %2543 = shl nuw i64 %2540, 33
  store i64 %2543, i64* %2537, align 8
  %2544 = call i8* @_Z15sk_malloc_throwmm(i64 %2540, i64 4) #12
  %2545 = load i64, i64* %2537, align 8
  %2546 = shl i64 %2545, 1
  %2547 = and i64 %2546, 8589934588
  %2548 = icmp eq i64 %2547, 0
  br i1 %2548, label %2552, label %2549

2549:                                             ; preds = %2542
  %2550 = load i8*, i8** %2538, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2544, i8* align 1 %2550, i64 %2547, i1 false) #12
  %2551 = load i64, i64* %2537, align 8
  br label %2552

2552:                                             ; preds = %2549, %2542
  %2553 = phi i64 [ %2545, %2542 ], [ %2551, %2549 ]
  %2554 = and i64 %2553, 1
  %2555 = icmp eq i64 %2554, 0
  br i1 %2555, label %2559, label %2556

2556:                                             ; preds = %2552
  %2557 = load i8*, i8** %2538, align 8
  call void @_Z7sk_freePv(i8* %2557) #12
  %2558 = load i64, i64* %2537, align 8
  br label %2559

2559:                                             ; preds = %2556, %2552
  %2560 = phi i64 [ %2558, %2556 ], [ %2553, %2552 ]
  store i8* %2544, i8** %2538, align 8
  %2561 = and i64 %2560, -4294967298
  %2562 = or i64 %2561, 1
  store i64 %2562, i64* %2537, align 8
  %2563 = load i64, i64* %2509, align 8, !noalias !229
  %2564 = and i64 %2562, -8589934591
  br label %2565

2565:                                             ; preds = %2533, %2559
  %2566 = phi i8* [ %2493, %2533 ], [ %2544, %2559 ]
  %2567 = phi i64 [ 34359738368, %2533 ], [ %2564, %2559 ]
  %2568 = phi i64 [ %2534, %2533 ], [ %2563, %2559 ]
  %2569 = and i64 %2568, 4294967294
  %2570 = or i64 %2567, %2569
  store i64 %2570, i64* %2537, align 8, !alias.scope !229
  %2571 = shl i64 %2568, 1
  %2572 = and i64 %2571, 8589934588
  %2573 = icmp eq i64 %2572, 0
  br i1 %2573, label %2577, label %2574

2574:                                             ; preds = %2565
  %2575 = load i8*, i8** %2510, align 8, !noalias !229
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2566, i8* align 1 %2575, i64 %2572, i1 false) #12
  %2576 = load i64, i64* %2509, align 8, !noalias !229
  br label %2577

2577:                                             ; preds = %2574, %2565
  %2578 = phi i64 [ %2568, %2565 ], [ %2576, %2574 ]
  %2579 = and i64 %2578, -4294967295
  store i64 %2579, i64* %2509, align 8, !noalias !229
  %2580 = and i64 %2578, 1
  %2581 = icmp eq i64 %2580, 0
  br i1 %2581, label %2609, label %2582

2582:                                             ; preds = %2577
  %2583 = load i8*, i8** %2510, align 8, !noalias !229
  call void @_Z7sk_freePv(i8* %2583) #12
  br label %2609

2584:                                             ; preds = %2584, %2524
  %2585 = phi i64 [ 0, %2524 ], [ %2607, %2584 ]
  %2586 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2525, align 8
  %2587 = load i64, i64* %2495, align 8
  %2588 = and i64 %2587, 4294967294
  %2589 = icmp eq i64 %2588, 2
  %2590 = load i32*, i32** %2528, align 16
  %2591 = shl i64 %2585, 32
  %2592 = ashr exact i64 %2591, 32
  %2593 = select i1 %2589, i64 0, i64 %2592
  %2594 = getelementptr inbounds i32, i32* %2590, i64 %2593
  %2595 = load i32, i32* %2594, align 4
  %2596 = load i64, i64* %2500, align 8
  %2597 = and i64 %2596, 4294967294
  %2598 = icmp eq i64 %2597, 2
  %2599 = load i32*, i32** %2530, align 16
  %2600 = select i1 %2598, i64 0, i64 %2592
  %2601 = getelementptr inbounds i32, i32* %2599, i64 %2600
  %2602 = load i32, i32* %2601, align 4
  %2603 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2586, %"class.skvm::Builder"* %2586, i32 %2595, %"class.skvm::Builder"* %2586, i32 %2602) #12
  %2604 = extractvalue { %"class.skvm::Builder"*, i32 } %2603, 1
  %2605 = load i32*, i32** %2526, align 8, !noalias !229
  %2606 = getelementptr inbounds i32, i32* %2605, i64 %2592
  store i32 %2604, i32* %2606, align 4
  %2607 = add nuw nsw i64 %2585, 1
  %2608 = icmp ult i64 %2607, %2505
  br i1 %2608, label %2584, label %2531

2609:                                             ; preds = %2577, %2582
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2506) #12, !noalias !229
  %2610 = bitcast i8* %2535 to i32**
  %2611 = load i32*, i32** %2610, align 8
  %2612 = load i32, i32* %2611, align 4
  %2613 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2614 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2613, align 8
  %2615 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2614, %"class.skvm::Builder"* %2614, i32 %2612, %"class.skvm::Builder"* %2614, i32 %2612) #12
  %2616 = extractvalue { %"class.skvm::Builder"*, i32 } %2615, 0
  %2617 = extractvalue { %"class.skvm::Builder"*, i32 } %2615, 1
  %2618 = load i64, i64* %2537, align 8
  %2619 = and i64 %2618, 4294967292
  %2620 = icmp eq i64 %2619, 0
  br i1 %2620, label %2642, label %2621

2621:                                             ; preds = %2609, %2621
  %2622 = phi i64 [ %2637, %2621 ], [ 1, %2609 ]
  %2623 = phi %"class.skvm::Builder"* [ %2635, %2621 ], [ %2616, %2609 ]
  %2624 = phi i32 [ %2636, %2621 ], [ %2617, %2609 ]
  %2625 = load i32*, i32** %2610, align 8
  %2626 = shl i64 %2622, 32
  %2627 = ashr exact i64 %2626, 32
  %2628 = getelementptr inbounds i32, i32* %2625, i64 %2627
  %2629 = load i32, i32* %2628, align 4
  %2630 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2613, align 8
  %2631 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2630, %"class.skvm::Builder"* %2630, i32 %2629, %"class.skvm::Builder"* %2630, i32 %2629) #12
  %2632 = extractvalue { %"class.skvm::Builder"*, i32 } %2631, 0
  %2633 = extractvalue { %"class.skvm::Builder"*, i32 } %2631, 1
  %2634 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2623, %"class.skvm::Builder"* %2623, i32 %2624, %"class.skvm::Builder"* %2632, i32 %2633) #12
  %2635 = extractvalue { %"class.skvm::Builder"*, i32 } %2634, 0
  %2636 = extractvalue { %"class.skvm::Builder"*, i32 } %2634, 1
  %2637 = add nuw nsw i64 %2622, 1
  %2638 = load i64, i64* %2537, align 8
  %2639 = lshr i64 %2638, 1
  %2640 = and i64 %2639, 2147483647
  %2641 = icmp ult i64 %2637, %2640
  br i1 %2641, label %2621, label %2642

2642:                                             ; preds = %2621, %2609
  %2643 = phi i32 [ %2617, %2609 ], [ %2636, %2621 ]
  %2644 = phi %"class.skvm::Builder"* [ %2616, %2609 ], [ %2635, %2621 ]
  %2645 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %2644, %"class.skvm::Builder"* %2644, i32 %2643) #12
  %2646 = extractvalue { %"class.skvm::Builder"*, i32 } %2645, 1
  %2647 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2648 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2649 = bitcast i8* %2648 to i64*
  %2650 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2651 = bitcast i8* %2647 to i8**
  store i8* %2650, i8** %2651, align 8
  %2652 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %2649, align 8
  store i32 %2646, i32* %2652, align 8
  %2653 = load i64, i64* %2537, align 8
  %2654 = and i64 %2653, 1
  %2655 = icmp eq i64 %2654, 0
  br i1 %2655, label %2658, label %2656

2656:                                             ; preds = %2642
  %2657 = load i8*, i8** %2538, align 8
  call void @_Z7sk_freePv(i8* %2657) #12
  br label %2658

2658:                                             ; preds = %2642, %2656
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2493) #12
  br label %5485

2659:                                             ; preds = %343
  %2660 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2661 = bitcast i8* %2660 to i32**
  %2662 = load i32*, i32** %2661, align 16
  %2663 = load i32, i32* %2662, align 4
  %2664 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2665 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2664, align 8
  %2666 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2667 = bitcast i8* %2666 to i32**
  %2668 = load i32*, i32** %2667, align 16
  %2669 = load i32, i32* %2668, align 4
  %2670 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2665, %"class.skvm::Builder"* %2665, i32 %2663, %"class.skvm::Builder"* %2665, i32 %2669) #12
  %2671 = extractvalue { %"class.skvm::Builder"*, i32 } %2670, 1
  %2672 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2673 = bitcast i8* %2672 to i64*
  %2674 = load i64, i64* %2673, align 8
  %2675 = and i64 %2674, 4294967292
  %2676 = icmp eq i64 %2675, 0
  br i1 %2676, label %2703, label %2677

2677:                                             ; preds = %2659
  %2678 = extractvalue { %"class.skvm::Builder"*, i32 } %2670, 0
  br label %2679

2679:                                             ; preds = %2677, %2679
  %2680 = phi i64 [ %2698, %2679 ], [ 1, %2677 ]
  %2681 = phi %"class.skvm::Builder"* [ %2696, %2679 ], [ %2678, %2677 ]
  %2682 = phi i32 [ %2697, %2679 ], [ %2671, %2677 ]
  %2683 = load i32*, i32** %2661, align 16
  %2684 = shl i64 %2680, 32
  %2685 = ashr exact i64 %2684, 32
  %2686 = getelementptr inbounds i32, i32* %2683, i64 %2685
  %2687 = load i32, i32* %2686, align 4
  %2688 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2664, align 8
  %2689 = load i32*, i32** %2667, align 16
  %2690 = getelementptr inbounds i32, i32* %2689, i64 %2685
  %2691 = load i32, i32* %2690, align 4
  %2692 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2688, %"class.skvm::Builder"* %2688, i32 %2687, %"class.skvm::Builder"* %2688, i32 %2691) #12
  %2693 = extractvalue { %"class.skvm::Builder"*, i32 } %2692, 0
  %2694 = extractvalue { %"class.skvm::Builder"*, i32 } %2692, 1
  %2695 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2681, %"class.skvm::Builder"* %2681, i32 %2682, %"class.skvm::Builder"* %2693, i32 %2694) #12
  %2696 = extractvalue { %"class.skvm::Builder"*, i32 } %2695, 0
  %2697 = extractvalue { %"class.skvm::Builder"*, i32 } %2695, 1
  %2698 = add nuw nsw i64 %2680, 1
  %2699 = load i64, i64* %2673, align 8
  %2700 = lshr i64 %2699, 1
  %2701 = and i64 %2700, 2147483647
  %2702 = icmp ult i64 %2698, %2701
  br i1 %2702, label %2679, label %2703

2703:                                             ; preds = %2679, %2659
  %2704 = phi i32 [ %2671, %2659 ], [ %2697, %2679 ]
  %2705 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2706 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2707 = bitcast i8* %2706 to i64*
  %2708 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2709 = bitcast i8* %2705 to i8**
  store i8* %2708, i8** %2709, align 8
  %2710 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %2707, align 8
  store i32 %2704, i32* %2710, align 8
  br label %5485

2711:                                             ; preds = %343
  %2712 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2713 = bitcast i8* %2712 to i32**
  %2714 = load i32*, i32** %2713, align 16
  %2715 = load i32, i32* %2714, align 4
  %2716 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2717 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2716, align 8
  %2718 = getelementptr inbounds i32, i32* %2714, i64 1
  %2719 = load i32, i32* %2718, align 4
  %2720 = getelementptr inbounds i32, i32* %2714, i64 2
  %2721 = load i32, i32* %2720, align 4
  %2722 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2723 = bitcast i8* %2722 to i32**
  %2724 = load i32*, i32** %2723, align 16
  %2725 = load i32, i32* %2724, align 4
  %2726 = getelementptr inbounds i32, i32* %2724, i64 1
  %2727 = load i32, i32* %2726, align 4
  %2728 = getelementptr inbounds i32, i32* %2724, i64 2
  %2729 = load i32, i32* %2728, align 4
  %2730 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2731 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2732 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2733 = bitcast i8* %2732 to i64*
  %2734 = bitcast i8* %2731 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %2730, i8 -86, i64 16, i1 false)
  store i8* %2730, i8** %2734, align 8
  store i64 34359738368, i64* %2733, align 8
  %2735 = bitcast i8* %2731 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2735, i32 3, i32 1) #12
  %2736 = load i64, i64* %2733, align 8
  %2737 = add i64 %2736, 6
  %2738 = and i64 %2737, 4294967294
  %2739 = and i64 %2736, -4294967295
  %2740 = or i64 %2738, %2739
  store i64 %2740, i64* %2733, align 8
  %2741 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2719, %"class.skvm::Builder"* %2717, i32 %2729) #12
  %2742 = extractvalue { %"class.skvm::Builder"*, i32 } %2741, 0
  %2743 = extractvalue { %"class.skvm::Builder"*, i32 } %2741, 1
  %2744 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2721, %"class.skvm::Builder"* %2717, i32 %2727) #12
  %2745 = extractvalue { %"class.skvm::Builder"*, i32 } %2744, 0
  %2746 = extractvalue { %"class.skvm::Builder"*, i32 } %2744, 1
  %2747 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2742, %"class.skvm::Builder"* %2742, i32 %2743, %"class.skvm::Builder"* %2745, i32 %2746) #12
  %2748 = extractvalue { %"class.skvm::Builder"*, i32 } %2747, 1
  %2749 = bitcast i8* %2731 to i32**
  %2750 = load i32*, i32** %2749, align 8
  store i32 %2748, i32* %2750, align 4
  %2751 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2721, %"class.skvm::Builder"* %2717, i32 %2725) #12
  %2752 = extractvalue { %"class.skvm::Builder"*, i32 } %2751, 0
  %2753 = extractvalue { %"class.skvm::Builder"*, i32 } %2751, 1
  %2754 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2715, %"class.skvm::Builder"* %2717, i32 %2729) #12
  %2755 = extractvalue { %"class.skvm::Builder"*, i32 } %2754, 0
  %2756 = extractvalue { %"class.skvm::Builder"*, i32 } %2754, 1
  %2757 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2752, %"class.skvm::Builder"* %2752, i32 %2753, %"class.skvm::Builder"* %2755, i32 %2756) #12
  %2758 = extractvalue { %"class.skvm::Builder"*, i32 } %2757, 1
  %2759 = load i32*, i32** %2749, align 8
  %2760 = getelementptr inbounds i32, i32* %2759, i64 1
  store i32 %2758, i32* %2760, align 4
  %2761 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2715, %"class.skvm::Builder"* %2717, i32 %2727) #12
  %2762 = extractvalue { %"class.skvm::Builder"*, i32 } %2761, 0
  %2763 = extractvalue { %"class.skvm::Builder"*, i32 } %2761, 1
  %2764 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2717, %"class.skvm::Builder"* %2717, i32 %2719, %"class.skvm::Builder"* %2717, i32 %2725) #12
  %2765 = extractvalue { %"class.skvm::Builder"*, i32 } %2764, 0
  %2766 = extractvalue { %"class.skvm::Builder"*, i32 } %2764, 1
  %2767 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2762, %"class.skvm::Builder"* %2762, i32 %2763, %"class.skvm::Builder"* %2765, i32 %2766) #12
  %2768 = extractvalue { %"class.skvm::Builder"*, i32 } %2767, 1
  %2769 = load i32*, i32** %2749, align 8
  %2770 = getelementptr inbounds i32, i32* %2769, i64 2
  store i32 %2768, i32* %2770, align 4
  br label %5485

2771:                                             ; preds = %343
  %2772 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2773 = bitcast i8* %2772 to i32**
  %2774 = load i32*, i32** %2773, align 16
  %2775 = load i32, i32* %2774, align 4
  %2776 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2777 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2776, align 8
  %2778 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2777, %"class.skvm::Builder"* %2777, i32 %2775, %"class.skvm::Builder"* %2777, i32 %2775) #12
  %2779 = extractvalue { %"class.skvm::Builder"*, i32 } %2778, 0
  %2780 = extractvalue { %"class.skvm::Builder"*, i32 } %2778, 1
  %2781 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2782 = bitcast i8* %2781 to i64*
  %2783 = load i64, i64* %2782, align 8
  %2784 = and i64 %2783, 4294967292
  %2785 = icmp eq i64 %2784, 0
  br i1 %2785, label %2807, label %2786

2786:                                             ; preds = %2771, %2786
  %2787 = phi i64 [ %2802, %2786 ], [ 1, %2771 ]
  %2788 = phi %"class.skvm::Builder"* [ %2800, %2786 ], [ %2779, %2771 ]
  %2789 = phi i32 [ %2801, %2786 ], [ %2780, %2771 ]
  %2790 = load i32*, i32** %2773, align 16
  %2791 = shl i64 %2787, 32
  %2792 = ashr exact i64 %2791, 32
  %2793 = getelementptr inbounds i32, i32* %2790, i64 %2792
  %2794 = load i32, i32* %2793, align 4
  %2795 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2776, align 8
  %2796 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2795, %"class.skvm::Builder"* %2795, i32 %2794, %"class.skvm::Builder"* %2795, i32 %2794) #12
  %2797 = extractvalue { %"class.skvm::Builder"*, i32 } %2796, 0
  %2798 = extractvalue { %"class.skvm::Builder"*, i32 } %2796, 1
  %2799 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2788, %"class.skvm::Builder"* %2788, i32 %2789, %"class.skvm::Builder"* %2797, i32 %2798) #12
  %2800 = extractvalue { %"class.skvm::Builder"*, i32 } %2799, 0
  %2801 = extractvalue { %"class.skvm::Builder"*, i32 } %2799, 1
  %2802 = add nuw nsw i64 %2787, 1
  %2803 = load i64, i64* %2782, align 8
  %2804 = lshr i64 %2803, 1
  %2805 = and i64 %2804, 2147483647
  %2806 = icmp ult i64 %2802, %2805
  br i1 %2806, label %2786, label %2807

2807:                                             ; preds = %2786, %2771
  %2808 = phi i32 [ %2780, %2771 ], [ %2801, %2786 ]
  %2809 = phi %"class.skvm::Builder"* [ %2779, %2771 ], [ %2800, %2786 ]
  %2810 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %2809, %"class.skvm::Builder"* %2809, i32 %2808) #12
  %2811 = extractvalue { %"class.skvm::Builder"*, i32 } %2810, 0
  %2812 = extractvalue { %"class.skvm::Builder"*, i32 } %2810, 1
  %2813 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2811, i32 1065353216) #12
  %2814 = extractvalue { %"class.skvm::Builder"*, i32 } %2813, 0
  %2815 = extractvalue { %"class.skvm::Builder"*, i32 } %2813, 1
  %2816 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %2811, %"class.skvm::Builder"* %2814, i32 %2815, %"class.skvm::Builder"* %2811, i32 %2812) #12
  %2817 = extractvalue { %"class.skvm::Builder"*, i32 } %2816, 0
  %2818 = extractvalue { %"class.skvm::Builder"*, i32 } %2816, 1
  %2819 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %2819, i8 -86, i64 16, i1 false) #12, !alias.scope !232
  %2820 = load i64, i64* %2782, align 8, !noalias !232
  %2821 = lshr i64 %2820, 1
  %2822 = and i64 %2821, 2147483647
  %2823 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2824 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2825 = bitcast i8* %2824 to i64*
  %2826 = bitcast i8* %2823 to i8**
  store i8* %2819, i8** %2826, align 8, !alias.scope !232
  store i64 34359738368, i64* %2825, align 8, !alias.scope !232
  %2827 = trunc i64 %2822 to i32
  %2828 = icmp eq i32 %2827, 0
  br i1 %2828, label %2838, label %2829

2829:                                             ; preds = %2807
  %2830 = bitcast i8* %2823 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2830, i32 %2827, i32 1) #12
  %2831 = load i64, i64* %2825, align 8, !alias.scope !232
  %2832 = shl nuw nsw i64 %2822, 1
  %2833 = add i64 %2831, %2832
  %2834 = and i64 %2833, 4294967294
  %2835 = and i64 %2831, -4294967295
  %2836 = or i64 %2834, %2835
  store i64 %2836, i64* %2825, align 8, !alias.scope !232
  %2837 = load i64, i64* %2782, align 8, !noalias !232
  br label %2838

2838:                                             ; preds = %2829, %2807
  %2839 = phi i64 [ %2820, %2807 ], [ %2837, %2829 ]
  %2840 = and i64 %2839, 4294967294
  %2841 = icmp eq i64 %2840, 0
  br i1 %2841, label %5485, label %2842

2842:                                             ; preds = %2838
  %2843 = bitcast i8* %2823 to i32**
  br label %2844

2844:                                             ; preds = %2844, %2842
  %2845 = phi i64 [ 0, %2842 ], [ %2856, %2844 ]
  %2846 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2776, align 8, !noalias !232
  %2847 = load i32*, i32** %2773, align 16, !noalias !232
  %2848 = shl i64 %2845, 32
  %2849 = ashr exact i64 %2848, 32
  %2850 = getelementptr inbounds i32, i32* %2847, i64 %2849
  %2851 = load i32, i32* %2850, align 4
  %2852 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %2846, %"class.skvm::Builder"* %2846, i32 %2851, %"class.skvm::Builder"* %2817, i32 %2818) #12
  %2853 = extractvalue { %"class.skvm::Builder"*, i32 } %2852, 1
  %2854 = load i32*, i32** %2843, align 8, !alias.scope !232
  %2855 = getelementptr inbounds i32, i32* %2854, i64 %2849
  store i32 %2853, i32* %2855, align 4
  %2856 = add nuw nsw i64 %2845, 1
  %2857 = load i64, i64* %2782, align 8, !noalias !232
  %2858 = lshr i64 %2857, 1
  %2859 = and i64 %2858, 2147483647
  %2860 = icmp ult i64 %2856, %2859
  br i1 %2860, label %2844, label %5485

2861:                                             ; preds = %343
  %2862 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %2863 = bitcast i8* %2862 to i32**
  %2864 = load i32*, i32** %2863, align 16
  %2865 = load i32, i32* %2864, align 4
  %2866 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2867 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2866, align 8
  %2868 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2869 = bitcast i8* %2868 to i32**
  %2870 = load i32*, i32** %2869, align 16
  %2871 = load i32, i32* %2870, align 4
  %2872 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2867, %"class.skvm::Builder"* %2867, i32 %2865, %"class.skvm::Builder"* %2867, i32 %2871) #12
  %2873 = extractvalue { %"class.skvm::Builder"*, i32 } %2872, 0
  %2874 = extractvalue { %"class.skvm::Builder"*, i32 } %2872, 1
  %2875 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %2876 = bitcast i8* %2875 to i64*
  %2877 = load i64, i64* %2876, align 8
  %2878 = and i64 %2877, 4294967292
  %2879 = icmp eq i64 %2878, 0
  br i1 %2879, label %2904, label %2880

2880:                                             ; preds = %2861, %2880
  %2881 = phi i64 [ %2899, %2880 ], [ 1, %2861 ]
  %2882 = phi %"class.skvm::Builder"* [ %2897, %2880 ], [ %2873, %2861 ]
  %2883 = phi i32 [ %2898, %2880 ], [ %2874, %2861 ]
  %2884 = load i32*, i32** %2863, align 16
  %2885 = shl i64 %2881, 32
  %2886 = ashr exact i64 %2885, 32
  %2887 = getelementptr inbounds i32, i32* %2884, i64 %2886
  %2888 = load i32, i32* %2887, align 4
  %2889 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2866, align 8
  %2890 = load i32*, i32** %2869, align 16
  %2891 = getelementptr inbounds i32, i32* %2890, i64 %2886
  %2892 = load i32, i32* %2891, align 4
  %2893 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2889, %"class.skvm::Builder"* %2889, i32 %2888, %"class.skvm::Builder"* %2889, i32 %2892) #12
  %2894 = extractvalue { %"class.skvm::Builder"*, i32 } %2893, 0
  %2895 = extractvalue { %"class.skvm::Builder"*, i32 } %2893, 1
  %2896 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2882, %"class.skvm::Builder"* %2882, i32 %2883, %"class.skvm::Builder"* %2894, i32 %2895) #12
  %2897 = extractvalue { %"class.skvm::Builder"*, i32 } %2896, 0
  %2898 = extractvalue { %"class.skvm::Builder"*, i32 } %2896, 1
  %2899 = add nuw nsw i64 %2881, 1
  %2900 = load i64, i64* %2876, align 8
  %2901 = lshr i64 %2900, 1
  %2902 = and i64 %2901, 2147483647
  %2903 = icmp ult i64 %2899, %2902
  br i1 %2903, label %2880, label %2904

2904:                                             ; preds = %2880, %2861
  %2905 = phi i32 [ %2874, %2861 ], [ %2898, %2880 ]
  %2906 = phi %"class.skvm::Builder"* [ %2873, %2861 ], [ %2897, %2880 ]
  %2907 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2908 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2909 = bitcast i8* %2908 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2907, i8 -86, i64 16, i1 false) #12, !alias.scope !235
  %2910 = load i64, i64* %2909, align 8, !noalias !235
  %2911 = lshr i64 %2910, 1
  %2912 = and i64 %2911, 2147483647
  %2913 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2914 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %2915 = bitcast i8* %2914 to i64*
  %2916 = bitcast i8* %2913 to i8**
  store i8* %2907, i8** %2916, align 8, !alias.scope !235
  store i64 34359738368, i64* %2915, align 8, !alias.scope !235
  %2917 = trunc i64 %2912 to i32
  %2918 = icmp eq i32 %2917, 0
  br i1 %2918, label %2928, label %2919

2919:                                             ; preds = %2904
  %2920 = bitcast i8* %2913 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %2920, i32 %2917, i32 1) #12
  %2921 = load i64, i64* %2915, align 8, !alias.scope !235
  %2922 = shl nuw nsw i64 %2912, 1
  %2923 = add i64 %2921, %2922
  %2924 = and i64 %2923, 4294967294
  %2925 = and i64 %2921, -4294967295
  %2926 = or i64 %2924, %2925
  store i64 %2926, i64* %2915, align 8, !alias.scope !235
  %2927 = load i64, i64* %2909, align 8, !noalias !235
  br label %2928

2928:                                             ; preds = %2919, %2904
  %2929 = phi i64 [ %2910, %2904 ], [ %2927, %2919 ]
  %2930 = and i64 %2929, 4294967294
  %2931 = icmp eq i64 %2930, 0
  br i1 %2931, label %5485, label %2932

2932:                                             ; preds = %2928
  %2933 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2934 = bitcast i8* %2933 to i32**
  %2935 = bitcast { %"class.skvm::Builder"*, i32 }* %20 to i8*
  %2936 = bitcast { %"class.skvm::Builder"*, i32 }* %20 to %"struct.skvm::I32"*
  %2937 = bitcast { %"class.skvm::Builder"*, i32 }* %20 to i64*
  %2938 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %20, i64 0, i32 1
  %2939 = bitcast i8* %2913 to i32**
  br label %2940

2940:                                             ; preds = %2940, %2932
  %2941 = phi i64 [ 0, %2932 ], [ %2965, %2940 ]
  %2942 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2866, align 8, !noalias !235
  %2943 = load i32*, i32** %2934, align 16, !noalias !235
  %2944 = shl i64 %2941, 32
  %2945 = ashr exact i64 %2944, 32
  %2946 = getelementptr inbounds i32, i32* %2943, i64 %2945
  %2947 = load i32, i32* %2946, align 4
  %2948 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2906, i32 0) #12
  %2949 = extractvalue { %"class.skvm::Builder"*, i32 } %2948, 0
  %2950 = extractvalue { %"class.skvm::Builder"*, i32 } %2948, 1
  %2951 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %2906, %"class.skvm::Builder"* %2906, i32 %2905, %"class.skvm::Builder"* %2949, i32 %2950) #12
  %2952 = extractvalue { %"class.skvm::Builder"*, i32 } %2951, 0
  %2953 = extractvalue { %"class.skvm::Builder"*, i32 } %2951, 1
  %2954 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2942, i32 0) #12
  %2955 = extractvalue { %"class.skvm::Builder"*, i32 } %2954, 0
  %2956 = extractvalue { %"class.skvm::Builder"*, i32 } %2954, 1
  %2957 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %2942, %"class.skvm::Builder"* %2955, i32 %2956, %"class.skvm::Builder"* %2942, i32 %2947) #12
  %2958 = extractvalue { %"class.skvm::Builder"*, i32 } %2957, 0
  %2959 = extractvalue { %"class.skvm::Builder"*, i32 } %2957, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2935) #12, !noalias !235
  %2960 = ptrtoint %"class.skvm::Builder"* %2958 to i64
  store i64 %2960, i64* %2937, align 8, !noalias !235
  store i32 %2959, i32* %2938, align 8, !noalias !235
  %2961 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %2952, %"class.skvm::Builder"* %2952, i32 %2953, %"class.skvm::Builder"* %2942, i32 %2947, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %2936) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2935) #12, !noalias !235
  %2962 = extractvalue { %"class.skvm::Builder"*, i32 } %2961, 1
  %2963 = load i32*, i32** %2939, align 8, !alias.scope !235
  %2964 = getelementptr inbounds i32, i32* %2963, i64 %2945
  store i32 %2962, i32* %2964, align 4
  %2965 = add nuw nsw i64 %2941, 1
  %2966 = load i64, i64* %2909, align 8, !noalias !235
  %2967 = lshr i64 %2966, 1
  %2968 = and i64 %2967, 2147483647
  %2969 = icmp ult i64 %2965, %2968
  br i1 %2969, label %2940, label %5485

2970:                                             ; preds = %343
  %2971 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %2972 = bitcast i8* %2971 to i32**
  %2973 = load i32*, i32** %2972, align 16
  %2974 = load i32, i32* %2973, align 4
  %2975 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %2976 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2975, align 8
  %2977 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %2978 = bitcast i8* %2977 to i32**
  %2979 = load i32*, i32** %2978, align 16
  %2980 = load i32, i32* %2979, align 4
  %2981 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2976, %"class.skvm::Builder"* %2976, i32 %2974, %"class.skvm::Builder"* %2976, i32 %2980) #12
  %2982 = extractvalue { %"class.skvm::Builder"*, i32 } %2981, 0
  %2983 = extractvalue { %"class.skvm::Builder"*, i32 } %2981, 1
  %2984 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %2985 = bitcast i8* %2984 to i64*
  %2986 = load i64, i64* %2985, align 8
  %2987 = and i64 %2986, 4294967292
  %2988 = icmp eq i64 %2987, 0
  br i1 %2988, label %2989, label %2992

2989:                                             ; preds = %2970
  %2990 = lshr i64 %2986, 1
  %2991 = and i64 %2990, 2147483647
  br label %3016

2992:                                             ; preds = %2970, %2992
  %2993 = phi i64 [ %3011, %2992 ], [ 1, %2970 ]
  %2994 = phi %"class.skvm::Builder"* [ %3009, %2992 ], [ %2982, %2970 ]
  %2995 = phi i32 [ %3010, %2992 ], [ %2983, %2970 ]
  %2996 = load i32*, i32** %2972, align 16
  %2997 = shl i64 %2993, 32
  %2998 = ashr exact i64 %2997, 32
  %2999 = getelementptr inbounds i32, i32* %2996, i64 %2998
  %3000 = load i32, i32* %2999, align 4
  %3001 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2975, align 8
  %3002 = load i32*, i32** %2978, align 16
  %3003 = getelementptr inbounds i32, i32* %3002, i64 %2998
  %3004 = load i32, i32* %3003, align 4
  %3005 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3001, %"class.skvm::Builder"* %3001, i32 %3000, %"class.skvm::Builder"* %3001, i32 %3004) #12
  %3006 = extractvalue { %"class.skvm::Builder"*, i32 } %3005, 0
  %3007 = extractvalue { %"class.skvm::Builder"*, i32 } %3005, 1
  %3008 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %2994, %"class.skvm::Builder"* %2994, i32 %2995, %"class.skvm::Builder"* %3006, i32 %3007) #12
  %3009 = extractvalue { %"class.skvm::Builder"*, i32 } %3008, 0
  %3010 = extractvalue { %"class.skvm::Builder"*, i32 } %3008, 1
  %3011 = add nuw nsw i64 %2993, 1
  %3012 = load i64, i64* %2985, align 8
  %3013 = lshr i64 %3012, 1
  %3014 = and i64 %3013, 2147483647
  %3015 = icmp ult i64 %3011, %3014
  br i1 %3015, label %2992, label %3016

3016:                                             ; preds = %2992, %2989
  %3017 = phi i64 [ %2991, %2989 ], [ %3014, %2992 ]
  %3018 = phi i32 [ %2983, %2989 ], [ %3010, %2992 ]
  %3019 = phi %"class.skvm::Builder"* [ %2982, %2989 ], [ %3009, %2992 ]
  %3020 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3021 = bitcast i8* %3020 to i64*
  %3022 = load i64, i64* %3021, align 8, !noalias !238
  %3023 = lshr i64 %3022, 1
  %3024 = and i64 %3023, 2147483647
  %3025 = icmp ult i64 %3024, %3017
  %3026 = select i1 %3025, i64 %3017, i64 %3024
  %3027 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3027) #12, !noalias !238
  %3028 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 16
  %3029 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %19, i64 0, i32 0, i32 0, i32 0, i64 24
  %3030 = bitcast i8* %3029 to i64*
  %3031 = bitcast i8* %3028 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3027, i8 -86, i64 16, i1 false) #12, !noalias !238
  store i8* %3027, i8** %3031, align 8, !noalias !238
  store i64 34359738368, i64* %3030, align 8, !noalias !238
  %3032 = trunc i64 %3026 to i32
  %3033 = icmp eq i32 %3032, 0
  br i1 %3033, label %3042, label %3034

3034:                                             ; preds = %3016
  %3035 = bitcast i8* %3028 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3035, i32 %3032, i32 1) #12
  %3036 = load i64, i64* %3030, align 8, !noalias !238
  %3037 = shl nuw nsw i64 %3026, 1
  %3038 = add i64 %3036, %3037
  %3039 = and i64 %3038, 4294967294
  %3040 = and i64 %3036, -4294967295
  %3041 = or i64 %3039, %3040
  store i64 %3041, i64* %3030, align 8, !noalias !238
  br label %3042

3042:                                             ; preds = %3034, %3016
  %3043 = icmp eq i64 %3026, 0
  br i1 %3043, label %3046, label %3044

3044:                                             ; preds = %3042
  %3045 = bitcast i8* %3028 to i32**
  br label %3082

3046:                                             ; preds = %3082, %3042
  %3047 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3048 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3049 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3050 = bitcast i8* %3049 to i64*
  %3051 = bitcast i8* %3047 to i8**
  store i8* %3048, i8** %3051, align 8, !alias.scope !238
  store i64 34359738368, i64* %3050, align 8, !alias.scope !238
  %3052 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %19, %0
  br i1 %3052, label %3053, label %3055

3053:                                             ; preds = %3046
  %3054 = load i64, i64* %3030, align 8, !noalias !238
  br label %3076

3055:                                             ; preds = %3046
  %3056 = bitcast i8* %3047 to %class.SkTArray*
  store i64 34359738368, i64* %3050, align 8, !alias.scope !238
  %3057 = load i64, i64* %3030, align 8, !noalias !238
  %3058 = lshr i64 %3057, 1
  %3059 = trunc i64 %3058 to i32
  %3060 = and i32 %3059, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3056, i32 %3060, i32 0) #12
  %3061 = load i64, i64* %3030, align 8, !noalias !238
  %3062 = and i64 %3061, 4294967294
  %3063 = load i64, i64* %3050, align 8, !alias.scope !238
  %3064 = and i64 %3063, -4294967295
  %3065 = or i64 %3064, %3062
  store i64 %3065, i64* %3050, align 8, !alias.scope !238
  %3066 = shl i64 %3061, 1
  %3067 = and i64 %3066, 8589934588
  %3068 = icmp eq i64 %3067, 0
  br i1 %3068, label %3073, label %3069

3069:                                             ; preds = %3055
  %3070 = load i8*, i8** %3051, align 8, !alias.scope !238
  %3071 = load i8*, i8** %3031, align 8, !noalias !238
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3070, i8* align 1 %3071, i64 %3067, i1 false) #12
  %3072 = load i64, i64* %3030, align 8, !noalias !238
  br label %3073

3073:                                             ; preds = %3069, %3055
  %3074 = phi i64 [ %3061, %3055 ], [ %3072, %3069 ]
  %3075 = and i64 %3074, -4294967295
  store i64 %3075, i64* %3030, align 8, !noalias !238
  br label %3076

3076:                                             ; preds = %3073, %3053
  %3077 = phi i64 [ %3054, %3053 ], [ %3075, %3073 ]
  %3078 = and i64 %3077, 1
  %3079 = icmp eq i64 %3078, 0
  br i1 %3079, label %3116, label %3080

3080:                                             ; preds = %3076
  %3081 = load i8*, i8** %3031, align 8, !noalias !238
  call void @_Z7sk_freePv(i8* %3081) #12
  br label %3116

3082:                                             ; preds = %3082, %3044
  %3083 = phi i64 [ 0, %3044 ], [ %3114, %3082 ]
  %3084 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %2975, align 8
  %3085 = load i64, i64* %3021, align 8
  %3086 = and i64 %3085, 4294967294
  %3087 = icmp eq i64 %3086, 2
  %3088 = load i32*, i32** %2978, align 16
  %3089 = shl i64 %3083, 32
  %3090 = ashr exact i64 %3089, 32
  %3091 = select i1 %3087, i64 0, i64 %3090
  %3092 = getelementptr inbounds i32, i32* %3088, i64 %3091
  %3093 = load i32, i32* %3092, align 4
  %3094 = load i64, i64* %2985, align 8
  %3095 = and i64 %3094, 4294967294
  %3096 = icmp eq i64 %3095, 2
  %3097 = load i32*, i32** %2972, align 16
  %3098 = select i1 %3096, i64 0, i64 %3090
  %3099 = getelementptr inbounds i32, i32* %3097, i64 %3098
  %3100 = load i32, i32* %3099, align 4
  %3101 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3019, i32 1073741824) #12
  %3102 = extractvalue { %"class.skvm::Builder"*, i32 } %3101, 0
  %3103 = extractvalue { %"class.skvm::Builder"*, i32 } %3101, 1
  %3104 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3019, %"class.skvm::Builder"* %3102, i32 %3103, %"class.skvm::Builder"* %3019, i32 %3018) #12
  %3105 = extractvalue { %"class.skvm::Builder"*, i32 } %3104, 0
  %3106 = extractvalue { %"class.skvm::Builder"*, i32 } %3104, 1
  %3107 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3105, %"class.skvm::Builder"* %3105, i32 %3106, %"class.skvm::Builder"* %3084, i32 %3100) #12
  %3108 = extractvalue { %"class.skvm::Builder"*, i32 } %3107, 0
  %3109 = extractvalue { %"class.skvm::Builder"*, i32 } %3107, 1
  %3110 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3084, %"class.skvm::Builder"* %3084, i32 %3093, %"class.skvm::Builder"* %3108, i32 %3109) #12
  %3111 = extractvalue { %"class.skvm::Builder"*, i32 } %3110, 1
  %3112 = load i32*, i32** %3045, align 8, !noalias !238
  %3113 = getelementptr inbounds i32, i32* %3112, i64 %3090
  store i32 %3111, i32* %3113, align 4
  %3114 = add nuw nsw i64 %3083, 1
  %3115 = icmp ult i64 %3114, %3026
  br i1 %3115, label %3082, label %3046

3116:                                             ; preds = %3076, %3080
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3027) #12, !noalias !238
  br label %5485

3117:                                             ; preds = %343
  %3118 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %3119 = bitcast i8* %3118 to i32**
  %3120 = load i32*, i32** %3119, align 16
  %3121 = load i32, i32* %3120, align 4
  %3122 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %3123 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3122, align 8
  %3124 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %3125 = bitcast i8* %3124 to i32**
  %3126 = load i32*, i32** %3125, align 16
  %3127 = load i32, i32* %3126, align 4
  %3128 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3129 = bitcast i8* %3128 to i32**
  %3130 = load i32*, i32** %3129, align 16
  %3131 = load i32, i32* %3130, align 4
  %3132 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3123, %"class.skvm::Builder"* %3123, i32 %3127, %"class.skvm::Builder"* %3123, i32 %3131) #12
  %3133 = extractvalue { %"class.skvm::Builder"*, i32 } %3132, 0
  %3134 = extractvalue { %"class.skvm::Builder"*, i32 } %3132, 1
  %3135 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %3136 = bitcast i8* %3135 to i64*
  %3137 = load i64, i64* %3136, align 8
  %3138 = and i64 %3137, 4294967292
  %3139 = icmp eq i64 %3138, 0
  br i1 %3139, label %3164, label %3140

3140:                                             ; preds = %3117, %3140
  %3141 = phi i64 [ %3159, %3140 ], [ 1, %3117 ]
  %3142 = phi %"class.skvm::Builder"* [ %3157, %3140 ], [ %3133, %3117 ]
  %3143 = phi i32 [ %3158, %3140 ], [ %3134, %3117 ]
  %3144 = load i32*, i32** %3125, align 16
  %3145 = shl i64 %3141, 32
  %3146 = ashr exact i64 %3145, 32
  %3147 = getelementptr inbounds i32, i32* %3144, i64 %3146
  %3148 = load i32, i32* %3147, align 4
  %3149 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3122, align 8
  %3150 = load i32*, i32** %3129, align 16
  %3151 = getelementptr inbounds i32, i32* %3150, i64 %3146
  %3152 = load i32, i32* %3151, align 4
  %3153 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3149, %"class.skvm::Builder"* %3149, i32 %3148, %"class.skvm::Builder"* %3149, i32 %3152) #12
  %3154 = extractvalue { %"class.skvm::Builder"*, i32 } %3153, 0
  %3155 = extractvalue { %"class.skvm::Builder"*, i32 } %3153, 1
  %3156 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3142, %"class.skvm::Builder"* %3142, i32 %3143, %"class.skvm::Builder"* %3154, i32 %3155) #12
  %3157 = extractvalue { %"class.skvm::Builder"*, i32 } %3156, 0
  %3158 = extractvalue { %"class.skvm::Builder"*, i32 } %3156, 1
  %3159 = add nuw nsw i64 %3141, 1
  %3160 = load i64, i64* %3136, align 8
  %3161 = lshr i64 %3160, 1
  %3162 = and i64 %3161, 2147483647
  %3163 = icmp ult i64 %3159, %3162
  br i1 %3163, label %3140, label %3164

3164:                                             ; preds = %3140, %3117
  %3165 = phi i32 [ %3134, %3117 ], [ %3158, %3140 ]
  %3166 = phi %"class.skvm::Builder"* [ %3133, %3117 ], [ %3157, %3140 ]
  %3167 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3123, %"class.skvm::Builder"* %3123, i32 %3121, %"class.skvm::Builder"* %3123, i32 %3121) #12
  %3168 = extractvalue { %"class.skvm::Builder"*, i32 } %3167, 0
  %3169 = extractvalue { %"class.skvm::Builder"*, i32 } %3167, 1
  %3170 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3166, %"class.skvm::Builder"* %3166, i32 %3165, %"class.skvm::Builder"* %3166, i32 %3165) #12
  %3171 = extractvalue { %"class.skvm::Builder"*, i32 } %3170, 0
  %3172 = extractvalue { %"class.skvm::Builder"*, i32 } %3170, 1
  %3173 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3171, i32 1065353216) #12
  %3174 = extractvalue { %"class.skvm::Builder"*, i32 } %3173, 0
  %3175 = extractvalue { %"class.skvm::Builder"*, i32 } %3173, 1
  %3176 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3171, %"class.skvm::Builder"* %3174, i32 %3175, %"class.skvm::Builder"* %3171, i32 %3172) #12
  %3177 = extractvalue { %"class.skvm::Builder"*, i32 } %3176, 0
  %3178 = extractvalue { %"class.skvm::Builder"*, i32 } %3176, 1
  %3179 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3168, %"class.skvm::Builder"* %3168, i32 %3169, %"class.skvm::Builder"* %3177, i32 %3178) #12
  %3180 = extractvalue { %"class.skvm::Builder"*, i32 } %3179, 0
  %3181 = extractvalue { %"class.skvm::Builder"*, i32 } %3179, 1
  %3182 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3180, i32 1065353216) #12
  %3183 = extractvalue { %"class.skvm::Builder"*, i32 } %3182, 0
  %3184 = extractvalue { %"class.skvm::Builder"*, i32 } %3182, 1
  %3185 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3180, %"class.skvm::Builder"* %3183, i32 %3184, %"class.skvm::Builder"* %3180, i32 %3181) #12
  %3186 = extractvalue { %"class.skvm::Builder"*, i32 } %3185, 0
  %3187 = extractvalue { %"class.skvm::Builder"*, i32 } %3185, 1
  %3188 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3189 = bitcast i8* %3188 to i64*
  %3190 = load i64, i64* %3189, align 8, !noalias !241
  %3191 = lshr i64 %3190, 1
  %3192 = and i64 %3191, 2147483647
  %3193 = load i64, i64* %3136, align 8, !noalias !241
  %3194 = lshr i64 %3193, 1
  %3195 = and i64 %3194, 2147483647
  %3196 = icmp ult i64 %3192, %3195
  %3197 = select i1 %3196, i64 %3195, i64 %3192
  %3198 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3198) #12, !noalias !241
  %3199 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 16
  %3200 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %18, i64 0, i32 0, i32 0, i32 0, i64 24
  %3201 = bitcast i8* %3200 to i64*
  %3202 = bitcast i8* %3199 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3198, i8 -86, i64 16, i1 false) #12, !noalias !241
  store i8* %3198, i8** %3202, align 8, !noalias !241
  store i64 34359738368, i64* %3201, align 8, !noalias !241
  %3203 = trunc i64 %3197 to i32
  %3204 = icmp eq i32 %3203, 0
  br i1 %3204, label %3213, label %3205

3205:                                             ; preds = %3164
  %3206 = bitcast i8* %3199 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3206, i32 %3203, i32 1) #12
  %3207 = load i64, i64* %3201, align 8, !noalias !241
  %3208 = shl nuw nsw i64 %3197, 1
  %3209 = add i64 %3207, %3208
  %3210 = and i64 %3209, 4294967294
  %3211 = and i64 %3207, -4294967295
  %3212 = or i64 %3210, %3211
  store i64 %3212, i64* %3201, align 8, !noalias !241
  br label %3213

3213:                                             ; preds = %3205, %3164
  %3214 = icmp eq i64 %3197, 0
  br i1 %3214, label %3221, label %3215

3215:                                             ; preds = %3213
  %3216 = bitcast { %"class.skvm::Builder"*, i32 }* %17 to i8*
  %3217 = bitcast { %"class.skvm::Builder"*, i32 }* %17 to %"struct.skvm::I32"*
  %3218 = bitcast { %"class.skvm::Builder"*, i32 }* %17 to i64*
  %3219 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %17, i64 0, i32 1
  %3220 = bitcast i8* %3199 to i32**
  br label %3257

3221:                                             ; preds = %3257, %3213
  %3222 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3223 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3224 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3225 = bitcast i8* %3224 to i64*
  %3226 = bitcast i8* %3222 to i8**
  store i8* %3223, i8** %3226, align 8, !alias.scope !241
  store i64 34359738368, i64* %3225, align 8, !alias.scope !241
  %3227 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %18, %0
  br i1 %3227, label %3228, label %3230

3228:                                             ; preds = %3221
  %3229 = load i64, i64* %3201, align 8, !noalias !241
  br label %3251

3230:                                             ; preds = %3221
  %3231 = bitcast i8* %3222 to %class.SkTArray*
  store i64 34359738368, i64* %3225, align 8, !alias.scope !241
  %3232 = load i64, i64* %3201, align 8, !noalias !241
  %3233 = lshr i64 %3232, 1
  %3234 = trunc i64 %3233 to i32
  %3235 = and i32 %3234, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3231, i32 %3235, i32 0) #12
  %3236 = load i64, i64* %3201, align 8, !noalias !241
  %3237 = and i64 %3236, 4294967294
  %3238 = load i64, i64* %3225, align 8, !alias.scope !241
  %3239 = and i64 %3238, -4294967295
  %3240 = or i64 %3239, %3237
  store i64 %3240, i64* %3225, align 8, !alias.scope !241
  %3241 = shl i64 %3236, 1
  %3242 = and i64 %3241, 8589934588
  %3243 = icmp eq i64 %3242, 0
  br i1 %3243, label %3248, label %3244

3244:                                             ; preds = %3230
  %3245 = load i8*, i8** %3226, align 8, !alias.scope !241
  %3246 = load i8*, i8** %3202, align 8, !noalias !241
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3245, i8* align 1 %3246, i64 %3242, i1 false) #12
  %3247 = load i64, i64* %3201, align 8, !noalias !241
  br label %3248

3248:                                             ; preds = %3244, %3230
  %3249 = phi i64 [ %3236, %3230 ], [ %3247, %3244 ]
  %3250 = and i64 %3249, -4294967295
  store i64 %3250, i64* %3201, align 8, !noalias !241
  br label %3251

3251:                                             ; preds = %3248, %3228
  %3252 = phi i64 [ %3229, %3228 ], [ %3250, %3248 ]
  %3253 = and i64 %3252, 1
  %3254 = icmp eq i64 %3253, 0
  br i1 %3254, label %3310, label %3255

3255:                                             ; preds = %3251
  %3256 = load i8*, i8** %3202, align 8, !noalias !241
  call void @_Z7sk_freePv(i8* %3256) #12
  br label %3310

3257:                                             ; preds = %3257, %3215
  %3258 = phi i64 [ 0, %3215 ], [ %3308, %3257 ]
  %3259 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3122, align 8
  %3260 = load i64, i64* %3189, align 8
  %3261 = and i64 %3260, 4294967294
  %3262 = icmp eq i64 %3261, 2
  %3263 = load i32*, i32** %3129, align 16
  %3264 = shl i64 %3258, 32
  %3265 = ashr exact i64 %3264, 32
  %3266 = select i1 %3262, i64 0, i64 %3265
  %3267 = getelementptr inbounds i32, i32* %3263, i64 %3266
  %3268 = load i32, i32* %3267, align 4
  %3269 = load i64, i64* %3136, align 8
  %3270 = and i64 %3269, 4294967294
  %3271 = icmp eq i64 %3270, 2
  %3272 = load i32*, i32** %3125, align 16
  %3273 = select i1 %3271, i64 0, i64 %3265
  %3274 = getelementptr inbounds i32, i32* %3272, i64 %3273
  %3275 = load i32, i32* %3274, align 4
  %3276 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3186, i32 0) #12
  %3277 = extractvalue { %"class.skvm::Builder"*, i32 } %3276, 0
  %3278 = extractvalue { %"class.skvm::Builder"*, i32 } %3276, 1
  %3279 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %3186, %"class.skvm::Builder"* %3186, i32 %3187, %"class.skvm::Builder"* %3277, i32 %3278) #12
  %3280 = extractvalue { %"class.skvm::Builder"*, i32 } %3279, 0
  %3281 = extractvalue { %"class.skvm::Builder"*, i32 } %3279, 1
  %3282 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3123, %"class.skvm::Builder"* %3123, i32 %3121, %"class.skvm::Builder"* %3259, i32 %3268) #12
  %3283 = extractvalue { %"class.skvm::Builder"*, i32 } %3282, 0
  %3284 = extractvalue { %"class.skvm::Builder"*, i32 } %3282, 1
  %3285 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3123, %"class.skvm::Builder"* %3123, i32 %3121, %"class.skvm::Builder"* %3166, i32 %3165) #12
  %3286 = extractvalue { %"class.skvm::Builder"*, i32 } %3285, 0
  %3287 = extractvalue { %"class.skvm::Builder"*, i32 } %3285, 1
  %3288 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"* %3186, %"class.skvm::Builder"* %3186, i32 %3187) #12
  %3289 = extractvalue { %"class.skvm::Builder"*, i32 } %3288, 0
  %3290 = extractvalue { %"class.skvm::Builder"*, i32 } %3288, 1
  %3291 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3286, %"class.skvm::Builder"* %3286, i32 %3287, %"class.skvm::Builder"* %3289, i32 %3290) #12
  %3292 = extractvalue { %"class.skvm::Builder"*, i32 } %3291, 0
  %3293 = extractvalue { %"class.skvm::Builder"*, i32 } %3291, 1
  %3294 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3292, %"class.skvm::Builder"* %3292, i32 %3293, %"class.skvm::Builder"* %3259, i32 %3275) #12
  %3295 = extractvalue { %"class.skvm::Builder"*, i32 } %3294, 0
  %3296 = extractvalue { %"class.skvm::Builder"*, i32 } %3294, 1
  %3297 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3283, %"class.skvm::Builder"* %3283, i32 %3284, %"class.skvm::Builder"* %3295, i32 %3296) #12
  %3298 = extractvalue { %"class.skvm::Builder"*, i32 } %3297, 0
  %3299 = extractvalue { %"class.skvm::Builder"*, i32 } %3297, 1
  %3300 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3280, i32 0) #12
  %3301 = extractvalue { %"class.skvm::Builder"*, i32 } %3300, 0
  %3302 = extractvalue { %"class.skvm::Builder"*, i32 } %3300, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3216) #12, !noalias !241
  %3303 = ptrtoint %"class.skvm::Builder"* %3298 to i64
  store i64 %3303, i64* %3218, align 8, !noalias !241
  store i32 %3299, i32* %3219, align 8, !noalias !241
  %3304 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6selectENS_3I32ES1_S1_(%"class.skvm::Builder"* %3280, %"class.skvm::Builder"* %3280, i32 %3281, %"class.skvm::Builder"* %3301, i32 %3302, %"struct.skvm::I32"* nonnull byval(%"struct.skvm::I32") align 8 %3217) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3216) #12, !noalias !241
  %3305 = extractvalue { %"class.skvm::Builder"*, i32 } %3304, 1
  %3306 = load i32*, i32** %3220, align 8, !noalias !241
  %3307 = getelementptr inbounds i32, i32* %3306, i64 %3265
  store i32 %3305, i32* %3307, align 4
  %3308 = add nuw nsw i64 %3258, 1
  %3309 = icmp ult i64 %3308, %3197
  br i1 %3309, label %3257, label %3221

3310:                                             ; preds = %3251, %3255
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3198) #12, !noalias !241
  br label %5485

3311:                                             ; preds = %343
  %3312 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3313 = bitcast i8* %3312 to i64*
  %3314 = load i64, i64* %3313, align 8, !noalias !244
  %3315 = lshr i64 %3314, 1
  %3316 = and i64 %3315, 2147483647
  %3317 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %3318 = bitcast i8* %3317 to i64*
  %3319 = load i64, i64* %3318, align 8, !noalias !244
  %3320 = lshr i64 %3319, 1
  %3321 = and i64 %3320, 2147483647
  %3322 = icmp ult i64 %3316, %3321
  %3323 = select i1 %3322, i64 %3321, i64 %3316
  %3324 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3324) #12, !noalias !244
  %3325 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 16
  %3326 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %16, i64 0, i32 0, i32 0, i32 0, i64 24
  %3327 = bitcast i8* %3326 to i64*
  %3328 = bitcast i8* %3325 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3324, i8 -86, i64 16, i1 false) #12, !noalias !244
  store i8* %3324, i8** %3328, align 8, !noalias !244
  store i64 34359738368, i64* %3327, align 8, !noalias !244
  %3329 = trunc i64 %3323 to i32
  %3330 = icmp eq i32 %3329, 0
  br i1 %3330, label %3339, label %3331

3331:                                             ; preds = %3311
  %3332 = bitcast i8* %3325 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3332, i32 %3329, i32 1) #12
  %3333 = load i64, i64* %3327, align 8, !noalias !244
  %3334 = shl nuw nsw i64 %3323, 1
  %3335 = add i64 %3333, %3334
  %3336 = and i64 %3335, 4294967294
  %3337 = and i64 %3333, -4294967295
  %3338 = or i64 %3336, %3337
  store i64 %3338, i64* %3327, align 8, !noalias !244
  br label %3339

3339:                                             ; preds = %3331, %3311
  %3340 = icmp eq i64 %3323, 0
  br i1 %3340, label %3348, label %3341

3341:                                             ; preds = %3339
  %3342 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %3343 = bitcast i8* %3325 to i32**
  %3344 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3345 = bitcast i8* %3344 to i32**
  %3346 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %3347 = bitcast i8* %3346 to i32**
  br label %3384

3348:                                             ; preds = %3384, %3339
  %3349 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3350 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3351 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3352 = bitcast i8* %3351 to i64*
  %3353 = bitcast i8* %3349 to i8**
  store i8* %3350, i8** %3353, align 8, !alias.scope !244
  store i64 34359738368, i64* %3352, align 8, !alias.scope !244
  %3354 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %16, %0
  br i1 %3354, label %3355, label %3357

3355:                                             ; preds = %3348
  %3356 = load i64, i64* %3327, align 8, !noalias !244
  br label %3378

3357:                                             ; preds = %3348
  %3358 = bitcast i8* %3349 to %class.SkTArray*
  store i64 34359738368, i64* %3352, align 8, !alias.scope !244
  %3359 = load i64, i64* %3327, align 8, !noalias !244
  %3360 = lshr i64 %3359, 1
  %3361 = trunc i64 %3360 to i32
  %3362 = and i32 %3361, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3358, i32 %3362, i32 0) #12
  %3363 = load i64, i64* %3327, align 8, !noalias !244
  %3364 = and i64 %3363, 4294967294
  %3365 = load i64, i64* %3352, align 8, !alias.scope !244
  %3366 = and i64 %3365, -4294967295
  %3367 = or i64 %3366, %3364
  store i64 %3367, i64* %3352, align 8, !alias.scope !244
  %3368 = shl i64 %3363, 1
  %3369 = and i64 %3368, 8589934588
  %3370 = icmp eq i64 %3369, 0
  br i1 %3370, label %3375, label %3371

3371:                                             ; preds = %3357
  %3372 = load i8*, i8** %3353, align 8, !alias.scope !244
  %3373 = load i8*, i8** %3328, align 8, !noalias !244
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3372, i8* align 1 %3373, i64 %3369, i1 false) #12
  %3374 = load i64, i64* %3327, align 8, !noalias !244
  br label %3375

3375:                                             ; preds = %3371, %3357
  %3376 = phi i64 [ %3363, %3357 ], [ %3374, %3371 ]
  %3377 = and i64 %3376, -4294967295
  store i64 %3377, i64* %3327, align 8, !noalias !244
  br label %3378

3378:                                             ; preds = %3375, %3355
  %3379 = phi i64 [ %3356, %3355 ], [ %3377, %3375 ]
  %3380 = and i64 %3379, 1
  %3381 = icmp eq i64 %3380, 0
  br i1 %3381, label %3409, label %3382

3382:                                             ; preds = %3378
  %3383 = load i8*, i8** %3328, align 8, !noalias !244
  call void @_Z7sk_freePv(i8* %3383) #12
  br label %3409

3384:                                             ; preds = %3384, %3341
  %3385 = phi i64 [ 0, %3341 ], [ %3407, %3384 ]
  %3386 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3342, align 8
  %3387 = load i64, i64* %3313, align 8
  %3388 = and i64 %3387, 4294967294
  %3389 = icmp eq i64 %3388, 2
  %3390 = load i32*, i32** %3345, align 16
  %3391 = shl i64 %3385, 32
  %3392 = ashr exact i64 %3391, 32
  %3393 = select i1 %3389, i64 0, i64 %3392
  %3394 = getelementptr inbounds i32, i32* %3390, i64 %3393
  %3395 = load i32, i32* %3394, align 4
  %3396 = load i64, i64* %3318, align 8
  %3397 = and i64 %3396, 4294967294
  %3398 = icmp eq i64 %3397, 2
  %3399 = load i32*, i32** %3347, align 16
  %3400 = select i1 %3398, i64 0, i64 %3392
  %3401 = getelementptr inbounds i32, i32* %3399, i64 %3400
  %3402 = load i32, i32* %3401, align 4
  %3403 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3386, %"class.skvm::Builder"* %3386, i32 %3395, %"class.skvm::Builder"* %3386, i32 %3402) #12
  %3404 = extractvalue { %"class.skvm::Builder"*, i32 } %3403, 1
  %3405 = load i32*, i32** %3343, align 8, !noalias !244
  %3406 = getelementptr inbounds i32, i32* %3405, i64 %3392
  store i32 %3404, i32* %3406, align 4
  %3407 = add nuw nsw i64 %3385, 1
  %3408 = icmp ult i64 %3407, %3323
  br i1 %3408, label %3384, label %3348

3409:                                             ; preds = %3378, %3382
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3324) #12, !noalias !244
  br label %5485

3410:                                             ; preds = %343
  %3411 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3412 = bitcast i8* %3411 to i64*
  %3413 = load i64, i64* %3412, align 8
  %3414 = lshr i64 %3413, 1
  %3415 = and i64 %3414, 2147483647
  switch i64 %3415, label %4202 [
    i64 4, label %3416
    i64 9, label %3491
    i64 16, label %3707
  ]

3416:                                             ; preds = %3410
  %3417 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3418 = bitcast i8* %3417 to i32**
  %3419 = load i32*, i32** %3418, align 16, !noalias !247
  %3420 = load i32, i32* %3419, align 4, !noalias !247
  %3421 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %3422 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3421, align 8, !noalias !247
  %3423 = getelementptr inbounds i32, i32* %3419, i64 1
  %3424 = load i32, i32* %3423, align 4, !noalias !247
  %3425 = getelementptr inbounds i32, i32* %3419, i64 2
  %3426 = load i32, i32* %3425, align 4, !noalias !247
  %3427 = getelementptr inbounds i32, i32* %3419, i64 3
  %3428 = load i32, i32* %3427, align 4, !noalias !247
  %3429 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3422, i32 %3420, %"class.skvm::Builder"* %3422, i32 %3428) #12, !noalias !247
  %3430 = extractvalue { %"class.skvm::Builder"*, i32 } %3429, 0
  %3431 = extractvalue { %"class.skvm::Builder"*, i32 } %3429, 1
  %3432 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3422, i32 %3424, %"class.skvm::Builder"* %3422, i32 %3426) #12, !noalias !247
  %3433 = extractvalue { %"class.skvm::Builder"*, i32 } %3432, 0
  %3434 = extractvalue { %"class.skvm::Builder"*, i32 } %3432, 1
  %3435 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3430, %"class.skvm::Builder"* %3430, i32 %3431, %"class.skvm::Builder"* %3433, i32 %3434) #12, !noalias !247
  %3436 = extractvalue { %"class.skvm::Builder"*, i32 } %3435, 0
  %3437 = extractvalue { %"class.skvm::Builder"*, i32 } %3435, 1
  %3438 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3436, i32 1065353216) #12, !noalias !247
  %3439 = extractvalue { %"class.skvm::Builder"*, i32 } %3438, 0
  %3440 = extractvalue { %"class.skvm::Builder"*, i32 } %3438, 1
  %3441 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %3436, %"class.skvm::Builder"* %3439, i32 %3440, %"class.skvm::Builder"* %3436, i32 %3437) #12, !noalias !247
  %3442 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %3442, i8 -86, i64 16, i1 false) #12, !alias.scope !247
  %3443 = load i64, i64* %3412, align 8, !noalias !247
  %3444 = lshr i64 %3443, 1
  %3445 = and i64 %3444, 2147483647
  %3446 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3447 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3448 = bitcast i8* %3447 to i64*
  %3449 = bitcast i8* %3446 to i8**
  store i8* %3442, i8** %3449, align 8, !alias.scope !247
  store i64 34359738368, i64* %3448, align 8, !alias.scope !247
  %3450 = trunc i64 %3445 to i32
  %3451 = icmp eq i32 %3450, 0
  br i1 %3451, label %3460, label %3452

3452:                                             ; preds = %3416
  %3453 = bitcast i8* %3446 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3453, i32 %3450, i32 1) #12
  %3454 = load i64, i64* %3448, align 8, !alias.scope !247
  %3455 = shl nuw nsw i64 %3445, 1
  %3456 = add i64 %3454, %3455
  %3457 = and i64 %3456, 4294967294
  %3458 = and i64 %3454, -4294967295
  %3459 = or i64 %3457, %3458
  store i64 %3459, i64* %3448, align 8, !alias.scope !247
  br label %3460

3460:                                             ; preds = %3416, %3452
  %3461 = extractvalue { %"class.skvm::Builder"*, i32 } %3441, 0
  %3462 = extractvalue { %"class.skvm::Builder"*, i32 } %3441, 1
  %3463 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3422, i32 %3428, %"class.skvm::Builder"* %3461, i32 %3462) #12
  %3464 = extractvalue { %"class.skvm::Builder"*, i32 } %3463, 1
  %3465 = bitcast i8* %3446 to i32**
  %3466 = load i32*, i32** %3465, align 8, !alias.scope !247
  store i32 %3464, i32* %3466, align 4
  %3467 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3422, i32 0) #12
  %3468 = extractvalue { %"class.skvm::Builder"*, i32 } %3467, 0
  %3469 = extractvalue { %"class.skvm::Builder"*, i32 } %3467, 1
  %3470 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3468, i32 %3469, %"class.skvm::Builder"* %3422, i32 %3424) #12
  %3471 = extractvalue { %"class.skvm::Builder"*, i32 } %3470, 0
  %3472 = extractvalue { %"class.skvm::Builder"*, i32 } %3470, 1
  %3473 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3471, %"class.skvm::Builder"* %3471, i32 %3472, %"class.skvm::Builder"* %3461, i32 %3462) #12
  %3474 = extractvalue { %"class.skvm::Builder"*, i32 } %3473, 1
  %3475 = load i32*, i32** %3465, align 8, !alias.scope !247
  %3476 = getelementptr inbounds i32, i32* %3475, i64 1
  store i32 %3474, i32* %3476, align 4
  %3477 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3422, i32 0) #12
  %3478 = extractvalue { %"class.skvm::Builder"*, i32 } %3477, 0
  %3479 = extractvalue { %"class.skvm::Builder"*, i32 } %3477, 1
  %3480 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3478, i32 %3479, %"class.skvm::Builder"* %3422, i32 %3426) #12
  %3481 = extractvalue { %"class.skvm::Builder"*, i32 } %3480, 0
  %3482 = extractvalue { %"class.skvm::Builder"*, i32 } %3480, 1
  %3483 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3481, %"class.skvm::Builder"* %3481, i32 %3482, %"class.skvm::Builder"* %3461, i32 %3462) #12
  %3484 = extractvalue { %"class.skvm::Builder"*, i32 } %3483, 1
  %3485 = load i32*, i32** %3465, align 8, !alias.scope !247
  %3486 = getelementptr inbounds i32, i32* %3485, i64 2
  store i32 %3484, i32* %3486, align 4
  %3487 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3422, %"class.skvm::Builder"* %3422, i32 %3420, %"class.skvm::Builder"* %3461, i32 %3462) #12
  %3488 = extractvalue { %"class.skvm::Builder"*, i32 } %3487, 1
  %3489 = load i32*, i32** %3465, align 8, !alias.scope !247
  %3490 = getelementptr inbounds i32, i32* %3489, i64 3
  store i32 %3488, i32* %3490, align 4
  br label %5485

3491:                                             ; preds = %3410
  %3492 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3493 = bitcast i8* %3492 to i32**
  %3494 = load i32*, i32** %3493, align 16, !noalias !250
  %3495 = load i32, i32* %3494, align 4, !noalias !250
  %3496 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %3497 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3496, align 8, !noalias !250
  %3498 = getelementptr inbounds i32, i32* %3494, i64 3
  %3499 = load i32, i32* %3498, align 4, !noalias !250
  %3500 = getelementptr inbounds i32, i32* %3494, i64 6
  %3501 = load i32, i32* %3500, align 4, !noalias !250
  %3502 = getelementptr inbounds i32, i32* %3494, i64 1
  %3503 = load i32, i32* %3502, align 4, !noalias !250
  %3504 = getelementptr inbounds i32, i32* %3494, i64 4
  %3505 = load i32, i32* %3504, align 4, !noalias !250
  %3506 = getelementptr inbounds i32, i32* %3494, i64 7
  %3507 = load i32, i32* %3506, align 4, !noalias !250
  %3508 = getelementptr inbounds i32, i32* %3494, i64 2
  %3509 = load i32, i32* %3508, align 4, !noalias !250
  %3510 = getelementptr inbounds i32, i32* %3494, i64 5
  %3511 = load i32, i32* %3510, align 4, !noalias !250
  %3512 = getelementptr inbounds i32, i32* %3494, i64 8
  %3513 = load i32, i32* %3512, align 4, !noalias !250
  %3514 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3505) #12, !noalias !250
  %3515 = extractvalue { %"class.skvm::Builder"*, i32 } %3514, 0
  %3516 = extractvalue { %"class.skvm::Builder"*, i32 } %3514, 1
  %3517 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3515, %"class.skvm::Builder"* %3515, i32 %3516, %"class.skvm::Builder"* %3497, i32 %3513) #12, !noalias !250
  %3518 = extractvalue { %"class.skvm::Builder"*, i32 } %3517, 0
  %3519 = extractvalue { %"class.skvm::Builder"*, i32 } %3517, 1
  %3520 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3507) #12, !noalias !250
  %3521 = extractvalue { %"class.skvm::Builder"*, i32 } %3520, 0
  %3522 = extractvalue { %"class.skvm::Builder"*, i32 } %3520, 1
  %3523 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3521, %"class.skvm::Builder"* %3521, i32 %3522, %"class.skvm::Builder"* %3497, i32 %3509) #12, !noalias !250
  %3524 = extractvalue { %"class.skvm::Builder"*, i32 } %3523, 0
  %3525 = extractvalue { %"class.skvm::Builder"*, i32 } %3523, 1
  %3526 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3518, %"class.skvm::Builder"* %3518, i32 %3519, %"class.skvm::Builder"* %3524, i32 %3525) #12, !noalias !250
  %3527 = extractvalue { %"class.skvm::Builder"*, i32 } %3526, 0
  %3528 = extractvalue { %"class.skvm::Builder"*, i32 } %3526, 1
  %3529 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3503) #12, !noalias !250
  %3530 = extractvalue { %"class.skvm::Builder"*, i32 } %3529, 0
  %3531 = extractvalue { %"class.skvm::Builder"*, i32 } %3529, 1
  %3532 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3530, %"class.skvm::Builder"* %3530, i32 %3531, %"class.skvm::Builder"* %3497, i32 %3511) #12, !noalias !250
  %3533 = extractvalue { %"class.skvm::Builder"*, i32 } %3532, 0
  %3534 = extractvalue { %"class.skvm::Builder"*, i32 } %3532, 1
  %3535 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3527, %"class.skvm::Builder"* %3527, i32 %3528, %"class.skvm::Builder"* %3533, i32 %3534) #12, !noalias !250
  %3536 = extractvalue { %"class.skvm::Builder"*, i32 } %3535, 0
  %3537 = extractvalue { %"class.skvm::Builder"*, i32 } %3535, 1
  %3538 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3507) #12, !noalias !250
  %3539 = extractvalue { %"class.skvm::Builder"*, i32 } %3538, 0
  %3540 = extractvalue { %"class.skvm::Builder"*, i32 } %3538, 1
  %3541 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3539, %"class.skvm::Builder"* %3539, i32 %3540, %"class.skvm::Builder"* %3497, i32 %3511) #12, !noalias !250
  %3542 = extractvalue { %"class.skvm::Builder"*, i32 } %3541, 0
  %3543 = extractvalue { %"class.skvm::Builder"*, i32 } %3541, 1
  %3544 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3536, %"class.skvm::Builder"* %3536, i32 %3537, %"class.skvm::Builder"* %3542, i32 %3543) #12, !noalias !250
  %3545 = extractvalue { %"class.skvm::Builder"*, i32 } %3544, 0
  %3546 = extractvalue { %"class.skvm::Builder"*, i32 } %3544, 1
  %3547 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3503) #12, !noalias !250
  %3548 = extractvalue { %"class.skvm::Builder"*, i32 } %3547, 0
  %3549 = extractvalue { %"class.skvm::Builder"*, i32 } %3547, 1
  %3550 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3548, %"class.skvm::Builder"* %3548, i32 %3549, %"class.skvm::Builder"* %3497, i32 %3513) #12, !noalias !250
  %3551 = extractvalue { %"class.skvm::Builder"*, i32 } %3550, 0
  %3552 = extractvalue { %"class.skvm::Builder"*, i32 } %3550, 1
  %3553 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3545, %"class.skvm::Builder"* %3545, i32 %3546, %"class.skvm::Builder"* %3551, i32 %3552) #12, !noalias !250
  %3554 = extractvalue { %"class.skvm::Builder"*, i32 } %3553, 0
  %3555 = extractvalue { %"class.skvm::Builder"*, i32 } %3553, 1
  %3556 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3505) #12, !noalias !250
  %3557 = extractvalue { %"class.skvm::Builder"*, i32 } %3556, 0
  %3558 = extractvalue { %"class.skvm::Builder"*, i32 } %3556, 1
  %3559 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3557, %"class.skvm::Builder"* %3557, i32 %3558, %"class.skvm::Builder"* %3497, i32 %3509) #12, !noalias !250
  %3560 = extractvalue { %"class.skvm::Builder"*, i32 } %3559, 0
  %3561 = extractvalue { %"class.skvm::Builder"*, i32 } %3559, 1
  %3562 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3554, %"class.skvm::Builder"* %3554, i32 %3555, %"class.skvm::Builder"* %3560, i32 %3561) #12, !noalias !250
  %3563 = extractvalue { %"class.skvm::Builder"*, i32 } %3562, 0
  %3564 = extractvalue { %"class.skvm::Builder"*, i32 } %3562, 1
  %3565 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3563, i32 1065353216) #12, !noalias !250
  %3566 = extractvalue { %"class.skvm::Builder"*, i32 } %3565, 0
  %3567 = extractvalue { %"class.skvm::Builder"*, i32 } %3565, 1
  %3568 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %3563, %"class.skvm::Builder"* %3566, i32 %3567, %"class.skvm::Builder"* %3563, i32 %3564) #12, !noalias !250
  %3569 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %3569, i8 -86, i64 16, i1 false) #12, !alias.scope !250
  %3570 = load i64, i64* %3412, align 8, !noalias !250
  %3571 = lshr i64 %3570, 1
  %3572 = and i64 %3571, 2147483647
  %3573 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3574 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3575 = bitcast i8* %3574 to i64*
  %3576 = bitcast i8* %3573 to i8**
  store i8* %3569, i8** %3576, align 8, !alias.scope !250
  store i64 34359738368, i64* %3575, align 8, !alias.scope !250
  %3577 = trunc i64 %3572 to i32
  %3578 = icmp eq i32 %3577, 0
  br i1 %3578, label %3587, label %3579

3579:                                             ; preds = %3491
  %3580 = bitcast i8* %3573 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3580, i32 %3577, i32 1) #12
  %3581 = load i64, i64* %3575, align 8, !alias.scope !250
  %3582 = shl nuw nsw i64 %3572, 1
  %3583 = add i64 %3581, %3582
  %3584 = and i64 %3583, 4294967294
  %3585 = and i64 %3581, -4294967295
  %3586 = or i64 %3584, %3585
  store i64 %3586, i64* %3575, align 8, !alias.scope !250
  br label %3587

3587:                                             ; preds = %3491, %3579
  %3588 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3505, %"class.skvm::Builder"* %3497, i32 %3513) #12
  %3589 = extractvalue { %"class.skvm::Builder"*, i32 } %3588, 0
  %3590 = extractvalue { %"class.skvm::Builder"*, i32 } %3588, 1
  %3591 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3507, %"class.skvm::Builder"* %3497, i32 %3511) #12
  %3592 = extractvalue { %"class.skvm::Builder"*, i32 } %3591, 0
  %3593 = extractvalue { %"class.skvm::Builder"*, i32 } %3591, 1
  %3594 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3589, %"class.skvm::Builder"* %3589, i32 %3590, %"class.skvm::Builder"* %3592, i32 %3593) #12
  %3595 = extractvalue { %"class.skvm::Builder"*, i32 } %3594, 0
  %3596 = extractvalue { %"class.skvm::Builder"*, i32 } %3594, 1
  %3597 = extractvalue { %"class.skvm::Builder"*, i32 } %3568, 0
  %3598 = extractvalue { %"class.skvm::Builder"*, i32 } %3568, 1
  %3599 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3595, %"class.skvm::Builder"* %3595, i32 %3596, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3600 = extractvalue { %"class.skvm::Builder"*, i32 } %3599, 1
  %3601 = bitcast i8* %3573 to i32**
  %3602 = load i32*, i32** %3601, align 8, !alias.scope !250
  store i32 %3600, i32* %3602, align 4
  %3603 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3507, %"class.skvm::Builder"* %3497, i32 %3509) #12
  %3604 = extractvalue { %"class.skvm::Builder"*, i32 } %3603, 0
  %3605 = extractvalue { %"class.skvm::Builder"*, i32 } %3603, 1
  %3606 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3503, %"class.skvm::Builder"* %3497, i32 %3513) #12
  %3607 = extractvalue { %"class.skvm::Builder"*, i32 } %3606, 0
  %3608 = extractvalue { %"class.skvm::Builder"*, i32 } %3606, 1
  %3609 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3604, %"class.skvm::Builder"* %3604, i32 %3605, %"class.skvm::Builder"* %3607, i32 %3608) #12
  %3610 = extractvalue { %"class.skvm::Builder"*, i32 } %3609, 0
  %3611 = extractvalue { %"class.skvm::Builder"*, i32 } %3609, 1
  %3612 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3610, %"class.skvm::Builder"* %3610, i32 %3611, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3613 = extractvalue { %"class.skvm::Builder"*, i32 } %3612, 1
  %3614 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3615 = getelementptr inbounds i32, i32* %3614, i64 1
  store i32 %3613, i32* %3615, align 4
  %3616 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3503, %"class.skvm::Builder"* %3497, i32 %3511) #12
  %3617 = extractvalue { %"class.skvm::Builder"*, i32 } %3616, 0
  %3618 = extractvalue { %"class.skvm::Builder"*, i32 } %3616, 1
  %3619 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3505, %"class.skvm::Builder"* %3497, i32 %3509) #12
  %3620 = extractvalue { %"class.skvm::Builder"*, i32 } %3619, 0
  %3621 = extractvalue { %"class.skvm::Builder"*, i32 } %3619, 1
  %3622 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3617, %"class.skvm::Builder"* %3617, i32 %3618, %"class.skvm::Builder"* %3620, i32 %3621) #12
  %3623 = extractvalue { %"class.skvm::Builder"*, i32 } %3622, 0
  %3624 = extractvalue { %"class.skvm::Builder"*, i32 } %3622, 1
  %3625 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3623, %"class.skvm::Builder"* %3623, i32 %3624, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3626 = extractvalue { %"class.skvm::Builder"*, i32 } %3625, 1
  %3627 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3628 = getelementptr inbounds i32, i32* %3627, i64 2
  store i32 %3626, i32* %3628, align 4
  %3629 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3511) #12
  %3630 = extractvalue { %"class.skvm::Builder"*, i32 } %3629, 0
  %3631 = extractvalue { %"class.skvm::Builder"*, i32 } %3629, 1
  %3632 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3513) #12
  %3633 = extractvalue { %"class.skvm::Builder"*, i32 } %3632, 0
  %3634 = extractvalue { %"class.skvm::Builder"*, i32 } %3632, 1
  %3635 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3630, %"class.skvm::Builder"* %3630, i32 %3631, %"class.skvm::Builder"* %3633, i32 %3634) #12
  %3636 = extractvalue { %"class.skvm::Builder"*, i32 } %3635, 0
  %3637 = extractvalue { %"class.skvm::Builder"*, i32 } %3635, 1
  %3638 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3636, %"class.skvm::Builder"* %3636, i32 %3637, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3639 = extractvalue { %"class.skvm::Builder"*, i32 } %3638, 1
  %3640 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3641 = getelementptr inbounds i32, i32* %3640, i64 3
  store i32 %3639, i32* %3641, align 4
  %3642 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3513) #12
  %3643 = extractvalue { %"class.skvm::Builder"*, i32 } %3642, 0
  %3644 = extractvalue { %"class.skvm::Builder"*, i32 } %3642, 1
  %3645 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3509) #12
  %3646 = extractvalue { %"class.skvm::Builder"*, i32 } %3645, 0
  %3647 = extractvalue { %"class.skvm::Builder"*, i32 } %3645, 1
  %3648 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3643, %"class.skvm::Builder"* %3643, i32 %3644, %"class.skvm::Builder"* %3646, i32 %3647) #12
  %3649 = extractvalue { %"class.skvm::Builder"*, i32 } %3648, 0
  %3650 = extractvalue { %"class.skvm::Builder"*, i32 } %3648, 1
  %3651 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3649, %"class.skvm::Builder"* %3649, i32 %3650, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3652 = extractvalue { %"class.skvm::Builder"*, i32 } %3651, 1
  %3653 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3654 = getelementptr inbounds i32, i32* %3653, i64 4
  store i32 %3652, i32* %3654, align 4
  %3655 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3509) #12
  %3656 = extractvalue { %"class.skvm::Builder"*, i32 } %3655, 0
  %3657 = extractvalue { %"class.skvm::Builder"*, i32 } %3655, 1
  %3658 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3511) #12
  %3659 = extractvalue { %"class.skvm::Builder"*, i32 } %3658, 0
  %3660 = extractvalue { %"class.skvm::Builder"*, i32 } %3658, 1
  %3661 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3656, %"class.skvm::Builder"* %3656, i32 %3657, %"class.skvm::Builder"* %3659, i32 %3660) #12
  %3662 = extractvalue { %"class.skvm::Builder"*, i32 } %3661, 0
  %3663 = extractvalue { %"class.skvm::Builder"*, i32 } %3661, 1
  %3664 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3662, %"class.skvm::Builder"* %3662, i32 %3663, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3665 = extractvalue { %"class.skvm::Builder"*, i32 } %3664, 1
  %3666 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3667 = getelementptr inbounds i32, i32* %3666, i64 5
  store i32 %3665, i32* %3667, align 4
  %3668 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3507) #12
  %3669 = extractvalue { %"class.skvm::Builder"*, i32 } %3668, 0
  %3670 = extractvalue { %"class.skvm::Builder"*, i32 } %3668, 1
  %3671 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3505) #12
  %3672 = extractvalue { %"class.skvm::Builder"*, i32 } %3671, 0
  %3673 = extractvalue { %"class.skvm::Builder"*, i32 } %3671, 1
  %3674 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3669, %"class.skvm::Builder"* %3669, i32 %3670, %"class.skvm::Builder"* %3672, i32 %3673) #12
  %3675 = extractvalue { %"class.skvm::Builder"*, i32 } %3674, 0
  %3676 = extractvalue { %"class.skvm::Builder"*, i32 } %3674, 1
  %3677 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3675, %"class.skvm::Builder"* %3675, i32 %3676, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3678 = extractvalue { %"class.skvm::Builder"*, i32 } %3677, 1
  %3679 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3680 = getelementptr inbounds i32, i32* %3679, i64 6
  store i32 %3678, i32* %3680, align 4
  %3681 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3501, %"class.skvm::Builder"* %3497, i32 %3503) #12
  %3682 = extractvalue { %"class.skvm::Builder"*, i32 } %3681, 0
  %3683 = extractvalue { %"class.skvm::Builder"*, i32 } %3681, 1
  %3684 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3507) #12
  %3685 = extractvalue { %"class.skvm::Builder"*, i32 } %3684, 0
  %3686 = extractvalue { %"class.skvm::Builder"*, i32 } %3684, 1
  %3687 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3682, %"class.skvm::Builder"* %3682, i32 %3683, %"class.skvm::Builder"* %3685, i32 %3686) #12
  %3688 = extractvalue { %"class.skvm::Builder"*, i32 } %3687, 0
  %3689 = extractvalue { %"class.skvm::Builder"*, i32 } %3687, 1
  %3690 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3688, %"class.skvm::Builder"* %3688, i32 %3689, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3691 = extractvalue { %"class.skvm::Builder"*, i32 } %3690, 1
  %3692 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3693 = getelementptr inbounds i32, i32* %3692, i64 7
  store i32 %3691, i32* %3693, align 4
  %3694 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3495, %"class.skvm::Builder"* %3497, i32 %3505) #12
  %3695 = extractvalue { %"class.skvm::Builder"*, i32 } %3694, 0
  %3696 = extractvalue { %"class.skvm::Builder"*, i32 } %3694, 1
  %3697 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3497, %"class.skvm::Builder"* %3497, i32 %3499, %"class.skvm::Builder"* %3497, i32 %3503) #12
  %3698 = extractvalue { %"class.skvm::Builder"*, i32 } %3697, 0
  %3699 = extractvalue { %"class.skvm::Builder"*, i32 } %3697, 1
  %3700 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3695, %"class.skvm::Builder"* %3695, i32 %3696, %"class.skvm::Builder"* %3698, i32 %3699) #12
  %3701 = extractvalue { %"class.skvm::Builder"*, i32 } %3700, 0
  %3702 = extractvalue { %"class.skvm::Builder"*, i32 } %3700, 1
  %3703 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3701, %"class.skvm::Builder"* %3701, i32 %3702, %"class.skvm::Builder"* %3597, i32 %3598) #12
  %3704 = extractvalue { %"class.skvm::Builder"*, i32 } %3703, 1
  %3705 = load i32*, i32** %3601, align 8, !alias.scope !250
  %3706 = getelementptr inbounds i32, i32* %3705, i64 8
  store i32 %3704, i32* %3706, align 4
  br label %5485

3707:                                             ; preds = %3410
  %3708 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3709 = bitcast i8* %3708 to i32**
  %3710 = load i32*, i32** %3709, align 16, !noalias !253
  %3711 = load i32, i32* %3710, align 4, !noalias !253
  %3712 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %3713 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %3712, align 8, !noalias !253
  %3714 = getelementptr inbounds i32, i32* %3710, i64 4
  %3715 = load i32, i32* %3714, align 4, !noalias !253
  %3716 = getelementptr inbounds i32, i32* %3710, i64 8
  %3717 = load i32, i32* %3716, align 4, !noalias !253
  %3718 = getelementptr inbounds i32, i32* %3710, i64 12
  %3719 = load i32, i32* %3718, align 4, !noalias !253
  %3720 = getelementptr inbounds i32, i32* %3710, i64 1
  %3721 = load i32, i32* %3720, align 4, !noalias !253
  %3722 = getelementptr inbounds i32, i32* %3710, i64 5
  %3723 = load i32, i32* %3722, align 4, !noalias !253
  %3724 = getelementptr inbounds i32, i32* %3710, i64 9
  %3725 = load i32, i32* %3724, align 4, !noalias !253
  %3726 = getelementptr inbounds i32, i32* %3710, i64 13
  %3727 = load i32, i32* %3726, align 4, !noalias !253
  %3728 = getelementptr inbounds i32, i32* %3710, i64 2
  %3729 = load i32, i32* %3728, align 4, !noalias !253
  %3730 = getelementptr inbounds i32, i32* %3710, i64 6
  %3731 = load i32, i32* %3730, align 4, !noalias !253
  %3732 = getelementptr inbounds i32, i32* %3710, i64 10
  %3733 = load i32, i32* %3732, align 4, !noalias !253
  %3734 = getelementptr inbounds i32, i32* %3710, i64 14
  %3735 = load i32, i32* %3734, align 4, !noalias !253
  %3736 = getelementptr inbounds i32, i32* %3710, i64 3
  %3737 = load i32, i32* %3736, align 4, !noalias !253
  %3738 = getelementptr inbounds i32, i32* %3710, i64 7
  %3739 = load i32, i32* %3738, align 4, !noalias !253
  %3740 = getelementptr inbounds i32, i32* %3710, i64 11
  %3741 = load i32, i32* %3740, align 4, !noalias !253
  %3742 = getelementptr inbounds i32, i32* %3710, i64 15
  %3743 = load i32, i32* %3742, align 4, !noalias !253
  %3744 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3713, i32 %3723) #12, !noalias !253
  %3745 = extractvalue { %"class.skvm::Builder"*, i32 } %3744, 0
  %3746 = extractvalue { %"class.skvm::Builder"*, i32 } %3744, 1
  %3747 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3713, i32 %3715) #12, !noalias !253
  %3748 = extractvalue { %"class.skvm::Builder"*, i32 } %3747, 0
  %3749 = extractvalue { %"class.skvm::Builder"*, i32 } %3747, 1
  %3750 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3745, %"class.skvm::Builder"* %3745, i32 %3746, %"class.skvm::Builder"* %3748, i32 %3749) #12, !noalias !253
  %3751 = extractvalue { %"class.skvm::Builder"*, i32 } %3750, 0
  %3752 = extractvalue { %"class.skvm::Builder"*, i32 } %3750, 1
  %3753 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3713, i32 %3731) #12, !noalias !253
  %3754 = extractvalue { %"class.skvm::Builder"*, i32 } %3753, 0
  %3755 = extractvalue { %"class.skvm::Builder"*, i32 } %3753, 1
  %3756 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3713, i32 %3715) #12, !noalias !253
  %3757 = extractvalue { %"class.skvm::Builder"*, i32 } %3756, 0
  %3758 = extractvalue { %"class.skvm::Builder"*, i32 } %3756, 1
  %3759 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3754, %"class.skvm::Builder"* %3754, i32 %3755, %"class.skvm::Builder"* %3757, i32 %3758) #12, !noalias !253
  %3760 = extractvalue { %"class.skvm::Builder"*, i32 } %3759, 0
  %3761 = extractvalue { %"class.skvm::Builder"*, i32 } %3759, 1
  %3762 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3713, i32 %3739) #12, !noalias !253
  %3763 = extractvalue { %"class.skvm::Builder"*, i32 } %3762, 0
  %3764 = extractvalue { %"class.skvm::Builder"*, i32 } %3762, 1
  %3765 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3713, i32 %3715) #12, !noalias !253
  %3766 = extractvalue { %"class.skvm::Builder"*, i32 } %3765, 0
  %3767 = extractvalue { %"class.skvm::Builder"*, i32 } %3765, 1
  %3768 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3763, %"class.skvm::Builder"* %3763, i32 %3764, %"class.skvm::Builder"* %3766, i32 %3767) #12, !noalias !253
  %3769 = extractvalue { %"class.skvm::Builder"*, i32 } %3768, 0
  %3770 = extractvalue { %"class.skvm::Builder"*, i32 } %3768, 1
  %3771 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3713, i32 %3731) #12, !noalias !253
  %3772 = extractvalue { %"class.skvm::Builder"*, i32 } %3771, 0
  %3773 = extractvalue { %"class.skvm::Builder"*, i32 } %3771, 1
  %3774 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3713, i32 %3723) #12, !noalias !253
  %3775 = extractvalue { %"class.skvm::Builder"*, i32 } %3774, 0
  %3776 = extractvalue { %"class.skvm::Builder"*, i32 } %3774, 1
  %3777 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3772, %"class.skvm::Builder"* %3772, i32 %3773, %"class.skvm::Builder"* %3775, i32 %3776) #12, !noalias !253
  %3778 = extractvalue { %"class.skvm::Builder"*, i32 } %3777, 0
  %3779 = extractvalue { %"class.skvm::Builder"*, i32 } %3777, 1
  %3780 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3713, i32 %3739) #12, !noalias !253
  %3781 = extractvalue { %"class.skvm::Builder"*, i32 } %3780, 0
  %3782 = extractvalue { %"class.skvm::Builder"*, i32 } %3780, 1
  %3783 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3713, i32 %3723) #12, !noalias !253
  %3784 = extractvalue { %"class.skvm::Builder"*, i32 } %3783, 0
  %3785 = extractvalue { %"class.skvm::Builder"*, i32 } %3783, 1
  %3786 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3781, %"class.skvm::Builder"* %3781, i32 %3782, %"class.skvm::Builder"* %3784, i32 %3785) #12, !noalias !253
  %3787 = extractvalue { %"class.skvm::Builder"*, i32 } %3786, 0
  %3788 = extractvalue { %"class.skvm::Builder"*, i32 } %3786, 1
  %3789 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3713, i32 %3739) #12, !noalias !253
  %3790 = extractvalue { %"class.skvm::Builder"*, i32 } %3789, 0
  %3791 = extractvalue { %"class.skvm::Builder"*, i32 } %3789, 1
  %3792 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3713, i32 %3731) #12, !noalias !253
  %3793 = extractvalue { %"class.skvm::Builder"*, i32 } %3792, 0
  %3794 = extractvalue { %"class.skvm::Builder"*, i32 } %3792, 1
  %3795 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3790, %"class.skvm::Builder"* %3790, i32 %3791, %"class.skvm::Builder"* %3793, i32 %3794) #12, !noalias !253
  %3796 = extractvalue { %"class.skvm::Builder"*, i32 } %3795, 0
  %3797 = extractvalue { %"class.skvm::Builder"*, i32 } %3795, 1
  %3798 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3713, i32 %3727) #12, !noalias !253
  %3799 = extractvalue { %"class.skvm::Builder"*, i32 } %3798, 0
  %3800 = extractvalue { %"class.skvm::Builder"*, i32 } %3798, 1
  %3801 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3713, i32 %3719) #12, !noalias !253
  %3802 = extractvalue { %"class.skvm::Builder"*, i32 } %3801, 0
  %3803 = extractvalue { %"class.skvm::Builder"*, i32 } %3801, 1
  %3804 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3799, %"class.skvm::Builder"* %3799, i32 %3800, %"class.skvm::Builder"* %3802, i32 %3803) #12, !noalias !253
  %3805 = extractvalue { %"class.skvm::Builder"*, i32 } %3804, 0
  %3806 = extractvalue { %"class.skvm::Builder"*, i32 } %3804, 1
  %3807 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3713, i32 %3735) #12, !noalias !253
  %3808 = extractvalue { %"class.skvm::Builder"*, i32 } %3807, 0
  %3809 = extractvalue { %"class.skvm::Builder"*, i32 } %3807, 1
  %3810 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3713, i32 %3719) #12, !noalias !253
  %3811 = extractvalue { %"class.skvm::Builder"*, i32 } %3810, 0
  %3812 = extractvalue { %"class.skvm::Builder"*, i32 } %3810, 1
  %3813 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3808, %"class.skvm::Builder"* %3808, i32 %3809, %"class.skvm::Builder"* %3811, i32 %3812) #12, !noalias !253
  %3814 = extractvalue { %"class.skvm::Builder"*, i32 } %3813, 0
  %3815 = extractvalue { %"class.skvm::Builder"*, i32 } %3813, 1
  %3816 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3713, i32 %3743) #12, !noalias !253
  %3817 = extractvalue { %"class.skvm::Builder"*, i32 } %3816, 0
  %3818 = extractvalue { %"class.skvm::Builder"*, i32 } %3816, 1
  %3819 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3713, i32 %3719) #12, !noalias !253
  %3820 = extractvalue { %"class.skvm::Builder"*, i32 } %3819, 0
  %3821 = extractvalue { %"class.skvm::Builder"*, i32 } %3819, 1
  %3822 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3817, %"class.skvm::Builder"* %3817, i32 %3818, %"class.skvm::Builder"* %3820, i32 %3821) #12, !noalias !253
  %3823 = extractvalue { %"class.skvm::Builder"*, i32 } %3822, 0
  %3824 = extractvalue { %"class.skvm::Builder"*, i32 } %3822, 1
  %3825 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3713, i32 %3735) #12, !noalias !253
  %3826 = extractvalue { %"class.skvm::Builder"*, i32 } %3825, 0
  %3827 = extractvalue { %"class.skvm::Builder"*, i32 } %3825, 1
  %3828 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3713, i32 %3727) #12, !noalias !253
  %3829 = extractvalue { %"class.skvm::Builder"*, i32 } %3828, 0
  %3830 = extractvalue { %"class.skvm::Builder"*, i32 } %3828, 1
  %3831 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3826, %"class.skvm::Builder"* %3826, i32 %3827, %"class.skvm::Builder"* %3829, i32 %3830) #12, !noalias !253
  %3832 = extractvalue { %"class.skvm::Builder"*, i32 } %3831, 0
  %3833 = extractvalue { %"class.skvm::Builder"*, i32 } %3831, 1
  %3834 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3713, i32 %3743) #12, !noalias !253
  %3835 = extractvalue { %"class.skvm::Builder"*, i32 } %3834, 0
  %3836 = extractvalue { %"class.skvm::Builder"*, i32 } %3834, 1
  %3837 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3713, i32 %3727) #12, !noalias !253
  %3838 = extractvalue { %"class.skvm::Builder"*, i32 } %3837, 0
  %3839 = extractvalue { %"class.skvm::Builder"*, i32 } %3837, 1
  %3840 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3835, %"class.skvm::Builder"* %3835, i32 %3836, %"class.skvm::Builder"* %3838, i32 %3839) #12, !noalias !253
  %3841 = extractvalue { %"class.skvm::Builder"*, i32 } %3840, 0
  %3842 = extractvalue { %"class.skvm::Builder"*, i32 } %3840, 1
  %3843 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3713, i32 %3743) #12, !noalias !253
  %3844 = extractvalue { %"class.skvm::Builder"*, i32 } %3843, 0
  %3845 = extractvalue { %"class.skvm::Builder"*, i32 } %3843, 1
  %3846 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3713, i32 %3735) #12, !noalias !253
  %3847 = extractvalue { %"class.skvm::Builder"*, i32 } %3846, 0
  %3848 = extractvalue { %"class.skvm::Builder"*, i32 } %3846, 1
  %3849 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3844, %"class.skvm::Builder"* %3844, i32 %3845, %"class.skvm::Builder"* %3847, i32 %3848) #12, !noalias !253
  %3850 = extractvalue { %"class.skvm::Builder"*, i32 } %3849, 0
  %3851 = extractvalue { %"class.skvm::Builder"*, i32 } %3849, 1
  %3852 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3751, %"class.skvm::Builder"* %3751, i32 %3752, %"class.skvm::Builder"* %3850, i32 %3851) #12, !noalias !253
  %3853 = extractvalue { %"class.skvm::Builder"*, i32 } %3852, 0
  %3854 = extractvalue { %"class.skvm::Builder"*, i32 } %3852, 1
  %3855 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3760, %"class.skvm::Builder"* %3760, i32 %3761, %"class.skvm::Builder"* %3841, i32 %3842) #12, !noalias !253
  %3856 = extractvalue { %"class.skvm::Builder"*, i32 } %3855, 0
  %3857 = extractvalue { %"class.skvm::Builder"*, i32 } %3855, 1
  %3858 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3853, %"class.skvm::Builder"* %3853, i32 %3854, %"class.skvm::Builder"* %3856, i32 %3857) #12, !noalias !253
  %3859 = extractvalue { %"class.skvm::Builder"*, i32 } %3858, 0
  %3860 = extractvalue { %"class.skvm::Builder"*, i32 } %3858, 1
  %3861 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3769, %"class.skvm::Builder"* %3769, i32 %3770, %"class.skvm::Builder"* %3832, i32 %3833) #12, !noalias !253
  %3862 = extractvalue { %"class.skvm::Builder"*, i32 } %3861, 0
  %3863 = extractvalue { %"class.skvm::Builder"*, i32 } %3861, 1
  %3864 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3859, %"class.skvm::Builder"* %3859, i32 %3860, %"class.skvm::Builder"* %3862, i32 %3863) #12, !noalias !253
  %3865 = extractvalue { %"class.skvm::Builder"*, i32 } %3864, 0
  %3866 = extractvalue { %"class.skvm::Builder"*, i32 } %3864, 1
  %3867 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3778, %"class.skvm::Builder"* %3778, i32 %3779, %"class.skvm::Builder"* %3823, i32 %3824) #12, !noalias !253
  %3868 = extractvalue { %"class.skvm::Builder"*, i32 } %3867, 0
  %3869 = extractvalue { %"class.skvm::Builder"*, i32 } %3867, 1
  %3870 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3865, %"class.skvm::Builder"* %3865, i32 %3866, %"class.skvm::Builder"* %3868, i32 %3869) #12, !noalias !253
  %3871 = extractvalue { %"class.skvm::Builder"*, i32 } %3870, 0
  %3872 = extractvalue { %"class.skvm::Builder"*, i32 } %3870, 1
  %3873 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3787, %"class.skvm::Builder"* %3787, i32 %3788, %"class.skvm::Builder"* %3814, i32 %3815) #12, !noalias !253
  %3874 = extractvalue { %"class.skvm::Builder"*, i32 } %3873, 0
  %3875 = extractvalue { %"class.skvm::Builder"*, i32 } %3873, 1
  %3876 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3871, %"class.skvm::Builder"* %3871, i32 %3872, %"class.skvm::Builder"* %3874, i32 %3875) #12, !noalias !253
  %3877 = extractvalue { %"class.skvm::Builder"*, i32 } %3876, 0
  %3878 = extractvalue { %"class.skvm::Builder"*, i32 } %3876, 1
  %3879 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8fast_mulENS_3F32ES1_(%"class.skvm::Builder"* %3796, %"class.skvm::Builder"* %3796, i32 %3797, %"class.skvm::Builder"* %3805, i32 %3806) #12, !noalias !253
  %3880 = extractvalue { %"class.skvm::Builder"*, i32 } %3879, 0
  %3881 = extractvalue { %"class.skvm::Builder"*, i32 } %3879, 1
  %3882 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3877, %"class.skvm::Builder"* %3877, i32 %3878, %"class.skvm::Builder"* %3880, i32 %3881) #12, !noalias !253
  %3883 = extractvalue { %"class.skvm::Builder"*, i32 } %3882, 0
  %3884 = extractvalue { %"class.skvm::Builder"*, i32 } %3882, 1
  %3885 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %3883, i32 1065353216) #12, !noalias !253
  %3886 = extractvalue { %"class.skvm::Builder"*, i32 } %3885, 0
  %3887 = extractvalue { %"class.skvm::Builder"*, i32 } %3885, 1
  %3888 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %3883, %"class.skvm::Builder"* %3886, i32 %3887, %"class.skvm::Builder"* %3883, i32 %3884) #12, !noalias !253
  %3889 = extractvalue { %"class.skvm::Builder"*, i32 } %3888, 0
  %3890 = extractvalue { %"class.skvm::Builder"*, i32 } %3888, 1
  %3891 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3751, %"class.skvm::Builder"* %3751, i32 %3752, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3892 = extractvalue { %"class.skvm::Builder"*, i32 } %3891, 0
  %3893 = extractvalue { %"class.skvm::Builder"*, i32 } %3891, 1
  %3894 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3760, %"class.skvm::Builder"* %3760, i32 %3761, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3895 = extractvalue { %"class.skvm::Builder"*, i32 } %3894, 0
  %3896 = extractvalue { %"class.skvm::Builder"*, i32 } %3894, 1
  %3897 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3769, %"class.skvm::Builder"* %3769, i32 %3770, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3898 = extractvalue { %"class.skvm::Builder"*, i32 } %3897, 0
  %3899 = extractvalue { %"class.skvm::Builder"*, i32 } %3897, 1
  %3900 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3778, %"class.skvm::Builder"* %3778, i32 %3779, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3901 = extractvalue { %"class.skvm::Builder"*, i32 } %3900, 0
  %3902 = extractvalue { %"class.skvm::Builder"*, i32 } %3900, 1
  %3903 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3787, %"class.skvm::Builder"* %3787, i32 %3788, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3904 = extractvalue { %"class.skvm::Builder"*, i32 } %3903, 0
  %3905 = extractvalue { %"class.skvm::Builder"*, i32 } %3903, 1
  %3906 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3796, %"class.skvm::Builder"* %3796, i32 %3797, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3907 = extractvalue { %"class.skvm::Builder"*, i32 } %3906, 0
  %3908 = extractvalue { %"class.skvm::Builder"*, i32 } %3906, 1
  %3909 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3805, %"class.skvm::Builder"* %3805, i32 %3806, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3910 = extractvalue { %"class.skvm::Builder"*, i32 } %3909, 0
  %3911 = extractvalue { %"class.skvm::Builder"*, i32 } %3909, 1
  %3912 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3814, %"class.skvm::Builder"* %3814, i32 %3815, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3913 = extractvalue { %"class.skvm::Builder"*, i32 } %3912, 0
  %3914 = extractvalue { %"class.skvm::Builder"*, i32 } %3912, 1
  %3915 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3823, %"class.skvm::Builder"* %3823, i32 %3824, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3916 = extractvalue { %"class.skvm::Builder"*, i32 } %3915, 0
  %3917 = extractvalue { %"class.skvm::Builder"*, i32 } %3915, 1
  %3918 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3832, %"class.skvm::Builder"* %3832, i32 %3833, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3919 = extractvalue { %"class.skvm::Builder"*, i32 } %3918, 0
  %3920 = extractvalue { %"class.skvm::Builder"*, i32 } %3918, 1
  %3921 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3841, %"class.skvm::Builder"* %3841, i32 %3842, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3922 = extractvalue { %"class.skvm::Builder"*, i32 } %3921, 0
  %3923 = extractvalue { %"class.skvm::Builder"*, i32 } %3921, 1
  %3924 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3850, %"class.skvm::Builder"* %3850, i32 %3851, %"class.skvm::Builder"* %3889, i32 %3890) #12, !noalias !253
  %3925 = extractvalue { %"class.skvm::Builder"*, i32 } %3924, 0
  %3926 = extractvalue { %"class.skvm::Builder"*, i32 } %3924, 1
  %3927 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %3927, i8 -86, i64 16, i1 false) #12, !alias.scope !253
  %3928 = load i64, i64* %3412, align 8, !noalias !253
  %3929 = lshr i64 %3928, 1
  %3930 = and i64 %3929, 2147483647
  %3931 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %3932 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %3933 = bitcast i8* %3932 to i64*
  %3934 = bitcast i8* %3931 to i8**
  store i8* %3927, i8** %3934, align 8, !alias.scope !253
  store i64 34359738368, i64* %3933, align 8, !alias.scope !253
  %3935 = trunc i64 %3930 to i32
  %3936 = icmp eq i32 %3935, 0
  br i1 %3936, label %3945, label %3937

3937:                                             ; preds = %3707
  %3938 = bitcast i8* %3931 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3938, i32 %3935, i32 1) #12
  %3939 = load i64, i64* %3933, align 8, !alias.scope !253
  %3940 = shl nuw nsw i64 %3930, 1
  %3941 = add i64 %3939, %3940
  %3942 = and i64 %3941, 4294967294
  %3943 = and i64 %3939, -4294967295
  %3944 = or i64 %3942, %3943
  store i64 %3944, i64* %3933, align 8, !alias.scope !253
  br label %3945

3945:                                             ; preds = %3707, %3937
  %3946 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3723, %"class.skvm::Builder"* %3925, i32 %3926) #12
  %3947 = extractvalue { %"class.skvm::Builder"*, i32 } %3946, 0
  %3948 = extractvalue { %"class.skvm::Builder"*, i32 } %3946, 1
  %3949 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3731, %"class.skvm::Builder"* %3922, i32 %3923) #12
  %3950 = extractvalue { %"class.skvm::Builder"*, i32 } %3949, 0
  %3951 = extractvalue { %"class.skvm::Builder"*, i32 } %3949, 1
  %3952 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3947, %"class.skvm::Builder"* %3947, i32 %3948, %"class.skvm::Builder"* %3950, i32 %3951) #12
  %3953 = extractvalue { %"class.skvm::Builder"*, i32 } %3952, 0
  %3954 = extractvalue { %"class.skvm::Builder"*, i32 } %3952, 1
  %3955 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3739, %"class.skvm::Builder"* %3919, i32 %3920) #12
  %3956 = extractvalue { %"class.skvm::Builder"*, i32 } %3955, 0
  %3957 = extractvalue { %"class.skvm::Builder"*, i32 } %3955, 1
  %3958 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3953, %"class.skvm::Builder"* %3953, i32 %3954, %"class.skvm::Builder"* %3956, i32 %3957) #12
  %3959 = extractvalue { %"class.skvm::Builder"*, i32 } %3958, 1
  %3960 = bitcast i8* %3931 to i32**
  %3961 = load i32*, i32** %3960, align 8, !alias.scope !253
  store i32 %3959, i32* %3961, align 4
  %3962 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3922, i32 %3923) #12
  %3963 = extractvalue { %"class.skvm::Builder"*, i32 } %3962, 0
  %3964 = extractvalue { %"class.skvm::Builder"*, i32 } %3962, 1
  %3965 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3925, i32 %3926) #12
  %3966 = extractvalue { %"class.skvm::Builder"*, i32 } %3965, 0
  %3967 = extractvalue { %"class.skvm::Builder"*, i32 } %3965, 1
  %3968 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3963, %"class.skvm::Builder"* %3963, i32 %3964, %"class.skvm::Builder"* %3966, i32 %3967) #12
  %3969 = extractvalue { %"class.skvm::Builder"*, i32 } %3968, 0
  %3970 = extractvalue { %"class.skvm::Builder"*, i32 } %3968, 1
  %3971 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3919, i32 %3920) #12
  %3972 = extractvalue { %"class.skvm::Builder"*, i32 } %3971, 0
  %3973 = extractvalue { %"class.skvm::Builder"*, i32 } %3971, 1
  %3974 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3969, %"class.skvm::Builder"* %3969, i32 %3970, %"class.skvm::Builder"* %3972, i32 %3973) #12
  %3975 = extractvalue { %"class.skvm::Builder"*, i32 } %3974, 1
  %3976 = load i32*, i32** %3960, align 8, !alias.scope !253
  %3977 = getelementptr inbounds i32, i32* %3976, i64 1
  store i32 %3975, i32* %3977, align 4
  %3978 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3727, %"class.skvm::Builder"* %3907, i32 %3908) #12
  %3979 = extractvalue { %"class.skvm::Builder"*, i32 } %3978, 0
  %3980 = extractvalue { %"class.skvm::Builder"*, i32 } %3978, 1
  %3981 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3735, %"class.skvm::Builder"* %3904, i32 %3905) #12
  %3982 = extractvalue { %"class.skvm::Builder"*, i32 } %3981, 0
  %3983 = extractvalue { %"class.skvm::Builder"*, i32 } %3981, 1
  %3984 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3979, %"class.skvm::Builder"* %3979, i32 %3980, %"class.skvm::Builder"* %3982, i32 %3983) #12
  %3985 = extractvalue { %"class.skvm::Builder"*, i32 } %3984, 0
  %3986 = extractvalue { %"class.skvm::Builder"*, i32 } %3984, 1
  %3987 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3743, %"class.skvm::Builder"* %3901, i32 %3902) #12
  %3988 = extractvalue { %"class.skvm::Builder"*, i32 } %3987, 0
  %3989 = extractvalue { %"class.skvm::Builder"*, i32 } %3987, 1
  %3990 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %3985, %"class.skvm::Builder"* %3985, i32 %3986, %"class.skvm::Builder"* %3988, i32 %3989) #12
  %3991 = extractvalue { %"class.skvm::Builder"*, i32 } %3990, 1
  %3992 = load i32*, i32** %3960, align 8, !alias.scope !253
  %3993 = getelementptr inbounds i32, i32* %3992, i64 2
  store i32 %3991, i32* %3993, align 4
  %3994 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3904, i32 %3905) #12
  %3995 = extractvalue { %"class.skvm::Builder"*, i32 } %3994, 0
  %3996 = extractvalue { %"class.skvm::Builder"*, i32 } %3994, 1
  %3997 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3907, i32 %3908) #12
  %3998 = extractvalue { %"class.skvm::Builder"*, i32 } %3997, 0
  %3999 = extractvalue { %"class.skvm::Builder"*, i32 } %3997, 1
  %4000 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %3995, %"class.skvm::Builder"* %3995, i32 %3996, %"class.skvm::Builder"* %3998, i32 %3999) #12
  %4001 = extractvalue { %"class.skvm::Builder"*, i32 } %4000, 0
  %4002 = extractvalue { %"class.skvm::Builder"*, i32 } %4000, 1
  %4003 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3901, i32 %3902) #12
  %4004 = extractvalue { %"class.skvm::Builder"*, i32 } %4003, 0
  %4005 = extractvalue { %"class.skvm::Builder"*, i32 } %4003, 1
  %4006 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4001, %"class.skvm::Builder"* %4001, i32 %4002, %"class.skvm::Builder"* %4004, i32 %4005) #12
  %4007 = extractvalue { %"class.skvm::Builder"*, i32 } %4006, 1
  %4008 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4009 = getelementptr inbounds i32, i32* %4008, i64 3
  store i32 %4007, i32* %4009, align 4
  %4010 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3731, %"class.skvm::Builder"* %3916, i32 %3917) #12
  %4011 = extractvalue { %"class.skvm::Builder"*, i32 } %4010, 0
  %4012 = extractvalue { %"class.skvm::Builder"*, i32 } %4010, 1
  %4013 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3715, %"class.skvm::Builder"* %3925, i32 %3926) #12
  %4014 = extractvalue { %"class.skvm::Builder"*, i32 } %4013, 0
  %4015 = extractvalue { %"class.skvm::Builder"*, i32 } %4013, 1
  %4016 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4011, %"class.skvm::Builder"* %4011, i32 %4012, %"class.skvm::Builder"* %4014, i32 %4015) #12
  %4017 = extractvalue { %"class.skvm::Builder"*, i32 } %4016, 0
  %4018 = extractvalue { %"class.skvm::Builder"*, i32 } %4016, 1
  %4019 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3739, %"class.skvm::Builder"* %3913, i32 %3914) #12
  %4020 = extractvalue { %"class.skvm::Builder"*, i32 } %4019, 0
  %4021 = extractvalue { %"class.skvm::Builder"*, i32 } %4019, 1
  %4022 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4017, %"class.skvm::Builder"* %4017, i32 %4018, %"class.skvm::Builder"* %4020, i32 %4021) #12
  %4023 = extractvalue { %"class.skvm::Builder"*, i32 } %4022, 1
  %4024 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4025 = getelementptr inbounds i32, i32* %4024, i64 4
  store i32 %4023, i32* %4025, align 4
  %4026 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3925, i32 %3926) #12
  %4027 = extractvalue { %"class.skvm::Builder"*, i32 } %4026, 0
  %4028 = extractvalue { %"class.skvm::Builder"*, i32 } %4026, 1
  %4029 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3916, i32 %3917) #12
  %4030 = extractvalue { %"class.skvm::Builder"*, i32 } %4029, 0
  %4031 = extractvalue { %"class.skvm::Builder"*, i32 } %4029, 1
  %4032 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4027, %"class.skvm::Builder"* %4027, i32 %4028, %"class.skvm::Builder"* %4030, i32 %4031) #12
  %4033 = extractvalue { %"class.skvm::Builder"*, i32 } %4032, 0
  %4034 = extractvalue { %"class.skvm::Builder"*, i32 } %4032, 1
  %4035 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3913, i32 %3914) #12
  %4036 = extractvalue { %"class.skvm::Builder"*, i32 } %4035, 0
  %4037 = extractvalue { %"class.skvm::Builder"*, i32 } %4035, 1
  %4038 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4033, %"class.skvm::Builder"* %4033, i32 %4034, %"class.skvm::Builder"* %4036, i32 %4037) #12
  %4039 = extractvalue { %"class.skvm::Builder"*, i32 } %4038, 1
  %4040 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4041 = getelementptr inbounds i32, i32* %4040, i64 5
  store i32 %4039, i32* %4041, align 4
  %4042 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3735, %"class.skvm::Builder"* %3898, i32 %3899) #12
  %4043 = extractvalue { %"class.skvm::Builder"*, i32 } %4042, 0
  %4044 = extractvalue { %"class.skvm::Builder"*, i32 } %4042, 1
  %4045 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3719, %"class.skvm::Builder"* %3907, i32 %3908) #12
  %4046 = extractvalue { %"class.skvm::Builder"*, i32 } %4045, 0
  %4047 = extractvalue { %"class.skvm::Builder"*, i32 } %4045, 1
  %4048 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4043, %"class.skvm::Builder"* %4043, i32 %4044, %"class.skvm::Builder"* %4046, i32 %4047) #12
  %4049 = extractvalue { %"class.skvm::Builder"*, i32 } %4048, 0
  %4050 = extractvalue { %"class.skvm::Builder"*, i32 } %4048, 1
  %4051 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3743, %"class.skvm::Builder"* %3895, i32 %3896) #12
  %4052 = extractvalue { %"class.skvm::Builder"*, i32 } %4051, 0
  %4053 = extractvalue { %"class.skvm::Builder"*, i32 } %4051, 1
  %4054 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4049, %"class.skvm::Builder"* %4049, i32 %4050, %"class.skvm::Builder"* %4052, i32 %4053) #12
  %4055 = extractvalue { %"class.skvm::Builder"*, i32 } %4054, 1
  %4056 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4057 = getelementptr inbounds i32, i32* %4056, i64 6
  store i32 %4055, i32* %4057, align 4
  %4058 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3907, i32 %3908) #12
  %4059 = extractvalue { %"class.skvm::Builder"*, i32 } %4058, 0
  %4060 = extractvalue { %"class.skvm::Builder"*, i32 } %4058, 1
  %4061 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3898, i32 %3899) #12
  %4062 = extractvalue { %"class.skvm::Builder"*, i32 } %4061, 0
  %4063 = extractvalue { %"class.skvm::Builder"*, i32 } %4061, 1
  %4064 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4059, %"class.skvm::Builder"* %4059, i32 %4060, %"class.skvm::Builder"* %4062, i32 %4063) #12
  %4065 = extractvalue { %"class.skvm::Builder"*, i32 } %4064, 0
  %4066 = extractvalue { %"class.skvm::Builder"*, i32 } %4064, 1
  %4067 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3895, i32 %3896) #12
  %4068 = extractvalue { %"class.skvm::Builder"*, i32 } %4067, 0
  %4069 = extractvalue { %"class.skvm::Builder"*, i32 } %4067, 1
  %4070 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4065, %"class.skvm::Builder"* %4065, i32 %4066, %"class.skvm::Builder"* %4068, i32 %4069) #12
  %4071 = extractvalue { %"class.skvm::Builder"*, i32 } %4070, 1
  %4072 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4073 = getelementptr inbounds i32, i32* %4072, i64 7
  store i32 %4071, i32* %4073, align 4
  %4074 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3715, %"class.skvm::Builder"* %3922, i32 %3923) #12
  %4075 = extractvalue { %"class.skvm::Builder"*, i32 } %4074, 0
  %4076 = extractvalue { %"class.skvm::Builder"*, i32 } %4074, 1
  %4077 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3723, %"class.skvm::Builder"* %3916, i32 %3917) #12
  %4078 = extractvalue { %"class.skvm::Builder"*, i32 } %4077, 0
  %4079 = extractvalue { %"class.skvm::Builder"*, i32 } %4077, 1
  %4080 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4075, %"class.skvm::Builder"* %4075, i32 %4076, %"class.skvm::Builder"* %4078, i32 %4079) #12
  %4081 = extractvalue { %"class.skvm::Builder"*, i32 } %4080, 0
  %4082 = extractvalue { %"class.skvm::Builder"*, i32 } %4080, 1
  %4083 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3739, %"class.skvm::Builder"* %3910, i32 %3911) #12
  %4084 = extractvalue { %"class.skvm::Builder"*, i32 } %4083, 0
  %4085 = extractvalue { %"class.skvm::Builder"*, i32 } %4083, 1
  %4086 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4081, %"class.skvm::Builder"* %4081, i32 %4082, %"class.skvm::Builder"* %4084, i32 %4085) #12
  %4087 = extractvalue { %"class.skvm::Builder"*, i32 } %4086, 1
  %4088 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4089 = getelementptr inbounds i32, i32* %4088, i64 8
  store i32 %4087, i32* %4089, align 4
  %4090 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3916, i32 %3917) #12
  %4091 = extractvalue { %"class.skvm::Builder"*, i32 } %4090, 0
  %4092 = extractvalue { %"class.skvm::Builder"*, i32 } %4090, 1
  %4093 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3922, i32 %3923) #12
  %4094 = extractvalue { %"class.skvm::Builder"*, i32 } %4093, 0
  %4095 = extractvalue { %"class.skvm::Builder"*, i32 } %4093, 1
  %4096 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4091, %"class.skvm::Builder"* %4091, i32 %4092, %"class.skvm::Builder"* %4094, i32 %4095) #12
  %4097 = extractvalue { %"class.skvm::Builder"*, i32 } %4096, 0
  %4098 = extractvalue { %"class.skvm::Builder"*, i32 } %4096, 1
  %4099 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3737, %"class.skvm::Builder"* %3910, i32 %3911) #12
  %4100 = extractvalue { %"class.skvm::Builder"*, i32 } %4099, 0
  %4101 = extractvalue { %"class.skvm::Builder"*, i32 } %4099, 1
  %4102 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4097, %"class.skvm::Builder"* %4097, i32 %4098, %"class.skvm::Builder"* %4100, i32 %4101) #12
  %4103 = extractvalue { %"class.skvm::Builder"*, i32 } %4102, 1
  %4104 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4105 = getelementptr inbounds i32, i32* %4104, i64 9
  store i32 %4103, i32* %4105, align 4
  %4106 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3719, %"class.skvm::Builder"* %3904, i32 %3905) #12
  %4107 = extractvalue { %"class.skvm::Builder"*, i32 } %4106, 0
  %4108 = extractvalue { %"class.skvm::Builder"*, i32 } %4106, 1
  %4109 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3727, %"class.skvm::Builder"* %3898, i32 %3899) #12
  %4110 = extractvalue { %"class.skvm::Builder"*, i32 } %4109, 0
  %4111 = extractvalue { %"class.skvm::Builder"*, i32 } %4109, 1
  %4112 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4107, %"class.skvm::Builder"* %4107, i32 %4108, %"class.skvm::Builder"* %4110, i32 %4111) #12
  %4113 = extractvalue { %"class.skvm::Builder"*, i32 } %4112, 0
  %4114 = extractvalue { %"class.skvm::Builder"*, i32 } %4112, 1
  %4115 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3743, %"class.skvm::Builder"* %3892, i32 %3893) #12
  %4116 = extractvalue { %"class.skvm::Builder"*, i32 } %4115, 0
  %4117 = extractvalue { %"class.skvm::Builder"*, i32 } %4115, 1
  %4118 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4113, %"class.skvm::Builder"* %4113, i32 %4114, %"class.skvm::Builder"* %4116, i32 %4117) #12
  %4119 = extractvalue { %"class.skvm::Builder"*, i32 } %4118, 1
  %4120 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4121 = getelementptr inbounds i32, i32* %4120, i64 10
  store i32 %4119, i32* %4121, align 4
  %4122 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3898, i32 %3899) #12
  %4123 = extractvalue { %"class.skvm::Builder"*, i32 } %4122, 0
  %4124 = extractvalue { %"class.skvm::Builder"*, i32 } %4122, 1
  %4125 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3904, i32 %3905) #12
  %4126 = extractvalue { %"class.skvm::Builder"*, i32 } %4125, 0
  %4127 = extractvalue { %"class.skvm::Builder"*, i32 } %4125, 1
  %4128 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4123, %"class.skvm::Builder"* %4123, i32 %4124, %"class.skvm::Builder"* %4126, i32 %4127) #12
  %4129 = extractvalue { %"class.skvm::Builder"*, i32 } %4128, 0
  %4130 = extractvalue { %"class.skvm::Builder"*, i32 } %4128, 1
  %4131 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3741, %"class.skvm::Builder"* %3892, i32 %3893) #12
  %4132 = extractvalue { %"class.skvm::Builder"*, i32 } %4131, 0
  %4133 = extractvalue { %"class.skvm::Builder"*, i32 } %4131, 1
  %4134 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4129, %"class.skvm::Builder"* %4129, i32 %4130, %"class.skvm::Builder"* %4132, i32 %4133) #12
  %4135 = extractvalue { %"class.skvm::Builder"*, i32 } %4134, 1
  %4136 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4137 = getelementptr inbounds i32, i32* %4136, i64 11
  store i32 %4135, i32* %4137, align 4
  %4138 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3723, %"class.skvm::Builder"* %3913, i32 %3914) #12
  %4139 = extractvalue { %"class.skvm::Builder"*, i32 } %4138, 0
  %4140 = extractvalue { %"class.skvm::Builder"*, i32 } %4138, 1
  %4141 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3715, %"class.skvm::Builder"* %3919, i32 %3920) #12
  %4142 = extractvalue { %"class.skvm::Builder"*, i32 } %4141, 0
  %4143 = extractvalue { %"class.skvm::Builder"*, i32 } %4141, 1
  %4144 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4139, %"class.skvm::Builder"* %4139, i32 %4140, %"class.skvm::Builder"* %4142, i32 %4143) #12
  %4145 = extractvalue { %"class.skvm::Builder"*, i32 } %4144, 0
  %4146 = extractvalue { %"class.skvm::Builder"*, i32 } %4144, 1
  %4147 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3731, %"class.skvm::Builder"* %3910, i32 %3911) #12
  %4148 = extractvalue { %"class.skvm::Builder"*, i32 } %4147, 0
  %4149 = extractvalue { %"class.skvm::Builder"*, i32 } %4147, 1
  %4150 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4145, %"class.skvm::Builder"* %4145, i32 %4146, %"class.skvm::Builder"* %4148, i32 %4149) #12
  %4151 = extractvalue { %"class.skvm::Builder"*, i32 } %4150, 1
  %4152 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4153 = getelementptr inbounds i32, i32* %4152, i64 12
  store i32 %4151, i32* %4153, align 4
  %4154 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3711, %"class.skvm::Builder"* %3919, i32 %3920) #12
  %4155 = extractvalue { %"class.skvm::Builder"*, i32 } %4154, 0
  %4156 = extractvalue { %"class.skvm::Builder"*, i32 } %4154, 1
  %4157 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3721, %"class.skvm::Builder"* %3913, i32 %3914) #12
  %4158 = extractvalue { %"class.skvm::Builder"*, i32 } %4157, 0
  %4159 = extractvalue { %"class.skvm::Builder"*, i32 } %4157, 1
  %4160 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4155, %"class.skvm::Builder"* %4155, i32 %4156, %"class.skvm::Builder"* %4158, i32 %4159) #12
  %4161 = extractvalue { %"class.skvm::Builder"*, i32 } %4160, 0
  %4162 = extractvalue { %"class.skvm::Builder"*, i32 } %4160, 1
  %4163 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3729, %"class.skvm::Builder"* %3910, i32 %3911) #12
  %4164 = extractvalue { %"class.skvm::Builder"*, i32 } %4163, 0
  %4165 = extractvalue { %"class.skvm::Builder"*, i32 } %4163, 1
  %4166 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4161, %"class.skvm::Builder"* %4161, i32 %4162, %"class.skvm::Builder"* %4164, i32 %4165) #12
  %4167 = extractvalue { %"class.skvm::Builder"*, i32 } %4166, 1
  %4168 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4169 = getelementptr inbounds i32, i32* %4168, i64 13
  store i32 %4167, i32* %4169, align 4
  %4170 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3727, %"class.skvm::Builder"* %3895, i32 %3896) #12
  %4171 = extractvalue { %"class.skvm::Builder"*, i32 } %4170, 0
  %4172 = extractvalue { %"class.skvm::Builder"*, i32 } %4170, 1
  %4173 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3719, %"class.skvm::Builder"* %3901, i32 %3902) #12
  %4174 = extractvalue { %"class.skvm::Builder"*, i32 } %4173, 0
  %4175 = extractvalue { %"class.skvm::Builder"*, i32 } %4173, 1
  %4176 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4171, %"class.skvm::Builder"* %4171, i32 %4172, %"class.skvm::Builder"* %4174, i32 %4175) #12
  %4177 = extractvalue { %"class.skvm::Builder"*, i32 } %4176, 0
  %4178 = extractvalue { %"class.skvm::Builder"*, i32 } %4176, 1
  %4179 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3735, %"class.skvm::Builder"* %3892, i32 %3893) #12
  %4180 = extractvalue { %"class.skvm::Builder"*, i32 } %4179, 0
  %4181 = extractvalue { %"class.skvm::Builder"*, i32 } %4179, 1
  %4182 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4177, %"class.skvm::Builder"* %4177, i32 %4178, %"class.skvm::Builder"* %4180, i32 %4181) #12
  %4183 = extractvalue { %"class.skvm::Builder"*, i32 } %4182, 1
  %4184 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4185 = getelementptr inbounds i32, i32* %4184, i64 14
  store i32 %4183, i32* %4185, align 4
  %4186 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3717, %"class.skvm::Builder"* %3901, i32 %3902) #12
  %4187 = extractvalue { %"class.skvm::Builder"*, i32 } %4186, 0
  %4188 = extractvalue { %"class.skvm::Builder"*, i32 } %4186, 1
  %4189 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3725, %"class.skvm::Builder"* %3895, i32 %3896) #12
  %4190 = extractvalue { %"class.skvm::Builder"*, i32 } %4189, 0
  %4191 = extractvalue { %"class.skvm::Builder"*, i32 } %4189, 1
  %4192 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4187, %"class.skvm::Builder"* %4187, i32 %4188, %"class.skvm::Builder"* %4190, i32 %4191) #12
  %4193 = extractvalue { %"class.skvm::Builder"*, i32 } %4192, 0
  %4194 = extractvalue { %"class.skvm::Builder"*, i32 } %4192, 1
  %4195 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %3713, %"class.skvm::Builder"* %3713, i32 %3733, %"class.skvm::Builder"* %3892, i32 %3893) #12
  %4196 = extractvalue { %"class.skvm::Builder"*, i32 } %4195, 0
  %4197 = extractvalue { %"class.skvm::Builder"*, i32 } %4195, 1
  %4198 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4193, %"class.skvm::Builder"* %4193, i32 %4194, %"class.skvm::Builder"* %4196, i32 %4197) #12
  %4199 = extractvalue { %"class.skvm::Builder"*, i32 } %4198, 1
  %4200 = load i32*, i32** %3960, align 8, !alias.scope !253
  %4201 = getelementptr inbounds i32, i32* %4200, i64 15
  store i32 %4199, i32* %4201, align 4
  br label %5485

4202:                                             ; preds = %3410
  %4203 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %4203, i8 0, i64 16, i1 false)
  %4204 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4205 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4206 = bitcast i8* %4205 to i64*
  %4207 = bitcast i8* %4204 to i8**
  store i8* %4203, i8** %4207, align 8
  store i64 34359738368, i64* %4206, align 8
  br label %5485

4208:                                             ; preds = %343
  %4209 = icmp eq i32 %345, 0
  %4210 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4211 = bitcast i8* %4210 to i64*
  %4212 = load i64, i64* %4211, align 8
  %4213 = lshr i64 %4212, 1
  %4214 = and i64 %4213, 2147483647
  %4215 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %4216 = bitcast i8* %4215 to i64*
  %4217 = load i64, i64* %4216, align 8
  %4218 = lshr i64 %4217, 1
  %4219 = and i64 %4218, 2147483647
  %4220 = icmp ult i64 %4214, %4219
  %4221 = select i1 %4220, i64 %4219, i64 %4214
  br i1 %4209, label %4222, label %4309

4222:                                             ; preds = %4208
  %4223 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4223) #12, !noalias !256
  %4224 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 16
  %4225 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %15, i64 0, i32 0, i32 0, i32 0, i64 24
  %4226 = bitcast i8* %4225 to i64*
  %4227 = bitcast i8* %4224 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4223, i8 -86, i64 16, i1 false) #12, !noalias !256
  store i8* %4223, i8** %4227, align 8, !noalias !256
  store i64 34359738368, i64* %4226, align 8, !noalias !256
  %4228 = trunc i64 %4221 to i32
  %4229 = icmp eq i32 %4228, 0
  br i1 %4229, label %4238, label %4230

4230:                                             ; preds = %4222
  %4231 = bitcast i8* %4224 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4231, i32 %4228, i32 1) #12
  %4232 = load i64, i64* %4226, align 8, !noalias !256
  %4233 = shl nuw nsw i64 %4221, 1
  %4234 = add i64 %4232, %4233
  %4235 = and i64 %4234, 4294967294
  %4236 = and i64 %4232, -4294967295
  %4237 = or i64 %4235, %4236
  store i64 %4237, i64* %4226, align 8, !noalias !256
  br label %4238

4238:                                             ; preds = %4230, %4222
  %4239 = icmp eq i64 %4221, 0
  br i1 %4239, label %4247, label %4240

4240:                                             ; preds = %4238
  %4241 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4242 = bitcast i8* %4224 to i32**
  %4243 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4244 = bitcast i8* %4243 to i32**
  %4245 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4246 = bitcast i8* %4245 to i32**
  br label %4283

4247:                                             ; preds = %4283, %4238
  %4248 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4249 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4250 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4251 = bitcast i8* %4250 to i64*
  %4252 = bitcast i8* %4248 to i8**
  store i8* %4249, i8** %4252, align 8, !alias.scope !256
  store i64 34359738368, i64* %4251, align 8, !alias.scope !256
  %4253 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %15, %0
  br i1 %4253, label %4254, label %4256

4254:                                             ; preds = %4247
  %4255 = load i64, i64* %4226, align 8, !noalias !256
  br label %4277

4256:                                             ; preds = %4247
  %4257 = bitcast i8* %4248 to %class.SkTArray*
  store i64 34359738368, i64* %4251, align 8, !alias.scope !256
  %4258 = load i64, i64* %4226, align 8, !noalias !256
  %4259 = lshr i64 %4258, 1
  %4260 = trunc i64 %4259 to i32
  %4261 = and i32 %4260, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4257, i32 %4261, i32 0) #12
  %4262 = load i64, i64* %4226, align 8, !noalias !256
  %4263 = and i64 %4262, 4294967294
  %4264 = load i64, i64* %4251, align 8, !alias.scope !256
  %4265 = and i64 %4264, -4294967295
  %4266 = or i64 %4265, %4263
  store i64 %4266, i64* %4251, align 8, !alias.scope !256
  %4267 = shl i64 %4262, 1
  %4268 = and i64 %4267, 8589934588
  %4269 = icmp eq i64 %4268, 0
  br i1 %4269, label %4274, label %4270

4270:                                             ; preds = %4256
  %4271 = load i8*, i8** %4252, align 8, !alias.scope !256
  %4272 = load i8*, i8** %4227, align 8, !noalias !256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4271, i8* align 1 %4272, i64 %4268, i1 false) #12
  %4273 = load i64, i64* %4226, align 8, !noalias !256
  br label %4274

4274:                                             ; preds = %4270, %4256
  %4275 = phi i64 [ %4262, %4256 ], [ %4273, %4270 ]
  %4276 = and i64 %4275, -4294967295
  store i64 %4276, i64* %4226, align 8, !noalias !256
  br label %4277

4277:                                             ; preds = %4274, %4254
  %4278 = phi i64 [ %4255, %4254 ], [ %4276, %4274 ]
  %4279 = and i64 %4278, 1
  %4280 = icmp eq i64 %4279, 0
  br i1 %4280, label %4308, label %4281

4281:                                             ; preds = %4277
  %4282 = load i8*, i8** %4227, align 8, !noalias !256
  call void @_Z7sk_freePv(i8* %4282) #12
  br label %4308

4283:                                             ; preds = %4283, %4240
  %4284 = phi i64 [ 0, %4240 ], [ %4306, %4283 ]
  %4285 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4241, align 8
  %4286 = load i64, i64* %4211, align 8
  %4287 = and i64 %4286, 4294967294
  %4288 = icmp eq i64 %4287, 2
  %4289 = load i32*, i32** %4244, align 16
  %4290 = shl i64 %4284, 32
  %4291 = ashr exact i64 %4290, 32
  %4292 = select i1 %4288, i64 0, i64 %4291
  %4293 = getelementptr inbounds i32, i32* %4289, i64 %4292
  %4294 = load i32, i32* %4293, align 4
  %4295 = load i64, i64* %4216, align 8
  %4296 = and i64 %4295, 4294967294
  %4297 = icmp eq i64 %4296, 2
  %4298 = load i32*, i32** %4246, align 16
  %4299 = select i1 %4297, i64 0, i64 %4291
  %4300 = getelementptr inbounds i32, i32* %4298, i64 %4299
  %4301 = load i32, i32* %4300, align 4
  %4302 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3F32ES1_(%"class.skvm::Builder"* %4285, %"class.skvm::Builder"* %4285, i32 %4294, %"class.skvm::Builder"* %4285, i32 %4301) #12
  %4303 = extractvalue { %"class.skvm::Builder"*, i32 } %4302, 1
  %4304 = load i32*, i32** %4242, align 8, !noalias !256
  %4305 = getelementptr inbounds i32, i32* %4304, i64 %4291
  store i32 %4303, i32* %4305, align 4
  %4306 = add nuw nsw i64 %4284, 1
  %4307 = icmp ult i64 %4306, %4221
  br i1 %4307, label %4283, label %4247

4308:                                             ; preds = %4277, %4281
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4223) #12, !noalias !256
  br label %5485

4309:                                             ; preds = %4208
  %4310 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4310) #12, !noalias !259
  %4311 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 16
  %4312 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %14, i64 0, i32 0, i32 0, i32 0, i64 24
  %4313 = bitcast i8* %4312 to i64*
  %4314 = bitcast i8* %4311 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4310, i8 -86, i64 16, i1 false) #12, !noalias !259
  store i8* %4310, i8** %4314, align 8, !noalias !259
  store i64 34359738368, i64* %4313, align 8, !noalias !259
  %4315 = trunc i64 %4221 to i32
  %4316 = icmp eq i32 %4315, 0
  br i1 %4316, label %4325, label %4317

4317:                                             ; preds = %4309
  %4318 = bitcast i8* %4311 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4318, i32 %4315, i32 1) #12
  %4319 = load i64, i64* %4313, align 8, !noalias !259
  %4320 = shl nuw nsw i64 %4221, 1
  %4321 = add i64 %4319, %4320
  %4322 = and i64 %4321, 4294967294
  %4323 = and i64 %4319, -4294967295
  %4324 = or i64 %4322, %4323
  store i64 %4324, i64* %4313, align 8, !noalias !259
  br label %4325

4325:                                             ; preds = %4317, %4309
  %4326 = icmp eq i64 %4221, 0
  br i1 %4326, label %4334, label %4327

4327:                                             ; preds = %4325
  %4328 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4329 = bitcast i8* %4311 to i32**
  %4330 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4331 = bitcast i8* %4330 to i32**
  %4332 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4333 = bitcast i8* %4332 to i32**
  br label %4370

4334:                                             ; preds = %4370, %4325
  %4335 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4336 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4337 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4338 = bitcast i8* %4337 to i64*
  %4339 = bitcast i8* %4335 to i8**
  store i8* %4336, i8** %4339, align 8, !alias.scope !259
  store i64 34359738368, i64* %4338, align 8, !alias.scope !259
  %4340 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %14, %0
  br i1 %4340, label %4341, label %4343

4341:                                             ; preds = %4334
  %4342 = load i64, i64* %4313, align 8, !noalias !259
  br label %4364

4343:                                             ; preds = %4334
  %4344 = bitcast i8* %4335 to %class.SkTArray*
  store i64 34359738368, i64* %4338, align 8, !alias.scope !259
  %4345 = load i64, i64* %4313, align 8, !noalias !259
  %4346 = lshr i64 %4345, 1
  %4347 = trunc i64 %4346 to i32
  %4348 = and i32 %4347, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4344, i32 %4348, i32 0) #12
  %4349 = load i64, i64* %4313, align 8, !noalias !259
  %4350 = and i64 %4349, 4294967294
  %4351 = load i64, i64* %4338, align 8, !alias.scope !259
  %4352 = and i64 %4351, -4294967295
  %4353 = or i64 %4352, %4350
  store i64 %4353, i64* %4338, align 8, !alias.scope !259
  %4354 = shl i64 %4349, 1
  %4355 = and i64 %4354, 8589934588
  %4356 = icmp eq i64 %4355, 0
  br i1 %4356, label %4361, label %4357

4357:                                             ; preds = %4343
  %4358 = load i8*, i8** %4339, align 8, !alias.scope !259
  %4359 = load i8*, i8** %4314, align 8, !noalias !259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4358, i8* align 1 %4359, i64 %4355, i1 false) #12
  %4360 = load i64, i64* %4313, align 8, !noalias !259
  br label %4361

4361:                                             ; preds = %4357, %4343
  %4362 = phi i64 [ %4349, %4343 ], [ %4360, %4357 ]
  %4363 = and i64 %4362, -4294967295
  store i64 %4363, i64* %4313, align 8, !noalias !259
  br label %4364

4364:                                             ; preds = %4361, %4341
  %4365 = phi i64 [ %4342, %4341 ], [ %4363, %4361 ]
  %4366 = and i64 %4365, 1
  %4367 = icmp eq i64 %4366, 0
  br i1 %4367, label %4395, label %4368

4368:                                             ; preds = %4364
  %4369 = load i8*, i8** %4314, align 8, !noalias !259
  call void @_Z7sk_freePv(i8* %4369) #12
  br label %4395

4370:                                             ; preds = %4370, %4327
  %4371 = phi i64 [ 0, %4327 ], [ %4393, %4370 ]
  %4372 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4328, align 8
  %4373 = load i64, i64* %4211, align 8
  %4374 = and i64 %4373, 4294967294
  %4375 = icmp eq i64 %4374, 2
  %4376 = load i32*, i32** %4331, align 16
  %4377 = shl i64 %4371, 32
  %4378 = ashr exact i64 %4377, 32
  %4379 = select i1 %4375, i64 0, i64 %4378
  %4380 = getelementptr inbounds i32, i32* %4376, i64 %4379
  %4381 = load i32, i32* %4380, align 4
  %4382 = load i64, i64* %4216, align 8
  %4383 = and i64 %4382, 4294967294
  %4384 = icmp eq i64 %4383, 2
  %4385 = load i32*, i32** %4333, align 16
  %4386 = select i1 %4384, i64 0, i64 %4378
  %4387 = getelementptr inbounds i32, i32* %4385, i64 %4386
  %4388 = load i32, i32* %4387, align 4
  %4389 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2ltENS_3I32ES1_(%"class.skvm::Builder"* %4372, %"class.skvm::Builder"* %4372, i32 %4381, %"class.skvm::Builder"* %4372, i32 %4388) #12
  %4390 = extractvalue { %"class.skvm::Builder"*, i32 } %4389, 1
  %4391 = load i32*, i32** %4329, align 8, !noalias !259
  %4392 = getelementptr inbounds i32, i32* %4391, i64 %4378
  store i32 %4390, i32* %4392, align 4
  %4393 = add nuw nsw i64 %4371, 1
  %4394 = icmp ult i64 %4393, %4221
  br i1 %4394, label %4370, label %4334

4395:                                             ; preds = %4364, %4368
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4310) #12, !noalias !259
  br label %5485

4396:                                             ; preds = %343
  %4397 = icmp eq i32 %345, 0
  %4398 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4399 = bitcast i8* %4398 to i64*
  %4400 = load i64, i64* %4399, align 8
  %4401 = lshr i64 %4400, 1
  %4402 = and i64 %4401, 2147483647
  %4403 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %4404 = bitcast i8* %4403 to i64*
  %4405 = load i64, i64* %4404, align 8
  %4406 = lshr i64 %4405, 1
  %4407 = and i64 %4406, 2147483647
  %4408 = icmp ult i64 %4402, %4407
  %4409 = select i1 %4408, i64 %4407, i64 %4402
  br i1 %4397, label %4410, label %4497

4410:                                             ; preds = %4396
  %4411 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4411) #12, !noalias !262
  %4412 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 16
  %4413 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %13, i64 0, i32 0, i32 0, i32 0, i64 24
  %4414 = bitcast i8* %4413 to i64*
  %4415 = bitcast i8* %4412 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4411, i8 -86, i64 16, i1 false) #12, !noalias !262
  store i8* %4411, i8** %4415, align 8, !noalias !262
  store i64 34359738368, i64* %4414, align 8, !noalias !262
  %4416 = trunc i64 %4409 to i32
  %4417 = icmp eq i32 %4416, 0
  br i1 %4417, label %4426, label %4418

4418:                                             ; preds = %4410
  %4419 = bitcast i8* %4412 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4419, i32 %4416, i32 1) #12
  %4420 = load i64, i64* %4414, align 8, !noalias !262
  %4421 = shl nuw nsw i64 %4409, 1
  %4422 = add i64 %4420, %4421
  %4423 = and i64 %4422, 4294967294
  %4424 = and i64 %4420, -4294967295
  %4425 = or i64 %4423, %4424
  store i64 %4425, i64* %4414, align 8, !noalias !262
  br label %4426

4426:                                             ; preds = %4418, %4410
  %4427 = icmp eq i64 %4409, 0
  br i1 %4427, label %4435, label %4428

4428:                                             ; preds = %4426
  %4429 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4430 = bitcast i8* %4412 to i32**
  %4431 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4432 = bitcast i8* %4431 to i32**
  %4433 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4434 = bitcast i8* %4433 to i32**
  br label %4471

4435:                                             ; preds = %4471, %4426
  %4436 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4437 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4438 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4439 = bitcast i8* %4438 to i64*
  %4440 = bitcast i8* %4436 to i8**
  store i8* %4437, i8** %4440, align 8, !alias.scope !262
  store i64 34359738368, i64* %4439, align 8, !alias.scope !262
  %4441 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %13, %0
  br i1 %4441, label %4442, label %4444

4442:                                             ; preds = %4435
  %4443 = load i64, i64* %4414, align 8, !noalias !262
  br label %4465

4444:                                             ; preds = %4435
  %4445 = bitcast i8* %4436 to %class.SkTArray*
  store i64 34359738368, i64* %4439, align 8, !alias.scope !262
  %4446 = load i64, i64* %4414, align 8, !noalias !262
  %4447 = lshr i64 %4446, 1
  %4448 = trunc i64 %4447 to i32
  %4449 = and i32 %4448, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4445, i32 %4449, i32 0) #12
  %4450 = load i64, i64* %4414, align 8, !noalias !262
  %4451 = and i64 %4450, 4294967294
  %4452 = load i64, i64* %4439, align 8, !alias.scope !262
  %4453 = and i64 %4452, -4294967295
  %4454 = or i64 %4453, %4451
  store i64 %4454, i64* %4439, align 8, !alias.scope !262
  %4455 = shl i64 %4450, 1
  %4456 = and i64 %4455, 8589934588
  %4457 = icmp eq i64 %4456, 0
  br i1 %4457, label %4462, label %4458

4458:                                             ; preds = %4444
  %4459 = load i8*, i8** %4440, align 8, !alias.scope !262
  %4460 = load i8*, i8** %4415, align 8, !noalias !262
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4459, i8* align 1 %4460, i64 %4456, i1 false) #12
  %4461 = load i64, i64* %4414, align 8, !noalias !262
  br label %4462

4462:                                             ; preds = %4458, %4444
  %4463 = phi i64 [ %4450, %4444 ], [ %4461, %4458 ]
  %4464 = and i64 %4463, -4294967295
  store i64 %4464, i64* %4414, align 8, !noalias !262
  br label %4465

4465:                                             ; preds = %4462, %4442
  %4466 = phi i64 [ %4443, %4442 ], [ %4464, %4462 ]
  %4467 = and i64 %4466, 1
  %4468 = icmp eq i64 %4467, 0
  br i1 %4468, label %4496, label %4469

4469:                                             ; preds = %4465
  %4470 = load i8*, i8** %4415, align 8, !noalias !262
  call void @_Z7sk_freePv(i8* %4470) #12
  br label %4496

4471:                                             ; preds = %4471, %4428
  %4472 = phi i64 [ 0, %4428 ], [ %4494, %4471 ]
  %4473 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4429, align 8
  %4474 = load i64, i64* %4399, align 8
  %4475 = and i64 %4474, 4294967294
  %4476 = icmp eq i64 %4475, 2
  %4477 = load i32*, i32** %4432, align 16
  %4478 = shl i64 %4472, 32
  %4479 = ashr exact i64 %4478, 32
  %4480 = select i1 %4476, i64 0, i64 %4479
  %4481 = getelementptr inbounds i32, i32* %4477, i64 %4480
  %4482 = load i32, i32* %4481, align 4
  %4483 = load i64, i64* %4404, align 8
  %4484 = and i64 %4483, 4294967294
  %4485 = icmp eq i64 %4484, 2
  %4486 = load i32*, i32** %4434, align 16
  %4487 = select i1 %4485, i64 0, i64 %4479
  %4488 = getelementptr inbounds i32, i32* %4486, i64 %4487
  %4489 = load i32, i32* %4488, align 4
  %4490 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3F32ES1_(%"class.skvm::Builder"* %4473, %"class.skvm::Builder"* %4473, i32 %4482, %"class.skvm::Builder"* %4473, i32 %4489) #12
  %4491 = extractvalue { %"class.skvm::Builder"*, i32 } %4490, 1
  %4492 = load i32*, i32** %4430, align 8, !noalias !262
  %4493 = getelementptr inbounds i32, i32* %4492, i64 %4479
  store i32 %4491, i32* %4493, align 4
  %4494 = add nuw nsw i64 %4472, 1
  %4495 = icmp ult i64 %4494, %4409
  br i1 %4495, label %4471, label %4435

4496:                                             ; preds = %4465, %4469
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4411) #12, !noalias !262
  br label %5485

4497:                                             ; preds = %4396
  %4498 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4498) #12, !noalias !265
  %4499 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 16
  %4500 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %12, i64 0, i32 0, i32 0, i32 0, i64 24
  %4501 = bitcast i8* %4500 to i64*
  %4502 = bitcast i8* %4499 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4498, i8 -86, i64 16, i1 false) #12, !noalias !265
  store i8* %4498, i8** %4502, align 8, !noalias !265
  store i64 34359738368, i64* %4501, align 8, !noalias !265
  %4503 = trunc i64 %4409 to i32
  %4504 = icmp eq i32 %4503, 0
  br i1 %4504, label %4513, label %4505

4505:                                             ; preds = %4497
  %4506 = bitcast i8* %4499 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4506, i32 %4503, i32 1) #12
  %4507 = load i64, i64* %4501, align 8, !noalias !265
  %4508 = shl nuw nsw i64 %4409, 1
  %4509 = add i64 %4507, %4508
  %4510 = and i64 %4509, 4294967294
  %4511 = and i64 %4507, -4294967295
  %4512 = or i64 %4510, %4511
  store i64 %4512, i64* %4501, align 8, !noalias !265
  br label %4513

4513:                                             ; preds = %4505, %4497
  %4514 = icmp eq i64 %4409, 0
  br i1 %4514, label %4522, label %4515

4515:                                             ; preds = %4513
  %4516 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4517 = bitcast i8* %4499 to i32**
  %4518 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4519 = bitcast i8* %4518 to i32**
  %4520 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4521 = bitcast i8* %4520 to i32**
  br label %4558

4522:                                             ; preds = %4558, %4513
  %4523 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4524 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4525 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4526 = bitcast i8* %4525 to i64*
  %4527 = bitcast i8* %4523 to i8**
  store i8* %4524, i8** %4527, align 8, !alias.scope !265
  store i64 34359738368, i64* %4526, align 8, !alias.scope !265
  %4528 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %12, %0
  br i1 %4528, label %4529, label %4531

4529:                                             ; preds = %4522
  %4530 = load i64, i64* %4501, align 8, !noalias !265
  br label %4552

4531:                                             ; preds = %4522
  %4532 = bitcast i8* %4523 to %class.SkTArray*
  store i64 34359738368, i64* %4526, align 8, !alias.scope !265
  %4533 = load i64, i64* %4501, align 8, !noalias !265
  %4534 = lshr i64 %4533, 1
  %4535 = trunc i64 %4534 to i32
  %4536 = and i32 %4535, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4532, i32 %4536, i32 0) #12
  %4537 = load i64, i64* %4501, align 8, !noalias !265
  %4538 = and i64 %4537, 4294967294
  %4539 = load i64, i64* %4526, align 8, !alias.scope !265
  %4540 = and i64 %4539, -4294967295
  %4541 = or i64 %4540, %4538
  store i64 %4541, i64* %4526, align 8, !alias.scope !265
  %4542 = shl i64 %4537, 1
  %4543 = and i64 %4542, 8589934588
  %4544 = icmp eq i64 %4543, 0
  br i1 %4544, label %4549, label %4545

4545:                                             ; preds = %4531
  %4546 = load i8*, i8** %4527, align 8, !alias.scope !265
  %4547 = load i8*, i8** %4502, align 8, !noalias !265
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4546, i8* align 1 %4547, i64 %4543, i1 false) #12
  %4548 = load i64, i64* %4501, align 8, !noalias !265
  br label %4549

4549:                                             ; preds = %4545, %4531
  %4550 = phi i64 [ %4537, %4531 ], [ %4548, %4545 ]
  %4551 = and i64 %4550, -4294967295
  store i64 %4551, i64* %4501, align 8, !noalias !265
  br label %4552

4552:                                             ; preds = %4549, %4529
  %4553 = phi i64 [ %4530, %4529 ], [ %4551, %4549 ]
  %4554 = and i64 %4553, 1
  %4555 = icmp eq i64 %4554, 0
  br i1 %4555, label %4583, label %4556

4556:                                             ; preds = %4552
  %4557 = load i8*, i8** %4502, align 8, !noalias !265
  call void @_Z7sk_freePv(i8* %4557) #12
  br label %4583

4558:                                             ; preds = %4558, %4515
  %4559 = phi i64 [ 0, %4515 ], [ %4581, %4558 ]
  %4560 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4516, align 8
  %4561 = load i64, i64* %4399, align 8
  %4562 = and i64 %4561, 4294967294
  %4563 = icmp eq i64 %4562, 2
  %4564 = load i32*, i32** %4519, align 16
  %4565 = shl i64 %4559, 32
  %4566 = ashr exact i64 %4565, 32
  %4567 = select i1 %4563, i64 0, i64 %4566
  %4568 = getelementptr inbounds i32, i32* %4564, i64 %4567
  %4569 = load i32, i32* %4568, align 4
  %4570 = load i64, i64* %4404, align 8
  %4571 = and i64 %4570, 4294967294
  %4572 = icmp eq i64 %4571, 2
  %4573 = load i32*, i32** %4521, align 16
  %4574 = select i1 %4572, i64 0, i64 %4566
  %4575 = getelementptr inbounds i32, i32* %4573, i64 %4574
  %4576 = load i32, i32* %4575, align 4
  %4577 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3lteENS_3I32ES1_(%"class.skvm::Builder"* %4560, %"class.skvm::Builder"* %4560, i32 %4569, %"class.skvm::Builder"* %4560, i32 %4576) #12
  %4578 = extractvalue { %"class.skvm::Builder"*, i32 } %4577, 1
  %4579 = load i32*, i32** %4517, align 8, !noalias !265
  %4580 = getelementptr inbounds i32, i32* %4579, i64 %4566
  store i32 %4578, i32* %4580, align 4
  %4581 = add nuw nsw i64 %4559, 1
  %4582 = icmp ult i64 %4581, %4409
  br i1 %4582, label %4558, label %4522

4583:                                             ; preds = %4552, %4556
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4498) #12, !noalias !265
  br label %5485

4584:                                             ; preds = %343
  %4585 = icmp eq i32 %345, 0
  %4586 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4587 = bitcast i8* %4586 to i64*
  %4588 = load i64, i64* %4587, align 8
  %4589 = lshr i64 %4588, 1
  %4590 = and i64 %4589, 2147483647
  %4591 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %4592 = bitcast i8* %4591 to i64*
  %4593 = load i64, i64* %4592, align 8
  %4594 = lshr i64 %4593, 1
  %4595 = and i64 %4594, 2147483647
  %4596 = icmp ult i64 %4590, %4595
  %4597 = select i1 %4596, i64 %4595, i64 %4590
  br i1 %4585, label %4598, label %4685

4598:                                             ; preds = %4584
  %4599 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4599) #12, !noalias !268
  %4600 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 16
  %4601 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %11, i64 0, i32 0, i32 0, i32 0, i64 24
  %4602 = bitcast i8* %4601 to i64*
  %4603 = bitcast i8* %4600 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4599, i8 -86, i64 16, i1 false) #12, !noalias !268
  store i8* %4599, i8** %4603, align 8, !noalias !268
  store i64 34359738368, i64* %4602, align 8, !noalias !268
  %4604 = trunc i64 %4597 to i32
  %4605 = icmp eq i32 %4604, 0
  br i1 %4605, label %4614, label %4606

4606:                                             ; preds = %4598
  %4607 = bitcast i8* %4600 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4607, i32 %4604, i32 1) #12
  %4608 = load i64, i64* %4602, align 8, !noalias !268
  %4609 = shl nuw nsw i64 %4597, 1
  %4610 = add i64 %4608, %4609
  %4611 = and i64 %4610, 4294967294
  %4612 = and i64 %4608, -4294967295
  %4613 = or i64 %4611, %4612
  store i64 %4613, i64* %4602, align 8, !noalias !268
  br label %4614

4614:                                             ; preds = %4606, %4598
  %4615 = icmp eq i64 %4597, 0
  br i1 %4615, label %4623, label %4616

4616:                                             ; preds = %4614
  %4617 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4618 = bitcast i8* %4600 to i32**
  %4619 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4620 = bitcast i8* %4619 to i32**
  %4621 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4622 = bitcast i8* %4621 to i32**
  br label %4659

4623:                                             ; preds = %4659, %4614
  %4624 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4625 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4626 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4627 = bitcast i8* %4626 to i64*
  %4628 = bitcast i8* %4624 to i8**
  store i8* %4625, i8** %4628, align 8, !alias.scope !268
  store i64 34359738368, i64* %4627, align 8, !alias.scope !268
  %4629 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %11, %0
  br i1 %4629, label %4630, label %4632

4630:                                             ; preds = %4623
  %4631 = load i64, i64* %4602, align 8, !noalias !268
  br label %4653

4632:                                             ; preds = %4623
  %4633 = bitcast i8* %4624 to %class.SkTArray*
  store i64 34359738368, i64* %4627, align 8, !alias.scope !268
  %4634 = load i64, i64* %4602, align 8, !noalias !268
  %4635 = lshr i64 %4634, 1
  %4636 = trunc i64 %4635 to i32
  %4637 = and i32 %4636, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4633, i32 %4637, i32 0) #12
  %4638 = load i64, i64* %4602, align 8, !noalias !268
  %4639 = and i64 %4638, 4294967294
  %4640 = load i64, i64* %4627, align 8, !alias.scope !268
  %4641 = and i64 %4640, -4294967295
  %4642 = or i64 %4641, %4639
  store i64 %4642, i64* %4627, align 8, !alias.scope !268
  %4643 = shl i64 %4638, 1
  %4644 = and i64 %4643, 8589934588
  %4645 = icmp eq i64 %4644, 0
  br i1 %4645, label %4650, label %4646

4646:                                             ; preds = %4632
  %4647 = load i8*, i8** %4628, align 8, !alias.scope !268
  %4648 = load i8*, i8** %4603, align 8, !noalias !268
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4647, i8* align 1 %4648, i64 %4644, i1 false) #12
  %4649 = load i64, i64* %4602, align 8, !noalias !268
  br label %4650

4650:                                             ; preds = %4646, %4632
  %4651 = phi i64 [ %4638, %4632 ], [ %4649, %4646 ]
  %4652 = and i64 %4651, -4294967295
  store i64 %4652, i64* %4602, align 8, !noalias !268
  br label %4653

4653:                                             ; preds = %4650, %4630
  %4654 = phi i64 [ %4631, %4630 ], [ %4652, %4650 ]
  %4655 = and i64 %4654, 1
  %4656 = icmp eq i64 %4655, 0
  br i1 %4656, label %4684, label %4657

4657:                                             ; preds = %4653
  %4658 = load i8*, i8** %4603, align 8, !noalias !268
  call void @_Z7sk_freePv(i8* %4658) #12
  br label %4684

4659:                                             ; preds = %4659, %4616
  %4660 = phi i64 [ 0, %4616 ], [ %4682, %4659 ]
  %4661 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4617, align 8
  %4662 = load i64, i64* %4587, align 8
  %4663 = and i64 %4662, 4294967294
  %4664 = icmp eq i64 %4663, 2
  %4665 = load i32*, i32** %4620, align 16
  %4666 = shl i64 %4660, 32
  %4667 = ashr exact i64 %4666, 32
  %4668 = select i1 %4664, i64 0, i64 %4667
  %4669 = getelementptr inbounds i32, i32* %4665, i64 %4668
  %4670 = load i32, i32* %4669, align 4
  %4671 = load i64, i64* %4592, align 8
  %4672 = and i64 %4671, 4294967294
  %4673 = icmp eq i64 %4672, 2
  %4674 = load i32*, i32** %4622, align 16
  %4675 = select i1 %4673, i64 0, i64 %4667
  %4676 = getelementptr inbounds i32, i32* %4674, i64 %4675
  %4677 = load i32, i32* %4676, align 4
  %4678 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3F32ES1_(%"class.skvm::Builder"* %4661, %"class.skvm::Builder"* %4661, i32 %4670, %"class.skvm::Builder"* %4661, i32 %4677) #12
  %4679 = extractvalue { %"class.skvm::Builder"*, i32 } %4678, 1
  %4680 = load i32*, i32** %4618, align 8, !noalias !268
  %4681 = getelementptr inbounds i32, i32* %4680, i64 %4667
  store i32 %4679, i32* %4681, align 4
  %4682 = add nuw nsw i64 %4660, 1
  %4683 = icmp ult i64 %4682, %4597
  br i1 %4683, label %4659, label %4623

4684:                                             ; preds = %4653, %4657
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4599) #12, !noalias !268
  br label %5485

4685:                                             ; preds = %4584
  %4686 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4686) #12, !noalias !271
  %4687 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 16
  %4688 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %10, i64 0, i32 0, i32 0, i32 0, i64 24
  %4689 = bitcast i8* %4688 to i64*
  %4690 = bitcast i8* %4687 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4686, i8 -86, i64 16, i1 false) #12, !noalias !271
  store i8* %4686, i8** %4690, align 8, !noalias !271
  store i64 34359738368, i64* %4689, align 8, !noalias !271
  %4691 = trunc i64 %4597 to i32
  %4692 = icmp eq i32 %4691, 0
  br i1 %4692, label %4701, label %4693

4693:                                             ; preds = %4685
  %4694 = bitcast i8* %4687 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4694, i32 %4691, i32 1) #12
  %4695 = load i64, i64* %4689, align 8, !noalias !271
  %4696 = shl nuw nsw i64 %4597, 1
  %4697 = add i64 %4695, %4696
  %4698 = and i64 %4697, 4294967294
  %4699 = and i64 %4695, -4294967295
  %4700 = or i64 %4698, %4699
  store i64 %4700, i64* %4689, align 8, !noalias !271
  br label %4701

4701:                                             ; preds = %4693, %4685
  %4702 = icmp eq i64 %4597, 0
  br i1 %4702, label %4710, label %4703

4703:                                             ; preds = %4701
  %4704 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4705 = bitcast i8* %4687 to i32**
  %4706 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4707 = bitcast i8* %4706 to i32**
  %4708 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4709 = bitcast i8* %4708 to i32**
  br label %4746

4710:                                             ; preds = %4746, %4701
  %4711 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4712 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4713 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4714 = bitcast i8* %4713 to i64*
  %4715 = bitcast i8* %4711 to i8**
  store i8* %4712, i8** %4715, align 8, !alias.scope !271
  store i64 34359738368, i64* %4714, align 8, !alias.scope !271
  %4716 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %10, %0
  br i1 %4716, label %4717, label %4719

4717:                                             ; preds = %4710
  %4718 = load i64, i64* %4689, align 8, !noalias !271
  br label %4740

4719:                                             ; preds = %4710
  %4720 = bitcast i8* %4711 to %class.SkTArray*
  store i64 34359738368, i64* %4714, align 8, !alias.scope !271
  %4721 = load i64, i64* %4689, align 8, !noalias !271
  %4722 = lshr i64 %4721, 1
  %4723 = trunc i64 %4722 to i32
  %4724 = and i32 %4723, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4720, i32 %4724, i32 0) #12
  %4725 = load i64, i64* %4689, align 8, !noalias !271
  %4726 = and i64 %4725, 4294967294
  %4727 = load i64, i64* %4714, align 8, !alias.scope !271
  %4728 = and i64 %4727, -4294967295
  %4729 = or i64 %4728, %4726
  store i64 %4729, i64* %4714, align 8, !alias.scope !271
  %4730 = shl i64 %4725, 1
  %4731 = and i64 %4730, 8589934588
  %4732 = icmp eq i64 %4731, 0
  br i1 %4732, label %4737, label %4733

4733:                                             ; preds = %4719
  %4734 = load i8*, i8** %4715, align 8, !alias.scope !271
  %4735 = load i8*, i8** %4690, align 8, !noalias !271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4734, i8* align 1 %4735, i64 %4731, i1 false) #12
  %4736 = load i64, i64* %4689, align 8, !noalias !271
  br label %4737

4737:                                             ; preds = %4733, %4719
  %4738 = phi i64 [ %4725, %4719 ], [ %4736, %4733 ]
  %4739 = and i64 %4738, -4294967295
  store i64 %4739, i64* %4689, align 8, !noalias !271
  br label %4740

4740:                                             ; preds = %4737, %4717
  %4741 = phi i64 [ %4718, %4717 ], [ %4739, %4737 ]
  %4742 = and i64 %4741, 1
  %4743 = icmp eq i64 %4742, 0
  br i1 %4743, label %4771, label %4744

4744:                                             ; preds = %4740
  %4745 = load i8*, i8** %4690, align 8, !noalias !271
  call void @_Z7sk_freePv(i8* %4745) #12
  br label %4771

4746:                                             ; preds = %4746, %4703
  %4747 = phi i64 [ 0, %4703 ], [ %4769, %4746 ]
  %4748 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4704, align 8
  %4749 = load i64, i64* %4587, align 8
  %4750 = and i64 %4749, 4294967294
  %4751 = icmp eq i64 %4750, 2
  %4752 = load i32*, i32** %4707, align 16
  %4753 = shl i64 %4747, 32
  %4754 = ashr exact i64 %4753, 32
  %4755 = select i1 %4751, i64 0, i64 %4754
  %4756 = getelementptr inbounds i32, i32* %4752, i64 %4755
  %4757 = load i32, i32* %4756, align 4
  %4758 = load i64, i64* %4592, align 8
  %4759 = and i64 %4758, 4294967294
  %4760 = icmp eq i64 %4759, 2
  %4761 = load i32*, i32** %4709, align 16
  %4762 = select i1 %4760, i64 0, i64 %4754
  %4763 = getelementptr inbounds i32, i32* %4761, i64 %4762
  %4764 = load i32, i32* %4763, align 4
  %4765 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2gtENS_3I32ES1_(%"class.skvm::Builder"* %4748, %"class.skvm::Builder"* %4748, i32 %4757, %"class.skvm::Builder"* %4748, i32 %4764) #12
  %4766 = extractvalue { %"class.skvm::Builder"*, i32 } %4765, 1
  %4767 = load i32*, i32** %4705, align 8, !noalias !271
  %4768 = getelementptr inbounds i32, i32* %4767, i64 %4754
  store i32 %4766, i32* %4768, align 4
  %4769 = add nuw nsw i64 %4747, 1
  %4770 = icmp ult i64 %4769, %4597
  br i1 %4770, label %4746, label %4710

4771:                                             ; preds = %4740, %4744
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4686) #12, !noalias !271
  br label %5485

4772:                                             ; preds = %343
  %4773 = icmp eq i32 %345, 0
  %4774 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4775 = bitcast i8* %4774 to i64*
  %4776 = load i64, i64* %4775, align 8
  %4777 = lshr i64 %4776, 1
  %4778 = and i64 %4777, 2147483647
  %4779 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %4780 = bitcast i8* %4779 to i64*
  %4781 = load i64, i64* %4780, align 8
  %4782 = lshr i64 %4781, 1
  %4783 = and i64 %4782, 2147483647
  %4784 = icmp ult i64 %4778, %4783
  %4785 = select i1 %4784, i64 %4783, i64 %4778
  br i1 %4773, label %4786, label %4873

4786:                                             ; preds = %4772
  %4787 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4787) #12, !noalias !274
  %4788 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 16
  %4789 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %9, i64 0, i32 0, i32 0, i32 0, i64 24
  %4790 = bitcast i8* %4789 to i64*
  %4791 = bitcast i8* %4788 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4787, i8 -86, i64 16, i1 false) #12, !noalias !274
  store i8* %4787, i8** %4791, align 8, !noalias !274
  store i64 34359738368, i64* %4790, align 8, !noalias !274
  %4792 = trunc i64 %4785 to i32
  %4793 = icmp eq i32 %4792, 0
  br i1 %4793, label %4802, label %4794

4794:                                             ; preds = %4786
  %4795 = bitcast i8* %4788 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4795, i32 %4792, i32 1) #12
  %4796 = load i64, i64* %4790, align 8, !noalias !274
  %4797 = shl nuw nsw i64 %4785, 1
  %4798 = add i64 %4796, %4797
  %4799 = and i64 %4798, 4294967294
  %4800 = and i64 %4796, -4294967295
  %4801 = or i64 %4799, %4800
  store i64 %4801, i64* %4790, align 8, !noalias !274
  br label %4802

4802:                                             ; preds = %4794, %4786
  %4803 = icmp eq i64 %4785, 0
  br i1 %4803, label %4811, label %4804

4804:                                             ; preds = %4802
  %4805 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4806 = bitcast i8* %4788 to i32**
  %4807 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4808 = bitcast i8* %4807 to i32**
  %4809 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4810 = bitcast i8* %4809 to i32**
  br label %4847

4811:                                             ; preds = %4847, %4802
  %4812 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4813 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4814 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4815 = bitcast i8* %4814 to i64*
  %4816 = bitcast i8* %4812 to i8**
  store i8* %4813, i8** %4816, align 8, !alias.scope !274
  store i64 34359738368, i64* %4815, align 8, !alias.scope !274
  %4817 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %9, %0
  br i1 %4817, label %4818, label %4820

4818:                                             ; preds = %4811
  %4819 = load i64, i64* %4790, align 8, !noalias !274
  br label %4841

4820:                                             ; preds = %4811
  %4821 = bitcast i8* %4812 to %class.SkTArray*
  store i64 34359738368, i64* %4815, align 8, !alias.scope !274
  %4822 = load i64, i64* %4790, align 8, !noalias !274
  %4823 = lshr i64 %4822, 1
  %4824 = trunc i64 %4823 to i32
  %4825 = and i32 %4824, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4821, i32 %4825, i32 0) #12
  %4826 = load i64, i64* %4790, align 8, !noalias !274
  %4827 = and i64 %4826, 4294967294
  %4828 = load i64, i64* %4815, align 8, !alias.scope !274
  %4829 = and i64 %4828, -4294967295
  %4830 = or i64 %4829, %4827
  store i64 %4830, i64* %4815, align 8, !alias.scope !274
  %4831 = shl i64 %4826, 1
  %4832 = and i64 %4831, 8589934588
  %4833 = icmp eq i64 %4832, 0
  br i1 %4833, label %4838, label %4834

4834:                                             ; preds = %4820
  %4835 = load i8*, i8** %4816, align 8, !alias.scope !274
  %4836 = load i8*, i8** %4791, align 8, !noalias !274
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4835, i8* align 1 %4836, i64 %4832, i1 false) #12
  %4837 = load i64, i64* %4790, align 8, !noalias !274
  br label %4838

4838:                                             ; preds = %4834, %4820
  %4839 = phi i64 [ %4826, %4820 ], [ %4837, %4834 ]
  %4840 = and i64 %4839, -4294967295
  store i64 %4840, i64* %4790, align 8, !noalias !274
  br label %4841

4841:                                             ; preds = %4838, %4818
  %4842 = phi i64 [ %4819, %4818 ], [ %4840, %4838 ]
  %4843 = and i64 %4842, 1
  %4844 = icmp eq i64 %4843, 0
  br i1 %4844, label %4872, label %4845

4845:                                             ; preds = %4841
  %4846 = load i8*, i8** %4791, align 8, !noalias !274
  call void @_Z7sk_freePv(i8* %4846) #12
  br label %4872

4847:                                             ; preds = %4847, %4804
  %4848 = phi i64 [ 0, %4804 ], [ %4870, %4847 ]
  %4849 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4805, align 8
  %4850 = load i64, i64* %4775, align 8
  %4851 = and i64 %4850, 4294967294
  %4852 = icmp eq i64 %4851, 2
  %4853 = load i32*, i32** %4808, align 16
  %4854 = shl i64 %4848, 32
  %4855 = ashr exact i64 %4854, 32
  %4856 = select i1 %4852, i64 0, i64 %4855
  %4857 = getelementptr inbounds i32, i32* %4853, i64 %4856
  %4858 = load i32, i32* %4857, align 4
  %4859 = load i64, i64* %4780, align 8
  %4860 = and i64 %4859, 4294967294
  %4861 = icmp eq i64 %4860, 2
  %4862 = load i32*, i32** %4810, align 16
  %4863 = select i1 %4861, i64 0, i64 %4855
  %4864 = getelementptr inbounds i32, i32* %4862, i64 %4863
  %4865 = load i32, i32* %4864, align 4
  %4866 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3F32ES1_(%"class.skvm::Builder"* %4849, %"class.skvm::Builder"* %4849, i32 %4858, %"class.skvm::Builder"* %4849, i32 %4865) #12
  %4867 = extractvalue { %"class.skvm::Builder"*, i32 } %4866, 1
  %4868 = load i32*, i32** %4806, align 8, !noalias !274
  %4869 = getelementptr inbounds i32, i32* %4868, i64 %4855
  store i32 %4867, i32* %4869, align 4
  %4870 = add nuw nsw i64 %4848, 1
  %4871 = icmp ult i64 %4870, %4785
  br i1 %4871, label %4847, label %4811

4872:                                             ; preds = %4841, %4845
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4787) #12, !noalias !274
  br label %5485

4873:                                             ; preds = %4772
  %4874 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4874) #12, !noalias !277
  %4875 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 16
  %4876 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %8, i64 0, i32 0, i32 0, i32 0, i64 24
  %4877 = bitcast i8* %4876 to i64*
  %4878 = bitcast i8* %4875 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4874, i8 -86, i64 16, i1 false) #12, !noalias !277
  store i8* %4874, i8** %4878, align 8, !noalias !277
  store i64 34359738368, i64* %4877, align 8, !noalias !277
  %4879 = trunc i64 %4785 to i32
  %4880 = icmp eq i32 %4879, 0
  br i1 %4880, label %4889, label %4881

4881:                                             ; preds = %4873
  %4882 = bitcast i8* %4875 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4882, i32 %4879, i32 1) #12
  %4883 = load i64, i64* %4877, align 8, !noalias !277
  %4884 = shl nuw nsw i64 %4785, 1
  %4885 = add i64 %4883, %4884
  %4886 = and i64 %4885, 4294967294
  %4887 = and i64 %4883, -4294967295
  %4888 = or i64 %4886, %4887
  store i64 %4888, i64* %4877, align 8, !noalias !277
  br label %4889

4889:                                             ; preds = %4881, %4873
  %4890 = icmp eq i64 %4785, 0
  br i1 %4890, label %4898, label %4891

4891:                                             ; preds = %4889
  %4892 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4893 = bitcast i8* %4875 to i32**
  %4894 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4895 = bitcast i8* %4894 to i32**
  %4896 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4897 = bitcast i8* %4896 to i32**
  br label %4934

4898:                                             ; preds = %4934, %4889
  %4899 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4900 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4901 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4902 = bitcast i8* %4901 to i64*
  %4903 = bitcast i8* %4899 to i8**
  store i8* %4900, i8** %4903, align 8, !alias.scope !277
  store i64 34359738368, i64* %4902, align 8, !alias.scope !277
  %4904 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %8, %0
  br i1 %4904, label %4905, label %4907

4905:                                             ; preds = %4898
  %4906 = load i64, i64* %4877, align 8, !noalias !277
  br label %4928

4907:                                             ; preds = %4898
  %4908 = bitcast i8* %4899 to %class.SkTArray*
  store i64 34359738368, i64* %4902, align 8, !alias.scope !277
  %4909 = load i64, i64* %4877, align 8, !noalias !277
  %4910 = lshr i64 %4909, 1
  %4911 = trunc i64 %4910 to i32
  %4912 = and i32 %4911, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4908, i32 %4912, i32 0) #12
  %4913 = load i64, i64* %4877, align 8, !noalias !277
  %4914 = and i64 %4913, 4294967294
  %4915 = load i64, i64* %4902, align 8, !alias.scope !277
  %4916 = and i64 %4915, -4294967295
  %4917 = or i64 %4916, %4914
  store i64 %4917, i64* %4902, align 8, !alias.scope !277
  %4918 = shl i64 %4913, 1
  %4919 = and i64 %4918, 8589934588
  %4920 = icmp eq i64 %4919, 0
  br i1 %4920, label %4925, label %4921

4921:                                             ; preds = %4907
  %4922 = load i8*, i8** %4903, align 8, !alias.scope !277
  %4923 = load i8*, i8** %4878, align 8, !noalias !277
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4922, i8* align 1 %4923, i64 %4919, i1 false) #12
  %4924 = load i64, i64* %4877, align 8, !noalias !277
  br label %4925

4925:                                             ; preds = %4921, %4907
  %4926 = phi i64 [ %4913, %4907 ], [ %4924, %4921 ]
  %4927 = and i64 %4926, -4294967295
  store i64 %4927, i64* %4877, align 8, !noalias !277
  br label %4928

4928:                                             ; preds = %4925, %4905
  %4929 = phi i64 [ %4906, %4905 ], [ %4927, %4925 ]
  %4930 = and i64 %4929, 1
  %4931 = icmp eq i64 %4930, 0
  br i1 %4931, label %4959, label %4932

4932:                                             ; preds = %4928
  %4933 = load i8*, i8** %4878, align 8, !noalias !277
  call void @_Z7sk_freePv(i8* %4933) #12
  br label %4959

4934:                                             ; preds = %4934, %4891
  %4935 = phi i64 [ 0, %4891 ], [ %4957, %4934 ]
  %4936 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4892, align 8
  %4937 = load i64, i64* %4775, align 8
  %4938 = and i64 %4937, 4294967294
  %4939 = icmp eq i64 %4938, 2
  %4940 = load i32*, i32** %4895, align 16
  %4941 = shl i64 %4935, 32
  %4942 = ashr exact i64 %4941, 32
  %4943 = select i1 %4939, i64 0, i64 %4942
  %4944 = getelementptr inbounds i32, i32* %4940, i64 %4943
  %4945 = load i32, i32* %4944, align 4
  %4946 = load i64, i64* %4780, align 8
  %4947 = and i64 %4946, 4294967294
  %4948 = icmp eq i64 %4947, 2
  %4949 = load i32*, i32** %4897, align 16
  %4950 = select i1 %4948, i64 0, i64 %4942
  %4951 = getelementptr inbounds i32, i32* %4949, i64 %4950
  %4952 = load i32, i32* %4951, align 4
  %4953 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3I32ES1_(%"class.skvm::Builder"* %4936, %"class.skvm::Builder"* %4936, i32 %4945, %"class.skvm::Builder"* %4936, i32 %4952) #12
  %4954 = extractvalue { %"class.skvm::Builder"*, i32 } %4953, 1
  %4955 = load i32*, i32** %4893, align 8, !noalias !277
  %4956 = getelementptr inbounds i32, i32* %4955, i64 %4942
  store i32 %4954, i32* %4956, align 4
  %4957 = add nuw nsw i64 %4935, 1
  %4958 = icmp ult i64 %4957, %4785
  br i1 %4958, label %4934, label %4898

4959:                                             ; preds = %4928, %4932
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4874) #12, !noalias !277
  br label %5485

4960:                                             ; preds = %343
  %4961 = icmp eq i32 %345, 0
  %4962 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %4963 = bitcast i8* %4962 to i64*
  %4964 = load i64, i64* %4963, align 8
  %4965 = lshr i64 %4964, 1
  %4966 = and i64 %4965, 2147483647
  %4967 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %4968 = bitcast i8* %4967 to i64*
  %4969 = load i64, i64* %4968, align 8
  %4970 = lshr i64 %4969, 1
  %4971 = and i64 %4970, 2147483647
  %4972 = icmp ult i64 %4966, %4971
  %4973 = select i1 %4972, i64 %4971, i64 %4966
  br i1 %4961, label %4974, label %5061

4974:                                             ; preds = %4960
  %4975 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4975) #12, !noalias !280
  %4976 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 16
  %4977 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %7, i64 0, i32 0, i32 0, i32 0, i64 24
  %4978 = bitcast i8* %4977 to i64*
  %4979 = bitcast i8* %4976 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4975, i8 -86, i64 16, i1 false) #12, !noalias !280
  store i8* %4975, i8** %4979, align 8, !noalias !280
  store i64 34359738368, i64* %4978, align 8, !noalias !280
  %4980 = trunc i64 %4973 to i32
  %4981 = icmp eq i32 %4980, 0
  br i1 %4981, label %4990, label %4982

4982:                                             ; preds = %4974
  %4983 = bitcast i8* %4976 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %4983, i32 %4980, i32 1) #12
  %4984 = load i64, i64* %4978, align 8, !noalias !280
  %4985 = shl nuw nsw i64 %4973, 1
  %4986 = add i64 %4984, %4985
  %4987 = and i64 %4986, 4294967294
  %4988 = and i64 %4984, -4294967295
  %4989 = or i64 %4987, %4988
  store i64 %4989, i64* %4978, align 8, !noalias !280
  br label %4990

4990:                                             ; preds = %4982, %4974
  %4991 = icmp eq i64 %4973, 0
  br i1 %4991, label %4999, label %4992

4992:                                             ; preds = %4990
  %4993 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %4994 = bitcast i8* %4976 to i32**
  %4995 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4996 = bitcast i8* %4995 to i32**
  %4997 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %4998 = bitcast i8* %4997 to i32**
  br label %5035

4999:                                             ; preds = %5035, %4990
  %5000 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5001 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5002 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5003 = bitcast i8* %5002 to i64*
  %5004 = bitcast i8* %5000 to i8**
  store i8* %5001, i8** %5004, align 8, !alias.scope !280
  store i64 34359738368, i64* %5003, align 8, !alias.scope !280
  %5005 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %7, %0
  br i1 %5005, label %5006, label %5008

5006:                                             ; preds = %4999
  %5007 = load i64, i64* %4978, align 8, !noalias !280
  br label %5029

5008:                                             ; preds = %4999
  %5009 = bitcast i8* %5000 to %class.SkTArray*
  store i64 34359738368, i64* %5003, align 8, !alias.scope !280
  %5010 = load i64, i64* %4978, align 8, !noalias !280
  %5011 = lshr i64 %5010, 1
  %5012 = trunc i64 %5011 to i32
  %5013 = and i32 %5012, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5009, i32 %5013, i32 0) #12
  %5014 = load i64, i64* %4978, align 8, !noalias !280
  %5015 = and i64 %5014, 4294967294
  %5016 = load i64, i64* %5003, align 8, !alias.scope !280
  %5017 = and i64 %5016, -4294967295
  %5018 = or i64 %5017, %5015
  store i64 %5018, i64* %5003, align 8, !alias.scope !280
  %5019 = shl i64 %5014, 1
  %5020 = and i64 %5019, 8589934588
  %5021 = icmp eq i64 %5020, 0
  br i1 %5021, label %5026, label %5022

5022:                                             ; preds = %5008
  %5023 = load i8*, i8** %5004, align 8, !alias.scope !280
  %5024 = load i8*, i8** %4979, align 8, !noalias !280
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5023, i8* align 1 %5024, i64 %5020, i1 false) #12
  %5025 = load i64, i64* %4978, align 8, !noalias !280
  br label %5026

5026:                                             ; preds = %5022, %5008
  %5027 = phi i64 [ %5014, %5008 ], [ %5025, %5022 ]
  %5028 = and i64 %5027, -4294967295
  store i64 %5028, i64* %4978, align 8, !noalias !280
  br label %5029

5029:                                             ; preds = %5026, %5006
  %5030 = phi i64 [ %5007, %5006 ], [ %5028, %5026 ]
  %5031 = and i64 %5030, 1
  %5032 = icmp eq i64 %5031, 0
  br i1 %5032, label %5060, label %5033

5033:                                             ; preds = %5029
  %5034 = load i8*, i8** %4979, align 8, !noalias !280
  call void @_Z7sk_freePv(i8* %5034) #12
  br label %5060

5035:                                             ; preds = %5035, %4992
  %5036 = phi i64 [ 0, %4992 ], [ %5058, %5035 ]
  %5037 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4993, align 8
  %5038 = load i64, i64* %4963, align 8
  %5039 = and i64 %5038, 4294967294
  %5040 = icmp eq i64 %5039, 2
  %5041 = load i32*, i32** %4996, align 16
  %5042 = shl i64 %5036, 32
  %5043 = ashr exact i64 %5042, 32
  %5044 = select i1 %5040, i64 0, i64 %5043
  %5045 = getelementptr inbounds i32, i32* %5041, i64 %5044
  %5046 = load i32, i32* %5045, align 4
  %5047 = load i64, i64* %4968, align 8
  %5048 = and i64 %5047, 4294967294
  %5049 = icmp eq i64 %5048, 2
  %5050 = load i32*, i32** %4998, align 16
  %5051 = select i1 %5049, i64 0, i64 %5043
  %5052 = getelementptr inbounds i32, i32* %5050, i64 %5051
  %5053 = load i32, i32* %5052, align 4
  %5054 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3F32ES1_(%"class.skvm::Builder"* %5037, %"class.skvm::Builder"* %5037, i32 %5046, %"class.skvm::Builder"* %5037, i32 %5053) #12
  %5055 = extractvalue { %"class.skvm::Builder"*, i32 } %5054, 1
  %5056 = load i32*, i32** %4994, align 8, !noalias !280
  %5057 = getelementptr inbounds i32, i32* %5056, i64 %5043
  store i32 %5055, i32* %5057, align 4
  %5058 = add nuw nsw i64 %5036, 1
  %5059 = icmp ult i64 %5058, %4973
  br i1 %5059, label %5035, label %4999

5060:                                             ; preds = %5029, %5033
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4975) #12, !noalias !280
  br label %5485

5061:                                             ; preds = %4960
  %5062 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5062) #12, !noalias !283
  %5063 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 16
  %5064 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %6, i64 0, i32 0, i32 0, i32 0, i64 24
  %5065 = bitcast i8* %5064 to i64*
  %5066 = bitcast i8* %5063 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5062, i8 -86, i64 16, i1 false) #12, !noalias !283
  store i8* %5062, i8** %5066, align 8, !noalias !283
  store i64 34359738368, i64* %5065, align 8, !noalias !283
  %5067 = trunc i64 %4973 to i32
  %5068 = icmp eq i32 %5067, 0
  br i1 %5068, label %5077, label %5069

5069:                                             ; preds = %5061
  %5070 = bitcast i8* %5063 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5070, i32 %5067, i32 1) #12
  %5071 = load i64, i64* %5065, align 8, !noalias !283
  %5072 = shl nuw nsw i64 %4973, 1
  %5073 = add i64 %5071, %5072
  %5074 = and i64 %5073, 4294967294
  %5075 = and i64 %5071, -4294967295
  %5076 = or i64 %5074, %5075
  store i64 %5076, i64* %5065, align 8, !noalias !283
  br label %5077

5077:                                             ; preds = %5069, %5061
  %5078 = icmp eq i64 %4973, 0
  br i1 %5078, label %5086, label %5079

5079:                                             ; preds = %5077
  %5080 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5081 = bitcast i8* %5063 to i32**
  %5082 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5083 = bitcast i8* %5082 to i32**
  %5084 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %5085 = bitcast i8* %5084 to i32**
  br label %5122

5086:                                             ; preds = %5122, %5077
  %5087 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5088 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5089 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5090 = bitcast i8* %5089 to i64*
  %5091 = bitcast i8* %5087 to i8**
  store i8* %5088, i8** %5091, align 8, !alias.scope !283
  store i64 34359738368, i64* %5090, align 8, !alias.scope !283
  %5092 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %6, %0
  br i1 %5092, label %5093, label %5095

5093:                                             ; preds = %5086
  %5094 = load i64, i64* %5065, align 8, !noalias !283
  br label %5116

5095:                                             ; preds = %5086
  %5096 = bitcast i8* %5087 to %class.SkTArray*
  store i64 34359738368, i64* %5090, align 8, !alias.scope !283
  %5097 = load i64, i64* %5065, align 8, !noalias !283
  %5098 = lshr i64 %5097, 1
  %5099 = trunc i64 %5098 to i32
  %5100 = and i32 %5099, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5096, i32 %5100, i32 0) #12
  %5101 = load i64, i64* %5065, align 8, !noalias !283
  %5102 = and i64 %5101, 4294967294
  %5103 = load i64, i64* %5090, align 8, !alias.scope !283
  %5104 = and i64 %5103, -4294967295
  %5105 = or i64 %5104, %5102
  store i64 %5105, i64* %5090, align 8, !alias.scope !283
  %5106 = shl i64 %5101, 1
  %5107 = and i64 %5106, 8589934588
  %5108 = icmp eq i64 %5107, 0
  br i1 %5108, label %5113, label %5109

5109:                                             ; preds = %5095
  %5110 = load i8*, i8** %5091, align 8, !alias.scope !283
  %5111 = load i8*, i8** %5066, align 8, !noalias !283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5110, i8* align 1 %5111, i64 %5107, i1 false) #12
  %5112 = load i64, i64* %5065, align 8, !noalias !283
  br label %5113

5113:                                             ; preds = %5109, %5095
  %5114 = phi i64 [ %5101, %5095 ], [ %5112, %5109 ]
  %5115 = and i64 %5114, -4294967295
  store i64 %5115, i64* %5065, align 8, !noalias !283
  br label %5116

5116:                                             ; preds = %5113, %5093
  %5117 = phi i64 [ %5094, %5093 ], [ %5115, %5113 ]
  %5118 = and i64 %5117, 1
  %5119 = icmp eq i64 %5118, 0
  br i1 %5119, label %5147, label %5120

5120:                                             ; preds = %5116
  %5121 = load i8*, i8** %5066, align 8, !noalias !283
  call void @_Z7sk_freePv(i8* %5121) #12
  br label %5147

5122:                                             ; preds = %5122, %5079
  %5123 = phi i64 [ 0, %5079 ], [ %5145, %5122 ]
  %5124 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5080, align 8
  %5125 = load i64, i64* %4963, align 8
  %5126 = and i64 %5125, 4294967294
  %5127 = icmp eq i64 %5126, 2
  %5128 = load i32*, i32** %5083, align 16
  %5129 = shl i64 %5123, 32
  %5130 = ashr exact i64 %5129, 32
  %5131 = select i1 %5127, i64 0, i64 %5130
  %5132 = getelementptr inbounds i32, i32* %5128, i64 %5131
  %5133 = load i32, i32* %5132, align 4
  %5134 = load i64, i64* %4968, align 8
  %5135 = and i64 %5134, 4294967294
  %5136 = icmp eq i64 %5135, 2
  %5137 = load i32*, i32** %5085, align 16
  %5138 = select i1 %5136, i64 0, i64 %5130
  %5139 = getelementptr inbounds i32, i32* %5137, i64 %5138
  %5140 = load i32, i32* %5139, align 4
  %5141 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3I32ES1_(%"class.skvm::Builder"* %5124, %"class.skvm::Builder"* %5124, i32 %5133, %"class.skvm::Builder"* %5124, i32 %5140) #12
  %5142 = extractvalue { %"class.skvm::Builder"*, i32 } %5141, 1
  %5143 = load i32*, i32** %5081, align 8, !noalias !283
  %5144 = getelementptr inbounds i32, i32* %5143, i64 %5130
  store i32 %5142, i32* %5144, align 4
  %5145 = add nuw nsw i64 %5123, 1
  %5146 = icmp ult i64 %5145, %4973
  br i1 %5146, label %5122, label %5086

5147:                                             ; preds = %5116, %5120
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5062) #12, !noalias !283
  br label %5485

5148:                                             ; preds = %343
  %5149 = icmp eq i32 %345, 0
  %5150 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5151 = bitcast i8* %5150 to i64*
  %5152 = load i64, i64* %5151, align 8
  %5153 = lshr i64 %5152, 1
  %5154 = and i64 %5153, 2147483647
  %5155 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %5156 = bitcast i8* %5155 to i64*
  %5157 = load i64, i64* %5156, align 8
  %5158 = lshr i64 %5157, 1
  %5159 = and i64 %5158, 2147483647
  %5160 = icmp ult i64 %5154, %5159
  %5161 = select i1 %5160, i64 %5159, i64 %5154
  br i1 %5149, label %5162, label %5249

5162:                                             ; preds = %5148
  %5163 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5163) #12, !noalias !286
  %5164 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 16
  %5165 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %5, i64 0, i32 0, i32 0, i32 0, i64 24
  %5166 = bitcast i8* %5165 to i64*
  %5167 = bitcast i8* %5164 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5163, i8 -86, i64 16, i1 false) #12, !noalias !286
  store i8* %5163, i8** %5167, align 8, !noalias !286
  store i64 34359738368, i64* %5166, align 8, !noalias !286
  %5168 = trunc i64 %5161 to i32
  %5169 = icmp eq i32 %5168, 0
  br i1 %5169, label %5178, label %5170

5170:                                             ; preds = %5162
  %5171 = bitcast i8* %5164 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5171, i32 %5168, i32 1) #12
  %5172 = load i64, i64* %5166, align 8, !noalias !286
  %5173 = shl nuw nsw i64 %5161, 1
  %5174 = add i64 %5172, %5173
  %5175 = and i64 %5174, 4294967294
  %5176 = and i64 %5172, -4294967295
  %5177 = or i64 %5175, %5176
  store i64 %5177, i64* %5166, align 8, !noalias !286
  br label %5178

5178:                                             ; preds = %5170, %5162
  %5179 = icmp eq i64 %5161, 0
  br i1 %5179, label %5187, label %5180

5180:                                             ; preds = %5178
  %5181 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5182 = bitcast i8* %5164 to i32**
  %5183 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5184 = bitcast i8* %5183 to i32**
  %5185 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %5186 = bitcast i8* %5185 to i32**
  br label %5223

5187:                                             ; preds = %5223, %5178
  %5188 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5189 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5190 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5191 = bitcast i8* %5190 to i64*
  %5192 = bitcast i8* %5188 to i8**
  store i8* %5189, i8** %5192, align 8, !alias.scope !286
  store i64 34359738368, i64* %5191, align 8, !alias.scope !286
  %5193 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %5, %0
  br i1 %5193, label %5194, label %5196

5194:                                             ; preds = %5187
  %5195 = load i64, i64* %5166, align 8, !noalias !286
  br label %5217

5196:                                             ; preds = %5187
  %5197 = bitcast i8* %5188 to %class.SkTArray*
  store i64 34359738368, i64* %5191, align 8, !alias.scope !286
  %5198 = load i64, i64* %5166, align 8, !noalias !286
  %5199 = lshr i64 %5198, 1
  %5200 = trunc i64 %5199 to i32
  %5201 = and i32 %5200, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5197, i32 %5201, i32 0) #12
  %5202 = load i64, i64* %5166, align 8, !noalias !286
  %5203 = and i64 %5202, 4294967294
  %5204 = load i64, i64* %5191, align 8, !alias.scope !286
  %5205 = and i64 %5204, -4294967295
  %5206 = or i64 %5205, %5203
  store i64 %5206, i64* %5191, align 8, !alias.scope !286
  %5207 = shl i64 %5202, 1
  %5208 = and i64 %5207, 8589934588
  %5209 = icmp eq i64 %5208, 0
  br i1 %5209, label %5214, label %5210

5210:                                             ; preds = %5196
  %5211 = load i8*, i8** %5192, align 8, !alias.scope !286
  %5212 = load i8*, i8** %5167, align 8, !noalias !286
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5211, i8* align 1 %5212, i64 %5208, i1 false) #12
  %5213 = load i64, i64* %5166, align 8, !noalias !286
  br label %5214

5214:                                             ; preds = %5210, %5196
  %5215 = phi i64 [ %5202, %5196 ], [ %5213, %5210 ]
  %5216 = and i64 %5215, -4294967295
  store i64 %5216, i64* %5166, align 8, !noalias !286
  br label %5217

5217:                                             ; preds = %5214, %5194
  %5218 = phi i64 [ %5195, %5194 ], [ %5216, %5214 ]
  %5219 = and i64 %5218, 1
  %5220 = icmp eq i64 %5219, 0
  br i1 %5220, label %5248, label %5221

5221:                                             ; preds = %5217
  %5222 = load i8*, i8** %5167, align 8, !noalias !286
  call void @_Z7sk_freePv(i8* %5222) #12
  br label %5248

5223:                                             ; preds = %5223, %5180
  %5224 = phi i64 [ 0, %5180 ], [ %5246, %5223 ]
  %5225 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5181, align 8
  %5226 = load i64, i64* %5151, align 8
  %5227 = and i64 %5226, 4294967294
  %5228 = icmp eq i64 %5227, 2
  %5229 = load i32*, i32** %5184, align 16
  %5230 = shl i64 %5224, 32
  %5231 = ashr exact i64 %5230, 32
  %5232 = select i1 %5228, i64 0, i64 %5231
  %5233 = getelementptr inbounds i32, i32* %5229, i64 %5232
  %5234 = load i32, i32* %5233, align 4
  %5235 = load i64, i64* %5156, align 8
  %5236 = and i64 %5235, 4294967294
  %5237 = icmp eq i64 %5236, 2
  %5238 = load i32*, i32** %5186, align 16
  %5239 = select i1 %5237, i64 0, i64 %5231
  %5240 = getelementptr inbounds i32, i32* %5238, i64 %5239
  %5241 = load i32, i32* %5240, align 4
  %5242 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3F32ES1_(%"class.skvm::Builder"* %5225, %"class.skvm::Builder"* %5225, i32 %5234, %"class.skvm::Builder"* %5225, i32 %5241) #12
  %5243 = extractvalue { %"class.skvm::Builder"*, i32 } %5242, 1
  %5244 = load i32*, i32** %5182, align 8, !noalias !286
  %5245 = getelementptr inbounds i32, i32* %5244, i64 %5231
  store i32 %5243, i32* %5245, align 4
  %5246 = add nuw nsw i64 %5224, 1
  %5247 = icmp ult i64 %5246, %5161
  br i1 %5247, label %5223, label %5187

5248:                                             ; preds = %5217, %5221
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5163) #12, !noalias !286
  br label %5485

5249:                                             ; preds = %5148
  %5250 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5250) #12, !noalias !289
  %5251 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 16
  %5252 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %4, i64 0, i32 0, i32 0, i32 0, i64 24
  %5253 = bitcast i8* %5252 to i64*
  %5254 = bitcast i8* %5251 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5250, i8 -86, i64 16, i1 false) #12, !noalias !289
  store i8* %5250, i8** %5254, align 8, !noalias !289
  store i64 34359738368, i64* %5253, align 8, !noalias !289
  %5255 = trunc i64 %5161 to i32
  %5256 = icmp eq i32 %5255, 0
  br i1 %5256, label %5265, label %5257

5257:                                             ; preds = %5249
  %5258 = bitcast i8* %5251 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5258, i32 %5255, i32 1) #12
  %5259 = load i64, i64* %5253, align 8, !noalias !289
  %5260 = shl nuw nsw i64 %5161, 1
  %5261 = add i64 %5259, %5260
  %5262 = and i64 %5261, 4294967294
  %5263 = and i64 %5259, -4294967295
  %5264 = or i64 %5262, %5263
  store i64 %5264, i64* %5253, align 8, !noalias !289
  br label %5265

5265:                                             ; preds = %5257, %5249
  %5266 = icmp eq i64 %5161, 0
  br i1 %5266, label %5274, label %5267

5267:                                             ; preds = %5265
  %5268 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5269 = bitcast i8* %5251 to i32**
  %5270 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5271 = bitcast i8* %5270 to i32**
  %5272 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %5273 = bitcast i8* %5272 to i32**
  br label %5310

5274:                                             ; preds = %5310, %5265
  %5275 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5276 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5277 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5278 = bitcast i8* %5277 to i64*
  %5279 = bitcast i8* %5275 to i8**
  store i8* %5276, i8** %5279, align 8, !alias.scope !289
  store i64 34359738368, i64* %5278, align 8, !alias.scope !289
  %5280 = icmp eq %"struct.SkSL::(anonymous namespace)::Value"* %4, %0
  br i1 %5280, label %5281, label %5283

5281:                                             ; preds = %5274
  %5282 = load i64, i64* %5253, align 8, !noalias !289
  br label %5304

5283:                                             ; preds = %5274
  %5284 = bitcast i8* %5275 to %class.SkTArray*
  store i64 34359738368, i64* %5278, align 8, !alias.scope !289
  %5285 = load i64, i64* %5253, align 8, !noalias !289
  %5286 = lshr i64 %5285, 1
  %5287 = trunc i64 %5286 to i32
  %5288 = and i32 %5287, 2147483647
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5284, i32 %5288, i32 0) #12
  %5289 = load i64, i64* %5253, align 8, !noalias !289
  %5290 = and i64 %5289, 4294967294
  %5291 = load i64, i64* %5278, align 8, !alias.scope !289
  %5292 = and i64 %5291, -4294967295
  %5293 = or i64 %5292, %5290
  store i64 %5293, i64* %5278, align 8, !alias.scope !289
  %5294 = shl i64 %5289, 1
  %5295 = and i64 %5294, 8589934588
  %5296 = icmp eq i64 %5295, 0
  br i1 %5296, label %5301, label %5297

5297:                                             ; preds = %5283
  %5298 = load i8*, i8** %5279, align 8, !alias.scope !289
  %5299 = load i8*, i8** %5254, align 8, !noalias !289
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5298, i8* align 1 %5299, i64 %5295, i1 false) #12
  %5300 = load i64, i64* %5253, align 8, !noalias !289
  br label %5301

5301:                                             ; preds = %5297, %5283
  %5302 = phi i64 [ %5289, %5283 ], [ %5300, %5297 ]
  %5303 = and i64 %5302, -4294967295
  store i64 %5303, i64* %5253, align 8, !noalias !289
  br label %5304

5304:                                             ; preds = %5301, %5281
  %5305 = phi i64 [ %5282, %5281 ], [ %5303, %5301 ]
  %5306 = and i64 %5305, 1
  %5307 = icmp eq i64 %5306, 0
  br i1 %5307, label %5335, label %5308

5308:                                             ; preds = %5304
  %5309 = load i8*, i8** %5254, align 8, !noalias !289
  call void @_Z7sk_freePv(i8* %5309) #12
  br label %5335

5310:                                             ; preds = %5310, %5267
  %5311 = phi i64 [ 0, %5267 ], [ %5333, %5310 ]
  %5312 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5268, align 8
  %5313 = load i64, i64* %5151, align 8
  %5314 = and i64 %5313, 4294967294
  %5315 = icmp eq i64 %5314, 2
  %5316 = load i32*, i32** %5271, align 16
  %5317 = shl i64 %5311, 32
  %5318 = ashr exact i64 %5317, 32
  %5319 = select i1 %5315, i64 0, i64 %5318
  %5320 = getelementptr inbounds i32, i32* %5316, i64 %5319
  %5321 = load i32, i32* %5320, align 4
  %5322 = load i64, i64* %5156, align 8
  %5323 = and i64 %5322, 4294967294
  %5324 = icmp eq i64 %5323, 2
  %5325 = load i32*, i32** %5273, align 16
  %5326 = select i1 %5324, i64 0, i64 %5318
  %5327 = getelementptr inbounds i32, i32* %5325, i64 %5326
  %5328 = load i32, i32* %5327, align 4
  %5329 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3neqENS_3I32ES1_(%"class.skvm::Builder"* %5312, %"class.skvm::Builder"* %5312, i32 %5321, %"class.skvm::Builder"* %5312, i32 %5328) #12
  %5330 = extractvalue { %"class.skvm::Builder"*, i32 } %5329, 1
  %5331 = load i32*, i32** %5269, align 8, !noalias !289
  %5332 = getelementptr inbounds i32, i32* %5331, i64 %5318
  store i32 %5330, i32* %5332, align 4
  %5333 = add nuw nsw i64 %5311, 1
  %5334 = icmp ult i64 %5333, %5161
  br i1 %5334, label %5310, label %5274

5335:                                             ; preds = %5304, %5308
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5250) #12, !noalias !289
  br label %5485

5336:                                             ; preds = %343
  %5337 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5338 = bitcast i8* %5337 to i32**
  %5339 = load i32*, i32** %5338, align 16
  %5340 = load i32, i32* %5339, align 4
  %5341 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5342 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5341, align 8
  %5343 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5344 = bitcast i8* %5343 to i64*
  %5345 = load i64, i64* %5344, align 8
  %5346 = and i64 %5345, 4294967292
  %5347 = icmp eq i64 %5346, 0
  br i1 %5347, label %5356, label %5348

5348:                                             ; preds = %5336
  %5349 = getelementptr inbounds i32, i32* %5339, i64 1
  %5350 = load i32, i32* %5349, align 4
  %5351 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %5342, %"class.skvm::Builder"* %5342, i32 %5340, %"class.skvm::Builder"* %5342, i32 %5350) #12
  %5352 = extractvalue { %"class.skvm::Builder"*, i32 } %5351, 1
  %5353 = load i64, i64* %5344, align 8
  %5354 = and i64 %5353, 4294967294
  %5355 = icmp ugt i64 %5354, 4
  br i1 %5355, label %5364, label %5356

5356:                                             ; preds = %5364, %5348, %5336
  %5357 = phi i32 [ %5340, %5336 ], [ %5352, %5348 ], [ %5376, %5364 ]
  %5358 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5359 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5360 = bitcast i8* %5359 to i64*
  %5361 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5362 = bitcast i8* %5358 to i8**
  store i8* %5361, i8** %5362, align 8
  %5363 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %5360, align 8
  store i32 %5357, i32* %5363, align 8
  br label %5485

5364:                                             ; preds = %5348, %5364
  %5365 = phi i64 [ %5377, %5364 ], [ 2, %5348 ]
  %5366 = phi i32 [ %5376, %5364 ], [ %5352, %5348 ]
  %5367 = phi { %"class.skvm::Builder"*, i32 } [ %5375, %5364 ], [ %5351, %5348 ]
  %5368 = extractvalue { %"class.skvm::Builder"*, i32 } %5367, 0
  %5369 = load i32*, i32** %5338, align 16
  %5370 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5341, align 8
  %5371 = shl i64 %5365, 32
  %5372 = ashr exact i64 %5371, 32
  %5373 = getelementptr inbounds i32, i32* %5369, i64 %5372
  %5374 = load i32, i32* %5373, align 4
  %5375 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6bit_orENS_3I32ES1_(%"class.skvm::Builder"* %5368, %"class.skvm::Builder"* %5368, i32 %5366, %"class.skvm::Builder"* %5370, i32 %5374) #12
  %5376 = extractvalue { %"class.skvm::Builder"*, i32 } %5375, 1
  %5377 = add nuw nsw i64 %5365, 1
  %5378 = load i64, i64* %5344, align 8
  %5379 = lshr i64 %5378, 1
  %5380 = and i64 %5379, 2147483647
  %5381 = icmp ult i64 %5377, %5380
  br i1 %5381, label %5364, label %5356

5382:                                             ; preds = %343
  %5383 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5384 = bitcast i8* %5383 to i32**
  %5385 = load i32*, i32** %5384, align 16
  %5386 = load i32, i32* %5385, align 4
  %5387 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5388 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5387, align 8
  %5389 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5390 = bitcast i8* %5389 to i64*
  %5391 = load i64, i64* %5390, align 8
  %5392 = and i64 %5391, 4294967292
  %5393 = icmp eq i64 %5392, 0
  br i1 %5393, label %5402, label %5394

5394:                                             ; preds = %5382
  %5395 = getelementptr inbounds i32, i32* %5385, i64 1
  %5396 = load i32, i32* %5395, align 4
  %5397 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %5388, %"class.skvm::Builder"* %5388, i32 %5386, %"class.skvm::Builder"* %5388, i32 %5396) #12
  %5398 = extractvalue { %"class.skvm::Builder"*, i32 } %5397, 1
  %5399 = load i64, i64* %5390, align 8
  %5400 = and i64 %5399, 4294967294
  %5401 = icmp ugt i64 %5400, 4
  br i1 %5401, label %5410, label %5402

5402:                                             ; preds = %5410, %5394, %5382
  %5403 = phi i32 [ %5386, %5382 ], [ %5398, %5394 ], [ %5422, %5410 ]
  %5404 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5405 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5406 = bitcast i8* %5405 to i64*
  %5407 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5408 = bitcast i8* %5404 to i8**
  store i8* %5407, i8** %5408, align 8
  %5409 = bitcast %"struct.SkSL::(anonymous namespace)::Value"* %0 to i32*
  store i64 34359738370, i64* %5406, align 8
  store i32 %5403, i32* %5409, align 8
  br label %5485

5410:                                             ; preds = %5394, %5410
  %5411 = phi i64 [ %5423, %5410 ], [ 2, %5394 ]
  %5412 = phi i32 [ %5422, %5410 ], [ %5398, %5394 ]
  %5413 = phi { %"class.skvm::Builder"*, i32 } [ %5421, %5410 ], [ %5397, %5394 ]
  %5414 = extractvalue { %"class.skvm::Builder"*, i32 } %5413, 0
  %5415 = load i32*, i32** %5384, align 16
  %5416 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5387, align 8
  %5417 = shl i64 %5411, 32
  %5418 = ashr exact i64 %5417, 32
  %5419 = getelementptr inbounds i32, i32* %5415, i64 %5418
  %5420 = load i32, i32* %5419, align 4
  %5421 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %5414, %"class.skvm::Builder"* %5414, i32 %5412, %"class.skvm::Builder"* %5416, i32 %5420) #12
  %5422 = extractvalue { %"class.skvm::Builder"*, i32 } %5421, 1
  %5423 = add nuw nsw i64 %5411, 1
  %5424 = load i64, i64* %5390, align 8
  %5425 = lshr i64 %5424, 1
  %5426 = and i64 %5425, 2147483647
  %5427 = icmp ult i64 %5423, %5426
  br i1 %5427, label %5410, label %5402

5428:                                             ; preds = %343
  %5429 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5430 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5431 = bitcast i8* %5430 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5429, i8 -86, i64 16, i1 false) #12, !alias.scope !292
  %5432 = load i64, i64* %5431, align 8, !noalias !292
  %5433 = lshr i64 %5432, 1
  %5434 = and i64 %5433, 2147483647
  %5435 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5436 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5437 = bitcast i8* %5436 to i64*
  %5438 = bitcast i8* %5435 to i8**
  store i8* %5429, i8** %5438, align 8, !alias.scope !292
  store i64 34359738368, i64* %5437, align 8, !alias.scope !292
  %5439 = trunc i64 %5434 to i32
  %5440 = icmp eq i32 %5439, 0
  br i1 %5440, label %5450, label %5441

5441:                                             ; preds = %5428
  %5442 = bitcast i8* %5435 to %class.SkTArray*
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %5442, i32 %5439, i32 1) #12
  %5443 = load i64, i64* %5437, align 8, !alias.scope !292
  %5444 = shl nuw nsw i64 %5434, 1
  %5445 = add i64 %5443, %5444
  %5446 = and i64 %5445, 4294967294
  %5447 = and i64 %5443, -4294967295
  %5448 = or i64 %5446, %5447
  store i64 %5448, i64* %5437, align 8, !alias.scope !292
  %5449 = load i64, i64* %5431, align 8, !noalias !292
  br label %5450

5450:                                             ; preds = %5441, %5428
  %5451 = phi i64 [ %5432, %5428 ], [ %5449, %5441 ]
  %5452 = and i64 %5451, 4294967294
  %5453 = icmp eq i64 %5452, 0
  br i1 %5453, label %5485, label %5454

5454:                                             ; preds = %5450
  %5455 = getelementptr inbounds %"class.SkSL::SkVMGenerator", %"class.SkSL::SkVMGenerator"* %1, i64 0, i32 1
  %5456 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5457 = bitcast i8* %5456 to i32**
  %5458 = bitcast i8* %5435 to i32**
  br label %5459

5459:                                             ; preds = %5459, %5454
  %5460 = phi i64 [ 0, %5454 ], [ %5474, %5459 ]
  %5461 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %5455, align 8, !noalias !292
  %5462 = load i32*, i32** %5457, align 16, !noalias !292
  %5463 = shl i64 %5460, 32
  %5464 = ashr exact i64 %5463, 32
  %5465 = getelementptr inbounds i32, i32* %5462, i64 %5464
  %5466 = load i32, i32* %5465, align 4
  %5467 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %5461, i32 -1) #12
  %5468 = extractvalue { %"class.skvm::Builder"*, i32 } %5467, 0
  %5469 = extractvalue { %"class.skvm::Builder"*, i32 } %5467, 1
  %5470 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_xorENS_3I32ES1_(%"class.skvm::Builder"* %5461, %"class.skvm::Builder"* %5468, i32 %5469, %"class.skvm::Builder"* %5461, i32 %5466) #12
  %5471 = extractvalue { %"class.skvm::Builder"*, i32 } %5470, 1
  %5472 = load i32*, i32** %5458, align 8, !alias.scope !292
  %5473 = getelementptr inbounds i32, i32* %5472, i64 %5464
  store i32 %5471, i32* %5473, align 4
  %5474 = add nuw nsw i64 %5460, 1
  %5475 = load i64, i64* %5431, align 8, !noalias !292
  %5476 = lshr i64 %5475, 1
  %5477 = and i64 %5476, 2147483647
  %5478 = icmp ult i64 %5474, %5477
  br i1 %5478, label %5459, label %5485

5479:                                             ; preds = %343
  %5480 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %5480, i8 0, i64 16, i1 false)
  %5481 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5482 = getelementptr inbounds %"struct.SkSL::(anonymous namespace)::Value", %"struct.SkSL::(anonymous namespace)::Value"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5483 = bitcast i8* %5482 to i64*
  %5484 = bitcast i8* %5481 to i8**
  store i8* %5480, i8** %5484, align 8
  store i64 34359738368, i64* %5483, align 8
  br label %5485

5485:                                             ; preds = %5459, %2940, %2844, %2036, %1561, %1513, %1465, %1391, %1332, %1278, %1230, %1182, %1134, %1080, %1026, %780, %724, %676, %628, %574, %526, %475, %424, %5450, %2928, %2838, %2027, %1552, %1504, %1456, %1374, %1323, %1269, %1221, %1173, %1125, %1071, %1017, %771, %715, %667, %619, %565, %517, %466, %415, %5248, %5335, %5060, %5147, %4872, %4959, %4684, %4771, %4496, %4583, %4308, %4395, %895, %5479, %5402, %5356, %4202, %3945, %3587, %3460, %3409, %3310, %3116, %2711, %2703, %2658, %2481, %2444, %2293, %2180, %2004, %1886, %1787, %1688, %994
  %5486 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 24
  %5487 = bitcast i8* %5486 to i64*
  %5488 = load i64, i64* %5487, align 8
  %5489 = and i64 %5488, 1
  %5490 = icmp eq i64 %5489, 0
  br i1 %5490, label %5495, label %5491

5491:                                             ; preds = %5485
  %5492 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 2, i32 0, i32 0, i32 0, i64 16
  %5493 = bitcast i8* %5492 to i8**
  %5494 = load i8*, i8** %5493, align 16
  call void @_Z7sk_freePv(i8* %5494) #12
  br label %5495

5495:                                             ; preds = %5485, %5491
  %5496 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 24
  %5497 = bitcast i8* %5496 to i64*
  %5498 = load i64, i64* %5497, align 8
  %5499 = and i64 %5498, 1
  %5500 = icmp eq i64 %5499, 0
  br i1 %5500, label %5506, label %5502

5501:                                             ; preds = %5516, %296
  ret void

5502:                                             ; preds = %5495
  %5503 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 1, i32 0, i32 0, i32 0, i64 16
  %5504 = bitcast i8* %5503 to i8**
  %5505 = load i8*, i8** %5504, align 16
  call void @_Z7sk_freePv(i8* %5505) #12
  br label %5506

5506:                                             ; preds = %5502, %5495
  %5507 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5508 = bitcast i8* %5507 to i64*
  %5509 = load i64, i64* %5508, align 8
  %5510 = and i64 %5509, 1
  %5511 = icmp eq i64 %5510, 0
  br i1 %5511, label %5516, label %5512

5512:                                             ; preds = %5506
  %5513 = getelementptr inbounds [3 x %"struct.SkSL::(anonymous namespace)::Value"], [3 x %"struct.SkSL::(anonymous namespace)::Value"]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 16
  %5514 = bitcast i8* %5513 to i8**
  %5515 = load i8*, i8** %5514, align 16
  call void @_Z7sk_freePv(i8* %5515) #12
  br label %5516

5516:                                             ; preds = %5512, %5506
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %298) #12
  br label %5501
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder10approx_sinENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder10approx_tanENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_asinENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_atanENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder12approx_atan2ENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_powfENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_pow2ENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder11approx_log2ENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4sqrtENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4ceilENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder4lerpENS_3F32ES1_S1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32, %"struct.skvm::F32"* byval(%"struct.skvm::F32") align 8) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder6load32ENS_3PtrE(%"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare void @_ZN4skvm7Builder7store32ENS_3PtrENS_3I32E(%"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplENS_14StringFragmentE(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4SkSL11UniformInfo7UniformENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.261"*, %"struct.SkSL::UniformInfo::Uniform"* dereferenceable(40)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.261", %"class.std::__1::vector.261"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.SkSL::UniformInfo::Uniform"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.261"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 461168601842738790
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.261"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.261", %"class.std::__1::vector.261"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.SkSL::UniformInfo::Uniform"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 230584300921369395
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 461168601842738790, %14 ]
  %28 = mul i64 %27, 40
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"struct.SkSL::UniformInfo::Uniform"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %33, i64 %32
  %36 = ptrtoint %"struct.SkSL::UniformInfo::Uniform"* %35 to i64
  %37 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %34 to i8*
  %38 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %33, i64 %9, i32 1
  %40 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %1, i64 0, i32 1
  %41 = bitcast i32* %39 to i8*
  %42 = bitcast i32* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false) #12
  %43 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %34, i64 1
  %44 = ptrtoint %"struct.SkSL::UniformInfo::Uniform"* %43 to i64
  %45 = getelementptr inbounds %"class.std::__1::vector.261", %"class.std::__1::vector.261"* %0, i64 0, i32 0, i32 0
  %46 = load %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"** %45, align 8
  %47 = load %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"** %3, align 8
  %48 = icmp eq %"struct.SkSL::UniformInfo::Uniform"* %47, %46
  br i1 %48, label %49, label %51

49:                                               ; preds = %31
  %50 = ptrtoint %"struct.SkSL::UniformInfo::Uniform"* %46 to i64
  br label %66

51:                                               ; preds = %31, %51
  %52 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %54, %51 ], [ %34, %31 ]
  %53 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %55, %51 ], [ %47, %31 ]
  %54 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %52, i64 -1
  %55 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %53, i64 -1
  %56 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %54 to i8*
  %57 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 24, i1 false) #12
  %58 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %52, i64 -1, i32 1
  %59 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %53, i64 -1, i32 1
  %60 = bitcast i32* %58 to i8*
  %61 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #12
  %62 = icmp eq %"struct.SkSL::UniformInfo::Uniform"* %55, %46
  br i1 %62, label %63, label %51

63:                                               ; preds = %51
  %64 = load i64, i64* %6, align 8
  %65 = load %"struct.SkSL::UniformInfo::Uniform"*, %"struct.SkSL::UniformInfo::Uniform"** %3, align 8
  br label %66

66:                                               ; preds = %49, %63
  %67 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %46, %49 ], [ %65, %63 ]
  %68 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %34, %49 ], [ %54, %63 ]
  %69 = phi i64 [ %50, %49 ], [ %64, %63 ]
  %70 = ptrtoint %"struct.SkSL::UniformInfo::Uniform"* %68 to i64
  store i64 %70, i64* %6, align 8
  store i64 %44, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %71 = inttoptr i64 %69 to %"struct.SkSL::UniformInfo::Uniform"*
  %72 = icmp eq %"struct.SkSL::UniformInfo::Uniform"* %67, %71
  br i1 %72, label %85, label %73

73:                                               ; preds = %66, %83
  %74 = phi %"struct.SkSL::UniformInfo::Uniform"* [ %75, %83 ], [ %67, %66 ]
  %75 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %74, i64 -1
  %76 = bitcast %"struct.SkSL::UniformInfo::Uniform"* %75 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %73
  %81 = getelementptr inbounds %"struct.SkSL::UniformInfo::Uniform", %"struct.SkSL::UniformInfo::Uniform"* %75, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  tail call void @_ZdlPv(i8* %82) #14
  br label %83

83:                                               ; preds = %80, %73
  %84 = icmp eq %"struct.SkSL::UniformInfo::Uniform"* %75, %71
  br i1 %84, label %85, label %73

85:                                               ; preds = %83, %66
  %86 = icmp eq i64 %69, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %85
  %88 = inttoptr i64 %69 to i8*
  tail call void @_ZdlPv(i8* %88) #14
  br label %89

89:                                               ; preds = %85, %87
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

declare i32 @_ZN4skvm7Builder3argEi(%"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"*, float) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  %11 = bitcast i32* %5 to float*
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"class.std::__1::vector.125"* %3 to i64*
  br label %74

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.125"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.125"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #13
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #14
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = bitcast i32* %48 to float*
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %3, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #12
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #14
  %73 = load i64, i64* %18, align 8
  br label %74

74:                                               ; preds = %10, %68, %71
  %75 = phi i64* [ %15, %10 ], [ %19, %68 ], [ %19, %71 ]
  %76 = phi i64 [ %13, %10 ], [ %53, %68 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = load i64, i64* %75, align 8
  %80 = sub i64 %76, %79
  %81 = shl i64 %80, 32
  %82 = add i64 %81, -17179869184
  %83 = zext i32 %78 to i64
  %84 = or i64 %82, %83
  ret i64 %84
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE12__call_emptyEPKNS0_16__policy_storageEiOS4_OS3_(%"struct.skvm::Color"* noalias sret, %"union.std::__1::__function::__policy_storage"*, i32, %"struct.skvm::Coord"* dereferenceable(32), %"struct.skvm::Color"* dereferenceable(64)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #15
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #10 comdat {
  tail call void @abort() #13
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base.136"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.132"*, %"class.SkSL::Variable"** dereferenceable(8), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple"* dereferenceable(8), %"class.std::__1::tuple.442"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.SkSL::Variable"** %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 32
  %9 = shl i64 %7, 3
  %10 = and i64 %9, 4294967288
  %11 = add nuw nsw i64 %10, 8
  %12 = xor i64 %11, %8
  %13 = mul i64 %12, -7070675565921424023
  %14 = lshr i64 %13, 47
  %15 = xor i64 %13, %8
  %16 = xor i64 %15, %14
  %17 = mul i64 %16, -7070675565921424023
  %18 = lshr i64 %17, 47
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -7070675565921424023
  %21 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  %24 = inttoptr i64 %7 to %"class.SkSL::Variable"*
  br i1 %23, label %69, label %25

25:                                               ; preds = %5
  %26 = tail call i64 @llvm.ctpop.i64(i64 %22) #12, !range !8
  %27 = icmp ugt i64 %26, 1
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = add i64 %22, -1
  %30 = and i64 %20, %29
  br label %35

31:                                               ; preds = %25
  %32 = icmp ult i64 %20, %22
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = urem i64 %20, %22
  br label %35

35:                                               ; preds = %28, %31, %33
  %36 = phi i64 [ %30, %28 ], [ %34, %33 ], [ %20, %31 ]
  %37 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %37, align 8
  %39 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %38, i64 %36
  %40 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %39, align 8
  %41 = icmp eq %"struct.std::__1::__hash_node_base.136"* %40, null
  br i1 %41, label %69, label %42

42:                                               ; preds = %35
  %43 = add i64 %22, -1
  br label %44

44:                                               ; preds = %42, %64
  %45 = phi %"struct.std::__1::__hash_node_base.136"* [ %47, %64 ], [ %40, %42 ]
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %45, i64 0, i32 0
  %47 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %46, align 8
  %48 = icmp eq %"struct.std::__1::__hash_node_base.136"* %47, null
  br i1 %48, label %69, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %47, i64 1
  %51 = bitcast %"struct.std::__1::__hash_node_base.136"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, %20
  br i1 %53, label %64, label %54

54:                                               ; preds = %49
  br i1 %27, label %57, label %55

55:                                               ; preds = %54
  %56 = and i64 %52, %43
  br label %61

57:                                               ; preds = %54
  %58 = icmp ult i64 %52, %22
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  %60 = urem i64 %52, %22
  br label %61

61:                                               ; preds = %55, %57, %59
  %62 = phi i64 [ %56, %55 ], [ %60, %59 ], [ %52, %57 ]
  %63 = icmp eq i64 %62, %36
  br i1 %63, label %64, label %69

64:                                               ; preds = %49, %61
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %47, i64 2
  %66 = bitcast %"struct.std::__1::__hash_node_base.136"* %65 to %"class.SkSL::Variable"**
  %67 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %66, align 8
  %68 = icmp eq %"class.SkSL::Variable"* %67, %24
  br i1 %68, label %160, label %44

69:                                               ; preds = %44, %61, %35, %5
  %70 = phi i64 [ %36, %35 ], [ -6148914691236517206, %5 ], [ %36, %61 ], [ %36, %44 ]
  %71 = tail call i8* @_Znwm(i64 32) #14, !noalias !295
  %72 = getelementptr inbounds i8, i8* %71, i64 16
  %73 = bitcast %"class.std::__1::tuple"* %3 to i64**
  %74 = load i64*, i64** %73, align 8, !noalias !295
  %75 = load i64, i64* %74, align 8, !noalias !295
  %76 = bitcast i8* %72 to i64*
  store i64 %75, i64* %76, align 8, !noalias !295
  %77 = getelementptr inbounds i8, i8* %71, i64 24
  %78 = bitcast i8* %77 to i64*
  store i64 0, i64* %78, align 8, !noalias !295
  %79 = getelementptr inbounds i8, i8* %71, i64 8
  %80 = bitcast i8* %79 to i64*
  store i64 %20, i64* %80, align 8, !noalias !295
  %81 = bitcast i8* %71 to %"struct.std::__1::__hash_node_base.136"**
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %81, align 8, !noalias !295
  %82 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 2, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  %85 = uitofp i64 %84 to float
  %86 = uitofp i64 %22 to float
  %87 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 3, i32 0, i32 0
  %88 = load float, float* %87, align 4
  %89 = fmul float %88, %86
  %90 = fcmp olt float %89, %85
  %91 = or i1 %23, %90
  br i1 %91, label %92, label %115

92:                                               ; preds = %69
  %93 = shl i64 %22, 1
  %94 = icmp ult i64 %22, 3
  %95 = tail call i64 @llvm.ctpop.i64(i64 %22) #12, !range !8
  %96 = icmp ugt i64 %95, 1
  %97 = or i1 %94, %96
  %98 = zext i1 %97 to i64
  %99 = or i64 %93, %98
  %100 = fdiv float %85, %88
  %101 = tail call float @llvm.ceil.f32(float %100) #12
  %102 = fptoui float %101 to i64
  %103 = icmp ult i64 %99, %102
  %104 = select i1 %103, i64 %102, i64 %99
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm(%"class.std::__1::__hash_table.132"* %0, i64 %104)
  %105 = load i64, i64* %21, align 8
  %106 = tail call i64 @llvm.ctpop.i64(i64 %105) #12, !range !8
  %107 = icmp ugt i64 %106, 1
  br i1 %107, label %111, label %108

108:                                              ; preds = %92
  %109 = add i64 %105, -1
  %110 = and i64 %109, %20
  br label %115

111:                                              ; preds = %92
  %112 = icmp ult i64 %20, %105
  br i1 %112, label %115, label %113

113:                                              ; preds = %111
  %114 = urem i64 %20, %105
  br label %115

115:                                              ; preds = %113, %111, %108, %69
  %116 = phi i64 [ %22, %69 ], [ %105, %108 ], [ %105, %111 ], [ %105, %113 ]
  %117 = phi i64 [ %70, %69 ], [ %110, %108 ], [ %20, %111 ], [ %114, %113 ]
  %118 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %119 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %118, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %119, i64 %117
  %121 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %120, align 8
  %122 = icmp eq %"struct.std::__1::__hash_node_base.136"* %121, null
  br i1 %122, label %123, label %149

123:                                              ; preds = %115
  %124 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 1, i32 0, i32 0
  %125 = bitcast %"struct.std::__1::__hash_node_base.136"* %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast i8* %71 to i64*
  store i64 %126, i64* %127, align 8
  %128 = bitcast %"struct.std::__1::__hash_node_base.136"* %124 to i8**
  store i8* %71, i8** %128, align 8
  store %"struct.std::__1::__hash_node_base.136"* %124, %"struct.std::__1::__hash_node_base.136"** %120, align 8
  %129 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %81, align 8
  %130 = icmp eq %"struct.std::__1::__hash_node_base.136"* %129, null
  br i1 %130, label %156, label %131

131:                                              ; preds = %123
  %132 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %129, i64 1
  %133 = bitcast %"struct.std::__1::__hash_node_base.136"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = tail call i64 @llvm.ctpop.i64(i64 %116) #12, !range !8
  %136 = icmp ugt i64 %135, 1
  br i1 %136, label %140, label %137

137:                                              ; preds = %131
  %138 = add i64 %116, -1
  %139 = and i64 %134, %138
  br label %144

140:                                              ; preds = %131
  %141 = icmp ult i64 %134, %116
  br i1 %141, label %144, label %142

142:                                              ; preds = %140
  %143 = urem i64 %134, %116
  br label %144

144:                                              ; preds = %137, %140, %142
  %145 = phi i64 [ %139, %137 ], [ %143, %142 ], [ %134, %140 ]
  %146 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %118, align 8
  %147 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %146, i64 %145
  %148 = bitcast %"struct.std::__1::__hash_node_base.136"** %147 to i8**
  br label %154

149:                                              ; preds = %115
  %150 = bitcast %"struct.std::__1::__hash_node_base.136"* %121 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i8* %71 to i64*
  store i64 %151, i64* %152, align 8
  %153 = bitcast %"struct.std::__1::__hash_node_base.136"* %121 to i8**
  br label %154

154:                                              ; preds = %144, %149
  %155 = phi i8** [ %153, %149 ], [ %148, %144 ]
  store i8* %71, i8** %155, align 8
  br label %156

156:                                              ; preds = %154, %123
  %157 = bitcast i8* %71 to %"struct.std::__1::__hash_node_base.136"*
  %158 = load i64, i64* %82, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %82, align 8
  br label %160

160:                                              ; preds = %64, %156
  %161 = phi i8 [ 1, %156 ], [ 0, %64 ]
  %162 = phi %"struct.std::__1::__hash_node_base.136"* [ %157, %156 ], [ %47, %64 ]
  %163 = insertvalue { %"struct.std::__1::__hash_node_base.136"*, i8 } undef, %"struct.std::__1::__hash_node_base.136"* %162, 0
  %164 = insertvalue { %"struct.std::__1::__hash_node_base.136"*, i8 } %163, i8 %161, 1
  ret { %"struct.std::__1::__hash_node_base.136"*, i8 } %164
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm(%"class.std::__1::__hash_table.132"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !8
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #12
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.132"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #12, !range !8
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #12
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #12, !range !8
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #12
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.132"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.132"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %134, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #13
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #14
  %11 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table.132"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base.136"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base.136"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #14
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator.138", %"class.std::__1::__bucket_list_deallocator.138"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !298

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base.136"* %38, null
  br i1 %39, label %142, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base.136"* null, %"struct.std::__1::__hash_node_base.136"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base.136"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #12, !range !8
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base.136"* %36, %"struct.std::__1::__hash_node_base.136"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base.136"* %75, null
  br i1 %76, label %142, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br label %79

79:                                               ; preds = %77, %128
  %80 = phi %"struct.std::__1::__hash_node_base.136"* [ %75, %77 ], [ %132, %128 ]
  %81 = phi i64 [ %71, %77 ], [ %130, %128 ]
  %82 = phi %"struct.std::__1::__hash_node_base.136"* [ %38, %77 ], [ %129, %128 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base.136"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  br i1 %62, label %88, label %86

86:                                               ; preds = %79
  %87 = and i64 %85, %78
  br label %92

88:                                               ; preds = %79
  %89 = icmp ult i64 %85, %1
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = urem i64 %85, %1
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi i64 [ %87, %86 ], [ %91, %90 ], [ %85, %88 ]
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %128, label %95

95:                                               ; preds = %92
  %96 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %97 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %96, i64 %93
  %98 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %97, align 8
  %99 = icmp eq %"struct.std::__1::__hash_node_base.136"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %80, i64 2
  %102 = bitcast %"struct.std::__1::__hash_node_base.136"* %101 to %"class.SkSL::Variable"**
  br label %104

103:                                              ; preds = %95
  store %"struct.std::__1::__hash_node_base.136"* %82, %"struct.std::__1::__hash_node_base.136"** %97, align 8
  br label %128

104:                                              ; preds = %100, %109
  %105 = phi %"struct.std::__1::__hash_node_base.136"* [ %107, %109 ], [ %80, %100 ]
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %105, i64 0, i32 0
  %107 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %106, align 8
  %108 = icmp eq %"struct.std::__1::__hash_node_base.136"* %107, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %107, i64 2
  %111 = bitcast %"struct.std::__1::__hash_node_base.136"* %110 to %"class.SkSL::Variable"**
  %112 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %102, align 8
  %113 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %111, align 8
  %114 = icmp eq %"class.SkSL::Variable"* %112, %113
  br i1 %114, label %104, label %115

115:                                              ; preds = %104, %109
  %116 = ptrtoint %"struct.std::__1::__hash_node_base.136"* %107 to i64
  %117 = bitcast %"struct.std::__1::__hash_node_base.136"* %105 to i64*
  %118 = bitcast %"struct.std::__1::__hash_node_base.136"* %82 to i64*
  store i64 %116, i64* %118, align 8
  %119 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %119, i64 %93
  %121 = bitcast %"struct.std::__1::__hash_node_base.136"** %120 to i64**
  %122 = load i64*, i64** %121, align 8
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %117, align 8
  %124 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %11, align 8
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %124, i64 %93
  %126 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %125, align 8
  %127 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %126, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.136"* %80, %"struct.std::__1::__hash_node_base.136"** %127, align 8
  br label %128

128:                                              ; preds = %92, %115, %103
  %129 = phi %"struct.std::__1::__hash_node_base.136"* [ %80, %103 ], [ %82, %115 ], [ %80, %92 ]
  %130 = phi i64 [ %93, %103 ], [ %81, %115 ], [ %81, %92 ]
  %131 = getelementptr inbounds %"struct.std::__1::__hash_node_base.136", %"struct.std::__1::__hash_node_base.136"* %129, i64 0, i32 0
  %132 = load %"struct.std::__1::__hash_node_base.136"*, %"struct.std::__1::__hash_node_base.136"** %131, align 8
  %133 = icmp eq %"struct.std::__1::__hash_node_base.136"* %132, null
  br i1 %133, label %142, label %79

134:                                              ; preds = %2
  %135 = getelementptr inbounds %"class.std::__1::__hash_table.132", %"class.std::__1::__hash_table.132"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %136 = load %"struct.std::__1::__hash_node_base.136"**, %"struct.std::__1::__hash_node_base.136"*** %135, align 8
  store %"struct.std::__1::__hash_node_base.136"** null, %"struct.std::__1::__hash_node_base.136"*** %135, align 8
  %137 = icmp eq %"struct.std::__1::__hash_node_base.136"** %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  %139 = bitcast %"struct.std::__1::__hash_node_base.136"** %136 to i8*
  tail call void @_ZdlPv(i8* %139) #14
  br label %140

140:                                              ; preds = %134, %138
  %141 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator.138", %"class.std::__1::__bucket_list_deallocator.138"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %141, align 8
  br label %142

142:                                              ; preds = %128, %70, %35, %140
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #11

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.125"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !299

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !300
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !300
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !303, !noalias !300
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !303, !noalias !300
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !303, !noalias !300
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !303, !noalias !300
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !305

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !300
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !303, !noalias !300
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !303, !noalias !300
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !306

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.125"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.125"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #13
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #13
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #14
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !307
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !307
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !310, !noalias !307
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !310, !noalias !307
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !310, !noalias !307
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !310, !noalias !307
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !312

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !307
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !310, !noalias !307
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !310, !noalias !307
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !313

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !314

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.125", %"class.std::__1::vector.125"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #12
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #14
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFN4skvm5ColorEiNS2_5CoordES3_EE11__call_implINS0_20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS9_7ProgramEPNS2_7BuilderEE4$_52S5_EEEES3_PKNS0_16__policy_storageEiOS4_OS3_"(%"struct.skvm::Color"* noalias sret, %"union.std::__1::__function::__policy_storage"* nocapture readonly, i32, %"struct.skvm::Coord"* nocapture readonly dereferenceable(32), %"struct.skvm::Color"* nocapture readnone dereferenceable(64)) #0 align 2 {
  %6 = alloca %"struct.skvm::PixelFormat", align 8
  %7 = alloca %"struct.skvm::PixelFormat", align 8
  %8 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 0, i32 0
  %9 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %8, align 8, !noalias !315
  %10 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8, !noalias !315
  %12 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 1, i32 0
  %13 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %12, align 8, !noalias !315
  %14 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 8, !noalias !315
  %16 = bitcast %"struct.skvm::PixelFormat"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %16) #12, !noalias !315
  %17 = bitcast %"struct.skvm::PixelFormat"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %17) #12, !noalias !322
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 36, i1 false) #12, !noalias !322
  call void @_ZN4skvm26SkColorType_to_PixelFormatE11SkColorType(%"struct.skvm::PixelFormat"* nonnull sret %6, i32 14) #12, !noalias !322
  %18 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"* %9, %"class.skvm::Builder"* %9, i32 %11) #12, !noalias !322
  %19 = extractvalue { %"class.skvm::Builder"*, i32 } %18, 0
  %20 = extractvalue { %"class.skvm::Builder"*, i32 } %18, 1
  %21 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"* %13, %"class.skvm::Builder"* %13, i32 %15) #12, !noalias !322
  %22 = extractvalue { %"class.skvm::Builder"*, i32 } %21, 0
  %23 = extractvalue { %"class.skvm::Builder"*, i32 } %21, 1
  %24 = bitcast %"union.std::__1::__function::__policy_storage"* %1 to %"class.std::__1::vector.271"**
  %25 = load %"class.std::__1::vector.271"*, %"class.std::__1::vector.271"** %24, align 8, !noalias !322
  %26 = sext i32 %2 to i64
  %27 = getelementptr inbounds %"class.std::__1::vector.271", %"class.std::__1::vector.271"* %25, i64 0, i32 0, i32 0
  %28 = load %struct.Child*, %struct.Child** %27, align 8, !noalias !322
  %29 = getelementptr inbounds %struct.Child, %struct.Child* %28, i64 %26, i32 1, i32 0
  %30 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %29, align 8, !noalias !322
  %31 = getelementptr inbounds %struct.Child, %struct.Child* %28, i64 %26, i32 1, i32 1
  %32 = load i32, i32* %31, align 8, !noalias !322
  %33 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3I32ES1_(%"class.skvm::Builder"* %22, %"class.skvm::Builder"* %22, i32 %23, %"class.skvm::Builder"* %30, i32 %32) #12, !noalias !322
  %34 = extractvalue { %"class.skvm::Builder"*, i32 } %33, 0
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %33, 1
  %36 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %19, %"class.skvm::Builder"* %19, i32 %20, %"class.skvm::Builder"* %34, i32 %35) #12, !noalias !322
  %37 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 0
  %38 = extractvalue { %"class.skvm::Builder"*, i32 } %36, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* nonnull align 8 %17, i64 36, i1 false) #12, !noalias !322
  %39 = load %"class.std::__1::vector.271"*, %"class.std::__1::vector.271"** %24, align 8, !noalias !322
  %40 = getelementptr inbounds %"class.std::__1::vector.271", %"class.std::__1::vector.271"* %39, i64 0, i32 0, i32 0
  %41 = load %struct.Child*, %struct.Child** %40, align 8, !noalias !322
  %42 = getelementptr inbounds %struct.Child, %struct.Child* %41, i64 %26
  %43 = bitcast %struct.Child* %42 to i64*
  %44 = load i64, i64* %43, align 8, !noalias !322
  %45 = trunc i64 %44 to i32
  %46 = lshr i64 %44, 32
  %47 = trunc i64 %46 to i32
  call void @_ZN4skvm7Builder6gatherENS_11PixelFormatENS_3PtrEiNS_3I32E(%"struct.skvm::Color"* sret %0, %"class.skvm::Builder"* %37, %"struct.skvm::PixelFormat"* nonnull byval(%"struct.skvm::PixelFormat") align 8 %7, i32 %45, i32 %47, %"class.skvm::Builder"* %37, i32 %38) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %17) #12, !noalias !322
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %16) #12, !noalias !315
  ret void
}

declare void @_ZN4skvm26SkColorType_to_PixelFormatE11SkColorType(%"struct.skvm::PixelFormat"* sret, i32) local_unnamed_addr #2

declare void @_ZN4skvm7Builder6gatherENS_11PixelFormatENS_3PtrEiNS_3I32E(%"struct.skvm::Color"* sret, %"class.skvm::Builder"*, %"struct.skvm::PixelFormat"* byval(%"struct.skvm::PixelFormat") align 8, i32, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!8 = !{i64 0, i64 65}
!9 = !{i8 0, i8 2}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN4SkSL13SkVMGenerator27writeAggregationConstructorERKNS_14AnyConstructorE: argument 0"}
!12 = distinct !{!12, !"_ZN4SkSL13SkVMGenerator27writeAggregationConstructorERKNS_14AnyConstructorE"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN4SkSL13SkVMGenerator30writeConstructorDiagonalMatrixERKNS_25ConstructorDiagonalMatrixE: argument 0"}
!15 = distinct !{!15, !"_ZN4SkSL13SkVMGenerator30writeConstructorDiagonalMatrixERKNS_25ConstructorDiagonalMatrixE"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN4SkSL13SkVMGenerator28writeConstructorMatrixResizeERKNS_23ConstructorMatrixResizeE: argument 0"}
!18 = distinct !{!18, !"_ZN4SkSL13SkVMGenerator28writeConstructorMatrixResizeERKNS_23ConstructorMatrixResizeE"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN4SkSL13SkVMGenerator20writeConstructorCastERKNS_14AnyConstructorE: argument 0"}
!21 = distinct !{!21, !"_ZN4SkSL13SkVMGenerator20writeConstructorCastERKNS_14AnyConstructorE"}
!22 = !{!23, !20}
!23 = distinct !{!23, !24, !"_ZN4SkSL13SkVMGenerator19writeTypeConversionERKNS_12_GLOBAL__N_15ValueENS_4Type10NumberKindES6_: argument 0"}
!24 = distinct !{!24, !"_ZN4SkSL13SkVMGenerator19writeTypeConversionERKNS_12_GLOBAL__N_15ValueENS_4Type10NumberKindES6_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN4SkSL13SkVMGenerator21writeConstructorSplatERKNS_16ConstructorSplatE: argument 0"}
!27 = distinct !{!27, !"_ZN4SkSL13SkVMGenerator21writeConstructorSplatERKNS_16ConstructorSplatE"}
!28 = distinct !{!28, !29}
!29 = !{!"llvm.loop.unroll.disable"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN4SkSL13SkVMGenerator16writeFieldAccessERKNS_11FieldAccessE: argument 0"}
!32 = distinct !{!32, !"_ZN4SkSL13SkVMGenerator16writeFieldAccessERKNS_11FieldAccessE"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN4SkSL13SkVMGenerator20writeIndexExpressionERKNS_15IndexExpressionE: argument 0"}
!35 = distinct !{!35, !"_ZN4SkSL13SkVMGenerator20writeIndexExpressionERKNS_15IndexExpressionE"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN4SkSL13SkVMGenerator23writeVariableExpressionERKNS_17VariableReferenceE: argument 0"}
!38 = distinct !{!38, !"_ZN4SkSL13SkVMGenerator23writeVariableExpressionERKNS_17VariableReferenceE"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN4SkSL13SkVMGenerator17writeFunctionCallERKNS_12FunctionCallE: argument 0"}
!41 = distinct !{!41, !"_ZN4SkSL13SkVMGenerator17writeFunctionCallERKNS_12FunctionCallE"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN4SkSL13SkVMGenerator25writeExternalFunctionCallERKNS_20ExternalFunctionCallE: argument 0"}
!44 = distinct !{!44, !"_ZN4SkSL13SkVMGenerator25writeExternalFunctionCallERKNS_20ExternalFunctionCallE"}
!45 = distinct !{!45, !29}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN4SkSL13SkVMGenerator21writePrefixExpressionERKNS_16PrefixExpressionE: argument 0"}
!48 = distinct !{!48, !"_ZN4SkSL13SkVMGenerator21writePrefixExpressionERKNS_16PrefixExpressionE"}
!49 = !{!50, !47}
!50 = distinct !{!50, !51, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_61EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!51 = distinct !{!51, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_61EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!52 = !{!53, !47}
!53 = distinct !{!53, !54, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_62EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!54 = distinct !{!54, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_62EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!55 = !{!56, !47}
!56 = distinct !{!56, !57, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_63EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!57 = distinct !{!57, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_21writePrefixExpressionERKNS_16PrefixExpressionEE4$_63EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN4SkSL13SkVMGenerator22writePostfixExpressionERKNS_17PostfixExpressionE: argument 0"}
!60 = distinct !{!60, !"_ZN4SkSL13SkVMGenerator22writePostfixExpressionERKNS_17PostfixExpressionE"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN4SkSL13SkVMGenerator12writeSwizzleERKNS_7SwizzleE: argument 0"}
!63 = distinct !{!63, !"_ZN4SkSL13SkVMGenerator12writeSwizzleERKNS_7SwizzleE"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN4SkSL13SkVMGenerator22writeTernaryExpressionERKNS_17TernaryExpressionE: argument 0"}
!66 = distinct !{!66, !"_ZN4SkSL13SkVMGenerator22writeTernaryExpressionERKNS_17TernaryExpressionE"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!69 = distinct !{!69, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!72 = distinct !{!72, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!75 = distinct !{!75, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!78 = distinct !{!78, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!81 = distinct !{!81, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!84 = distinct !{!84, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!87 = distinct !{!87, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!90 = distinct !{!90, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_1ZNS0_21writeBinaryExpressionES3_E3$_2EEDaOT_OT0_: argument 0"}
!93 = distinct !{!93, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_1ZNS0_21writeBinaryExpressionES3_E3$_2EEDaOT_OT0_"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_3ZNS0_21writeBinaryExpressionES3_E3$_4EEDaOT_OT0_: argument 0"}
!96 = distinct !{!96, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_3ZNS0_21writeBinaryExpressionES3_E3$_4EEDaOT_OT0_"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_5ZNS0_21writeBinaryExpressionES3_E3$_6EEDaOT_OT0_: argument 0"}
!99 = distinct !{!99, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_5ZNS0_21writeBinaryExpressionES3_E3$_6EEDaOT_OT0_"}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_7ZNS0_21writeBinaryExpressionES3_E3$_8EEDaOT_OT0_: argument 0"}
!102 = distinct !{!102, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_7ZNS0_21writeBinaryExpressionES3_E3$_8EEDaOT_OT0_"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_9ZNS0_21writeBinaryExpressionES3_E4$_10EEDaOT_OT0_: argument 0"}
!105 = distinct !{!105, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E3$_9ZNS0_21writeBinaryExpressionES3_E4$_10EEDaOT_OT0_"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_11ZNS0_21writeBinaryExpressionES3_E4$_12EEDaOT_OT0_: argument 0"}
!108 = distinct !{!108, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_11ZNS0_21writeBinaryExpressionES3_E4$_12EEDaOT_OT0_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_13ZNS0_21writeBinaryExpressionES3_E4$_14EEDaOT_OT0_: argument 0"}
!111 = distinct !{!111, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_13ZNS0_21writeBinaryExpressionES3_E4$_14EEDaOT_OT0_"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_15ZNS0_21writeBinaryExpressionES3_E4$_16EEDaOT_OT0_: argument 0"}
!114 = distinct !{!114, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_15ZNS0_21writeBinaryExpressionES3_E4$_16EEDaOT_OT0_"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_17ZNS0_21writeBinaryExpressionES3_E4$_18EEDaOT_OT0_: argument 0"}
!117 = distinct !{!117, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_17ZNS0_21writeBinaryExpressionES3_E4$_18EEDaOT_OT0_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_19ZNS0_21writeBinaryExpressionES3_E4$_20EEDaOT_OT0_: argument 0"}
!120 = distinct !{!120, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIZNS0_21writeBinaryExpressionES3_E4$_19ZNS0_21writeBinaryExpressionES3_E4$_20EEDaOT_OT0_"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_22EEDaOT_OT0_: argument 0"}
!123 = distinct !{!123, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_22EEDaOT_OT0_"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_23EEDaOT_OT0_: argument 0"}
!126 = distinct !{!126, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_23EEDaOT_OT0_"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_24EEDaOT_OT0_: argument 0"}
!129 = distinct !{!129, !"_ZZN4SkSL13SkVMGenerator21writeBinaryExpressionERKNS_16BinaryExpressionEENK3$_0clIRZNS0_21writeBinaryExpressionES3_E4$_21ZNS0_21writeBinaryExpressionES3_E4$_24EEDaOT_OT0_"}
!130 = distinct !{!130, !131}
!131 = !{!"llvm.loop.isvectorized", i32 1}
!132 = distinct !{!132, !133, !131}
!133 = !{!"llvm.loop.unroll.runtime.disable"}
!134 = distinct !{!134, !131}
!135 = distinct !{!135, !133, !131}
!136 = distinct !{!136, !29}
!137 = !{!138, !140}
!138 = distinct !{!138, !139, !"_ZNKSt3__110__function13__policy_funcIFN4skvm5ColorEiNS2_5CoordES3_EEclEOiOS4_OS3_: argument 0"}
!139 = distinct !{!139, !"_ZNKSt3__110__function13__policy_funcIFN4skvm5ColorEiNS2_5CoordES3_EEclEOiOS4_OS3_"}
!140 = distinct !{!140, !141, !"_ZNKSt3__18functionIFN4skvm5ColorEiNS1_5CoordES2_EEclEiS3_S2_: argument 0"}
!141 = distinct !{!141, !"_ZNKSt3__18functionIFN4skvm5ColorEiNS1_5CoordES2_EEclEiS3_S2_"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_53EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!144 = distinct !{!144, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_53EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_54EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!147 = distinct !{!147, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_54EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!150 = distinct !{!150, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!151 = !{!152}
!152 = distinct !{!152, !153, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!153 = distinct !{!153, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!154 = !{!155}
!155 = distinct !{!155, !156, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!156 = distinct !{!156, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!159 = distinct !{!159, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!160 = !{!161}
!161 = distinct !{!161, !162, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!162 = distinct !{!162, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!163 = !{!164}
!164 = distinct !{!164, !165, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!165 = distinct !{!165, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIRFN4skvm3F32ES7_S7_EEEDaOT_: argument 0"}
!168 = distinct !{!168, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIRFN4skvm3F32ES7_S7_EEEDaOT_"}
!169 = !{!170}
!170 = distinct !{!170, !171, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_26EEDaOT_: argument 0"}
!171 = distinct !{!171, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_26EEDaOT_"}
!172 = !{!173}
!173 = distinct !{!173, !174, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!174 = distinct !{!174, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!175 = !{!176}
!176 = distinct !{!176, !177, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!177 = distinct !{!177, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!178 = !{!179}
!179 = distinct !{!179, !180, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!180 = distinct !{!180, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!181 = !{!182}
!182 = distinct !{!182, !183, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!183 = distinct !{!183, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!184 = !{!185}
!185 = distinct !{!185, !186, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!186 = distinct !{!186, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!187 = !{!188}
!188 = distinct !{!188, !189, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_55EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!189 = distinct !{!189, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_55EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!190 = !{!191}
!191 = distinct !{!191, !192, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!192 = distinct !{!192, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!193 = !{!194}
!194 = distinct !{!194, !195, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_56EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!195 = distinct !{!195, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_56EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!196 = !{!197}
!197 = distinct !{!197, !198, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!198 = distinct !{!198, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!199 = !{!200}
!200 = distinct !{!200, !201, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!201 = distinct !{!201, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!202 = !{!203}
!203 = distinct !{!203, !204, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!204 = distinct !{!204, !"_ZN4SkSL13SkVMGenerator5unaryIRFN4skvm3F32ES3_EEENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!205 = !{!206}
!206 = distinct !{!206, !207, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_27EEDaOT_: argument 0"}
!207 = distinct !{!207, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_27EEDaOT_"}
!208 = !{!209}
!209 = distinct !{!209, !210, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_28EEDaOT_: argument 0"}
!210 = distinct !{!210, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_28EEDaOT_"}
!211 = !{!212}
!212 = distinct !{!212, !213, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_29EEDaOT_: argument 0"}
!213 = distinct !{!213, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_29EEDaOT_"}
!214 = !{!215}
!215 = distinct !{!215, !216, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_31EEDaOT_: argument 0"}
!216 = distinct !{!216, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_31EEDaOT_"}
!217 = !{!218}
!218 = distinct !{!218, !219, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_57EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!219 = distinct !{!219, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_57EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!220 = !{!221}
!221 = distinct !{!221, !222, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_32EEDaOT_: argument 0"}
!222 = distinct !{!222, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_32EEDaOT_"}
!223 = !{!224}
!224 = distinct !{!224, !225, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_33EEDaOT_: argument 0"}
!225 = distinct !{!225, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_33EEDaOT_"}
!226 = !{!227}
!227 = distinct !{!227, !228, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_34EEDaOT_: argument 0"}
!228 = distinct !{!228, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_30clIZNS0_18writeIntrinsicCallES3_E4$_34EEDaOT_"}
!229 = !{!230}
!230 = distinct !{!230, !231, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_35EEDaOT_: argument 0"}
!231 = distinct !{!231, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_35EEDaOT_"}
!232 = !{!233}
!233 = distinct !{!233, !234, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_58EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!234 = distinct !{!234, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_58EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!235 = !{!236}
!236 = distinct !{!236, !237, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_59EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!237 = distinct !{!237, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_59EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!238 = !{!239}
!239 = distinct !{!239, !240, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_36EEDaOT_: argument 0"}
!240 = distinct !{!240, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_36EEDaOT_"}
!241 = !{!242}
!242 = distinct !{!242, !243, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_37EEDaOT_: argument 0"}
!243 = distinct !{!243, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_37EEDaOT_"}
!244 = !{!245}
!245 = distinct !{!245, !246, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_38EEDaOT_: argument 0"}
!246 = distinct !{!246, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_38EEDaOT_"}
!247 = !{!248}
!248 = distinct !{!248, !249, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse2x2ERKNS_12_GLOBAL__N_15ValueE: argument 0"}
!249 = distinct !{!249, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse2x2ERKNS_12_GLOBAL__N_15ValueE"}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse3x3ERKNS_12_GLOBAL__N_15ValueE: argument 0"}
!252 = distinct !{!252, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse3x3ERKNS_12_GLOBAL__N_15ValueE"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse4x4ERKNS_12_GLOBAL__N_15ValueE: argument 0"}
!255 = distinct !{!255, !"_ZN4SkSL13SkVMGenerator21writeMatrixInverse4x4ERKNS_12_GLOBAL__N_15ValueE"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_39EEDaOT_: argument 0"}
!258 = distinct !{!258, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_39EEDaOT_"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_40EEDaOT_: argument 0"}
!261 = distinct !{!261, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_40EEDaOT_"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_41EEDaOT_: argument 0"}
!264 = distinct !{!264, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_41EEDaOT_"}
!265 = !{!266}
!266 = distinct !{!266, !267, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_42EEDaOT_: argument 0"}
!267 = distinct !{!267, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_42EEDaOT_"}
!268 = !{!269}
!269 = distinct !{!269, !270, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_43EEDaOT_: argument 0"}
!270 = distinct !{!270, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_43EEDaOT_"}
!271 = !{!272}
!272 = distinct !{!272, !273, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_44EEDaOT_: argument 0"}
!273 = distinct !{!273, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_44EEDaOT_"}
!274 = !{!275}
!275 = distinct !{!275, !276, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_45EEDaOT_: argument 0"}
!276 = distinct !{!276, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_45EEDaOT_"}
!277 = !{!278}
!278 = distinct !{!278, !279, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_46EEDaOT_: argument 0"}
!279 = distinct !{!279, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_46EEDaOT_"}
!280 = !{!281}
!281 = distinct !{!281, !282, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_47EEDaOT_: argument 0"}
!282 = distinct !{!282, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_47EEDaOT_"}
!283 = !{!284}
!284 = distinct !{!284, !285, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_48EEDaOT_: argument 0"}
!285 = distinct !{!285, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_48EEDaOT_"}
!286 = !{!287}
!287 = distinct !{!287, !288, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_49EEDaOT_: argument 0"}
!288 = distinct !{!288, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_49EEDaOT_"}
!289 = !{!290}
!290 = distinct !{!290, !291, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_50EEDaOT_: argument 0"}
!291 = distinct !{!291, !"_ZZN4SkSL13SkVMGenerator18writeIntrinsicCallERKNS_12FunctionCallEENK4$_25clIZNS0_18writeIntrinsicCallES3_E4$_50EEDaOT_"}
!292 = !{!293}
!293 = distinct !{!293, !294, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_60EENS_12_GLOBAL__N_15ValueERKS7_OT_: argument 0"}
!294 = distinct !{!294, !"_ZN4SkSL13SkVMGenerator5unaryIZNS0_18writeIntrinsicCallERKNS_12FunctionCallEE4$_60EENS_12_GLOBAL__N_15ValueERKS7_OT_"}
!295 = !{!296}
!296 = distinct !{!296, !297, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJOS5_EEENSM_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS6_PvEENS_22__hash_node_destructorINSF_IST_EEEEEEmOT_DpOT0_: argument 0"}
!297 = distinct !{!297, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIPKN4SkSL8VariableEmEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJOS5_EEENSM_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS6_PvEENS_22__hash_node_destructorINSF_IST_EEEEEEmOT_DpOT0_"}
!298 = distinct !{!298, !29}
!299 = distinct !{!299, !29}
!300 = !{!301}
!301 = distinct !{!301, !302}
!302 = distinct !{!302, !"LVerDomain"}
!303 = !{!304}
!304 = distinct !{!304, !302}
!305 = distinct !{!305, !131}
!306 = distinct !{!306, !131}
!307 = !{!308}
!308 = distinct !{!308, !309}
!309 = distinct !{!309, !"LVerDomain"}
!310 = !{!311}
!311 = distinct !{!311, !309}
!312 = distinct !{!312, !131}
!313 = distinct !{!313, !29}
!314 = distinct !{!314, !131}
!315 = !{!316, !318, !320}
!316 = distinct !{!316, !317, !"_ZNSt3__18__invokeIRZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS1_7ProgramEPN4skvm7BuilderEE4$_52JiNS5_5CoordENS5_5ColorEEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOSC_DpOSD_: argument 0"}
!317 = distinct !{!317, !"_ZNSt3__18__invokeIRZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS1_7ProgramEPN4skvm7BuilderEE4$_52JiNS5_5CoordENS5_5ColorEEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOSC_DpOSD_"}
!318 = distinct !{!318, !319, !"_ZNSt3__128__invoke_void_return_wrapperIN4skvm5ColorELb0EE6__callIJRZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS5_7ProgramEPNS1_7BuilderEE4$_52iNS1_5CoordES2_EEES2_DpOT_: argument 0"}
!319 = distinct !{!319, !"_ZNSt3__128__invoke_void_return_wrapperIN4skvm5ColorELb0EE6__callIJRZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS5_7ProgramEPNS1_7BuilderEE4$_52iNS1_5CoordES2_EEES2_DpOT_"}
!320 = distinct !{!320, !321, !"_ZNSt3__110__function20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS2_7ProgramEPN4skvm7BuilderEE4$_52FNS6_5ColorEiNS6_5CoordESA_EEclEOiOSB_OSA_: argument 0"}
!321 = distinct !{!321, !"_ZNSt3__110__function20__default_alloc_funcIZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS2_7ProgramEPN4skvm7BuilderEE4$_52FNS6_5ColorEiNS6_5CoordESA_EEclEOiOSB_OSA_"}
!322 = !{!323, !316, !318, !320}
!323 = distinct !{!323, !324, !"_ZZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS_7ProgramEPN4skvm7BuilderEENK4$_52clEiNS3_5CoordENS3_5ColorE: argument 0"}
!324 = distinct !{!324, !"_ZZN4SkSL31testingOnly_ProgramToSkVMShaderERKNS_7ProgramEPN4skvm7BuilderEENK4$_52clEiNS3_5CoordENS3_5ColorE"}
