; ModuleID = '../../third_party/dav1d/libdav1d/src/ref.c'
source_filename = "../../third_party/dav1d/libdav1d/src/ref.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dRef = type { i8*, i8*, i32, i32, void (i8*, i8*)*, i8* }
%struct.Dav1dMemPool = type { %union.pthread_mutex_t, %struct.Dav1dMemPoolBuffer*, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.Dav1dMemPoolBuffer = type { i8*, %struct.Dav1dMemPoolBuffer* }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.Dav1dRef* @dav1d_ref_create(i64) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = add i64 %0, 7
  %4 = and i64 %3, -8
  %5 = add i64 %4, 40
  %6 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %7 = call i32 @posix_memalign(i8** nonnull %2, i64 64, i64 %5) #7
  %8 = icmp ne i32 %7, 0
  %9 = load i8*, i8** %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %10 = icmp eq i8* %9, null
  %11 = or i1 %8, %10
  br i1 %11, label %26, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds i8, i8* %9, i64 %4
  %14 = bitcast i8* %13 to %struct.Dav1dRef*
  %15 = bitcast i8* %13 to i8**
  store i8* %9, i8** %15, align 8
  %16 = getelementptr inbounds i8, i8* %13, i64 32
  %17 = bitcast i8* %16 to i8**
  store i8* %9, i8** %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 8
  %19 = bitcast i8* %18 to i8**
  store i8* %9, i8** %19, align 8
  %20 = getelementptr inbounds i8, i8* %13, i64 16
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %13, i64 20
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %13, i64 24
  %25 = bitcast i8* %24 to void (i8*, i8*)**
  store void (i8*, i8*)* @default_free_callback, void (i8*, i8*)** %25, align 8
  br label %26

26:                                               ; preds = %1, %12
  %27 = phi %struct.Dav1dRef* [ %14, %12 ], [ null, %1 ]
  ret %struct.Dav1dRef* %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @default_free_callback(i8* readnone, i8*) #0 {
  %3 = icmp eq i8* %0, %1
  tail call void @llvm.assume(i1 %3)
  tail call void @free(i8* %1) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.Dav1dRef* @dav1d_ref_create_using_pool(%struct.Dav1dMemPool*, i64) local_unnamed_addr #0 {
  %3 = add i64 %1, 47
  %4 = and i64 %3, -8
  %5 = tail call %struct.Dav1dMemPoolBuffer* @dav1d_mem_pool_pop(%struct.Dav1dMemPool* %0, i64 %4) #7
  %6 = icmp eq %struct.Dav1dMemPoolBuffer* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Dav1dMemPoolBuffer, %struct.Dav1dMemPoolBuffer* %5, i64 -3, i32 1
  %9 = bitcast %struct.Dav1dMemPoolBuffer** %8 to %struct.Dav1dRef*
  %10 = bitcast %struct.Dav1dMemPoolBuffer* %5 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %struct.Dav1dMemPoolBuffer** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %struct.Dav1dMemPoolBuffer*, %struct.Dav1dMemPoolBuffer** %8, i64 1
  %14 = bitcast %struct.Dav1dMemPoolBuffer** %13 to %struct.Dav1dMemPool**
  store %struct.Dav1dMemPool* %0, %struct.Dav1dMemPool** %14, align 8
  %15 = getelementptr inbounds %struct.Dav1dMemPoolBuffer*, %struct.Dav1dMemPoolBuffer** %8, i64 2
  %16 = bitcast %struct.Dav1dMemPoolBuffer** %15 to i32*
  store i32 1, i32* %16, align 4
  %17 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %9, i64 0, i32 3
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.Dav1dMemPoolBuffer*, %struct.Dav1dMemPoolBuffer** %8, i64 3
  %19 = bitcast %struct.Dav1dMemPoolBuffer** %18 to void (i8*, i8*)**
  store void (i8*, i8*)* @pool_free_callback, void (i8*, i8*)** %19, align 8
  %20 = getelementptr inbounds %struct.Dav1dMemPoolBuffer*, %struct.Dav1dMemPoolBuffer** %8, i64 4
  store %struct.Dav1dMemPoolBuffer* %5, %struct.Dav1dMemPoolBuffer** %20, align 8
  br label %21

21:                                               ; preds = %2, %7
  %22 = phi %struct.Dav1dRef* [ %9, %7 ], [ null, %2 ]
  ret %struct.Dav1dRef* %22
}

declare %struct.Dav1dMemPoolBuffer* @dav1d_mem_pool_pop(%struct.Dav1dMemPool*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @pool_free_callback(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.Dav1dMemPool*
  %4 = bitcast i8* %1 to %struct.Dav1dMemPoolBuffer*
  tail call void @dav1d_mem_pool_push(%struct.Dav1dMemPool* %3, %struct.Dav1dMemPoolBuffer* %4) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.Dav1dRef* @dav1d_ref_wrap(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #3 {
  %4 = tail call noalias i8* @malloc(i64 40) #7
  %5 = icmp eq i8* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct.Dav1dRef*
  %8 = bitcast i8* %4 to i8**
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to i8**
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %4, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %4, i64 20
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %4, i64 24
  %16 = bitcast i8* %15 to void (i8*, i8*)**
  store void (i8*, i8*)* %1, void (i8*, i8*)** %16, align 8
  %17 = getelementptr inbounds i8, i8* %4, i64 32
  %18 = bitcast i8* %17 to i8**
  store i8* %2, i8** %18, align 8
  br label %19

19:                                               ; preds = %3, %6
  %20 = phi %struct.Dav1dRef* [ %7, %6 ], [ null, %3 ]
  ret %struct.Dav1dRef* %20
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @dav1d_ref_inc(%struct.Dav1dRef* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %0, i64 0, i32 2
  %3 = atomicrmw add i32* %2, i32 1 seq_cst
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_ref_dec(%struct.Dav1dRef**) local_unnamed_addr #0 {
  %2 = icmp ne %struct.Dav1dRef** %0, null
  tail call void @llvm.assume(i1 %2)
  %3 = load %struct.Dav1dRef*, %struct.Dav1dRef** %0, align 8
  %4 = icmp eq %struct.Dav1dRef* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %3, i64 0, i32 2
  %7 = atomicrmw sub i32* %6, i32 1 seq_cst
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %21

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %3, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %3, i64 0, i32 4
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %12, align 8
  %14 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %3, i64 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %3, i64 0, i32 5
  %17 = load i8*, i8** %16, align 8
  tail call void %13(i8* %15, i8* %17) #7
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %9
  %20 = bitcast %struct.Dav1dRef* %3 to i8*
  tail call void @free(i8* %20) #7
  br label %21

21:                                               ; preds = %19, %9, %5
  store %struct.Dav1dRef* null, %struct.Dav1dRef** %0, align 8
  br label %22

22:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @dav1d_ref_is_writable(%struct.Dav1dRef* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %0, i64 0, i32 2
  %3 = load atomic i32, i32* %2 seq_cst, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.Dav1dRef, %struct.Dav1dRef* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  %9 = zext i1 %8 to i32
  br label %10

10:                                               ; preds = %5, %1
  %11 = phi i32 [ 0, %1 ], [ %9, %5 ]
  ret i32 %11
}

; Function Attrs: nofree nounwind
declare i32 @posix_memalign(i8**, i64, i64) local_unnamed_addr #4

declare void @dav1d_mem_pool_push(%struct.Dav1dMemPool*, %struct.Dav1dMemPoolBuffer*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
