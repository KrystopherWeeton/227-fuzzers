; ModuleID = '../../components/autofill/core/browser/form_processing/label_processing_util.cc'
source_filename = "../../components/autofill/core/browser/form_processing/label_processing_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair" }
%"class.base::BasicStringPiece" = type { i16*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::BasicStringPiece"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

@.str = private unnamed_addr constant [5 x i16] [i16 47, i16 44, i16 38, i16 45, i16 0], align 2
@.str.1 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" und \00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c" et \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" y \00", align 1
@.ref.tmp = private constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)], align 8
@.str.5 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18GetParseableLabelsERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* noalias nocapture sret, %"class.std::__1::vector"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::vector.1", align 8
  %10 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #10
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %15 = bitcast %"class.base::BasicStringPiece"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 4
  %21 = icmp eq i64 %19, 0
  br i1 %21, label %182, label %22

22:                                               ; preds = %2
  %23 = icmp ugt i64 %20, 1152921504606846975
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %25) #11
  unreachable

26:                                               ; preds = %22
  %27 = tail call i8* @_Znwm(i64 %19) #12
  %28 = bitcast i8* %27 to %"class.base::BasicStringPiece"*
  %29 = bitcast %"class.base::BasicStringPiece"** %12 to i8**
  store i8* %27, i8** %29, align 8
  %30 = bitcast %"class.std::__1::vector"* %5 to i8**
  store i8* %27, i8** %30, align 8
  %31 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %28, i64 %20
  store %"class.base::BasicStringPiece"* %31, %"class.base::BasicStringPiece"** %13, align 8
  %32 = bitcast %"class.base::BasicStringPiece"** %12 to i64*
  %33 = ptrtoint i8* %27 to i64
  %34 = icmp sgt i64 %19, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %26
  %36 = lshr exact i64 %19, 4
  %37 = inttoptr i64 %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %27, i8* align 8 %37, i64 %19, i1 false) #10
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %28, i64 %36
  %39 = ptrtoint %"class.base::BasicStringPiece"* %38 to i64
  br label %40

40:                                               ; preds = %35, %26
  %41 = phi i64 [ %39, %35 ], [ %33, %26 ]
  store i64 %41, i64* %32, align 8
  %42 = bitcast %"class.std::__1::vector"* %6 to i8*
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %45 = bitcast %"class.base::BasicStringPiece"** %44 to i64*
  %46 = bitcast %"class.std::__1::vector"* %6 to i64*
  %47 = bitcast %"class.std::__1::vector"* %7 to i8*
  %48 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %49 = bitcast %"class.logging::CheckError"* %3 to i8*
  %50 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %50, i64 0, i32 1, i32 1
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %55 = bitcast %"class.std::__1::vector"* %7 to i64*
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %57 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %58 = bitcast %"class.std::__1::vector"* %6 to i8*
  %59 = bitcast %"class.base::BasicStringPiece"** %56 to <2 x i64>*
  %60 = bitcast %"class.base::BasicStringPiece"** %44 to <2 x i64>*
  br label %61

61:                                               ; preds = %40, %171
  %62 = phi i64 [ %18, %40 ], [ %172, %171 ]
  %63 = phi i64 [ %16, %40 ], [ %173, %171 ]
  %64 = phi i64 [ %20, %40 ], [ %177, %171 ]
  %65 = phi i8 [ 0, %40 ], [ %175, %171 ]
  %66 = phi i64 [ 0, %40 ], [ %174, %171 ]
  %67 = inttoptr i64 %62 to %"class.base::BasicStringPiece"*
  %68 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 %66, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, -1
  %71 = icmp ugt i64 %70, 39
  br i1 %71, label %72, label %74

72:                                               ; preds = %61
  %73 = add nuw i64 %66, 1
  br label %171

74:                                               ; preds = %61, %78
  %75 = phi i64 [ %76, %78 ], [ %66, %61 ]
  %76 = add i64 %75, 1
  %77 = icmp ult i64 %76, %64
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 %76, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %74, label %82

82:                                               ; preds = %78, %74
  %83 = sub i64 %76, %66
  %84 = icmp eq i64 %83, 1
  %85 = icmp ugt i64 %83, 3
  %86 = or i1 %84, %85
  br i1 %86, label %171, label %87

87:                                               ; preds = %82
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #10
  %88 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 %66, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 24, i1 false)
  %89 = load i16*, i16** %88, align 8
  %90 = load i64, i64* %68, align 8
  call void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* nonnull sret %6, i16* %89, i64 %90, i16* getelementptr inbounds ([5 x i16], [5 x i16]* @.str, i64 0, i64 0), i64 4, i32 1, i32 1) #10
  %91 = load i64, i64* %45, align 8
  %92 = load i64, i64* %46, align 8
  %93 = sub i64 %91, %92
  %94 = ashr exact i64 %93, 4
  %95 = icmp eq i64 %94, %83
  br i1 %95, label %139, label %96

96:                                               ; preds = %87, %130
  %97 = phi i8** [ %136, %130 ], [ getelementptr inbounds ([4 x i8*], [4 x i8*]* @.ref.tmp, i64 0, i64 0), %87 ]
  %98 = load i8*, i8** %97, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #10
  %99 = load i16*, i16** %88, align 8
  %100 = load i64, i64* %68, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #10
  %101 = icmp eq i8* %98, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %96
  %103 = call i64 @strlen(i8* nonnull %98) #10
  br label %106

104:                                              ; preds = %96
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #10
  %105 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #10
  br label %106

106:                                              ; preds = %102, %104
  %107 = phi i64 [ 0, %104 ], [ %103, %102 ]
  call void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %8, i8* %98, i64 %107) #10
  %108 = load i8, i8* %51, align 1
  %109 = icmp slt i8 %108, 0
  %110 = load i16*, i16** %52, align 8
  %111 = select i1 %109, i16* %110, i16* %53
  %112 = load i64, i64* %54, align 8
  %113 = zext i8 %108 to i64
  %114 = select i1 %109, i64 %112, i64 %113
  call void @_ZN4base27SplitStringPieceUsingSubstrENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* nonnull sret %7, i16* %99, i64 %100, i16* %111, i64 %114, i32 1, i32 1) #10
  %115 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %43, align 8
  %116 = icmp eq %"class.base::BasicStringPiece"* %115, null
  br i1 %116, label %120, label %117

117:                                              ; preds = %106
  %118 = ptrtoint %"class.base::BasicStringPiece"* %115 to i64
  store i64 %118, i64* %45, align 8
  %119 = bitcast %"class.base::BasicStringPiece"* %115 to i8*
  call void @_ZdlPv(i8* %119) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 24, i1 false) #10
  br label %120

120:                                              ; preds = %106, %117
  %121 = load i64, i64* %55, align 8
  store i64 %121, i64* %46, align 8
  %122 = load <2 x i64>, <2 x i64>* %59, align 8
  store <2 x i64> %122, <2 x i64>* %60, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 24, i1 false) #10
  %123 = load i8, i8* %51, align 1
  %124 = icmp slt i8 %123, 0
  %125 = extractelement <2 x i64> %122, i32 0
  br i1 %124, label %126, label %130

126:                                              ; preds = %120
  %127 = load i8*, i8** %57, align 8
  call void @_ZdlPv(i8* %127) #12
  %128 = load i64, i64* %45, align 8
  %129 = load i64, i64* %46, align 8
  br label %130

130:                                              ; preds = %120, %126
  %131 = phi i64 [ %121, %120 ], [ %129, %126 ]
  %132 = phi i64 [ %125, %120 ], [ %128, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #10
  %133 = sub i64 %132, %131
  %134 = ashr exact i64 %133, 4
  %135 = icmp eq i64 %134, %83
  %136 = getelementptr inbounds i8*, i8** %97, i64 1
  %137 = icmp eq i8** %136, getelementptr inbounds ([4 x i8*], [4 x i8*]* @.ref.tmp, i64 1, i64 0)
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %96

139:                                              ; preds = %130, %87
  %140 = phi i64 [ %94, %87 ], [ %134, %130 ]
  %141 = phi i64 [ %92, %87 ], [ %131, %130 ]
  %142 = phi i64 [ %91, %87 ], [ %132, %130 ]
  %143 = icmp eq i64 %140, %83
  br i1 %143, label %144, label %162

144:                                              ; preds = %139
  %145 = icmp eq i64 %142, %141
  br i1 %145, label %162, label %146

146:                                              ; preds = %144, %146
  %147 = phi i64 [ %158, %146 ], [ %141, %144 ]
  %148 = phi i64 [ %156, %146 ], [ 0, %144 ]
  %149 = inttoptr i64 %147 to %"class.base::BasicStringPiece"*
  %150 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %149, i64 %148
  %151 = add i64 %148, %66
  %152 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %11, align 8
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %152, i64 %151
  %154 = bitcast %"class.base::BasicStringPiece"* %153 to i8*
  %155 = bitcast %"class.base::BasicStringPiece"* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 16, i1 false)
  %156 = add nuw i64 %148, 1
  %157 = load i64, i64* %45, align 8
  %158 = load i64, i64* %46, align 8
  %159 = sub i64 %157, %158
  %160 = ashr exact i64 %159, 4
  %161 = icmp ult i64 %156, %160
  br i1 %161, label %146, label %162

162:                                              ; preds = %146, %144, %139
  %163 = phi i64 [ %141, %139 ], [ %141, %144 ], [ %158, %146 ]
  %164 = phi i8 [ %65, %139 ], [ 1, %144 ], [ 1, %146 ]
  %165 = icmp eq i64 %163, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %162
  store i64 %163, i64* %45, align 8
  %167 = inttoptr i64 %163 to i8*
  call void @_ZdlPv(i8* %167) #12
  br label %168

168:                                              ; preds = %162, %166
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #10
  %169 = load i64, i64* %15, align 8
  %170 = load i64, i64* %17, align 8
  br label %171

171:                                              ; preds = %168, %82, %72
  %172 = phi i64 [ %62, %72 ], [ %62, %82 ], [ %170, %168 ]
  %173 = phi i64 [ %63, %72 ], [ %63, %82 ], [ %169, %168 ]
  %174 = phi i64 [ %73, %72 ], [ %76, %82 ], [ %76, %168 ]
  %175 = phi i8 [ %65, %72 ], [ %65, %82 ], [ %164, %168 ]
  %176 = sub i64 %173, %172
  %177 = ashr exact i64 %176, 4
  %178 = icmp ult i64 %174, %177
  br i1 %178, label %61, label %179

179:                                              ; preds = %171
  %180 = and i8 %175, 1
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %186

182:                                              ; preds = %2, %179
  %183 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %183, align 8
  %184 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %185 = bitcast %union.anon* %184 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 24, i1 false) #10
  br label %410

186:                                              ; preds = %179
  %187 = bitcast %"class.std::__1::vector.1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %187) #10
  %188 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 1
  %189 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %187, i8 0, i64 24, i1 false) #10
  %190 = bitcast %"class.base::BasicStringPiece"** %12 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = bitcast %"class.std::__1::vector"* %5 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = sub i64 %191, %193
  %195 = ashr exact i64 %194, 4
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm(%"class.std::__1::vector.1"* nonnull %9, i64 %195)
  %196 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %11, align 8
  %197 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %12, align 8
  %198 = icmp eq %"class.base::BasicStringPiece"* %196, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %186
  %200 = bitcast %"class.std::__1::basic_string"** %188 to i64*
  br label %396

201:                                              ; preds = %186
  %202 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %203 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %204 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %205 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %206 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %207 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %206, i64 0, i32 1, i32 1
  %208 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %209 = bitcast %"class.std::__1::basic_string"** %188 to i64*
  br label %210

210:                                              ; preds = %393, %201
  %211 = phi %"class.base::BasicStringPiece"* [ %196, %201 ], [ %394, %393 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #10
  %212 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %211, i64 0, i32 0
  %213 = load i16*, i16** %212, align 8, !noalias !2
  %214 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %211, i64 0, i32 1
  %215 = load i64, i64* %214, align 8, !noalias !2
  %216 = icmp ugt i64 %215, 9223372036854775791
  br i1 %216, label %217, label %219

217:                                              ; preds = %210
  %218 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %218) #11
  unreachable

219:                                              ; preds = %210
  %220 = icmp ult i64 %215, 11
  br i1 %220, label %231, label %221

221:                                              ; preds = %219
  %222 = add nuw nsw i64 %215, 8
  %223 = and i64 %222, -8
  %224 = icmp slt i64 %223, 0
  br i1 %224, label %225, label %226

225:                                              ; preds = %221
  call void @abort() #11
  unreachable

226:                                              ; preds = %221
  %227 = shl i64 %223, 1
  %228 = call i8* @_Znwm(i64 %227) #12
  %229 = bitcast i8* %228 to i16*
  store i8* %228, i8** %203, align 8, !alias.scope !2
  %230 = or i64 %223, -9223372036854775808
  store i64 %230, i64* %204, align 8, !alias.scope !2
  store i64 %215, i64* %205, align 8, !alias.scope !2
  br label %234

231:                                              ; preds = %219
  %232 = trunc i64 %215 to i8
  store i8 %232, i8* %207, align 1, !alias.scope !2
  %233 = icmp eq i64 %215, 0
  br i1 %233, label %378, label %234

234:                                              ; preds = %231, %226
  %235 = phi i16* [ %229, %226 ], [ %208, %231 ]
  %236 = icmp ult i64 %215, 16
  br i1 %236, label %325, label %237

237:                                              ; preds = %234
  %238 = getelementptr i16, i16* %235, i64 %215
  %239 = getelementptr i16, i16* %213, i64 %215
  %240 = icmp ult i16* %235, %239
  %241 = icmp ult i16* %213, %238
  %242 = and i1 %240, %241
  br i1 %242, label %325, label %243

243:                                              ; preds = %237
  %244 = and i64 %215, -16
  %245 = sub i64 %215, %244
  %246 = getelementptr i16, i16* %213, i64 %244
  %247 = getelementptr i16, i16* %235, i64 %244
  %248 = add i64 %244, -16
  %249 = lshr exact i64 %248, 4
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 3
  %252 = icmp ult i64 %248, 48
  br i1 %252, label %304, label %253

253:                                              ; preds = %243
  %254 = sub nsw i64 %250, %251
  br label %255

255:                                              ; preds = %255, %253
  %256 = phi i64 [ 0, %253 ], [ %301, %255 ]
  %257 = phi i64 [ %254, %253 ], [ %302, %255 ]
  %258 = getelementptr i16, i16* %213, i64 %256
  %259 = getelementptr i16, i16* %235, i64 %256
  %260 = bitcast i16* %258 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 2, !alias.scope !13
  %262 = getelementptr i16, i16* %258, i64 8
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2, !alias.scope !13
  %265 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %265, align 2, !alias.scope !16, !noalias !13
  %266 = getelementptr i16, i16* %259, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %267, align 2, !alias.scope !16, !noalias !13
  %268 = or i64 %256, 16
  %269 = getelementptr i16, i16* %213, i64 %268
  %270 = getelementptr i16, i16* %235, i64 %268
  %271 = bitcast i16* %269 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !13
  %273 = getelementptr i16, i16* %269, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !13
  %276 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %276, align 2, !alias.scope !16, !noalias !13
  %277 = getelementptr i16, i16* %270, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %278, align 2, !alias.scope !16, !noalias !13
  %279 = or i64 %256, 32
  %280 = getelementptr i16, i16* %213, i64 %279
  %281 = getelementptr i16, i16* %235, i64 %279
  %282 = bitcast i16* %280 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !13
  %284 = getelementptr i16, i16* %280, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !13
  %287 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %287, align 2, !alias.scope !16, !noalias !13
  %288 = getelementptr i16, i16* %281, i64 8
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %286, <8 x i16>* %289, align 2, !alias.scope !16, !noalias !13
  %290 = or i64 %256, 48
  %291 = getelementptr i16, i16* %213, i64 %290
  %292 = getelementptr i16, i16* %235, i64 %290
  %293 = bitcast i16* %291 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 2, !alias.scope !13
  %295 = getelementptr i16, i16* %291, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 2, !alias.scope !13
  %298 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %298, align 2, !alias.scope !16, !noalias !13
  %299 = getelementptr i16, i16* %292, i64 8
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %300, align 2, !alias.scope !16, !noalias !13
  %301 = add i64 %256, 64
  %302 = add i64 %257, -4
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %255, !llvm.loop !18

304:                                              ; preds = %255, %243
  %305 = phi i64 [ 0, %243 ], [ %301, %255 ]
  %306 = icmp eq i64 %251, 0
  br i1 %306, label %323, label %307

307:                                              ; preds = %304, %307
  %308 = phi i64 [ %320, %307 ], [ %305, %304 ]
  %309 = phi i64 [ %321, %307 ], [ %251, %304 ]
  %310 = getelementptr i16, i16* %213, i64 %308
  %311 = getelementptr i16, i16* %235, i64 %308
  %312 = bitcast i16* %310 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 2, !alias.scope !13
  %314 = getelementptr i16, i16* %310, i64 8
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 2, !alias.scope !13
  %317 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %317, align 2, !alias.scope !16, !noalias !13
  %318 = getelementptr i16, i16* %311, i64 8
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %316, <8 x i16>* %319, align 2, !alias.scope !16, !noalias !13
  %320 = add i64 %308, 16
  %321 = add i64 %309, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %307, !llvm.loop !20

323:                                              ; preds = %307, %304
  %324 = icmp eq i64 %215, %244
  br i1 %324, label %378, label %325

325:                                              ; preds = %323, %237, %234
  %326 = phi i64 [ %215, %237 ], [ %215, %234 ], [ %245, %323 ]
  %327 = phi i16* [ %213, %237 ], [ %213, %234 ], [ %246, %323 ]
  %328 = phi i16* [ %235, %237 ], [ %235, %234 ], [ %247, %323 ]
  %329 = add i64 %326, -1
  %330 = and i64 %326, 7
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %343, label %332

332:                                              ; preds = %325, %332
  %333 = phi i64 [ %338, %332 ], [ %326, %325 ]
  %334 = phi i16* [ %340, %332 ], [ %327, %325 ]
  %335 = phi i16* [ %339, %332 ], [ %328, %325 ]
  %336 = phi i64 [ %341, %332 ], [ %330, %325 ]
  %337 = load i16, i16* %334, align 2
  store i16 %337, i16* %335, align 2
  %338 = add i64 %333, -1
  %339 = getelementptr inbounds i16, i16* %335, i64 1
  %340 = getelementptr inbounds i16, i16* %334, i64 1
  %341 = add i64 %336, -1
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %332, !llvm.loop !22

343:                                              ; preds = %332, %325
  %344 = phi i64 [ %326, %325 ], [ %338, %332 ]
  %345 = phi i16* [ %327, %325 ], [ %340, %332 ]
  %346 = phi i16* [ %328, %325 ], [ %339, %332 ]
  %347 = icmp ult i64 %329, 7
  br i1 %347, label %378, label %348

348:                                              ; preds = %343, %348
  %349 = phi i64 [ %374, %348 ], [ %344, %343 ]
  %350 = phi i16* [ %376, %348 ], [ %345, %343 ]
  %351 = phi i16* [ %375, %348 ], [ %346, %343 ]
  %352 = load i16, i16* %350, align 2
  store i16 %352, i16* %351, align 2
  %353 = getelementptr inbounds i16, i16* %351, i64 1
  %354 = getelementptr inbounds i16, i16* %350, i64 1
  %355 = load i16, i16* %354, align 2
  store i16 %355, i16* %353, align 2
  %356 = getelementptr inbounds i16, i16* %351, i64 2
  %357 = getelementptr inbounds i16, i16* %350, i64 2
  %358 = load i16, i16* %357, align 2
  store i16 %358, i16* %356, align 2
  %359 = getelementptr inbounds i16, i16* %351, i64 3
  %360 = getelementptr inbounds i16, i16* %350, i64 3
  %361 = load i16, i16* %360, align 2
  store i16 %361, i16* %359, align 2
  %362 = getelementptr inbounds i16, i16* %351, i64 4
  %363 = getelementptr inbounds i16, i16* %350, i64 4
  %364 = load i16, i16* %363, align 2
  store i16 %364, i16* %362, align 2
  %365 = getelementptr inbounds i16, i16* %351, i64 5
  %366 = getelementptr inbounds i16, i16* %350, i64 5
  %367 = load i16, i16* %366, align 2
  store i16 %367, i16* %365, align 2
  %368 = getelementptr inbounds i16, i16* %351, i64 6
  %369 = getelementptr inbounds i16, i16* %350, i64 6
  %370 = load i16, i16* %369, align 2
  store i16 %370, i16* %368, align 2
  %371 = getelementptr inbounds i16, i16* %351, i64 7
  %372 = getelementptr inbounds i16, i16* %350, i64 7
  %373 = load i16, i16* %372, align 2
  store i16 %373, i16* %371, align 2
  %374 = add i64 %349, -8
  %375 = getelementptr inbounds i16, i16* %351, i64 8
  %376 = getelementptr inbounds i16, i16* %350, i64 8
  %377 = icmp eq i64 %374, 0
  br i1 %377, label %378, label %348, !llvm.loop !23

378:                                              ; preds = %343, %348, %323, %231
  %379 = phi i16* [ %208, %231 ], [ %235, %323 ], [ %235, %348 ], [ %235, %343 ]
  %380 = getelementptr inbounds i16, i16* %379, i64 %215
  store i16 0, i16* %380, align 2
  %381 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %188, align 8
  %382 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %189, align 8
  %383 = icmp ult %"class.std::__1::basic_string"* %381, %382
  br i1 %383, label %384, label %388

384:                                              ; preds = %378
  %385 = bitcast %"class.std::__1::basic_string"* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %385, i8* nonnull align 8 %202, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #10
  %386 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %381, i64 1
  %387 = ptrtoint %"class.std::__1::basic_string"* %386 to i64
  store i64 %387, i64* %209, align 8
  br label %393

388:                                              ; preds = %378
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.1"* nonnull %9, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #10
  %389 = load i8, i8* %207, align 1
  %390 = icmp slt i8 %389, 0
  br i1 %390, label %391, label %393

391:                                              ; preds = %388
  %392 = load i8*, i8** %203, align 8
  call void @_ZdlPv(i8* %392) #12
  br label %393

393:                                              ; preds = %391, %388, %384
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #10
  %394 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %211, i64 1
  %395 = icmp eq %"class.base::BasicStringPiece"* %394, %197
  br i1 %395, label %396, label %210

396:                                              ; preds = %393, %199
  %397 = phi i64* [ %200, %199 ], [ %209, %393 ]
  %398 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %398, align 8, !alias.scope !24
  %399 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %400 = bitcast %"class.std::__1::vector.1"* %9 to i64*
  %401 = load i64, i64* %400, align 8, !noalias !24
  %402 = bitcast %"class.std::__1::vector.1"* %399 to i64*
  store i64 %401, i64* %402, align 8, !alias.scope !24
  %403 = load i64, i64* %397, align 8, !noalias !24
  %404 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %405 = bitcast %"class.std::__1::basic_string"** %404 to i64*
  store i64 %403, i64* %405, align 8, !alias.scope !24
  %406 = bitcast %"class.std::__1::basic_string"** %189 to i64*
  %407 = load i64, i64* %406, align 8, !noalias !24
  %408 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %409 = bitcast %"class.std::__1::basic_string"** %408 to i64*
  store i64 %407, i64* %409, align 8, !alias.scope !24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %187) #10
  br label %410

410:                                              ; preds = %396, %182
  %411 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %11, align 8
  %412 = icmp eq %"class.base::BasicStringPiece"* %411, null
  br i1 %412, label %417, label %413

413:                                              ; preds = %410
  %414 = ptrtoint %"class.base::BasicStringPiece"* %411 to i64
  %415 = bitcast %"class.base::BasicStringPiece"** %12 to i64*
  store i64 %414, i64* %415, align 8
  %416 = bitcast %"class.base::BasicStringPiece"* %411 to i8*
  call void @_ZdlPv(i8* %416) #12
  br label %417

417:                                              ; preds = %410, %413
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* sret, i16*, i64, i16*, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base27SplitStringPieceUsingSubstrENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* sret, i16*, i64, i16*, i64, i32, i32) local_unnamed_addr #2

declare void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.std::__1::basic_string"*
  br i1 %10, label %12, label %62

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::basic_string"** %13 to i64*
  %15 = icmp ugt i64 %1, 768614336404564650
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 24
  %21 = mul i64 %1, 24
  %22 = tail call i8* @_Znwm(i64 %21) #12
  %23 = bitcast i8* %22 to %"class.std::__1::basic_string"*
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 %20
  %25 = ptrtoint %"class.std::__1::basic_string"* %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 %1
  %27 = ptrtoint %"class.std::__1::basic_string"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.std::__1::basic_string"*
  %29 = icmp eq %"class.std::__1::basic_string"* %28, %11
  br i1 %29, label %30, label %31

30:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %57

31:                                               ; preds = %17, %31
  %32 = phi %"class.std::__1::basic_string"* [ %34, %31 ], [ %24, %17 ]
  %33 = phi %"class.std::__1::basic_string"* [ %35, %31 ], [ %28, %17 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 -1
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 -1
  %36 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %37 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #10
  %38 = icmp eq %"class.std::__1::basic_string"* %35, %11
  br i1 %38, label %39, label %31

39:                                               ; preds = %31
  %40 = ptrtoint %"class.std::__1::basic_string"* %34 to i64
  %41 = load i64, i64* %6, align 8
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %13, align 8
  %43 = inttoptr i64 %41 to %"class.std::__1::basic_string"*
  store i64 %40, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %42, %43
  br i1 %44, label %57, label %45

45:                                               ; preds = %39, %55
  %46 = phi %"class.std::__1::basic_string"* [ %47, %55 ], [ %42, %39 ]
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 -1
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %45
  %53 = bitcast %"class.std::__1::basic_string"* %47 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %52, %45
  %56 = icmp eq %"class.std::__1::basic_string"* %47, %43
  br i1 %56, label %57, label %45

57:                                               ; preds = %55, %30, %39
  %58 = phi i64 [ %7, %30 ], [ %41, %39 ], [ %41, %55 ]
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %58 to i8*
  tail call void @_ZdlPv(i8* %61) #12
  br label %62

62:                                               ; preds = %60, %57, %2
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.1"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #10
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #10
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string"* %67 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #12
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #12
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5, !7, !9, !11}
!3 = distinct !{!3, !4, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!5 = distinct !{!5, !6, !"_ZZN8autofill18GetParseableLabelsERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEENK3$_0clIS6_EEDaRT_: argument 0"}
!6 = distinct !{!6, !"_ZZN8autofill18GetParseableLabelsERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEENK3$_0clIS6_EEDaRT_"}
!7 = distinct !{!7, !8, !"_ZN4base8internal10InvokeImplIRZN8autofill18GetParseableLabelsERKNSt3__16vectorINS_16BasicStringPieceIDsNS3_11char_traitsIDsEEEENS3_9allocatorIS8_EEEEE3$_0JRS8_EEEDcOT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZN4base8internal10InvokeImplIRZN8autofill18GetParseableLabelsERKNSt3__16vectorINS_16BasicStringPieceIDsNS3_11char_traitsIDsEEEENS3_9allocatorIS8_EEEEE3$_0JRS8_EEEDcOT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4base6invokeIRZN8autofill18GetParseableLabelsERKNSt3__16vectorINS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEENS2_9allocatorIS7_EEEEE3$_0JRS7_EEEDcOT_DpOT0_: argument 0"}
!10 = distinct !{!10, !"_ZN4base6invokeIRZN8autofill18GetParseableLabelsERKNSt3__16vectorINS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEENS2_9allocatorIS7_EEEEE3$_0JRS7_EEEDcOT_DpOT0_"}
!11 = distinct !{!11, !12, !"_ZZN4base6ranges9transformINSt3__111__wrap_iterIPNS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEEEENS2_20back_insert_iteratorINS2_6vectorINS2_12basic_stringIDsS6_NS2_9allocatorIDsEEEENSD_ISF_EEEEEEZN8autofill18GetParseableLabelsERKNSB_IS7_NSD_IS7_EEEEE3$_0NS_8identityENS2_26random_access_iterator_tagENS2_19output_iterator_tagESF_EEDaT_SS_T0_T1_T2_ENKUlTyOSS_E_clIRS7_EEDaSW_: argument 0"}
!12 = distinct !{!12, !"_ZZN4base6ranges9transformINSt3__111__wrap_iterIPNS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEEEENS2_20back_insert_iteratorINS2_6vectorINS2_12basic_stringIDsS6_NS2_9allocatorIDsEEEENSD_ISF_EEEEEEZN8autofill18GetParseableLabelsERKNSB_IS7_NSD_IS7_EEEEE3$_0NS_8identityENS2_26random_access_iterator_tagENS2_19output_iterator_tagESF_EEDaT_SS_T0_T1_T2_ENKUlTyOSS_E_clIRS7_EEDaSW_"}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.unroll.disable"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !19}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN4absl13make_optionalINSt3__16vectorINS1_12basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEENS6_IS8_EEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSD_: argument 0"}
!26 = distinct !{!26, !"_ZN4absl13make_optionalINSt3__16vectorINS1_12basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEENS6_IS8_EEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSD_"}
