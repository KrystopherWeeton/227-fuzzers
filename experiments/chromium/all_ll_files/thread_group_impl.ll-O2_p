; ModuleID = '../../base/task/thread_pool/thread_group_impl.cc'
source_filename = "../../base/task/thread_pool/thread_group_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::Feature" = type { i8*, i32 }
%"struct.base::FeatureParam" = type { %"struct.base::Feature"*, i8*, i32, %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"*, i64 }
%"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option" = type { i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::internal::ThreadGroupImpl" = type { %"class.base::internal::ThreadGroup", %"struct.base::internal::ThreadGroupImpl::InitializedInStart", %"class.std::__1::basic_string", i32, %"class.std::__1::vector.13", i64, i64, i64, i64, i32, i32, %"class.base::internal::WorkerThreadStack", %"class.std::__1::unique_ptr", i8, i8, i64, %"class.std::__1::unique_ptr", i8, [7 x i8], %"class.absl::optional", %"class.base::HistogramBase"*, %"class.base::internal::TrackedRefFactory.48" }
%"class.base::internal::ThreadGroup" = type { i32 (...)**, %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef.0", %"class.base::internal::CheckedLock", i8, [7 x i8], %"class.base::internal::PriorityQueue", %"struct.std::__1::atomic", %"class.base::internal::ThreadGroup"* }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr.74", %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.80", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.86", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i32 }
%"struct.std::__1::atomic.80" = type { %"struct.std::__1::__atomic_base.81" }
%"struct.std::__1::__atomic_base.81" = type { %"struct.std::__1::__cxx_atomic_impl.82" }
%"struct.std::__1::__cxx_atomic_impl.82" = type { %"struct.std::__1::__cxx_atomic_base_impl.83" }
%"struct.std::__1::__cxx_atomic_base_impl.83" = type { i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.84 }
%class.scoped_refptr.84 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.85", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.85" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.3" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.36, i8, [7 x i8] }>
%class.scoped_refptr.36 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.37", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.37" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.38" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.69" }
%"class.absl::optional.69" = type { %"class.absl::optional_internal::optional_data.70" }
%"class.absl::optional_internal::optional_data.70" = type { %"class.absl::optional_internal::optional_data_base.71" }
%"class.absl::optional_internal::optional_data_base.71" = type { %"class.absl::optional_internal::optional_data_dtor_base.72" }
%"class.absl::optional_internal::optional_data_dtor_base.72" = type { i8, %union.anon.73 }
%union.anon.73 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef.0" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::internal::TrackedRefFactory.1"* }
%"class.base::internal::ThreadGroup::Delegate" = type { i32 (...)** }
%"class.base::internal::TrackedRefFactory.1" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.140" }
%"class.absl::optional.140" = type { %"class.absl::optional_internal::optional_data.141" }
%"class.absl::optional_internal::optional_data.141" = type { %"class.absl::optional_internal::optional_data_base.142" }
%"class.absl::optional_internal::optional_data_base.142" = type { %"class.absl::optional_internal::optional_data_dtor_base.143" }
%"class.absl::optional_internal::optional_data_dtor_base.143" = type { i8, %union.anon.144 }
%union.anon.144 = type { %"class.base::internal::TrackedRef.0" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::internal::PriorityQueue" = type <{ %"class.base::internal::IntrusiveHeap", %"struct.std::__1::array", i8, [7 x i8] }>
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::PriorityQueue::TaskSourceAndSortKey" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"* }
%"struct.std::__1::array" = type { [3 x i64] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"struct.base::internal::ThreadGroup::YieldSortKey" }
%"struct.base::internal::ThreadGroup::YieldSortKey" = type { i8, i8 }
%"struct.base::internal::ThreadGroupImpl::InitializedInStart" = type { i64, %"class.base::TimeDelta", i32, %class.scoped_refptr, %"class.base::WorkerThreadObserver"*, i32, i8, i8, %"class.base::TimeDelta", %"class.base::TimeDelta" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WorkerThreadObserver" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %class.scoped_refptr.15*, %class.scoped_refptr.15*, %"class.std::__1::__compressed_pair.16" }
%class.scoped_refptr.15 = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe.57", [4 x i8], %class.scoped_refptr.15, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr.63", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::RefCountedThreadSafe.57" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.58" }
%"struct.std::__1::atomic.58" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl.61" }
%"struct.std::__1::__cxx_atomic_impl.61" = type { %"struct.std::__1::__cxx_atomic_base_impl.62" }
%"struct.std::__1::__cxx_atomic_base_impl.62" = type { i8 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.scoped_refptr.15* }
%"class.base::internal::WorkerThreadStack" = type { %"class.std::__1::vector.21" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"**, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.base::internal::WorkerThread"** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.30, %union.anon.32, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.30 = type { i64 }
%union.anon.32 = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.35 }
%union.anon.35 = type { %"class.base::WaitableEvent" }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.43", [4 x i8] }>
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i32 }
%"class.base::internal::TrackedRefFactory.48" = type { %"class.base::internal::ThreadGroupImpl"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.49" }
%"class.absl::optional.49" = type { %"class.absl::optional_internal::optional_data.50" }
%"class.absl::optional_internal::optional_data.50" = type { %"class.absl::optional_internal::optional_data_base.51" }
%"class.absl::optional_internal::optional_data_base.51" = type { %"class.absl::optional_internal::optional_data_dtor_base.52" }
%"class.absl::optional_internal::optional_data_dtor_base.52" = type { i8, %union.anon.53 }
%union.anon.53 = type { %"class.base::internal::TrackedRef.54" }
%"class.base::internal::TrackedRef.54" = type { %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::TrackedRefFactory.48"* }
%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl" = type <{ %"class.base::internal::WorkerThread::Delegate", %"class.base::internal::BlockingObserver", %"struct.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl::WorkerOnly", %"struct.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl::WriteWorkerReadAny", %"class.base::internal::TrackedRef.54", i8, i8, [6 x i8] }>
%"class.base::internal::BlockingObserver" = type { i32 (...)** }
%"struct.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl::WorkerOnly" = type <{ i64, i8, [7 x i8] }>
%"struct.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl::WriteWorkerReadAny" = type { %"class.absl::optional.120", %"class.base::TimeTicks" }
%"class.absl::optional.120" = type { %"class.absl::optional_internal::optional_data.121" }
%"class.absl::optional_internal::optional_data.121" = type { %"class.absl::optional_internal::optional_data_base.122" }
%"class.absl::optional_internal::optional_data_base.122" = type { %"class.absl::optional_internal::optional_data_dtor_base.123" }
%"class.absl::optional_internal::optional_data_dtor_base.123" = type { i8, %union.anon.124 }
%union.anon.124 = type { i8 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.absl::optional.92" = type { %"class.absl::optional_internal::optional_data.93" }
%"class.absl::optional_internal::optional_data.93" = type { %"class.absl::optional_internal::optional_data_base.94" }
%"class.absl::optional_internal::optional_data_base.94" = type { %"class.absl::optional_internal::optional_data_dtor_base.95" }
%"class.absl::optional_internal::optional_data_dtor_base.95" = type { i8, %union.anon.96 }
%union.anon.96 = type { %"class.base::TimeDelta" }
%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor" = type { %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", i8, %"class.base::StackVector" }
%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor" = type { %"class.std::__1::vector.99" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*, %"class.std::__1::__compressed_pair.108" }
%"class.base::internal::RegisteredTaskSource" = type { %class.scoped_refptr.101, %"class.base::internal::TaskTracker"* }
%class.scoped_refptr.101 = type { %"class.base::internal::TaskSource"* }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.102", %"class.base::TaskTraits", %"struct.std::__1::atomic.104", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe.102" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array.103" }
%"struct.std::__1::array.103" = type { [8 x i8] }
%"struct.std::__1::atomic.104" = type { %"struct.std::__1::__atomic_base.105" }
%"struct.std::__1::__atomic_base.105" = type { %"struct.std::__1::__cxx_atomic_impl.106" }
%"struct.std::__1::__cxx_atomic_impl.106" = type { %"struct.std::__1::__cxx_atomic_base_impl.107" }
%"struct.std::__1::__cxx_atomic_base_impl.107" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.base::internal::RegisteredTaskSource"* }
%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer" = type { %class.scoped_refptr.15, %"class.std::__1::vector.13" }
%"class.base::StackVector" = type { %"class.base::StackContainer" }
%"class.base::StackContainer" = type { %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source", %"class.base::StackAllocator", %"class.std::__1::vector.115" }
%"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source" = type { [80 x i8], i8, [7 x i8] }
%"class.base::StackAllocator" = type { %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.117" }
%"struct.std::__1::pair" = type <{ %"class.base::HistogramBase"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118", %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.base::StackAllocator" }
%"class.base::internal::TaskSource::Transaction" = type { %"class.base::internal::TaskSource"* }
%"struct.base::internal::TransactionWithRegisteredTaskSource" = type { %"class.base::internal::RegisteredTaskSource", %"class.base::internal::TaskSource::Transaction" }
%"class.base::internal::TaskSourceSortKey" = type { i8, i8, %"class.base::TimeTicks" }
%"class.absl::optional.125" = type { %"class.absl::optional_internal::optional_data.126" }
%"class.absl::optional_internal::optional_data.126" = type { %"class.absl::optional_internal::optional_data_base.127" }
%"class.absl::optional_internal::optional_data_base.127" = type { %"class.absl::optional_internal::optional_data_dtor_base.128" }
%"class.absl::optional_internal::optional_data_dtor_base.128" = type { i8, %union.anon.129 }
%union.anon.129 = type { %"struct.base::internal::TransactionWithRegisteredTaskSource" }
%"class.base::internal::ThreadGroup::ScopedReenqueueExecutor" = type { %"class.absl::optional.125", %"class.base::internal::ThreadGroup"* }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK4base12FeatureParamINS_14WakeUpStrategyELb1EE3GetEv = comdat any

$_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev = comdat any

$_ZN4base8internal17TrackedRefFactoryINS0_15ThreadGroupImplEED2Ev = comdat any

$_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor19FlushWorkerCreationEPNS0_11CheckedLockE = comdat any

$_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD2Ev = comdat any

$_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev = comdat any

$_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD1Ev = comdat any

$_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev = comdat any

$_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor9FlushImplEv = comdat any

$_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor15WorkerContainer13ForEachWorkerIZNS2_9FlushImplEvEUlPNS0_12WorkerThreadEE0_EEvT_ = comdat any

$_ZNSt3__16vectorINS_4pairIPN4base13HistogramBaseEiEENS2_14StackAllocatorIS5_Lm5EEEE24__emplace_back_slow_pathIJRS4_RiEEEvDpOT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIRKS5_EEvOT_ = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor25kHistogramSampleStackSizeE = hidden local_unnamed_addr constant i64 5, align 8
@_ZTVN4base8internal15ThreadGroupImplE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImplD2Ev to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImplD0Ev to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal15ThreadGroupImpl13UpdateSortKeyENS0_10TaskSource11TransactionE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*, %"struct.base::internal::TransactionWithRegisteredTaskSource"*)* @_ZN4base8internal15ThreadGroupImpl30PushTaskSourceAndWakeUpWorkersENS0_35TransactionWithRegisteredTaskSourceE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImpl14JoinForTestingEv to i8*), i8* bitcast (i64 (%"class.base::internal::ThreadGroupImpl"*)* @_ZNK4base8internal15ThreadGroupImpl41GetMaxConcurrentNonBlockedTasksDeprecatedEv to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImpl21DidUpdateCanRunPolicyEv to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)* @_ZN4base8internal15ThreadGroupImpl31EnsureEnoughWorkersLockRequiredEPNS0_11ThreadGroup26BaseScopedCommandsExecutorE to i8*)] }, align 8
@_ZN4base8internal12_GLOBAL__N_136kNumTasksBeforeDetachHistogramPrefixE = internal constant [33 x i8] c"ThreadPool.NumTasksBeforeDetach.\00", align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN4base19kWakeUpAfterGetWorkE = external global %"struct.base::Feature", align 8
@_ZN4base20kWakeUpStrategyParamE = external global %"struct.base::FeatureParam", align 8
@_ZN4base21kMayBlockWithoutDelayE = external global %"struct.base::Feature", align 8
@_ZN4base8internal12_GLOBAL__N_128kForegroundMayBlockThresholdE = internal unnamed_addr constant %"class.base::TimeDelta" { i64 1000000 }, align 8
@_ZN4base8internal12_GLOBAL__N_128kBackgroundMayBlockThresholdE = internal unnamed_addr constant %"class.base::TimeDelta" { i64 10000000 }, align 8
@_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE = hidden unnamed_addr constant { [14 x i8*], [7 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD2Ev to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev to i8*), i8* bitcast (i32 (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZNK4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl14GetThreadLabelEv to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl11OnMainEntryEPKNS0_12WorkerThreadE to i8*), i8* bitcast (void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl7GetWorkEPNS0_12WorkerThreadE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::RegisteredTaskSource"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl14DidProcessTaskENS0_20RegisteredTaskSourceE to i8*), i8* bitcast (i64 (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15GetSleepTimeoutEv to i8*), i8* bitcast (void (%"class.base::internal::WorkerThread::Delegate"*, %"class.base::WaitableEvent"*)* @_ZN4base8internal12WorkerThread8Delegate11WaitForWorkEPNS_13WaitableEventE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl10OnMainExitEPNS0_12WorkerThreadE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, i32)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15BlockingStartedENS_12BlockingTypeE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl20BlockingTypeUpgradedEv to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl13BlockingEndedEv to i8*)], [7 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD1Ev to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, i32)* @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15BlockingStartedENS_12BlockingTypeE to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl20BlockingTypeUpgradedEv to i8*), i8* bitcast (void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*)* @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl13BlockingEndedEv to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [19 x i8] c"ThreadPool%sWorker\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"ScheduleAdjustMaxTasks\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"../../base/task/thread_pool/thread_group_impl.cc\00", align 1
@_ZN4base6subtle24ScopedTimeClockOverrides17overrides_active_E = external local_unnamed_addr global i8, align 1

@_ZN4base8internal15ThreadGroupImplC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES6_NS_14ThreadPriorityENS0_10TrackedRefINS0_11TaskTrackerEEENS8_INS0_11ThreadGroup8DelegateEEE = hidden unnamed_addr alias void (%"class.base::internal::ThreadGroupImpl"*, i8*, i64, i8*, i64, i32, %"class.base::internal::TrackedRef"*, %"class.base::internal::TrackedRef.0"*), void (%"class.base::internal::ThreadGroupImpl"*, i8*, i64, i8*, i64, i32, %"class.base::internal::TrackedRef"*, %"class.base::internal::TrackedRef.0"*)* @_ZN4base8internal15ThreadGroupImplC2ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES6_NS_14ThreadPriorityENS0_10TrackedRefINS0_11TaskTrackerEEENS8_INS0_11ThreadGroup8DelegateEEE
@_ZN4base8internal15ThreadGroupImplD1Ev = hidden unnamed_addr alias void (%"class.base::internal::ThreadGroupImpl"*), void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImplD2Ev
@_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplC1ENS0_10TrackedRefIS1_EE = hidden unnamed_addr alias void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::TrackedRef.54"*), void (%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::TrackedRef.54"*)* @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplC2ENS0_10TrackedRefIS1_EE
@_ZN4base8internal15ThreadGroupImpl18InitializedInStartC1Ev = hidden unnamed_addr alias void (%"struct.base::internal::ThreadGroupImpl::InitializedInStart"*), void (%"struct.base::internal::ThreadGroupImpl::InitializedInStart"*)* @_ZN4base8internal15ThreadGroupImpl18InitializedInStartC2Ev
@_ZN4base8internal15ThreadGroupImpl18InitializedInStartD1Ev = hidden unnamed_addr alias void (%"struct.base::internal::ThreadGroupImpl::InitializedInStart"*), void (%"struct.base::internal::ThreadGroupImpl::InitializedInStart"*)* @_ZN4base8internal15ThreadGroupImpl18InitializedInStartD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImplC2ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES6_NS_14ThreadPriorityENS0_10TrackedRefINS0_11TaskTrackerEEENS8_INS0_11ThreadGroup8DelegateEEE(%"class.base::internal::ThreadGroupImpl"*, i8*, i64, i8*, i64, i32, %"class.base::internal::TrackedRef"* nocapture, %"class.base::internal::TrackedRef.0"* nocapture) unnamed_addr #0 align 2 {
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %"class.base::internal::TrackedRef"*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"class.base::internal::TrackedRef.0"*
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca [2 x %"class.base::BasicStringPiece"], align 8
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef"* %10, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef"* %6, i64 0, i32 1
  %18 = bitcast %"class.base::internal::TrackedRef"* %6 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  store <2 x i64> %19, <2 x i64>* %9, align 16
  store %"class.base::internal::TrackedRefFactory"* null, %"class.base::internal::TrackedRefFactory"** %17, align 8
  %20 = getelementptr inbounds %"class.base::internal::TrackedRef.0", %"class.base::internal::TrackedRef.0"* %12, i64 0, i32 1
  %21 = getelementptr inbounds %"class.base::internal::TrackedRef.0", %"class.base::internal::TrackedRef.0"* %7, i64 0, i32 1
  %22 = bitcast %"class.base::internal::TrackedRef.0"* %7 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 8
  store <2 x i64> %23, <2 x i64>* %11, align 16
  store %"class.base::internal::TrackedRefFactory.1"* null, %"class.base::internal::TrackedRefFactory.1"** %21, align 8
  call void @_ZN4base8internal11ThreadGroupC2ENS0_10TrackedRefINS0_11TaskTrackerEEENS2_INS1_8DelegateEEEPS1_(%"class.base::internal::ThreadGroup"* %15, %"class.base::internal::TrackedRef"* nonnull %10, %"class.base::internal::TrackedRef.0"* nonnull %12, %"class.base::internal::ThreadGroup"* null) #16
  %24 = load %"class.base::internal::TrackedRefFactory.1"*, %"class.base::internal::TrackedRefFactory.1"** %20, align 8
  %25 = icmp eq %"class.base::internal::TrackedRefFactory.1"* %24, null
  br i1 %25, label %38, label %26

26:                                               ; preds = %8
  %27 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.1", %"class.base::internal::TrackedRefFactory.1"* %24, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load %"class.base::internal::TrackedRefFactory.1"*, %"class.base::internal::TrackedRefFactory.1"** %20, align 8
  %32 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.1", %"class.base::internal::TrackedRefFactory.1"* %31, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %36, !prof !3

35:                                               ; preds = %30
  call void @llvm.trap() #16
  unreachable

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.1", %"class.base::internal::TrackedRefFactory.1"* %31, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %37) #16
  br label %38

38:                                               ; preds = %8, %26, %36
  %39 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %16, align 8
  %40 = icmp eq %"class.base::internal::TrackedRefFactory"* %39, null
  br i1 %40, label %53, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %39, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %16, align 8
  %47 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %46, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %45
  call void @llvm.trap() #16
  unreachable

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %46, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %52) #16
  br label %53

53:                                               ; preds = %38, %41, %51
  %54 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4base8internal15ThreadGroupImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %55 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1
  %56 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 3, i32 0
  %57 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 8, i32 0
  %58 = bitcast %"struct.base::internal::ThreadGroupImpl::InitializedInStart"* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 20, i1 false) #16
  %59 = bitcast %"class.base::SequencedTaskRunner"** %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #16
  %60 = bitcast i64* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 16, i1 false) #16
  %61 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 2
  %62 = icmp ugt i64 %4, -17
  br i1 %62, label %63, label %65

63:                                               ; preds = %53
  %64 = bitcast %"class.std::__1::basic_string"* %61 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %64) #17
  unreachable

65:                                               ; preds = %53
  %66 = icmp ult i64 %4, 23
  br i1 %66, label %75, label %67

67:                                               ; preds = %65
  %68 = add nuw i64 %4, 16
  %69 = and i64 %68, -16
  %70 = call i8* @_Znwm(i64 %69) #18
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %70, i8** %71, align 8, !alias.scope !4
  %72 = or i64 %69, -9223372036854775808
  %73 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %72, i64* %73, align 8, !alias.scope !4
  %74 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %4, i64* %74, align 8, !alias.scope !4
  br label %81

75:                                               ; preds = %65
  %76 = trunc i64 %4 to i8
  %77 = bitcast %"class.std::__1::basic_string"* %61 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  store i8 %76, i8* %78, align 1, !alias.scope !4
  %79 = bitcast %"class.std::__1::basic_string"* %61 to i8*
  %80 = icmp eq i64 %4, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %75, %67
  %82 = phi i8* [ %70, %67 ], [ %79, %75 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %3, i64 %4, i1 false) #16
  br label %83

83:                                               ; preds = %75, %81
  %84 = phi i8* [ %79, %75 ], [ %82, %81 ]
  %85 = getelementptr inbounds i8, i8* %84, i64 %4
  store i8 0, i8* %85, align 1
  %86 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 3
  store i32 %5, i32* %86, align 8
  %87 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %88 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %89 = bitcast %"class.std::__1::vector.13"* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 64, i1 false)
  call void @_ZN4base8internal17WorkerThreadStackC1Ev(%"class.base::internal::WorkerThreadStack"* %88) #16
  %90 = call i8* @_Znwm(i64 64) #18
  %91 = bitcast i8* %90 to %"class.base::ConditionVariable"*
  %92 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3, i32 0
  call void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"* nonnull %91, %"class.base::Lock"* %92) #16
  %93 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %94 = bitcast %"class.base::ConditionVariable"** %93 to i8**
  store i8* %90, i8** %94, align 8
  %95 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 13
  store i8 0, i8* %95, align 8
  %96 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 14
  store i8 0, i8* %96, align 1
  %97 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 15
  %98 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %98, align 8
  %99 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 20
  %100 = icmp eq i64 %2, 0
  %101 = bitcast [2 x %"class.base::BasicStringPiece"]* %14 to i8*
  %102 = bitcast i64* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 17, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %101) #16
  br i1 %100, label %119, label %103

103:                                              ; preds = %83
  %104 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #16
  %105 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %14, i64 0, i64 0
  %106 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %14, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @_ZN4base8internal12_GLOBAL__N_136kNumTasksBeforeDetachHistogramPrefixE, i64 0, i64 0), i8** %106, align 8
  %107 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %14, i64 0, i64 0, i32 1
  store i64 32, i64* %107, align 8
  %108 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %14, i64 0, i64 1, i32 0
  store i8* %1, i8** %108, align 8
  %109 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %14, i64 0, i64 1, i32 1
  store i64 %2, i64* %109, align 8
  call void @_ZN4base10JoinStringESt16initializer_listINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEES5_(%"class.std::__1::basic_string"* nonnull sret %13, %"class.base::BasicStringPiece"* nonnull %105, i64 2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0) #16
  %110 = call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiiji(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %13, i32 1, i32 1000, i32 50, i32 1) #16
  %111 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %112 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %111, i64 0, i32 1, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %103
  %116 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  call void @_ZdlPv(i8* %117) #18
  br label %118

118:                                              ; preds = %103, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %101) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #16
  br label %120

119:                                              ; preds = %83
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %101) #16
  br label %120

120:                                              ; preds = %119, %118
  %121 = phi %"class.base::HistogramBase"* [ null, %119 ], [ %110, %118 ]
  store %"class.base::HistogramBase"* %121, %"class.base::HistogramBase"** %99, align 8
  %122 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21
  %123 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %122, i64 0, i32 0
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %123, align 8
  %124 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %124, align 4
  %125 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %125, align 8
  %126 = ptrtoint %"class.base::internal::ThreadGroupImpl"* %0 to i64
  %127 = ptrtoint %"class.base::internal::TrackedRefFactory.48"* %122 to i64
  %128 = atomicrmw add i32* %124, i32 1 monotonic
  %129 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %129, align 8
  %130 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  %131 = bitcast %"class.base::internal::TrackedRef.54"* %130 to i64*
  store i64 %126, i64* %131, align 8
  %132 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %133 = bitcast %"class.base::internal::TrackedRefFactory.48"** %132 to i64*
  store i64 %127, i64* %133, align 8
  ret void
}

declare void @_ZN4base8internal11ThreadGroupC2ENS0_10TrackedRefINS0_11TaskTrackerEEENS2_INS1_8DelegateEEEPS1_(%"class.base::internal::ThreadGroup"*, %"class.base::internal::TrackedRef"*, %"class.base::internal::TrackedRef.0"*, %"class.base::internal::ThreadGroup"*) unnamed_addr #1

declare void @_ZN4base8internal17WorkerThreadStackC1Ev(%"class.base::internal::WorkerThreadStack"*) unnamed_addr #1

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiiji(%"class.std::__1::basic_string"* dereferenceable(24), i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base10JoinStringESt16initializer_listINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEES5_(%"class.std::__1::basic_string"* sret, %"class.base::BasicStringPiece"*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl5StartEiiNS_9TimeDeltaE13scoped_refptrINS_19SequencedTaskRunnerEEPNS_20WorkerThreadObserverENS0_11ThreadGroup17WorkerEnvironmentEbN4absl8optionalIS2_EE(%"class.base::internal::ThreadGroupImpl"*, i32, i32, i64, %"class.base::SequencedTaskRunner"*, %"class.base::WorkerThreadObserver"*, i32, i1 zeroext, %"class.absl::optional.92"* nocapture readonly byval(%"class.absl::optional.92") align 8) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %11 = ptrtoint %"class.base::SequencedTaskRunner"* %4 to i64
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11ThreadGroup5StartEv(%"class.base::internal::ThreadGroup"* %12) #16
  %13 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN4base19kWakeUpAfterGetWorkE) #16
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 6
  %15 = zext i1 %13 to i8
  store i8 %15, i8* %14, align 4
  %16 = tail call i32 @_ZNK4base12FeatureParamINS_14WakeUpStrategyELb1EE3GetEv(%"struct.base::FeatureParam"* nonnull @_ZN4base20kWakeUpStrategyParamE)
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 5
  store i32 %16, i32* %17, align 8
  %18 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN4base21kMayBlockWithoutDelayE) #16
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 7
  %20 = zext i1 %18 to i8
  store i8 %20, i8* %19, align 1
  %21 = getelementptr inbounds %"class.absl::optional.92", %"class.absl::optional.92"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %9
  %25 = getelementptr inbounds %"class.absl::optional.92", %"class.absl::optional.92"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  br label %33

28:                                               ; preds = %9
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  %32 = select i1 %31, %"class.base::TimeDelta"* @_ZN4base8internal12_GLOBAL__N_128kForegroundMayBlockThresholdE, %"class.base::TimeDelta"* @_ZN4base8internal12_GLOBAL__N_128kBackgroundMayBlockThresholdE
  br label %33

33:                                               ; preds = %28, %24
  %34 = phi i32 [ %27, %24 ], [ %30, %28 ]
  %35 = phi %"class.base::TimeDelta"* [ %25, %24 ], [ %32, %28 ]
  %36 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %35, i64 0, i32 0
  %37 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 8, i32 0
  %38 = load i64, i64* %36, align 8
  store i64 %38, i64* %37, align 8
  %39 = icmp eq i32 %34, 1
  %40 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 9, i32 0
  %41 = select i1 %39, i64 1200000, i64 12000000
  store i64 %41, i64* %40, align 8
  %42 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %42) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 232, i1 false)
  %43 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %43) #16
  %44 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %44, align 8
  %45 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 2
  %46 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5
  %47 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %46, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 0, i32 1
  %49 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 1, i32 0
  %50 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %47, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %49, align 8
  %51 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 2
  %52 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %53 = ptrtoint %"class.base::StackVector"* %46 to i64
  %54 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %52 to i64*
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %56 = bitcast %"struct.std::__1::pair"** %55 to i64*
  %57 = bitcast %"class.std::__1::vector.115"* %51 to i64*
  %58 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %10, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %59 = bitcast %"struct.std::__1::pair"** %58 to i64*
  store i8 1, i8* %48, align 8
  %60 = ptrtoint i8* %48 to i64
  store i64 %53, i64* %57, align 8
  store i64 %53, i64* %59, align 8
  store i64 %60, i64* %56, align 8
  %61 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %62 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %62) #16
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %67, label %65, !prof !7

65:                                               ; preds = %33
  %66 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %61, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %66) #16
  br label %67

67:                                               ; preds = %33, %65
  %68 = sext i32 %1 to i64
  %69 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 0
  store i64 %68, i64* %70, align 8
  %71 = sext i32 %2 to i64
  %72 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 1, i32 0
  store i64 %3, i64* %73, align 8
  %74 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 2
  store i32 %6, i32* %74, align 8
  %75 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 3
  %76 = bitcast %class.scoped_refptr* %75 to i64*
  %77 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 0, i32 0
  %78 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %77, align 8
  store i64 %11, i64* %76, align 8
  %79 = icmp eq %"class.base::SequencedTaskRunner"* %78, null
  br i1 %79, label %88, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %78, i64 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %81, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = atomicrmw sub i32* %82, i32 1 acq_rel
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %81, i64 -2
  %87 = bitcast %"class.base::RefCountedThreadSafe"* %86 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %87) #16
  br label %88

88:                                               ; preds = %67, %80, %85
  %89 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 4
  store %"class.base::WorkerThreadObserver"* %5, %"class.base::WorkerThreadObserver"** %89, align 8
  br i1 %7, label %90, label %99

90:                                               ; preds = %88
  %91 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  %92 = load i8, i8* %91, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %95) #16
  store i8 0, i8* %91, align 8
  br label %96

96:                                               ; preds = %94, %90
  %97 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"* %97, i32 1, i32 1) #16
  store i8 1, i8* %91, align 8
  %98 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  store i8 0, i8* %98, align 8
  br label %99

99:                                               ; preds = %88, %96
  %100 = bitcast %"class.base::internal::ThreadGroupImpl"* %0 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %101 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %100, align 8
  %102 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %101, i64 7
  %103 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %102, align 8
  call void %103(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %43) #16
  %104 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %62) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %10) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %42) #16
  ret void
}

declare void @_ZN4base8internal11ThreadGroup5StartEv(%"class.base::internal::ThreadGroup"*) local_unnamed_addr #1

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4base12FeatureParamINS_14WakeUpStrategyELb1EE3GetEv(%"struct.base::FeatureParam"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #16
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 0
  %9 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load %"struct.base::Feature"*, %"struct.base::Feature"** %8, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #16
  %12 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i64 @strlen(i8* %13) #16
  %15 = icmp ugt i64 %14, -17
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %17) #17
  unreachable

18:                                               ; preds = %1
  %19 = icmp ult i64 %14, 23
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  %21 = add nuw i64 %14, 16
  %22 = and i64 %21, -16
  %23 = tail call i8* @_Znwm(i64 %22) #18
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %23, i8** %24, align 8
  %25 = or i64 %22, -9223372036854775808
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %14, i64* %27, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %34

29:                                               ; preds = %18
  %30 = trunc i64 %14 to i8
  %31 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  store i8 %30, i8* %32, align 1
  %33 = icmp eq i64 %14, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29, %20
  %35 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %31, %29 ], [ %28, %20 ]
  %36 = phi i8* [ %11, %29 ], [ %23, %20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* align 1 %13, i64 %14, i1 false) #16
  br label %37

37:                                               ; preds = %29, %34
  %38 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %31, %29 ], [ %35, %34 ]
  %39 = phi i8* [ %11, %29 ], [ %36, %34 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 %14
  store i8 0, i8* %40, align 1
  call void @_ZN4base32GetFieldTrialParamValueByFeatureERKNS_7FeatureERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %2, %"struct.base::Feature"* dereferenceable(16) %10, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #16
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %46) #18
  br label %47

47:                                               ; preds = %37, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #16
  %48 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  %52 = load i64, i64* %7, align 8
  %53 = zext i8 %50 to i64
  %54 = select i1 %51, i64 %52, i64 %53
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %62, label %56

56:                                               ; preds = %47
  %57 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %92, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 3
  br label %64

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 2
  br label %132

64:                                               ; preds = %86, %60
  %65 = phi i64 [ %58, %60 ], [ %83, %86 ]
  %66 = phi i64 [ %52, %60 ], [ %88, %86 ]
  %67 = phi i8 [ %50, %60 ], [ %87, %86 ]
  %68 = phi i64 [ 0, %60 ], [ %84, %86 ]
  %69 = load %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"*, %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"** %61, align 8
  %70 = getelementptr inbounds %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option", %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"* %69, i64 %68, i32 1
  %71 = load i8*, i8** %70, align 8
  %72 = call i64 @strlen(i8* %71) #16
  %73 = icmp slt i8 %67, 0
  %74 = zext i8 %67 to i64
  %75 = select i1 %73, i64 %66, i64 %74
  %76 = icmp eq i64 %72, %75
  br i1 %76, label %77, label %82

77:                                               ; preds = %64
  %78 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %2, i64 0, i64 -1, i8* %71, i64 %72) #16
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %89, label %80

80:                                               ; preds = %77
  %81 = load i64, i64* %57, align 8
  br label %82

82:                                               ; preds = %80, %64
  %83 = phi i64 [ %81, %80 ], [ %65, %64 ]
  %84 = add nuw i64 %68, 1
  %85 = icmp ult i64 %84, %83
  br i1 %85, label %86, label %92

86:                                               ; preds = %82
  %87 = load i8, i8* %49, align 1
  %88 = load i64, i64* %7, align 8
  br label %64

89:                                               ; preds = %77
  %90 = load %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"*, %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"** %61, align 8
  %91 = getelementptr inbounds %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option", %"struct.base::FeatureParam<base::WakeUpStrategy, true>::Option"* %90, i64 %68, i32 0
  br label %132

92:                                               ; preds = %82, %56
  %93 = load %"struct.base::Feature"*, %"struct.base::Feature"** %8, align 8
  %94 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %94) #16
  %95 = load i8*, i8** %12, align 8
  %96 = call i64 @strlen(i8* %95) #16
  %97 = icmp ugt i64 %96, -17
  br i1 %97, label %98, label %100

98:                                               ; preds = %92
  %99 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %99) #17
  unreachable

100:                                              ; preds = %92
  %101 = icmp ult i64 %96, 23
  br i1 %101, label %111, label %102

102:                                              ; preds = %100
  %103 = add nuw i64 %96, 16
  %104 = and i64 %103, -16
  %105 = call i8* @_Znwm(i64 %104) #18
  %106 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %105, i8** %106, align 8
  %107 = or i64 %104, -9223372036854775808
  %108 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %96, i64* %109, align 8
  %110 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %116

111:                                              ; preds = %100
  %112 = trunc i64 %96 to i8
  %113 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %114 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %113, i64 0, i32 1, i32 0
  store i8 %112, i8* %114, align 1
  %115 = icmp eq i64 %96, 0
  br i1 %115, label %119, label %116

116:                                              ; preds = %111, %102
  %117 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %113, %111 ], [ %110, %102 ]
  %118 = phi i8* [ %94, %111 ], [ %105, %102 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %118, i8* align 1 %95, i64 %96, i1 false) #16
  br label %119

119:                                              ; preds = %111, %116
  %120 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %113, %111 ], [ %117, %116 ]
  %121 = phi i8* [ %94, %111 ], [ %118, %116 ]
  %122 = getelementptr inbounds i8, i8* %121, i64 %96
  store i8 0, i8* %122, align 1
  %123 = getelementptr inbounds %"struct.base::FeatureParam", %"struct.base::FeatureParam"* %0, i64 0, i32 2
  %124 = load i32, i32* %123, align 8
  call void @_ZN4base19LogInvalidEnumValueERKNS_7FeatureERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_i(%"struct.base::Feature"* dereferenceable(16) %93, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2, i32 %124) #16
  %125 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %120, i64 0, i32 1, i32 0
  %126 = load i8, i8* %125, align 1
  %127 = icmp slt i8 %126, 0
  br i1 %127, label %128, label %131

128:                                              ; preds = %119
  %129 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load i8*, i8** %129, align 8
  call void @_ZdlPv(i8* %130) #18
  br label %131

131:                                              ; preds = %119, %128
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %94) #16
  br label %132

132:                                              ; preds = %89, %131, %62
  %133 = phi i32* [ %63, %62 ], [ %123, %131 ], [ %91, %89 ]
  %134 = load i32, i32* %133, align 8
  %135 = load i8, i8* %49, align 1
  %136 = icmp slt i8 %135, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %132
  %138 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %138) #18
  br label %139

139:                                              ; preds = %132, %137
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #16
  ret i32 %134
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor9FlushImplEv(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0)
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %3 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %2, align 8
  %4 = icmp eq %"struct.std::__1::pair"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.std::__1::pair"* %3 to i64
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %8 = bitcast %"struct.std::__1::pair"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %10 = load %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"*, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %9, align 8
  %11 = icmp ne %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %10, null
  %12 = bitcast %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %10 to %"struct.std::__1::pair"*
  %13 = icmp eq %"struct.std::__1::pair"* %3, %12
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source", %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %10, i64 0, i32 1
  store i8 0, i8* %16, align 8
  br label %19

17:                                               ; preds = %5
  %18 = bitcast %"struct.std::__1::pair"* %3 to i8*
  tail call void @_ZdlPv(i8* %18) #18
  br label %19

19:                                               ; preds = %1, %15, %17
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %20, i64 0, i32 0, i32 0
  %22 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %21, align 8
  %23 = icmp eq %class.scoped_refptr.15* %22, null
  br i1 %23, label %54, label %24

24:                                               ; preds = %19
  %25 = bitcast %class.scoped_refptr.15* %22 to i8*
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %27 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %26, align 8
  %28 = icmp eq %class.scoped_refptr.15* %27, %22
  br i1 %28, label %52, label %29

29:                                               ; preds = %24, %47
  %30 = phi %class.scoped_refptr.15* [ %31, %47 ], [ %27, %24 ]
  %31 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %30, i64 -1
  %32 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %31, i64 0, i32 0
  %33 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %32, align 8
  %34 = icmp eq %"class.base::internal::WorkerThread"* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %33, i64 0, i32 1
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %36, i64 -2
  %42 = bitcast %"class.base::RefCountedThreadSafe.57"* %41 to %"class.base::internal::WorkerThread"*
  %43 = bitcast %"class.base::RefCountedThreadSafe.57"* %41 to void (%"class.base::internal::WorkerThread"*)***
  %44 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %44, i64 3
  %46 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %45, align 8
  tail call void %46(%"class.base::internal::WorkerThread"* nonnull %42) #16
  br label %47

47:                                               ; preds = %40, %35, %29
  %48 = icmp eq %class.scoped_refptr.15* %31, %22
  br i1 %48, label %49, label %29

49:                                               ; preds = %47
  %50 = bitcast %"class.std::__1::vector.13"* %20 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %24
  %53 = phi i8* [ %51, %49 ], [ %25, %24 ]
  store %class.scoped_refptr.15* %22, %class.scoped_refptr.15** %26, align 8
  tail call void @_ZdlPv(i8* %53) #18
  br label %54

54:                                               ; preds = %52, %19
  %55 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 0, i32 0
  %56 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %55, align 8
  %57 = icmp eq %"class.base::internal::WorkerThread"* %56, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %56, i64 0, i32 1
  %60 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = atomicrmw sub i32* %60, i32 1 acq_rel
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %63, label %70

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %59, i64 -2
  %65 = bitcast %"class.base::RefCountedThreadSafe.57"* %64 to %"class.base::internal::WorkerThread"*
  %66 = bitcast %"class.base::RefCountedThreadSafe.57"* %64 to void (%"class.base::internal::WorkerThread"*)***
  %67 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %67, i64 3
  %69 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %68, align 8
  tail call void %69(%"class.base::internal::WorkerThread"* nonnull %65) #16
  br label %70

70:                                               ; preds = %54, %58, %63
  %71 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1
  %72 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %71, i64 0, i32 0, i32 0
  %73 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %72, align 8
  %74 = icmp eq %class.scoped_refptr.15* %73, null
  br i1 %74, label %105, label %75

75:                                               ; preds = %70
  %76 = bitcast %class.scoped_refptr.15* %73 to i8*
  %77 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1, i32 0, i32 1
  %78 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %77, align 8
  %79 = icmp eq %class.scoped_refptr.15* %78, %73
  br i1 %79, label %103, label %80

80:                                               ; preds = %75, %98
  %81 = phi %class.scoped_refptr.15* [ %82, %98 ], [ %78, %75 ]
  %82 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -1
  %83 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 0, i32 0
  %84 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %83, align 8
  %85 = icmp eq %"class.base::internal::WorkerThread"* %84, null
  br i1 %85, label %98, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %84, i64 0, i32 1
  %88 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw sub i32* %88, i32 1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %98

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %87, i64 -2
  %93 = bitcast %"class.base::RefCountedThreadSafe.57"* %92 to %"class.base::internal::WorkerThread"*
  %94 = bitcast %"class.base::RefCountedThreadSafe.57"* %92 to void (%"class.base::internal::WorkerThread"*)***
  %95 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %94, align 8
  %96 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %95, i64 3
  %97 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %96, align 8
  tail call void %97(%"class.base::internal::WorkerThread"* nonnull %93) #16
  br label %98

98:                                               ; preds = %91, %86, %80
  %99 = icmp eq %class.scoped_refptr.15* %82, %73
  br i1 %99, label %100, label %80

100:                                              ; preds = %98
  %101 = bitcast %"class.std::__1::vector.13"* %71 to i8**
  %102 = load i8*, i8** %101, align 8
  br label %103

103:                                              ; preds = %100, %75
  %104 = phi i8* [ %102, %100 ], [ %76, %75 ]
  store %class.scoped_refptr.15* %73, %class.scoped_refptr.15** %77, align 8
  tail call void @_ZdlPv(i8* %104) #18
  br label %105

105:                                              ; preds = %103, %70
  %106 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 0, i32 0
  %107 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %106, align 8
  %108 = icmp eq %"class.base::internal::WorkerThread"* %107, null
  br i1 %108, label %121, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %107, i64 0, i32 1
  %111 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = atomicrmw sub i32* %111, i32 1 acq_rel
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %121

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %110, i64 -2
  %116 = bitcast %"class.base::RefCountedThreadSafe.57"* %115 to %"class.base::internal::WorkerThread"*
  %117 = bitcast %"class.base::RefCountedThreadSafe.57"* %115 to void (%"class.base::internal::WorkerThread"*)***
  %118 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %117, align 8
  %119 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %118, i64 3
  %120 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %119, align 8
  tail call void %120(%"class.base::internal::WorkerThread"* nonnull %116) #16
  br label %121

121:                                              ; preds = %105, %109, %114
  %122 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %122) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImplD2Ev(%"class.base::internal::ThreadGroupImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4base8internal15ThreadGroupImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21
  tail call void @_ZN4base8internal17TrackedRefFactoryINS0_15ThreadGroupImplEED2Ev(%"class.base::internal::TrackedRefFactory.48"* %3) #16
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %8) #16
  store i8 0, i8* %4, align 8
  br label %9

9:                                                ; preds = %1, %7
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %11 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %10, align 8
  store %"class.base::ConditionVariable"* null, %"class.base::ConditionVariable"** %10, align 8
  %12 = icmp eq %"class.base::ConditionVariable"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  tail call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* nonnull %11) #16
  %14 = bitcast %"class.base::ConditionVariable"* %11 to i8*
  tail call void @_ZdlPv(i8* %14) #18
  br label %15

15:                                               ; preds = %9, %13
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %17 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %16, align 8
  store %"class.base::ConditionVariable"* null, %"class.base::ConditionVariable"** %16, align 8
  %18 = icmp eq %"class.base::ConditionVariable"* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  tail call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* nonnull %17) #16
  %20 = bitcast %"class.base::ConditionVariable"* %17 to i8*
  tail call void @_ZdlPv(i8* %20) #18
  br label %21

21:                                               ; preds = %15, %19
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  tail call void @_ZN4base8internal17WorkerThreadStackD1Ev(%"class.base::internal::WorkerThreadStack"* %22) #16
  %23 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %23, i64 0, i32 0, i32 0
  %25 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %24, align 8
  %26 = icmp eq %class.scoped_refptr.15* %25, null
  br i1 %26, label %57, label %27

27:                                               ; preds = %21
  %28 = bitcast %class.scoped_refptr.15* %25 to i8*
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %30 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %29, align 8
  %31 = icmp eq %class.scoped_refptr.15* %30, %25
  br i1 %31, label %55, label %32

32:                                               ; preds = %27, %50
  %33 = phi %class.scoped_refptr.15* [ %34, %50 ], [ %30, %27 ]
  %34 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %33, i64 -1
  %35 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %34, i64 0, i32 0
  %36 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %35, align 8
  %37 = icmp eq %"class.base::internal::WorkerThread"* %36, null
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %36, i64 0, i32 1
  %40 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw sub i32* %40, i32 1 acq_rel
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %50

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %39, i64 -2
  %45 = bitcast %"class.base::RefCountedThreadSafe.57"* %44 to %"class.base::internal::WorkerThread"*
  %46 = bitcast %"class.base::RefCountedThreadSafe.57"* %44 to void (%"class.base::internal::WorkerThread"*)***
  %47 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %47, i64 3
  %49 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %48, align 8
  tail call void %49(%"class.base::internal::WorkerThread"* nonnull %45) #16
  br label %50

50:                                               ; preds = %43, %38, %32
  %51 = icmp eq %class.scoped_refptr.15* %34, %25
  br i1 %51, label %52, label %32

52:                                               ; preds = %50
  %53 = bitcast %"class.std::__1::vector.13"* %23 to i8**
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %52, %27
  %56 = phi i8* [ %54, %52 ], [ %28, %27 ]
  store %class.scoped_refptr.15* %25, %class.scoped_refptr.15** %29, align 8
  tail call void @_ZdlPv(i8* %56) #18
  br label %57

57:                                               ; preds = %21, %55
  %58 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 2
  %59 = bitcast %"class.std::__1::basic_string"* %58 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  tail call void @_ZdlPv(i8* %65) #18
  br label %66

66:                                               ; preds = %57, %63
  %67 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 3, i32 0
  %68 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %67, align 8
  %69 = icmp eq %"class.base::SequencedTaskRunner"* %68, null
  br i1 %69, label %78, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %68, i64 0, i32 0, i32 1
  %72 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw sub i32* %72, i32 1 acq_rel
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %71, i64 -2
  %77 = bitcast %"class.base::RefCountedThreadSafe"* %76 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %77) #16
  br label %78

78:                                               ; preds = %66, %70, %75
  %79 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11ThreadGroupD2Ev(%"class.base::internal::ThreadGroup"* %79) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal17TrackedRefFactoryINS0_15ThreadGroupImplEED2Ev(%"class.base::internal::TrackedRefFactory.48"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %6) #16
  store i8 0, i8* %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"* %8, i32 0, i32 1) #16
  store i8 1, i8* %2, align 8
  %9 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %32, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %14 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %13, align 8
  %15 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %14, null
  br i1 %15, label %28, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %13, align 8
  %22 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %21, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %20
  tail call void @llvm.trap() #16
  unreachable

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %21, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %27) #16
  br label %28

28:                                               ; preds = %12, %16, %26
  store i8 0, i8* %9, align 8
  %29 = load i8, i8* %2, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %32, !prof !3

31:                                               ; preds = %28
  tail call void @llvm.trap() #16
  unreachable

32:                                               ; preds = %7, %28
  notail call void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"* %8) #16
  %33 = load i8, i8* %9, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %52, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %37 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %36, align 8
  %38 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %37, null
  br i1 %38, label %51, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %37, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw sub i32* %40, i32 1 acq_rel
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %51

43:                                               ; preds = %39
  %44 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %36, align 8
  %45 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %44, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %49, !prof !3

48:                                               ; preds = %43
  tail call void @llvm.trap() #16
  unreachable

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %44, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %50) #16
  br label %51

51:                                               ; preds = %49, %39, %35
  store i8 0, i8* %9, align 8
  br label %52

52:                                               ; preds = %32, %51
  %53 = load i8, i8* %2, align 8, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  tail call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %8) #16
  store i8 0, i8* %2, align 8
  br label %56

56:                                               ; preds = %52, %55
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal17WorkerThreadStackD1Ev(%"class.base::internal::WorkerThreadStack"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal11ThreadGroupD2Ev(%"class.base::internal::ThreadGroup"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImplD0Ev(%"class.base::internal::ThreadGroupImpl"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4base8internal15ThreadGroupImplD2Ev(%"class.base::internal::ThreadGroupImpl"* %0) #16
  %2 = bitcast %"class.base::internal::ThreadGroupImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl13UpdateSortKeyENS0_10TaskSource11TransactionE(%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::TaskSource::Transaction"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %4 = alloca %"class.base::internal::TaskSource::Transaction", align 8
  %5 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %5) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 232, i1 false)
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %6) #16
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 2
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5
  %10 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %9, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 1, i32 0
  %13 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %10, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %12, align 8
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %16 = ptrtoint %"class.base::StackVector"* %9 to i64
  %17 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %15 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.std::__1::pair"** %18 to i64*
  %20 = bitcast %"class.std::__1::vector.115"* %14 to i64*
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %22 = bitcast %"struct.std::__1::pair"** %21 to i64*
  store i8 1, i8* %11, align 8
  %23 = ptrtoint i8* %11 to i64
  store i64 %16, i64* %20, align 8
  store i64 %16, i64* %22, align 8
  store i64 %23, i64* %19, align 8
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  call void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"* nonnull %4, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8) %1) #16
  call void @_ZN4base8internal11ThreadGroup17UpdateSortKeyImplEPNS1_26BaseScopedCommandsExecutorENS0_10TaskSource11TransactionE(%"class.base::internal::ThreadGroup"* %24, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %6, %"class.base::internal::TaskSource::Transaction"* nonnull %4) #16
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* nonnull %4) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %3) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %5) #16
  ret void
}

declare void @_ZN4base8internal11ThreadGroup17UpdateSortKeyImplEPNS1_26BaseScopedCommandsExecutorENS0_10TaskSource11TransactionE(%"class.base::internal::ThreadGroup"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*, %"class.base::internal::TaskSource::Transaction"*) local_unnamed_addr #1

declare void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl30PushTaskSourceAndWakeUpWorkersENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::ThreadGroupImpl"*, %"struct.base::internal::TransactionWithRegisteredTaskSource"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %4 = alloca %"struct.base::internal::TransactionWithRegisteredTaskSource", align 8
  %5 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %5) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 232, i1 false)
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %6) #16
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 2
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5
  %10 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %9, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 1, i32 0
  %13 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %10, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %12, align 8
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %16 = ptrtoint %"class.base::StackVector"* %9 to i64
  %17 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %15 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.std::__1::pair"** %18 to i64*
  %20 = bitcast %"class.std::__1::vector.115"* %14 to i64*
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %22 = bitcast %"struct.std::__1::pair"** %21 to i64*
  store i8 1, i8* %11, align 8
  %23 = ptrtoint i8* %11 to i64
  store i64 %16, i64* %20, align 8
  store i64 %16, i64* %22, align 8
  store i64 %23, i64* %19, align 8
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %25 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %4, i64 0, i32 0
  %26 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %1, i64 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %25, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16) %26) #16
  %27 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %1, i64 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"* %27, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8) %28) #16
  call void @_ZN4base8internal11ThreadGroup34PushTaskSourceAndWakeUpWorkersImplEPNS1_26BaseScopedCommandsExecutorENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::ThreadGroup"* %24, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %6, %"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull %4) #16
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %27) #16
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %25) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %3) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %5) #16
  ret void
}

declare void @_ZN4base8internal11ThreadGroup34PushTaskSourceAndWakeUpWorkersImplEPNS1_26BaseScopedCommandsExecutorENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::ThreadGroup"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*, %"struct.base::internal::TransactionWithRegisteredTaskSource"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl41GetMaxConcurrentNonBlockedTasksDeprecatedEv(%"class.base::internal::ThreadGroupImpl"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl28WaitForWorkersIdleForTestingEm(%"class.base::internal::ThreadGroupImpl"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %4 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #16
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 14
  %11 = load i8, i8* %10, align 1, !range !2
  store i8 1, i8* %10, align 1
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %14 = bitcast %"class.base::internal::WorkerThread"*** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::internal::WorkerThreadStack"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, %1
  br i1 %20, label %21, label %30

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %23

23:                                               ; preds = %23, %21
  %24 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %22, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %24) #16
  %25 = load i64, i64* %14, align 8
  %26 = load i64, i64* %16, align 8
  %27 = sub i64 %25, %26
  %28 = ashr exact i64 %27, 3
  %29 = icmp ult i64 %28, %1
  br i1 %29, label %23, label %30

30:                                               ; preds = %23, %9
  store i8 %11, i8* %10, align 1
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl40WaitForWorkersIdleLockRequiredForTestingEm(%"class.base::internal::ThreadGroupImpl"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 14
  %4 = load i8, i8* %3, align 1, !range !2
  store i8 1, i8* %3, align 1
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %7 = bitcast %"class.base::internal::WorkerThread"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::internal::WorkerThreadStack"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp ult i64 %12, %1
  br i1 %13, label %14, label %23

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %16

16:                                               ; preds = %14, %16
  %17 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %15, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %17) #16
  %18 = load i64, i64* %7, align 8
  %19 = load i64, i64* %9, align 8
  %20 = sub i64 %18, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp ult i64 %21, %1
  br i1 %22, label %16, label %23

23:                                               ; preds = %16, %2
  %24 = icmp eq i8* %3, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  store i8 %4, i8* %3, align 1
  br label %26

26:                                               ; preds = %23, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl31WaitForAllWorkersIdleForTestingEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #16
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %11 = bitcast %class.scoped_refptr.15** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.13"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 14
  %18 = load i8, i8* %17, align 1, !range !2
  store i8 1, i8* %17, align 1
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %21 = bitcast %"class.base::internal::WorkerThread"*** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.base::internal::WorkerThreadStack"* %19 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 3
  %27 = icmp ult i64 %26, %16
  br i1 %27, label %28, label %37

28:                                               ; preds = %8
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %30

30:                                               ; preds = %30, %28
  %31 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %29, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %31) #16
  %32 = load i64, i64* %21, align 8
  %33 = load i64, i64* %23, align 8
  %34 = sub i64 %32, %33
  %35 = ashr exact i64 %34, 3
  %36 = icmp ult i64 %35, %16
  br i1 %36, label %30, label %37

37:                                               ; preds = %30, %8
  store i8 %18, i8* %17, align 1
  %38 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl33WaitForWorkersCleanedUpForTestingEm(%"class.base::internal::ThreadGroupImpl"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %4 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #16
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 16
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %11, align 8
  %13 = icmp eq %"class.base::ConditionVariable"* %12, null
  br i1 %13, label %14, label %24

14:                                               ; preds = %9
  %15 = tail call i8* @_Znwm(i64 64) #18
  %16 = bitcast i8* %15 to %"class.base::ConditionVariable"*
  %17 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0
  tail call void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"* nonnull %16, %"class.base::Lock"* %17) #16
  %18 = ptrtoint i8* %15 to i64
  %19 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %11, align 8
  %20 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 %18, i64* %20, align 8
  %21 = icmp eq %"class.base::ConditionVariable"* %19, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %14
  tail call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* nonnull %19) #16
  %23 = bitcast %"class.base::ConditionVariable"* %19 to i8*
  tail call void @_ZdlPv(i8* %23) #18
  br label %24

24:                                               ; preds = %9, %14, %22
  %25 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 15
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %28, label %32

28:                                               ; preds = %24, %28
  %29 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %11, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %29) #16
  %30 = load i64, i64* %25, align 8
  %31 = icmp ult i64 %30, %1
  br i1 %31, label %28, label %32

32:                                               ; preds = %28, %24
  store i64 0, i64* %25, align 8
  %33 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #16
  ret void
}

declare void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl14JoinForTestingEv(%"class.base::internal::ThreadGroupImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.13", align 8
  %3 = bitcast %"class.std::__1::vector.13"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #16
  %4 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %2, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %2, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #16
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #16
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !7

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %6, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #16
  br label %12

12:                                               ; preds = %1, %10
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  tail call void @_ZN4base8internal13PriorityQueue41EnableFlushTaskSourcesOnDestroyForTestingEv(%"class.base::internal::PriorityQueue"* %13) #16
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 17
  store i8 1, i8* %14, align 8
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 14
  store i8 1, i8* %15, align 1
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %17 = icmp eq %"class.std::__1::vector.13"* %2, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %16, i64 0, i32 0, i32 0
  %20 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %21, align 8
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_(%"class.std::__1::vector.13"* nonnull %2, %class.scoped_refptr.15* %20, %class.scoped_refptr.15* %22) #16
  br label %23

23:                                               ; preds = %12, %18
  %24 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #16
  %25 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %4, align 8
  %26 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %5, align 8
  %27 = icmp eq %class.scoped_refptr.15* %25, %26
  br i1 %27, label %28, label %93

28:                                               ; preds = %93, %23
  %29 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31, !prof !7

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %6, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %32) #16
  br label %33

33:                                               ; preds = %28, %31
  %34 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %16, i64 0, i32 0, i32 0
  %35 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %34, align 8
  %36 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %37 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %36, align 8
  %38 = icmp eq %class.scoped_refptr.15* %37, %35
  br i1 %38, label %59, label %39

39:                                               ; preds = %33, %57
  %40 = phi %class.scoped_refptr.15* [ %41, %57 ], [ %37, %33 ]
  %41 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %40, i64 -1
  %42 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %41, i64 0, i32 0
  %43 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %42, align 8
  %44 = icmp eq %"class.base::internal::WorkerThread"* %43, null
  br i1 %44, label %57, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %43, i64 0, i32 1
  %47 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw sub i32* %47, i32 1 acq_rel
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %57

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %46, i64 -2
  %52 = bitcast %"class.base::RefCountedThreadSafe.57"* %51 to %"class.base::internal::WorkerThread"*
  %53 = bitcast %"class.base::RefCountedThreadSafe.57"* %51 to void (%"class.base::internal::WorkerThread"*)***
  %54 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %54, i64 3
  %56 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %55, align 8
  call void %56(%"class.base::internal::WorkerThread"* nonnull %52) #16
  br label %57

57:                                               ; preds = %50, %45, %39
  %58 = icmp eq %class.scoped_refptr.15* %41, %35
  br i1 %58, label %59, label %39

59:                                               ; preds = %57, %33
  store %class.scoped_refptr.15* %35, %class.scoped_refptr.15** %36, align 8
  %60 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #16
  %61 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %4, align 8
  %62 = icmp eq %class.scoped_refptr.15* %61, null
  br i1 %62, label %92, label %63

63:                                               ; preds = %59
  %64 = bitcast %class.scoped_refptr.15* %61 to i8*
  %65 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %5, align 8
  %66 = icmp eq %class.scoped_refptr.15* %65, %61
  br i1 %66, label %90, label %67

67:                                               ; preds = %63, %85
  %68 = phi %class.scoped_refptr.15* [ %69, %85 ], [ %65, %63 ]
  %69 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %68, i64 -1
  %70 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %69, i64 0, i32 0
  %71 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %70, align 8
  %72 = icmp eq %"class.base::internal::WorkerThread"* %71, null
  br i1 %72, label %85, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %71, i64 0, i32 1
  %75 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw sub i32* %75, i32 1 acq_rel
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %85

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %74, i64 -2
  %80 = bitcast %"class.base::RefCountedThreadSafe.57"* %79 to %"class.base::internal::WorkerThread"*
  %81 = bitcast %"class.base::RefCountedThreadSafe.57"* %79 to void (%"class.base::internal::WorkerThread"*)***
  %82 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %82, i64 3
  %84 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %83, align 8
  call void %84(%"class.base::internal::WorkerThread"* nonnull %80) #16
  br label %85

85:                                               ; preds = %78, %73, %67
  %86 = icmp eq %class.scoped_refptr.15* %69, %61
  br i1 %86, label %87, label %67

87:                                               ; preds = %85
  %88 = bitcast %"class.std::__1::vector.13"* %2 to i8**
  %89 = load i8*, i8** %88, align 8
  br label %90

90:                                               ; preds = %87, %63
  %91 = phi i8* [ %89, %87 ], [ %64, %63 ]
  store %class.scoped_refptr.15* %61, %class.scoped_refptr.15** %5, align 8
  call void @_ZdlPv(i8* %91) #18
  br label %92

92:                                               ; preds = %59, %90
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #16
  ret void

93:                                               ; preds = %23, %93
  %94 = phi %class.scoped_refptr.15* [ %97, %93 ], [ %25, %23 ]
  %95 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %94, i64 0, i32 0
  %96 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %95, align 8
  call void @_ZN4base8internal12WorkerThread14JoinForTestingEv(%"class.base::internal::WorkerThread"* %96) #16
  %97 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %94, i64 1
  %98 = icmp eq %class.scoped_refptr.15* %97, %26
  br i1 %98, label %28, label %93
}

declare void @_ZN4base8internal13PriorityQueue41EnableFlushTaskSourcesOnDestroyForTestingEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #1

declare void @_ZN4base8internal12WorkerThread14JoinForTestingEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl25NumberOfWorkersForTestingEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #16
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %11 = bitcast %class.scoped_refptr.15** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.13"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #16
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl21GetMaxTasksForTestingEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #16
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %10 = load i64, i64* %9, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #16
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl31GetMaxBestEffortTasksForTestingEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #16
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %10 = load i64, i64* %9, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #16
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl29NumberOfIdleWorkersForTestingEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #16
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %11 = bitcast %"class.base::internal::WorkerThread"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.base::internal::WorkerThreadStack"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #16
  ret i64 %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplC2ENS0_10TrackedRefIS1_EE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture, %"class.base::internal::TrackedRef.54"* nocapture) unnamed_addr #6 align 2 {
  %3 = bitcast %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 2, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4
  %9 = bitcast %"class.base::internal::TrackedRef.54"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::internal::TrackedRef.54"* %8 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 1
  %13 = getelementptr inbounds %"class.base::internal::TrackedRef.54", %"class.base::internal::TrackedRef.54"* %1, i64 0, i32 1
  %14 = bitcast %"class.base::internal::TrackedRefFactory.48"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::internal::TrackedRefFactory.48"** %12 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::TrackedRefFactory.48"* null, %"class.base::internal::TrackedRefFactory.48"** %13, align 8
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 5
  store i8 0, i8* %17, align 8
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 6
  store i8 0, i8* %18, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl14GetThreadLabelEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readnone) unnamed_addr #7 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl11OnMainEntryEPKNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::WorkerThread"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #16
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %6 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %6, i64 0, i32 2
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  br label %17

15:                                               ; preds = %2
  %16 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi i8* [ %14, %12 ], [ %16, %15 ]
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %18) #16
  call void @_ZN4base14PlatformThread7SetNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #16
  %19 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %25) #18
  br label %26

26:                                               ; preds = %17, %23
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #16
  %27 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %5, align 8
  %28 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %27, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup19BindToCurrentThreadEv(%"class.base::internal::ThreadGroup"* %28) #16
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 1
  call void @_ZN4base8internal35SetBlockingObserverForCurrentThreadEPNS0_16BlockingObserverE(%"class.base::internal::BlockingObserver"* %29) #16
  %30 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %5, align 8
  %31 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %30, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %30, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %35) #16
  br label %36

36:                                               ; preds = %26, %34
  ret void
}

declare void @_ZN4base14PlatformThread7SetNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

declare void @_ZN4base8internal11ThreadGroup19BindToCurrentThreadEv(%"class.base::internal::ThreadGroup"*) local_unnamed_addr #1

declare void @_ZN4base8internal35SetBlockingObserverForCurrentThreadEPNS0_16BlockingObserverE(%"class.base::internal::BlockingObserver"*) local_unnamed_addr #1

declare void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl7GetWorkEPNS0_12WorkerThreadE(%"class.base::internal::RegisteredTaskSource"* noalias sret, %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture, %"class.base::internal::WorkerThread"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %5 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %6 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %7 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %7) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 232, i1 false)
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %1, i64 0, i32 4, i32 0
  %9 = bitcast %"class.base::internal::ThreadGroupImpl"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %11) #16
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 1
  %13 = bitcast %"class.base::internal::ThreadGroupImpl"** %12 to i64*
  store i64 %10, i64* %13, align 8
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5
  %16 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 1, i32 0
  %19 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %16, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %18, align 8
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 2
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %22 = ptrtoint %"class.base::StackVector"* %15 to i64
  %23 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %21 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"struct.std::__1::pair"** %24 to i64*
  %26 = bitcast %"class.std::__1::vector.115"* %20 to i64*
  %27 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %4, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %28 = bitcast %"struct.std::__1::pair"** %27 to i64*
  store i8 1, i8* %17, align 8
  %29 = ptrtoint i8* %17 to i64
  store i64 %22, i64* %26, align 8
  store i64 %22, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %31 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %30, i64 0, i32 0, i32 3
  %32 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %32) #16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35, !prof !7

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %36) #16
  br label %37

37:                                               ; preds = %3, %35
  %38 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %39 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %38, i64 0, i32 1, i32 6
  %40 = load i8, i8* %39, align 4, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %38, i64 0, i32 1, i32 5
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %42
  %47 = bitcast %"class.base::internal::ThreadGroupImpl"* %38 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %48 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %48, i64 7
  %50 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %49, align 8
  call void %50(%"class.base::internal::ThreadGroupImpl"* %38, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %11) #16
  %51 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %52 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %51, i64 0, i32 0, i32 3
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor19FlushWorkerCreationEPNS0_11CheckedLockE(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %4, %"class.base::internal::CheckedLock"* %52)
  br label %53

53:                                               ; preds = %42, %37, %46
  %54 = call zeroext i1 @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl22CanGetWorkLockRequiredEPNS1_22ScopedCommandsExecutorEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %1, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %4, %"class.base::internal::WorkerThread"* %2)
  br i1 %54, label %56, label %55

55:                                               ; preds = %53
  call void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"* %0, i8* null) #16
  br label %160

56:                                               ; preds = %53
  %57 = bitcast %"class.base::internal::RegisteredTaskSource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #16
  %58 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %5, i64 0, i32 0, i32 0
  %59 = bitcast %"class.base::internal::RegisteredTaskSource"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 16, i1 false)
  call void @_ZN4base8internal20RegisteredTaskSourceC1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %5) #16
  %60 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %58, align 8
  %61 = icmp eq %"class.base::internal::TaskSource"* %60, null
  br i1 %61, label %62, label %105

62:                                               ; preds = %56
  %63 = bitcast %"class.base::internal::RegisteredTaskSource"* %6 to i8*
  %64 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %65 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 0, i32 6
  %66 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %65) #16
  br i1 %66, label %95, label %71

67:                                               ; preds = %90
  %68 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %69 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %68, i64 0, i32 0, i32 6
  %70 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %69) #16
  br i1 %70, label %95, label %71

71:                                               ; preds = %62, %67
  %72 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %73 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %72, i64 0, i32 0, i32 6
  %74 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %73) #16
  %75 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %74, i64 0, i32 0
  %76 = load i8, i8* %75, align 8
  %77 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %78 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %77, i64 0, i32 0, i32 1, i32 0
  %79 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %78, align 8
  %80 = call zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"* %79, i8 zeroext %76) #16
  br i1 %80, label %81, label %95

81:                                               ; preds = %71
  %82 = icmp eq i8 %76, 0
  %83 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  br i1 %82, label %84, label %90

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %83, i64 0, i32 8
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %83, i64 0, i32 6
  %88 = load i64, i64* %87, align 8
  %89 = icmp ult i64 %86, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %81, %84
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #16
  %91 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %83, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup24TakeRegisteredTaskSourceEPNS1_26BaseScopedCommandsExecutorE(%"class.base::internal::RegisteredTaskSource"* nonnull sret %6, %"class.base::internal::ThreadGroup"* %91, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %11) #16
  %92 = call dereferenceable(16) %"class.base::internal::RegisteredTaskSource"* @_ZN4base8internal20RegisteredTaskSourceaSEOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %5, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %6) #16
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %6) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #16
  %93 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %58, align 8
  %94 = icmp eq %"class.base::internal::TaskSource"* %93, null
  br i1 %94, label %67, label %105

95:                                               ; preds = %71, %67, %84, %62
  %96 = phi i8 [ -86, %62 ], [ %76, %71 ], [ %76, %67 ], [ 0, %84 ]
  %97 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %58, align 8
  %98 = icmp eq %"class.base::internal::TaskSource"* %97, null
  br i1 %98, label %99, label %105

99:                                               ; preds = %95
  %100 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %101 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %100, i64 0, i32 11
  call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %101, %"class.base::internal::WorkerThread"* %2) #16
  %102 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %103 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %102, i64 0, i32 12, i32 0, i32 0, i32 0
  %104 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %103, align 8
  call void @_ZN4base17ConditionVariable9BroadcastEv(%"class.base::ConditionVariable"* %104) #16
  call void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"* %0, i8* null) #16
  br label %159

105:                                              ; preds = %90, %56, %95
  %106 = phi i8 [ %96, %95 ], [ -86, %56 ], [ %76, %90 ]
  %107 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %107, align 8
  %108 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %109 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %108, i64 0, i32 7
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, 1
  store i64 %111, i64* %109, align 8
  %112 = icmp eq i8 %106, 0
  br i1 %112, label %113, label %117

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %108, i64 0, i32 8
  %115 = load i64, i64* %114, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %114, align 8
  br label %117

117:                                              ; preds = %113, %105
  %118 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %108, i64 0, i32 0, i32 6
  %119 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %118) #16
  br i1 %119, label %136, label %120

120:                                              ; preds = %117
  %121 = load i64, i64* %109, align 8
  %122 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %108, i64 0, i32 5
  %123 = load i64, i64* %122, align 8
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %136, label %125

125:                                              ; preds = %120
  %126 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %118) #16
  %127 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %126, i64 0, i32 0
  %128 = load i8, i8* %127, align 8
  %129 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %118) #16
  %130 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %129, i64 0, i32 1
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i16
  %133 = shl nuw i16 %132, 8
  %134 = zext i8 %128 to i16
  %135 = or i16 %133, %134
  br label %136

136:                                              ; preds = %117, %120, %125
  %137 = phi i16 [ %135, %125 ], [ 0, %120 ], [ 0, %117 ]
  %138 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %108, i64 0, i32 0, i32 7, i32 0
  %139 = bitcast %"struct.std::__1::__atomic_base"* %138 to i16*
  store atomic i16 %137, i16* %139 monotonic, align 2
  %140 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %1, i64 0, i32 3
  %141 = bitcast %"struct.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl::WriteWorkerReadAny"* %140 to i16*
  %142 = zext i8 %106 to i16
  %143 = shl nuw i16 %142, 8
  %144 = or i16 %143, 1
  store i16 %144, i16* %141, align 8
  %145 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %146 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %145, i64 0, i32 1, i32 6
  %147 = load i8, i8* %146, align 4, !range !2
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %158, label %149

149:                                              ; preds = %136
  %150 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %145, i64 0, i32 1, i32 5
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %149
  %154 = bitcast %"class.base::internal::ThreadGroupImpl"* %145 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %155 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %154, align 8
  %156 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %155, i64 7
  %157 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %156, align 8
  call void %157(%"class.base::internal::ThreadGroupImpl"* %145, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %11) #16
  br label %158

158:                                              ; preds = %149, %136, %153
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* %0, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %5) #16
  br label %159

159:                                              ; preds = %158, %99
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #16
  br label %160

160:                                              ; preds = %159, %55
  %161 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %32) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %4) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %7) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor19FlushWorkerCreationEPNS0_11CheckedLockE(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*, %"class.base::internal::CheckedLock"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %4, align 8
  %6 = icmp eq %"class.base::internal::WorkerThread"* %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 0, i32 0
  %9 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %8, align 8
  %10 = icmp eq %"class.base::internal::WorkerThread"* %9, null
  br i1 %10, label %105, label %11

11:                                               ; preds = %7, %2
  %12 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %12) #16
  tail call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor9FlushImplEv(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0)
  %14 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %3 to i64*
  %15 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %4, align 8
  store i64 0, i64* %14, align 8
  %16 = icmp eq %"class.base::internal::WorkerThread"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %15, i64 0, i32 1
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %18, i64 -2
  %24 = bitcast %"class.base::RefCountedThreadSafe.57"* %23 to %"class.base::internal::WorkerThread"*
  %25 = bitcast %"class.base::RefCountedThreadSafe.57"* %23 to void (%"class.base::internal::WorkerThread"*)***
  %26 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %26, i64 3
  %28 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %27, align 8
  tail call void %28(%"class.base::internal::WorkerThread"* nonnull %24) #16
  br label %29

29:                                               ; preds = %22, %17, %11
  %30 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  %31 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %30, align 8
  %32 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1, i32 0, i32 1
  %33 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %32, align 8
  %34 = icmp eq %class.scoped_refptr.15* %33, %31
  br i1 %34, label %55, label %35

35:                                               ; preds = %29, %53
  %36 = phi %class.scoped_refptr.15* [ %37, %53 ], [ %33, %29 ]
  %37 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %36, i64 -1
  %38 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %37, i64 0, i32 0
  %39 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %38, align 8
  %40 = icmp eq %"class.base::internal::WorkerThread"* %39, null
  br i1 %40, label %53, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %39, i64 0, i32 1
  %43 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw sub i32* %43, i32 1 acq_rel
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %53

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %42, i64 -2
  %48 = bitcast %"class.base::RefCountedThreadSafe.57"* %47 to %"class.base::internal::WorkerThread"*
  %49 = bitcast %"class.base::RefCountedThreadSafe.57"* %47 to void (%"class.base::internal::WorkerThread"*)***
  %50 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %50, i64 3
  %52 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %51, align 8
  tail call void %52(%"class.base::internal::WorkerThread"* nonnull %48) #16
  br label %53

53:                                               ; preds = %46, %41, %35
  %54 = icmp eq %class.scoped_refptr.15* %37, %31
  br i1 %54, label %55, label %35

55:                                               ; preds = %53, %29
  store %class.scoped_refptr.15* %31, %class.scoped_refptr.15** %32, align 8
  %56 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3
  %57 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %56 to i64*
  %58 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %56, i64 0, i32 0, i32 0
  %59 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %58, align 8
  store i64 0, i64* %57, align 8
  %60 = icmp eq %"class.base::internal::WorkerThread"* %59, null
  br i1 %60, label %73, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %59, i64 0, i32 1
  %63 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw sub i32* %63, i32 1 acq_rel
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %73

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %62, i64 -2
  %68 = bitcast %"class.base::RefCountedThreadSafe.57"* %67 to %"class.base::internal::WorkerThread"*
  %69 = bitcast %"class.base::RefCountedThreadSafe.57"* %67 to void (%"class.base::internal::WorkerThread"*)***
  %70 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %70, i64 3
  %72 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %71, align 8
  tail call void %72(%"class.base::internal::WorkerThread"* nonnull %68) #16
  br label %73

73:                                               ; preds = %66, %61, %55
  %74 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  %75 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %74, align 8
  %76 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %77 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %76, align 8
  %78 = icmp eq %class.scoped_refptr.15* %77, %75
  br i1 %78, label %99, label %79

79:                                               ; preds = %73, %97
  %80 = phi %class.scoped_refptr.15* [ %81, %97 ], [ %77, %73 ]
  %81 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %80, i64 -1
  %82 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 0, i32 0
  %83 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %82, align 8
  %84 = icmp eq %"class.base::internal::WorkerThread"* %83, null
  br i1 %84, label %97, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %83, i64 0, i32 1
  %87 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %86, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = atomicrmw sub i32* %87, i32 1 acq_rel
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %97

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %86, i64 -2
  %92 = bitcast %"class.base::RefCountedThreadSafe.57"* %91 to %"class.base::internal::WorkerThread"*
  %93 = bitcast %"class.base::RefCountedThreadSafe.57"* %91 to void (%"class.base::internal::WorkerThread"*)***
  %94 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %94, i64 3
  %96 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %95, align 8
  tail call void %96(%"class.base::internal::WorkerThread"* nonnull %92) #16
  br label %97

97:                                               ; preds = %90, %85, %79
  %98 = icmp eq %class.scoped_refptr.15* %81, %75
  br i1 %98, label %99, label %79

99:                                               ; preds = %97, %73
  store %class.scoped_refptr.15* %75, %class.scoped_refptr.15** %76, align 8
  %100 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 4
  store i8 0, i8* %100, align 8
  %101 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %12) #16
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %105, label %103, !prof !7

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %104) #16
  br label %105

105:                                              ; preds = %103, %99, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl22CanGetWorkLockRequiredEPNS1_22ScopedCommandsExecutorEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %5 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %5, i64 0, i32 11
  %7 = tail call %"class.base::internal::WorkerThread"* @_ZNK4base8internal17WorkerThreadStack4PeekEv(%"class.base::internal::WorkerThreadStack"* %6) #16
  %8 = icmp eq %"class.base::internal::WorkerThread"* %7, %2
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = tail call i64 @_ZNK4base8internal12WorkerThread15GetLastUsedTimeEv(%"class.base::internal::WorkerThread"* %2) #16
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %27, label %12

12:                                               ; preds = %9, %3
  %13 = tail call i64 @_ZNK4base8internal12WorkerThread15GetLastUsedTimeEv(%"class.base::internal::WorkerThread"* %2) #16
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %53, label %15

15:                                               ; preds = %12
  %16 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #16
  %17 = sub nsw i64 %16, %13
  %18 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %18, i64 0, i32 1, i32 1, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp slt i64 %17, %20
  br i1 %21, label %53, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %18, i64 0, i32 14
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 1
  br i1 %25, label %53, label %26

26:                                               ; preds = %22
  tail call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl19CleanupLockRequiredEPNS1_22ScopedCommandsExecutorEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, %"class.base::internal::WorkerThread"* %2)
  br label %53

27:                                               ; preds = %9
  %28 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %28, i64 0, i32 4
  %30 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %28, i64 0, i32 4, i32 0, i32 1
  %31 = bitcast %class.scoped_refptr.15** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector.13"* %29 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 3
  %37 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %28, i64 0, i32 11
  %38 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %28, i64 0, i32 11, i32 0, i32 0, i32 1
  %39 = bitcast %"class.base::internal::WorkerThread"*** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.base::internal::WorkerThreadStack"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 3
  %45 = sub nsw i64 %36, %44
  %46 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %28, i64 0, i32 5
  %47 = load i64, i64* %46, align 8
  %48 = icmp ugt i64 %45, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %27
  tail call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %37, %"class.base::internal::WorkerThread"* %2) #16
  %50 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %51 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %50, i64 0, i32 12, i32 0, i32 0, i32 0
  %52 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %51, align 8
  tail call void @_ZN4base17ConditionVariable9BroadcastEv(%"class.base::ConditionVariable"* %52) #16
  br label %53

53:                                               ; preds = %22, %12, %15, %27, %26, %49
  %54 = phi i1 [ false, %49 ], [ false, %26 ], [ false, %22 ], [ true, %27 ], [ false, %15 ], [ false, %12 ]
  ret i1 %54
}

declare void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"*, i8*) unnamed_addr #1

declare void @_ZN4base8internal20RegisteredTaskSourceC1Ev(%"class.base::internal::RegisteredTaskSource"*) unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #1

declare dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN4base8internal11ThreadGroup24TakeRegisteredTaskSourceEPNS1_26BaseScopedCommandsExecutorE(%"class.base::internal::RegisteredTaskSource"* sret, %"class.base::internal::ThreadGroup"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*) local_unnamed_addr #1

declare dereferenceable(16) %"class.base::internal::RegisteredTaskSource"* @_ZN4base8internal20RegisteredTaskSourceaSEOS1_(%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl31OnWorkerBecomesIdleLockRequiredEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %4 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %4, i64 0, i32 11
  tail call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %5, %"class.base::internal::WorkerThread"* %1) #16
  %6 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %6, i64 0, i32 12, i32 0, i32 0, i32 0
  %8 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %7, align 8
  tail call void @_ZN4base17ConditionVariable9BroadcastEv(%"class.base::ConditionVariable"* %8) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl33IncrementTasksRunningLockRequiredENS_12TaskPriorityE(%"class.base::internal::ThreadGroupImpl"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %3, align 8
  %6 = icmp eq i8 %1, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 1
  store i64 %10, i64* %8, align 8
  br label %11

11:                                               ; preds = %7, %2
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %13 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %12) #16
  br i1 %13, label %30, label %14

14:                                               ; preds = %11
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %30, label %19

19:                                               ; preds = %14
  %20 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %12) #16
  %21 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %20, i64 0, i32 0
  %22 = load i8, i8* %21, align 8
  %23 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %12) #16
  %24 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %23, i64 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = shl nuw i16 %26, 8
  %28 = zext i8 %22 to i16
  %29 = or i16 %27, %28
  br label %30

30:                                               ; preds = %11, %14, %19
  %31 = phi i16 [ %29, %19 ], [ 0, %14 ], [ 0, %11 ]
  %32 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %33 = bitcast %"struct.std::__1::__atomic_base"* %32 to i16*
  store atomic i16 %31, i16* %33 monotonic, align 2
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl14DidProcessTaskENS0_20RegisteredTaskSourceE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture, %"class.base::internal::RegisteredTaskSource"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::optional.125", align 8
  %4 = alloca %"struct.base::internal::TransactionWithRegisteredTaskSource", align 8
  %5 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %6 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %7 = alloca %"class.base::internal::ThreadGroup::ScopedReenqueueExecutor", align 8
  %8 = alloca %"struct.base::internal::TransactionWithRegisteredTaskSource", align 8
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 2, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #16
  %13 = bitcast %"class.absl::optional.125"* %3 to i64*
  store i64 -6148914691236517206, i64* %13, align 8
  store i8 0, i8* %12, align 8
  %14 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %union.anon.129* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #16
  %16 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %16, align 8
  %18 = icmp eq %"class.base::internal::TaskSource"* %17, null
  br i1 %18, label %31, label %19

19:                                               ; preds = %2
  %20 = bitcast %"struct.base::internal::TransactionWithRegisteredTaskSource"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #16
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %5, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16) %1) #16
  call void @_ZN4base8internal35TransactionWithRegisteredTaskSource14FromTaskSourceENS0_20RegisteredTaskSourceE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull sret %4, %"class.base::internal::RegisteredTaskSource"* nonnull %5) #16
  %21 = load i8, i8* %12, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %24) #16
  %25 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* %25) #16
  store i8 0, i8* %12, align 8
  br label %26

26:                                               ; preds = %19, %23
  %27 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %28 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %4, i64 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* %27, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %28) #16
  %29 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %30 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %4, i64 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"* %29, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8) %30) #16
  store i8 1, i8* %12, align 8
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %30) #16
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %28) #16
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #16
  br label %31

31:                                               ; preds = %2, %26
  %32 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %32) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 232, i1 false)
  %33 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %34 = bitcast %"class.base::internal::ThreadGroupImpl"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %36) #16
  %37 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 1
  %38 = bitcast %"class.base::internal::ThreadGroupImpl"** %37 to i64*
  store i64 %35, i64* %38, align 8
  %39 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 2
  %40 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5
  %41 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %40, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 1, i32 0
  %44 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %41, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %43, align 8
  %45 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 2
  %46 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %47 = ptrtoint %"class.base::StackVector"* %40 to i64
  %48 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %46 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"struct.std::__1::pair"** %49 to i64*
  %51 = bitcast %"class.std::__1::vector.115"* %45 to i64*
  %52 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %6, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %53 = bitcast %"struct.std::__1::pair"** %52 to i64*
  store i8 1, i8* %42, align 8
  %54 = ptrtoint i8* %42 to i64
  store i64 %47, i64* %51, align 8
  store i64 %47, i64* %53, align 8
  store i64 %54, i64* %50, align 8
  %55 = getelementptr inbounds %"class.base::internal::ThreadGroup::ScopedReenqueueExecutor", %"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %55) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 40, i1 false)
  call void @_ZN4base8internal11ThreadGroup23ScopedReenqueueExecutorC1Ev(%"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"* nonnull %7) #16
  %56 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %33, align 8
  %57 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %56, i64 0, i32 0, i32 3
  %58 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %58) #16
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %63, label %61, !prof !7

61:                                               ; preds = %31
  %62 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %57, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %62) #16
  br label %63

63:                                               ; preds = %31, %61
  %64 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %33, align 8
  %65 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8, i8* %65, align 1, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %69, !prof !3

68:                                               ; preds = %63
  call void @llvm.trap() #16
  unreachable

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 7
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, -1
  store i64 %74, i64* %72, align 8
  %75 = icmp eq i8 %71, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 8
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, -1
  store i64 %79, i64* %77, align 8
  br label %80

80:                                               ; preds = %76, %69
  %81 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 0, i32 6
  %82 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %81) #16
  br i1 %82, label %99, label %83

83:                                               ; preds = %80
  %84 = load i64, i64* %72, align 8
  %85 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 5
  %86 = load i64, i64* %85, align 8
  %87 = icmp ult i64 %84, %86
  br i1 %87, label %99, label %88

88:                                               ; preds = %83
  %89 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %81) #16
  %90 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %89, i64 0, i32 0
  %91 = load i8, i8* %90, align 8
  %92 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %81) #16
  %93 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %92, i64 0, i32 1
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  %96 = shl nuw i16 %95, 8
  %97 = zext i8 %91 to i16
  %98 = or i16 %96, %97
  br label %99

99:                                               ; preds = %80, %83, %88
  %100 = phi i16 [ %98, %88 ], [ 0, %83 ], [ 0, %80 ]
  %101 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %64, i64 0, i32 0, i32 7, i32 0
  %102 = bitcast %"struct.std::__1::__atomic_base"* %101 to i16*
  store atomic i16 %100, i16* %102 monotonic, align 2
  %103 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 8
  %104 = load i8, i8* %12, align 8, !range !2
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %113, label %106

106:                                              ; preds = %99
  %107 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %33, align 8
  %108 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %107, i64 0, i32 0
  %109 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %8, i64 0, i32 0
  %110 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %109, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16) %110) #16
  %111 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %8, i64 0, i32 1
  %112 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"* %111, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8) %112) #16
  call void @_ZN4base8internal11ThreadGroup31ReEnqueueTaskSourceLockRequiredEPNS1_26BaseScopedCommandsExecutorEPNS1_23ScopedReenqueueExecutorENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::ThreadGroup"* %108, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %36, %"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"* nonnull %7, %"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull %8) #16
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %111) #16
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %109) #16
  br label %113

113:                                              ; preds = %99, %106
  %114 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %58) #16
  call void @_ZN4base8internal11ThreadGroup23ScopedReenqueueExecutorD1Ev(%"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"* nonnull %7) #16
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %55) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %6) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %32) #16
  %115 = load i8, i8* %12, align 8, !range !2
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %120, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %118) #16
  %119 = getelementptr inbounds %"class.absl::optional.125", %"class.absl::optional.125"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* %119) #16
  store i8 0, i8* %12, align 8
  br label %120

120:                                              ; preds = %113, %117
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #16
  ret void
}

declare void @_ZN4base8internal35TransactionWithRegisteredTaskSource14FromTaskSourceENS0_20RegisteredTaskSourceE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* sret, %"class.base::internal::RegisteredTaskSource"*) local_unnamed_addr #1

declare void @_ZN4base8internal11ThreadGroup23ScopedReenqueueExecutorC1Ev(%"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl33DecrementTasksRunningLockRequiredENS_12TaskPriorityE(%"class.base::internal::ThreadGroupImpl"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -1
  store i64 %5, i64* %3, align 8
  %6 = icmp eq i8 %1, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  store i64 %10, i64* %8, align 8
  br label %11

11:                                               ; preds = %7, %2
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %13 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %12) #16
  br i1 %13, label %30, label %14

14:                                               ; preds = %11
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %30, label %19

19:                                               ; preds = %14
  %20 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %12) #16
  %21 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %20, i64 0, i32 0
  %22 = load i8, i8* %21, align 8
  %23 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %12) #16
  %24 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %23, i64 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = shl nuw i16 %26, 8
  %28 = zext i8 %22 to i16
  %29 = or i16 %27, %28
  br label %30

30:                                               ; preds = %11, %14, %19
  %31 = phi i16 [ %29, %19 ], [ 0, %14 ], [ 0, %11 ]
  %32 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %33 = bitcast %"struct.std::__1::__atomic_base"* %32 to i16*
  store atomic i16 %31, i16* %33 monotonic, align 2
  ret void
}

declare void @_ZN4base8internal11ThreadGroup31ReEnqueueTaskSourceLockRequiredEPNS1_26BaseScopedCommandsExecutorEPNS1_23ScopedReenqueueExecutorENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::ThreadGroup"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*, %"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"*, %"struct.base::internal::TransactionWithRegisteredTaskSource"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal11ThreadGroup23ScopedReenqueueExecutorD1Ev(%"class.base::internal::ThreadGroup::ScopedReenqueueExecutor"*) unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15GetSleepTimeoutEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %3 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %3, i64 0, i32 1, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = sitofp i64 %5 to double
  %7 = fmul double %6, 1.100000e+00
  %8 = fcmp oge double %7, 0xC3E0000000000000
  %9 = fcmp ole double %7, 0x43DFFFFFFFFFFFFF
  %10 = and i1 %9, %8
  %11 = fptosi double %7 to i64
  %12 = icmp sgt i64 %5, -1
  %13 = select i1 %12, i64 9223372036854775807, i64 -9223372036854775808
  %14 = select i1 %10, i64 %11, i64 %13
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl22CanCleanupLockRequiredEPKNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @_ZNK4base8internal12WorkerThread15GetLastUsedTimeEv(%"class.base::internal::WorkerThread"* %1) #16
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #16
  %7 = sub nsw i64 %6, %3
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %9 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %9, i64 0, i32 1, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp slt i64 %7, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %9, i64 0, i32 14
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp ne i8 %15, 1
  br label %17

17:                                               ; preds = %5, %13, %2
  %18 = phi i1 [ false, %5 ], [ false, %2 ], [ %16, %13 ]
  ret i1 %18
}

declare i64 @_ZNK4base8internal12WorkerThread15GetLastUsedTimeEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl19CleanupLockRequiredEPNS1_22ScopedCommandsExecutorEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::HistogramBase"*, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %7 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %7, i64 0, i32 20
  %9 = load %"class.base::HistogramBase"*, %"class.base::HistogramBase"** %8, align 8
  %10 = icmp eq %"class.base::HistogramBase"* %9, null
  br i1 %10, label %32, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 2, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = bitcast %"class.base::HistogramBase"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  %16 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  store %"class.base::HistogramBase"* %9, %"class.base::HistogramBase"** %4, align 8
  store i32 %14, i32* %5, align 4
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %18 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %17, align 8
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %20 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %19, align 8
  %21 = icmp ult %"struct.std::__1::pair"* %18, %20
  br i1 %21, label %22, label %29

22:                                               ; preds = %11
  %23 = ptrtoint %"class.base::HistogramBase"* %9 to i64
  %24 = bitcast %"struct.std::__1::pair"* %18 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 0, i32 1
  store i32 %14, i32* %25, align 8
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 1
  %27 = ptrtoint %"struct.std::__1::pair"* %26 to i64
  %28 = bitcast %"struct.std::__1::pair"** %17 to i64*
  store i64 %27, i64* %28, align 8
  br label %31

29:                                               ; preds = %11
  %30 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 5, i32 0, i32 2
  call void @_ZNSt3__16vectorINS_4pairIPN4base13HistogramBaseEiEENS2_14StackAllocatorIS5_Lm5EEEE24__emplace_back_slow_pathIJRS4_RiEEEvDpOT_(%"class.std::__1::vector.115"* %30, %"class.base::HistogramBase"** nonnull dereferenceable(8) %4, i32* nonnull dereferenceable(4) %5) #16
  br label %31

31:                                               ; preds = %22, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  br label %32

32:                                               ; preds = %3, %31
  call void @_ZN4base8internal12WorkerThread7CleanupEv(%"class.base::internal::WorkerThread"* %2) #16
  %33 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %6, align 8
  %34 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %33, i64 0, i32 11
  call void @_ZN4base8internal17WorkerThreadStack6RemoveEPKNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %34, %"class.base::internal::WorkerThread"* %2) #16
  %35 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %6, align 8
  %36 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %35, i64 0, i32 4, i32 0, i32 0
  %37 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %36, align 8
  %38 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %35, i64 0, i32 4, i32 0, i32 1
  %39 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %38, align 8
  %40 = icmp eq %class.scoped_refptr.15* %37, %39
  br i1 %40, label %49, label %41

41:                                               ; preds = %32, %46
  %42 = phi %class.scoped_refptr.15* [ %47, %46 ], [ %37, %32 ]
  %43 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %42, i64 0, i32 0
  %44 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %43, align 8
  %45 = icmp eq %"class.base::internal::WorkerThread"* %44, %2
  br i1 %45, label %49, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %42, i64 1
  %48 = icmp eq %class.scoped_refptr.15* %47, %39
  br i1 %48, label %49, label %41

49:                                               ; preds = %41, %46, %32
  %50 = phi %class.scoped_refptr.15* [ %37, %32 ], [ %39, %46 ], [ %42, %41 ]
  %51 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %50, i64 1
  %52 = icmp eq %class.scoped_refptr.15* %51, %39
  br i1 %52, label %82, label %53

53:                                               ; preds = %49, %75
  %54 = phi %class.scoped_refptr.15* [ %77, %75 ], [ %50, %49 ]
  %55 = phi %class.scoped_refptr.15* [ %76, %75 ], [ %51, %49 ]
  %56 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %55, i64 0, i32 0
  %57 = bitcast %class.scoped_refptr.15* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %56, align 8
  %59 = bitcast %class.scoped_refptr.15* %54 to i64*
  %60 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %54, i64 0, i32 0
  %61 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %60, align 8
  store i64 %58, i64* %59, align 8
  %62 = icmp eq %"class.base::internal::WorkerThread"* %61, null
  br i1 %62, label %75, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %61, i64 0, i32 1
  %65 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw sub i32* %65, i32 1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %75

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %64, i64 -2
  %70 = bitcast %"class.base::RefCountedThreadSafe.57"* %69 to %"class.base::internal::WorkerThread"*
  %71 = bitcast %"class.base::RefCountedThreadSafe.57"* %69 to void (%"class.base::internal::WorkerThread"*)***
  %72 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %72, i64 3
  %74 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %73, align 8
  call void %74(%"class.base::internal::WorkerThread"* nonnull %70) #16
  br label %75

75:                                               ; preds = %68, %63, %53
  %76 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %55, i64 1
  %77 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %54, i64 1
  %78 = icmp eq %class.scoped_refptr.15* %76, %39
  br i1 %78, label %79, label %53

79:                                               ; preds = %75
  %80 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %38, align 8
  %81 = icmp eq %class.scoped_refptr.15* %80, %77
  br i1 %81, label %105, label %82

82:                                               ; preds = %79, %49
  %83 = phi %class.scoped_refptr.15* [ %77, %79 ], [ %50, %49 ]
  %84 = phi %class.scoped_refptr.15* [ %80, %79 ], [ %39, %49 ]
  br label %85

85:                                               ; preds = %103, %82
  %86 = phi %class.scoped_refptr.15* [ %87, %103 ], [ %84, %82 ]
  %87 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %86, i64 -1
  %88 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %87, i64 0, i32 0
  %89 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %88, align 8
  %90 = icmp eq %"class.base::internal::WorkerThread"* %89, null
  br i1 %90, label %103, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %89, i64 0, i32 1
  %93 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw sub i32* %93, i32 1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %103

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %92, i64 -2
  %98 = bitcast %"class.base::RefCountedThreadSafe.57"* %97 to %"class.base::internal::WorkerThread"*
  %99 = bitcast %"class.base::RefCountedThreadSafe.57"* %97 to void (%"class.base::internal::WorkerThread"*)***
  %100 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %99, align 8
  %101 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %100, i64 3
  %102 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %101, align 8
  call void %102(%"class.base::internal::WorkerThread"* nonnull %98) #16
  br label %103

103:                                              ; preds = %96, %91, %85
  %104 = icmp eq %class.scoped_refptr.15* %87, %83
  br i1 %104, label %105, label %85

105:                                              ; preds = %103, %79
  %106 = phi %class.scoped_refptr.15* [ %77, %79 ], [ %83, %103 ]
  store %class.scoped_refptr.15* %106, %class.scoped_refptr.15** %38, align 8
  ret void
}

declare void @_ZN4base8internal12WorkerThread7CleanupEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

declare void @_ZN4base8internal17WorkerThreadStack6RemoveEPKNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #1

declare void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #1

declare void @_ZN4base17ConditionVariable9BroadcastEv(%"class.base::ConditionVariable"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl10OnMainExitEPNS0_12WorkerThreadE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture readonly, %"class.base::internal::WorkerThread"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %4 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %4, i64 0, i32 0, i32 3
  %6 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !7

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %5, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #16
  br label %11

11:                                               ; preds = %2, %9
  %12 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %12, i64 0, i32 15
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %13, align 8
  %16 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %16, i64 0, i32 16, i32 0, i32 0, i32 0
  %18 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %17, align 8
  %19 = icmp eq %"class.base::ConditionVariable"* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %11
  tail call void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"* nonnull %18) #16
  br label %21

21:                                               ; preds = %11, %20
  %22 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #16
  ret void
}

declare void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15BlockingStartedENS_12BlockingTypeE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %5 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %5, i64 0, i32 1, i32 7
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = load i8, i8* @_ZN4base6subtle24ScopedTimeClockOverrides17overrides_active_E, align 1
  %9 = or i8 %8, %7
  %10 = icmp ne i8 %9, 0
  %11 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %11) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 232, i1 false)
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %12) #16
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %5, %"class.base::internal::ThreadGroupImpl"** %13, align 8
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5
  %16 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 1, i32 0
  %19 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %16, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %18, align 8
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %22 = ptrtoint %"class.base::StackVector"* %15 to i64
  %23 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %21 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"struct.std::__1::pair"** %24 to i64*
  %26 = bitcast %"class.std::__1::vector.115"* %20 to i64*
  %27 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %28 = bitcast %"struct.std::__1::pair"** %27 to i64*
  store i8 1, i8* %17, align 8
  %29 = ptrtoint i8* %17 to i64
  store i64 %22, i64* %26, align 8
  store i64 %22, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %31 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %30, i64 0, i32 0, i32 3
  %32 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %32) #16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35, !prof !7

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %36) #16
  br label %37

37:                                               ; preds = %2, %35
  %38 = call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #16
  %39 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8, i8* %40, align 1, !range !2
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %44, !prof !3

43:                                               ; preds = %37
  call void @llvm.trap() #16
  unreachable

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %44
  %49 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %50 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %49, i64 0, i32 10
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %50, align 4
  br label %53

53:                                               ; preds = %48, %44
  %54 = icmp eq i32 %1, 1
  %55 = or i1 %54, %10
  br i1 %55, label %56, label %89

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 5
  store i8 1, i8* %57, align 8
  %58 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %59 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %58, i64 0, i32 5
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %59, align 8
  %62 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %58, i64 0, i32 0, i32 6
  %63 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %62) #16
  br i1 %63, label %80, label %64

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %58, i64 0, i32 7
  %66 = load i64, i64* %65, align 8
  %67 = load i64, i64* %59, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %80, label %69

69:                                               ; preds = %64
  %70 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %62) #16
  %71 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %70, i64 0, i32 0
  %72 = load i8, i8* %71, align 8
  %73 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %62) #16
  %74 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %73, i64 0, i32 1
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i16
  %77 = shl nuw i16 %76, 8
  %78 = zext i8 %72 to i16
  %79 = or i16 %77, %78
  br label %80

80:                                               ; preds = %56, %64, %69
  %81 = phi i16 [ %79, %69 ], [ 0, %64 ], [ 0, %56 ]
  %82 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %58, i64 0, i32 0, i32 7, i32 0
  %83 = bitcast %"struct.std::__1::__atomic_base"* %82 to i16*
  store atomic i16 %81, i16* %83 monotonic, align 2
  %84 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %85 = bitcast %"class.base::internal::ThreadGroupImpl"* %84 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %86 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %85, align 8
  %87 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %86, i64 7
  %88 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %87, align 8
  call void %88(%"class.base::internal::ThreadGroupImpl"* %84, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %12) #16
  br label %94

89:                                               ; preds = %53
  %90 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %91 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %90, i64 0, i32 9
  %92 = load i32, i32* %91, align 8
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %91, align 8
  br label %94

94:                                               ; preds = %89, %80
  %95 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %4, align 8
  %96 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 13
  %97 = load i8, i8* %96, align 8, !range !2
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %129

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 8
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 0
  %103 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %102) #16
  %104 = add i64 %103, %101
  %105 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 6
  %106 = load i64, i64* %105, align 8
  %107 = icmp ugt i64 %104, %106
  br i1 %107, label %108, label %112

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 10
  %110 = load i32, i32* %109, align 4
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %127, label %112

112:                                              ; preds = %108, %99
  %113 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 7
  %114 = load i64, i64* %113, align 8
  %115 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %102) #16
  %116 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %102) #16
  %117 = add i64 %114, 1
  %118 = add i64 %117, %115
  %119 = add i64 %118, %116
  %120 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 5
  %121 = load i64, i64* %120, align 8
  %122 = icmp ugt i64 %119, %121
  br i1 %122, label %123, label %129

123:                                              ; preds = %112
  %124 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %95, i64 0, i32 9
  %125 = load i32, i32* %124, align 8
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %123, %108
  %128 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %3, i64 0, i32 4
  store i8 1, i8* %128, align 8
  store i8 1, i8* %96, align 8
  br label %129

129:                                              ; preds = %94, %112, %123, %127
  %130 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %32) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %3) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %11) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl29IncrementMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %6 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %5) #16
  br i1 %6, label %23, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %2, align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %14 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %13, i64 0, i32 0
  %15 = load i8, i8* %14, align 8
  %16 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %17 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %16, i64 0, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw i16 %19, 8
  %21 = zext i8 %15 to i16
  %22 = or i16 %20, %21
  br label %23

23:                                               ; preds = %1, %7, %12
  %24 = phi i16 [ %22, %12 ], [ 0, %7 ], [ 0, %1 ]
  %25 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %26 = bitcast %"struct.std::__1::__atomic_base"* %25 to i16*
  store atomic i16 %24, i16* %26 monotonic, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl39MaybeScheduleAdjustMaxTasksLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 13
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %10 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %9) #16
  %11 = add i64 %10, %8
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %11, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 10
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %34, label %19

19:                                               ; preds = %15, %6
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %21 = load i64, i64* %20, align 8
  %22 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %9) #16
  %23 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %9) #16
  %24 = add i64 %21, 1
  %25 = add i64 %24, %22
  %26 = add i64 %25, %23
  %27 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %26, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %19
  %31 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 9
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %15, %30
  %35 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 4
  store i8 1, i8* %35, align 8
  store i8 1, i8* %3, align 8
  br label %36

36:                                               ; preds = %19, %2, %34, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15BlockingStartedENS_12BlockingTypeE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 -1, i32 5
  %4 = bitcast i8* %3 to %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*
  tail call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl15BlockingStartedENS_12BlockingTypeE(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %4, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl20BlockingTypeUpgradedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %4 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %4, i64 0, i32 1, i32 7
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = load i8, i8* @_ZN4base6subtle24ScopedTimeClockOverrides17overrides_active_E, align 1
  %8 = or i8 %7, %6
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %1
  %11 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %11) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 232, i1 false)
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %12) #16
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %4, %"class.base::internal::ThreadGroupImpl"** %13, align 8
  %14 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 2
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5
  %16 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 1, i32 0
  %19 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %16, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %18, align 8
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %22 = ptrtoint %"class.base::StackVector"* %15 to i64
  %23 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %21 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"struct.std::__1::pair"** %24 to i64*
  %26 = bitcast %"class.std::__1::vector.115"* %20 to i64*
  %27 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %28 = bitcast %"struct.std::__1::pair"** %27 to i64*
  store i8 1, i8* %17, align 8
  %29 = ptrtoint i8* %17 to i64
  store i64 %22, i64* %26, align 8
  store i64 %22, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %31 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %30, i64 0, i32 0, i32 3
  %32 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %32) #16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35, !prof !7

35:                                               ; preds = %10
  %36 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %31, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %36) #16
  br label %37

37:                                               ; preds = %10, %35
  %38 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 5
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %77

41:                                               ; preds = %37
  %42 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %43 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %42, i64 0, i32 9
  %44 = load i32, i32* %43, align 8
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* %43, align 8
  store i8 1, i8* %38, align 8
  %46 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %47 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %46, i64 0, i32 5
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %46, i64 0, i32 0, i32 6
  %51 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %50) #16
  br i1 %51, label %68, label %52

52:                                               ; preds = %41
  %53 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %46, i64 0, i32 7
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* %47, align 8
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %68, label %57

57:                                               ; preds = %52
  %58 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %50) #16
  %59 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %58, i64 0, i32 0
  %60 = load i8, i8* %59, align 8
  %61 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %50) #16
  %62 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %61, i64 0, i32 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = shl nuw i16 %64, 8
  %66 = zext i8 %60 to i16
  %67 = or i16 %65, %66
  br label %68

68:                                               ; preds = %41, %52, %57
  %69 = phi i16 [ %67, %57 ], [ 0, %52 ], [ 0, %41 ]
  %70 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %46, i64 0, i32 0, i32 7, i32 0
  %71 = bitcast %"struct.std::__1::__atomic_base"* %70 to i16*
  store atomic i16 %69, i16* %71 monotonic, align 2
  %72 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %3, align 8
  %73 = bitcast %"class.base::internal::ThreadGroupImpl"* %72 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %74 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %74, i64 7
  %76 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %75, align 8
  call void %76(%"class.base::internal::ThreadGroupImpl"* %72, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %12) #16
  br label %77

77:                                               ; preds = %37, %68
  %78 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %32) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %2) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %11) #16
  br label %79

79:                                               ; preds = %1, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl20BlockingTypeUpgradedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 -1, i32 5
  %3 = bitcast i8* %2 to %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*
  tail call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl20BlockingTypeUpgradedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl13BlockingEndedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %3 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %3, i64 0, i32 0, i32 3
  %5 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !7

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %4, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #16
  br label %10

10:                                               ; preds = %1, %8
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 5
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %2, align 8
  br i1 %13, label %42, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 5
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, -1
  store i64 %18, i64* %16, align 8
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 0, i32 6
  %20 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %19) #16
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 7
  %23 = load i64, i64* %22, align 8
  %24 = load i64, i64* %16, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %21, %15
  %27 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 0, i32 7, i32 0
  %28 = bitcast %"struct.std::__1::__atomic_base"* %27 to i16*
  store atomic i16 0, i16* %28 monotonic, align 2
  br label %46

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 0, i32 7, i32 0
  %31 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %19) #16
  %32 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %31, i64 0, i32 0
  %33 = load i8, i8* %32, align 8
  %34 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %19) #16
  %35 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %34, i64 0, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = shl nuw i16 %37, 8
  %39 = zext i8 %33 to i16
  %40 = or i16 %38, %39
  %41 = bitcast %"struct.std::__1::__atomic_base"* %30 to i16*
  store atomic i16 %40, i16* %41 monotonic, align 2
  br label %46

42:                                               ; preds = %10
  %43 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %14, i64 0, i32 9
  %44 = load i32, i32* %43, align 8
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* %43, align 8
  br label %46

46:                                               ; preds = %29, %26, %42
  %47 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8, i8* %47, align 1, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %46
  tail call void @llvm.trap() #16
  unreachable

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %92

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 6
  %57 = load i8, i8* %56, align 1, !range !2
  %58 = icmp eq i8 %57, 0
  %59 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %2, align 8
  br i1 %58, label %88, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 6
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, -1
  store i64 %63, i64* %61, align 8
  %64 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 0, i32 6
  %65 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %64) #16
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 7
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 5
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %72, label %75

72:                                               ; preds = %66, %60
  %73 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 0, i32 7, i32 0
  %74 = bitcast %"struct.std::__1::__atomic_base"* %73 to i16*
  store atomic i16 0, i16* %74 monotonic, align 2
  br label %92

75:                                               ; preds = %66
  %76 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 0, i32 7, i32 0
  %77 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %64) #16
  %78 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %77, i64 0, i32 0
  %79 = load i8, i8* %78, align 8
  %80 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %64) #16
  %81 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %80, i64 0, i32 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = shl nuw i16 %83, 8
  %85 = zext i8 %79 to i16
  %86 = or i16 %84, %85
  %87 = bitcast %"struct.std::__1::__atomic_base"* %76 to i16*
  store atomic i16 %86, i16* %87 monotonic, align 2
  br label %92

88:                                               ; preds = %55
  %89 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %59, i64 0, i32 10
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %90, -1
  store i32 %91, i32* %89, align 4
  br label %92

92:                                               ; preds = %75, %72, %88, %51
  store i8 0, i8* %11, align 8
  %93 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 6
  store i8 0, i8* %93, align 1
  %94 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  store i64 0, i64* %94, align 8
  %95 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl29DecrementMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %6 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %5) #16
  br i1 %6, label %23, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %2, align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %14 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %13, i64 0, i32 0
  %15 = load i8, i8* %14, align 8
  %16 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %17 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %16, i64 0, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw i16 %19, 8
  %21 = zext i8 %15 to i16
  %22 = or i16 %20, %21
  br label %23

23:                                               ; preds = %1, %7, %12
  %24 = phi i16 [ %22, %12 ], [ 0, %7 ], [ 0, %1 ]
  %25 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %26 = bitcast %"struct.std::__1::__atomic_base"* %25 to i16*
  store atomic i16 %24, i16* %26 monotonic, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl39DecrementMaxBestEffortTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %6 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %5) #16
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %24, label %13

13:                                               ; preds = %7
  %14 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %15 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %14, i64 0, i32 0
  %16 = load i8, i8* %15, align 8
  %17 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %18 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %17, i64 0, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = shl nuw i16 %20, 8
  %22 = zext i8 %16 to i16
  %23 = or i16 %21, %22
  br label %24

24:                                               ; preds = %1, %7, %13
  %25 = phi i16 [ %23, %13 ], [ 0, %7 ], [ 0, %1 ]
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %27 = bitcast %"struct.std::__1::__atomic_base"* %26 to i16*
  store atomic i16 %25, i16* %27 monotonic, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl13BlockingEndedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 -1, i32 5
  %3 = bitcast i8* %2 to %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*
  tail call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl13BlockingEndedEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %3)
  ret void
}

declare %"class.base::internal::WorkerThread"* @_ZNK4base8internal17WorkerThreadStack4PeekEv(%"class.base::internal::WorkerThreadStack"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl30GetNumAwakeWorkersLockRequiredEv(%"class.base::internal::ThreadGroupImpl"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr.15** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.13"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %12 = bitcast %"class.base::internal::WorkerThread"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.base::internal::WorkerThreadStack"* %10 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 3
  %18 = sub nsw i64 %9, %17
  ret i64 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl34MaybeIncrementMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %94, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #16
  %7 = load i64, i64* %2, align 8
  %8 = sub nsw i64 %6, %7
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 0
  %10 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %10, i64 0, i32 1, i32 8, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp slt i64 %8, %12
  br i1 %13, label %94, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 5
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %48

18:                                               ; preds = %14
  store i8 1, i8* %15, align 8
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %10, i64 0, i32 9
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, -1
  store i32 %21, i32* %19, align 8
  %22 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %9, align 8
  %23 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %22, i64 0, i32 5
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %23, align 8
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %22, i64 0, i32 0, i32 6
  %27 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %26) #16
  br i1 %27, label %44, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %22, i64 0, i32 7
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %23, align 8
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %44, label %33

33:                                               ; preds = %28
  %34 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %26) #16
  %35 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %34, i64 0, i32 0
  %36 = load i8, i8* %35, align 8
  %37 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %26) #16
  %38 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %37, i64 0, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = shl nuw i16 %40, 8
  %42 = zext i8 %36 to i16
  %43 = or i16 %41, %42
  br label %44

44:                                               ; preds = %18, %28, %33
  %45 = phi i16 [ %43, %33 ], [ 0, %28 ], [ 0, %18 ]
  %46 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %22, i64 0, i32 0, i32 7, i32 0
  %47 = bitcast %"struct.std::__1::__atomic_base"* %46 to i16*
  store atomic i16 %45, i16* %47 monotonic, align 2
  br label %48

48:                                               ; preds = %44, %14
  %49 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8, i8* %49, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %48
  tail call void @llvm.trap() #16
  unreachable

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %94

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 6
  %59 = load i8, i8* %58, align 1, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %94

61:                                               ; preds = %57
  store i8 1, i8* %58, align 1
  %62 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %9, align 8
  %63 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %62, i64 0, i32 10
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, -1
  store i32 %65, i32* %63, align 4
  %66 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %9, align 8
  %67 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 6
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %67, align 8
  %70 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 0, i32 6
  %71 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %70) #16
  br i1 %71, label %78, label %72

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 7
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 5
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %74, %76
  br i1 %77, label %78, label %81

78:                                               ; preds = %72, %61
  %79 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 0, i32 7, i32 0
  %80 = bitcast %"struct.std::__1::__atomic_base"* %79 to i16*
  store atomic i16 0, i16* %80 monotonic, align 2
  br label %94

81:                                               ; preds = %72
  %82 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %66, i64 0, i32 0, i32 7, i32 0
  %83 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %70) #16
  %84 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %83, i64 0, i32 0
  %85 = load i8, i8* %84, align 8
  %86 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %70) #16
  %87 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %86, i64 0, i32 1
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = shl nuw i16 %89, 8
  %91 = zext i8 %85 to i16
  %92 = or i16 %90, %91
  %93 = bitcast %"struct.std::__1::__atomic_base"* %82 to i16*
  store atomic i16 %92, i16* %93 monotonic, align 2
  br label %94

94:                                               ; preds = %81, %78, %1, %57, %5, %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl39IncrementMaxBestEffortTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %6 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %5) #16
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %24, label %13

13:                                               ; preds = %7
  %14 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %15 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %14, i64 0, i32 0
  %16 = load i8, i8* %15, align 8
  %17 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %5) #16
  %18 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %17, i64 0, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = shl nuw i16 %20, 8
  %22 = zext i8 %16 to i16
  %23 = or i16 %21, %22
  br label %24

24:                                               ; preds = %1, %7, %13
  %25 = phi i16 [ %23, %13 ], [ 0, %7 ], [ 0, %1 ]
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %27 = bitcast %"struct.std::__1::__atomic_base"* %26 to i16*
  store atomic i16 %25, i16* %27 monotonic, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl40MaintainAtLeastOneIdleWorkerLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = bitcast %class.scoped_refptr.15** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.13"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 2048
  br i1 %11, label %38, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %14 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %14, align 8
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %17 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %16, align 8
  %18 = icmp eq %"class.base::internal::WorkerThread"** %15, %17
  br i1 %18, label %19, label %38

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %10, %21
  br i1 %22, label %23, label %38

23:                                               ; preds = %19
  %24 = tail call %"class.base::internal::WorkerThread"* @_ZN4base8internal15ThreadGroupImpl35CreateAndRegisterWorkerLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1)
  tail call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %13, %"class.base::internal::WorkerThread"* %24) #16
  %25 = icmp eq %"class.base::internal::WorkerThread"* %24, null
  br i1 %25, label %38, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %24, i64 0, i32 1
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw sub i32* %28, i32 1 acq_rel
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %38

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %27, i64 -2
  %33 = bitcast %"class.base::RefCountedThreadSafe.57"* %32 to %"class.base::internal::WorkerThread"*
  %34 = bitcast %"class.base::RefCountedThreadSafe.57"* %32 to void (%"class.base::internal::WorkerThread"*)***
  %35 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %35, i64 3
  %37 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %36, align 8
  tail call void %37(%"class.base::internal::WorkerThread"* nonnull %33) #16
  br label %38

38:                                               ; preds = %31, %26, %23, %19, %12, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::internal::WorkerThread"* @_ZN4base8internal15ThreadGroupImpl35CreateAndRegisterWorkerLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::TrackedRef", align 8
  %4 = alloca %class.scoped_refptr.15, align 8
  %5 = alloca %class.scoped_refptr.15, align 8
  %6 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %5, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::WorkerThread"*), %"class.base::internal::WorkerThread"** %6, align 8
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21
  %9 = bitcast %"class.base::internal::TrackedRefFactory.48"* %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !8
  %11 = ptrtoint %"class.base::internal::TrackedRefFactory.48"* %8 to i64
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 21, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic, !noalias !8
  %14 = tail call i8* @_Znwm(i64 72) #18
  %15 = bitcast i8* %14 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %15, align 8
  %16 = getelementptr inbounds i8, i8* %14, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 24
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %14, i64 32
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %14, i64 40
  %21 = bitcast i8* %20 to i64*
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %14, i64 48
  %23 = bitcast i8* %22 to i64*
  store i64 %10, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %14, i64 56
  %25 = bitcast i8* %24 to i64*
  store i64 %11, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %14, i64 64
  store i8 0, i8* %26, align 8
  %27 = getelementptr inbounds i8, i8* %14, i64 65
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %30 = bitcast %"class.base::internal::TrackedRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30)
  %31 = tail call i8* @_Znwm(i64 152) #18
  %32 = bitcast i8* %31 to %"class.base::internal::WorkerThread"*
  %33 = load i32, i32* %7, align 4
  %34 = bitcast i8* %14 to %"class.base::internal::WorkerThread::Delegate"*
  %35 = bitcast %"class.base::internal::TrackedRef"* %28 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.base::internal::TrackedRef"* %3 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef"* %3, i64 0, i32 1
  %39 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 1, i32 1
  %40 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %39, align 8
  store %"class.base::internal::TrackedRefFactory"* %40, %"class.base::internal::TrackedRefFactory"** %38, align 8
  %41 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %40, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 1 monotonic
  call void @_ZN4base8internal12WorkerThreadC1ENS_14ThreadPriorityENSt3__110unique_ptrINS1_8DelegateENS3_14default_deleteIS5_EEEENS0_10TrackedRefINS0_11TaskTrackerEEEPKNS0_11CheckedLockE(%"class.base::internal::WorkerThread"* nonnull %32, i32 %33, %"class.base::internal::WorkerThread::Delegate"* nonnull %34, %"class.base::internal::TrackedRef"* nonnull %3, %"class.base::internal::CheckedLock"* %29) #16
  %43 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %38, align 8
  %44 = icmp eq %"class.base::internal::TrackedRefFactory"* %43, null
  br i1 %44, label %57, label %45

45:                                               ; preds = %2
  %46 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %43, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw sub i32* %46, i32 1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %57

49:                                               ; preds = %45
  %50 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %38, align 8
  %51 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %50, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %52 = load i8, i8* %51, align 8, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %55, !prof !3

54:                                               ; preds = %49
  call void @llvm.trap() #16
  unreachable

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %50, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %56) #16
  br label %57

57:                                               ; preds = %2, %45, %55
  %58 = getelementptr inbounds i8, i8* %31, i64 8
  %59 = bitcast i8* %58 to i32*
  %60 = atomicrmw add i32* %59, i32 1 monotonic
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30)
  %61 = bitcast %class.scoped_refptr.15* %5 to i8**
  store i8* %31, i8** %61, align 8
  %62 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %63 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %62, align 8
  %64 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %65 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %64, align 8
  %66 = icmp eq %class.scoped_refptr.15* %63, %65
  br i1 %66, label %75, label %67

67:                                               ; preds = %57
  %68 = bitcast %class.scoped_refptr.15* %63 to i8**
  store i8* %31, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %31, i64 8
  %70 = bitcast i8* %69 to i32*
  %71 = atomicrmw add i32* %70, i32 1 monotonic
  %72 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %63, i64 1
  %73 = ptrtoint %class.scoped_refptr.15* %72 to i64
  %74 = bitcast %class.scoped_refptr.15** %62 to i64*
  store i64 %73, i64* %74, align 8
  br label %77

75:                                               ; preds = %57
  %76 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIRKS5_EEvOT_(%"class.std::__1::vector.13"* %76, %class.scoped_refptr.15* nonnull dereferenceable(8) %5) #16
  br label %77

77:                                               ; preds = %67, %75
  %78 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %6, align 8
  %79 = icmp eq %"class.base::internal::WorkerThread"* %78, null
  br i1 %79, label %80, label %83

80:                                               ; preds = %77
  %81 = bitcast %class.scoped_refptr.15* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #16
  %82 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %4, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %82, align 8
  br label %122

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %78, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = atomicrmw add i32* %84, i32 1 monotonic
  %86 = ptrtoint %"class.base::internal::WorkerThread"* %78 to i64
  %87 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 3
  %88 = bitcast %class.scoped_refptr.15* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #16
  %89 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %4, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %78, %"class.base::internal::WorkerThread"** %89, align 8
  %90 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %87, i64 0, i32 0, i32 0
  %91 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %90, align 8
  %92 = icmp eq %"class.base::internal::WorkerThread"* %91, null
  br i1 %92, label %93, label %95

93:                                               ; preds = %83
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %89, align 8
  %94 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %87 to i64*
  store i64 %86, i64* %94, align 8
  br label %122

95:                                               ; preds = %83
  %96 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 3, i32 1, i32 0, i32 1
  %97 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %96, align 8
  %98 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 3, i32 1, i32 0, i32 2, i32 0, i32 0
  %99 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %98, align 8
  %100 = icmp ult %class.scoped_refptr.15* %97, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %95
  %102 = bitcast %class.scoped_refptr.15* %97 to i64*
  store i64 %86, i64* %102, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %89, align 8
  %103 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %97, i64 1
  %104 = ptrtoint %class.scoped_refptr.15* %103 to i64
  %105 = bitcast %class.scoped_refptr.15** %96 to i64*
  store i64 %104, i64* %105, align 8
  br label %122

106:                                              ; preds = %95
  %107 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 3, i32 1
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %107, %class.scoped_refptr.15* nonnull dereferenceable(8) %4) #16
  %108 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %89, align 8
  %109 = icmp eq %"class.base::internal::WorkerThread"* %108, null
  br i1 %109, label %122, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %108, i64 0, i32 1
  %112 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %111, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = atomicrmw sub i32* %112, i32 1 acq_rel
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %122

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %111, i64 -2
  %117 = bitcast %"class.base::RefCountedThreadSafe.57"* %116 to %"class.base::internal::WorkerThread"*
  %118 = bitcast %"class.base::RefCountedThreadSafe.57"* %116 to void (%"class.base::internal::WorkerThread"*)***
  %119 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %118, align 8
  %120 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %119, i64 3
  %121 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %120, align 8
  call void %121(%"class.base::internal::WorkerThread"* nonnull %117) #16
  br label %122

122:                                              ; preds = %80, %93, %101, %106, %110, %115
  %123 = phi i8* [ %81, %80 ], [ %88, %93 ], [ %88, %101 ], [ %88, %106 ], [ %88, %110 ], [ %88, %115 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #16
  %124 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %6, align 8
  ret %"class.base::internal::WorkerThread"* %124
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal15ThreadGroupImpl37GetDesiredNumAwakeWorkersLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca [3 x i64], align 8
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %6 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %5) #16
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %7
  %11 = select i1 %10, i64 %9, i64 %7
  %12 = load i64, i64* %3, align 8
  %13 = icmp ult i64 %11, %12
  %14 = select i1 %13, i64 %12, i64 %11
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %12
  %18 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %5) #16
  %19 = add i64 %17, %18
  %20 = bitcast [3 x i64]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #16
  %21 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 0
  %22 = add i64 %19, %14
  store i64 %22, i64* %21, align 8
  %23 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 1
  %24 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %23, align 8
  %26 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 2
  store i64 256, i64* %26, align 8
  %27 = icmp ult i64 %25, %22
  %28 = load i64, i64* %21, align 8
  %29 = select i1 %27, i64 %25, i64 %28
  %30 = icmp ult i64 %29, 256
  %31 = select i1 %30, i64 %29, i64 256
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #16
  ret i64 %31
}

declare i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"*) local_unnamed_addr #1

declare i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl21DidUpdateCanRunPolicyEv(%"class.base::internal::ThreadGroupImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %3 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %3) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 232, i1 false)
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %4) #16
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 2
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5
  %8 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 1, i32 0
  %11 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %8, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %14 = ptrtoint %"class.base::StackVector"* %7 to i64
  %15 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.std::__1::pair"** %16 to i64*
  %18 = bitcast %"class.std::__1::vector.115"* %12 to i64*
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %20 = bitcast %"struct.std::__1::pair"** %19 to i64*
  store i8 1, i8* %9, align 8
  %21 = ptrtoint i8* %9 to i64
  store i64 %14, i64* %18, align 8
  store i64 %14, i64* %20, align 8
  store i64 %21, i64* %17, align 8
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %23 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %23) #16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26, !prof !7

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %22, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %27) #16
  br label %28

28:                                               ; preds = %1, %26
  %29 = bitcast %"class.base::internal::ThreadGroupImpl"* %0 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %30 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %30, i64 7
  %32 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %31, align 8
  call void %32(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %4) #16
  %33 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %23) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %2) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %3) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl31EnsureEnoughWorkersLockRequiredEPNS0_11ThreadGroup26BaseScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*) unnamed_addr #0 align 2 {
  %3 = alloca %class.scoped_refptr.15, align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %233, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 17
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %233, !prof !7

11:                                               ; preds = %7
  %12 = bitcast %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1 to %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %16 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %15) #16
  %17 = add i64 %16, %14
  %18 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, %17
  %21 = select i1 %20, i64 %19, i64 %17
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  %24 = select i1 %23, i64 %22, i64 %21
  %25 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %26, %22
  %28 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %15) #16
  %29 = add i64 %27, %28
  %30 = add i64 %29, %24
  %31 = load i64, i64* %4, align 8
  %32 = icmp ult i64 %31, %30
  %33 = select i1 %32, i64 %31, i64 %30
  %34 = icmp ult i64 %33, 256
  %35 = select i1 %34, i64 %33, i64 256
  %36 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4
  %37 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %38 = bitcast %class.scoped_refptr.15** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.13"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 3
  %44 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11
  %45 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %46 = bitcast %"class.base::internal::WorkerThread"*** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.base::internal::WorkerThreadStack"* %44 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = ashr exact i64 %50, 3
  %52 = sub nsw i64 %43, %51
  %53 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %35, i64 %52) #16
  %54 = extractvalue { i64, i1 } %53, 1
  %55 = extractvalue { i64, i1 } %53, 0
  %56 = select i1 %54, i64 0, i64 %55, !prof !3
  %57 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 5
  %58 = load i32, i32* %57, align 8
  switch i32 %58, label %64 [
    i32 2, label %59
    i32 1, label %61
  ]

59:                                               ; preds = %11
  %60 = icmp ult i64 %56, 2
  br i1 %60, label %64, label %67

61:                                               ; preds = %11
  %62 = icmp ne i64 %56, 0
  %63 = zext i1 %62 to i64
  br label %64

64:                                               ; preds = %59, %11, %61
  %65 = phi i64 [ %63, %61 ], [ %56, %11 ], [ %56, %59 ]
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %82, label %67

67:                                               ; preds = %59, %64
  %68 = phi i64 [ %65, %64 ], [ 2, %59 ]
  %69 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %44, i64 0, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1, i64 1, i32 0, i32 0, i32 1
  %71 = bitcast %class.scoped_refptr.15* %3 to i8*
  %72 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %3, i64 0, i32 0
  %73 = bitcast %"class.base::internal::RegisteredTaskSource"** %70 to %"class.base::internal::WorkerThread"**
  %74 = getelementptr inbounds %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1, i64 2
  %75 = bitcast %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %74 to %class.scoped_refptr.15**
  %76 = getelementptr inbounds %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1, i64 2, i32 0, i32 0, i32 1
  %77 = bitcast %"class.base::internal::RegisteredTaskSource"** %76 to %class.scoped_refptr.15**
  %78 = getelementptr inbounds %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1, i64 1, i32 0, i32 0, i32 2
  %79 = bitcast %"class.std::__1::__compressed_pair.108"* %78 to %"class.std::__1::vector.13"*
  %80 = bitcast %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %74 to i64*
  %81 = bitcast %"class.base::internal::RegisteredTaskSource"** %70 to i64*
  br label %84

82:                                               ; preds = %147, %64
  %83 = icmp eq i64 %35, %52
  br i1 %83, label %153, label %182

84:                                               ; preds = %150, %67
  %85 = phi i64 [ %41, %67 ], [ %152, %150 ]
  %86 = phi i64 [ %39, %67 ], [ %151, %150 ]
  %87 = phi i64 [ 0, %67 ], [ %148, %150 ]
  %88 = sub i64 %86, %85
  %89 = ashr exact i64 %88, 3
  %90 = icmp eq i64 %88, 2048
  br i1 %90, label %113, label %91

91:                                               ; preds = %84
  %92 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %69, align 8
  %93 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %45, align 8
  %94 = icmp eq %"class.base::internal::WorkerThread"** %92, %93
  br i1 %94, label %95, label %113

95:                                               ; preds = %91
  %96 = load i64, i64* %4, align 8
  %97 = icmp ult i64 %89, %96
  br i1 %97, label %98, label %113

98:                                               ; preds = %95
  %99 = call %"class.base::internal::WorkerThread"* @_ZN4base8internal15ThreadGroupImpl35CreateAndRegisterWorkerLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %12) #16
  call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %44, %"class.base::internal::WorkerThread"* %99) #16
  %100 = icmp eq %"class.base::internal::WorkerThread"* %99, null
  br i1 %100, label %113, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %99, i64 0, i32 1
  %103 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %102, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = atomicrmw sub i32* %103, i32 1 acq_rel
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %106, label %113

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %102, i64 -2
  %108 = bitcast %"class.base::RefCountedThreadSafe.57"* %107 to %"class.base::internal::WorkerThread"*
  %109 = bitcast %"class.base::RefCountedThreadSafe.57"* %107 to void (%"class.base::internal::WorkerThread"*)***
  %110 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %109, align 8
  %111 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %110, i64 3
  %112 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %111, align 8
  call void %112(%"class.base::internal::WorkerThread"* nonnull %108) #16
  br label %113

113:                                              ; preds = %84, %91, %95, %98, %101, %106
  %114 = call %"class.base::internal::WorkerThread"* @_ZN4base8internal17WorkerThreadStack3PopEv(%"class.base::internal::WorkerThreadStack"* %44) #16
  %115 = icmp eq %"class.base::internal::WorkerThread"* %114, null
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #16
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %72, align 8
  br label %147

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %114, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = atomicrmw add i32* %118, i32 1 monotonic
  %120 = ptrtoint %"class.base::internal::WorkerThread"* %114 to i64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #16
  store %"class.base::internal::WorkerThread"* %114, %"class.base::internal::WorkerThread"** %72, align 8
  %121 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %73, align 8
  %122 = icmp eq %"class.base::internal::WorkerThread"* %121, null
  br i1 %122, label %123, label %124

123:                                              ; preds = %117
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %72, align 8
  store i64 %120, i64* %81, align 8
  br label %147

124:                                              ; preds = %117
  %125 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %75, align 8
  %126 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %77, align 8
  %127 = icmp ult %class.scoped_refptr.15* %125, %126
  br i1 %127, label %128, label %132

128:                                              ; preds = %124
  %129 = bitcast %class.scoped_refptr.15* %125 to i64*
  store i64 %120, i64* %129, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %72, align 8
  %130 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %125, i64 1
  %131 = ptrtoint %class.scoped_refptr.15* %130 to i64
  store i64 %131, i64* %80, align 8
  br label %147

132:                                              ; preds = %124
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %79, %class.scoped_refptr.15* nonnull dereferenceable(8) %3) #16
  %133 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %72, align 8
  %134 = icmp eq %"class.base::internal::WorkerThread"* %133, null
  br i1 %134, label %147, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %133, i64 0, i32 1
  %137 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %136, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = atomicrmw sub i32* %137, i32 1 acq_rel
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %140, label %147

140:                                              ; preds = %135
  %141 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %136, i64 -2
  %142 = bitcast %"class.base::RefCountedThreadSafe.57"* %141 to %"class.base::internal::WorkerThread"*
  %143 = bitcast %"class.base::RefCountedThreadSafe.57"* %141 to void (%"class.base::internal::WorkerThread"*)***
  %144 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %143, align 8
  %145 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %144, i64 3
  %146 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %145, align 8
  call void %146(%"class.base::internal::WorkerThread"* nonnull %142) #16
  br label %147

147:                                              ; preds = %116, %123, %128, %132, %135, %140
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #16
  %148 = add nuw i64 %87, 1
  %149 = icmp eq i64 %148, %68
  br i1 %149, label %82, label %150

150:                                              ; preds = %147
  %151 = load i64, i64* %38, align 8
  %152 = load i64, i64* %40, align 8
  br label %84

153:                                              ; preds = %82
  %154 = load i64, i64* %38, align 8
  %155 = load i64, i64* %40, align 8
  %156 = sub i64 %154, %155
  %157 = ashr exact i64 %156, 3
  %158 = icmp eq i64 %156, 2048
  br i1 %158, label %182, label %159

159:                                              ; preds = %153
  %160 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %44, i64 0, i32 0, i32 0, i32 0
  %161 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %160, align 8
  %162 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %45, align 8
  %163 = icmp eq %"class.base::internal::WorkerThread"** %161, %162
  br i1 %163, label %164, label %182

164:                                              ; preds = %159
  %165 = load i64, i64* %4, align 8
  %166 = icmp ult i64 %157, %165
  br i1 %166, label %167, label %182

167:                                              ; preds = %164
  %168 = call %"class.base::internal::WorkerThread"* @_ZN4base8internal15ThreadGroupImpl35CreateAndRegisterWorkerLockRequiredEPNS1_22ScopedCommandsExecutorE(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %12) #16
  call void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* %44, %"class.base::internal::WorkerThread"* %168) #16
  %169 = icmp eq %"class.base::internal::WorkerThread"* %168, null
  br i1 %169, label %182, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %168, i64 0, i32 1
  %172 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %171, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %173 = atomicrmw sub i32* %172, i32 1 acq_rel
  %174 = icmp eq i32 %173, 1
  br i1 %174, label %175, label %182

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %171, i64 -2
  %177 = bitcast %"class.base::RefCountedThreadSafe.57"* %176 to %"class.base::internal::WorkerThread"*
  %178 = bitcast %"class.base::RefCountedThreadSafe.57"* %176 to void (%"class.base::internal::WorkerThread"*)***
  %179 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %178, align 8
  %180 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %179, i64 3
  %181 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %180, align 8
  call void %181(%"class.base::internal::WorkerThread"* nonnull %177) #16
  br label %182

182:                                              ; preds = %175, %170, %167, %164, %159, %153, %82
  %183 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %184 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %183) #16
  br i1 %184, label %200, label %185

185:                                              ; preds = %182
  %186 = load i64, i64* %25, align 8
  %187 = load i64, i64* %4, align 8
  %188 = icmp ult i64 %186, %187
  br i1 %188, label %200, label %189

189:                                              ; preds = %185
  %190 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %183) #16
  %191 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %190, i64 0, i32 0
  %192 = load i8, i8* %191, align 8
  %193 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %183) #16
  %194 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %193, i64 0, i32 1
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i16
  %197 = shl nuw i16 %196, 8
  %198 = zext i8 %192 to i16
  %199 = or i16 %197, %198
  br label %200

200:                                              ; preds = %182, %185, %189
  %201 = phi i16 [ %199, %189 ], [ 0, %185 ], [ 0, %182 ]
  %202 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %203 = bitcast %"struct.std::__1::__atomic_base"* %202 to i16*
  store atomic i16 %201, i16* %203 monotonic, align 2
  %204 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 13
  %205 = load i8, i8* %204, align 8, !range !2
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %207, label %233

207:                                              ; preds = %200
  %208 = load i64, i64* %13, align 8
  %209 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %15) #16
  %210 = add i64 %209, %208
  %211 = load i64, i64* %18, align 8
  %212 = icmp ugt i64 %210, %211
  br i1 %212, label %213, label %217

213:                                              ; preds = %207
  %214 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 10
  %215 = load i32, i32* %214, align 4
  %216 = icmp sgt i32 %215, 0
  br i1 %216, label %230, label %217

217:                                              ; preds = %213, %207
  %218 = load i64, i64* %25, align 8
  %219 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %15) #16
  %220 = call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %15) #16
  %221 = add i64 %218, 1
  %222 = add i64 %221, %219
  %223 = add i64 %222, %220
  %224 = load i64, i64* %4, align 8
  %225 = icmp ugt i64 %223, %224
  br i1 %225, label %226, label %233

226:                                              ; preds = %217
  %227 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 9
  %228 = load i32, i32* %227, align 8
  %229 = icmp sgt i32 %228, 0
  br i1 %229, label %230, label %233

230:                                              ; preds = %226, %213
  %231 = getelementptr inbounds %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor", %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %1, i64 4
  %232 = bitcast %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* %231 to i8*
  store i8 1, i8* %232, align 8
  store i8 1, i8* %204, align 8
  br label %233

233:                                              ; preds = %230, %226, %217, %200, %7, %2
  ret void
}

declare %"class.base::internal::WorkerThread"* @_ZN4base8internal17WorkerThreadStack3PopEv(%"class.base::internal::WorkerThreadStack"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl36UpdateMinAllowedPriorityLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 6
  %3 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %2) #16
  br i1 %3, label %21, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %6, %8
  br i1 %9, label %21, label %10

10:                                               ; preds = %4
  %11 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %2) #16
  %12 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %11, i64 0, i32 0
  %13 = load i8, i8* %12, align 8
  %14 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %2) #16
  %15 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %14, i64 0, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = zext i8 %13 to i16
  %20 = or i16 %18, %19
  br label %21

21:                                               ; preds = %1, %4, %10
  %22 = phi i16 [ %20, %10 ], [ 0, %4 ], [ 0, %1 ]
  %23 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 7, i32 0
  %24 = bitcast %"struct.std::__1::__atomic_base"* %23 to i16*
  store atomic i16 %22, i16* %24 monotonic, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl14AdjustMaxTasksEv(%"class.base::internal::ThreadGroupImpl"*) #0 align 2 {
  %2 = alloca %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", align 8
  %3 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %3) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 232, i1 false)
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 0
  call void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %4) #16
  %5 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 1
  store %"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroupImpl"** %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 2
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5
  %8 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 1, i32 0
  %11 = bitcast %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 65, i1 false) #16
  store %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %8, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 1
  %14 = ptrtoint %"class.base::StackVector"* %7 to i64
  %15 = bitcast %"struct.std::__1::__compressed_pair_elem.119"* %13 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.std::__1::pair"** %16 to i64*
  %18 = bitcast %"class.std::__1::vector.115"* %12 to i64*
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %20 = bitcast %"struct.std::__1::pair"** %19 to i64*
  store i8 1, i8* %9, align 8
  %21 = ptrtoint i8* %9 to i64
  store i64 %14, i64* %18, align 8
  store i64 %14, i64* %20, align 8
  store i64 %21, i64* %17, align 8
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0, i32 3
  %23 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %23) #16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26, !prof !7

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %22, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %27) #16
  br label %28

28:                                               ; preds = %1, %26
  %29 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 13
  store i8 0, i8* %29, align 8
  %30 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 0
  %31 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %30, align 8
  %32 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %33 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %32, align 8
  %34 = icmp eq %class.scoped_refptr.15* %31, %33
  br i1 %34, label %35, label %41

35:                                               ; preds = %65, %28
  %36 = bitcast %"class.base::internal::ThreadGroupImpl"* %0 to void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)***
  %37 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)**, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %37, i64 7
  %39 = load void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)*, void (%"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*)** %38, align 8
  call void %39(%"class.base::internal::ThreadGroupImpl"* %0, %"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"* nonnull %4) #16
  %40 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %23) #16
  call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* nonnull %2) #16
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %3) #16
  ret void

41:                                               ; preds = %28, %65
  %42 = phi %class.scoped_refptr.15* [ %66, %65 ], [ %31, %28 ]
  %43 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %42, i64 0, i32 0
  %44 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %43, align 8
  %45 = icmp eq %"class.base::internal::WorkerThread"* %44, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i32* %47, i32 1 monotonic
  %49 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %44, i64 0, i32 10, i32 0, i32 0, i32 0
  %50 = bitcast %"class.base::internal::WorkerThread::Delegate"** %49 to %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"**
  %51 = load %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"** %50, align 8
  call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl34MaybeIncrementMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %51)
  %52 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %44, i64 0, i32 1
  %53 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = atomicrmw sub i32* %53, i32 1 acq_rel
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %65

56:                                               ; preds = %46
  %57 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %52, i64 -2
  %58 = bitcast %"class.base::RefCountedThreadSafe.57"* %57 to %"class.base::internal::WorkerThread"*
  %59 = bitcast %"class.base::RefCountedThreadSafe.57"* %57 to void (%"class.base::internal::WorkerThread"*)***
  %60 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %59, align 8
  %61 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %60, i64 3
  %62 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %61, align 8
  call void %62(%"class.base::internal::WorkerThread"* nonnull %58) #16
  br label %65

63:                                               ; preds = %41
  %64 = load %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*, %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"** inttoptr (i64 104 to %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"**), align 8
  call void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImpl34MaybeIncrementMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %64)
  br label %65

65:                                               ; preds = %63, %46, %56
  %66 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %42, i64 1
  %67 = icmp eq %class.scoped_refptr.15* %66, %33
  br i1 %67, label %35, label %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl22ScheduleAdjustMaxTasksEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Location", align 8
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 3, i32 0
  %5 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %4, align 8
  %6 = bitcast %"class.base::SequencedTaskRunner"* %5 to %"class.base::TaskRunner"*
  %7 = bitcast %"class.base::Location"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #16
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 1091) #16
  %8 = ptrtoint %"class.base::internal::ThreadGroupImpl"* %0 to i64
  %9 = call i8* @_Znwm(i64 56) #18, !noalias !11
  %10 = bitcast i8* %9 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %10, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE) #16, !noalias !11
  %11 = getelementptr inbounds i8, i8* %9, i64 32
  %12 = bitcast i8* %11 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImpl14AdjustMaxTasksEv to i64), i64 0>, <2 x i64>* %12, align 8, !noalias !11
  %13 = getelementptr inbounds i8, i8* %9, i64 48
  %14 = bitcast i8* %13 to i64*
  store i64 %8, i64* %14, align 8, !noalias !11
  %15 = bitcast %"class.base::OnceCallback"* %3 to i8**
  store i8* %9, i8** %15, align 8, !alias.scope !11
  %16 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 1, i32 9, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::SequencedTaskRunner"* %5 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %19 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %18, align 8
  %20 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %19, align 8
  %21 = call zeroext i1 %20(%"class.base::TaskRunner"* %6, %"class.base::Location"* nonnull dereferenceable(32) %2, %"class.base::OnceCallback"* nonnull %3, i64 %17) #16
  %22 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %22) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #16
  ret void
}

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal15ThreadGroupImpl44ShouldPeriodicallyAdjustMaxTasksLockRequiredEv(%"class.base::internal::ThreadGroupImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 8
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 0
  %5 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %4) #16
  %6 = add i64 %5, %3
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 6
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %6, %8
  br i1 %9, label %10, label %14

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %10, %1
  %15 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 7
  %16 = load i64, i64* %15, align 8
  %17 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %4) #16
  %18 = tail call i64 @_ZNK4base8internal11ThreadGroup59GetNumAdditionalWorkersForForegroundTaskSourcesLockRequiredEv(%"class.base::internal::ThreadGroup"* %4) #16
  %19 = add i64 %16, 1
  %20 = add i64 %19, %17
  %21 = add i64 %20, %18
  %22 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 5
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %21, %23
  br i1 %24, label %25, label %29

25:                                               ; preds = %14
  %26 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %0, i64 0, i32 9
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, 0
  br label %29

29:                                               ; preds = %14, %25, %10
  %30 = phi i1 [ true, %10 ], [ false, %14 ], [ %28, %25 ]
  ret i1 %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal15ThreadGroupImpl18InitializedInStartC2Ev(%"struct.base::internal::ThreadGroupImpl::InitializedInStart"* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"struct.base::internal::ThreadGroupImpl::InitializedInStart", %"struct.base::internal::ThreadGroupImpl::InitializedInStart"* %0, i64 0, i32 3, i32 0
  %3 = getelementptr inbounds %"struct.base::internal::ThreadGroupImpl::InitializedInStart", %"struct.base::internal::ThreadGroupImpl::InitializedInStart"* %0, i64 0, i32 8, i32 0
  %4 = bitcast %"struct.base::internal::ThreadGroupImpl::InitializedInStart"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 20, i1 false)
  %5 = bitcast %"class.base::SequencedTaskRunner"** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = bitcast i64* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal15ThreadGroupImpl18InitializedInStartD2Ev(%"struct.base::internal::ThreadGroupImpl::InitializedInStart"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.base::internal::ThreadGroupImpl::InitializedInStart", %"struct.base::internal::ThreadGroupImpl::InitializedInStart"* %0, i64 0, i32 3, i32 0
  %3 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %2, align 8
  %4 = icmp eq %"class.base::SequencedTaskRunner"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %12) #16
  br label %13

13:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD2Ev(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 1
  %4 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %3, align 8
  %5 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %3, align 8
  %12 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %11, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16, !prof !3

15:                                               ; preds = %10
  tail call void @llvm.trap() #16
  unreachable

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %11, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %17) #16
  br label %18

18:                                               ; preds = %1, %6, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 0, i32 4, i32 1
  %4 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %3, align 8
  %5 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %3, align 8
  %12 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %11, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16, !prof !3

15:                                               ; preds = %10
  tail call void @llvm.trap() #16
  unreachable

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %11, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %17) #16
  br label %18

18:                                               ; preds = %1, %6, %16
  %19 = bitcast %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %19) #18
  ret void
}

declare void @_ZN4base8internal12WorkerThread8Delegate11WaitForWorkEPNS_13WaitableEventE(%"class.base::internal::WorkerThread::Delegate"*, %"class.base::WaitableEvent"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD1Ev(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 -1, i32 5
  %3 = bitcast i8* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 56
  %5 = bitcast i8* %4 to %"class.base::internal::TrackedRefFactory.48"**
  %6 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %5, align 8
  %7 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %5, align 8
  %14 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %13, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18, !prof !3

17:                                               ; preds = %12
  tail call void @llvm.trap() #16
  unreachable

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %13, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %19) #16
  br label %20

20:                                               ; preds = %1, %8, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn8_N4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplD0Ev(%"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl", %"class.base::internal::ThreadGroupImpl::WorkerThreadDelegateImpl"* %0, i64 -1, i32 5
  %3 = bitcast i8* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*], [7 x i8*] }, { [14 x i8*], [7 x i8*] }* @_ZTVN4base8internal15ThreadGroupImpl24WorkerThreadDelegateImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 56
  %5 = bitcast i8* %4 to %"class.base::internal::TrackedRefFactory.48"**
  %6 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %5, align 8
  %7 = icmp eq %"class.base::internal::TrackedRefFactory.48"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = load %"class.base::internal::TrackedRefFactory.48"*, %"class.base::internal::TrackedRefFactory.48"** %5, align 8
  %14 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %13, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18, !prof !3

17:                                               ; preds = %12
  tail call void @llvm.trap() #16
  unreachable

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.base::internal::TrackedRefFactory.48", %"class.base::internal::TrackedRefFactory.48"* %13, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %19) #16
  br label %20

20:                                               ; preds = %1, %8, %18
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"*, %"class.base::Lock"*) unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

declare void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorC2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*) unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor9FlushImplEv(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::Location", align 8
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %4, align 8
  %6 = icmp eq %"class.base::internal::WorkerThread"* %5, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %1
  tail call void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"* nonnull %5) #16
  %8 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  %9 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 2, i32 1, i32 0, i32 1
  %11 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %10, align 8
  %12 = icmp eq %class.scoped_refptr.15* %9, %11
  br i1 %12, label %36, label %13

13:                                               ; preds = %7, %33
  %14 = phi %class.scoped_refptr.15* [ %34, %33 ], [ %9, %7 ]
  %15 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %14, i64 0, i32 0
  %16 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %15, align 8
  %17 = icmp eq %"class.base::internal::WorkerThread"* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"* null) #16
  br label %33

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %16, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 1 monotonic
  tail call void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"* nonnull %16) #16
  %22 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %16, i64 0, i32 1
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %22, i64 -2
  %28 = bitcast %"class.base::RefCountedThreadSafe.57"* %27 to %"class.base::internal::WorkerThread"*
  %29 = bitcast %"class.base::RefCountedThreadSafe.57"* %27 to void (%"class.base::internal::WorkerThread"*)***
  %30 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %30, i64 3
  %32 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %31, align 8
  tail call void %32(%"class.base::internal::WorkerThread"* nonnull %28) #16
  br label %33

33:                                               ; preds = %26, %19, %18
  %34 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %14, i64 1
  %35 = icmp eq %class.scoped_refptr.15* %34, %11
  br i1 %35, label %36, label %13

36:                                               ; preds = %33, %1, %7
  %37 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 3
  tail call void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor15WorkerContainer13ForEachWorkerIZNS2_9FlushImplEvEUlPNS0_12WorkerThreadEE0_EEvT_(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %37, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0)
  %38 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 4
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 1
  %43 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %42, align 8
  %44 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  %45 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %43, i64 0, i32 1, i32 3, i32 0
  %46 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %45, align 8
  %47 = bitcast %"class.base::SequencedTaskRunner"* %46 to %"class.base::TaskRunner"*
  %48 = bitcast %"class.base::Location"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #16
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 1091) #16
  %49 = ptrtoint %"class.base::internal::ThreadGroupImpl"* %43 to i64
  %50 = call i8* @_Znwm(i64 56) #18, !noalias !16
  %51 = bitcast i8* %50 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %51, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE) #16, !noalias !16
  %52 = getelementptr inbounds i8, i8* %50, i64 32
  %53 = bitcast i8* %52 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::internal::ThreadGroupImpl"*)* @_ZN4base8internal15ThreadGroupImpl14AdjustMaxTasksEv to i64), i64 0>, <2 x i64>* %53, align 8, !noalias !16
  %54 = getelementptr inbounds i8, i8* %50, i64 48
  %55 = bitcast i8* %54 to i64*
  store i64 %49, i64* %55, align 8, !noalias !16
  %56 = bitcast %"class.base::OnceCallback"* %3 to i8**
  store i8* %50, i8** %56, align 8, !alias.scope !16
  %57 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %43, i64 0, i32 1, i32 9, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.base::SequencedTaskRunner"* %46 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %60 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %59, align 8
  %61 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %60, align 8
  %62 = call zeroext i1 %61(%"class.base::TaskRunner"* %47, %"class.base::Location"* nonnull dereferenceable(32) %2, %"class.base::OnceCallback"* nonnull %3, i64 %58) #16
  %63 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %63) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  br label %64

64:                                               ; preds = %36, %41
  %65 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 5, i32 0, i32 2
  %66 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %65, i64 0, i32 0, i32 0
  %67 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %66, align 8
  %68 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 1
  %69 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %68, align 8
  %70 = icmp eq %"struct.std::__1::pair"* %67, %69
  br i1 %70, label %87, label %75

71:                                               ; preds = %75
  %72 = bitcast %"class.std::__1::vector.115"* %65 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"struct.std::__1::pair"** %68 to i64*
  store i64 %73, i64* %74, align 8
  br label %87

75:                                               ; preds = %64, %75
  %76 = phi %"struct.std::__1::pair"* [ %85, %75 ], [ %67, %64 ]
  %77 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %76, i64 0, i32 0
  %78 = load %"class.base::HistogramBase"*, %"class.base::HistogramBase"** %77, align 8
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %76, i64 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = bitcast %"class.base::HistogramBase"* %78 to void (%"class.base::HistogramBase"*, i32)***
  %82 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %82, i64 6
  %84 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %83, align 8
  call void %84(%"class.base::HistogramBase"* %78, i32 %80) #16
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %76, i64 1
  %86 = icmp eq %"struct.std::__1::pair"* %85, %69
  br i1 %86, label %71, label %75

87:                                               ; preds = %71, %64
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal11ThreadGroup26BaseScopedCommandsExecutorD2Ev(%"class.base::internal::ThreadGroup::BaseScopedCommandsExecutor"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal15ThreadGroupImpl22ScopedCommandsExecutor15WorkerContainer13ForEachWorkerIZNS2_9FlushImplEvEUlPNS0_12WorkerThreadEE0_EEvT_(%"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"*, %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %3, align 8
  %5 = icmp eq %"class.base::internal::WorkerThread"* %4, null
  br i1 %5, label %59, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor"* %1, i64 0, i32 1
  %8 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %8, i64 0, i32 1, i32 4
  %10 = load %"class.base::WorkerThreadObserver"*, %"class.base::WorkerThreadObserver"** %9, align 8
  %11 = tail call zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"* nonnull %4, %"class.base::WorkerThreadObserver"* %10) #16
  %12 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %13 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %12, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %12, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  notail call void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"* %17) #16
  br label %18

18:                                               ; preds = %6, %16
  %19 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer", %"class.base::internal::ThreadGroupImpl::ScopedCommandsExecutor::WorkerContainer"* %0, i64 0, i32 1, i32 0, i32 1
  %22 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %21, align 8
  %23 = icmp eq %class.scoped_refptr.15* %20, %22
  br i1 %23, label %59, label %24

24:                                               ; preds = %18, %56
  %25 = phi %class.scoped_refptr.15* [ %57, %56 ], [ %20, %18 ]
  %26 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %25, i64 0, i32 0
  %27 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %26, align 8
  %28 = icmp eq %"class.base::internal::WorkerThread"* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %27, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 1 monotonic
  br label %32

32:                                               ; preds = %24, %29
  %33 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %34 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %33, i64 0, i32 1, i32 4
  %35 = load %"class.base::WorkerThreadObserver"*, %"class.base::WorkerThreadObserver"** %34, align 8
  %36 = tail call zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"* %27, %"class.base::WorkerThreadObserver"* %35) #16
  %37 = load %"class.base::internal::ThreadGroupImpl"*, %"class.base::internal::ThreadGroupImpl"** %7, align 8
  %38 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %37, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.base::internal::ThreadGroupImpl", %"class.base::internal::ThreadGroupImpl"* %37, i64 0, i32 19, i32 0, i32 0, i32 0, i32 2, i32 0
  notail call void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"* %42) #16
  br label %43

43:                                               ; preds = %32, %41
  br i1 %28, label %56, label %44

44:                                               ; preds = %43
  %45 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %27, i64 0, i32 1
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw sub i32* %46, i32 1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %56

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %45, i64 -2
  %51 = bitcast %"class.base::RefCountedThreadSafe.57"* %50 to %"class.base::internal::WorkerThread"*
  %52 = bitcast %"class.base::RefCountedThreadSafe.57"* %50 to void (%"class.base::internal::WorkerThread"*)***
  %53 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %53, i64 3
  %55 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %54, align 8
  tail call void %55(%"class.base::internal::WorkerThread"* nonnull %51) #16
  br label %56

56:                                               ; preds = %43, %44, %49
  %57 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %25, i64 1
  %58 = icmp eq %class.scoped_refptr.15* %57, %22
  br i1 %58, label %59, label %24

59:                                               ; preds = %56, %18, %2
  ret void
}

declare void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

declare zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"*, %"class.base::WorkerThreadObserver"*) local_unnamed_addr #1

declare void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"*) unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #12

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIPN4base13HistogramBaseEiEENS2_14StackAllocatorIS5_Lm5EEEE24__emplace_back_slow_pathIJRS4_RiEEEvDpOT_(%"class.std::__1::vector.115"*, %"class.base::HistogramBase"** dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #13 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.std::__1::pair"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.115"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 4
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 1152921504606846975
  br i1 %13, label %14, label %16

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector.115"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #17
  unreachable

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.std::__1::pair"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = ashr exact i64 %20, 4
  %22 = icmp ult i64 %21, 576460752303423487
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = ashr exact i64 %20, 3
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %49, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 1152921504606846975, %16 ]
  %30 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %4, i64 0, i32 0
  %31 = load %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"*, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %30, align 8
  %32 = icmp eq %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %31, null
  br i1 %32, label %42, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source", %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %31, i64 0, i32 1
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  %37 = icmp ult i64 %29, 6
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  store i8 1, i8* %34, align 8
  %40 = bitcast %"class.base::StackAllocator"* %4 to %"struct.std::__1::pair"**
  %41 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %40, align 8
  br label %49

42:                                               ; preds = %33, %28
  %43 = icmp ugt i64 %29, 1152921504606846975
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #17
  unreachable

45:                                               ; preds = %42
  %46 = shl i64 %29, 4
  %47 = tail call i8* @_Znwm(i64 %46) #18
  %48 = bitcast i8* %47 to %"struct.std::__1::pair"*
  br label %49

49:                                               ; preds = %23, %39, %45
  %50 = phi i64 [ 0, %23 ], [ %29, %39 ], [ %29, %45 ]
  %51 = phi %"struct.std::__1::pair"* [ null, %23 ], [ %41, %39 ], [ %48, %45 ]
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 %11
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 %50
  %54 = ptrtoint %"struct.std::__1::pair"* %53 to i64
  %55 = bitcast %"class.base::HistogramBase"** %1 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"struct.std::__1::pair"* %52 to i64*
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 %11, i32 1
  %59 = load i32, i32* %2, align 4
  store i32 %59, i32* %58, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %52, i64 1
  %61 = ptrtoint %"struct.std::__1::pair"* %60 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %0, i64 0, i32 0, i32 0
  %63 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %62, align 8
  %64 = ptrtoint %"struct.std::__1::pair"* %63 to i64
  %65 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %66 = icmp eq %"struct.std::__1::pair"* %65, %63
  br i1 %66, label %113, label %67

67:                                               ; preds = %49
  %68 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %65, i64 -1, i32 0
  %69 = ptrtoint %"class.base::HistogramBase"** %68 to i64
  %70 = sub i64 %69, %64
  %71 = lshr i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %67, %75
  %76 = phi %"struct.std::__1::pair"* [ %79, %75 ], [ %52, %67 ]
  %77 = phi %"struct.std::__1::pair"* [ %80, %75 ], [ %65, %67 ]
  %78 = phi i64 [ %83, %75 ], [ %73, %67 ]
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %76, i64 -1
  %80 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %77, i64 -1
  %81 = bitcast %"struct.std::__1::pair"* %79 to i8*
  %82 = bitcast %"struct.std::__1::pair"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 16, i1 false) #16
  %83 = add i64 %78, -1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %75, !llvm.loop !21

85:                                               ; preds = %75, %67
  %86 = phi %"struct.std::__1::pair"* [ undef, %67 ], [ %79, %75 ]
  %87 = phi %"struct.std::__1::pair"* [ %52, %67 ], [ %79, %75 ]
  %88 = phi %"struct.std::__1::pair"* [ %65, %67 ], [ %80, %75 ]
  %89 = icmp ult i64 %70, 48
  br i1 %89, label %110, label %90

90:                                               ; preds = %85, %90
  %91 = phi %"struct.std::__1::pair"* [ %105, %90 ], [ %87, %85 ]
  %92 = phi %"struct.std::__1::pair"* [ %106, %90 ], [ %88, %85 ]
  %93 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 -1
  %94 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 -1
  %95 = bitcast %"struct.std::__1::pair"* %93 to i8*
  %96 = bitcast %"struct.std::__1::pair"* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #16
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 -2
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 -2
  %99 = bitcast %"struct.std::__1::pair"* %97 to i8*
  %100 = bitcast %"struct.std::__1::pair"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #16
  %101 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 -3
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 -3
  %103 = bitcast %"struct.std::__1::pair"* %101 to i8*
  %104 = bitcast %"struct.std::__1::pair"* %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 16, i1 false) #16
  %105 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 -4
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 -4
  %107 = bitcast %"struct.std::__1::pair"* %105 to i8*
  %108 = bitcast %"struct.std::__1::pair"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 16, i1 false) #16
  %109 = icmp eq %"struct.std::__1::pair"* %106, %63
  br i1 %109, label %110, label %90

110:                                              ; preds = %90, %85
  %111 = phi %"struct.std::__1::pair"* [ %86, %85 ], [ %105, %90 ]
  %112 = load i64, i64* %8, align 8
  br label %113

113:                                              ; preds = %49, %110
  %114 = phi %"struct.std::__1::pair"* [ %111, %110 ], [ %52, %49 ]
  %115 = phi i64 [ %112, %110 ], [ %64, %49 ]
  %116 = ptrtoint %"struct.std::__1::pair"* %114 to i64
  store i64 %116, i64* %8, align 8
  store i64 %61, i64* %6, align 8
  store i64 %54, i64* %18, align 8
  %117 = icmp eq i64 %115, 0
  br i1 %117, label %130, label %118

118:                                              ; preds = %113
  %119 = inttoptr i64 %115 to %"struct.std::__1::pair"*
  %120 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %4, i64 0, i32 0
  %121 = load %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"*, %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"** %120, align 8
  %122 = icmp ne %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %121, null
  %123 = bitcast %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %121 to %"struct.std::__1::pair"*
  %124 = icmp eq %"struct.std::__1::pair"* %119, %123
  %125 = and i1 %122, %124
  br i1 %125, label %126, label %128

126:                                              ; preds = %118
  %127 = getelementptr inbounds %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source", %"struct.base::StackAllocator<std::__1::pair<base::HistogramBase *, int>, 5>::Source"* %121, i64 0, i32 1
  store i8 0, i8* %127, align 8
  br label %130

128:                                              ; preds = %118
  %129 = inttoptr i64 %115 to i8*
  tail call void @_ZdlPv(i8* %129) #18
  br label %130

130:                                              ; preds = %113, %126, %128
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"*, %class.scoped_refptr.15* dereferenceable(8)) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr.15** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.13"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr.15** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #17
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #18
  %33 = bitcast i8* %32 to %class.scoped_refptr.15*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr.15* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr.15* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr.15* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr.15* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr.15* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %46, align 8
  %48 = ptrtoint %class.scoped_refptr.15* %47 to i64
  %49 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %3, align 8
  %50 = icmp eq %class.scoped_refptr.15* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr.15, %class.scoped_refptr.15* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.base::internal::WorkerThread"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr.15* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr.15* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr.15* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr.15* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !23

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr.15* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr.15* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr.15* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr.15* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr.15* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr.15* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr.15* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr.15* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr.15* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr.15* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr.15* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr.15* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr.15* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr.15* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr.15* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr.15* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr.15* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr.15* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr.15* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr.15* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr.15* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %123, align 8
  %127 = icmp eq %class.scoped_refptr.15* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr.15* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr.15* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr.15* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr.15* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr.15*
  %138 = icmp eq %class.scoped_refptr.15* %133, %137
  br i1 %138, label %159, label %139

139:                                              ; preds = %132, %157
  %140 = phi %class.scoped_refptr.15* [ %141, %157 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %141, i64 0, i32 0
  %143 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %142, align 8
  %144 = icmp eq %"class.base::internal::WorkerThread"* %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %143, i64 0, i32 1
  %147 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw sub i32* %147, i32 1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %157

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %146, i64 -2
  %152 = bitcast %"class.base::RefCountedThreadSafe.57"* %151 to %"class.base::internal::WorkerThread"*
  %153 = bitcast %"class.base::RefCountedThreadSafe.57"* %151 to void (%"class.base::internal::WorkerThread"*)***
  %154 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %154, i64 3
  %156 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %155, align 8
  tail call void %156(%"class.base::internal::WorkerThread"* nonnull %152) #16
  br label %157

157:                                              ; preds = %150, %145, %139
  %158 = icmp eq %class.scoped_refptr.15* %141, %137
  br i1 %158, label %159, label %139

159:                                              ; preds = %157, %132
  %160 = icmp eq i64 %135, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %162) #18
  br label %163

163:                                              ; preds = %159, %161
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #15

; Function Attrs: nounwind
declare void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #14

declare void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"*, i32, i32) unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

declare void @_ZN4base32GetFieldTrialParamValueByFeatureERKNS_7FeatureERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %"struct.base::Feature"* dereferenceable(16), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base19LogInvalidEnumValueERKNS_7FeatureERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_i(%"struct.base::Feature"* dereferenceable(16), %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #1

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_(%"class.std::__1::vector.13"*, %class.scoped_refptr.15*, %class.scoped_refptr.15*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %class.scoped_refptr.15* %1 to i64
  %5 = ptrtoint %class.scoped_refptr.15* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %class.scoped_refptr.15** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.13"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %class.scoped_refptr.15*
  br i1 %15, label %138, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %class.scoped_refptr.15** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %1, i64 %22
  %25 = select i1 %23, %class.scoped_refptr.15* %24, %class.scoped_refptr.15* %2
  %26 = icmp eq %class.scoped_refptr.15* %25, %1
  br i1 %26, label %58, label %27

27:                                               ; preds = %17, %54
  %28 = phi %class.scoped_refptr.15* [ %56, %54 ], [ %16, %17 ]
  %29 = phi %class.scoped_refptr.15* [ %55, %54 ], [ %1, %17 ]
  %30 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %29, i64 0, i32 0
  %31 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %30, align 8
  %32 = icmp eq %"class.base::internal::WorkerThread"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %31, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %33, %27
  %37 = ptrtoint %"class.base::internal::WorkerThread"* %31 to i64
  %38 = bitcast %class.scoped_refptr.15* %28 to i64*
  %39 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %28, i64 0, i32 0
  %40 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.base::internal::WorkerThread"* %40, null
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %40, i64 0, i32 1
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %43, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe.57"* %48 to %"class.base::internal::WorkerThread"*
  %50 = bitcast %"class.base::RefCountedThreadSafe.57"* %48 to void (%"class.base::internal::WorkerThread"*)***
  %51 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %51, i64 3
  %53 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %52, align 8
  tail call void %53(%"class.base::internal::WorkerThread"* nonnull %49) #16
  br label %54

54:                                               ; preds = %47, %42, %36
  %55 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %29, i64 1
  %56 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %28, i64 1
  %57 = icmp eq %class.scoped_refptr.15* %55, %25
  br i1 %57, label %58, label %27

58:                                               ; preds = %54, %17
  %59 = phi %class.scoped_refptr.15* [ %16, %17 ], [ %56, %54 ]
  br i1 %23, label %60, label %114

60:                                               ; preds = %58
  %61 = load i64, i64* %19, align 8
  %62 = icmp eq %class.scoped_refptr.15* %25, %2
  br i1 %62, label %112, label %63

63:                                               ; preds = %60
  %64 = inttoptr i64 %61 to %class.scoped_refptr.15*
  %65 = xor i64 %22, -1
  %66 = getelementptr %class.scoped_refptr.15, %class.scoped_refptr.15* %2, i64 %65, i32 0
  %67 = ptrtoint %"class.base::internal::WorkerThread"** %66 to i64
  %68 = sub i64 %67, %4
  %69 = lshr i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %89, label %73

73:                                               ; preds = %63, %84
  %74 = phi %class.scoped_refptr.15* [ %86, %84 ], [ %64, %63 ]
  %75 = phi %class.scoped_refptr.15* [ %85, %84 ], [ %24, %63 ]
  %76 = phi i64 [ %87, %84 ], [ %71, %63 ]
  %77 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %75, i64 0, i32 0
  %78 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %77, align 8
  %79 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %74, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %78, %"class.base::internal::WorkerThread"** %79, align 8
  %80 = icmp eq %"class.base::internal::WorkerThread"* %78, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %78, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = atomicrmw add i32* %82, i32 1 monotonic
  br label %84

84:                                               ; preds = %81, %73
  %85 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %75, i64 1
  %86 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %74, i64 1
  %87 = add i64 %76, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %73, !llvm.loop !24

89:                                               ; preds = %84, %63
  %90 = phi %class.scoped_refptr.15* [ undef, %63 ], [ %86, %84 ]
  %91 = phi %class.scoped_refptr.15* [ %64, %63 ], [ %86, %84 ]
  %92 = phi %class.scoped_refptr.15* [ %24, %63 ], [ %85, %84 ]
  %93 = icmp ult i64 %68, 24
  br i1 %93, label %109, label %94

94:                                               ; preds = %89, %290
  %95 = phi %class.scoped_refptr.15* [ %292, %290 ], [ %91, %89 ]
  %96 = phi %class.scoped_refptr.15* [ %291, %290 ], [ %92, %89 ]
  %97 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 0, i32 0
  %98 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %97, align 8
  %99 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %95, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %98, %"class.base::internal::WorkerThread"** %99, align 8
  %100 = icmp eq %"class.base::internal::WorkerThread"* %98, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %98, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = atomicrmw add i32* %102, i32 1 monotonic
  br label %104

104:                                              ; preds = %101, %94
  %105 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 1, i32 0
  %106 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %105, align 8
  %107 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %95, i64 1, i32 0
  store %"class.base::internal::WorkerThread"* %106, %"class.base::internal::WorkerThread"** %107, align 8
  %108 = icmp eq %"class.base::internal::WorkerThread"* %106, null
  br i1 %108, label %274, label %271

109:                                              ; preds = %290, %89
  %110 = phi %class.scoped_refptr.15* [ %90, %89 ], [ %292, %290 ]
  %111 = ptrtoint %class.scoped_refptr.15* %110 to i64
  br label %112

112:                                              ; preds = %60, %109
  %113 = phi i64 [ %61, %60 ], [ %111, %109 ]
  store i64 %113, i64* %19, align 8
  br label %247

114:                                              ; preds = %58
  %115 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %18, align 8
  %116 = icmp eq %class.scoped_refptr.15* %115, %59
  br i1 %116, label %137, label %117

117:                                              ; preds = %114, %135
  %118 = phi %class.scoped_refptr.15* [ %119, %135 ], [ %115, %114 ]
  %119 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %118, i64 -1
  %120 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %119, i64 0, i32 0
  %121 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %120, align 8
  %122 = icmp eq %"class.base::internal::WorkerThread"* %121, null
  br i1 %122, label %135, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %121, i64 0, i32 1
  %125 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = atomicrmw sub i32* %125, i32 1 acq_rel
  %127 = icmp eq i32 %126, 1
  br i1 %127, label %128, label %135

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %124, i64 -2
  %130 = bitcast %"class.base::RefCountedThreadSafe.57"* %129 to %"class.base::internal::WorkerThread"*
  %131 = bitcast %"class.base::RefCountedThreadSafe.57"* %129 to void (%"class.base::internal::WorkerThread"*)***
  %132 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %131, align 8
  %133 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %132, i64 3
  %134 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %133, align 8
  tail call void %134(%"class.base::internal::WorkerThread"* nonnull %130) #16
  br label %135

135:                                              ; preds = %128, %123, %117
  %136 = icmp eq %class.scoped_refptr.15* %119, %59
  br i1 %136, label %137, label %117

137:                                              ; preds = %135, %114
  store %class.scoped_refptr.15* %59, %class.scoped_refptr.15** %18, align 8
  br label %247

138:                                              ; preds = %3
  %139 = icmp eq i64 %12, 0
  br i1 %139, label %171, label %140

140:                                              ; preds = %138
  %141 = inttoptr i64 %12 to i8*
  %142 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %143 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %142, align 8
  %144 = icmp eq %class.scoped_refptr.15* %143, %16
  br i1 %144, label %168, label %145

145:                                              ; preds = %140, %163
  %146 = phi %class.scoped_refptr.15* [ %147, %163 ], [ %143, %140 ]
  %147 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %146, i64 -1
  %148 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %147, i64 0, i32 0
  %149 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %148, align 8
  %150 = icmp eq %"class.base::internal::WorkerThread"* %149, null
  br i1 %150, label %163, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %149, i64 0, i32 1
  %153 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %152, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = atomicrmw sub i32* %153, i32 1 acq_rel
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %163

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %152, i64 -2
  %158 = bitcast %"class.base::RefCountedThreadSafe.57"* %157 to %"class.base::internal::WorkerThread"*
  %159 = bitcast %"class.base::RefCountedThreadSafe.57"* %157 to void (%"class.base::internal::WorkerThread"*)***
  %160 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %160, i64 3
  %162 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %161, align 8
  tail call void %162(%"class.base::internal::WorkerThread"* nonnull %158) #16
  br label %163

163:                                              ; preds = %156, %151, %145
  %164 = icmp eq %class.scoped_refptr.15* %147, %16
  br i1 %164, label %165, label %145

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.13"* %0 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %140
  %169 = phi i8* [ %167, %165 ], [ %141, %140 ]
  store %class.scoped_refptr.15* %16, %class.scoped_refptr.15** %142, align 8
  tail call void @_ZdlPv(i8* %169) #18
  %170 = bitcast %"class.std::__1::vector.13"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #16
  br label %171

171:                                              ; preds = %138, %168
  %172 = phi i64 [ %10, %138 ], [ 0, %168 ]
  %173 = icmp ugt i64 %7, 2305843009213693951
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  %175 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %175) #17
  unreachable

176:                                              ; preds = %171
  %177 = ashr exact i64 %172, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %179, label %186

179:                                              ; preds = %176
  %180 = ashr exact i64 %172, 2
  %181 = icmp ult i64 %180, %7
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = icmp ugt i64 %180, 2305843009213693951
  br i1 %183, label %184, label %186

184:                                              ; preds = %182
  %185 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %185) #17
  unreachable

186:                                              ; preds = %179, %176, %182
  %187 = phi i64 [ %180, %182 ], [ 2305843009213693951, %176 ], [ %7, %179 ]
  %188 = shl i64 %187, 3
  %189 = tail call i8* @_Znwm(i64 %188) #18
  %190 = bitcast i8* %189 to %class.scoped_refptr.15*
  %191 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %192 = bitcast %class.scoped_refptr.15** %191 to i8**
  store i8* %189, i8** %192, align 8
  %193 = bitcast %"class.std::__1::vector.13"* %0 to i8**
  store i8* %189, i8** %193, align 8
  %194 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %190, i64 %187
  store %class.scoped_refptr.15* %194, %class.scoped_refptr.15** %8, align 8
  %195 = bitcast %class.scoped_refptr.15** %191 to i64*
  %196 = ptrtoint i8* %189 to i64
  %197 = icmp eq %class.scoped_refptr.15* %1, %2
  br i1 %197, label %245, label %198

198:                                              ; preds = %186
  %199 = getelementptr %class.scoped_refptr.15, %class.scoped_refptr.15* %2, i64 -1, i32 0
  %200 = ptrtoint %"class.base::internal::WorkerThread"** %199 to i64
  %201 = sub i64 %200, %4
  %202 = lshr i64 %201, 3
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 3
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %222, label %206

206:                                              ; preds = %198, %217
  %207 = phi %class.scoped_refptr.15* [ %219, %217 ], [ %190, %198 ]
  %208 = phi %class.scoped_refptr.15* [ %218, %217 ], [ %1, %198 ]
  %209 = phi i64 [ %220, %217 ], [ %204, %198 ]
  %210 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %208, i64 0, i32 0
  %211 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %210, align 8
  %212 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %207, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %211, %"class.base::internal::WorkerThread"** %212, align 8
  %213 = icmp eq %"class.base::internal::WorkerThread"* %211, null
  br i1 %213, label %217, label %214

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %211, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = atomicrmw add i32* %215, i32 1 monotonic
  br label %217

217:                                              ; preds = %214, %206
  %218 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %208, i64 1
  %219 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %207, i64 1
  %220 = add i64 %209, -1
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %206, !llvm.loop !25

222:                                              ; preds = %217, %198
  %223 = phi %class.scoped_refptr.15* [ undef, %198 ], [ %219, %217 ]
  %224 = phi %class.scoped_refptr.15* [ %190, %198 ], [ %219, %217 ]
  %225 = phi %class.scoped_refptr.15* [ %1, %198 ], [ %218, %217 ]
  %226 = icmp ult i64 %201, 24
  br i1 %226, label %242, label %227

227:                                              ; preds = %222, %267
  %228 = phi %class.scoped_refptr.15* [ %269, %267 ], [ %224, %222 ]
  %229 = phi %class.scoped_refptr.15* [ %268, %267 ], [ %225, %222 ]
  %230 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %229, i64 0, i32 0
  %231 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %230, align 8
  %232 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %228, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %231, %"class.base::internal::WorkerThread"** %232, align 8
  %233 = icmp eq %"class.base::internal::WorkerThread"* %231, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %227
  %235 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %231, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = atomicrmw add i32* %235, i32 1 monotonic
  br label %237

237:                                              ; preds = %234, %227
  %238 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %229, i64 1, i32 0
  %239 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %238, align 8
  %240 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %228, i64 1, i32 0
  store %"class.base::internal::WorkerThread"* %239, %"class.base::internal::WorkerThread"** %240, align 8
  %241 = icmp eq %"class.base::internal::WorkerThread"* %239, null
  br i1 %241, label %251, label %248

242:                                              ; preds = %267, %222
  %243 = phi %class.scoped_refptr.15* [ %223, %222 ], [ %269, %267 ]
  %244 = ptrtoint %class.scoped_refptr.15* %243 to i64
  br label %245

245:                                              ; preds = %186, %242
  %246 = phi i64 [ %196, %186 ], [ %244, %242 ]
  store i64 %246, i64* %195, align 8
  br label %247

247:                                              ; preds = %112, %137, %245
  ret void

248:                                              ; preds = %237
  %249 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %239, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %250 = atomicrmw add i32* %249, i32 1 monotonic
  br label %251

251:                                              ; preds = %248, %237
  %252 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %229, i64 2, i32 0
  %253 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %252, align 8
  %254 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %228, i64 2, i32 0
  store %"class.base::internal::WorkerThread"* %253, %"class.base::internal::WorkerThread"** %254, align 8
  %255 = icmp eq %"class.base::internal::WorkerThread"* %253, null
  br i1 %255, label %259, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %253, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %258 = atomicrmw add i32* %257, i32 1 monotonic
  br label %259

259:                                              ; preds = %256, %251
  %260 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %229, i64 3, i32 0
  %261 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %260, align 8
  %262 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %228, i64 3, i32 0
  store %"class.base::internal::WorkerThread"* %261, %"class.base::internal::WorkerThread"** %262, align 8
  %263 = icmp eq %"class.base::internal::WorkerThread"* %261, null
  br i1 %263, label %267, label %264

264:                                              ; preds = %259
  %265 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %261, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = atomicrmw add i32* %265, i32 1 monotonic
  br label %267

267:                                              ; preds = %264, %259
  %268 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %229, i64 4
  %269 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %228, i64 4
  %270 = icmp eq %class.scoped_refptr.15* %268, %2
  br i1 %270, label %242, label %227

271:                                              ; preds = %104
  %272 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %106, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = atomicrmw add i32* %272, i32 1 monotonic
  br label %274

274:                                              ; preds = %271, %104
  %275 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 2, i32 0
  %276 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %275, align 8
  %277 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %95, i64 2, i32 0
  store %"class.base::internal::WorkerThread"* %276, %"class.base::internal::WorkerThread"** %277, align 8
  %278 = icmp eq %"class.base::internal::WorkerThread"* %276, null
  br i1 %278, label %282, label %279

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %276, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = atomicrmw add i32* %280, i32 1 monotonic
  br label %282

282:                                              ; preds = %279, %274
  %283 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 3, i32 0
  %284 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %283, align 8
  %285 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %95, i64 3, i32 0
  store %"class.base::internal::WorkerThread"* %284, %"class.base::internal::WorkerThread"** %285, align 8
  %286 = icmp eq %"class.base::internal::WorkerThread"* %284, null
  br i1 %286, label %290, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %284, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %289 = atomicrmw add i32* %288, i32 1 monotonic
  br label %290

290:                                              ; preds = %287, %282
  %291 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 4
  %292 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %95, i64 4
  %293 = icmp eq %class.scoped_refptr.15* %291, %2
  br i1 %293, label %109, label %94
}

declare void @_ZN4base8internal12WorkerThreadC1ENS_14ThreadPriorityENSt3__110unique_ptrINS1_8DelegateENS3_14default_deleteIS5_EEEENS0_10TrackedRefINS0_11TaskTrackerEEEPKNS0_11CheckedLockE(%"class.base::internal::WorkerThread"*, i32, %"class.base::internal::WorkerThread::Delegate"*, %"class.base::internal::TrackedRef"*, %"class.base::internal::CheckedLock"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE21__push_back_slow_pathIRKS5_EEvOT_(%"class.std::__1::vector.13"*, %class.scoped_refptr.15* dereferenceable(8)) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr.15** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.13"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr.15** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #17
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #18
  %33 = bitcast i8* %32 to %class.scoped_refptr.15*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr.15* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr.15* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %1, i64 0, i32 0
  %41 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %40, align 8
  %42 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %37, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %41, %"class.base::internal::WorkerThread"** %42, align 8
  %43 = icmp eq %"class.base::internal::WorkerThread"* %41, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %41, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic
  br label %47

47:                                               ; preds = %34, %44
  %48 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %37, i64 1
  %49 = ptrtoint %class.scoped_refptr.15* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 0
  %51 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %50, align 8
  %52 = ptrtoint %class.scoped_refptr.15* %51 to i64
  %53 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %3, align 8
  %54 = icmp eq %class.scoped_refptr.15* %53, %51
  br i1 %54, label %136, label %55

55:                                               ; preds = %47
  %56 = getelementptr %class.scoped_refptr.15, %class.scoped_refptr.15* %53, i64 -1, i32 0
  %57 = ptrtoint %"class.base::internal::WorkerThread"** %56 to i64
  %58 = sub i64 %57, %52
  %59 = lshr i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %55, %63
  %64 = phi %class.scoped_refptr.15* [ %67, %63 ], [ %37, %55 ]
  %65 = phi %class.scoped_refptr.15* [ %68, %63 ], [ %53, %55 ]
  %66 = phi i64 [ %73, %63 ], [ %61, %55 ]
  %67 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %64, i64 -1
  %68 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %65, i64 -1
  %69 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %68, i64 0, i32 0
  %70 = bitcast %class.scoped_refptr.15* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %class.scoped_refptr.15* %67 to i64*
  store i64 %71, i64* %72, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %69, align 8
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !26

75:                                               ; preds = %63, %55
  %76 = phi %class.scoped_refptr.15* [ undef, %55 ], [ %67, %63 ]
  %77 = phi %class.scoped_refptr.15* [ %37, %55 ], [ %67, %63 ]
  %78 = phi %class.scoped_refptr.15* [ %53, %55 ], [ %68, %63 ]
  %79 = icmp ult i64 %58, 56
  br i1 %79, label %132, label %80

80:                                               ; preds = %75, %80
  %81 = phi %class.scoped_refptr.15* [ %125, %80 ], [ %77, %75 ]
  %82 = phi %class.scoped_refptr.15* [ %126, %80 ], [ %78, %75 ]
  %83 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -1
  %84 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -1
  %85 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %84, i64 0, i32 0
  %86 = bitcast %class.scoped_refptr.15* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %class.scoped_refptr.15* %83 to i64*
  store i64 %87, i64* %88, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %85, align 8
  %89 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -2
  %90 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -2
  %91 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %90, i64 0, i32 0
  %92 = bitcast %class.scoped_refptr.15* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.scoped_refptr.15* %89 to i64*
  store i64 %93, i64* %94, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %91, align 8
  %95 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -3
  %96 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -3
  %97 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %96, i64 0, i32 0
  %98 = bitcast %class.scoped_refptr.15* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %class.scoped_refptr.15* %95 to i64*
  store i64 %99, i64* %100, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %97, align 8
  %101 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -4
  %102 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -4
  %103 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %102, i64 0, i32 0
  %104 = bitcast %class.scoped_refptr.15* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %class.scoped_refptr.15* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %103, align 8
  %107 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -5
  %108 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -5
  %109 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %108, i64 0, i32 0
  %110 = bitcast %class.scoped_refptr.15* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %class.scoped_refptr.15* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %109, align 8
  %113 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -6
  %114 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -6
  %115 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %114, i64 0, i32 0
  %116 = bitcast %class.scoped_refptr.15* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %class.scoped_refptr.15* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %115, align 8
  %119 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -7
  %120 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -7
  %121 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %120, i64 0, i32 0
  %122 = bitcast %class.scoped_refptr.15* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %class.scoped_refptr.15* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %121, align 8
  %125 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %81, i64 -8
  %126 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %82, i64 -8
  %127 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %126, i64 0, i32 0
  %128 = bitcast %class.scoped_refptr.15* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %class.scoped_refptr.15* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %127, align 8
  %131 = icmp eq %class.scoped_refptr.15* %126, %51
  br i1 %131, label %132, label %80

132:                                              ; preds = %80, %75
  %133 = phi %class.scoped_refptr.15* [ %76, %75 ], [ %125, %80 ]
  %134 = load i64, i64* %6, align 8
  %135 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %3, align 8
  br label %136

136:                                              ; preds = %47, %132
  %137 = phi %class.scoped_refptr.15* [ %135, %132 ], [ %51, %47 ]
  %138 = phi %class.scoped_refptr.15* [ %133, %132 ], [ %37, %47 ]
  %139 = phi i64 [ %134, %132 ], [ %52, %47 ]
  %140 = ptrtoint %class.scoped_refptr.15* %138 to i64
  store i64 %140, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %141 = inttoptr i64 %139 to %class.scoped_refptr.15*
  %142 = icmp eq %class.scoped_refptr.15* %137, %141
  br i1 %142, label %163, label %143

143:                                              ; preds = %136, %161
  %144 = phi %class.scoped_refptr.15* [ %145, %161 ], [ %137, %136 ]
  %145 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %144, i64 -1
  %146 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %145, i64 0, i32 0
  %147 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %146, align 8
  %148 = icmp eq %"class.base::internal::WorkerThread"* %147, null
  br i1 %148, label %161, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %147, i64 0, i32 1
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = atomicrmw sub i32* %151, i32 1 acq_rel
  %153 = icmp eq i32 %152, 1
  br i1 %153, label %154, label %161

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.base::RefCountedThreadSafe.57", %"class.base::RefCountedThreadSafe.57"* %150, i64 -2
  %156 = bitcast %"class.base::RefCountedThreadSafe.57"* %155 to %"class.base::internal::WorkerThread"*
  %157 = bitcast %"class.base::RefCountedThreadSafe.57"* %155 to void (%"class.base::internal::WorkerThread"*)***
  %158 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %157, align 8
  %159 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %158, i64 3
  %160 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %159, align 8
  tail call void %160(%"class.base::internal::WorkerThread"* nonnull %156) #16
  br label %161

161:                                              ; preds = %154, %149, %143
  %162 = icmp eq %class.scoped_refptr.15* %145, %141
  br i1 %162, label %163, label %143

163:                                              ; preds = %161, %136
  %164 = icmp eq i64 %139, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = inttoptr i64 %139 to i8*
  tail call void @_ZdlPv(i8* %166) #18
  br label %167

167:                                              ; preds = %163, %165
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.base::internal::ThreadGroupImpl"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.base::internal::ThreadGroupImpl"*)**
  %21 = load void (%"class.base::internal::ThreadGroupImpl"*)*, void (%"class.base::internal::ThreadGroupImpl"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.base::internal::ThreadGroupImpl"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.base::internal::ThreadGroupImpl"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.base::internal::ThreadGroupImpl"* %12) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #18
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind readnone speculatable }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!6 = distinct !{!6, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN4base8internal17TrackedRefFactoryINS0_15ThreadGroupImplEE13GetTrackedRefEv: argument 0"}
!10 = distinct !{!10, !"_ZN4base8internal17TrackedRefFactoryINS0_15ThreadGroupImplEE13GetTrackedRefEv"}
!11 = !{!12, !14}
!12 = distinct !{!12, !13, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_: argument 0"}
!13 = distinct !{!13, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_"}
!14 = distinct !{!14, !15, !"_ZN4base8BindOnceIMNS_8internal15ThreadGroupImplEFvvEJNS1_17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS9_DpOSA_: argument 0"}
!15 = distinct !{!15, !"_ZN4base8BindOnceIMNS_8internal15ThreadGroupImplEFvvEJNS1_17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS9_DpOSA_"}
!16 = !{!17, !19}
!17 = distinct !{!17, !18, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_: argument 0"}
!18 = distinct !{!18, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_15ThreadGroupImplEFvvEJNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_"}
!19 = distinct !{!19, !20, !"_ZN4base8BindOnceIMNS_8internal15ThreadGroupImplEFvvEJNS1_17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS9_DpOSA_: argument 0"}
!20 = distinct !{!20, !"_ZN4base8BindOnceIMNS_8internal15ThreadGroupImplEFvvEJNS1_17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS9_DpOSA_"}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.unroll.disable"}
!23 = distinct !{!23, !22}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !22}
!26 = distinct !{!26, !22}
