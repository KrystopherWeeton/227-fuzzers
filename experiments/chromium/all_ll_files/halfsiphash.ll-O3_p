; ModuleID = '../../v8/src/third_party/siphash/halfsiphash.cc'
source_filename = "../../v8/src/third_party/siphash/halfsiphash.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z11halfsiphashjm(i32, i64) local_unnamed_addr #0 {
  %3 = trunc i64 %1 to i32
  %4 = lshr i64 %1, 32
  %5 = trunc i64 %4 to i32
  %6 = xor i32 %3, 1819895653
  %7 = xor i32 %0, 1952801890
  %8 = xor i32 %7, %5
  %9 = add i32 %5, %3
  %10 = shl nuw nsw i64 %4, 5
  %11 = lshr i64 %1, 59
  %12 = or i64 %10, %11
  %13 = trunc i64 %12 to i32
  %14 = xor i32 %9, %13
  %15 = shl i32 %9, 16
  %16 = lshr i32 %9, 16
  %17 = or i32 %15, %16
  %18 = add i32 %8, %6
  %19 = shl i32 %8, 8
  %20 = lshr i32 %8, 24
  %21 = or i32 %19, %20
  %22 = xor i32 %21, %18
  %23 = add i32 %22, %17
  %24 = shl i32 %22, 7
  %25 = lshr i32 %22, 25
  %26 = or i32 %24, %25
  %27 = xor i32 %26, %23
  %28 = add i32 %18, %14
  %29 = shl i32 %14, 13
  %30 = lshr i32 %14, 19
  %31 = or i32 %29, %30
  %32 = xor i32 %31, %28
  %33 = shl i32 %28, 16
  %34 = lshr i32 %28, 16
  %35 = or i32 %33, %34
  %36 = add i32 %23, %32
  %37 = shl i32 %32, 5
  %38 = lshr i32 %32, 27
  %39 = or i32 %37, %38
  %40 = xor i32 %39, %36
  %41 = shl i32 %36, 16
  %42 = lshr i32 %36, 16
  %43 = or i32 %41, %42
  %44 = add i32 %27, %35
  %45 = shl i32 %27, 8
  %46 = lshr i32 %27, 24
  %47 = or i32 %45, %46
  %48 = xor i32 %47, %44
  %49 = add i32 %48, %43
  %50 = shl i32 %48, 7
  %51 = lshr i32 %48, 25
  %52 = or i32 %50, %51
  %53 = xor i32 %52, %49
  %54 = add i32 %44, %40
  %55 = shl i32 %40, 13
  %56 = lshr i32 %40, 19
  %57 = or i32 %55, %56
  %58 = xor i32 %57, %54
  %59 = shl i32 %54, 16
  %60 = lshr i32 %54, 16
  %61 = or i32 %59, %60
  %62 = xor i32 %49, %0
  %63 = xor i32 %53, 67108864
  %64 = add i32 %62, %58
  %65 = shl i32 %58, 5
  %66 = lshr i32 %58, 27
  %67 = or i32 %65, %66
  %68 = xor i32 %67, %64
  %69 = shl i32 %64, 16
  %70 = lshr i32 %64, 16
  %71 = or i32 %69, %70
  %72 = add i32 %63, %61
  %73 = shl i32 %53, 8
  %74 = lshr i32 %63, 24
  %75 = or i32 %74, %73
  %76 = xor i32 %75, %72
  %77 = add i32 %76, %71
  %78 = shl i32 %76, 7
  %79 = lshr i32 %76, 25
  %80 = or i32 %78, %79
  %81 = xor i32 %80, %77
  %82 = add i32 %72, %68
  %83 = shl i32 %68, 13
  %84 = lshr i32 %68, 19
  %85 = or i32 %83, %84
  %86 = xor i32 %85, %82
  %87 = shl i32 %82, 16
  %88 = lshr i32 %82, 16
  %89 = or i32 %87, %88
  %90 = add i32 %77, %86
  %91 = shl i32 %86, 5
  %92 = lshr i32 %86, 27
  %93 = or i32 %91, %92
  %94 = xor i32 %93, %90
  %95 = shl i32 %90, 16
  %96 = lshr i32 %90, 16
  %97 = or i32 %95, %96
  %98 = add i32 %81, %89
  %99 = shl i32 %81, 8
  %100 = lshr i32 %81, 24
  %101 = or i32 %99, %100
  %102 = xor i32 %101, %98
  %103 = add i32 %102, %97
  %104 = shl i32 %102, 7
  %105 = lshr i32 %102, 25
  %106 = or i32 %104, %105
  %107 = xor i32 %106, %103
  %108 = add i32 %98, %94
  %109 = shl i32 %94, 13
  %110 = lshr i32 %94, 19
  %111 = or i32 %109, %110
  %112 = xor i32 %111, %108
  %113 = shl i32 %108, 16
  %114 = lshr i32 %108, 16
  %115 = or i32 %113, %114
  %116 = xor i32 %103, 67108864
  %117 = xor i32 %115, 255
  %118 = add i32 %116, %112
  %119 = shl i32 %112, 5
  %120 = lshr i32 %112, 27
  %121 = or i32 %119, %120
  %122 = xor i32 %118, %121
  %123 = shl i32 %118, 16
  %124 = lshr i32 %118, 16
  %125 = or i32 %123, %124
  %126 = add i32 %107, %117
  %127 = shl i32 %107, 8
  %128 = lshr i32 %107, 24
  %129 = or i32 %127, %128
  %130 = xor i32 %129, %126
  %131 = add i32 %130, %125
  %132 = shl i32 %130, 7
  %133 = lshr i32 %130, 25
  %134 = or i32 %132, %133
  %135 = xor i32 %134, %131
  %136 = add i32 %126, %122
  %137 = shl i32 %122, 13
  %138 = lshr i32 %122, 19
  %139 = or i32 %137, %138
  %140 = xor i32 %139, %136
  %141 = shl i32 %136, 16
  %142 = lshr i32 %136, 16
  %143 = or i32 %141, %142
  %144 = add i32 %131, %140
  %145 = shl i32 %140, 5
  %146 = lshr i32 %140, 27
  %147 = or i32 %145, %146
  %148 = xor i32 %147, %144
  %149 = shl i32 %144, 16
  %150 = lshr i32 %144, 16
  %151 = or i32 %149, %150
  %152 = add i32 %135, %143
  %153 = shl i32 %135, 8
  %154 = lshr i32 %135, 24
  %155 = or i32 %153, %154
  %156 = xor i32 %155, %152
  %157 = add i32 %156, %151
  %158 = shl i32 %156, 7
  %159 = lshr i32 %156, 25
  %160 = or i32 %158, %159
  %161 = xor i32 %160, %157
  %162 = add i32 %152, %148
  %163 = shl i32 %148, 13
  %164 = lshr i32 %148, 19
  %165 = or i32 %163, %164
  %166 = xor i32 %165, %162
  %167 = shl i32 %162, 16
  %168 = lshr i32 %162, 16
  %169 = or i32 %167, %168
  %170 = add i32 %157, %166
  %171 = shl i32 %166, 5
  %172 = lshr i32 %166, 27
  %173 = or i32 %171, %172
  %174 = xor i32 %173, %170
  %175 = shl i32 %170, 16
  %176 = lshr i32 %170, 16
  %177 = or i32 %175, %176
  %178 = add i32 %161, %169
  %179 = shl i32 %161, 8
  %180 = lshr i32 %161, 24
  %181 = or i32 %179, %180
  %182 = xor i32 %181, %178
  %183 = add i32 %182, %177
  %184 = shl i32 %182, 7
  %185 = lshr i32 %182, 25
  %186 = or i32 %184, %185
  %187 = xor i32 %186, %183
  %188 = add i32 %178, %174
  %189 = shl i32 %174, 13
  %190 = lshr i32 %174, 19
  %191 = or i32 %189, %190
  %192 = xor i32 %191, %188
  %193 = shl i32 %188, 16
  %194 = lshr i32 %188, 16
  %195 = or i32 %193, %194
  %196 = add i32 %183, %192
  %197 = shl i32 %192, 5
  %198 = lshr i32 %192, 27
  %199 = or i32 %197, %198
  %200 = xor i32 %199, %196
  %201 = shl i32 %196, 16
  %202 = lshr i32 %196, 16
  %203 = or i32 %201, %202
  %204 = add i32 %187, %195
  %205 = shl i32 %187, 8
  %206 = lshr i32 %187, 24
  %207 = or i32 %205, %206
  %208 = xor i32 %207, %204
  %209 = add i32 %208, %203
  %210 = shl i32 %208, 7
  %211 = lshr i32 %208, 25
  %212 = or i32 %210, %211
  %213 = add i32 %204, %200
  %214 = shl i32 %200, 13
  %215 = lshr i32 %200, 19
  %216 = or i32 %214, %215
  %217 = xor i32 %216, %213
  %218 = xor i32 %217, %209
  %219 = xor i32 %218, %212
  ret i32 %219
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
