; ModuleID = '../../native_client/src/trusted/desc/posix/nacl_desc_imc_bound_desc.c'
source_filename = "../../native_client/src/trusted/desc/posix/nacl_desc_imc_bound_desc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClDescVtbl = type { %struct.NaClRefCountVtbl, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i64 (%struct.NaClDesc*, i64, i32)*, i64 (%struct.NaClDesc*, i8*, i64, i64)*, i64 (%struct.NaClDesc*, i8*, i64, i64)*, i32 (%struct.NaClDesc*, %struct.nacl_abi_stat*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i32)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i32 (%struct.NaClDesc*, i64*, i64*)*, i32 (%struct.NaClDesc*, %struct.NaClDescXferState*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, %struct.NaClDesc*)*, i32 (%struct.NaClDesc*, %struct.NaClDesc*, %struct.nacl_abi_timespec*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)*, i32 (%struct.NaClDesc*, %struct.NaClDesc**)*, i32 (%struct.NaClDesc*, %struct.NaClDesc**)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i32, i32, i8*)*, i32 (%struct.NaClDesc*, i32*, i8*)*, void (%struct.NaClDesc*, i32)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 }
%struct.NaClRefCountVtbl = type { void (%struct.NaClRefCount*)* }
%struct.NaClRefCount = type { %struct.NaClRefCountVtbl*, %struct.NaClFastMutex, i64 }
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.NaClDesc = type { %struct.NaClRefCount, i32, i32, i32, i8* }
%struct.NaClDescEffector = type opaque
%struct.nacl_abi_stat = type { i64, i64, i32, i32, i32, i32, i64, i64, i32, i32, i64, i64, i64, i64, i64, i64 }
%struct.NaClDescXferState = type { i8*, i8*, i32*, i32* }
%struct.nacl_abi_timespec = type { i64, i32 }
%struct.NaClImcTypedMsgHdr = type opaque
%struct.NaClMessageHeader = type { %struct.NaClIOVec*, i32, i32*, i32, i32 }
%struct.NaClIOVec = type { i8*, i64 }
%struct.NaClDescImcBoundDesc = type { %struct.NaClDesc, i32 }
%struct.iovec = type { i8*, i64 }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.NaClDescImcDesc = type { %struct.NaClDescImcConnectedDesc, %struct.NaClMutex, %struct.NaClMutex }
%struct.NaClDescImcConnectedDesc = type { %struct.NaClDesc, i32 }
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.cmsghdr = type { i64, i32, i32, [0 x i8] }

@kNaClDescImcBoundDescVtbl = internal constant %struct.NaClDescVtbl { %struct.NaClRefCountVtbl { void (%struct.NaClRefCount*)* @NaClDescImcBoundDescDtor }, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)* @NaClDescMapNotImplemented, i64 (%struct.NaClDesc*, i8*, i64)* @NaClDescReadNotImplemented, i64 (%struct.NaClDesc*, i8*, i64)* @NaClDescWriteNotImplemented, i64 (%struct.NaClDesc*, i64, i32)* @NaClDescSeekNotImplemented, i64 (%struct.NaClDesc*, i8*, i64, i64)* @NaClDescPReadNotImplemented, i64 (%struct.NaClDesc*, i8*, i64, i64)* @NaClDescPWriteNotImplemented, i32 (%struct.NaClDesc*, %struct.nacl_abi_stat*)* @NaClDescImcBoundDescFstat, i32 (%struct.NaClDesc*)* @NaClDescFchdirNotImplemented, i32 (%struct.NaClDesc*, i32)* @NaClDescFchmodNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescFsyncNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescFdatasyncNotImplemented, i32 (%struct.NaClDesc*, i64)* @NaClDescFtruncateNotImplemented, i64 (%struct.NaClDesc*, i8*, i64)* @NaClDescGetdentsNotImplemented, i32 (%struct.NaClDesc*, i64*, i64*)* @NaClDescExternalizeSizeNotImplemented, i32 (%struct.NaClDesc*, %struct.NaClDescXferState*)* @NaClDescExternalizeNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescLockNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescTryLockNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescUnlockNotImplemented, i32 (%struct.NaClDesc*, %struct.NaClDesc*)* @NaClDescWaitNotImplemented, i32 (%struct.NaClDesc*, %struct.NaClDesc*, %struct.nacl_abi_timespec*)* @NaClDescTimedWaitAbsNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescSignalNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescBroadcastNotImplemented, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)* @NaClDescSendMsgNotImplemented, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)* @NaClDescRecvMsgNotImplemented, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)* @NaClDescLowLevelSendMsgNotImplemented, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)* @NaClDescLowLevelRecvMsgNotImplemented, i32 (%struct.NaClDesc*, %struct.NaClDesc**)* @NaClDescConnectAddrNotImplemented, i32 (%struct.NaClDesc*, %struct.NaClDesc**)* @NaClDescImcBoundDescAcceptConn, i32 (%struct.NaClDesc*)* @NaClDescPostNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescSemWaitNotImplemented, i32 (%struct.NaClDesc*)* @NaClDescGetValueNotImplemented, i32 (%struct.NaClDesc*, i32, i32, i8*)* @NaClDescSetMetadata, i32 (%struct.NaClDesc*, i32*, i8*)* @NaClDescGetMetadata, void (%struct.NaClDesc*, i32)* @NaClDescSetFlags, i32 (%struct.NaClDesc*)* @NaClDescGetFlags, i32 (%struct.NaClDesc*)* @NaClDescIsattyNotImplemented, i32 5 }, align 8
@kNaClDescVtbl = external constant %struct.NaClDescVtbl, align 8
@.str = private unnamed_addr constant [49 x i8] c"NaClDescImcBoundDescAcceptConn(0x%08lx,  h = %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"NaClDescImcBoundDescAcceptConn: could not receive connection message, errno %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [88 x i8] c"NaClDescImcBoundDescAcceptConn: connection message contains more than 1 descriptors?!?\0A\00", align 1
@.str.3 = private unnamed_addr constant [79 x i8] c"NaClDescImcBoundDescAcceptConn: connection message contains NO descriptors?!?\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDescImcBoundDescCtor(%struct.NaClDescImcBoundDesc*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.NaClDescImcBoundDesc, %struct.NaClDescImcBoundDesc* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.NaClDescImcBoundDesc, %struct.NaClDescImcBoundDesc* %0, i64 0, i32 0, i32 0, i32 0
  store %struct.NaClRefCountVtbl* null, %struct.NaClRefCountVtbl** %4, align 8
  %5 = tail call i32 @NaClDescCtor(%struct.NaClDesc* %3) #6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.NaClDescImcBoundDesc, %struct.NaClDescImcBoundDesc* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  store %struct.NaClRefCountVtbl* getelementptr inbounds (%struct.NaClDescVtbl, %struct.NaClDescVtbl* @kNaClDescImcBoundDescVtbl, i64 0, i32 0), %struct.NaClRefCountVtbl** %4, align 8
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi i32 [ 1, %7 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @NaClDescCtor(%struct.NaClDesc*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClDescImcBoundDescDtor(%struct.NaClRefCount*) #0 {
  %2 = getelementptr inbounds %struct.NaClRefCount, %struct.NaClRefCount* %0, i64 1, i32 1, i32 0, i32 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = tail call i32 @NaClClose(i32 %3) #6
  store i32 -1, i32* %2, align 8
  %5 = getelementptr inbounds %struct.NaClRefCount, %struct.NaClRefCount* %0, i64 0, i32 0
  store %struct.NaClRefCountVtbl* getelementptr inbounds (%struct.NaClDescVtbl, %struct.NaClDescVtbl* @kNaClDescVtbl, i64 0, i32 0), %struct.NaClRefCountVtbl** %5, align 8
  %6 = load void (%struct.NaClRefCount*)*, void (%struct.NaClRefCount*)** getelementptr inbounds (%struct.NaClDescVtbl, %struct.NaClDescVtbl* @kNaClDescVtbl, i64 0, i32 0, i32 0), align 8
  tail call void %6(%struct.NaClRefCount* %0) #6
  ret void
}

declare i32 @NaClClose(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDescImcBoundDescFstat(%struct.NaClDesc* nocapture readnone, %struct.nacl_abi_stat* nocapture) #0 {
  %3 = bitcast %struct.nacl_abi_stat* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 104, i1 false)
  %4 = getelementptr inbounds %struct.nacl_abi_stat, %struct.nacl_abi_stat* %1, i64 0, i32 2
  store i32 77824, i32* %4, align 8
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDescImcBoundDescAcceptConn(%struct.NaClDesc*, %struct.NaClDesc** nocapture) #0 {
  %3 = alloca %struct.iovec, align 8
  %4 = alloca %struct.msghdr, align 8
  %5 = alloca [1 x i8], align 1
  %6 = alloca [48 x i8], align 16
  %7 = bitcast %struct.iovec* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.msghdr* %4 to i8*
  %9 = bitcast %struct.iovec* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 56, i1 false)
  %10 = getelementptr inbounds [1 x i8], [1 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #6
  store i8 -86, i8* %10, align 1
  %11 = getelementptr inbounds [48 x i8], [48 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 48, i1 false)
  %12 = tail call noalias i8* @malloc(i64 184) #6
  %13 = bitcast i8* %12 to %struct.NaClDescImcDesc*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %107, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.iovec, %struct.iovec* %3, i64 0, i32 0
  %17 = getelementptr inbounds %struct.iovec, %struct.iovec* %3, i64 0, i32 1
  store i8* %10, i8** %16, align 8
  store i64 1, i64* %17, align 8
  %18 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 2
  store %struct.iovec* %3, %struct.iovec** %18, align 8
  %19 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 3
  store i64 1, i64* %19, align 8
  %20 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 0
  store i8* null, i8** %20, align 8
  %21 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 1
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  store i8* %11, i8** %22, align 8
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 5
  store i64 48, i64* %23, align 8
  %24 = ptrtoint %struct.NaClDesc* %0 to i64
  %25 = getelementptr inbounds %struct.NaClDesc, %struct.NaClDesc* %0, i64 1
  %26 = bitcast %struct.NaClDesc* %25 to i32*
  %27 = load i32, i32* %26, align 8
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i64 %24, i32 %27) #6
  %28 = load i32, i32* %26, align 8
  %29 = call i64 @recvmsg(i32 %28, %struct.msghdr* nonnull %4, i32 0) #6
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, 1
  %32 = load i8, i8* %10, align 1
  %33 = icmp eq i8 %32, 99
  %34 = and i1 %31, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %15
  %36 = tail call i32* @__errno_location() #7
  %37 = load i32, i32* %36, align 4
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0), i32 %37) #6
  br label %105

38:                                               ; preds = %15
  %39 = load i64, i64* %23, align 8
  %40 = icmp ult i64 %39, 16
  %41 = bitcast i8** %22 to %struct.cmsghdr**
  %42 = load %struct.cmsghdr*, %struct.cmsghdr** %41, align 8
  %43 = icmp eq %struct.cmsghdr* %42, null
  %44 = or i1 %43, %40
  br i1 %44, label %97, label %45

45:                                               ; preds = %38, %85
  %46 = phi %struct.cmsghdr* [ %86, %85 ], [ %42, %38 ]
  %47 = phi i32 [ %71, %85 ], [ -1, %38 ]
  %48 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %70

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 0, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %70

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 20
  br i1 %58, label %59, label %70

59:                                               ; preds = %55
  %60 = icmp eq i32 %47, -1
  br i1 %60, label %66, label %61

61:                                               ; preds = %59
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.2, i64 0, i64 0)) #6
  %62 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 1
  %63 = bitcast %struct.cmsghdr* %62 to i32*
  %64 = load i32, i32* %63, align 8
  %65 = call i32 @close(i32 %64) #6
  br label %70

66:                                               ; preds = %59
  %67 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 1
  %68 = bitcast %struct.cmsghdr* %67 to i32*
  %69 = load i32, i32* %68, align 8
  br label %70

70:                                               ; preds = %45, %51, %55, %66, %61
  %71 = phi i32 [ %47, %61 ], [ %69, %66 ], [ %47, %55 ], [ %47, %51 ], [ %47, %45 ]
  %72 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %46, i64 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = icmp ult i64 %73, 16
  br i1 %74, label %95, label %75

75:                                               ; preds = %70
  %76 = bitcast %struct.cmsghdr* %46 to i8*
  %77 = add i64 %73, 7
  %78 = and i64 %77, -8
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = getelementptr inbounds i8, i8* %79, i64 16
  %81 = load i8*, i8** %22, align 8
  %82 = load i64, i64* %23, align 8
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  %84 = icmp ugt i8* %80, %83
  br i1 %84, label %95, label %85

85:                                               ; preds = %75
  %86 = bitcast i8* %79 to %struct.cmsghdr*
  %87 = bitcast i8* %79 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, 7
  %90 = and i64 %89, -8
  %91 = getelementptr inbounds i8, i8* %79, i64 %90
  %92 = icmp ugt i8* %91, %83
  %93 = icmp eq i8* %79, null
  %94 = or i1 %92, %93
  br i1 %94, label %95, label %45

95:                                               ; preds = %85, %70, %75
  %96 = icmp eq i32 %71, -1
  br i1 %96, label %97, label %98

97:                                               ; preds = %38, %95
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %105

98:                                               ; preds = %95
  %99 = call i32 @NaClDescImcDescCtor(%struct.NaClDescImcDesc* nonnull %13, i32 %71) #6
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  %102 = bitcast %struct.NaClDesc** %1 to i8**
  store i8* %12, i8** %102, align 8
  br label %107

103:                                              ; preds = %98
  %104 = call i32 @close(i32 %71) #6
  br label %105

105:                                              ; preds = %35, %97, %103
  %106 = phi i32 [ -24, %103 ], [ -5, %97 ], [ -5, %35 ]
  call void @free(i8* %12) #6
  br label %107

107:                                              ; preds = %101, %105, %2
  %108 = phi i32 [ -12, %2 ], [ %106, %105 ], [ 0, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %108
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare i64 @recvmsg(i32, %struct.msghdr*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

declare i32 @close(i32) local_unnamed_addr #2

declare i32 @NaClDescImcDescCtor(%struct.NaClDescImcDesc*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare i64 @NaClDescMapNotImplemented(%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64) #2

declare i64 @NaClDescReadNotImplemented(%struct.NaClDesc*, i8*, i64) #2

declare i64 @NaClDescWriteNotImplemented(%struct.NaClDesc*, i8*, i64) #2

declare i64 @NaClDescSeekNotImplemented(%struct.NaClDesc*, i64, i32) #2

declare i64 @NaClDescPReadNotImplemented(%struct.NaClDesc*, i8*, i64, i64) #2

declare i64 @NaClDescPWriteNotImplemented(%struct.NaClDesc*, i8*, i64, i64) #2

declare i32 @NaClDescFchdirNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescFchmodNotImplemented(%struct.NaClDesc*, i32) #2

declare i32 @NaClDescFsyncNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescFdatasyncNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescFtruncateNotImplemented(%struct.NaClDesc*, i64) #2

declare i64 @NaClDescGetdentsNotImplemented(%struct.NaClDesc*, i8*, i64) #2

declare i32 @NaClDescExternalizeSizeNotImplemented(%struct.NaClDesc*, i64*, i64*) #2

declare i32 @NaClDescExternalizeNotImplemented(%struct.NaClDesc*, %struct.NaClDescXferState*) #2

declare i32 @NaClDescLockNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescTryLockNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescUnlockNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescWaitNotImplemented(%struct.NaClDesc*, %struct.NaClDesc*) #2

declare i32 @NaClDescTimedWaitAbsNotImplemented(%struct.NaClDesc*, %struct.NaClDesc*, %struct.nacl_abi_timespec*) #2

declare i32 @NaClDescSignalNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescBroadcastNotImplemented(%struct.NaClDesc*) #2

declare i64 @NaClDescSendMsgNotImplemented(%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32) #2

declare i64 @NaClDescRecvMsgNotImplemented(%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32) #2

declare i64 @NaClDescLowLevelSendMsgNotImplemented(%struct.NaClDesc*, %struct.NaClMessageHeader*, i32) #2

declare i64 @NaClDescLowLevelRecvMsgNotImplemented(%struct.NaClDesc*, %struct.NaClMessageHeader*, i32) #2

declare i32 @NaClDescConnectAddrNotImplemented(%struct.NaClDesc*, %struct.NaClDesc**) #2

declare i32 @NaClDescPostNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescSemWaitNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescGetValueNotImplemented(%struct.NaClDesc*) #2

declare i32 @NaClDescSetMetadata(%struct.NaClDesc*, i32, i32, i8*) #2

declare i32 @NaClDescGetMetadata(%struct.NaClDesc*, i32*, i8*) #2

declare void @NaClDescSetFlags(%struct.NaClDesc*, i32) #2

declare i32 @NaClDescGetFlags(%struct.NaClDesc*) #2

declare i32 @NaClDescIsattyNotImplemented(%struct.NaClDesc*) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
