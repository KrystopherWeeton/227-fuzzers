; ModuleID = '../../third_party/blink/renderer/modules/webaudio/audio_param.cc'
source_filename = "../../third_party/blink/renderer/modules/webaudio/audio_param.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.50" }
%"struct.std::__1::atomic.50" = type { %"struct.std::__1::__atomic_base.51" }
%"struct.std::__1::__atomic_base.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__cxx_atomic_impl.53" }
%"struct.std::__1::__cxx_atomic_impl.53" = type { %"struct.std::__1::__cxx_atomic_base_impl.54" }
%"struct.std::__1::__cxx_atomic_base_impl.54" = type { i32 }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.353" }
%"class.blink::PersistentBase.353" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.362" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.358" }
%"class.WTF::HashTable.358" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.blink::WeakMember.360", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.360" = type { %"class.blink::MemberBase.361" }
%"class.blink::MemberBase.361" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr.362" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.125", i32, [4 x i8], %"class.std::__1::unique_ptr.261", %"class.std::__1::unique_ptr.261", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.272", %"class.std::__1::unique_ptr.278", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.290", %"class.std::__1::unique_ptr.296", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.303", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.140", %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.183", %"class.std::__1::unique_ptr.190", %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.204", %"class.std::__1::unique_ptr.211", %"class.std::__1::unique_ptr.218", %"class.std::__1::unique_ptr.241", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl.164" }
%"struct.std::__1::__cxx_atomic_impl.164" = type { %"struct.std::__1::__cxx_atomic_base_impl.165" }
%"struct.std::__1::__cxx_atomic_base_impl.165" = type { i64 }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::Worklist.172"* }
%"class.blink::Worklist.172" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::Worklist.179"* }
%"class.blink::Worklist.179" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::Worklist.186"* }
%"class.blink::Worklist.186" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.190" = type { %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.blink::Worklist.193"* }
%"class.blink::Worklist.193" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::Worklist.200"* }
%"class.blink::Worklist.200" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.blink::Worklist.207"* }
%"class.blink::Worklist.207" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.blink::Worklist.214"* }
%"class.blink::Worklist.214" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.161" }
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.221", %"class.std::__1::__compressed_pair.228", %"class.std::__1::__compressed_pair.233", %"class.std::__1::__compressed_pair.235", [4 x i8] }>
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223", %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { i64 }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { float }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.244", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.253" }
%"class.WTF::Vector.253" = type { %"class.WTF::VectorBuffer.254" }
%"class.WTF::VectorBuffer.254" = type { %"class.WTF::VectorBufferBase.255" }
%"class.WTF::VectorBufferBase.255" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.269" }
%"class.WTF::VectorBuffer.269" = type { %"class.WTF::VectorBufferBase.270" }
%"class.WTF::VectorBufferBase.270" = type { %"struct.std::__1::pair.271"*, i32, i32 }
%"struct.std::__1::pair.271" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.272" = type { %"class.std::__1::__compressed_pair.273" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.278" = type { %"class.std::__1::__compressed_pair.279" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.284" }
%"class.std::__1::unique_ptr.284" = type { %"class.std::__1::__compressed_pair.285" }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.172"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.179"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.186"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.193"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.200"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.320" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.290" = type { %"class.std::__1::__compressed_pair.291" }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.296" = type { %"class.std::__1::__compressed_pair.297" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.302 }
%class.scoped_refptr.302 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.303" = type { %"struct.std::__1::__atomic_base.304" }
%"struct.std::__1::__atomic_base.304" = type { %"struct.std::__1::__cxx_atomic_impl.305" }
%"struct.std::__1::__cxx_atomic_impl.305" = type { %"struct.std::__1::__cxx_atomic_base_impl.306" }
%"struct.std::__1::__cxx_atomic_base_impl.306" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AudioParamHandler" = type { %"class.blink::AudioSummingJunction.base", %"class.WTF::ThreadSafeRefCounted", i32, %"class.WTF::String", %"struct.std::__1::atomic.55", float, i32, i32, float, float, %"class.blink::AudioParamTimeline", %class.scoped_refptr.74, %class.scoped_refptr.25 }
%"class.blink::AudioSummingJunction.base" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::HashSet.21", %"class.WTF::Vector.44", i8 }>
%class.scoped_refptr = type { %"class.blink::DeferredTaskHandler"* }
%"class.blink::DeferredTaskHandler" = type <{ %"class.WTF::ThreadSafeRefCounted.1", [4 x i8], %"class.base::SupportsWeakPtr", %"class.WTF::HashSet", %"class.WTF::Vector", i8, [3 x i8], i32, %"class.WTF::HashSet.13", %"class.WTF::HashSet.13", %"class.WTF::HashSet.17", %"class.WTF::HashSet.21", %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector", i8, [7 x i8], %"class.WTF::HashSet", %"class.WTF::Vector", %class.scoped_refptr.42, %"class.WTF::RecursiveMutex", %"class.WTF::Mutex", %"struct.std::__1::atomic", [4 x i8] }>
%"class.WTF::ThreadSafeRefCounted.1" = type { %"class.base::RefCountedThreadSafe.2" }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::SupportsWeakPtr" = type { %"class.base::internal::WeakReferenceOwner" }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.4", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.4" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%"class.WTF::HashSet.13" = type { %"class.WTF::HashTable.14" }
%"class.WTF::HashTable.14" = type <{ %"class.blink::AudioHandler"**, i32, i32, i32, [4 x i8] }>
%"class.blink::AudioHandler" = type <{ i32 (...)**, %"class.WTF::ThreadSafeRefCounted.75", [4 x i8], double, double, i8, [3 x i8], i32, %"class.blink::WeakPersistent", %"class.blink::UntracedMember", %class.scoped_refptr, %"class.WTF::Vector.308", %"class.WTF::Vector.314", i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, [4 x i8] }>
%"class.WTF::ThreadSafeRefCounted.75" = type { %"class.base::RefCountedThreadSafe.76" }
%"class.base::RefCountedThreadSafe.76" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::AudioNode"*, %"class.blink::PersistentNodePtr" }
%"class.blink::AudioNode" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::InspectorHelperMixin", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.107", %class.scoped_refptr, %class.scoped_refptr.10, %"class.blink::HeapVector.109", %"class.blink::HeapVector.117" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.87" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.81" }
%"class.WTF::Vector.81" = type { %"class.WTF::VectorBuffer.82" }
%"class.WTF::VectorBuffer.82" = type { %"class.WTF::VectorBufferBase.83", [32 x i8] }
%"class.WTF::VectorBufferBase.83" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::AtomicString", %"class.blink::Member" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::HeapVector.84"* }
%"class.blink::HeapVector.84" = type opaque
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.WTF::Vector.90"* }
%"class.WTF::Vector.90" = type opaque
%"class.blink::InspectorHelperMixin" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.94", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.94" = type { %"class.blink::MemberBase.95" }
%"class.blink::MemberBase.95" = type { %"class.blink::AudioGraphTracer"* }
%"class.blink::AudioGraphTracer" = type { %"class.blink::Supplement", %"class.blink::Member.100", %"class.blink::HeapHashSet" }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.98" }
%"class.blink::Member.98" = type { %"class.blink::MemberBase.99" }
%"class.blink::MemberBase.99" = type { %"class.blink::Page"* }
%"class.blink::Page" = type { %"class.blink::Supplementable", %"class.blink::SettingsDelegate", %"class.blink::PageScheduler::Delegate", %"class.blink::Member.403", %"class.blink::scheduler::WebAgentGroupScheduler"*, %"class.blink::Member.405", %"class.blink::Member.409", %"class.blink::Member.411", %"class.blink::Member.413", %"class.blink::Member.415", %"class.blink::Member.417", %"class.blink::Member.419", %"class.blink::Member.421", %"class.blink::HeapObserverSet.423", %"class.blink::Member.431", %"class.blink::Member.433", %"class.blink::Member.435", %"class.blink::Member.437", %"class.blink::Member.439", %"class.blink::Member.441", %"class.blink::Member.443", %"class.blink::Member.445", %"class.blink::Member.447", %"class.blink::Member.449", %"class.blink::Member.451", %"class.blink::InspectorIssueStorage", %"class.blink::Deprecation", %"struct.blink::WebWindowFeatures", i8, i8, i8, float, %"class.mojo::StructPtr", i8, i8, i8, i8, i32, %"class.blink::HeapHashSet.482", %"class.blink::Member.98", %"class.blink::Member.98", %"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle", %"class.std::__1::unique_ptr.490", %"class.std::__1::unique_ptr.496", i32, i32, i8, %"class.blink::mojom::blink::TextAutosizerPageInfo", %"class.blink::WebScopedVirtualTimePauser" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.390" }
%"class.blink::HeapHashMap.390" = type { %"class.WTF::HashMap.393" }
%"class.WTF::HashMap.393" = type { %"class.WTF::HashTable.394" }
%"class.WTF::HashTable.394" = type <{ %"struct.WTF::KeyValuePair.396"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.396" = type opaque
%"class.blink::SettingsDelegate" = type { i32 (...)**, %"class.std::__1::unique_ptr.397" }
%"class.std::__1::unique_ptr.397" = type { %"class.std::__1::__compressed_pair.398" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.399" }
%"struct.std::__1::__compressed_pair_elem.399" = type { %"class.blink::Settings"* }
%"class.blink::Settings" = type opaque
%"class.blink::PageScheduler::Delegate" = type { i32 (...)** }
%"class.blink::Member.403" = type { %"class.blink::MemberBase.404" }
%"class.blink::MemberBase.404" = type { %"class.blink::Frame"* }
%"class.blink::Frame" = type opaque
%"class.blink::scheduler::WebAgentGroupScheduler" = type { i32 (...)** }
%"class.blink::Member.405" = type { %"class.blink::MemberBase.406" }
%"class.blink::MemberBase.406" = type { %"class.blink::PageAnimator"* }
%"class.blink::PageAnimator" = type <{ %"class.blink::Member.98", i8, i8, i8, [5 x i8], %"class.blink::AnimationClock", i8, i8, i8, i8, i8, [3 x i8] }>
%"class.blink::AnimationClock" = type <{ %"class.base::TimeTicks", i8, [7 x i8], %"class.base::TickClock"*, i32, [4 x i8] }>
%"class.base::TickClock" = type { i32 (...)** }
%"class.blink::Member.409" = type { %"class.blink::MemberBase.410" }
%"class.blink::MemberBase.410" = type { %"class.blink::AutoscrollController"* }
%"class.blink::AutoscrollController" = type opaque
%"class.blink::Member.411" = type { %"class.blink::MemberBase.412" }
%"class.blink::MemberBase.412" = type { %"class.blink::ChromeClient"* }
%"class.blink::ChromeClient" = type opaque
%"class.blink::Member.413" = type { %"class.blink::MemberBase.414" }
%"class.blink::MemberBase.414" = type { %"class.blink::DragCaret"* }
%"class.blink::DragCaret" = type opaque
%"class.blink::Member.415" = type { %"class.blink::MemberBase.416" }
%"class.blink::MemberBase.416" = type { %"class.blink::DragController"* }
%"class.blink::DragController" = type opaque
%"class.blink::Member.417" = type { %"class.blink::MemberBase.418" }
%"class.blink::MemberBase.418" = type { %"class.blink::FocusController"* }
%"class.blink::FocusController" = type opaque
%"class.blink::Member.419" = type { %"class.blink::MemberBase.420" }
%"class.blink::MemberBase.420" = type { %"class.blink::ContextMenuController"* }
%"class.blink::ContextMenuController" = type opaque
%"class.blink::Member.421" = type { %"class.blink::MemberBase.422" }
%"class.blink::MemberBase.422" = type { %"class.blink::PageScaleConstraintsSet"* }
%"class.blink::PageScaleConstraintsSet" = type opaque
%"class.blink::HeapObserverSet.423" = type { i32, [4 x i8], %"class.blink::HeapHashSet.424" }
%"class.blink::HeapHashSet.424" = type { %"class.WTF::HashSet.427" }
%"class.WTF::HashSet.427" = type { %"class.WTF::HashTable.428" }
%"class.WTF::HashTable.428" = type <{ %"class.blink::WeakMember.430"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.430" = type opaque
%"class.blink::Member.431" = type { %"class.blink::MemberBase.432" }
%"class.blink::MemberBase.432" = type { %"class.blink::PointerLockController"* }
%"class.blink::PointerLockController" = type opaque
%"class.blink::Member.433" = type { %"class.blink::MemberBase.434" }
%"class.blink::MemberBase.434" = type { %"class.blink::ScrollingCoordinator"* }
%"class.blink::ScrollingCoordinator" = type opaque
%"class.blink::Member.435" = type { %"class.blink::MemberBase.436" }
%"class.blink::MemberBase.436" = type { %"class.blink::BrowserControls"* }
%"class.blink::BrowserControls" = type opaque
%"class.blink::Member.437" = type { %"class.blink::MemberBase.438" }
%"class.blink::MemberBase.438" = type { %"class.blink::ConsoleMessageStorage"* }
%"class.blink::ConsoleMessageStorage" = type opaque
%"class.blink::Member.439" = type { %"class.blink::MemberBase.440" }
%"class.blink::MemberBase.440" = type { %"class.blink::TopDocumentRootScrollerController"* }
%"class.blink::TopDocumentRootScrollerController" = type opaque
%"class.blink::Member.441" = type { %"class.blink::MemberBase.442" }
%"class.blink::MemberBase.442" = type { %"class.blink::VisualViewport"* }
%"class.blink::VisualViewport" = type opaque
%"class.blink::Member.443" = type { %"class.blink::MemberBase.444" }
%"class.blink::MemberBase.444" = type { %"class.blink::OverscrollController"* }
%"class.blink::OverscrollController" = type opaque
%"class.blink::Member.445" = type { %"class.blink::MemberBase.446" }
%"class.blink::MemberBase.446" = type { %"class.blink::LinkHighlight"* }
%"class.blink::LinkHighlight" = type opaque
%"class.blink::Member.447" = type { %"class.blink::MemberBase.448" }
%"class.blink::MemberBase.448" = type { %"class.blink::SpatialNavigationController"* }
%"class.blink::SpatialNavigationController" = type opaque
%"class.blink::Member.449" = type { %"class.blink::MemberBase.450" }
%"class.blink::MemberBase.450" = type { %"class.blink::PluginData"* }
%"class.blink::PluginData" = type opaque
%"class.blink::Member.451" = type { %"class.blink::MemberBase.452" }
%"class.blink::MemberBase.452" = type { %"class.blink::ValidationMessageClient"* }
%"class.blink::ValidationMessageClient" = type opaque
%"class.blink::InspectorIssueStorage" = type { i32 (...)**, %"class.WTF::Deque.453" }
%"class.WTF::Deque.453" = type { %"class.WTF::Deque<std::__1::unique_ptr<blink::protocol::Audits::InspectorIssue, std::__1::default_delete<blink::protocol::Audits::InspectorIssue> >, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::unique_ptr<blink::protocol::Audits::InspectorIssue, std::__1::default_delete<blink::protocol::Audits::InspectorIssue> >, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.456" }
%"class.WTF::VectorBuffer.456" = type { %"class.WTF::VectorBufferBase.457" }
%"class.WTF::VectorBufferBase.457" = type { %"class.std::__1::unique_ptr.458"*, i32, i32 }
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.blink::protocol::Audits::InspectorIssue"* }
%"class.blink::protocol::Audits::InspectorIssue" = type opaque
%"class.blink::Deprecation" = type <{ %"class.std::__1::bitset", %"class.std::__1::bitset.464", i32, [4 x i8] }>
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [62 x i64] }
%"class.std::__1::bitset.464" = type { %"class.std::__1::__bitset.465" }
%"class.std::__1::__bitset.465" = type { [25 x i64] }
%"struct.blink::WebWindowFeatures" = type { i32, i8, i32, i8, i32, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.blink::WebImpression" }
%"struct.blink::WebImpression" = type { %"class.blink::WebSecurityOrigin", %"class.absl::optional.466", i64, %"class.absl::optional.471", i64 }
%"class.blink::WebSecurityOrigin" = type { %"class.blink::WebPrivatePtr" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.absl::optional.466" = type { %"class.absl::optional_internal::optional_data.467" }
%"class.absl::optional_internal::optional_data.467" = type { %"class.absl::optional_internal::optional_data_base.468" }
%"class.absl::optional_internal::optional_data_base.468" = type { %"class.absl::optional_internal::optional_data_dtor_base.469" }
%"class.absl::optional_internal::optional_data_dtor_base.469" = type { i8, %union.anon.470 }
%union.anon.470 = type { %"class.blink::WebSecurityOrigin" }
%"class.absl::optional.471" = type { %"class.absl::optional_internal::optional_data.472" }
%"class.absl::optional_internal::optional_data.472" = type { %"class.absl::optional_internal::optional_data_base.473" }
%"class.absl::optional_internal::optional_data_base.473" = type { %"class.absl::optional_internal::optional_data_dtor_base.474" }
%"class.absl::optional_internal::optional_data_dtor_base.474" = type { i8, %union.anon.475 }
%union.anon.475 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.476" }
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.blink::mojom::blink::PageLifecycleState"* }
%"class.blink::mojom::blink::PageLifecycleState" = type <{ i8, [3 x i8], i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.blink::HeapHashSet.482" = type { %"class.WTF::HashSet.485" }
%"class.WTF::HashSet.485" = type { %"class.WTF::HashTable.486" }
%"class.WTF::HashTable.486" = type <{ %"class.blink::WeakMember.488"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.488" = type opaque
%"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle" = type { i32, %"struct.blink::SchedulingPolicy", %"class.base::WeakPtr" }
%"struct.blink::SchedulingPolicy" = type { i8, i8 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.489 }
%class.scoped_refptr.489 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::unique_ptr.490" = type { %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.492" }
%"struct.std::__1::__compressed_pair_elem.492" = type { %"class.blink::PageScheduler"* }
%"class.blink::PageScheduler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.496" = type { %"class.std::__1::__compressed_pair.497" }
%"class.std::__1::__compressed_pair.497" = type { %"struct.std::__1::__compressed_pair_elem.498" }
%"struct.std::__1::__compressed_pair_elem.498" = type { %"class.blink::MediaFeatureOverrides"* }
%"class.blink::MediaFeatureOverrides" = type opaque
%"class.blink::mojom::blink::TextAutosizerPageInfo" = type { i32, i32, float }
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.blink::WebString" = type { %class.scoped_refptr.49 }
%class.scoped_refptr.49 = type { %"class.WTF::StringImpl"* }
%"class.blink::Member.100" = type { %"class.blink::MemberBase.101" }
%"class.blink::MemberBase.101" = type { %"class.blink::InspectorWebAudioAgent"* }
%"class.blink::InspectorWebAudioAgent" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.104" }
%"class.WTF::HashSet.104" = type { %"class.WTF::HashTable.105" }
%"class.WTF::HashTable.105" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.107" = type { %"class.blink::MemberBase.108" }
%"class.blink::MemberBase.108" = type { %"class.blink::BaseAudioContext"* }
%class.scoped_refptr.10 = type { %"class.blink::AudioHandler"* }
%"class.blink::HeapVector.109" = type { %"class.WTF::Vector.112" }
%"class.WTF::Vector.112" = type { %"class.WTF::VectorBuffer.113" }
%"class.WTF::VectorBuffer.113" = type { %"class.WTF::VectorBufferBase.114" }
%"class.WTF::VectorBufferBase.114" = type { %"class.blink::Member.115"*, i32, i32 }
%"class.blink::Member.115" = type opaque
%"class.blink::HeapVector.117" = type { %"class.WTF::Vector.120" }
%"class.WTF::Vector.120" = type { %"class.WTF::VectorBuffer.121" }
%"class.WTF::VectorBuffer.121" = type { %"class.WTF::VectorBufferBase.122" }
%"class.WTF::VectorBufferBase.122" = type { %"class.blink::Member.123"*, i32, i32 }
%"class.blink::Member.123" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.307" }
%"class.blink::MemberBase.307" = type { %"class.blink::BaseAudioContext"* }
%"class.WTF::Vector.308" = type { %"class.WTF::VectorBuffer.309" }
%"class.WTF::VectorBuffer.309" = type { %"class.WTF::VectorBufferBase.310" }
%"class.WTF::VectorBufferBase.310" = type { %"class.std::__1::unique_ptr.311"*, i32, i32 }
%"class.std::__1::unique_ptr.311" = type opaque
%"class.WTF::Vector.314" = type { %"class.WTF::VectorBuffer.315" }
%"class.WTF::VectorBuffer.315" = type { %"class.WTF::VectorBufferBase.316" }
%"class.WTF::VectorBufferBase.316" = type { %"class.std::__1::unique_ptr.317"*, i32, i32 }
%"class.std::__1::unique_ptr.317" = type opaque
%"class.WTF::HashSet.17" = type { %"class.WTF::HashTable.18" }
%"class.WTF::HashTable.18" = type <{ %"class.blink::AudioSummingJunction"**, i32, i32, i32, [4 x i8] }>
%"class.blink::AudioSummingJunction" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::HashSet.21", %"class.WTF::Vector.44", i8, [7 x i8] }>
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %class.scoped_refptr.10*, i32, i32, i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.10*, i32, i32 }
%class.scoped_refptr.42 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.43" }>
%"class.base::RefCountedThreadSafe.43" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::RecursiveMutex" = type { %"class.WTF::MutexBase" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::HashSet.21" = type { %"class.WTF::HashTable.22" }
%"class.WTF::HashTable.22" = type <{ %"class.blink::AudioNodeOutput"**, i32, i32, i32, [4 x i8] }>
%"class.blink::AudioNodeOutput" = type { %"class.blink::AudioHandler"*, i32, i32, %class.scoped_refptr.25, %class.scoped_refptr.25, i8, [7 x i8], %"class.WTF::HashSet.34", i8, i8, i32, i32, [4 x i8], %"class.WTF::HashSet.38" }
%"class.WTF::HashSet.34" = type { %"class.WTF::HashTable.35" }
%"class.WTF::HashTable.35" = type <{ %"class.blink::AudioNodeInput"**, i32, i32, i32, [4 x i8] }>
%"class.blink::AudioNodeInput" = type opaque
%"class.WTF::HashSet.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"class.blink::AudioParamHandler"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::Vector.44" = type { %"class.WTF::VectorBuffer.45" }
%"class.WTF::VectorBuffer.45" = type { %"class.WTF::VectorBufferBase.46" }
%"class.WTF::VectorBufferBase.46" = type { %"class.blink::AudioNodeOutput"**, i32, i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::String" = type { %class.scoped_refptr.49 }
%"struct.std::__1::atomic.55" = type { %"struct.std::__1::__atomic_base.56" }
%"struct.std::__1::__atomic_base.56" = type { %"struct.std::__1::__cxx_atomic_impl.57" }
%"struct.std::__1::__cxx_atomic_impl.57" = type { %"struct.std::__1::__cxx_atomic_base_impl.58" }
%"struct.std::__1::__cxx_atomic_base_impl.58" = type { float }
%"class.blink::AudioParamTimeline" = type <{ %"class.WTF::Vector.59", %"class.WTF::HashSet.70", %"class.WTF::Mutex", float, [4 x i8] }>
%"class.WTF::Vector.59" = type { %"class.WTF::VectorBuffer.60" }
%"class.WTF::VectorBuffer.60" = type { %"class.WTF::VectorBufferBase.61" }
%"class.WTF::VectorBufferBase.61" = type { %"class.std::__1::unique_ptr.62"*, i32, i32 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::AudioParamTimeline::ParamEvent"* }
%"class.blink::AudioParamTimeline::ParamEvent" = type <{ i32, float, double, float, [4 x i8], double, double, double, %"class.WTF::Vector.502", double, float, [4 x i8], %"class.std::__1::unique_ptr.62", i8, [7 x i8] }>
%"class.WTF::Vector.502" = type { %"class.WTF::VectorBuffer.503" }
%"class.WTF::VectorBuffer.503" = type { %"class.WTF::VectorBufferBase.504" }
%"class.WTF::VectorBufferBase.504" = type { float*, i32, i32 }
%"class.WTF::HashSet.70" = type { %"class.WTF::HashTable.71" }
%"class.WTF::HashTable.71" = type <{ %"class.blink::AudioParamTimeline::ParamEvent"**, i32, i32, i32, [4 x i8] }>
%class.scoped_refptr.74 = type { %"class.blink::AudioDestinationHandler"* }
%"class.blink::AudioDestinationHandler" = type <{ %"class.blink::AudioHandler.base", [4 x i8], %"struct.std::__1::atomic.161", i8, [7 x i8] }>
%"class.blink::AudioHandler.base" = type <{ i32 (...)**, %"class.WTF::ThreadSafeRefCounted.75", [4 x i8], double, double, i8, [3 x i8], i32, %"class.blink::WeakPersistent", %"class.blink::UntracedMember", %class.scoped_refptr, %"class.WTF::Vector.308", %"class.WTF::Vector.314", i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32 }>
%class.scoped_refptr.25 = type { %"class.blink::AudioBus"* }
%"class.blink::AudioBus" = type { %"class.WTF::ThreadSafeRefCounted.26", i32, %"class.WTF::Vector.28", i32, float }
%"class.WTF::ThreadSafeRefCounted.26" = type { %"class.base::RefCountedThreadSafe.27" }
%"class.base::RefCountedThreadSafe.27" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.28" = type { %"class.WTF::VectorBuffer.29" }
%"class.WTF::VectorBuffer.29" = type { %"class.WTF::VectorBufferBase.30", [64 x i8] }
%"class.WTF::VectorBufferBase.30" = type { %"class.blink::AudioChannel"*, i32, i32 }
%"class.blink::AudioChannel" = type <{ i64, float*, %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.blink::BaseAudioContext" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::ActiveScriptWrappable", %"class.blink::ExecutionContextLifecycleStateObserver.base", %"class.blink::InspectorHelperMixin", %"class.blink::ThreadState::PrefinalizerRegistration.334", %"class.blink::Member.335", %"class.blink::HeapVector.337", i8, %class.scoped_refptr.42, i8, %"class.blink::Member.376", i8, %class.scoped_refptr, i32, %"class.blink::AsyncAudioDecoder", [3 x i8], %"class.blink::HeapHashSet.378", %"class.blink::Member.384", %"class.blink::Member.384", %"class.blink::Member.384", %"class.blink::Member.384", %class.scoped_refptr.74, %"class.blink::Member.386", %"class.blink::WorkerThread"* }
%"class.blink::ActiveScriptWrappable" = type { %"class.blink::ActiveScriptWrappableBase" }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::ExecutionContextLifecycleStateObserver.base" = type { %"class.blink::ExecutionContextLifecycleObserver.base" }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.325" }
%"class.blink::WeakMember.325" = type { %"class.blink::MemberBase.326" }
%"class.blink::MemberBase.326" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.327" }
%"class.blink::HeapHashSet.327" = type { %"class.WTF::HashSet.330" }
%"class.WTF::HashSet.330" = type { %"class.WTF::HashTable.331" }
%"class.WTF::HashTable.331" = type <{ %"class.blink::WeakMember.333"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.333" = type opaque
%"class.blink::ThreadState::PrefinalizerRegistration.334" = type { i8 }
%"class.blink::Member.335" = type { %"class.blink::MemberBase.336" }
%"class.blink::MemberBase.336" = type { %"class.blink::AudioDestinationNode"* }
%"class.blink::AudioDestinationNode" = type { %"class.blink::AudioNode" }
%"class.blink::HeapVector.337" = type { %"class.WTF::Vector.340" }
%"class.WTF::Vector.340" = type { %"class.WTF::VectorBuffer.341" }
%"class.WTF::VectorBuffer.341" = type { %"class.WTF::VectorBufferBase.342" }
%"class.WTF::VectorBufferBase.342" = type { %"class.blink::Member.343"*, i32, i32 }
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::ScriptPromiseResolver"* }
%"class.blink::ScriptPromiseResolver" = type { %"class.blink::ExecutionContextLifecycleObserver.base", %"class.blink::ThreadState::PrefinalizerRegistration.347", i32, %"class.blink::Member.348", %"class.blink::TaskHandle", %"class.blink::ScriptPromise::InternalResolver", %"class.blink::TraceWrapperV8Reference.368", %"class.blink::SelfKeepAlive.372" }
%"class.blink::ThreadState::PrefinalizerRegistration.347" = type { i8 }
%"class.blink::Member.348" = type { %"class.blink::MemberBase.349" }
%"class.blink::MemberBase.349" = type { %"class.blink::ScriptState"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.352, %"class.blink::Member.363", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.352 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.363" = type { %"class.blink::MemberBase.364" }
%"class.blink::MemberBase.364" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.365" }
%"class.blink::Persistent.365" = type { %"class.blink::PersistentBase.366" }
%"class.blink::PersistentBase.366" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr.362" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.367 }
%class.scoped_refptr.367 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.blink::ScriptPromise::InternalResolver" = type { %"class.blink::Member.348", %"class.blink::ScriptValue" }
%"class.blink::ScriptValue" = type { %"class.v8::Isolate"*, %"class.blink::WorldSafeV8Reference" }
%"class.blink::WorldSafeV8Reference" = type { %"class.blink::TraceWrapperV8Reference.368", %class.scoped_refptr.371 }
%class.scoped_refptr.371 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::TraceWrapperV8Reference.368" = type { %"class.v8::TracedReference.369" }
%"class.v8::TracedReference.369" = type { %"class.v8::BasicTracedReference.370" }
%"class.v8::BasicTracedReference.370" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::SelfKeepAlive.372" = type { %"class.blink::Persistent.373" }
%"class.blink::Persistent.373" = type { %"class.blink::PersistentBase.374" }
%"class.blink::PersistentBase.374" = type { %"class.blink::ScriptPromiseResolver"*, %"class.blink::PersistentNodePtr.362" }
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::AudioListener"* }
%"class.blink::AudioListener" = type opaque
%"class.blink::AsyncAudioDecoder" = type { i8 }
%"class.blink::HeapHashSet.378" = type { %"class.WTF::HashSet.381" }
%"class.WTF::HashSet.381" = type { %"class.WTF::HashTable.382" }
%"class.WTF::HashTable.382" = type <{ %"class.blink::Member.343"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.384" = type { %"class.blink::MemberBase.385" }
%"class.blink::MemberBase.385" = type { %"class.blink::PeriodicWave"* }
%"class.blink::PeriodicWave" = type opaque
%"class.blink::Member.386" = type { %"class.blink::MemberBase.387" }
%"class.blink::MemberBase.387" = type { %"class.blink::AudioWorklet"* }
%"class.blink::AudioWorklet" = type opaque
%"class.blink::WorkerThread" = type opaque
%"class.blink::AudioParam" = type { %"class.blink::ScriptWrappable", %"class.blink::InspectorHelperMixin", %class.scoped_refptr.518, %"class.blink::Member.107", %class.scoped_refptr }
%class.scoped_refptr.518 = type { %"class.blink::AudioParamHandler"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.509 }
%union.anon.509 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringAppend.606" = type { %"class.WTF::StringAppend.607", %"class.WTF::String" }
%"class.WTF::StringAppend.607" = type { %"class.WTF::StringAppend.608", i8* }
%"class.WTF::StringAppend.608" = type { %"class.WTF::StringAppend.609", %"class.WTF::String" }
%"class.WTF::StringAppend.609" = type { %"class.WTF::StringAppend.610", i8* }
%"class.WTF::StringAppend.610" = type { %"class.WTF::StringAppend.611", %"class.WTF::String" }
%"class.WTF::StringAppend.611" = type { %"class.WTF::StringAppend.612", i8* }
%"class.WTF::StringAppend.612" = type { %"class.WTF::StringAppend.613", %"class.WTF::String" }
%"class.WTF::StringAppend.613" = type { %"class.WTF::String", i8* }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.606", i8* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.519", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.554", i32, i8, [3 x i8], %"class.blink::HeapVector.556", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.564", %"class.blink::Member.566", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.575", %"class.blink::Member.581", %"class.blink::Member.583", i8, [7 x i8] }>
%"class.blink::Supplementable.519" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.520" }
%"class.blink::HeapHashMap.520" = type { %"class.WTF::HashMap.523" }
%"class.WTF::HashMap.523" = type { %"class.WTF::HashTable.524" }
%"class.WTF::HashTable.524" = type <{ %"struct.WTF::KeyValuePair.526"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.526" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.527" }
%"class.blink::Supplementable.527" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.528" }
%"class.blink::HeapHashMap.528" = type { %"class.WTF::HashMap.531" }
%"class.WTF::HashMap.531" = type { %"class.WTF::HashTable.532" }
%"class.WTF::HashTable.532" = type <{ %"struct.WTF::KeyValuePair.534"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.534" = type { i8*, %"class.blink::Member.616" }
%"class.blink::Member.616" = type { %"class.blink::MemberBase.617" }
%"class.blink::MemberBase.617" = type { %"class.blink::Supplement.618"* }
%"class.blink::Supplement.618" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.619" }
%"class.blink::Member.619" = type { %"class.blink::MemberBase.620" }
%"class.blink::MemberBase.620" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.535, %"class.std::__1::unique_ptr.536", %"class.std::__1::unique_ptr.536", %"class.std::__1::unique_ptr.542", %"class.std::__1::unique_ptr.542", %"class.blink::Member.548", i32, [4 x i8], %"class.WTF::HashSet.550", i32, i32 }
%class.scoped_refptr.535 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.542" = type { %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.548" = type { %"class.blink::MemberBase.549" }
%"class.blink::MemberBase.549" = type { %"class.blink::ExecutionContext"* }
%"class.WTF::HashSet.550" = type { %"class.WTF::HashTable.551" }
%"class.WTF::HashTable.551" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.556" = type { %"class.WTF::Vector.559" }
%"class.WTF::Vector.559" = type { %"class.WTF::VectorBuffer.560" }
%"class.WTF::VectorBuffer.560" = type { %"class.WTF::VectorBufferBase.561" }
%"class.WTF::VectorBufferBase.561" = type { %"class.blink::Member.562"*, i32, i32 }
%"class.blink::Member.562" = type opaque
%"class.blink::Member.564" = type { %"class.blink::MemberBase.565" }
%"class.blink::MemberBase.565" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.566" = type { %"class.blink::MemberBase.567" }
%"class.blink::MemberBase.567" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.568", i32, i32 }
%"class.blink::HeapHashMap.568" = type { %"class.WTF::HashMap.571" }
%"class.WTF::HashMap.571" = type { %"class.WTF::HashTable.572" }
%"class.WTF::HashTable.572" = type <{ %"struct.WTF::KeyValuePair.574"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.574" = type opaque
%"class.std::__1::unique_ptr.575" = type { %"class.std::__1::__compressed_pair.576" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.577" }
%"struct.std::__1::__compressed_pair_elem.577" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.581" = type { %"class.blink::MemberBase.582" }
%"class.blink::MemberBase.582" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.583" = type { %"class.blink::MemberBase.584" }
%"class.blink::MemberBase.584" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::ConsoleMessage" = type { i32, i32, %"class.WTF::String", %"class.std::__1::unique_ptr.587", %"class.WTF::String", double, %"class.WTF::String", %"class.blink::WeakMember.599", %"class.WTF::Vector.601" }
%"class.std::__1::unique_ptr.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.589" = type { %"class.blink::SourceLocation"* }
%"class.blink::SourceLocation" = type <{ %"class.WTF::String", i32, i32, %"class.std::__1::unique_ptr.590", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.590" = type { %"class.std::__1::__compressed_pair.591" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.592" }
%"struct.std::__1::__compressed_pair_elem.592" = type { %"class.v8_inspector::V8StackTrace"* }
%"class.v8_inspector::V8StackTrace" = type { i32 (...)** }
%"class.blink::WeakMember.599" = type { %"class.blink::MemberBase.600" }
%"class.blink::MemberBase.600" = type { %"class.blink::LocalFrame"* }
%"class.blink::LocalFrame" = type opaque
%"class.WTF::Vector.601" = type { %"class.WTF::VectorBuffer.602" }
%"class.WTF::VectorBuffer.602" = type { %"class.WTF::VectorBufferBase.603" }
%"class.WTF::VectorBufferBase.603" = type { i32*, i32, i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.368" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.642" = type <{ i8*, i32, [4 x i8] }>
%"class.v8::Value" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::StringTypeAdapter.647" = type { %"class.WTF::StringAppend.609"* }
%"class.WTF::StringTypeAdapter.644" = type { %"class.WTF::StringTypeAdapter.645" }
%"class.WTF::StringTypeAdapter.645" = type { %"class.WTF::StringView" }

$_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSD_SE_ = comdat any

$_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSB_SC_ = comdat any

$_ZN3WTFplINS_12StringAppendINS1_INS1_INS_6StringEPKcEES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_ = comdat any

$_ZN3WTFplINS_12StringAppendINS1_INS_6StringEPKcEES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKS9_SA_ = comdat any

$_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink10AudioParam18GetWrapperTypeInfoEv = comdat any

$_ZN5blink10AudioParam15ReportDidCreateEv = comdat any

$_ZN5blink10AudioParam21ReportWillBeDestroyedEv = comdat any

$_ZThn16_N5blink10AudioParam15ReportDidCreateEv = comdat any

$_ZThn16_N5blink10AudioParam21ReportWillBeDestroyedEv = comdat any

$_ZN5blink17AudioParamHandlerD2Ev = comdat any

$_ZN5blink17AudioParamHandlerD0Ev = comdat any

$_ZN5blink17AudioParamHandler9DidUpdateEv = comdat any

$_ZN3WTF6VectorIPN5blink15AudioNodeOutputELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_16BaseAudioContextEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EC2ES6_S1_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EC2ES7_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EC2ES8_S1_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_14ConsoleMessageEE4CallIJNS_5mojom20ConsoleMessageSourceENS4_19ConsoleMessageLevelEN3WTF12StringAppendINS8_INS8_INS8_INS8_INS8_INS8_INS8_INS8_INS7_6StringEPKcEES9_EESB_EES9_EESB_EES9_EESB_EES9_EESB_EEEEEPS1_DpOT_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_EcvS1_Ev = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_14ConsoleMessageEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_14ConsoleMessageEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_14ConsoleMessageEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_14ConsoleMessageEE7GetNameEPKv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv = comdat any

$_ZNK3WTF17StringTypeAdapterINS_12StringAppendINS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EEE6Is8BitEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs = comdat any

$_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF12VectorBufferIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZNSt3__110unique_ptrIN5blink18AudioParamTimeline10ParamEventENS_14default_deleteIS3_EEED2Ev = comdat any

$_ZTVN5blink17AudioParamHandlerE = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE13gc_info_index = comdat any

@_ZN5blink17AudioParamHandler25kDefaultSmoothingConstantE = hidden local_unnamed_addr constant double 5.000000e-02, align 8
@_ZN5blink17AudioParamHandler14kSnapThresholdE = hidden local_unnamed_addr constant double 1.000000e-03, align 8
@_ZTVN5blink17AudioParamHandlerE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::AudioParamHandler"*)* @_ZN5blink17AudioParamHandlerD2Ev to i8*), i8* bitcast (void (%"class.blink::AudioParamHandler"*)* @_ZN5blink17AudioParamHandlerD0Ev to i8*), i8* bitcast (void (%"class.blink::AudioParamHandler"*)* @_ZN5blink17AudioParamHandler9DidUpdateEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [65 x i8] c"../../third_party/blink/renderer/modules/webaudio/audio_param.cc\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"destination_handler_\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"AudioBufferSource.playbackRate\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"AudioBufferSource.detune\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"BiquadFilter.frequency\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"BiquadFilter.Q\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"BiquadFilter.gain\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"BiquadFilter.detune\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"Delay.delayTime\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"DynamicsCompressor.threshold\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"DynamicsCompressor.knee\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"DynamicsCompressor.ratio\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"DynamicsCompressor.attack\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"DynamicsCompressor.release\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"Gain.gain\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c"Oscillator.frequency\00", align 1
@.str.16 = private unnamed_addr constant [18 x i8] c"Oscillator.detune\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"StereoPanner.pan\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"Panner.positionX\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"Panner.positionY\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"Panner.positionZ\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"Panner.orientationX\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"Panner.orientationY\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"Panner.orientationZ\00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"AudioListener.positionX\00", align 1
@.str.25 = private unnamed_addr constant [24 x i8] c"AudioListener.positionY\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"AudioListener.positionZ\00", align 1
@.str.27 = private unnamed_addr constant [23 x i8] c"AudioListener.forwardX\00", align 1
@.str.28 = private unnamed_addr constant [23 x i8] c"AudioListener.forwardY\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c"AudioListener.forwardZ\00", align 1
@.str.30 = private unnamed_addr constant [18 x i8] c"AudioListener.upX\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"AudioListener.upY\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"AudioListener.upZ\00", align 1
@.str.33 = private unnamed_addr constant [22 x i8] c"ConstantSource.offset\00", align 1
@_ZTVN5blink10AudioParamE = hidden unnamed_addr constant { [13 x i8*], [5 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZN5blink10AudioParamD2Ev to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZN5blink10AudioParamD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::AudioParam"*, %"class.blink::Visitor"*)* @_ZNK5blink10AudioParam5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::AudioParam"*)* @_ZNK5blink10AudioParam18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZN5blink10AudioParam15ReportDidCreateEv to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZN5blink10AudioParam21ReportWillBeDestroyedEv to i8*)], [5 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (void (%"class.blink::AudioParam"*, %"class.blink::Visitor"*)* @_ZThn16_NK5blink10AudioParam5TraceEPNS_7VisitorE to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZThn16_N5blink10AudioParam15ReportDidCreateEv to i8*), i8* bitcast (void (%"class.blink::AudioParam"*)* @_ZThn16_N5blink10AudioParam21ReportWillBeDestroyedEv to i8*)] }, align 8
@.str.34 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.36 = private unnamed_addr constant [25 x i8] c" outside nominal range [\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.38 = private unnamed_addr constant [26 x i8] c"]; value will be clamped.\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"a-rate\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"k-rate\00", align 1
@.str.42 = private unnamed_addr constant [52 x i8] c".automationRate is fixed and cannot be changed to \22\00", align 1
@.str.43 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.44 = private unnamed_addr constant [21 x i8] c"setValueAtTime value\00", align 1
@.str.45 = private unnamed_addr constant [30 x i8] c"linearRampToValueAtTime value\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"exponentialRampToValue value\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"setTargetAtTime value\00", align 1
@.str.48 = private unnamed_addr constant [26 x i8] c"setValueCurveAtTime value\00", align 1
@.str.49 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.50 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZTVN5blink15ScriptWrappableE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZTVN5blink20InspectorHelperMixinE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink10AudioParam18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@.str.51 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.52 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ScriptWrappable]\00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.54 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14ConsoleMessageEEEPKcv = private unnamed_addr constant [69 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ConsoleMessage]\00", align 1
@_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_14ConsoleMessageEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_14ConsoleMessageEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_14ConsoleMessageEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.55 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@.str.56 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.57 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.58 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink17AudioParamHandlerC1ERNS_16BaseAudioContextENS0_14AudioParamTypeEdNS0_14AutomationRateENS0_18AutomationRateModeEff = hidden unnamed_addr alias void (%"class.blink::AudioParamHandler"*, %"class.blink::BaseAudioContext"*, i32, double, i32, i32, float, float), void (%"class.blink::AudioParamHandler"*, %"class.blink::BaseAudioContext"*, i32, double, i32, i32, float, float)* @_ZN5blink17AudioParamHandlerC2ERNS_16BaseAudioContextENS0_14AudioParamTypeEdNS0_14AutomationRateENS0_18AutomationRateModeEff
@_ZN5blink10AudioParamC1ERNS_16BaseAudioContextERKN3WTF6StringENS_17AudioParamHandler14AudioParamTypeEdNS7_14AutomationRateENS7_18AutomationRateModeEff = hidden unnamed_addr alias void (%"class.blink::AudioParam"*, %"class.blink::BaseAudioContext"*, %"class.WTF::String"*, i32, double, i32, i32, float, float), void (%"class.blink::AudioParam"*, %"class.blink::BaseAudioContext"*, %"class.WTF::String"*, i32, double, i32, i32, float, float)* @_ZN5blink10AudioParamC2ERNS_16BaseAudioContextERKN3WTF6StringENS_17AudioParamHandler14AudioParamTypeEdNS7_14AutomationRateENS7_18AutomationRateModeEff
@_ZN5blink10AudioParamD1Ev = hidden unnamed_addr alias void (%"class.blink::AudioParam"*), void (%"class.blink::AudioParam"*)* @_ZN5blink10AudioParamD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandlerC2ERNS_16BaseAudioContextENS0_14AudioParamTypeEdNS0_14AutomationRateENS0_18AutomationRateModeEff(%"class.blink::AudioParamHandler"*, %"class.blink::BaseAudioContext"* dereferenceable(304), i32, double, i32, i32, float, float) unnamed_addr #0 align 2 {
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %10, align 4
  %11 = bitcast %"class.blink::AudioParamHandler"* %0 to %"class.blink::AudioSummingJunction"*
  %12 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %1, i64 0, i32 12, i32 0
  %13 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %12, align 8
  tail call void @_ZN5blink20AudioSummingJunctionC2ERNS_19DeferredTaskHandlerE(%"class.blink::AudioSummingJunction"* %11, %"class.blink::DeferredTaskHandler"* dereferenceable(368) %13) #14
  %14 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink17AudioParamHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 2
  store i32 %2, i32* %15, align 8
  %16 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %16, align 8
  %17 = fptrunc double %3 to float
  %18 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store float %17, float* %18, align 4
  %19 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 5
  store float %17, float* %19, align 4
  %20 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 6
  store i32 %4, i32* %20, align 8
  %21 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 7
  store i32 %5, i32* %21, align 4
  %22 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  store float %6, float* %22, align 8
  %23 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  store float %7, float* %23, align 4
  %24 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %25 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 2, i32 0
  %26 = bitcast %"class.blink::AudioParamTimeline"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 36, i1 false) #14
  tail call void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"* %25, i1 zeroext false) #14
  %27 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11
  %28 = getelementptr inbounds %class.scoped_refptr.74, %class.scoped_refptr.74* %27, i64 0, i32 0
  store %"class.blink::AudioDestinationHandler"* null, %"class.blink::AudioDestinationHandler"** %28, align 8
  %29 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  %30 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %30, i64 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = tail call %"class.blink::AudioBus"* @_ZN5blink8AudioBus6CreateEjjb(i32 1, i32 %32, i1 zeroext false) #14
  %34 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 12, i32 0
  store %"class.blink::AudioBus"* %33, %"class.blink::AudioBus"** %34, align 8
  %35 = tail call %"class.blink::AudioDestinationNode"* @_ZNK5blink16BaseAudioContext11destinationEv(%"class.blink::BaseAudioContext"* %1) #14
  %36 = icmp eq %"class.blink::AudioDestinationNode"* %35, null
  br i1 %36, label %65, label %37

37:                                               ; preds = %8
  %38 = tail call %"class.blink::AudioDestinationNode"* @_ZNK5blink16BaseAudioContext11destinationEv(%"class.blink::BaseAudioContext"* %1) #14
  %39 = tail call dereferenceable(152) %"class.blink::AudioDestinationHandler"* @_ZNK5blink20AudioDestinationNode26GetAudioDestinationHandlerEv(%"class.blink::AudioDestinationNode"* %38) #14
  %40 = icmp eq %"class.blink::AudioDestinationHandler"* %39, null
  br i1 %40, label %48, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %39, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 1 monotonic
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)) #14
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #14
  br label %48

48:                                               ; preds = %45, %41, %37
  %49 = ptrtoint %"class.blink::AudioDestinationHandler"* %39 to i64
  %50 = bitcast %class.scoped_refptr.74* %27 to i64*
  %51 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %28, align 8
  store i64 %49, i64* %50, align 8
  %52 = icmp eq %"class.blink::AudioDestinationHandler"* %51, null
  br i1 %52, label %65, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %51, i64 0, i32 0, i32 1, i32 0
  %55 = getelementptr inbounds %"class.base::RefCountedThreadSafe.76", %"class.base::RefCountedThreadSafe.76"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw sub i32* %55, i32 1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %65

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.base::RefCountedThreadSafe.76", %"class.base::RefCountedThreadSafe.76"* %54, i64 -2
  %60 = bitcast %"class.base::RefCountedThreadSafe.76"* %59 to %"class.blink::AudioHandler"*
  %61 = bitcast %"class.base::RefCountedThreadSafe.76"* %59 to void (%"class.blink::AudioHandler"*)***
  %62 = load void (%"class.blink::AudioHandler"*)**, void (%"class.blink::AudioHandler"*)*** %61, align 8
  %63 = getelementptr inbounds void (%"class.blink::AudioHandler"*)*, void (%"class.blink::AudioHandler"*)** %62, i64 1
  %64 = load void (%"class.blink::AudioHandler"*)*, void (%"class.blink::AudioHandler"*)** %63, align 8
  call void %64(%"class.blink::AudioHandler"* nonnull %60) #14
  br label %65

65:                                               ; preds = %58, %53, %48, %8
  %66 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 3
  store float %17, float* %66, align 8
  ret void
}

declare void @_ZN5blink20AudioSummingJunctionC2ERNS_19DeferredTaskHandlerE(%"class.blink::AudioSummingJunction"*, %"class.blink::DeferredTaskHandler"* dereferenceable(368)) unnamed_addr #1

declare %"class.blink::AudioBus"* @_ZN5blink8AudioBus6CreateEjjb(i32, i32, i1 zeroext) local_unnamed_addr #1

declare %"class.blink::AudioDestinationNode"* @_ZNK5blink16BaseAudioContext11destinationEv(%"class.blink::BaseAudioContext"*) local_unnamed_addr #1

declare dereferenceable(152) %"class.blink::AudioDestinationHandler"* @_ZNK5blink20AudioDestinationNode26GetAudioDestinationHandlerEv(%"class.blink::AudioDestinationNode"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(152) %"class.blink::AudioDestinationHandler"* @_ZNK5blink17AudioParamHandler18DestinationHandlerEv(%"class.blink::AudioParamHandler"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %4 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %3, align 8
  %5 = icmp eq %"class.blink::AudioDestinationHandler"* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %8 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #14
  %9 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %3, align 8
  br label %10

10:                                               ; preds = %1, %6
  %11 = phi %"class.blink::AudioDestinationHandler"* [ %4, %1 ], [ %9, %6 ]
  ret %"class.blink::AudioDestinationHandler"* %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink17AudioParamHandler12SetParamTypeENS0_14AudioParamTypeE(%"class.blink::AudioParamHandler"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 2
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler18SetCustomParamNameEN3WTF6StringE(%"class.blink::AudioParamHandler"* nocapture, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 3
  %4 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #14
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #14
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %20, %5, %2
  %23 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %24 = bitcast %"class.WTF::String"* %3 to i64*
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 %23, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %41

41:                                               ; preds = %22, %37, %40
  br i1 %4, label %55, label %42

42:                                               ; preds = %41
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #14
  br label %55

55:                                               ; preds = %41, %51, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink17AudioParamHandler12GetParamNameEv(%"class.blink::AudioParamHandler"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %59 [
    i32 0, label %5
    i32 1, label %6
    i32 2, label %7
    i32 3, label %8
    i32 4, label %9
    i32 5, label %10
    i32 6, label %11
    i32 7, label %12
    i32 8, label %13
    i32 9, label %14
    i32 10, label %15
    i32 11, label %16
    i32 12, label %17
    i32 13, label %18
    i32 14, label %19
    i32 15, label %20
    i32 16, label %21
    i32 17, label %22
    i32 18, label %23
    i32 19, label %24
    i32 20, label %25
    i32 21, label %26
    i32 22, label %27
    i32 23, label %28
    i32 24, label %29
    i32 25, label %30
    i32 26, label %31
    i32 27, label %32
    i32 28, label %33
    i32 29, label %34
    i32 30, label %35
    i32 31, label %36
    i32 32, label %37
  ]

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i64 30) #14
  br label %60

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i64 24) #14
  br label %60

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i64 22) #14
  br label %60

8:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i64 14) #14
  br label %60

9:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i64 17) #14
  br label %60

10:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i64 19) #14
  br label %60

11:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15) #14
  br label %60

12:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i64 28) #14
  br label %60

13:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0), i64 23) #14
  br label %60

14:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i64 24) #14
  br label %60

15:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0), i64 25) #14
  br label %60

16:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0), i64 26) #14
  br label %60

17:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9) #14
  br label %60

18:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i64 20) #14
  br label %60

19:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.16, i64 0, i64 0), i64 17) #14
  br label %60

20:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i64 0, i64 0), i64 16) #14
  br label %60

21:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0), i64 16) #14
  br label %60

22:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i64 16) #14
  br label %60

23:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i64 0, i64 0), i64 16) #14
  br label %60

24:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i64 19) #14
  br label %60

25:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0), i64 19) #14
  br label %60

26:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0), i64 19) #14
  br label %60

27:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0), i64 23) #14
  br label %60

28:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0), i64 23) #14
  br label %60

29:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0), i64 23) #14
  br label %60

30:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.27, i64 0, i64 0), i64 22) #14
  br label %60

31:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i64 0, i64 0), i64 22) #14
  br label %60

32:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0), i64 22) #14
  br label %60

33:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30, i64 0, i64 0), i64 17) #14
  br label %60

34:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i64 0, i64 0), i64 17) #14
  br label %60

35:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0), i64 17) #14
  br label %60

36:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i64 21) #14
  br label %60

37:                                               ; preds = %1
  %38 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 3, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"** %40, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %41, label %60, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %60

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i33
  %51 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #14
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %47
  tail call void @llvm.trap() #14
  unreachable

57:                                               ; preds = %47
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %48, align 4
  br label %60

59:                                               ; preds = %1
  unreachable

60:                                               ; preds = %57, %42, %37, %36, %35, %34, %33, %32, %31, %30, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  ret %"class.WTF::StringImpl"* %62
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN5blink17AudioParamHandler5ValueEv(%"class.blink::AudioParamHandler"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %4 = bitcast %"struct.std::__1::__atomic_base.56"* %3 to i32*
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = bitcast i32 %5 to float
  %7 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %7, align 8
  %9 = tail call i32 @_ZN3WTF13CurrentThreadEv() #14
  %10 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %8, i64 0, i32 23, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %38

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %15 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %16 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %15, align 8
  %17 = icmp eq %"class.blink::AudioDestinationHandler"* %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %21 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %15, align 8
  br label %22

22:                                               ; preds = %13, %18
  %23 = phi %"class.blink::AudioDestinationHandler"* [ %16, %13 ], [ %21, %18 ]
  %24 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %25 = load float, float* %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %27 = load float, float* %26, align 4
  %28 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %7, align 8
  %29 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %28, i64 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = call i64 @_ZN5blink18AudioParamTimeline19ValueForContextTimeERNS_23AudioDestinationHandlerEfffj(%"class.blink::AudioParamTimeline"* %14, %"class.blink::AudioDestinationHandler"* dereferenceable(152) %23, float %6, float %25, float %27, i32 %30) #14
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %31, 32
  %34 = trunc i64 %33 to i32
  %35 = icmp eq i8 %32, 0
  %36 = bitcast i32 %34 to float
  %37 = select i1 %35, float %6, float %36
  br label %38

38:                                               ; preds = %22, %1
  %39 = phi float [ %37, %22 ], [ %6, %1 ]
  %40 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %41 = load float, float* %40, align 8
  %42 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %43 = load float, float* %42, align 4
  %44 = fcmp ugt float %43, %39
  %45 = fcmp oge float %41, %39
  %46 = select i1 %45, float %41, float %39
  %47 = select i1 %44, float %46, float %43
  %48 = bitcast float %47 to i32
  store atomic i32 %48, i32* %4 monotonic, align 4
  ret float %39
}

declare i64 @_ZN5blink18AudioParamTimeline19ValueForContextTimeERNS_23AudioDestinationHandlerEfffj(%"class.blink::AudioParamTimeline"*, %"class.blink::AudioDestinationHandler"* dereferenceable(152), float, float, float, i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler17SetIntrinsicValueEf(%"class.blink::AudioParamHandler"* nocapture, float) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %4 = load float, float* %3, align 8
  %5 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %6 = load float, float* %5, align 4
  %7 = fcmp ugt float %6, %1
  %8 = fcmp oge float %4, %1
  %9 = select i1 %8, float %4, float %1
  %10 = select i1 %7, float %9, float %6
  %11 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %12 = bitcast float %10 to i32
  %13 = bitcast %"struct.std::__1::__atomic_base.56"* %11 to i32*
  store atomic i32 %12, i32* %13 monotonic, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler8SetValueEf(%"class.blink::AudioParamHandler"* nocapture, float) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %4 = load float, float* %3, align 8
  %5 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %6 = load float, float* %5, align 4
  %7 = fcmp ugt float %6, %1
  %8 = fcmp oge float %4, %1
  %9 = select i1 %8, float %4, float %1
  %10 = select i1 %7, float %9, float %6
  %11 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %12 = bitcast float %10 to i32
  %13 = bitcast %"struct.std::__1::__atomic_base.56"* %11 to i32*
  store atomic i32 %12, i32* %13 monotonic, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZN5blink17AudioParamHandler13SmoothedValueEv(%"class.blink::AudioParamHandler"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 3
  %3 = load float, float* %2, align 8
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink17AudioParamHandler6SmoothEv(%"class.blink::AudioParamHandler"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %5 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %4, align 8
  %6 = icmp eq %"class.blink::AudioDestinationHandler"* %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  %10 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %4, align 8
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi %"class.blink::AudioDestinationHandler"* [ %5, %1 ], [ %10, %7 ]
  %13 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %14 = bitcast %"struct.std::__1::__atomic_base.56"* %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = bitcast i32 %15 to float
  %17 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %18 = load float, float* %17, align 8
  %19 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  %22 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %22, i64 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = call i64 @_ZN5blink18AudioParamTimeline19ValueForContextTimeERNS_23AudioDestinationHandlerEfffj(%"class.blink::AudioParamTimeline"* %3, %"class.blink::AudioDestinationHandler"* dereferenceable(152) %12, float %16, float %18, float %20, i32 %24) #14
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 3
  %29 = load float, float* %28, align 8
  %30 = bitcast i32 %27 to float
  %31 = fcmp oeq float %29, %30
  br i1 %31, label %49, label %32

32:                                               ; preds = %11
  %33 = trunc i64 %25 to i8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %32
  %36 = bitcast float* %28 to i32*
  store i32 %27, i32* %36, align 8
  br label %49

37:                                               ; preds = %32
  %38 = fsub float %30, %29
  %39 = fpext float %38 to double
  %40 = fmul double %39, 5.000000e-02
  %41 = fpext float %29 to double
  %42 = fadd double %40, %41
  %43 = fptrunc double %42 to float
  %44 = fsub float %43, %30
  %45 = call float @llvm.fabs.f32(float %44) #14
  %46 = fpext float %45 to double
  %47 = fcmp olt double %46, 1.000000e-03
  %48 = select i1 %47, float %30, float %43
  store float %48, float* %28, align 8
  br label %49

49:                                               ; preds = %35, %37, %11
  %50 = phi i1 [ true, %11 ], [ false, %37 ], [ false, %35 ]
  %51 = load float, float* %17, align 8
  %52 = load float, float* %19, align 4
  %53 = fcmp ugt float %52, %30
  %54 = fcmp oge float %51, %30
  %55 = select i1 %54, float %51, float %30
  %56 = select i1 %53, float %55, float %52
  %57 = bitcast float %56 to i32
  store atomic i32 %57, i32* %14 monotonic, align 4
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN5blink17AudioParamHandler10FinalValueEv(%"class.blink::AudioParamHandler"*) local_unnamed_addr #0 align 2 {
  %2 = alloca float, align 4
  %3 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %5 = bitcast %"struct.std::__1::__atomic_base.56"* %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = bitcast float* %2 to i32*
  store i32 %6, i32* %7, align 4
  call void @_ZN5blink17AudioParamHandler20CalculateFinalValuesEPfjb(%"class.blink::AudioParamHandler"* %0, float* nonnull %2, i32 1, i1 zeroext false)
  %8 = load float, float* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #14
  ret float %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler20CalculateFinalValuesEPfjb(%"class.blink::AudioParamHandler"*, float*, i32, i1 zeroext) local_unnamed_addr #7 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  br i1 %3, label %8, label %9

8:                                                ; preds = %4
  tail call void @_ZN5blink17AudioParamHandler23CalculateTimelineValuesEPfj(%"class.blink::AudioParamHandler"* %0, float* %1, i32 %2)
  br label %131

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %11 = bitcast %"struct.std::__1::__atomic_base.56"* %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = bitcast i32 %12 to float
  %14 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %15 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %16 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %15, align 8
  %17 = icmp eq %"class.blink::AudioDestinationHandler"* %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %9
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %21 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %15, align 8
  br label %22

22:                                               ; preds = %9, %18
  %23 = phi %"class.blink::AudioDestinationHandler"* [ %16, %9 ], [ %21, %18 ]
  %24 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %25 = load float, float* %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  %29 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %29, i64 0, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = call i64 @_ZN5blink18AudioParamTimeline19ValueForContextTimeERNS_23AudioDestinationHandlerEfffj(%"class.blink::AudioParamTimeline"* %14, %"class.blink::AudioDestinationHandler"* dereferenceable(152) %23, float %13, float %25, float %27, i32 %31) #14
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %32, 32
  %35 = trunc i64 %34 to i32
  %36 = icmp eq i8 %33, 0
  %37 = bitcast i32 %35 to float
  %38 = select i1 %36, float %13, float %37
  %39 = icmp eq i32 %2, 0
  br i1 %39, label %118, label %40

40:                                               ; preds = %22
  %41 = zext i32 %2 to i64
  %42 = icmp ult i32 %2, 8
  br i1 %42, label %43, label %45

43:                                               ; preds = %116, %40
  %44 = phi i64 [ 0, %40 ], [ %46, %116 ]
  br label %126

45:                                               ; preds = %40
  %46 = and i64 %41, 4294967288
  %47 = insertelement <4 x float> undef, float %38, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x float> undef, float %38, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <4 x i32> zeroinitializer
  %51 = add nsw i64 %46, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp ult i64 %51, 56
  br i1 %55, label %103, label %56

56:                                               ; preds = %45
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %100, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %101, %58 ]
  %61 = getelementptr inbounds float, float* %1, i64 %59
  %62 = bitcast float* %61 to <4 x float>*
  store <4 x float> %48, <4 x float>* %62, align 4
  %63 = getelementptr inbounds float, float* %61, i64 4
  %64 = bitcast float* %63 to <4 x float>*
  store <4 x float> %50, <4 x float>* %64, align 4
  %65 = or i64 %59, 8
  %66 = getelementptr inbounds float, float* %1, i64 %65
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %48, <4 x float>* %67, align 4
  %68 = getelementptr inbounds float, float* %66, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %50, <4 x float>* %69, align 4
  %70 = or i64 %59, 16
  %71 = getelementptr inbounds float, float* %1, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> %48, <4 x float>* %72, align 4
  %73 = getelementptr inbounds float, float* %71, i64 4
  %74 = bitcast float* %73 to <4 x float>*
  store <4 x float> %50, <4 x float>* %74, align 4
  %75 = or i64 %59, 24
  %76 = getelementptr inbounds float, float* %1, i64 %75
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> %48, <4 x float>* %77, align 4
  %78 = getelementptr inbounds float, float* %76, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  store <4 x float> %50, <4 x float>* %79, align 4
  %80 = or i64 %59, 32
  %81 = getelementptr inbounds float, float* %1, i64 %80
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %48, <4 x float>* %82, align 4
  %83 = getelementptr inbounds float, float* %81, i64 4
  %84 = bitcast float* %83 to <4 x float>*
  store <4 x float> %50, <4 x float>* %84, align 4
  %85 = or i64 %59, 40
  %86 = getelementptr inbounds float, float* %1, i64 %85
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %48, <4 x float>* %87, align 4
  %88 = getelementptr inbounds float, float* %86, i64 4
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> %50, <4 x float>* %89, align 4
  %90 = or i64 %59, 48
  %91 = getelementptr inbounds float, float* %1, i64 %90
  %92 = bitcast float* %91 to <4 x float>*
  store <4 x float> %48, <4 x float>* %92, align 4
  %93 = getelementptr inbounds float, float* %91, i64 4
  %94 = bitcast float* %93 to <4 x float>*
  store <4 x float> %50, <4 x float>* %94, align 4
  %95 = or i64 %59, 56
  %96 = getelementptr inbounds float, float* %1, i64 %95
  %97 = bitcast float* %96 to <4 x float>*
  store <4 x float> %48, <4 x float>* %97, align 4
  %98 = getelementptr inbounds float, float* %96, i64 4
  %99 = bitcast float* %98 to <4 x float>*
  store <4 x float> %50, <4 x float>* %99, align 4
  %100 = add i64 %59, 64
  %101 = add i64 %60, -8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %58, !llvm.loop !3

103:                                              ; preds = %58, %45
  %104 = phi i64 [ 0, %45 ], [ %100, %58 ]
  %105 = icmp eq i64 %54, 0
  br i1 %105, label %116, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %113, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %114, %106 ], [ %54, %103 ]
  %109 = getelementptr inbounds float, float* %1, i64 %107
  %110 = bitcast float* %109 to <4 x float>*
  store <4 x float> %48, <4 x float>* %110, align 4
  %111 = getelementptr inbounds float, float* %109, i64 4
  %112 = bitcast float* %111 to <4 x float>*
  store <4 x float> %50, <4 x float>* %112, align 4
  %113 = add i64 %107, 8
  %114 = add i64 %108, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %106, !llvm.loop !5

116:                                              ; preds = %106, %103
  %117 = icmp eq i64 %46, %41
  br i1 %117, label %118, label %43

118:                                              ; preds = %126, %116, %22
  %119 = load float, float* %24, align 8
  %120 = load float, float* %26, align 4
  %121 = fcmp ugt float %120, %38
  %122 = fcmp oge float %119, %38
  %123 = select i1 %122, float %119, float %38
  %124 = select i1 %121, float %123, float %120
  %125 = bitcast float %124 to i32
  store atomic i32 %125, i32* %11 monotonic, align 4
  br label %131

126:                                              ; preds = %43, %126
  %127 = phi i64 [ %129, %126 ], [ %44, %43 ]
  %128 = getelementptr inbounds float, float* %1, i64 %127
  store float %38, float* %128, align 4
  %129 = add nuw nsw i64 %127, 1
  %130 = icmp eq i64 %129, %41
  br i1 %130, label %118, label %126, !llvm.loop !7

131:                                              ; preds = %118, %8
  %132 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %323, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 12, i32 0
  %137 = load %"class.blink::AudioBus"*, %"class.blink::AudioBus"** %136, align 8
  %138 = select i1 %3, i32 %2, i32 1
  call void @_ZN5blink8AudioBus16SetChannelMemoryEjPfj(%"class.blink::AudioBus"* %137, i32 0, float* %1, i32 %138) #14
  %139 = load i32, i32* %132, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %144, label %141

141:                                              ; preds = %135
  %142 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 3
  %143 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  br label %157

144:                                              ; preds = %157, %135
  %145 = phi i32 [ 0, %135 ], [ %167, %157 ]
  %146 = xor i1 %3, true
  %147 = icmp ne i32 %2, 0
  %148 = and i1 %147, %146
  br i1 %148, label %149, label %217

149:                                              ; preds = %144
  %150 = bitcast float* %1 to i32*
  %151 = zext i32 %2 to i64
  %152 = add nsw i64 %151, -1
  %153 = and i64 %151, 7
  %154 = icmp ult i64 %152, 7
  br i1 %154, label %203, label %155

155:                                              ; preds = %149
  %156 = sub nsw i64 %151, %153
  br label %169

157:                                              ; preds = %141, %157
  %158 = phi i32 [ 0, %141 ], [ %166, %157 ]
  %159 = call dereferenceable(8) %"class.blink::AudioNodeOutput"** @_ZN3WTF6VectorIPN5blink15AudioNodeOutputELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.44"* %142, i32 %158) #14
  %160 = load %"class.blink::AudioNodeOutput"*, %"class.blink::AudioNodeOutput"** %159, align 8
  %161 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %143, align 8
  %162 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %161, i64 0, i32 7
  %163 = load i32, i32* %162, align 4
  %164 = call %"class.blink::AudioBus"* @_ZN5blink15AudioNodeOutput4PullEPNS_8AudioBusEj(%"class.blink::AudioNodeOutput"* %160, %"class.blink::AudioBus"* null, i32 %163) #14
  %165 = load %"class.blink::AudioBus"*, %"class.blink::AudioBus"** %136, align 8
  call void @_ZN5blink8AudioBus7SumFromERKS0_NS0_21ChannelInterpretationE(%"class.blink::AudioBus"* %165, %"class.blink::AudioBus"* dereferenceable(96) %164, i32 0) #14
  %166 = add nuw i32 %158, 1
  %167 = load i32, i32* %132, align 4
  %168 = icmp ult i32 %166, %167
  br i1 %168, label %157, label %144

169:                                              ; preds = %169, %155
  %170 = phi i64 [ 0, %155 ], [ %200, %169 ]
  %171 = phi i64 [ %156, %155 ], [ %201, %169 ]
  %172 = load i32, i32* %150, align 4
  %173 = getelementptr inbounds float, float* %1, i64 %170
  %174 = bitcast float* %173 to i32*
  store i32 %172, i32* %174, align 4
  %175 = or i64 %170, 1
  %176 = load i32, i32* %150, align 4
  %177 = getelementptr inbounds float, float* %1, i64 %175
  %178 = bitcast float* %177 to i32*
  store i32 %176, i32* %178, align 4
  %179 = or i64 %170, 2
  %180 = getelementptr inbounds float, float* %1, i64 %179
  %181 = bitcast float* %180 to i32*
  store i32 %176, i32* %181, align 4
  %182 = or i64 %170, 3
  %183 = load i32, i32* %150, align 4
  %184 = getelementptr inbounds float, float* %1, i64 %182
  %185 = bitcast float* %184 to i32*
  store i32 %183, i32* %185, align 4
  %186 = or i64 %170, 4
  %187 = getelementptr inbounds float, float* %1, i64 %186
  %188 = bitcast float* %187 to i32*
  store i32 %183, i32* %188, align 4
  %189 = or i64 %170, 5
  %190 = load i32, i32* %150, align 4
  %191 = getelementptr inbounds float, float* %1, i64 %189
  %192 = bitcast float* %191 to i32*
  store i32 %190, i32* %192, align 4
  %193 = or i64 %170, 6
  %194 = getelementptr inbounds float, float* %1, i64 %193
  %195 = bitcast float* %194 to i32*
  store i32 %190, i32* %195, align 4
  %196 = or i64 %170, 7
  %197 = load i32, i32* %150, align 4
  %198 = getelementptr inbounds float, float* %1, i64 %196
  %199 = bitcast float* %198 to i32*
  store i32 %197, i32* %199, align 4
  %200 = add nuw nsw i64 %170, 8
  %201 = add i64 %171, -8
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %169

203:                                              ; preds = %169, %149
  %204 = phi i64 [ 0, %149 ], [ %200, %169 ]
  %205 = icmp eq i64 %153, 0
  br i1 %205, label %215, label %206

206:                                              ; preds = %203, %206
  %207 = phi i64 [ %212, %206 ], [ %204, %203 ]
  %208 = phi i64 [ %213, %206 ], [ %153, %203 ]
  %209 = load i32, i32* %150, align 4
  %210 = getelementptr inbounds float, float* %1, i64 %207
  %211 = bitcast float* %210 to i32*
  store i32 %209, i32* %211, align 4
  %212 = add nuw nsw i64 %207, 1
  %213 = add i64 %208, -1
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %206, !llvm.loop !9

215:                                              ; preds = %206, %203
  %216 = load i32, i32* %132, align 4
  br label %217

217:                                              ; preds = %215, %144
  %218 = phi i32 [ %216, %215 ], [ %145, %144 ]
  %219 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %219) #14
  %220 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %221 = bitcast float* %220 to i32*
  %222 = load i32, i32* %221, align 8
  %223 = bitcast float* %6 to i32*
  store i32 %222, i32* %223, align 4
  %224 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %224) #14
  %225 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %226 = bitcast float* %225 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = bitcast float* %7 to i32*
  store i32 %227, i32* %228, align 4
  %229 = icmp eq i32 %218, 0
  br i1 %229, label %322, label %230

230:                                              ; preds = %217
  %231 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 5
  %232 = load float, float* %231, align 4
  %233 = icmp ugt i32 %2, 3
  br i1 %233, label %234, label %247

234:                                              ; preds = %230
  %235 = insertelement <4 x float> undef, float %232, i32 0
  %236 = shufflevector <4 x float> %235, <4 x float> undef, <4 x i32> zeroinitializer
  br label %237

237:                                              ; preds = %237, %234
  %238 = phi i32 [ %245, %237 ], [ 0, %234 ]
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds float, float* %1, i64 %239
  %241 = bitcast float* %240 to <4 x float>*
  %242 = load <4 x float>, <4 x float>* %241, align 1
  %243 = fcmp uno <4 x float> %242, zeroinitializer
  %244 = select <4 x i1> %243, <4 x float> %236, <4 x float> %242
  store <4 x float> %244, <4 x float>* %241, align 1
  %245 = add i32 %238, 4
  %246 = icmp ult i32 %245, %2
  br i1 %246, label %237, label %247

247:                                              ; preds = %237, %230
  %248 = phi i32 [ 0, %230 ], [ %245, %237 ]
  %249 = icmp ult i32 %248, %2
  br i1 %249, label %250, label %322

250:                                              ; preds = %247
  %251 = zext i32 %248 to i64
  %252 = zext i32 %2 to i64
  %253 = sub nsw i64 %252, %251
  %254 = icmp ult i64 %253, 8
  br i1 %254, label %311, label %255

255:                                              ; preds = %250
  %256 = and i64 %253, -8
  %257 = add nsw i64 %256, %251
  br label %258

258:                                              ; preds = %306, %255
  %259 = phi i64 [ 0, %255 ], [ %307, %306 ]
  %260 = add i64 %259, %251
  %261 = getelementptr inbounds float, float* %1, i64 %260
  %262 = bitcast float* %261 to <4 x float>*
  %263 = load <4 x float>, <4 x float>* %262, align 4
  %264 = getelementptr inbounds float, float* %261, i64 4
  %265 = bitcast float* %264 to <4 x float>*
  %266 = load <4 x float>, <4 x float>* %265, align 4
  %267 = fcmp uno <4 x float> %263, zeroinitializer
  %268 = fcmp uno <4 x float> %266, zeroinitializer
  %269 = extractelement <4 x i1> %267, i32 0
  br i1 %269, label %270, label %271

270:                                              ; preds = %258
  store float %232, float* %261, align 4
  br label %271

271:                                              ; preds = %270, %258
  %272 = extractelement <4 x i1> %267, i32 1
  br i1 %272, label %273, label %276

273:                                              ; preds = %271
  %274 = add i64 %260, 1
  %275 = getelementptr inbounds float, float* %1, i64 %274
  store float %232, float* %275, align 4
  br label %276

276:                                              ; preds = %273, %271
  %277 = extractelement <4 x i1> %267, i32 2
  br i1 %277, label %278, label %281

278:                                              ; preds = %276
  %279 = add i64 %260, 2
  %280 = getelementptr inbounds float, float* %1, i64 %279
  store float %232, float* %280, align 4
  br label %281

281:                                              ; preds = %278, %276
  %282 = extractelement <4 x i1> %267, i32 3
  br i1 %282, label %283, label %286

283:                                              ; preds = %281
  %284 = add i64 %260, 3
  %285 = getelementptr inbounds float, float* %1, i64 %284
  store float %232, float* %285, align 4
  br label %286

286:                                              ; preds = %283, %281
  %287 = extractelement <4 x i1> %268, i32 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %286
  %289 = add i64 %260, 4
  %290 = getelementptr inbounds float, float* %1, i64 %289
  store float %232, float* %290, align 4
  br label %291

291:                                              ; preds = %288, %286
  %292 = extractelement <4 x i1> %268, i32 1
  br i1 %292, label %293, label %296

293:                                              ; preds = %291
  %294 = add i64 %260, 5
  %295 = getelementptr inbounds float, float* %1, i64 %294
  store float %232, float* %295, align 4
  br label %296

296:                                              ; preds = %293, %291
  %297 = extractelement <4 x i1> %268, i32 2
  br i1 %297, label %298, label %301

298:                                              ; preds = %296
  %299 = add i64 %260, 6
  %300 = getelementptr inbounds float, float* %1, i64 %299
  store float %232, float* %300, align 4
  br label %301

301:                                              ; preds = %298, %296
  %302 = extractelement <4 x i1> %268, i32 3
  br i1 %302, label %303, label %306

303:                                              ; preds = %301
  %304 = add i64 %260, 7
  %305 = getelementptr inbounds float, float* %1, i64 %304
  store float %232, float* %305, align 4
  br label %306

306:                                              ; preds = %303, %301
  %307 = add i64 %259, 8
  %308 = icmp eq i64 %307, %256
  br i1 %308, label %309, label %258, !llvm.loop !10

309:                                              ; preds = %306
  %310 = icmp eq i64 %253, %256
  br i1 %310, label %322, label %311

311:                                              ; preds = %309, %250
  %312 = phi i64 [ %251, %250 ], [ %257, %309 ]
  br label %313

313:                                              ; preds = %311, %319
  %314 = phi i64 [ %320, %319 ], [ %312, %311 ]
  %315 = getelementptr inbounds float, float* %1, i64 %314
  %316 = load float, float* %315, align 4
  %317 = fcmp uno float %316, 0.000000e+00
  br i1 %317, label %318, label %319

318:                                              ; preds = %313
  store float %232, float* %315, align 4
  br label %319

319:                                              ; preds = %318, %313
  %320 = add nuw nsw i64 %314, 1
  %321 = icmp eq i64 %320, %252
  br i1 %321, label %322, label %313, !llvm.loop !11

322:                                              ; preds = %319, %309, %247, %217
  call void @_ZN5blink11vector_math5VclipEPKfiS2_S2_Pfij(float* %1, i32 1, float* nonnull %6, float* nonnull %7, float* %1, i32 1, i32 %2) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %224) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %219) #14
  br label %323

323:                                              ; preds = %131, %322
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler29CalculateSampleAccurateValuesEPfj(%"class.blink::AudioParamHandler"*, float*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  tail call void @_ZN5blink17AudioParamHandler20CalculateFinalValuesEPfjb(%"class.blink::AudioParamHandler"* %0, float* %1, i32 %2, i1 zeroext %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17AudioParamHandler23CalculateTimelineValuesEPfj(%"class.blink::AudioParamHandler"*, float*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %7 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %6, align 8
  %8 = icmp eq %"class.blink::AudioDestinationHandler"* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #14
  %12 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %6, align 8
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi %"class.blink::AudioDestinationHandler"* [ %7, %3 ], [ %12, %9 ]
  %15 = bitcast %"class.blink::AudioDestinationHandler"* %14 to double (%"class.blink::AudioDestinationHandler"*)***
  %16 = load double (%"class.blink::AudioDestinationHandler"*)**, double (%"class.blink::AudioDestinationHandler"*)*** %15, align 8
  %17 = getelementptr inbounds double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %16, i64 25
  %18 = load double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %17, align 8
  %19 = call double %18(%"class.blink::AudioDestinationHandler"* %14) #14
  %20 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %6, align 8
  %21 = icmp eq %"class.blink::AudioDestinationHandler"* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %13
  %23 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #14
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  %25 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %6, align 8
  br label %26

26:                                               ; preds = %13, %22
  %27 = phi %"class.blink::AudioDestinationHandler"* [ %20, %13 ], [ %25, %22 ]
  %28 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i64, i64* %28 acquire, align 8
  %30 = zext i32 %2 to i64
  %31 = add i64 %29, %30
  %32 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %33 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 4, i32 0
  %34 = bitcast %"struct.std::__1::__atomic_base.56"* %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = bitcast i32 %35 to float
  %37 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 8
  %38 = load float, float* %37, align 8
  %39 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 9
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 1, i32 0
  %42 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %42, i64 0, i32 7
  %44 = load i32, i32* %43, align 4
  %45 = call float @_ZN5blink18AudioParamTimeline19ValuesForFrameRangeEmmfPfjddffj(%"class.blink::AudioParamTimeline"* %32, i64 %29, i64 %31, float %36, float* %1, i32 %2, double %19, double %19, float %38, float %40, i32 %44) #14
  %46 = load float, float* %37, align 8
  %47 = load float, float* %39, align 4
  %48 = fcmp ugt float %47, %45
  %49 = fcmp oge float %46, %45
  %50 = select i1 %49, float %46, float %45
  %51 = select i1 %48, float %50, float %47
  %52 = bitcast float %51 to i32
  store atomic i32 %52, i32* %34 monotonic, align 4
  ret void
}

declare void @_ZN5blink8AudioBus16SetChannelMemoryEjPfj(%"class.blink::AudioBus"*, i32, float*, i32) local_unnamed_addr #1

declare %"class.blink::AudioBus"* @_ZN5blink15AudioNodeOutput4PullEPNS_8AudioBusEj(%"class.blink::AudioNodeOutput"*, %"class.blink::AudioBus"*, i32) local_unnamed_addr #1

declare void @_ZN5blink8AudioBus7SumFromERKS0_NS0_21ChannelInterpretationE(%"class.blink::AudioBus"*, %"class.blink::AudioBus"* dereferenceable(96), i32) local_unnamed_addr #1

declare void @_ZN5blink11vector_math5VclipEPKfiS2_S2_Pfij(float*, i32, float*, float*, float*, i32, i32) local_unnamed_addr #1

declare float @_ZN5blink18AudioParamTimeline19ValuesForFrameRangeEmmfPfjddffj(%"class.blink::AudioParamTimeline"*, i64, i64, float, float*, i32, double, double, float, float, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParamC2ERNS_16BaseAudioContextERKN3WTF6StringENS_17AudioParamHandler14AudioParamTypeEdNS7_14AutomationRateENS7_18AutomationRateModeEff(%"class.blink::AudioParam"*, %"class.blink::BaseAudioContext"* dereferenceable(304), %"class.WTF::String"* dereferenceable(8), i32, double, i32, i32, float, float) unnamed_addr #0 align 2 {
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink15ScriptWrappableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %12, align 8
  %13 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %1, i64 0, i32 3, i32 1, i32 0, i32 0
  %15 = load %"class.blink::AudioGraphTracer"*, %"class.blink::AudioGraphTracer"** %14, align 8
  tail call void @_ZN5blink20InspectorHelperMixinC2ERNS_16AudioGraphTracerERKN3WTF6StringE(%"class.blink::InspectorHelperMixin"* %13, %"class.blink::AudioGraphTracer"* dereferenceable(48) %15, %"class.WTF::String"* dereferenceable(8) %2) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*] }, { [13 x i8*], [5 x i8*] }* @_ZTVN5blink10AudioParamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %16 = getelementptr inbounds %"class.blink::InspectorHelperMixin", %"class.blink::InspectorHelperMixin"* %13, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*] }, { [13 x i8*], [5 x i8*] }* @_ZTVN5blink10AudioParamE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = tail call noalias i8* @malloc(i64 208) #14
  %18 = bitcast i8* %17 to %"class.blink::AudioParamHandler"*
  tail call void @_ZN5blink17AudioParamHandlerC2ERNS_16BaseAudioContextENS0_14AudioParamTypeEdNS0_14AutomationRateENS0_18AutomationRateModeEff(%"class.blink::AudioParamHandler"* %18, %"class.blink::BaseAudioContext"* dereferenceable(304) %1, i32 %3, double %4, i32 %5, i32 %6, float %7, float %8) #14
  %19 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %20 = bitcast %"class.blink::AudioParamHandler"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.blink::BaseAudioContext"* %1, %"class.blink::BaseAudioContext"** %21, align 8
  %22 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %1, i64 0, i32 12, i32 0
  %23 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 4, i32 0
  store %"class.blink::DeferredTaskHandler"* %23, %"class.blink::DeferredTaskHandler"** %24, align 8
  %25 = icmp eq %"class.blink::DeferredTaskHandler"* %23, null
  br i1 %25, label %33, label %26

26:                                               ; preds = %9
  %27 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 1 monotonic
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)) #14
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  br label %33

33:                                               ; preds = %9, %26, %30
  ret void
}

declare void @_ZN5blink20InspectorHelperMixinC2ERNS_16AudioGraphTracerERKN3WTF6StringE(%"class.blink::InspectorHelperMixin"*, %"class.blink::AudioGraphTracer"* dereferenceable(48), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam6CreateERNS_16BaseAudioContextERKN3WTF6StringENS_17AudioParamHandler14AudioParamTypeEdNS7_14AutomationRateENS7_18AutomationRateModeEff(%"class.blink::BaseAudioContext"* dereferenceable(304), %"class.WTF::String"* dereferenceable(8), i32, double, i32, i32, float, float) local_unnamed_addr #0 align 2 {
  %9 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #14
  %10 = bitcast i8* %9 to %"class.blink::AudioParam"*
  tail call void @_ZN5blink10AudioParamC2ERNS_16BaseAudioContextERKN3WTF6StringENS_17AudioParamHandler14AudioParamTypeEdNS7_14AutomationRateENS7_18AutomationRateModeEff(%"class.blink::AudioParam"* %10, %"class.blink::BaseAudioContext"* dereferenceable(304) %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %2, double %3, i32 %4, i32 %5, float %6, float %7) #14
  %11 = getelementptr inbounds i8, i8* %9, i64 -4
  %12 = bitcast i8* %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = or i16 %13, 1
  store atomic i16 %14, i16* %12 release, align 2
  ret %"class.blink::AudioParam"* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParamD2Ev(%"class.blink::AudioParam"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*] }, { [13 x i8*], [5 x i8*] }* @_ZTVN5blink10AudioParamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*] }, { [13 x i8*], [5 x i8*] }* @_ZTVN5blink10AudioParamE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 4, i32 0
  %5 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %4, align 8
  tail call void @_ZN5blink19DeferredTaskHandler4lockEv(%"class.blink::DeferredTaskHandler"* %5) #14
  %6 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2
  %7 = bitcast %class.scoped_refptr.518* %6 to i64*
  %8 = getelementptr inbounds %class.scoped_refptr.518, %class.scoped_refptr.518* %6, i64 0, i32 0
  %9 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %8, align 8
  store i64 0, i64* %7, align 8
  %10 = icmp eq %"class.blink::AudioParamHandler"* %9, null
  br i1 %10, label %23, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %9, i64 0, i32 1, i32 0
  %13 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw sub i32* %13, i32 1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %23

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %12, i64 -15
  %18 = bitcast %"class.base::RefCountedThreadSafe"* %17 to %"class.blink::AudioParamHandler"*
  %19 = bitcast %"class.base::RefCountedThreadSafe"* %17 to void (%"class.blink::AudioParamHandler"*)***
  %20 = load void (%"class.blink::AudioParamHandler"*)**, void (%"class.blink::AudioParamHandler"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::AudioParamHandler"*)*, void (%"class.blink::AudioParamHandler"*)** %20, i64 1
  %22 = load void (%"class.blink::AudioParamHandler"*)*, void (%"class.blink::AudioParamHandler"*)** %21, align 8
  tail call void %22(%"class.blink::AudioParamHandler"* nonnull %18) #14
  br label %23

23:                                               ; preds = %1, %11, %16
  tail call void @_ZN5blink19DeferredTaskHandler6unlockEv(%"class.blink::DeferredTaskHandler"* %5) #14
  %24 = load %"class.blink::DeferredTaskHandler"*, %"class.blink::DeferredTaskHandler"** %4, align 8
  %25 = icmp eq %"class.blink::DeferredTaskHandler"* %24, null
  br i1 %25, label %32, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.blink::DeferredTaskHandler", %"class.blink::DeferredTaskHandler"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  tail call void @_ZN5blink19DeferredTaskHandlerD1Ev(%"class.blink::DeferredTaskHandler"* nonnull %24) #14
  %31 = bitcast %"class.blink::DeferredTaskHandler"* %24 to i8*
  tail call void @free(i8* %31) #14
  br label %32

32:                                               ; preds = %23, %26, %30
  %33 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %8, align 8
  %34 = icmp eq %"class.blink::AudioParamHandler"* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %33, i64 0, i32 1, i32 0
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 -15
  %42 = bitcast %"class.base::RefCountedThreadSafe"* %41 to %"class.blink::AudioParamHandler"*
  %43 = bitcast %"class.base::RefCountedThreadSafe"* %41 to void (%"class.blink::AudioParamHandler"*)***
  %44 = load void (%"class.blink::AudioParamHandler"*)**, void (%"class.blink::AudioParamHandler"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.blink::AudioParamHandler"*)*, void (%"class.blink::AudioParamHandler"*)** %44, i64 1
  %46 = load void (%"class.blink::AudioParamHandler"*)*, void (%"class.blink::AudioParamHandler"*)** %45, align 8
  tail call void %46(%"class.blink::AudioParamHandler"* nonnull %42) #14
  br label %47

47:                                               ; preds = %32, %35, %40
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink20InspectorHelperMixinE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %48 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 1, i32 3, i32 0, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #14
  br label %64

64:                                               ; preds = %63, %60, %47
  %65 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %81, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #14
  br label %81

81:                                               ; preds = %64, %77, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParamD0Ev(%"class.blink::AudioParam"* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink10AudioParamD2Ev(%"class.blink::AudioParam"* %0) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10AudioParam5TraceEPNS_7VisitorE(%"class.blink::AudioParam"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3
  %4 = bitcast %"class.blink::Member.107"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_16BaseAudioContextEE5TraceEPNS_7VisitorEPKv) #14
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 1
  tail call void @_ZNK5blink20InspectorHelperMixin5TraceEPNS_7VisitorE(%"class.blink::InspectorHelperMixin"* %14, %"class.blink::Visitor"* %1) #14
  %15 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %15, %"class.blink::Visitor"* %1) #14
  ret void
}

declare void @_ZNK5blink20InspectorHelperMixin5TraceEPNS_7VisitorE(%"class.blink::InspectorHelperMixin"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink10AudioParam5TraceEPNS_7VisitorE(%"class.blink::AudioParam"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 -1, i32 3
  %4 = getelementptr inbounds %"class.blink::Member.107", %"class.blink::Member.107"* %3, i64 7
  %5 = bitcast %"class.blink::Member.107"* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, i64 5
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.blink::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_16BaseAudioContextEE5TraceEPNS_7VisitorEPKv) #14
  br label %14

14:                                               ; preds = %2, %8
  %15 = getelementptr inbounds %"class.blink::Member.107", %"class.blink::Member.107"* %3, i64 2
  %16 = bitcast %"class.blink::Member.107"* %15 to %"class.blink::InspectorHelperMixin"*
  tail call void @_ZNK5blink20InspectorHelperMixin5TraceEPNS_7VisitorE(%"class.blink::InspectorHelperMixin"* %16, %"class.blink::Visitor"* %1) #14
  %17 = bitcast %"class.blink::Member.107"* %3 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %17, %"class.blink::Visitor"* %1) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink10AudioParam5valueEv(%"class.blink::AudioParam"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %2, align 8
  %4 = tail call float @_ZN5blink17AudioParamHandler5ValueEv(%"class.blink::AudioParamHandler"* %3)
  ret float %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* nocapture readonly, %"class.WTF::String"* nocapture readonly dereferenceable(8), float) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringAppend.606", align 8
  %5 = alloca %"class.WTF::StringAppend.608", align 8
  %6 = alloca %"class.WTF::StringAppend.612", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = alloca %"class.WTF::StringAppend.606", align 8
  %11 = alloca %"class.WTF::StringAppend.607", align 8
  %12 = alloca %"class.WTF::StringAppend.608", align 8
  %13 = alloca %"class.WTF::StringAppend.609", align 8
  %14 = alloca %"class.WTF::StringAppend.610", align 8
  %15 = alloca %"class.WTF::StringAppend.611", align 8
  %16 = alloca %"class.WTF::StringAppend.612", align 8
  %17 = alloca %"class.WTF::StringAppend.613", align 8
  %18 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %19 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %19, i64 0, i32 8
  %21 = load float, float* %20, align 8
  %22 = fcmp ogt float %21, %2
  br i1 %22, label %27, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %19, i64 0, i32 9
  %25 = load float, float* %24, align 4
  %26 = fcmp olt float %25, %2
  br i1 %26, label %27, label %878

27:                                               ; preds = %23, %3
  %28 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3, i32 0, i32 0
  %29 = load %"class.blink::BaseAudioContext"*, %"class.blink::BaseAudioContext"** %28, align 8
  %30 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink16BaseAudioContext19GetExecutionContextEv(%"class.blink::BaseAudioContext"* %29) #14
  %31 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #14
  store i32 1, i32* %7, align 4
  %32 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #14
  store i32 2, i32* %8, align 4
  %33 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %33) #14
  %34 = bitcast %"class.WTF::StringAppend.606"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %34) #14
  %35 = bitcast %"class.WTF::StringAppend.607"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #14
  %36 = bitcast %"class.WTF::StringAppend.608"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %36) #14
  %37 = bitcast %"class.WTF::StringAppend.609"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #14
  %38 = bitcast %"class.WTF::StringAppend.610"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %38) #14
  %39 = bitcast %"class.WTF::StringAppend.611"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #14
  %40 = bitcast %"class.WTF::StringAppend.612"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #14
  %41 = bitcast %"class.WTF::StringAppend.613"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #14
  %42 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %18, align 8
  %43 = tail call %"class.WTF::StringImpl"* @_ZNK5blink17AudioParamHandler12GetParamNameEv(%"class.blink::AudioParamHandler"* %42)
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %89, label %45

45:                                               ; preds = %27
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %62

52:                                               ; preds = %45
  %53 = zext i32 %51 to i33
  %54 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %53, i33 1) #14
  %55 = extractvalue { i33, i1 } %54, 1
  %56 = extractvalue { i33, i1 } %54, 0
  %57 = icmp slt i33 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %60, !prof !2

59:                                               ; preds = %52
  tail call void @llvm.trap() #14
  unreachable

60:                                               ; preds = %52
  %61 = trunc i33 %56 to i32
  store i32 %61, i32* %50, align 4
  br label %62

62:                                               ; preds = %45, %60
  %63 = phi i32 [ %61, %60 ], [ %51, %45 ]
  %64 = load atomic i32, i32* %46 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  br i1 %66, label %68, label %78

68:                                               ; preds = %62
  %69 = zext i32 %63 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #14
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !2

75:                                               ; preds = %68
  tail call void @llvm.trap() #14
  unreachable

76:                                               ; preds = %68
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %67, align 4
  br label %78

78:                                               ; preds = %76, %62
  %79 = phi i32 [ %77, %76 ], [ %63, %62 ]
  %80 = load atomic i32, i32* %46 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = add i32 %79, -1
  store i32 %84, i32* %67, align 4
  br label %85

85:                                               ; preds = %83, %78
  %86 = phi i32 [ %84, %83 ], [ %79, %78 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #14
  br label %89

89:                                               ; preds = %27, %85, %88
  %90 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %17, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %90, align 8
  %91 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %17, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0), i8** %91, align 8
  %92 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %112, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %112

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i33
  %104 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %103, i33 1) #14
  %105 = extractvalue { i33, i1 } %104, 1
  %106 = extractvalue { i33, i1 } %104, 0
  %107 = icmp slt i33 %106, 0
  %108 = or i1 %105, %107
  br i1 %108, label %109, label %110, !prof !2

109:                                              ; preds = %100
  tail call void @llvm.trap() #14
  unreachable

110:                                              ; preds = %100
  %111 = trunc i33 %106 to i32
  store i32 %111, i32* %101, align 4
  br label %112

112:                                              ; preds = %89, %95, %110
  call void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.612"* nonnull sret %16, %"class.WTF::StringAppend.613"* nonnull dereferenceable(16) %17, %"class.WTF::StringImpl"* %93)
  %113 = bitcast %"class.WTF::StringAppend.612"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %113)
  %114 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8, !noalias !12
  %116 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %115, %"class.WTF::StringImpl"** %116, align 8, !noalias !12
  %117 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %117, label %135, label %118

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %135

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i33
  %127 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %126, i33 1) #14
  %128 = extractvalue { i33, i1 } %127, 1
  %129 = extractvalue { i33, i1 } %127, 0
  %130 = icmp slt i33 %129, 0
  %131 = or i1 %128, %130
  br i1 %131, label %132, label %133, !prof !2

132:                                              ; preds = %123
  call void @llvm.trap() #14
  unreachable

133:                                              ; preds = %123
  %134 = trunc i33 %129 to i32
  store i32 %134, i32* %124, align 4
  br label %135

135:                                              ; preds = %133, %118, %112
  %136 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %6, i64 0, i32 0, i32 1
  %137 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %16, i64 0, i32 0, i32 1
  %138 = bitcast i8** %137 to i64*
  %139 = load i64, i64* %138, align 8, !noalias !12
  %140 = bitcast i8** %136 to i64*
  store i64 %139, i64* %140, align 8, !noalias !12
  %141 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %16, i64 0, i32 1, i32 0, i32 0
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8, !noalias !12
  %143 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %6, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %142, %"class.WTF::StringImpl"** %143, align 8, !noalias !12
  %144 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %144, label %162, label %145

145:                                              ; preds = %135
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %162

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i33
  %154 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %153, i33 1) #14
  %155 = extractvalue { i33, i1 } %154, 1
  %156 = extractvalue { i33, i1 } %154, 0
  %157 = icmp slt i33 %156, 0
  %158 = or i1 %155, %157
  br i1 %158, label %159, label %160, !prof !2

159:                                              ; preds = %150
  call void @llvm.trap() #14
  unreachable

160:                                              ; preds = %150
  %161 = trunc i33 %156 to i32
  store i32 %161, i32* %151, align 4
  br label %162

162:                                              ; preds = %135, %145, %160
  call void @_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.611"* nonnull %15, %"class.WTF::StringAppend.612"* nonnull byval(%"class.WTF::StringAppend.612") align 8 %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %113)
  %163 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %2) #14
  call void @_ZN3WTFplINS_12StringAppendINS1_INS_6StringEPKcEES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKS9_SA_(%"class.WTF::StringAppend.610"* nonnull sret %14, %"class.WTF::StringAppend.611"* nonnull dereferenceable(32) %15, %"class.WTF::StringImpl"* %163)
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS_6StringEPKcEES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_(%"class.WTF::StringAppend.609"* nonnull sret %13, %"class.WTF::StringAppend.610"* nonnull dereferenceable(40) %14, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.36, i64 0, i64 0))
  %164 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %18, align 8
  %165 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %164, i64 0, i32 8
  %166 = load float, float* %165, align 8
  %167 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %166) #14
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSB_SC_(%"class.WTF::StringAppend.608"* nonnull sret %12, %"class.WTF::StringAppend.609"* nonnull dereferenceable(48) %13, %"class.WTF::StringImpl"* %167)
  %168 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %170 = icmp eq %"class.WTF::StringImpl"* %169, null
  br i1 %170, label %188, label %171

171:                                              ; preds = %162
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %173 = load atomic i32, i32* %172 monotonic, align 4
  %174 = and i32 %173, 2
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %188

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i33
  %180 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %179, i33 1) #14
  %181 = extractvalue { i33, i1 } %180, 1
  %182 = extractvalue { i33, i1 } %180, 0
  %183 = icmp slt i33 %182, 0
  %184 = or i1 %181, %183
  br i1 %184, label %185, label %186, !prof !2

185:                                              ; preds = %176
  call void @llvm.trap() #14
  unreachable

186:                                              ; preds = %176
  %187 = trunc i33 %182 to i32
  store i32 %187, i32* %177, align 4
  br label %188

188:                                              ; preds = %186, %171, %162
  %189 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %190 = bitcast i8** %189 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %192, align 8
  %194 = icmp eq %"class.WTF::StringImpl"* %193, null
  br i1 %194, label %212, label %195

195:                                              ; preds = %188
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = and i32 %197, 2
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %212

200:                                              ; preds = %195
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i33
  %204 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %203, i33 1) #14
  %205 = extractvalue { i33, i1 } %204, 1
  %206 = extractvalue { i33, i1 } %204, 0
  %207 = icmp slt i33 %206, 0
  %208 = or i1 %205, %207
  br i1 %208, label %209, label %210, !prof !2

209:                                              ; preds = %200
  call void @llvm.trap() #14
  unreachable

210:                                              ; preds = %200
  %211 = trunc i33 %206 to i32
  store i32 %211, i32* %201, align 4
  br label %212

212:                                              ; preds = %210, %195, %188
  %213 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 0, i32 0, i32 1
  %214 = bitcast i8** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %217 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %216, align 8
  %218 = icmp eq %"class.WTF::StringImpl"* %217, null
  br i1 %218, label %236, label %219

219:                                              ; preds = %212
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %221 = load atomic i32, i32* %220 monotonic, align 4
  %222 = and i32 %221, 2
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %236

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i33
  %228 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %227, i33 1) #14
  %229 = extractvalue { i33, i1 } %228, 1
  %230 = extractvalue { i33, i1 } %228, 0
  %231 = icmp slt i33 %230, 0
  %232 = or i1 %229, %231
  br i1 %232, label %233, label %234, !prof !2

233:                                              ; preds = %224
  call void @llvm.trap() #14
  unreachable

234:                                              ; preds = %224
  %235 = trunc i33 %230 to i32
  store i32 %235, i32* %225, align 4
  br label %236

236:                                              ; preds = %234, %219, %212
  %237 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 0, i32 1
  %238 = bitcast i8** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %12, i64 0, i32 1, i32 0, i32 0
  %241 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %240, align 8
  %242 = icmp eq %"class.WTF::StringImpl"* %241, null
  br i1 %242, label %260, label %243

243:                                              ; preds = %236
  %244 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %245 = load atomic i32, i32* %244 monotonic, align 4
  %246 = and i32 %245, 2
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %260

248:                                              ; preds = %243
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = zext i32 %250 to i33
  %252 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %251, i33 1) #14
  %253 = extractvalue { i33, i1 } %252, 1
  %254 = extractvalue { i33, i1 } %252, 0
  %255 = icmp slt i33 %254, 0
  %256 = or i1 %253, %255
  br i1 %256, label %257, label %258, !prof !2

257:                                              ; preds = %248
  call void @llvm.trap() #14
  unreachable

258:                                              ; preds = %248
  %259 = trunc i33 %254 to i32
  store i32 %259, i32* %249, align 4
  br label %260

260:                                              ; preds = %236, %243, %258
  %261 = bitcast %"class.WTF::StringAppend.608"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %261) #14, !noalias !15
  %262 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %169, %"class.WTF::StringImpl"** %262, align 8, !noalias !15
  %263 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %264 = bitcast i8** %263 to i64*
  store i64 %191, i64* %264, align 8, !noalias !15
  %265 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %193, %"class.WTF::StringImpl"** %265, align 8, !noalias !15
  %266 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %267 = bitcast i8** %266 to i64*
  store i64 %215, i64* %267, align 8, !noalias !15
  %268 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %217, %"class.WTF::StringImpl"** %268, align 8, !noalias !15
  %269 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 0, i32 1
  %270 = bitcast i8** %269 to i64*
  store i64 %239, i64* %270, align 8, !noalias !15
  %271 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %5, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %241, %"class.WTF::StringImpl"** %271, align 8, !noalias !15
  %272 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0
  %273 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %169, %"class.WTF::StringImpl"** %273, align 8
  br i1 %170, label %293, label %274

274:                                              ; preds = %260
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = and i32 %276, 2
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %293

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 0
  %281 = load i32, i32* %280, align 4
  %282 = zext i32 %281 to i33
  %283 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %282, i33 1) #14
  %284 = extractvalue { i33, i1 } %283, 1
  %285 = extractvalue { i33, i1 } %283, 0
  %286 = icmp slt i33 %285, 0
  %287 = or i1 %284, %286
  br i1 %287, label %288, label %289, !prof !2

288:                                              ; preds = %279
  call void @llvm.trap() #14
  unreachable

289:                                              ; preds = %279
  %290 = trunc i33 %285 to i32
  store i32 %290, i32* %280, align 4
  %291 = load i64, i64* %264, align 8
  %292 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %265, align 8
  br label %293

293:                                              ; preds = %289, %274, %260
  %294 = phi %"class.WTF::StringImpl"* [ %292, %289 ], [ %193, %274 ], [ %193, %260 ]
  %295 = phi i64 [ %291, %289 ], [ %191, %274 ], [ %191, %260 ]
  %296 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %297 = bitcast i8** %296 to i64*
  store i64 %295, i64* %297, align 8
  %298 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %294, %"class.WTF::StringImpl"** %298, align 8
  %299 = icmp eq %"class.WTF::StringImpl"* %294, null
  br i1 %299, label %317, label %300

300:                                              ; preds = %293
  %301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %294, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %302 = load atomic i32, i32* %301 monotonic, align 4
  %303 = and i32 %302, 2
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %317

305:                                              ; preds = %300
  %306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %294, i64 0, i32 0
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i33
  %309 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %308, i33 1) #14
  %310 = extractvalue { i33, i1 } %309, 1
  %311 = extractvalue { i33, i1 } %309, 0
  %312 = icmp slt i33 %311, 0
  %313 = or i1 %310, %312
  br i1 %313, label %314, label %315, !prof !2

314:                                              ; preds = %305
  call void @llvm.trap() #14
  unreachable

315:                                              ; preds = %305
  %316 = trunc i33 %311 to i32
  store i32 %316, i32* %306, align 4
  br label %317

317:                                              ; preds = %315, %300, %293
  %318 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %319 = load i64, i64* %267, align 8
  %320 = bitcast i8** %318 to i64*
  store i64 %319, i64* %320, align 8
  %321 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %268, align 8
  %322 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %321, %"class.WTF::StringImpl"** %322, align 8
  %323 = icmp eq %"class.WTF::StringImpl"* %321, null
  br i1 %323, label %341, label %324

324:                                              ; preds = %317
  %325 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %326 = load atomic i32, i32* %325 monotonic, align 4
  %327 = and i32 %326, 2
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %341

329:                                              ; preds = %324
  %330 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 0
  %331 = load i32, i32* %330, align 4
  %332 = zext i32 %331 to i33
  %333 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %332, i33 1) #14
  %334 = extractvalue { i33, i1 } %333, 1
  %335 = extractvalue { i33, i1 } %333, 0
  %336 = icmp slt i33 %335, 0
  %337 = or i1 %334, %336
  br i1 %337, label %338, label %339, !prof !2

338:                                              ; preds = %329
  call void @llvm.trap() #14
  unreachable

339:                                              ; preds = %329
  %340 = trunc i33 %335 to i32
  store i32 %340, i32* %330, align 4
  br label %341

341:                                              ; preds = %339, %324, %317
  %342 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 0, i32 1
  %343 = load i64, i64* %270, align 8
  %344 = bitcast i8** %342 to i64*
  store i64 %343, i64* %344, align 8
  %345 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %271, align 8
  %346 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %345, %"class.WTF::StringImpl"** %346, align 8
  %347 = icmp eq %"class.WTF::StringImpl"* %345, null
  br i1 %347, label %365, label %348

348:                                              ; preds = %341
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %345, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %350 = load atomic i32, i32* %349 monotonic, align 4
  %351 = and i32 %350, 2
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %365

353:                                              ; preds = %348
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %345, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = zext i32 %355 to i33
  %357 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %356, i33 1) #14
  %358 = extractvalue { i33, i1 } %357, 1
  %359 = extractvalue { i33, i1 } %357, 0
  %360 = icmp slt i33 %359, 0
  %361 = or i1 %358, %360
  br i1 %361, label %362, label %363, !prof !2

362:                                              ; preds = %353
  call void @llvm.trap() #14
  unreachable

363:                                              ; preds = %353
  %364 = trunc i33 %359 to i32
  store i32 %364, i32* %354, align 4
  br label %365

365:                                              ; preds = %341, %348, %363
  %366 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %11, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0), i8** %366, align 8, !alias.scope !15
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %261) #14, !noalias !15
  %367 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %18, align 8
  %368 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %367, i64 0, i32 9
  %369 = load float, float* %368, align 4
  %370 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %369) #14
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSD_SE_(%"class.WTF::StringAppend.606"* nonnull sret %10, %"class.WTF::StringAppend.607"* nonnull dereferenceable(64) %11, %"class.WTF::StringImpl"* %370)
  %371 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0
  %372 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %373 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %372, align 8
  %374 = icmp eq %"class.WTF::StringImpl"* %373, null
  br i1 %374, label %392, label %375

375:                                              ; preds = %365
  %376 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %377 = load atomic i32, i32* %376 monotonic, align 4
  %378 = and i32 %377, 2
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %392

380:                                              ; preds = %375
  %381 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 0
  %382 = load i32, i32* %381, align 4
  %383 = zext i32 %382 to i33
  %384 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %383, i33 1) #14
  %385 = extractvalue { i33, i1 } %384, 1
  %386 = extractvalue { i33, i1 } %384, 0
  %387 = icmp slt i33 %386, 0
  %388 = or i1 %385, %387
  br i1 %388, label %389, label %390, !prof !2

389:                                              ; preds = %380
  call void @llvm.trap() #14
  unreachable

390:                                              ; preds = %380
  %391 = trunc i33 %386 to i32
  store i32 %391, i32* %381, align 4
  br label %392

392:                                              ; preds = %390, %375, %365
  %393 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %394 = bitcast i8** %393 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %397 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %396, align 8
  %398 = icmp eq %"class.WTF::StringImpl"* %397, null
  br i1 %398, label %416, label %399

399:                                              ; preds = %392
  %400 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %397, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %401 = load atomic i32, i32* %400 monotonic, align 4
  %402 = and i32 %401, 2
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %416

404:                                              ; preds = %399
  %405 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %397, i64 0, i32 0
  %406 = load i32, i32* %405, align 4
  %407 = zext i32 %406 to i33
  %408 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %407, i33 1) #14
  %409 = extractvalue { i33, i1 } %408, 1
  %410 = extractvalue { i33, i1 } %408, 0
  %411 = icmp slt i33 %410, 0
  %412 = or i1 %409, %411
  br i1 %412, label %413, label %414, !prof !2

413:                                              ; preds = %404
  call void @llvm.trap() #14
  unreachable

414:                                              ; preds = %404
  %415 = trunc i33 %410 to i32
  store i32 %415, i32* %405, align 4
  br label %416

416:                                              ; preds = %414, %399, %392
  %417 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %418 = bitcast i8** %417 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %421 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %420, align 8
  %422 = icmp eq %"class.WTF::StringImpl"* %421, null
  br i1 %422, label %440, label %423

423:                                              ; preds = %416
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = load atomic i32, i32* %424 monotonic, align 4
  %426 = and i32 %425, 2
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %440

428:                                              ; preds = %423
  %429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 0
  %430 = load i32, i32* %429, align 4
  %431 = zext i32 %430 to i33
  %432 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %431, i33 1) #14
  %433 = extractvalue { i33, i1 } %432, 1
  %434 = extractvalue { i33, i1 } %432, 0
  %435 = icmp slt i33 %434, 0
  %436 = or i1 %433, %435
  br i1 %436, label %437, label %438, !prof !2

437:                                              ; preds = %428
  call void @llvm.trap() #14
  unreachable

438:                                              ; preds = %428
  %439 = trunc i33 %434 to i32
  store i32 %439, i32* %429, align 4
  br label %440

440:                                              ; preds = %438, %423, %416
  %441 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 0, i32 1
  %442 = bitcast i8** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %445 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %444, align 8
  %446 = icmp eq %"class.WTF::StringImpl"* %445, null
  br i1 %446, label %464, label %447

447:                                              ; preds = %440
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = and i32 %449, 2
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %464

452:                                              ; preds = %447
  %453 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i33
  %456 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %455, i33 1) #14
  %457 = extractvalue { i33, i1 } %456, 1
  %458 = extractvalue { i33, i1 } %456, 0
  %459 = icmp slt i33 %458, 0
  %460 = or i1 %457, %459
  br i1 %460, label %461, label %462, !prof !2

461:                                              ; preds = %452
  call void @llvm.trap() #14
  unreachable

462:                                              ; preds = %452
  %463 = trunc i33 %458 to i32
  store i32 %463, i32* %453, align 4
  br label %464

464:                                              ; preds = %440, %447, %462
  %465 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 0, i32 1
  %466 = bitcast i8** %465 to i64*
  %467 = load i64, i64* %466, align 8, !noalias !18
  %468 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %10, i64 0, i32 1, i32 0, i32 0
  %469 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %468, align 8, !noalias !18
  %470 = icmp eq %"class.WTF::StringImpl"* %469, null
  br i1 %470, label %488, label %471

471:                                              ; preds = %464
  %472 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %469, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %473 = load atomic i32, i32* %472 monotonic, align 4
  %474 = and i32 %473, 2
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %488

476:                                              ; preds = %471
  %477 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %469, i64 0, i32 0
  %478 = load i32, i32* %477, align 4
  %479 = zext i32 %478 to i33
  %480 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %479, i33 1) #14
  %481 = extractvalue { i33, i1 } %480, 1
  %482 = extractvalue { i33, i1 } %480, 0
  %483 = icmp slt i33 %482, 0
  %484 = or i1 %481, %483
  br i1 %484, label %485, label %486, !prof !2

485:                                              ; preds = %476
  call void @llvm.trap() #14
  unreachable

486:                                              ; preds = %476
  %487 = trunc i33 %482 to i32
  store i32 %487, i32* %477, align 4
  br label %488

488:                                              ; preds = %464, %471, %486
  %489 = bitcast %"class.WTF::StringAppend.606"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %489)
  %490 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %373, %"class.WTF::StringImpl"** %490, align 8
  %491 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %492 = bitcast i8** %491 to i64*
  store i64 %395, i64* %492, align 8
  %493 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %397, %"class.WTF::StringImpl"** %493, align 8
  %494 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %495 = bitcast i8** %494 to i64*
  store i64 %419, i64* %495, align 8
  %496 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %421, %"class.WTF::StringImpl"** %496, align 8
  %497 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %498 = bitcast i8** %497 to i64*
  store i64 %443, i64* %498, align 8
  %499 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %445, %"class.WTF::StringImpl"** %499, align 8
  %500 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 1
  %501 = bitcast i8** %500 to i64*
  store i64 %467, i64* %501, align 8
  %502 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %469, %"class.WTF::StringImpl"** %502, align 8
  %503 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0
  %504 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %4, i64 0, i32 0, i32 0
  %505 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %373, %"class.WTF::StringImpl"** %505, align 8
  br i1 %374, label %525, label %506

506:                                              ; preds = %488
  %507 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %508 = load atomic i32, i32* %507 monotonic, align 4
  %509 = and i32 %508, 2
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %525

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 0
  %513 = load i32, i32* %512, align 4
  %514 = zext i32 %513 to i33
  %515 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %514, i33 1) #14
  %516 = extractvalue { i33, i1 } %515, 1
  %517 = extractvalue { i33, i1 } %515, 0
  %518 = icmp slt i33 %517, 0
  %519 = or i1 %516, %518
  br i1 %519, label %520, label %521, !prof !2

520:                                              ; preds = %511
  call void @llvm.trap() #14
  unreachable

521:                                              ; preds = %511
  %522 = trunc i33 %517 to i32
  store i32 %522, i32* %512, align 4
  %523 = load i64, i64* %492, align 8
  %524 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %493, align 8
  br label %525

525:                                              ; preds = %521, %506, %488
  %526 = phi %"class.WTF::StringImpl"* [ %524, %521 ], [ %397, %506 ], [ %397, %488 ]
  %527 = phi i64 [ %523, %521 ], [ %395, %506 ], [ %395, %488 ]
  %528 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %529 = bitcast i8** %528 to i64*
  store i64 %527, i64* %529, align 8
  %530 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %526, %"class.WTF::StringImpl"** %530, align 8
  %531 = icmp eq %"class.WTF::StringImpl"* %526, null
  br i1 %531, label %549, label %532

532:                                              ; preds = %525
  %533 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %534 = load atomic i32, i32* %533 monotonic, align 4
  %535 = and i32 %534, 2
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %537, label %549

537:                                              ; preds = %532
  %538 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 0
  %539 = load i32, i32* %538, align 4
  %540 = zext i32 %539 to i33
  %541 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %540, i33 1) #14
  %542 = extractvalue { i33, i1 } %541, 1
  %543 = extractvalue { i33, i1 } %541, 0
  %544 = icmp slt i33 %543, 0
  %545 = or i1 %542, %544
  br i1 %545, label %546, label %547, !prof !2

546:                                              ; preds = %537
  call void @llvm.trap() #14
  unreachable

547:                                              ; preds = %537
  %548 = trunc i33 %543 to i32
  store i32 %548, i32* %538, align 4
  br label %549

549:                                              ; preds = %547, %532, %525
  %550 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %551 = load i64, i64* %495, align 8
  %552 = bitcast i8** %550 to i64*
  store i64 %551, i64* %552, align 8
  %553 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %496, align 8
  %554 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %553, %"class.WTF::StringImpl"** %554, align 8
  %555 = icmp eq %"class.WTF::StringImpl"* %553, null
  br i1 %555, label %573, label %556

556:                                              ; preds = %549
  %557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %553, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %558 = load atomic i32, i32* %557 monotonic, align 4
  %559 = and i32 %558, 2
  %560 = icmp eq i32 %559, 0
  br i1 %560, label %561, label %573

561:                                              ; preds = %556
  %562 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %553, i64 0, i32 0
  %563 = load i32, i32* %562, align 4
  %564 = zext i32 %563 to i33
  %565 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %564, i33 1) #14
  %566 = extractvalue { i33, i1 } %565, 1
  %567 = extractvalue { i33, i1 } %565, 0
  %568 = icmp slt i33 %567, 0
  %569 = or i1 %566, %568
  br i1 %569, label %570, label %571, !prof !2

570:                                              ; preds = %561
  call void @llvm.trap() #14
  unreachable

571:                                              ; preds = %561
  %572 = trunc i33 %567 to i32
  store i32 %572, i32* %562, align 4
  br label %573

573:                                              ; preds = %571, %556, %549
  %574 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %575 = load i64, i64* %498, align 8
  %576 = bitcast i8** %574 to i64*
  store i64 %575, i64* %576, align 8
  %577 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %499, align 8
  %578 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %577, %"class.WTF::StringImpl"** %578, align 8
  %579 = icmp eq %"class.WTF::StringImpl"* %577, null
  br i1 %579, label %597, label %580

580:                                              ; preds = %573
  %581 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %577, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %582 = load atomic i32, i32* %581 monotonic, align 4
  %583 = and i32 %582, 2
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %597

585:                                              ; preds = %580
  %586 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %577, i64 0, i32 0
  %587 = load i32, i32* %586, align 4
  %588 = zext i32 %587 to i33
  %589 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %588, i33 1) #14
  %590 = extractvalue { i33, i1 } %589, 1
  %591 = extractvalue { i33, i1 } %589, 0
  %592 = icmp slt i33 %591, 0
  %593 = or i1 %590, %592
  br i1 %593, label %594, label %595, !prof !2

594:                                              ; preds = %585
  call void @llvm.trap() #14
  unreachable

595:                                              ; preds = %585
  %596 = trunc i33 %591 to i32
  store i32 %596, i32* %586, align 4
  br label %597

597:                                              ; preds = %573, %580, %595
  %598 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 0, i32 1
  %599 = load i64, i64* %501, align 8
  %600 = bitcast i8** %598 to i64*
  store i64 %599, i64* %600, align 8
  %601 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %502, align 8
  %602 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %601, %"class.WTF::StringImpl"** %602, align 8
  %603 = icmp eq %"class.WTF::StringImpl"* %601, null
  br i1 %603, label %604, label %606

604:                                              ; preds = %597
  %605 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i8** %605, align 8
  br label %642

606:                                              ; preds = %597
  %607 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %608 = load atomic i32, i32* %607 monotonic, align 4
  %609 = and i32 %608, 2
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %613, label %611

611:                                              ; preds = %606
  %612 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i8** %612, align 8
  br label %628

613:                                              ; preds = %606
  %614 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 0
  %615 = load i32, i32* %614, align 4
  %616 = zext i32 %615 to i33
  %617 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %616, i33 1) #14
  %618 = extractvalue { i33, i1 } %617, 1
  %619 = extractvalue { i33, i1 } %617, 0
  %620 = icmp slt i33 %619, 0
  %621 = or i1 %618, %620
  br i1 %621, label %622, label %623, !prof !2

622:                                              ; preds = %613
  call void @llvm.trap() #14
  unreachable

623:                                              ; preds = %613
  %624 = trunc i33 %619 to i32
  store i32 %624, i32* %614, align 4
  %625 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %502, align 8
  %626 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i8** %626, align 8
  %627 = icmp eq %"class.WTF::StringImpl"* %625, null
  br i1 %627, label %642, label %628

628:                                              ; preds = %611, %623
  %629 = phi %"class.WTF::StringImpl"* [ %601, %611 ], [ %625, %623 ]
  %630 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %629, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %631 = load atomic i32, i32* %630 monotonic, align 4
  %632 = and i32 %631, 2
  %633 = icmp eq i32 %632, 0
  %634 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %629, i64 0, i32 0
  %635 = load i32, i32* %634, align 4
  br i1 %633, label %636, label %638

636:                                              ; preds = %628
  %637 = add i32 %635, -1
  store i32 %637, i32* %634, align 4
  br label %638

638:                                              ; preds = %636, %628
  %639 = phi i32 [ %637, %636 ], [ %635, %628 ]
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %641, label %642

641:                                              ; preds = %638
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %629) #14
  br label %642

642:                                              ; preds = %604, %623, %638, %641
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %504) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %489)
  %643 = call %"class.blink::ConsoleMessage"* @_ZN5blink25MakeGarbageCollectedTraitINS_14ConsoleMessageEE4CallIJNS_5mojom20ConsoleMessageSourceENS4_19ConsoleMessageLevelEN3WTF12StringAppendINS8_INS8_INS8_INS8_INS8_INS8_INS8_INS8_INS7_6StringEPKcEES9_EESB_EES9_EESB_EES9_EESB_EES9_EESB_EEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %7, i32* nonnull dereferenceable(4) %8, %"class.WTF::StringAppend"* nonnull dereferenceable(80) %9) #14
  %644 = bitcast %"class.blink::ExecutionContext"* %30 to void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)***
  %645 = load void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)**, void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)*** %644, align 8
  %646 = getelementptr inbounds void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)*, void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)** %645, i64 52
  %647 = load void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)*, void (%"class.blink::ExecutionContext"*, %"class.blink::ConsoleMessage"*, i1)** %646, align 8
  call void %647(%"class.blink::ExecutionContext"* %30, %"class.blink::ConsoleMessage"* %643, i1 zeroext false) #14
  %648 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %602, align 8
  %649 = icmp eq %"class.WTF::StringImpl"* %648, null
  br i1 %649, label %663, label %650

650:                                              ; preds = %642
  %651 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %648, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %652 = load atomic i32, i32* %651 monotonic, align 4
  %653 = and i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %648, i64 0, i32 0
  %656 = load i32, i32* %655, align 4
  br i1 %654, label %657, label %659

657:                                              ; preds = %650
  %658 = add i32 %656, -1
  store i32 %658, i32* %655, align 4
  br label %659

659:                                              ; preds = %657, %650
  %660 = phi i32 [ %658, %657 ], [ %656, %650 ]
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %662, label %663

662:                                              ; preds = %659
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %648) #14
  br label %663

663:                                              ; preds = %642, %659, %662
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %503) #14
  %664 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %468, align 8
  %665 = icmp eq %"class.WTF::StringImpl"* %664, null
  br i1 %665, label %679, label %666

666:                                              ; preds = %663
  %667 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %664, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %668 = load atomic i32, i32* %667 monotonic, align 4
  %669 = and i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %664, i64 0, i32 0
  %672 = load i32, i32* %671, align 4
  br i1 %670, label %673, label %675

673:                                              ; preds = %666
  %674 = add i32 %672, -1
  store i32 %674, i32* %671, align 4
  br label %675

675:                                              ; preds = %673, %666
  %676 = phi i32 [ %674, %673 ], [ %672, %666 ]
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %679

678:                                              ; preds = %675
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %664) #14
  br label %679

679:                                              ; preds = %663, %675, %678
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %371) #14
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %272) #14
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %12) #14
  %680 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  %681 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %680, align 8
  %682 = icmp eq %"class.WTF::StringImpl"* %681, null
  br i1 %682, label %696, label %683

683:                                              ; preds = %679
  %684 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %681, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %685 = load atomic i32, i32* %684 monotonic, align 4
  %686 = and i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %681, i64 0, i32 0
  %689 = load i32, i32* %688, align 4
  br i1 %687, label %690, label %692

690:                                              ; preds = %683
  %691 = add i32 %689, -1
  store i32 %691, i32* %688, align 4
  br label %692

692:                                              ; preds = %690, %683
  %693 = phi i32 [ %691, %690 ], [ %689, %683 ]
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %695, label %696

695:                                              ; preds = %692
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %681) #14
  br label %696

696:                                              ; preds = %695, %692, %679
  %697 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %13, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %698 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %697, align 8
  %699 = icmp eq %"class.WTF::StringImpl"* %698, null
  br i1 %699, label %713, label %700

700:                                              ; preds = %696
  %701 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %698, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %702 = load atomic i32, i32* %701 monotonic, align 4
  %703 = and i32 %702, 2
  %704 = icmp eq i32 %703, 0
  %705 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %698, i64 0, i32 0
  %706 = load i32, i32* %705, align 4
  br i1 %704, label %707, label %709

707:                                              ; preds = %700
  %708 = add i32 %706, -1
  store i32 %708, i32* %705, align 4
  br label %709

709:                                              ; preds = %707, %700
  %710 = phi i32 [ %708, %707 ], [ %706, %700 ]
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %712, label %713

712:                                              ; preds = %709
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %698) #14
  br label %713

713:                                              ; preds = %712, %709, %696
  %714 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %715 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %714, align 8
  %716 = icmp eq %"class.WTF::StringImpl"* %715, null
  br i1 %716, label %730, label %717

717:                                              ; preds = %713
  %718 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %715, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %719 = load atomic i32, i32* %718 monotonic, align 4
  %720 = and i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %715, i64 0, i32 0
  %723 = load i32, i32* %722, align 4
  br i1 %721, label %724, label %726

724:                                              ; preds = %717
  %725 = add i32 %723, -1
  store i32 %725, i32* %722, align 4
  br label %726

726:                                              ; preds = %724, %717
  %727 = phi i32 [ %725, %724 ], [ %723, %717 ]
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %730

729:                                              ; preds = %726
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %715) #14
  br label %730

730:                                              ; preds = %713, %726, %729
  %731 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %14, i64 0, i32 1, i32 0, i32 0
  %732 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %731, align 8
  %733 = icmp eq %"class.WTF::StringImpl"* %732, null
  br i1 %733, label %747, label %734

734:                                              ; preds = %730
  %735 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %736 = load atomic i32, i32* %735 monotonic, align 4
  %737 = and i32 %736, 2
  %738 = icmp eq i32 %737, 0
  %739 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 0
  %740 = load i32, i32* %739, align 4
  br i1 %738, label %741, label %743

741:                                              ; preds = %734
  %742 = add i32 %740, -1
  store i32 %742, i32* %739, align 4
  br label %743

743:                                              ; preds = %741, %734
  %744 = phi i32 [ %742, %741 ], [ %740, %734 ]
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %746, label %747

746:                                              ; preds = %743
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %732) #14
  br label %747

747:                                              ; preds = %746, %743, %730
  %748 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %14, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %749 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %748, align 8
  %750 = icmp eq %"class.WTF::StringImpl"* %749, null
  br i1 %750, label %764, label %751

751:                                              ; preds = %747
  %752 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %749, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %753 = load atomic i32, i32* %752 monotonic, align 4
  %754 = and i32 %753, 2
  %755 = icmp eq i32 %754, 0
  %756 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %749, i64 0, i32 0
  %757 = load i32, i32* %756, align 4
  br i1 %755, label %758, label %760

758:                                              ; preds = %751
  %759 = add i32 %757, -1
  store i32 %759, i32* %756, align 4
  br label %760

760:                                              ; preds = %758, %751
  %761 = phi i32 [ %759, %758 ], [ %757, %751 ]
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %763, label %764

763:                                              ; preds = %760
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %749) #14
  br label %764

764:                                              ; preds = %763, %760, %747
  %765 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %766 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %765, align 8
  %767 = icmp eq %"class.WTF::StringImpl"* %766, null
  br i1 %767, label %781, label %768

768:                                              ; preds = %764
  %769 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %766, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %770 = load atomic i32, i32* %769 monotonic, align 4
  %771 = and i32 %770, 2
  %772 = icmp eq i32 %771, 0
  %773 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %766, i64 0, i32 0
  %774 = load i32, i32* %773, align 4
  br i1 %772, label %775, label %777

775:                                              ; preds = %768
  %776 = add i32 %774, -1
  store i32 %776, i32* %773, align 4
  br label %777

777:                                              ; preds = %775, %768
  %778 = phi i32 [ %776, %775 ], [ %774, %768 ]
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %781

780:                                              ; preds = %777
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %766) #14
  br label %781

781:                                              ; preds = %764, %777, %780
  %782 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %15, i64 0, i32 0, i32 1, i32 0, i32 0
  %783 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %782, align 8
  %784 = icmp eq %"class.WTF::StringImpl"* %783, null
  br i1 %784, label %798, label %785

785:                                              ; preds = %781
  %786 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %783, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %787 = load atomic i32, i32* %786 monotonic, align 4
  %788 = and i32 %787, 2
  %789 = icmp eq i32 %788, 0
  %790 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %783, i64 0, i32 0
  %791 = load i32, i32* %790, align 4
  br i1 %789, label %792, label %794

792:                                              ; preds = %785
  %793 = add i32 %791, -1
  store i32 %793, i32* %790, align 4
  br label %794

794:                                              ; preds = %792, %785
  %795 = phi i32 [ %793, %792 ], [ %791, %785 ]
  %796 = icmp eq i32 %795, 0
  br i1 %796, label %797, label %798

797:                                              ; preds = %794
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %783) #14
  br label %798

798:                                              ; preds = %797, %794, %781
  %799 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %800 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %799, align 8
  %801 = icmp eq %"class.WTF::StringImpl"* %800, null
  br i1 %801, label %815, label %802

802:                                              ; preds = %798
  %803 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %800, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %804 = load atomic i32, i32* %803 monotonic, align 4
  %805 = and i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %800, i64 0, i32 0
  %808 = load i32, i32* %807, align 4
  br i1 %806, label %809, label %811

809:                                              ; preds = %802
  %810 = add i32 %808, -1
  store i32 %810, i32* %807, align 4
  br label %811

811:                                              ; preds = %809, %802
  %812 = phi i32 [ %810, %809 ], [ %808, %802 ]
  %813 = icmp eq i32 %812, 0
  br i1 %813, label %814, label %815

814:                                              ; preds = %811
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %800) #14
  br label %815

815:                                              ; preds = %798, %811, %814
  %816 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  %817 = icmp eq %"class.WTF::StringImpl"* %816, null
  br i1 %817, label %831, label %818

818:                                              ; preds = %815
  %819 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %820 = load atomic i32, i32* %819 monotonic, align 4
  %821 = and i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 0
  %824 = load i32, i32* %823, align 4
  br i1 %822, label %825, label %827

825:                                              ; preds = %818
  %826 = add i32 %824, -1
  store i32 %826, i32* %823, align 4
  br label %827

827:                                              ; preds = %825, %818
  %828 = phi i32 [ %826, %825 ], [ %824, %818 ]
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %830, label %831

830:                                              ; preds = %827
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %816) #14
  br label %831

831:                                              ; preds = %830, %827, %815
  %832 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  %833 = icmp eq %"class.WTF::StringImpl"* %832, null
  br i1 %833, label %847, label %834

834:                                              ; preds = %831
  %835 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %832, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %836 = load atomic i32, i32* %835 monotonic, align 4
  %837 = and i32 %836, 2
  %838 = icmp eq i32 %837, 0
  %839 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %832, i64 0, i32 0
  %840 = load i32, i32* %839, align 4
  br i1 %838, label %841, label %843

841:                                              ; preds = %834
  %842 = add i32 %840, -1
  store i32 %842, i32* %839, align 4
  br label %843

843:                                              ; preds = %841, %834
  %844 = phi i32 [ %842, %841 ], [ %840, %834 ]
  %845 = icmp eq i32 %844, 0
  br i1 %845, label %846, label %847

846:                                              ; preds = %843
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %832) #14
  br label %847

847:                                              ; preds = %831, %843, %846
  %848 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %849 = icmp eq %"class.WTF::StringImpl"* %848, null
  br i1 %849, label %863, label %850

850:                                              ; preds = %847
  %851 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %848, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %852 = load atomic i32, i32* %851 monotonic, align 4
  %853 = and i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %848, i64 0, i32 0
  %856 = load i32, i32* %855, align 4
  br i1 %854, label %857, label %859

857:                                              ; preds = %850
  %858 = add i32 %856, -1
  store i32 %858, i32* %855, align 4
  br label %859

859:                                              ; preds = %857, %850
  %860 = phi i32 [ %858, %857 ], [ %856, %850 ]
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %862, label %863

862:                                              ; preds = %859
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %848) #14
  br label %863

863:                                              ; preds = %847, %859, %862
  br i1 %44, label %877, label %864

864:                                              ; preds = %863
  %865 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %866 = load atomic i32, i32* %865 monotonic, align 4
  %867 = and i32 %866, 2
  %868 = icmp eq i32 %867, 0
  %869 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %870 = load i32, i32* %869, align 4
  br i1 %868, label %871, label %873

871:                                              ; preds = %864
  %872 = add i32 %870, -1
  store i32 %872, i32* %869, align 4
  br label %873

873:                                              ; preds = %871, %864
  %874 = phi i32 [ %872, %871 ], [ %870, %864 ]
  %875 = icmp eq i32 %874, 0
  br i1 %875, label %876, label %877

876:                                              ; preds = %873
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #14
  br label %877

877:                                              ; preds = %863, %873, %876
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %38) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %36) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %34) #14
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %33) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #14
  br label %878

878:                                              ; preds = %877, %23
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK5blink10AudioParam8minValueEv(%"class.blink::AudioParam"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %3, i64 0, i32 8
  %5 = load float, float* %4, align 8
  ret float %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK5blink10AudioParam8maxValueEv(%"class.blink::AudioParam"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %3, i64 0, i32 9
  %5 = load float, float* %4, align 4
  ret float %5
}

declare %"class.blink::ExecutionContext"* @_ZNK5blink16BaseAudioContext19GetExecutionContextEv(%"class.blink::BaseAudioContext"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSD_SE_(%"class.WTF::StringAppend.606"* noalias sret, %"class.WTF::StringAppend.607"* dereferenceable(64), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.607", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %49, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #14
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !2

46:                                               ; preds = %37
  tail call void @llvm.trap() #14
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %47, %32, %25
  %50 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %73, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %73

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i33
  %65 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #14
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !2

70:                                               ; preds = %61
  tail call void @llvm.trap() #14
  unreachable

71:                                               ; preds = %61
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %62, align 4
  br label %73

73:                                               ; preds = %71, %56, %49
  %74 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 0, i32 1
  %75 = bitcast i8** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %97, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i33
  %89 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #14
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !2

94:                                               ; preds = %85
  tail call void @llvm.trap() #14
  unreachable

95:                                               ; preds = %85
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %86, align 4
  br label %97

97:                                               ; preds = %73, %80, %95
  %98 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %1, i64 0, i32 1
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %101, label %119, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %119

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i33
  %111 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %110, i33 1) #14
  %112 = extractvalue { i33, i1 } %111, 1
  %113 = extractvalue { i33, i1 } %111, 0
  %114 = icmp slt i33 %113, 0
  %115 = or i1 %112, %114
  br i1 %115, label %116, label %117, !prof !2

116:                                              ; preds = %107
  tail call void @llvm.trap() #14
  unreachable

117:                                              ; preds = %107
  %118 = trunc i33 %113 to i32
  store i32 %118, i32* %108, align 4
  br label %119

119:                                              ; preds = %97, %102, %117
  %120 = bitcast %"class.WTF::StringAppend.607"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %120)
  %121 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %121, align 8
  %122 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %123 = bitcast i8** %122 to i64*
  store i64 %28, i64* %123, align 8
  %124 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %124, align 8
  %125 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %126 = bitcast i8** %125 to i64*
  store i64 %52, i64* %126, align 8
  %127 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %127, align 8
  %128 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 0, i32 1
  %129 = bitcast i8** %128 to i64*
  store i64 %76, i64* %129, align 8
  %130 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %78, %"class.WTF::StringImpl"** %130, align 8
  %131 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 1
  %132 = bitcast i8** %131 to i64*
  store i64 %100, i64* %132, align 8
  %133 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %4, i64 0, i32 0
  %134 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %134, align 8
  br i1 %7, label %154, label %135

135:                                              ; preds = %119
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %154

140:                                              ; preds = %135
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = zext i32 %142 to i33
  %144 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %143, i33 1) #14
  %145 = extractvalue { i33, i1 } %144, 1
  %146 = extractvalue { i33, i1 } %144, 0
  %147 = icmp slt i33 %146, 0
  %148 = or i1 %145, %147
  br i1 %148, label %149, label %150, !prof !2

149:                                              ; preds = %140
  tail call void @llvm.trap() #14
  unreachable

150:                                              ; preds = %140
  %151 = trunc i33 %146 to i32
  store i32 %151, i32* %141, align 4
  %152 = load i64, i64* %123, align 8
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  br label %154

154:                                              ; preds = %150, %135, %119
  %155 = phi %"class.WTF::StringImpl"* [ %153, %150 ], [ %30, %135 ], [ %30, %119 ]
  %156 = phi i64 [ %152, %150 ], [ %28, %135 ], [ %28, %119 ]
  %157 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %158 = bitcast i8** %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %155, %"class.WTF::StringImpl"** %159, align 8
  %160 = icmp eq %"class.WTF::StringImpl"* %155, null
  br i1 %160, label %178, label %161

161:                                              ; preds = %154
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 2
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %161
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = zext i32 %168 to i33
  %170 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %169, i33 1) #14
  %171 = extractvalue { i33, i1 } %170, 1
  %172 = extractvalue { i33, i1 } %170, 0
  %173 = icmp slt i33 %172, 0
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %176, !prof !2

175:                                              ; preds = %166
  tail call void @llvm.trap() #14
  unreachable

176:                                              ; preds = %166
  %177 = trunc i33 %172 to i32
  store i32 %177, i32* %167, align 4
  br label %178

178:                                              ; preds = %176, %161, %154
  %179 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %180 = load i64, i64* %126, align 8
  %181 = bitcast i8** %179 to i64*
  store i64 %180, i64* %181, align 8
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %127, align 8
  %183 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %182, %"class.WTF::StringImpl"** %183, align 8
  %184 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %184, label %202, label %185

185:                                              ; preds = %178
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load atomic i32, i32* %186 monotonic, align 4
  %188 = and i32 %187, 2
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %202

190:                                              ; preds = %185
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i33
  %194 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %193, i33 1) #14
  %195 = extractvalue { i33, i1 } %194, 1
  %196 = extractvalue { i33, i1 } %194, 0
  %197 = icmp slt i33 %196, 0
  %198 = or i1 %195, %197
  br i1 %198, label %199, label %200, !prof !2

199:                                              ; preds = %190
  tail call void @llvm.trap() #14
  unreachable

200:                                              ; preds = %190
  %201 = trunc i33 %196 to i32
  store i32 %201, i32* %191, align 4
  br label %202

202:                                              ; preds = %200, %185, %178
  %203 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %204 = load i64, i64* %129, align 8
  %205 = bitcast i8** %203 to i64*
  store i64 %204, i64* %205, align 8
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %207 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %206, %"class.WTF::StringImpl"** %207, align 8
  %208 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %208, label %226, label %209

209:                                              ; preds = %202
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = and i32 %211, 2
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %226

214:                                              ; preds = %209
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = zext i32 %216 to i33
  %218 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %217, i33 1) #14
  %219 = extractvalue { i33, i1 } %218, 1
  %220 = extractvalue { i33, i1 } %218, 0
  %221 = icmp slt i33 %220, 0
  %222 = or i1 %219, %221
  br i1 %222, label %223, label %224, !prof !2

223:                                              ; preds = %214
  tail call void @llvm.trap() #14
  unreachable

224:                                              ; preds = %214
  %225 = trunc i33 %220 to i32
  store i32 %225, i32* %215, align 4
  br label %226

226:                                              ; preds = %202, %209, %224
  %227 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 1
  %228 = load i64, i64* %132, align 8
  %229 = bitcast i8** %227 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %230, align 8
  br i1 %101, label %259, label %231

231:                                              ; preds = %226
  %232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %233 = load atomic i32, i32* %232 monotonic, align 4
  %234 = and i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %237 = load i32, i32* %236, align 4
  br i1 %235, label %238, label %248

238:                                              ; preds = %231
  %239 = zext i32 %237 to i33
  %240 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %239, i33 1) #14
  %241 = extractvalue { i33, i1 } %240, 1
  %242 = extractvalue { i33, i1 } %240, 0
  %243 = icmp slt i33 %242, 0
  %244 = or i1 %241, %243
  br i1 %244, label %245, label %246, !prof !2

245:                                              ; preds = %238
  tail call void @llvm.trap() #14
  unreachable

246:                                              ; preds = %238
  %247 = trunc i33 %242 to i32
  store i32 %247, i32* %236, align 4
  br label %248

248:                                              ; preds = %246, %231
  %249 = phi i32 [ %247, %246 ], [ %237, %231 ]
  %250 = load atomic i32, i32* %232 monotonic, align 4
  %251 = and i32 %250, 2
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %255

253:                                              ; preds = %248
  %254 = add i32 %249, -1
  store i32 %254, i32* %236, align 4
  br label %255

255:                                              ; preds = %253, %248
  %256 = phi i32 [ %254, %253 ], [ %249, %248 ]
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %260

258:                                              ; preds = %255
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %260

259:                                              ; preds = %226
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %133) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %120)
  br label %271

260:                                              ; preds = %255, %258
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"* nonnull %133) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %120)
  %261 = load atomic i32, i32* %232 monotonic, align 4
  %262 = and i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = load i32, i32* %236, align 4
  br i1 %263, label %265, label %267

265:                                              ; preds = %260
  %266 = add i32 %264, -1
  store i32 %266, i32* %236, align 4
  br label %267

267:                                              ; preds = %265, %260
  %268 = phi i32 [ %266, %265 ], [ %264, %260 ]
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %271

270:                                              ; preds = %267
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %271

271:                                              ; preds = %259, %267, %270
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKSB_SC_(%"class.WTF::StringAppend.608"* noalias sret, %"class.WTF::StringAppend.609"* dereferenceable(48), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.609", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #14
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %24, %9, %3
  %27 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast i8** %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #14
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %41
  tail call void @llvm.trap() #14
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %53

53:                                               ; preds = %51, %36, %26
  %54 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8** %54 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %60, %"class.WTF::StringImpl"** %61, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #14
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #14
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %80

80:                                               ; preds = %53, %63, %78
  %81 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %4, i64 0, i32 1
  %82 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 1
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast i8** %81 to i64*
  store i64 %84, i64* %85, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %86, label %104, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %105

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #14
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %92
  tail call void @llvm.trap() #14
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4
  br label %105

104:                                              ; preds = %80
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EC2ES8_S1_(%"class.WTF::StringAppend.608"* %0, %"class.WTF::StringAppend.609"* nonnull byval(%"class.WTF::StringAppend.609") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %117

105:                                              ; preds = %87, %102
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EC2ES8_S1_(%"class.WTF::StringAppend.608"* %0, %"class.WTF::StringAppend.609"* nonnull byval(%"class.WTF::StringAppend.609") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %106 = load atomic i32, i32* %88 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %105
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %105
  %114 = phi i32 [ %112, %111 ], [ %110, %105 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %117

117:                                              ; preds = %104, %113, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS_6StringEPKcEES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_(%"class.WTF::StringAppend.609"* noalias sret, %"class.WTF::StringAppend.610"* dereferenceable(40), i8*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.610", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #14
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %24, %9, %3
  %27 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast i8** %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #14
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %41
  tail call void @llvm.trap() #14
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %53

53:                                               ; preds = %51, %36, %26
  %54 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %4, i64 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8** %54 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 1, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %60, %"class.WTF::StringImpl"** %61, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #14
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #14
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %80

80:                                               ; preds = %53, %63, %78
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EC2ES7_S3_(%"class.WTF::StringAppend.609"* %0, %"class.WTF::StringAppend.610"* nonnull byval(%"class.WTF::StringAppend.610") align 8 %4, i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS_6StringEPKcEES2_EES4_S2_EENS1_INS1_IT_T0_EET1_EERKS9_SA_(%"class.WTF::StringAppend.610"* noalias sret, %"class.WTF::StringAppend.611"* dereferenceable(32), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.611", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #14
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %24, %9, %3
  %27 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %4, i64 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast i8** %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #14
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %41
  tail call void @llvm.trap() #14
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %53

53:                                               ; preds = %26, %36, %51
  %54 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %4, i64 0, i32 1
  %55 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8** %54 to i64*
  store i64 %57, i64* %58, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %59, label %77, label %60

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %78

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i33
  %69 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %68, i33 1) #14
  %70 = extractvalue { i33, i1 } %69, 1
  %71 = extractvalue { i33, i1 } %69, 0
  %72 = icmp slt i33 %71, 0
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75, !prof !2

74:                                               ; preds = %65
  tail call void @llvm.trap() #14
  unreachable

75:                                               ; preds = %65
  %76 = trunc i33 %71 to i32
  store i32 %76, i32* %66, align 4
  br label %78

77:                                               ; preds = %53
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EC2ES6_S1_(%"class.WTF::StringAppend.610"* %0, %"class.WTF::StringAppend.611"* nonnull byval(%"class.WTF::StringAppend.611") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %90

78:                                               ; preds = %60, %75
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EC2ES6_S1_(%"class.WTF::StringAppend.610"* %0, %"class.WTF::StringAppend.611"* nonnull byval(%"class.WTF::StringAppend.611") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %79 = load atomic i32, i32* %61 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  br i1 %81, label %84, label %86

84:                                               ; preds = %78
  %85 = add i32 %83, -1
  store i32 %85, i32* %82, align 4
  br label %86

86:                                               ; preds = %84, %78
  %87 = phi i32 [ %85, %84 ], [ %83, %78 ]
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %86
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %90

90:                                               ; preds = %77, %86, %89
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.612"* noalias sret, %"class.WTF::StringAppend.613"* dereferenceable(16), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #14
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #14
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %3, %7, %22
  %25 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %1, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #14
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !2

43:                                               ; preds = %34
  tail call void @llvm.trap() #14
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %48

46:                                               ; preds = %24
  %47 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.612"* %0, %"class.WTF::StringImpl"* %5, i8* %47, %"class.WTF::StringImpl"* null)
  br label %61

48:                                               ; preds = %29, %44
  %49 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.612"* %0, %"class.WTF::StringImpl"* %5, i8* %49, %"class.WTF::StringImpl"* nonnull %2)
  %50 = load atomic i32, i32* %30 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  br i1 %52, label %55, label %57

55:                                               ; preds = %48
  %56 = add i32 %54, -1
  store i32 %56, i32* %53, align 4
  br label %57

57:                                               ; preds = %55, %48
  %58 = phi i32 [ %56, %55 ], [ %54, %48 ]
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %61

61:                                               ; preds = %46, %57, %60
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_ED2Ev(%"class.WTF::StringAppend.608"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #14
  br label %18

18:                                               ; preds = %1, %14, %17
  %19 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #14
  br label %35

35:                                               ; preds = %34, %31, %18
  %36 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %39
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %39
  %49 = phi i32 [ %47, %46 ], [ %45, %39 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #14
  br label %52

52:                                               ; preds = %51, %48, %35
  %53 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #14
  br label %69

69:                                               ; preds = %52, %65, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam8setValueEf(%"class.blink::AudioParam"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0), i64 5) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %3, float %1)
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %17

15:                                               ; preds = %8
  %16 = add i32 %14, -1
  store i32 %16, i32* %13, align 4
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %14, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %6) #14
  br label %21

21:                                               ; preds = %2, %17, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  %22 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %23 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %23, i64 0, i32 8
  %25 = load float, float* %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %23, i64 0, i32 9
  %27 = load float, float* %26, align 4
  %28 = fcmp ugt float %27, %1
  %29 = fcmp oge float %25, %1
  %30 = select i1 %29, float %25, float %1
  %31 = select i1 %28, float %30, float %27
  %32 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %23, i64 0, i32 4, i32 0
  %33 = bitcast float %31 to i32
  %34 = bitcast %"struct.std::__1::__atomic_base.56"* %32 to i32*
  store atomic i32 %33, i32* %34 monotonic, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam8setValueEfRNS_14ExceptionStateE(%"class.blink::AudioParam"* nocapture readonly, float, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0), i64 5) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %5, float %1)
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %23

23:                                               ; preds = %3, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %24 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3, i32 0, i32 0
  %25 = load %"class.blink::BaseAudioContext"*, %"class.blink::BaseAudioContext"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %25, i64 0, i32 21, i32 0
  %27 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i64, i64* %28 acquire, align 8
  %30 = uitofp i64 %29 to double
  %31 = bitcast %"class.blink::AudioDestinationHandler"* %27 to double (%"class.blink::AudioDestinationHandler"*)***
  %32 = load double (%"class.blink::AudioDestinationHandler"*)**, double (%"class.blink::AudioDestinationHandler"*)*** %31, align 8
  %33 = getelementptr inbounds double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %32, i64 25
  %34 = load double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %33, align 8
  %35 = call double %34(%"class.blink::AudioDestinationHandler"* %27) #14
  %36 = fdiv double %30, %35
  %37 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i64 20) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %4, float %1) #14
  %38 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %23
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #14
  br label %54

54:                                               ; preds = %23, %50, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #14
  %55 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %56 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %55, align 8
  %57 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %56, i64 0, i32 10
  call void @_ZN5blink18AudioParamTimeline14SetValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %57, float %1, double %36, %"class.blink::ExceptionState"* dereferenceable(72) %2) #14
  %58 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %55, align 8
  %59 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %58, i64 0, i32 8
  %60 = load float, float* %59, align 8
  %61 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %58, i64 0, i32 9
  %62 = load float, float* %61, align 4
  %63 = fcmp ugt float %62, %1
  %64 = fcmp oge float %60, %1
  %65 = select i1 %64, float %60, float %1
  %66 = select i1 %63, float %65, float %62
  %67 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %58, i64 0, i32 4, i32 0
  %68 = bitcast float %66 to i32
  %69 = bitcast %"struct.std::__1::__atomic_base.56"* %67 to i32*
  store atomic i32 %68, i32* %69 monotonic, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam14setValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i64 20) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %5, float %1)
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %23

23:                                               ; preds = %4, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %24 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %25 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %25, i64 0, i32 10
  call void @_ZN5blink18AudioParamTimeline14SetValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %26, float %1, double %2, %"class.blink::ExceptionState"* dereferenceable(72) %3) #14
  ret %"class.blink::AudioParam"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK5blink10AudioParam12defaultValueEv(%"class.blink::AudioParam"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %3, i64 0, i32 5
  %5 = load float, float* %4, align 4
  ret float %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam12SetParamTypeENS_17AudioParamHandler14AudioParamTypeE(%"class.blink::AudioParam"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %4, i64 0, i32 2
  store i32 %1, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam18SetCustomParamNameEN3WTF6StringE(%"class.blink::AudioParam"* nocapture readonly, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %24

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #14
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #14
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %24

23:                                               ; preds = %2
  tail call void @_ZN5blink17AudioParamHandler18SetCustomParamNameEN3WTF6StringE(%"class.blink::AudioParamHandler"* %4, %"class.WTF::StringImpl"* null)
  br label %36

24:                                               ; preds = %6, %21
  tail call void @_ZN5blink17AudioParamHandler18SetCustomParamNameEN3WTF6StringE(%"class.blink::AudioParamHandler"* %4, %"class.WTF::StringImpl"* nonnull %1)
  %25 = load atomic i32, i32* %7 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %24
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %24
  %33 = phi i32 [ %31, %30 ], [ %29, %24 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #14
  br label %36

36:                                               ; preds = %23, %32, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink10AudioParam14automationRateEv(%"class.blink::AudioParam"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %4, i64 0, i32 6
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  %8 = select i1 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i64 0, i64 0)
  %9 = icmp eq i32 %6, 0
  %10 = select i1 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i64 0, i64 0), i8* %8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* %10, i64 6) #14
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  ret %"class.WTF::StringImpl"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10AudioParam17setAutomationRateERKN3WTF6StringERNS_14ExceptionStateE(%"class.blink::AudioParam"* nocapture readonly, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringAppend.612", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::StringAppend.611", align 8
  %11 = alloca %"class.WTF::StringAppend.612", align 8
  %12 = alloca %"class.WTF::StringAppend.613", align 8
  %13 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %14 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %14, i64 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %260

18:                                               ; preds = %3
  %19 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = bitcast %"class.WTF::StringAppend.611"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #14
  %21 = bitcast %"class.WTF::StringAppend.612"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #14
  %22 = bitcast %"class.WTF::StringAppend.613"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #14
  %23 = tail call %"class.WTF::StringImpl"* @_ZNK5blink17AudioParamHandler12GetParamNameEv(%"class.blink::AudioParamHandler"* %14)
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %69, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  br i1 %29, label %32, label %42

32:                                               ; preds = %25
  %33 = zext i32 %31 to i33
  %34 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %33, i33 1) #14
  %35 = extractvalue { i33, i1 } %34, 1
  %36 = extractvalue { i33, i1 } %34, 0
  %37 = icmp slt i33 %36, 0
  %38 = or i1 %35, %37
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %32
  tail call void @llvm.trap() #14
  unreachable

40:                                               ; preds = %32
  %41 = trunc i33 %36 to i32
  store i32 %41, i32* %30, align 4
  br label %42

42:                                               ; preds = %25, %40
  %43 = phi i32 [ %41, %40 ], [ %31, %25 ]
  %44 = load atomic i32, i32* %26 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 0
  br i1 %46, label %48, label %58

48:                                               ; preds = %42
  %49 = zext i32 %43 to i33
  %50 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %49, i33 1) #14
  %51 = extractvalue { i33, i1 } %50, 1
  %52 = extractvalue { i33, i1 } %50, 0
  %53 = icmp slt i33 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %55, label %56, !prof !2

55:                                               ; preds = %48
  tail call void @llvm.trap() #14
  unreachable

56:                                               ; preds = %48
  %57 = trunc i33 %52 to i32
  store i32 %57, i32* %47, align 4
  br label %58

58:                                               ; preds = %56, %42
  %59 = phi i32 [ %57, %56 ], [ %43, %42 ]
  %60 = load atomic i32, i32* %26 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = add i32 %59, -1
  store i32 %64, i32* %47, align 4
  br label %65

65:                                               ; preds = %63, %58
  %66 = phi i32 [ %64, %63 ], [ %59, %58 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %23) #14
  br label %69

69:                                               ; preds = %18, %65, %68
  %70 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %12, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %23, %"class.WTF::StringImpl"** %70, align 8
  %71 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %12, i64 0, i32 1
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.42, i64 0, i64 0), i8** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %92, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %92

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i33
  %84 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %83, i33 1) #14
  %85 = extractvalue { i33, i1 } %84, 1
  %86 = extractvalue { i33, i1 } %84, 0
  %87 = icmp slt i33 %86, 0
  %88 = or i1 %85, %87
  br i1 %88, label %89, label %90, !prof !2

89:                                               ; preds = %80
  tail call void @llvm.trap() #14
  unreachable

90:                                               ; preds = %80
  %91 = trunc i33 %86 to i32
  store i32 %91, i32* %81, align 4
  br label %92

92:                                               ; preds = %69, %75, %90
  call void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.612"* nonnull sret %11, %"class.WTF::StringAppend.613"* nonnull dereferenceable(16) %12, %"class.WTF::StringImpl"* %73)
  %93 = bitcast %"class.WTF::StringAppend.612"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93)
  %94 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8, !noalias !21
  %96 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %95, %"class.WTF::StringImpl"** %96, align 8, !noalias !21
  %97 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %97, label %115, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %115

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i33
  %107 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %106, i33 1) #14
  %108 = extractvalue { i33, i1 } %107, 1
  %109 = extractvalue { i33, i1 } %107, 0
  %110 = icmp slt i33 %109, 0
  %111 = or i1 %108, %110
  br i1 %111, label %112, label %113, !prof !2

112:                                              ; preds = %103
  call void @llvm.trap() #14
  unreachable

113:                                              ; preds = %103
  %114 = trunc i33 %109 to i32
  store i32 %114, i32* %104, align 4
  br label %115

115:                                              ; preds = %113, %98, %92
  %116 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %4, i64 0, i32 0, i32 1
  %117 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %11, i64 0, i32 0, i32 1
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8, !noalias !21
  %120 = bitcast i8** %116 to i64*
  store i64 %119, i64* %120, align 8, !noalias !21
  %121 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %11, i64 0, i32 1, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8, !noalias !21
  %123 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %122, %"class.WTF::StringImpl"** %123, align 8, !noalias !21
  %124 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %115
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #14
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !2

139:                                              ; preds = %130
  call void @llvm.trap() #14
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %115, %125, %140
  call void @_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.611"* nonnull %10, %"class.WTF::StringAppend.612"* nonnull byval(%"class.WTF::StringAppend.612") align 8 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.43, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93)
  %143 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend.611"* nonnull %10)
  %144 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %143, %"class.WTF::StringImpl"** %144, align 8
  %145 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %146 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %145, align 8
  %147 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %146, align 8
  call void %147(%"class.blink::ExceptionState"* %2, i32 11, %"class.WTF::String"* nonnull dereferenceable(8) %9) #14
  %148 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %149 = icmp eq %"class.WTF::StringImpl"* %148, null
  br i1 %149, label %163, label %150

150:                                              ; preds = %142
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %159

157:                                              ; preds = %150
  %158 = add i32 %156, -1
  store i32 %158, i32* %155, align 4
  br label %159

159:                                              ; preds = %157, %150
  %160 = phi i32 [ %158, %157 ], [ %156, %150 ]
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %148) #14
  br label %163

163:                                              ; preds = %142, %159, %162
  %164 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %10, i64 0, i32 0, i32 1, i32 0, i32 0
  %165 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %166 = icmp eq %"class.WTF::StringImpl"* %165, null
  br i1 %166, label %180, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = and i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  br i1 %171, label %174, label %176

174:                                              ; preds = %167
  %175 = add i32 %173, -1
  store i32 %175, i32* %172, align 4
  br label %176

176:                                              ; preds = %174, %167
  %177 = phi i32 [ %175, %174 ], [ %173, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %165) #14
  br label %180

180:                                              ; preds = %179, %176, %163
  %181 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %181, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %183, label %197, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #14
  br label %197

197:                                              ; preds = %180, %193, %196
  %198 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %199 = icmp eq %"class.WTF::StringImpl"* %198, null
  br i1 %199, label %213, label %200

200:                                              ; preds = %197
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %202 = load atomic i32, i32* %201 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 0
  %206 = load i32, i32* %205, align 4
  br i1 %204, label %207, label %209

207:                                              ; preds = %200
  %208 = add i32 %206, -1
  store i32 %208, i32* %205, align 4
  br label %209

209:                                              ; preds = %207, %200
  %210 = phi i32 [ %208, %207 ], [ %206, %200 ]
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %209
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %198) #14
  br label %213

213:                                              ; preds = %212, %209, %197
  %214 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %215 = icmp eq %"class.WTF::StringImpl"* %214, null
  br i1 %215, label %229, label %216

216:                                              ; preds = %213
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %218 = load atomic i32, i32* %217 monotonic, align 4
  %219 = and i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 0
  %222 = load i32, i32* %221, align 4
  br i1 %220, label %223, label %225

223:                                              ; preds = %216
  %224 = add i32 %222, -1
  store i32 %224, i32* %221, align 4
  br label %225

225:                                              ; preds = %223, %216
  %226 = phi i32 [ %224, %223 ], [ %222, %216 ]
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %229

228:                                              ; preds = %225
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %214) #14
  br label %229

229:                                              ; preds = %213, %225, %228
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %231 = icmp eq %"class.WTF::StringImpl"* %230, null
  br i1 %231, label %245, label %232

232:                                              ; preds = %229
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %234 = load atomic i32, i32* %233 monotonic, align 4
  %235 = and i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  br i1 %236, label %239, label %241

239:                                              ; preds = %232
  %240 = add i32 %238, -1
  store i32 %240, i32* %237, align 4
  br label %241

241:                                              ; preds = %239, %232
  %242 = phi i32 [ %240, %239 ], [ %238, %232 ]
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %245

244:                                              ; preds = %241
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %230) #14
  br label %245

245:                                              ; preds = %229, %241, %244
  br i1 %24, label %259, label %246

246:                                              ; preds = %245
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %248 = load atomic i32, i32* %247 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 0
  %252 = load i32, i32* %251, align 4
  br i1 %250, label %253, label %255

253:                                              ; preds = %246
  %254 = add i32 %252, -1
  store i32 %254, i32* %251, align 4
  br label %255

255:                                              ; preds = %253, %246
  %256 = phi i32 [ %254, %253 ], [ %252, %246 ]
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %255
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %23) #14
  br label %259

259:                                              ; preds = %245, %255, %258
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  br label %317

260:                                              ; preds = %3
  %261 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %261) #14
  %262 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %263 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %262, align 8
  %264 = icmp eq %"class.WTF::StringImpl"* %263, null
  br i1 %264, label %265, label %269

265:                                              ; preds = %260
  %266 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* null, i8** %266, align 8
  %267 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %268 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %267, i64* %268, align 8
  br label %277

269:                                              ; preds = %260
  %270 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %263, %"class.WTF::StringImpl"** %270, align 8
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %263, i64 0, i32 1
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %263, i64 1
  %274 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %275 = bitcast i8** %274 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %273, %"class.WTF::StringImpl"** %275, align 8
  %276 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %277

277:                                              ; preds = %269, %265
  %278 = phi i64 [ %276, %269 ], [ %267, %265 ]
  %279 = phi i32 [ %272, %269 ], [ 0, %265 ]
  %280 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %279, i32* %280, align 8
  %281 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %281) #14
  %282 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %278, i64* %282, align 8
  %283 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i64 0, i64 0), i8** %283, align 8
  %284 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 6, i32* %284, align 8
  %285 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %281) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %261) #14
  br i1 %285, label %286, label %289

286:                                              ; preds = %277
  %287 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %13, align 8
  %288 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %287, i64 0, i32 6
  store i32 0, i32* %288, align 8
  br label %317

289:                                              ; preds = %277
  %290 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %290) #14
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %262, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %293, label %297

293:                                              ; preds = %289
  %294 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %294, align 8
  %295 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %296 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %295, i64* %296, align 8
  br label %305

297:                                              ; preds = %289
  %298 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %291, %"class.WTF::StringImpl"** %298, align 8
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 1
  %302 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %303 = bitcast i8** %302 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %301, %"class.WTF::StringImpl"** %303, align 8
  %304 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %305

305:                                              ; preds = %297, %293
  %306 = phi i64 [ %304, %297 ], [ %295, %293 ]
  %307 = phi i32 [ %300, %297 ], [ 0, %293 ]
  %308 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %307, i32* %308, align 8
  %309 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %309) #14
  %310 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %306, i64* %310, align 8
  %311 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i8** %311, align 8
  %312 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 6, i32* %312, align 8
  %313 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %7, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %309) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %290) #14
  br i1 %313, label %314, label %317

314:                                              ; preds = %305
  %315 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %13, align 8
  %316 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %315, i64 0, i32 6
  store i32 1, i32* %316, align 8
  br label %317

317:                                              ; preds = %305, %314, %259, %286
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend.611"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = bitcast %"class.WTF::StringTypeAdapter.642"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false) #14
  %10 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %5, i8* %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %14 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  %17 = select i1 %16, %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"* %15
  %18 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 16, i1 false) #14
  %20 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %20) #14
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #14
  br i1 %24, label %25, label %26

25:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  br label %75

26:                                               ; preds = %1
  %27 = icmp eq %"class.WTF::StringImpl"* %12, null
  %28 = select i1 %27, %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"* %12
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  br i1 %32, label %75, label %33

33:                                               ; preds = %26
  %34 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #14
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %35 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %0)
  %36 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %35, i8** nonnull dereferenceable(8) %6) #14
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0
  %39 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 16, i1 false) #14
  %40 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %40) #14
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend.612"* %38, i8* %37) #14
  %41 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %38) #14
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %37, i64 %42
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %43) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #14
  %44 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %44, label %117, label %45

45:                                               ; preds = %33
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %62

52:                                               ; preds = %45
  %53 = zext i32 %51 to i33
  %54 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %53, i33 1) #14
  %55 = extractvalue { i33, i1 } %54, 1
  %56 = extractvalue { i33, i1 } %54, 0
  %57 = icmp slt i33 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %60, !prof !2

59:                                               ; preds = %52
  call void @llvm.trap() #14
  unreachable

60:                                               ; preds = %52
  %61 = trunc i33 %56 to i32
  store i32 %61, i32* %50, align 4
  br label %62

62:                                               ; preds = %45, %60
  %63 = phi i32 [ %61, %60 ], [ %51, %45 ]
  %64 = ptrtoint %"class.WTF::StringImpl"* %36 to i64
  %65 = load atomic i32, i32* %46 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %70 = add i32 %63, -1
  store i32 %70, i32* %69, align 4
  br label %71

71:                                               ; preds = %68, %62
  %72 = phi i32 [ %70, %68 ], [ %63, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %117

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #14
  br label %117

75:                                               ; preds = %26, %25
  %76 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #14
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %77 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %0)
  %78 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %77, i16** nonnull dereferenceable(8) %7) #14
  %79 = load i16*, i16** %7, align 8
  %80 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0
  %81 = bitcast %"class.WTF::StringTypeAdapter.642"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 16, i1 false) #14
  %82 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %2, i8* %82) #14
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend.612"* %80, i16* %79) #14
  %83 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %80) #14
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i16, i16* %79, i64 %84
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %2, i16* %85) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #14
  %86 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %86, label %117, label %87

87:                                               ; preds = %75
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %104

94:                                               ; preds = %87
  %95 = zext i32 %93 to i33
  %96 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #14
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %94
  call void @llvm.trap() #14
  unreachable

102:                                              ; preds = %94
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %92, align 4
  br label %104

104:                                              ; preds = %87, %102
  %105 = phi i32 [ %103, %102 ], [ %93, %87 ]
  %106 = ptrtoint %"class.WTF::StringImpl"* %78 to i64
  %107 = load atomic i32, i32* %88 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %112 = add i32 %105, -1
  store i32 %112, i32* %111, align 4
  br label %113

113:                                              ; preds = %110, %104
  %114 = phi i32 [ %112, %110 ], [ %105, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %117

117:                                              ; preds = %116, %113, %75, %74, %71, %33
  %118 = phi i8* [ %34, %33 ], [ %34, %71 ], [ %34, %74 ], [ %76, %75 ], [ %76, %113 ], [ %76, %116 ]
  %119 = phi i64 [ 0, %33 ], [ %64, %71 ], [ %64, %74 ], [ 0, %75 ], [ %106, %113 ], [ %106, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #14
  %120 = inttoptr i64 %119 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %120
}

declare void @_ZN5blink18AudioParamTimeline14SetValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam23linearRampToValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.45, i64 0, i64 0), i64 29) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %5, float %1)
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %23

23:                                               ; preds = %4, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %24 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %25 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %25, i64 0, i32 10
  %27 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %25, i64 0, i32 4, i32 0
  %28 = bitcast %"struct.std::__1::__atomic_base.56"* %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = bitcast i32 %29 to float
  %31 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3, i32 0, i32 0
  %32 = load %"class.blink::BaseAudioContext"*, %"class.blink::BaseAudioContext"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %32, i64 0, i32 21, i32 0
  %34 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i64, i64* %35 acquire, align 8
  %37 = uitofp i64 %36 to double
  %38 = bitcast %"class.blink::AudioDestinationHandler"* %34 to double (%"class.blink::AudioDestinationHandler"*)***
  %39 = load double (%"class.blink::AudioDestinationHandler"*)**, double (%"class.blink::AudioDestinationHandler"*)*** %38, align 8
  %40 = getelementptr inbounds double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %39, i64 25
  %41 = load double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %40, align 8
  %42 = call double %41(%"class.blink::AudioDestinationHandler"* %34) #14
  %43 = fdiv double %37, %42
  call void @_ZN5blink18AudioParamTimeline23LinearRampToValueAtTimeEfdfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %26, float %1, double %2, float %30, double %43, %"class.blink::ExceptionState"* dereferenceable(72) %3) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline23LinearRampToValueAtTimeEfdfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, float, double, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam28exponentialRampToValueAtTimeEfdRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i64 0, i64 0), i64 28) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %5, float %1)
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %23

23:                                               ; preds = %4, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %24 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %25 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %25, i64 0, i32 10
  %27 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %25, i64 0, i32 4, i32 0
  %28 = bitcast %"struct.std::__1::__atomic_base.56"* %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = bitcast i32 %29 to float
  %31 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 3, i32 0, i32 0
  %32 = load %"class.blink::BaseAudioContext"*, %"class.blink::BaseAudioContext"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::BaseAudioContext", %"class.blink::BaseAudioContext"* %32, i64 0, i32 21, i32 0
  %34 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i64, i64* %35 acquire, align 8
  %37 = uitofp i64 %36 to double
  %38 = bitcast %"class.blink::AudioDestinationHandler"* %34 to double (%"class.blink::AudioDestinationHandler"*)***
  %39 = load double (%"class.blink::AudioDestinationHandler"*)**, double (%"class.blink::AudioDestinationHandler"*)*** %38, align 8
  %40 = getelementptr inbounds double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %39, i64 25
  %41 = load double (%"class.blink::AudioDestinationHandler"*)*, double (%"class.blink::AudioDestinationHandler"*)** %40, align 8
  %42 = call double %41(%"class.blink::AudioDestinationHandler"* %34) #14
  %43 = fdiv double %37, %42
  call void @_ZN5blink18AudioParamTimeline28ExponentialRampToValueAtTimeEfdfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %26, float %1, double %2, float %30, double %43, %"class.blink::ExceptionState"* dereferenceable(72) %3) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline28ExponentialRampToValueAtTimeEfdfdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, float, double, float, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam15setTargetAtTimeEfddRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, float, double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::String", align 8
  %7 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.47, i64 0, i64 0), i64 21) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %6, float %1)
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #14
  br label %24

24:                                               ; preds = %5, %20, %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #14
  %25 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %26 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %26, i64 0, i32 10
  call void @_ZN5blink18AudioParamTimeline15SetTargetAtTimeEfddRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %27, float %1, double %2, double %3, %"class.blink::ExceptionState"* dereferenceable(72) %4) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline15SetTargetAtTimeEfddRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, float, double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam19setValueCurveAtTimeERKN3WTF6VectorIfLj0ENS1_18PartitionAllocatorEEEddRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, %"class.WTF::Vector.502"* dereferenceable(16), double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::String", align 8
  %7 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %8, i64 0, i32 8
  %10 = load float, float* %9, align 8
  %11 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %8, i64 0, i32 9
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %"class.WTF::Vector.502", %"class.WTF::Vector.502"* %1, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %46, label %19

16:                                               ; preds = %19
  %17 = load i32, i32* %13, align 4
  %18 = icmp ult i32 %26, %17
  br i1 %18, label %19, label %46

19:                                               ; preds = %5, %16
  %20 = phi i32 [ %26, %16 ], [ 0, %5 ]
  %21 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.502"* %1, i32 %20) #14
  %22 = load float, float* %21, align 4
  %23 = fcmp olt float %22, %10
  %24 = fcmp ogt float %22, %12
  %25 = or i1 %23, %24
  %26 = add nuw i32 %20, 1
  br i1 %25, label %27, label %16

27:                                               ; preds = %19
  %28 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i64 0, i64 0), i64 25) #14
  call void @_ZN5blink10AudioParam18WarnIfOutsideRangeERKN3WTF6StringEf(%"class.blink::AudioParam"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %6, float %22)
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %41

39:                                               ; preds = %32
  %40 = add i32 %38, -1
  store i32 %40, i32* %37, align 4
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi i32 [ %40, %39 ], [ %38, %32 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #14
  br label %45

45:                                               ; preds = %27, %41, %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #14
  br label %46

46:                                               ; preds = %16, %5, %45
  %47 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %7, align 8
  %48 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %47, i64 0, i32 10
  call void @_ZN5blink18AudioParamTimeline19SetValueCurveAtTimeERKN3WTF6VectorIfLj0ENS1_18PartitionAllocatorEEEddRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %48, %"class.WTF::Vector.502"* dereferenceable(16) %1, double %2, double %3, %"class.blink::ExceptionState"* dereferenceable(72) %4) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline19SetValueCurveAtTimeERKN3WTF6VectorIfLj0ENS1_18PartitionAllocatorEEEddRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, %"class.WTF::Vector.502"* dereferenceable(16), double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam21cancelScheduledValuesEdRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %5 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %5, i64 0, i32 10
  tail call void @_ZN5blink18AudioParamTimeline21CancelScheduledValuesEdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %6, double %1, %"class.blink::ExceptionState"* dereferenceable(72) %2) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline21CancelScheduledValuesEdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AudioParam"* @_ZN5blink10AudioParam19cancelAndHoldAtTimeEdRNS_14ExceptionStateE(%"class.blink::AudioParam"* readonly returned, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::AudioParam", %"class.blink::AudioParam"* %0, i64 0, i32 2, i32 0
  %5 = load %"class.blink::AudioParamHandler"*, %"class.blink::AudioParamHandler"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %5, i64 0, i32 10
  tail call void @_ZN5blink18AudioParamTimeline19CancelAndHoldAtTimeEdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"* %6, double %1, %"class.blink::ExceptionState"* dereferenceable(72) %2) #14
  ret %"class.blink::AudioParam"* %0
}

declare void @_ZN5blink18AudioParamTimeline19CancelAndHoldAtTimeEdRNS_14ExceptionStateE(%"class.blink::AudioParamTimeline"*, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink10AudioParam18GetWrapperTypeInfoEv(%"class.blink::AudioParam"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink10AudioParam18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioParam15ReportDidCreateEv(%"class.blink::AudioParam"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioParam21ReportWillBeDestroyedEv(%"class.blink::AudioParam"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn16_N5blink10AudioParam15ReportDidCreateEv(%"class.blink::AudioParam"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn16_N5blink10AudioParam21ReportWillBeDestroyedEv(%"class.blink::AudioParam"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17AudioParamHandlerD2Ev(%"class.blink::AudioParamHandler"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink17AudioParamHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 12, i32 0
  %4 = load %"class.blink::AudioBus"*, %"class.blink::AudioBus"** %3, align 8
  %5 = icmp eq %"class.blink::AudioBus"* %4, null
  br i1 %5, label %43, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %43

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.27", %"class.base::RefCountedThreadSafe.27"* %7, i64 2
  %13 = getelementptr inbounds %"class.base::RefCountedThreadSafe.27", %"class.base::RefCountedThreadSafe.27"* %7, i64 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = bitcast %"class.base::RefCountedThreadSafe.27"* %12 to %"class.blink::AudioChannel"**
  br i1 %15, label %34, label %17, !prof !2

17:                                               ; preds = %11
  %18 = load %"class.blink::AudioChannel"*, %"class.blink::AudioChannel"** %16, align 8
  %19 = zext i32 %14 to i64
  %20 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %18, i64 %19
  br label %21

21:                                               ; preds = %30, %17
  %22 = phi %"class.blink::AudioChannel"* [ %31, %30 ], [ %18, %17 ]
  %23 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %23, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %23, align 8
  %25 = icmp eq %"class.blink::AudioArray"* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = bitcast %"class.blink::AudioArray"* %24 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %28) #14
  %29 = bitcast %"class.blink::AudioArray"* %24 to i8*
  tail call void @free(i8* %29) #14
  br label %30

30:                                               ; preds = %26, %21
  %31 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 1
  %32 = icmp eq %"class.blink::AudioChannel"* %31, %20
  br i1 %32, label %33, label %21

33:                                               ; preds = %30
  store i32 0, i32* %13, align 4
  br label %34

34:                                               ; preds = %33, %11
  %35 = load %"class.blink::AudioChannel"*, %"class.blink::AudioChannel"** %16, align 8
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe.27", %"class.base::RefCountedThreadSafe.27"* %7, i64 6
  %37 = bitcast %"class.base::RefCountedThreadSafe.27"* %36 to %"class.blink::AudioChannel"*
  %38 = icmp eq %"class.blink::AudioChannel"* %35, %37
  br i1 %38, label %41, label %39, !prof !24

39:                                               ; preds = %34
  %40 = bitcast %"class.base::RefCountedThreadSafe.27"* %12 to %"class.WTF::VectorBuffer.29"*
  tail call void @_ZN3WTF12VectorBufferIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.29"* %40, %"class.blink::AudioChannel"* %35) #14
  br label %41

41:                                               ; preds = %39, %34
  %42 = bitcast %"class.blink::AudioBus"* %4 to i8*
  tail call void @free(i8* %42) #14
  br label %43

43:                                               ; preds = %1, %6, %41
  %44 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 11, i32 0
  %45 = load %"class.blink::AudioDestinationHandler"*, %"class.blink::AudioDestinationHandler"** %44, align 8
  %46 = icmp eq %"class.blink::AudioDestinationHandler"* %45, null
  br i1 %46, label %59, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::AudioDestinationHandler", %"class.blink::AudioDestinationHandler"* %45, i64 0, i32 0, i32 1, i32 0
  %49 = getelementptr inbounds %"class.base::RefCountedThreadSafe.76", %"class.base::RefCountedThreadSafe.76"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw sub i32* %49, i32 1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %59

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.base::RefCountedThreadSafe.76", %"class.base::RefCountedThreadSafe.76"* %48, i64 -2
  %54 = bitcast %"class.base::RefCountedThreadSafe.76"* %53 to %"class.blink::AudioHandler"*
  %55 = bitcast %"class.base::RefCountedThreadSafe.76"* %53 to void (%"class.blink::AudioHandler"*)***
  %56 = load void (%"class.blink::AudioHandler"*)**, void (%"class.blink::AudioHandler"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.blink::AudioHandler"*)*, void (%"class.blink::AudioHandler"*)** %56, i64 1
  %58 = load void (%"class.blink::AudioHandler"*)*, void (%"class.blink::AudioHandler"*)** %57, align 8
  tail call void %58(%"class.blink::AudioHandler"* nonnull %54) #14
  br label %59

59:                                               ; preds = %43, %47, %52
  %60 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10
  %61 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"* %61) #14
  %62 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 1, i32 0, i32 0
  %63 = load %"class.blink::AudioParamTimeline::ParamEvent"**, %"class.blink::AudioParamTimeline::ParamEvent"*** %62, align 8
  %64 = icmp eq %"class.blink::AudioParamTimeline::ParamEvent"** %63, null
  br i1 %64, label %67, label %65, !prof !24

65:                                               ; preds = %59
  %66 = bitcast %"class.blink::AudioParamTimeline::ParamEvent"** %63 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #14
  store %"class.blink::AudioParamTimeline::ParamEvent"** null, %"class.blink::AudioParamTimeline::ParamEvent"*** %62, align 8
  br label %67

67:                                               ; preds = %65, %59
  %68 = getelementptr inbounds %"class.blink::AudioParamTimeline", %"class.blink::AudioParamTimeline"* %60, i64 0, i32 0, i32 0, i32 0, i32 0
  %69 = load %"class.std::__1::unique_ptr.62"*, %"class.std::__1::unique_ptr.62"** %68, align 8
  %70 = icmp eq %"class.std::__1::unique_ptr.62"* %69, null
  br i1 %70, label %88, label %71, !prof !24

71:                                               ; preds = %67
  %72 = bitcast %"class.std::__1::unique_ptr.62"* %69 to i8*
  %73 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 10, i32 0, i32 0, i32 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %86, label %76, !prof !2

76:                                               ; preds = %71
  %77 = zext i32 %74 to i64
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.62"* %69, i64 %77
  br label %79

79:                                               ; preds = %79, %76
  %80 = phi %"class.std::__1::unique_ptr.62"* [ %81, %79 ], [ %69, %76 ]
  tail call void @_ZNSt3__110unique_ptrIN5blink18AudioParamTimeline10ParamEventENS_14default_deleteIS3_EEED2Ev(%"class.std::__1::unique_ptr.62"* %80) #14
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.62"* %80, i64 1
  %82 = icmp eq %"class.std::__1::unique_ptr.62"* %81, %78
  br i1 %82, label %83, label %79

83:                                               ; preds = %79
  store i32 0, i32* %73, align 4
  %84 = bitcast %"class.blink::AudioParamTimeline"* %60 to i8**
  %85 = load i8*, i8** %84, align 8
  br label %86

86:                                               ; preds = %83, %71
  %87 = phi i8* [ %85, %83 ], [ %72, %71 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %87) #14
  store %"class.std::__1::unique_ptr.62"* null, %"class.std::__1::unique_ptr.62"** %68, align 8
  br label %88

88:                                               ; preds = %67, %86
  %89 = getelementptr inbounds %"class.blink::AudioParamHandler", %"class.blink::AudioParamHandler"* %0, i64 0, i32 3, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %105, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  br i1 %96, label %99, label %101

99:                                               ; preds = %92
  %100 = add i32 %98, -1
  store i32 %100, i32* %97, align 4
  br label %101

101:                                              ; preds = %99, %92
  %102 = phi i32 [ %100, %99 ], [ %98, %92 ]
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %90) #14
  br label %105

105:                                              ; preds = %88, %101, %104
  %106 = bitcast %"class.blink::AudioParamHandler"* %0 to %"class.blink::AudioSummingJunction"*
  tail call void @_ZN5blink20AudioSummingJunctionD2Ev(%"class.blink::AudioSummingJunction"* %106) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17AudioParamHandlerD0Ev(%"class.blink::AudioParamHandler"*) unnamed_addr #8 comdat align 2 {
  tail call void @_ZN5blink17AudioParamHandlerD2Ev(%"class.blink::AudioParamHandler"* %0) #14
  %2 = bitcast %"class.blink::AudioParamHandler"* %0 to i8*
  tail call void @free(i8* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17AudioParamHandler9DidUpdateEv(%"class.blink::AudioParamHandler"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"*, i1 zeroext) unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #9

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

declare i32 @_ZN3WTF13CurrentThreadEv() local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::AudioNodeOutput"** @_ZN3WTF6VectorIPN5blink15AudioNodeOutputELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.44"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.44", %"class.WTF::Vector.44"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #14
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.49, i64 0, i64 0), i8* %14, i8* %15) #14
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.50, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #14
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #14
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %23 = getelementptr inbounds %"class.WTF::Vector.44", %"class.WTF::Vector.44"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::AudioNodeOutput"**, %"class.blink::AudioNodeOutput"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::AudioNodeOutput"*, %"class.blink::AudioNodeOutput"** %24, i64 %25
  ret %"class.blink::AudioNodeOutput"** %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #11

declare void @_ZN5blink19DeferredTaskHandler4lockEv(%"class.blink::DeferredTaskHandler"*) local_unnamed_addr #1

declare void @_ZN5blink19DeferredTaskHandler6unlockEv(%"class.blink::DeferredTaskHandler"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink19DeferredTaskHandlerD1Ev(%"class.blink::DeferredTaskHandler"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #14
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #14
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.50"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.50"*)) #14
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #8 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #14
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #14
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #14
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #14
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0), i8* %21, i8* %22) #14
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #14
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.54, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #14
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #14
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #14
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #14
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #14
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.50"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_16BaseAudioContextEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::BaseAudioContext"*
  %4 = bitcast i8* %1 to void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)**, void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)*, void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)*, void (%"class.blink::BaseAudioContext"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::BaseAudioContext"* %3, %"class.blink::Visitor"* %0) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.612"*, %"class.WTF::StringImpl"*, i8*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %4, %8, %23
  %26 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %5, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %29, label %59, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %47

37:                                               ; preds = %30
  %38 = zext i32 %36 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #14
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %37
  tail call void @llvm.trap() #14
  unreachable

45:                                               ; preds = %37
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %35, align 4
  br label %47

47:                                               ; preds = %30, %45
  %48 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %49 = load atomic i32, i32* %31 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %54 = add i32 %48, -1
  store i32 %54, i32* %53, align 4
  br label %55

55:                                               ; preds = %52, %47
  %56 = phi i32 [ %54, %52 ], [ %48, %47 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #14
  br label %59

59:                                               ; preds = %25, %55, %58
  br i1 %7, label %73, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #14
  br label %73

73:                                               ; preds = %59, %69, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.611"*, %"class.WTF::StringAppend.612"* byval(%"class.WTF::StringAppend.612") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %1, i64 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %1, i64 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #14
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #14
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %54

52:                                               ; preds = %25
  %53 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 1
  store i8* %2, i8** %53, align 8
  br label %67

54:                                               ; preds = %35, %50
  %55 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 1
  store i8* %2, i8** %55, align 8
  %56 = load atomic i32, i32* %36 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #14
  br label %67

67:                                               ; preds = %52, %66, %63
  br i1 %7, label %81, label %68

68:                                               ; preds = %67
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #14
  br label %81

81:                                               ; preds = %67, %77, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EC2ES6_S1_(%"class.WTF::StringAppend.610"*, %"class.WTF::StringAppend.611"* byval(%"class.WTF::StringAppend.611") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #14
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #14
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %25, %35, %50
  %53 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %1, i64 0, i32 1
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast i8** %53 to i64*
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %58, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %59, label %89, label %60

60:                                               ; preds = %52
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %77

67:                                               ; preds = %60
  %68 = zext i32 %66 to i33
  %69 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %68, i33 1) #14
  %70 = extractvalue { i33, i1 } %69, 1
  %71 = extractvalue { i33, i1 } %69, 0
  %72 = icmp slt i33 %71, 0
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75, !prof !2

74:                                               ; preds = %67
  tail call void @llvm.trap() #14
  unreachable

75:                                               ; preds = %67
  %76 = trunc i33 %71 to i32
  store i32 %76, i32* %65, align 4
  br label %77

77:                                               ; preds = %60, %75
  %78 = phi i32 [ %76, %75 ], [ %66, %60 ]
  %79 = load atomic i32, i32* %61 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %84 = add i32 %78, -1
  store i32 %84, i32* %83, align 4
  br label %85

85:                                               ; preds = %82, %77
  %86 = phi i32 [ %84, %82 ], [ %78, %77 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %89

89:                                               ; preds = %52, %85, %88
  br i1 %34, label %103, label %90

90:                                               ; preds = %89
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %99

97:                                               ; preds = %90
  %98 = add i32 %96, -1
  store i32 %98, i32* %95, align 4
  br label %99

99:                                               ; preds = %97, %90
  %100 = phi i32 [ %98, %97 ], [ %96, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #14
  br label %103

103:                                              ; preds = %102, %99, %89
  br i1 %7, label %117, label %104

104:                                              ; preds = %103
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %104
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %104
  %114 = phi i32 [ %112, %111 ], [ %110, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #14
  br label %117

117:                                              ; preds = %103, %113, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EC2ES7_S3_(%"class.WTF::StringAppend.609"*, %"class.WTF::StringAppend.610"* byval(%"class.WTF::StringAppend.610") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #14
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #14
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %50, %35, %25
  %53 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 0, i32 1
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast i8** %53 to i64*
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %1, i64 0, i32 1, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %60, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %61, label %79, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %81

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #14
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #14
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  br label %81

79:                                               ; preds = %52
  %80 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 1
  store i8* %2, i8** %80, align 8
  br label %94

81:                                               ; preds = %62, %77
  %82 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 1
  store i8* %2, i8** %82, align 8
  %83 = load atomic i32, i32* %63 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %90

88:                                               ; preds = %81
  %89 = add i32 %87, -1
  store i32 %89, i32* %86, align 4
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %89, %88 ], [ %87, %81 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %94

94:                                               ; preds = %79, %93, %90
  br i1 %34, label %108, label %95

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  br i1 %99, label %102, label %104

102:                                              ; preds = %95
  %103 = add i32 %101, -1
  store i32 %103, i32* %100, align 4
  br label %104

104:                                              ; preds = %102, %95
  %105 = phi i32 [ %103, %102 ], [ %101, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #14
  br label %108

108:                                              ; preds = %107, %104, %94
  br i1 %7, label %122, label %109

109:                                              ; preds = %108
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #14
  br label %122

122:                                              ; preds = %108, %118, %121
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EC2ES8_S1_(%"class.WTF::StringAppend.608"*, %"class.WTF::StringAppend.609"* byval(%"class.WTF::StringAppend.609") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #14
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #14
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %50, %35, %25
  %53 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 0, i32 1
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast i8** %53 to i64*
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %60, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %61, label %79, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %79

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #14
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #14
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  br label %79

79:                                               ; preds = %52, %62, %77
  %80 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %1, i64 0, i32 1
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast i8** %80 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %85, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %86, label %116, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %104

94:                                               ; preds = %87
  %95 = zext i32 %93 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #14
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %94
  tail call void @llvm.trap() #14
  unreachable

102:                                              ; preds = %94
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %92, align 4
  br label %104

104:                                              ; preds = %87, %102
  %105 = phi i32 [ %103, %102 ], [ %93, %87 ]
  %106 = load atomic i32, i32* %88 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %111 = add i32 %105, -1
  store i32 %111, i32* %110, align 4
  br label %112

112:                                              ; preds = %109, %104
  %113 = phi i32 [ %111, %109 ], [ %105, %104 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %116

116:                                              ; preds = %79, %112, %115
  br i1 %61, label %130, label %117

117:                                              ; preds = %116
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %130

130:                                              ; preds = %129, %126, %116
  br i1 %34, label %144, label %131

131:                                              ; preds = %130
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %137 = load i32, i32* %136, align 4
  br i1 %135, label %138, label %140

138:                                              ; preds = %131
  %139 = add i32 %137, -1
  store i32 %139, i32* %136, align 4
  br label %140

140:                                              ; preds = %138, %131
  %141 = phi i32 [ %139, %138 ], [ %137, %131 ]
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #14
  br label %144

144:                                              ; preds = %143, %140, %130
  br i1 %7, label %158, label %145

145:                                              ; preds = %144
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %154

152:                                              ; preds = %145
  %153 = add i32 %151, -1
  store i32 %153, i32* %150, align 4
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 [ %153, %152 ], [ %151, %145 ]
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %154
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #14
  br label %158

158:                                              ; preds = %144, %154, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ConsoleMessage"* @_ZN5blink25MakeGarbageCollectedTraitINS_14ConsoleMessageEE4CallIJNS_5mojom20ConsoleMessageSourceENS4_19ConsoleMessageLevelEN3WTF12StringAppendINS8_INS8_INS8_INS8_INS8_INS8_INS8_INS8_INS7_6StringEPKcEES9_EESB_EES9_EESB_EES9_EESB_EES9_EESB_EEEEEPS1_DpOT_(i32* dereferenceable(4), i32* dereferenceable(4), %"class.WTF::StringAppend"* dereferenceable(80)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_14ConsoleMessageEEEPhm(i64 72) #14
  %6 = bitcast i8* %5 to %"class.blink::ConsoleMessage"*
  %7 = load i32, i32* %0, align 4
  %8 = load i32, i32* %1, align 4
  %9 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #14
  %10 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend"* %2)
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = tail call %"class.blink::SourceLocation"* @_ZN5blink14SourceLocation7CaptureEPNS_16ExecutionContextE(%"class.blink::ExecutionContext"* null) #14
  call void @_ZN5blink14ConsoleMessageC1ENS_5mojom20ConsoleMessageSourceENS1_19ConsoleMessageLevelERKN3WTF6StringENSt3__110unique_ptrINS_14SourceLocationENS8_14default_deleteISA_EEEE(%"class.blink::ConsoleMessage"* %6, i32 %7, i32 %8, %"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.blink::SourceLocation"* %12) #14
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #14
  br label %28

28:                                               ; preds = %3, %24, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #14
  %29 = getelementptr inbounds i8, i8* %5, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  ret %"class.blink::ConsoleMessage"* %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.647", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %6 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.642"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false) #14
  %12 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %6, i8* %12) #14
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %17 = select i1 %15, %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"* %14
  %18 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 16, i1 false) #14
  %20 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %20) #14
  %21 = bitcast %"class.WTF::StringTypeAdapter.647"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  %22 = getelementptr inbounds %"class.WTF::StringTypeAdapter.647", %"class.WTF::StringTypeAdapter.647"* %2, i64 0, i32 0
  %23 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringAppend.609"* %23, %"class.WTF::StringAppend.609"** %22, align 8
  %24 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %27 = call zeroext i1 @_ZNK3WTF17StringTypeAdapterINS_12StringAppendINS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EEE6Is8BitEv(%"class.WTF::StringTypeAdapter.647"* nonnull %2) #14
  br i1 %27, label %29, label %28

28:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #14
  br label %36

29:                                               ; preds = %1
  %30 = icmp eq %"class.WTF::StringImpl"* %25, null
  %31 = select i1 %30, %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"* %25
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #14
  br i1 %35, label %36, label %37

36:                                               ; preds = %29, %28
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  br label %83

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  br i1 %41, label %83, label %42

42:                                               ; preds = %37
  %43 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #14
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %44 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %45 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %44, i8** nonnull dereferenceable(8) %7) #14
  %46 = load i8*, i8** %7, align 8
  %47 = bitcast %"class.WTF::StringTypeAdapter.642"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 16, i1 false) #14
  %48 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %5, i8* %48) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.606"* %9, i8* %46) #14
  %49 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.606"* %9) #14
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %46, i64 %50
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %5, i8* %51) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #14
  %52 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %52, label %124, label %53

53:                                               ; preds = %42
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %70

60:                                               ; preds = %53
  %61 = zext i32 %59 to i33
  %62 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %61, i33 1) #14
  %63 = extractvalue { i33, i1 } %62, 1
  %64 = extractvalue { i33, i1 } %62, 0
  %65 = icmp slt i33 %64, 0
  %66 = or i1 %63, %65
  br i1 %66, label %67, label %68, !prof !2

67:                                               ; preds = %60
  call void @llvm.trap() #14
  unreachable

68:                                               ; preds = %60
  %69 = trunc i33 %64 to i32
  store i32 %69, i32* %58, align 4
  br label %70

70:                                               ; preds = %53, %68
  %71 = phi i32 [ %69, %68 ], [ %59, %53 ]
  %72 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  %73 = load atomic i32, i32* %54 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %78 = add i32 %71, -1
  store i32 %78, i32* %77, align 4
  br label %79

79:                                               ; preds = %76, %70
  %80 = phi i32 [ %78, %76 ], [ %71, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %124

82:                                               ; preds = %79
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #14
  br label %124

83:                                               ; preds = %37, %36
  %84 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #14
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %85 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %86 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %85, i16** nonnull dereferenceable(8) %8) #14
  %87 = load i16*, i16** %8, align 8
  %88 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %88) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 -86, i64 16, i1 false) #14
  %89 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %89) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.606"* %9, i16* %87) #14
  %90 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.606"* %9) #14
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i16, i16* %87, i64 %91
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i16* %92) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %88) #14
  %93 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %93, label %124, label %94

94:                                               ; preds = %83
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  br i1 %98, label %101, label %111

101:                                              ; preds = %94
  %102 = zext i32 %100 to i33
  %103 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #14
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !2

108:                                              ; preds = %101
  call void @llvm.trap() #14
  unreachable

109:                                              ; preds = %101
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %99, align 4
  br label %111

111:                                              ; preds = %94, %109
  %112 = phi i32 [ %110, %109 ], [ %100, %94 ]
  %113 = ptrtoint %"class.WTF::StringImpl"* %86 to i64
  %114 = load atomic i32, i32* %95 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %119 = add i32 %112, -1
  store i32 %119, i32* %118, align 4
  br label %120

120:                                              ; preds = %117, %111
  %121 = phi i32 [ %119, %117 ], [ %112, %111 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #14
  br label %124

124:                                              ; preds = %123, %120, %83, %82, %79, %42
  %125 = phi i8* [ %43, %42 ], [ %43, %79 ], [ %43, %82 ], [ %84, %83 ], [ %84, %120 ], [ %84, %123 ]
  %126 = phi i64 [ 0, %42 ], [ %72, %79 ], [ %72, %82 ], [ 0, %83 ], [ %113, %120 ], [ %113, %123 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #14
  %127 = inttoptr i64 %126 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %127
}

declare %"class.blink::SourceLocation"* @_ZN5blink14SourceLocation7CaptureEPNS_16ExecutionContextE(%"class.blink::ExecutionContext"*) local_unnamed_addr #1

declare void @_ZN5blink14ConsoleMessageC1ENS_5mojom20ConsoleMessageSourceENS1_19ConsoleMessageLevelERKN3WTF6StringENSt3__110unique_ptrINS_14SourceLocationENS8_14default_deleteISA_EEEE(%"class.blink::ConsoleMessage"*, i32, i32, %"class.WTF::String"* dereferenceable(8), %"class.blink::SourceLocation"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_14ConsoleMessageEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #14
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #14
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.50"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_14ConsoleMessageEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.50"*)) #14
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14ConsoleMessageEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_14ConsoleMessageEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ConsoleMessage"*
  tail call void @_ZNK5blink14ConsoleMessage5TraceEPNS_7VisitorE(%"class.blink::ConsoleMessage"* %3, %"class.blink::Visitor"* %0) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_14ConsoleMessageEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ConsoleMessage"*
  tail call void @_ZN5blink14ConsoleMessageD1Ev(%"class.blink::ConsoleMessage"* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_14ConsoleMessageEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.55, i64 0, i64 0), i8 1 }
}

declare void @_ZNK5blink14ConsoleMessage5TraceEPNS_7VisitorE(%"class.blink::ConsoleMessage"*, %"class.blink::Visitor"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink14ConsoleMessageD1Ev(%"class.blink::ConsoleMessage"*) unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.642", %"class.WTF::StringTypeAdapter.642"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %14) #14
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.606"* %9) #14
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.606"* %9) #14
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %25, i8* %26) #14
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #14
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  ret i32 %17
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF17StringTypeAdapterINS_12StringAppendINS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EEE6Is8BitEv(%"class.WTF::StringTypeAdapter.647"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = getelementptr inbounds %"class.WTF::StringTypeAdapter.647", %"class.WTF::StringTypeAdapter.647"* %0, i64 0, i32 0
  %6 = load %"class.WTF::StringAppend.609"*, %"class.WTF::StringAppend.609"** %5, align 8
  %7 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false) #14
  %9 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %9) #14
  %10 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false) #14
  %15 = load i8*, i8** %14, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %15) #14
  %16 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %19 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  %22 = select i1 %21, %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"* %20
  %23 = bitcast %"class.WTF::StringTypeAdapter.642"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false) #14
  %25 = load i8*, i8** %24, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %2, i8* %25) #14
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #14
  br i1 %29, label %30, label %31

30:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #14
  br label %45

31:                                               ; preds = %1
  %32 = icmp eq %"class.WTF::StringImpl"* %17, null
  %33 = select i1 %32, %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"* %17
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #14
  br i1 %37, label %45, label %38

38:                                               ; preds = %31
  %39 = icmp eq %"class.WTF::StringImpl"* %11, null
  %40 = select i1 %39, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %11
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 1
  %44 = icmp ne i32 %43, 0
  br label %45

45:                                               ; preds = %30, %31, %38
  %46 = phi i1 [ false, %31 ], [ %44, %38 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #14
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.606"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.607"* %8) #14
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.607"* %8) #14
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %26, i8* %27) #14
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.607"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.642", %"class.WTF::StringTypeAdapter.642"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.607", %"class.WTF::StringAppend.607"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %14) #14
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.608"* %9) #14
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.608"* %9) #14
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %25, i8* %26) #14
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #14
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.608"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.609"* %8) #14
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.609"* %8) #14
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %26, i8* %27) #14
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.609"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.642", %"class.WTF::StringTypeAdapter.642"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.609", %"class.WTF::StringAppend.609"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %14) #14
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.610"* %9) #14
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.610"* %9) #14
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %25, i8* %26) #14
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #14
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.610"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %8) #14
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %8) #14
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %26, i8* %27) #14
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.642", %"class.WTF::StringTypeAdapter.642"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.611", %"class.WTF::StringAppend.611"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %14) #14
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %9) #14
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %9) #14
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %25, i8* %26) #14
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #14
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.613"* %8) #14
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.613"* %8) #14
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %26, i8* %27) #14
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.613"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #14
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.642", %"class.WTF::StringTypeAdapter.642"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %21) #14
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #14
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #14
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i8* %30, i8* %31) #14
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #14
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #14
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #14
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #14
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.58, i64 0, i64 0), i8* %46, i8* %47) #14
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.57, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #14
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #14
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.606"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.608"* %26, i8* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.608"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.607"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i8* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.608"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.610"* %26, i8* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.610"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.609"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i8* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPh(%"class.WTF::StringAppend.610"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend.612"* %26, i8* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i8* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend.612"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.644"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #14
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.644"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #14
  %47 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #14
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %48) #14
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"* nonnull %49, i8* %1) #14
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %52) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #14
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.613"* %6) #14
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.645"* nonnull %53, i8* %56) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #14
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"*, i16*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.606"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.606", %"class.WTF::StringAppend.606"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.608"* %26, i16* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.608"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i16* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.607"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i16* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"*, i16*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.608"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.608", %"class.WTF::StringAppend.608"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.610"* %26, i16* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E6lengthEv(%"class.WTF::StringAppend.610"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i16* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_EES3_E6lengthEv(%"class.WTF::StringAppend.609"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i16* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS_6StringEPKcEES1_EES3_EES1_E7WriteToEPDs(%"class.WTF::StringAppend.610"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %21

15:                                               ; preds = %2
  %16 = ptrtoint %"class.WTF::StringImpl"* %11 to i64
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ null, %13 ], [ %20, %15 ]
  %23 = phi i64 [ %14, %13 ], [ %16, %15 ]
  %24 = phi i32 [ 0, %13 ], [ %18, %15 ]
  %25 = bitcast %"class.WTF::StringTypeAdapter.644"* %4 to i64*
  store i64 %23, i64* %25, align 8
  store i8* %22, i8** %7, align 8
  store i32 %24, i32* %8, align 8
  %26 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 0
  %27 = bitcast %"class.WTF::StringTypeAdapter.642"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringAppend.610", %"class.WTF::StringAppend.610"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %29 = load i8*, i8** %28, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i8* %29) #14
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend.612"* %26, i16* %1) #14
  %30 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.612"* %26) #14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %1, i64 %31
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %3, i16* %32) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %4, i64 0, i32 0
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.611"* %5) #14
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"* nonnull %33, i16* %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend.612"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.642", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.644", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.644"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.644"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #14
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.644"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.642"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #14
  %47 = getelementptr inbounds %"class.WTF::StringAppend.612", %"class.WTF::StringAppend.612"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #14
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i8* %48) #14
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"* nonnull %49, i16* %1) #14
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.642"* nonnull %4, i16* %52) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #14
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.644", %"class.WTF::StringTypeAdapter.644"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.613"* %6) #14
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.645"* nonnull %53, i16* %56) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.502"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.502", %"class.WTF::Vector.502"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #14
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.49, i64 0, i64 0), i8* %14, i8* %15) #14
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.50, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #14
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #14
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %23 = getelementptr inbounds %"class.WTF::Vector.502", %"class.WTF::Vector.502"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

; Function Attrs: nounwind
declare void @_ZN5blink20AudioSummingJunctionD2Ev(%"class.blink::AudioSummingJunction"*) unnamed_addr #3

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.29"*, %"class.blink::AudioChannel"*) local_unnamed_addr #12 comdat align 2 {
  %3 = bitcast %"class.blink::AudioChannel"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #14
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110unique_ptrIN5blink18AudioParamTimeline10ParamEventENS_14default_deleteIS3_EEED2Ev(%"class.std::__1::unique_ptr.62"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.62"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::AudioParamTimeline::ParamEvent"*, %"class.blink::AudioParamTimeline::ParamEvent"** %2, align 8
  store %"class.blink::AudioParamTimeline::ParamEvent"* null, %"class.blink::AudioParamTimeline::ParamEvent"** %2, align 8
  %4 = icmp eq %"class.blink::AudioParamTimeline::ParamEvent"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::AudioParamTimeline::ParamEvent", %"class.blink::AudioParamTimeline::ParamEvent"* %3, i64 0, i32 12
  tail call void @_ZNSt3__110unique_ptrIN5blink18AudioParamTimeline10ParamEventENS_14default_deleteIS3_EEED2Ev(%"class.std::__1::unique_ptr.62"* %6) #14
  %7 = getelementptr inbounds %"class.blink::AudioParamTimeline::ParamEvent", %"class.blink::AudioParamTimeline::ParamEvent"* %3, i64 0, i32 8, i32 0, i32 0, i32 0
  %8 = load float*, float** %7, align 8
  %9 = icmp eq float* %8, null
  %10 = bitcast float* %8 to i8*
  br i1 %9, label %17, label %11, !prof !24

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.blink::AudioParamTimeline::ParamEvent", %"class.blink::AudioParamTimeline::ParamEvent"* %3, i64 0, i32 8, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #14
  br label %17

17:                                               ; preds = %5, %16
  %18 = bitcast %"class.blink::AudioParamTimeline::ParamEvent"* %3 to i8*
  tail call void @_ZdlPv(i8* %18) #15
  br label %19

19:                                               ; preds = %1, %17
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !8, !4}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_: argument 0"}
!14 = distinct !{!14, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSC_SD_: argument 0"}
!17 = distinct !{!17, !"_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSC_SD_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSE_SF_: argument 0"}
!20 = distinct !{!20, !"_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_INS1_INS1_INS_6StringEPKcEES2_EES4_EES2_EES4_EES2_EES4_EES2_S4_EENS1_INS1_IT_T0_EET1_EERKSE_SF_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_: argument 0"}
!23 = distinct !{!23, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_"}
!24 = !{!"branch_weights", i32 2000, i32 1}
