; ModuleID = '../../third_party/libjpeg_turbo/jfdctflt.c'
source_filename = "../../third_party/libjpeg_turbo/jfdctflt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @jpeg_fdct_float(float* nocapture) local_unnamed_addr #0 {
  %2 = bitcast float* %0 to <32 x float>*
  %3 = load <32 x float>, <32 x float>* %2, align 4
  %4 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %5 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %6 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %7 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %8 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %9 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %10 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %11 = shufflevector <32 x float> %3, <32 x float> undef, <4 x i32> <i32 7, i32 15, i32 23, i32 31>
  %12 = fadd <4 x float> %4, %11
  %13 = fsub <4 x float> %4, %11
  %14 = fadd <4 x float> %5, %10
  %15 = fsub <4 x float> %5, %10
  %16 = fadd <4 x float> %6, %9
  %17 = fsub <4 x float> %6, %9
  %18 = fadd <4 x float> %7, %8
  %19 = fsub <4 x float> %7, %8
  %20 = fadd <4 x float> %12, %18
  %21 = fsub <4 x float> %12, %18
  %22 = fadd <4 x float> %14, %16
  %23 = fsub <4 x float> %14, %16
  %24 = fadd <4 x float> %22, %20
  %25 = fsub <4 x float> %20, %22
  %26 = fadd <4 x float> %23, %21
  %27 = fmul <4 x float> %26, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %28 = fadd <4 x float> %21, %27
  %29 = fsub <4 x float> %21, %27
  %30 = fadd <4 x float> %17, %19
  %31 = fadd <4 x float> %15, %17
  %32 = fadd <4 x float> %13, %15
  %33 = fsub <4 x float> %30, %32
  %34 = fmul <4 x float> %33, <float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000>
  %35 = fmul <4 x float> %30, <float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000>
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %32, <float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000>
  %38 = fadd <4 x float> %37, %34
  %39 = fmul <4 x float> %31, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %40 = fadd <4 x float> %13, %39
  %41 = fsub <4 x float> %13, %39
  %42 = fadd <4 x float> %41, %36
  %43 = fsub <4 x float> %41, %36
  %44 = fadd <4 x float> %40, %38
  %45 = fsub <4 x float> %40, %38
  %46 = bitcast float* %0 to <32 x float>*
  %47 = shufflevector <4 x float> %24, <4 x float> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = shufflevector <4 x float> %28, <4 x float> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %49 = shufflevector <4 x float> %25, <4 x float> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %50 = shufflevector <4 x float> %29, <4 x float> %45, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = shufflevector <8 x float> %47, <8 x float> %48, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %52 = shufflevector <8 x float> %49, <8 x float> %50, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %53 = shufflevector <16 x float> %51, <16 x float> %52, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  store <32 x float> %53, <32 x float>* %46, align 4
  %54 = getelementptr float, float* %0, i64 32
  %55 = bitcast float* %54 to <32 x float>*
  %56 = load <32 x float>, <32 x float>* %55, align 4
  %57 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %58 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %59 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %60 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %61 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %62 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %63 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %64 = shufflevector <32 x float> %56, <32 x float> undef, <4 x i32> <i32 7, i32 15, i32 23, i32 31>
  %65 = fadd <4 x float> %57, %64
  %66 = fsub <4 x float> %57, %64
  %67 = fadd <4 x float> %58, %63
  %68 = fsub <4 x float> %58, %63
  %69 = fadd <4 x float> %59, %62
  %70 = fsub <4 x float> %59, %62
  %71 = fadd <4 x float> %60, %61
  %72 = fsub <4 x float> %60, %61
  %73 = fadd <4 x float> %65, %71
  %74 = fsub <4 x float> %65, %71
  %75 = fadd <4 x float> %67, %69
  %76 = fsub <4 x float> %67, %69
  %77 = fadd <4 x float> %75, %73
  %78 = fsub <4 x float> %73, %75
  %79 = fadd <4 x float> %76, %74
  %80 = fmul <4 x float> %79, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %81 = fadd <4 x float> %74, %80
  %82 = fsub <4 x float> %74, %80
  %83 = fadd <4 x float> %70, %72
  %84 = fadd <4 x float> %68, %70
  %85 = fadd <4 x float> %66, %68
  %86 = fsub <4 x float> %83, %85
  %87 = fmul <4 x float> %86, <float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000>
  %88 = fmul <4 x float> %83, <float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000>
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %85, <float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000>
  %91 = fadd <4 x float> %90, %87
  %92 = fmul <4 x float> %84, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %93 = fadd <4 x float> %66, %92
  %94 = fsub <4 x float> %66, %92
  %95 = fadd <4 x float> %94, %89
  %96 = fsub <4 x float> %94, %89
  %97 = fadd <4 x float> %93, %91
  %98 = fsub <4 x float> %93, %91
  %99 = getelementptr inbounds float, float* %0, i64 32
  %100 = bitcast float* %99 to <32 x float>*
  %101 = shufflevector <4 x float> %77, <4 x float> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %102 = shufflevector <4 x float> %81, <4 x float> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %103 = shufflevector <4 x float> %78, <4 x float> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %104 = shufflevector <4 x float> %82, <4 x float> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %105 = shufflevector <8 x float> %101, <8 x float> %102, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %106 = shufflevector <8 x float> %103, <8 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %107 = shufflevector <16 x float> %105, <16 x float> %106, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  store <32 x float> %107, <32 x float>* %100, align 4
  %108 = bitcast float* %0 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4
  %110 = getelementptr inbounds float, float* %0, i64 56
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 4
  %113 = fadd <4 x float> %109, %112
  %114 = fsub <4 x float> %109, %112
  %115 = getelementptr inbounds float, float* %0, i64 8
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 4
  %118 = getelementptr inbounds float, float* %0, i64 48
  %119 = bitcast float* %118 to <4 x float>*
  %120 = load <4 x float>, <4 x float>* %119, align 4
  %121 = fadd <4 x float> %117, %120
  %122 = fsub <4 x float> %117, %120
  %123 = getelementptr inbounds float, float* %0, i64 16
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4
  %126 = getelementptr inbounds float, float* %0, i64 40
  %127 = bitcast float* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 4
  %129 = fadd <4 x float> %125, %128
  %130 = fsub <4 x float> %125, %128
  %131 = getelementptr inbounds float, float* %0, i64 24
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 4
  %134 = getelementptr inbounds float, float* %0, i64 32
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 4
  %137 = fadd <4 x float> %133, %136
  %138 = fsub <4 x float> %133, %136
  %139 = fadd <4 x float> %113, %137
  %140 = fsub <4 x float> %113, %137
  %141 = fadd <4 x float> %121, %129
  %142 = fsub <4 x float> %121, %129
  %143 = fadd <4 x float> %141, %139
  %144 = bitcast float* %0 to <4 x float>*
  store <4 x float> %143, <4 x float>* %144, align 4
  %145 = fsub <4 x float> %139, %141
  %146 = bitcast float* %134 to <4 x float>*
  store <4 x float> %145, <4 x float>* %146, align 4
  %147 = fadd <4 x float> %142, %140
  %148 = fmul <4 x float> %147, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %149 = fadd <4 x float> %140, %148
  %150 = bitcast float* %123 to <4 x float>*
  store <4 x float> %149, <4 x float>* %150, align 4
  %151 = fsub <4 x float> %140, %148
  %152 = bitcast float* %118 to <4 x float>*
  store <4 x float> %151, <4 x float>* %152, align 4
  %153 = fadd <4 x float> %130, %138
  %154 = fadd <4 x float> %122, %130
  %155 = fadd <4 x float> %114, %122
  %156 = fsub <4 x float> %153, %155
  %157 = fmul <4 x float> %156, <float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000>
  %158 = fmul <4 x float> %153, <float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000>
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %155, <float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000>
  %161 = fadd <4 x float> %160, %157
  %162 = fmul <4 x float> %154, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %163 = fadd <4 x float> %114, %162
  %164 = fsub <4 x float> %114, %162
  %165 = fadd <4 x float> %164, %159
  %166 = bitcast float* %126 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 4
  %167 = fsub <4 x float> %164, %159
  %168 = bitcast float* %131 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 4
  %169 = fadd <4 x float> %163, %161
  %170 = bitcast float* %115 to <4 x float>*
  store <4 x float> %169, <4 x float>* %170, align 4
  %171 = fsub <4 x float> %163, %161
  %172 = bitcast float* %110 to <4 x float>*
  store <4 x float> %171, <4 x float>* %172, align 4
  %173 = getelementptr float, float* %0, i64 4
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 4
  %176 = getelementptr inbounds float, float* %0, i64 60
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 4
  %179 = fadd <4 x float> %175, %178
  %180 = fsub <4 x float> %175, %178
  %181 = getelementptr inbounds float, float* %0, i64 12
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 4
  %184 = getelementptr inbounds float, float* %0, i64 52
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 4
  %187 = fadd <4 x float> %183, %186
  %188 = fsub <4 x float> %183, %186
  %189 = getelementptr inbounds float, float* %0, i64 20
  %190 = bitcast float* %189 to <4 x float>*
  %191 = load <4 x float>, <4 x float>* %190, align 4
  %192 = getelementptr inbounds float, float* %0, i64 44
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 4
  %195 = fadd <4 x float> %191, %194
  %196 = fsub <4 x float> %191, %194
  %197 = getelementptr inbounds float, float* %0, i64 28
  %198 = bitcast float* %197 to <4 x float>*
  %199 = load <4 x float>, <4 x float>* %198, align 4
  %200 = getelementptr inbounds float, float* %0, i64 36
  %201 = bitcast float* %200 to <4 x float>*
  %202 = load <4 x float>, <4 x float>* %201, align 4
  %203 = fadd <4 x float> %199, %202
  %204 = fsub <4 x float> %199, %202
  %205 = fadd <4 x float> %179, %203
  %206 = fsub <4 x float> %179, %203
  %207 = fadd <4 x float> %187, %195
  %208 = fsub <4 x float> %187, %195
  %209 = fadd <4 x float> %207, %205
  %210 = bitcast float* %173 to <4 x float>*
  store <4 x float> %209, <4 x float>* %210, align 4
  %211 = fsub <4 x float> %205, %207
  %212 = bitcast float* %200 to <4 x float>*
  store <4 x float> %211, <4 x float>* %212, align 4
  %213 = fadd <4 x float> %208, %206
  %214 = fmul <4 x float> %213, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %215 = fadd <4 x float> %206, %214
  %216 = bitcast float* %189 to <4 x float>*
  store <4 x float> %215, <4 x float>* %216, align 4
  %217 = fsub <4 x float> %206, %214
  %218 = bitcast float* %184 to <4 x float>*
  store <4 x float> %217, <4 x float>* %218, align 4
  %219 = fadd <4 x float> %196, %204
  %220 = fadd <4 x float> %188, %196
  %221 = fadd <4 x float> %180, %188
  %222 = fsub <4 x float> %219, %221
  %223 = fmul <4 x float> %222, <float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000, float 0x3FD87DE2A0000000>
  %224 = fmul <4 x float> %219, <float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000, float 0x3FE1517A80000000>
  %225 = fadd <4 x float> %224, %223
  %226 = fmul <4 x float> %221, <float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000, float 0x3FF4E7AEA0000000>
  %227 = fadd <4 x float> %226, %223
  %228 = fmul <4 x float> %220, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %229 = fadd <4 x float> %180, %228
  %230 = fsub <4 x float> %180, %228
  %231 = fadd <4 x float> %230, %225
  %232 = bitcast float* %192 to <4 x float>*
  store <4 x float> %231, <4 x float>* %232, align 4
  %233 = fsub <4 x float> %230, %225
  %234 = bitcast float* %197 to <4 x float>*
  store <4 x float> %233, <4 x float>* %234, align 4
  %235 = fadd <4 x float> %229, %227
  %236 = bitcast float* %181 to <4 x float>*
  store <4 x float> %235, <4 x float>* %236, align 4
  %237 = fsub <4 x float> %229, %227
  %238 = bitcast float* %176 to <4 x float>*
  store <4 x float> %237, <4 x float>* %238, align 4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
