; ModuleID = '../../third_party/boringssl/src/crypto/ecdh_extra/ecdh_extra.c'
source_filename = "../../third_party/boringssl/src/crypto/ecdh_extra/ecdh_extra.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_SCALAR = type { [9 x i64] }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%union.EC_FELEM = type { [9 x i64] }
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%struct.ec_key_st = type { %struct.ec_group_st*, %struct.ec_point_st*, %struct.EC_WRAPPED_SCALAR*, i32, i32, i32, %struct.ecdsa_method_st*, %struct.crypto_ex_data_st }
%struct.EC_WRAPPED_SCALAR = type { %struct.bignum_st, %union.EC_SCALAR }
%struct.ecdsa_method_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.ec_key_st*)*, i32 (%struct.ec_key_st*)*, i64 (%struct.ec_key_st*)*, i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque

@.str = private unnamed_addr constant [63 x i8] c"../../third_party/boringssl/src/crypto/ecdh_extra/ecdh_extra.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ECDH_compute_key(i8*, i64, %struct.ec_point_st*, %struct.ec_key_st*, i8* (i8*, i64, i8*, i64*)*) local_unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca %struct.EC_RAW_POINT, align 8
  %8 = alloca [66 x i8], align 16
  %9 = alloca i64, align 8
  store i64 %1, i64* %6, align 8
  %10 = getelementptr inbounds %struct.ec_key_st, %struct.ec_key_st* %3, i64 0, i32 2
  %11 = load %struct.EC_WRAPPED_SCALAR*, %struct.EC_WRAPPED_SCALAR** %10, align 8
  %12 = icmp eq %struct.EC_WRAPPED_SCALAR* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %5
  tail call void @ERR_put_error(i32 27, i32 0, i32 101, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 85) #3
  br label %58

14:                                               ; preds = %5
  %15 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %3) #3
  %16 = getelementptr inbounds %struct.ec_point_st, %struct.ec_point_st* %2, i64 0, i32 0
  %17 = load %struct.ec_group_st*, %struct.ec_group_st** %16, align 8
  %18 = tail call i32 @EC_GROUP_cmp(%struct.ec_group_st* %15, %struct.ec_group_st* %17, %struct.bignum_ctx* null) #3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %14
  tail call void @ERR_put_error(i32 15, i32 0, i32 106, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 91) #3
  br label %58

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.EC_WRAPPED_SCALAR, %struct.EC_WRAPPED_SCALAR* %11, i64 0, i32 1
  %23 = bitcast %struct.EC_RAW_POINT* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %23) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 216, i1 false)
  %24 = getelementptr inbounds [66 x i8], [66 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 66, i8* nonnull %24) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 66, i1 false)
  %25 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #3
  store i64 -6148914691236517206, i64* %9, align 8
  %26 = getelementptr inbounds %struct.ec_point_st, %struct.ec_point_st* %2, i64 0, i32 1
  %27 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %15, %struct.EC_RAW_POINT* nonnull %7, %struct.EC_RAW_POINT* %26, %union.EC_SCALAR* %22) #3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %21
  %30 = call i32 @ec_get_x_coordinate_as_bytes(%struct.ec_group_st* %15, i8* nonnull %24, i64* nonnull %9, i64 66, %struct.EC_RAW_POINT* nonnull %7) #3
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29, %21
  call void @ERR_put_error(i32 27, i32 0, i32 102, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 101) #3
  br label %56

33:                                               ; preds = %29
  %34 = icmp eq i8* (i8*, i64, i8*, i64*)* %4, null
  %35 = load i64, i64* %9, align 8
  br i1 %34, label %42, label %36

36:                                               ; preds = %33
  %37 = call i8* %4(i8* nonnull %24, i64 %35, i8* %0, i64* nonnull %6) #3
  %38 = icmp eq i8* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %36
  %40 = load i64, i64* %6, align 8
  br label %49

41:                                               ; preds = %36
  call void @ERR_put_error(i32 27, i32 0, i32 100, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 107) #3
  br label %56

42:                                               ; preds = %33
  %43 = icmp ult i64 %35, %1
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  store i64 %35, i64* %6, align 8
  br label %45

45:                                               ; preds = %44, %42
  %46 = phi i64 [ %35, %44 ], [ %1, %42 ]
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %45
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* nonnull align 16 %24, i64 %46, i1 false) #3
  br label %49

49:                                               ; preds = %39, %48
  %50 = phi i64 [ %40, %39 ], [ %46, %48 ]
  %51 = icmp ugt i64 %50, 2147483647
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void @ERR_put_error(i32 27, i32 0, i32 69, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 119) #3
  br label %56

53:                                               ; preds = %45, %49
  %54 = phi i64 [ %50, %49 ], [ 0, %45 ]
  %55 = trunc i64 %54 to i32
  br label %56

56:                                               ; preds = %53, %52, %41, %32
  %57 = phi i32 [ -1, %41 ], [ -1, %52 ], [ %55, %53 ], [ -1, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 66, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %23) #3
  br label %58

58:                                               ; preds = %20, %56, %13
  %59 = phi i32 [ -1, %13 ], [ -1, %20 ], [ %57, %56 ]
  ret i32 %59
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #1

declare i32 @EC_GROUP_cmp(%struct.ec_group_st*, %struct.ec_group_st*, %struct.bignum_ctx*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @ec_point_mul_scalar(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @ec_get_x_coordinate_as_bytes(%struct.ec_group_st*, i8*, i64*, i64, %struct.EC_RAW_POINT*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
