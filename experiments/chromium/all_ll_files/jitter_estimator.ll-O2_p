; ModuleID = '../../third_party/webrtc/modules/video_coding/jitter_estimator.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/jitter_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::VCMJitterEstimator" = type { i32 (...)**, [2 x double], double, double, double, i32, double, i32, i32, i32, double, double, [2 x [2 x double]], [2 x [2 x double]], double, double, double, i32, i32, i64, double, i32, double, i32, double, i32, i64, i32, %"class.webrtc::VCMRttFilter", %"class.rtc::RollingAccumulator", double, i8, %"class.webrtc::Clock"* }
%"class.webrtc::VCMRttFilter" = type { i8, double, double, i64, i32, i32, double, double, i32, i32, i32, [5 x i64], [5 x i64] }
%"class.rtc::RollingAccumulator" = type { %"class.webrtc::webrtc_impl::RunningStatistics", i64, i64, i8, i64, i8, %"class.std::__1::vector" }
%"class.webrtc::webrtc_impl::RunningStatistics" = type { i64, i64, i64, double, double }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.webrtc::Clock" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN6webrtc11field_trial9IsEnabledEPKc = comdat any

$_ZN3rtc18RollingAccumulatorImE9AddSampleEm = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

@_ZTVN6webrtc18VCMJitterEstimatorE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::VCMJitterEstimator"*)* @_ZN6webrtc18VCMJitterEstimatorD2Ev to i8*), i8* bitcast (void (%"class.webrtc::VCMJitterEstimator"*)* @_ZN6webrtc18VCMJitterEstimatorD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::VCMJitterEstimator"*, double, i8, double)* @_ZN6webrtc18VCMJitterEstimator17GetJitterEstimateEdN4absl8optionalIdEE to i8*)] }, align 8
@.str = private unnamed_addr constant [36 x i8] c"WebRTC-ReducedJitterDelayKillSwitch\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Enabled\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"../../third_party/webrtc/rtc_base/numerics/safe_conversions.h\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"IsValueInRangeForNumericType<Dst>(value)\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1

@_ZN6webrtc18VCMJitterEstimatorC1EPNS_5ClockE = hidden unnamed_addr alias void (%"class.webrtc::VCMJitterEstimator"*, %"class.webrtc::Clock"*), void (%"class.webrtc::VCMJitterEstimator"*, %"class.webrtc::Clock"*)* @_ZN6webrtc18VCMJitterEstimatorC2EPNS_5ClockE
@_ZN6webrtc18VCMJitterEstimatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::VCMJitterEstimator"*), void (%"class.webrtc::VCMJitterEstimator"*)* @_ZN6webrtc18VCMJitterEstimatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimatorC2EPNS_5ClockE(%"class.webrtc::VCMJitterEstimator"*, %"class.webrtc::Clock"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc18VCMJitterEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 3
  %5 = bitcast double* %4 to <2 x double>*
  store <2 x double> <double 0x3FEF0A3D70A3D70A, double 9.999000e-01>, <2 x double>* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 5
  store i32 400, i32* %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 6
  store double 0x3EB0C6F7A0B5ED8D, double* %7, align 8
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 7
  store i32 3, i32* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 8
  store i32 15, i32* %9, align 4
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 9
  store i32 3, i32* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %12 = bitcast double* %11 to <2 x double>*
  store <2 x double> <double 2.330000e+00, double 3.000000e+01>, <2 x double>* %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 28
  tail call void @_ZN6webrtc12VCMRttFilterC1Ev(%"class.webrtc::VCMRttFilter"* %13) #14
  %14 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 0
  %15 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 2
  %16 = bitcast i64* %15 to i8*
  %17 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6
  %18 = tail call i8* @_Znwm(i64 240) #15
  %19 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector"* %17 to i8**
  store i8* %18, i8** %20, align 8
  %21 = getelementptr inbounds i8, i8* %18, i64 240
  %22 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast i64** %22 to i8**
  store i8* %21, i8** %23, align 8
  %24 = bitcast i64** %19 to i64*
  %25 = ptrtoint i8* %18 to i64
  %26 = getelementptr i8, i8* %18, i64 232
  %27 = ptrtoint i8* %26 to i64
  %28 = sub i64 8, %25
  %29 = add i64 %28, %27
  %30 = and i64 %29, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 %30, i1 false) #14
  %31 = ptrtoint i8* %21 to i64
  store i64 %31, i64* %24, align 8
  %32 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %32, align 8
  %33 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 4
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 5
  store i8 0, i8* %34, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 41, i1 false) #14
  %35 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 30
  %36 = tail call { i8, double } @_ZN6webrtc26JitterUpperBoundExperiment19GetUpperBoundSigmasEv() #14
  %37 = extractvalue { i8, double } %36, 0
  %38 = extractvalue { i8, double } %36, 1
  %39 = icmp eq i8 %37, 0
  %40 = select i1 %39, double 3.500000e+00, double %38
  store double %40, double* %35, align 8
  %41 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 31
  %42 = tail call zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0))
  %43 = xor i1 %42, true
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 8
  %45 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 32
  store %"class.webrtc::Clock"* %1, %"class.webrtc::Clock"** %45, align 8
  %46 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %47 = bitcast double* %46 to <2 x double>*
  store <2 x double> <double 1.562500e-05, double 0.000000e+00>, <2 x double>* %47, align 8
  %48 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  store double 4.000000e+00, double* %48, align 8
  %49 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 0
  store double 1.000000e-04, double* %49, align 8
  %50 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 1, i64 1
  store double 1.000000e+02, double* %50, align 8
  %51 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 1
  %52 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 0
  %53 = bitcast double* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 16, i1 false) #14
  store double 2.500000e-10, double* %52, align 8
  %54 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 1, i64 1
  store double 1.000000e-10, double* %54, align 8
  %55 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 1
  %56 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %57 = bitcast double* %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 16, i1 false) #14
  %58 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  store double 5.000000e+02, double* %58, align 8
  %59 = bitcast double* %56 to <2 x double>*
  store <2 x double> <double 5.000000e+02, double 1.000000e+02>, <2 x double>* %59, align 8
  %60 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 19
  store i64 -1, i64* %60, align 8
  %61 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double -1.000000e+00, double* %61, align 8
  %62 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 21
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 22
  store double 0.000000e+00, double* %63, align 8
  %64 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 23
  store i32 1, i32* %64, align 8
  %65 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  store double 0.000000e+00, double* %65, align 8
  %66 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 26
  %67 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 27
  store i32 0, i32* %67, align 8
  store i64 0, i64* %66, align 8
  %68 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 17
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 18
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 25
  store i32 0, i32* %70, align 8
  tail call void @_ZN6webrtc12VCMRttFilter5ResetEv(%"class.webrtc::VCMRttFilter"* %13) #14
  %71 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %71, align 8
  store i64 0, i64* %33, align 8
  store i8 0, i8* %34, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 41, i1 false) #14
  ret void
}

declare void @_ZN6webrtc12VCMRttFilterC1Ev(%"class.webrtc::VCMRttFilter"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i8, double } @_ZN6webrtc26JitterUpperBoundExperiment19GetUpperBoundSigmasEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8*) local_unnamed_addr #3 comdat {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = tail call i64 @strlen(i8* %0) #14
  %7 = icmp ugt i64 %6, -17
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %9) #16
  unreachable

10:                                               ; preds = %1
  %11 = icmp ult i64 %6, 23
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = add nuw i64 %6, 16
  %14 = and i64 %13, -16
  %15 = tail call i8* @_Znwm(i64 %14) #15
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = or i64 %14, -9223372036854775808
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %19, align 8
  br label %25

20:                                               ; preds = %10
  %21 = trunc i64 %6 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = icmp eq i64 %6, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20, %12
  %26 = phi i8* [ %15, %12 ], [ %5, %20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %26, i8* align 1 %0, i64 %6, i1 false) #14
  br label %27

27:                                               ; preds = %20, %25
  %28 = phi i8* [ %5, %20 ], [ %26, %25 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 %6
  store i8 0, i8* %29, align 1
  call void @_ZN6webrtc11field_trial12FindFullNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #14
  %30 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = select i1 %33, i8* %35, i8* %4
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = zext i8 %32 to i64
  %40 = select i1 %33, i64 %38, i64 %39
  %41 = getelementptr inbounds i8, i8* %36, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = ptrtoint i8* %36 to i64
  %44 = icmp slt i64 %40, 7
  br i1 %44, label %63, label %45

45:                                               ; preds = %27, %58
  %46 = phi i64 [ %61, %58 ], [ %40, %27 ]
  %47 = phi i8* [ %59, %58 ], [ %36, %27 ]
  %48 = add nsw i64 %46, -6
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %45
  %51 = call i8* @memchr(i8* %47, i32 69, i64 %48) #14
  %52 = icmp eq i8* %51, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %50
  %54 = call i32 @bcmp(i8* nonnull %51, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i64 7) #14
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = ptrtoint i8* %51 to i64
  br label %63

58:                                               ; preds = %53
  %59 = getelementptr inbounds i8, i8* %51, i64 1
  %60 = ptrtoint i8* %59 to i64
  %61 = sub i64 %42, %60
  %62 = icmp slt i64 %61, 7
  br i1 %62, label %63, label %45

63:                                               ; preds = %58, %50, %45, %56, %27
  %64 = phi i64 [ %42, %27 ], [ %57, %56 ], [ %42, %45 ], [ %42, %50 ], [ %42, %58 ]
  %65 = phi i8* [ %41, %27 ], [ %51, %56 ], [ %41, %45 ], [ %41, %50 ], [ %41, %58 ]
  %66 = icmp ne i8* %65, %41
  %67 = icmp eq i64 %64, %43
  %68 = and i1 %67, %66
  br i1 %33, label %69, label %70

69:                                               ; preds = %63
  call void @_ZdlPv(i8* %35) #15
  br label %70

70:                                               ; preds = %63, %69
  %71 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @_ZdlPv(i8* %77) #15
  br label %78

78:                                               ; preds = %70, %75
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret i1 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator5ResetEv(%"class.webrtc::VCMJitterEstimator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %3 = bitcast double* %2 to <2 x double>*
  store <2 x double> <double 1.562500e-05, double 0.000000e+00>, <2 x double>* %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  store double 4.000000e+00, double* %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 0
  store double 1.000000e-04, double* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 1, i64 1
  store double 1.000000e+02, double* %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 1
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 0
  %9 = bitcast double* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  store double 2.500000e-10, double* %8, align 8
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 1, i64 1
  store double 1.000000e-10, double* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 1
  %12 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %13 = bitcast double* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  store double 5.000000e+02, double* %14, align 8
  %15 = bitcast double* %12 to <2 x double>*
  store <2 x double> <double 5.000000e+02, double 1.000000e+02>, <2 x double>* %15, align 8
  %16 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 19
  store i64 -1, i64* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double -1.000000e+00, double* %17, align 8
  %18 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 21
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 22
  store double 0.000000e+00, double* %19, align 8
  %20 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 23
  store i32 1, i32* %20, align 8
  %21 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  store double 0.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 26
  %23 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 27
  store i32 0, i32* %23, align 8
  store i64 0, i64* %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 17
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 18
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 25
  store i32 0, i32* %26, align 8
  %27 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 28
  tail call void @_ZN6webrtc12VCMRttFilter5ResetEv(%"class.webrtc::VCMRttFilter"* %27) #14
  %28 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 0
  %29 = bitcast i64* %28 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %29, align 8
  %30 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 2
  %31 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 4
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 5
  store i8 0, i8* %32, align 8
  %33 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 41, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimatorD2Ev(%"class.webrtc::VCMJitterEstimator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc18VCMJitterEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i64* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 1
  %9 = bitcast i64** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimatorD0Ev(%"class.webrtc::VCMJitterEstimator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc18VCMJitterEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i64* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 6, i32 0, i32 1
  %9 = bitcast i64** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.webrtc::VCMJitterEstimator"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(544) %"class.webrtc::VCMJitterEstimator"* @_ZN6webrtc18VCMJitterEstimatoraSERKS0_(%"class.webrtc::VCMJitterEstimator"* returned, %"class.webrtc::VCMJitterEstimator"* dereferenceable(544)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.webrtc::VCMJitterEstimator"* %0, %1
  br i1 %3, label %75, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0
  %6 = bitcast [2 x double]* %5 to i8*
  %7 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 12, i64 0
  %8 = bitcast [2 x double]* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %8, i64 32, i1 false)
  %9 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0
  %10 = bitcast [2 x double]* %9 to i8*
  %11 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 13, i64 0
  %12 = bitcast [2 x double]* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 32, i1 false)
  %13 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 14
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %17 = bitcast double* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 15
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 15
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 16
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %27 = bitcast double* %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 17
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 17
  store i32 %29, i32* %30, align 8
  %31 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 18
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 18
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 19
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 19
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 20
  %38 = bitcast double* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  %41 = bitcast double* %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 21
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 21
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 22
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 22
  %49 = bitcast double* %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 23
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 23
  store i32 %51, i32* %52, align 8
  %53 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 24
  %54 = bitcast double* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  %57 = bitcast double* %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 25
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 25
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 26
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 26
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 27
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 27
  store i32 %65, i32* %66, align 8
  %67 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 28
  %68 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 28
  %69 = tail call dereferenceable(152) %"class.webrtc::VCMRttFilter"* @_ZN6webrtc12VCMRttFilteraSERKS0_(%"class.webrtc::VCMRttFilter"* %68, %"class.webrtc::VCMRttFilter"* dereferenceable(152) %67) #14
  %70 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %1, i64 0, i32 32
  %71 = bitcast %"class.webrtc::Clock"** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 32
  %74 = bitcast %"class.webrtc::Clock"** %73 to i64*
  store i64 %72, i64* %74, align 8
  br label %75

75:                                               ; preds = %2, %4
  ret %"class.webrtc::VCMJitterEstimator"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(152) %"class.webrtc::VCMRttFilter"* @_ZN6webrtc12VCMRttFilteraSERKS0_(%"class.webrtc::VCMRttFilter"*, %"class.webrtc::VCMRttFilter"* dereferenceable(152)) local_unnamed_addr #1

declare void @_ZN6webrtc12VCMRttFilter5ResetEv(%"class.webrtc::VCMRttFilter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator14UpdateEstimateEljb(%"class.webrtc::VCMJitterEstimator"*, i64, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %175, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 21
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %2, %8
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 18
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %11, 5
  br i1 %12, label %13, label %18

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 17
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, %2
  store i32 %16, i32* %14, align 8
  %17 = add nuw nsw i32 %11, 1
  br label %26

18:                                               ; preds = %6
  %19 = icmp eq i32 %11, 5
  br i1 %19, label %20, label %28

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 17
  %22 = load i32, i32* %21, align 8
  %23 = uitofp i32 %22 to double
  %24 = fdiv double %23, 5.000000e+00
  %25 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  store double %24, double* %25, align 8
  br label %26

26:                                               ; preds = %13, %20
  %27 = phi i32 [ 6, %20 ], [ %17, %13 ]
  store i32 %27, i32* %10, align 4
  br label %28

28:                                               ; preds = %26, %18
  br i1 %3, label %33, label %29

29:                                               ; preds = %28
  %30 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %31 = load double, double* %30, align 8
  %32 = uitofp i32 %2 to double
  br label %38

33:                                               ; preds = %28
  %34 = uitofp i32 %2 to double
  %35 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %36 = load double, double* %35, align 8
  %37 = fcmp olt double %36, %34
  br i1 %37, label %38, label %67

38:                                               ; preds = %29, %33
  %39 = phi double [ %32, %29 ], [ %34, %33 ]
  %40 = phi double [ %31, %29 ], [ %36, %33 ]
  %41 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 3
  %42 = load double, double* %41, align 8
  %43 = fmul double %42, %40
  %44 = fsub double 1.000000e+00, %42
  %45 = fmul double %44, %39
  %46 = fadd double %43, %45
  %47 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 15
  %48 = load double, double* %47, align 8
  %49 = tail call double @sqrt(double %48) #14
  %50 = fmul double %49, 2.000000e+00
  %51 = fadd double %40, %50
  %52 = fcmp ogt double %51, %39
  br i1 %52, label %53, label %55

53:                                               ; preds = %38
  %54 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  store double %46, double* %54, align 8
  br label %55

55:                                               ; preds = %53, %38
  %56 = load double, double* %41, align 8
  %57 = load double, double* %47, align 8
  %58 = fmul double %56, %57
  %59 = fsub double 1.000000e+00, %56
  %60 = fsub double %39, %46
  %61 = fmul double %60, %59
  %62 = fmul double %60, %61
  %63 = fadd double %58, %62
  %64 = fcmp ogt double %63, 1.000000e+00
  %65 = select i1 %64, double %63, double 1.000000e+00
  store double %65, double* %47, align 8
  %66 = load i32, i32* %7, align 8
  br label %67

67:                                               ; preds = %55, %33
  %68 = phi double [ %39, %55 ], [ %34, %33 ]
  %69 = phi i32 [ %66, %55 ], [ %8, %33 ]
  %70 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 4
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %73 = load double, double* %72, align 8
  %74 = fmul double %71, %73
  %75 = fcmp ogt double %74, %68
  %76 = select i1 %75, double %74, double %68
  store double %76, double* %72, align 8
  %77 = icmp eq i32 %69, 0
  store i32 %2, i32* %7, align 8
  br i1 %77, label %175, label %78

78:                                               ; preds = %67
  %79 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 30
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %82 = load double, double* %81, align 8
  %83 = tail call double @sqrt(double %82) #14
  %84 = fmul double %80, %83
  %85 = fadd double %84, 5.000000e-01
  %86 = fptosi double %85 to i64
  %87 = icmp slt i64 %86, %1
  %88 = sub nsw i64 0, %86
  %89 = select i1 %87, i64 %86, i64 %1
  %90 = icmp slt i64 %89, %88
  %91 = select i1 %90, i64 %88, i64 %89
  %92 = sitofp i64 %91 to double
  %93 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %94 = load double, double* %93, align 8
  %95 = sitofp i32 %9 to double
  %96 = fmul double %94, %95
  %97 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 1
  %98 = load double, double* %97, align 8
  %99 = fadd double %96, %98
  %100 = fsub double %92, %99
  %101 = tail call double @llvm.fabs.f64(double %100)
  %102 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 8
  %103 = load i32, i32* %102, align 4
  %104 = sitofp i32 %103 to double
  %105 = load double, double* %81, align 8
  %106 = tail call double @sqrt(double %105) #14
  %107 = fmul double %106, %104
  %108 = fcmp olt double %101, %107
  br i1 %108, label %121, label %109

109:                                              ; preds = %78
  %110 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %111 = load double, double* %110, align 8
  %112 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 9
  %113 = load i32, i32* %112, align 8
  %114 = sitofp i32 %113 to double
  %115 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 15
  %116 = load double, double* %115, align 8
  %117 = tail call double @sqrt(double %116) #14
  %118 = fmul double %117, %114
  %119 = fadd double %111, %118
  %120 = fcmp olt double %119, %68
  br i1 %120, label %121, label %130

121:                                              ; preds = %109, %78
  tail call void @_ZN6webrtc18VCMJitterEstimator20EstimateRandomJitterEdb(%"class.webrtc::VCMJitterEstimator"* %0, double %100, i1 zeroext %3)
  %122 = xor i1 %3, true
  %123 = fcmp oge double %100, 0.000000e+00
  %124 = or i1 %123, %122
  br i1 %124, label %125, label %139

125:                                              ; preds = %121
  %126 = load double, double* %72, align 8
  %127 = fmul double %126, -2.500000e-01
  %128 = fcmp olt double %127, %95
  br i1 %128, label %129, label %139

129:                                              ; preds = %125
  tail call void @_ZN6webrtc18VCMJitterEstimator21KalmanEstimateChannelEli(%"class.webrtc::VCMJitterEstimator"* %0, i64 %91, i32 %9)
  br label %139

130:                                              ; preds = %109
  %131 = fcmp oge double %100, 0.000000e+00
  %132 = load i32, i32* %102, align 4
  %133 = sub nsw i32 0, %132
  %134 = select i1 %131, i32 %132, i32 %133
  %135 = sitofp i32 %134 to double
  %136 = load double, double* %81, align 8
  %137 = tail call double @sqrt(double %136) #14
  %138 = fmul double %137, %135
  tail call void @_ZN6webrtc18VCMJitterEstimator20EstimateRandomJitterEdb(%"class.webrtc::VCMJitterEstimator"* %0, double %138, i1 zeroext %3)
  br label %139

139:                                              ; preds = %125, %129, %121, %130
  %140 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 25
  %141 = load i32, i32* %140, align 8
  %142 = icmp ugt i32 %141, 29
  br i1 %142, label %143, label %173

143:                                              ; preds = %139
  %144 = load double, double* %93, align 8
  %145 = load double, double* %72, align 8
  %146 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %147 = load double, double* %146, align 8
  %148 = fsub double %145, %147
  %149 = fmul double %144, %148
  %150 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %151 = load double, double* %150, align 8
  %152 = load double, double* %81, align 8
  %153 = tail call double @sqrt(double %152) #14
  %154 = fmul double %151, %153
  %155 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 11
  %156 = load double, double* %155, align 8
  %157 = fsub double %154, %156
  %158 = fcmp olt double %157, 1.000000e+00
  %159 = select i1 %158, double 1.000000e+00, double %157
  %160 = fadd double %149, %159
  %161 = fcmp olt double %160, 1.000000e+00
  br i1 %161, label %162, label %167

162:                                              ; preds = %143
  %163 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  %164 = load double, double* %163, align 8
  %165 = fcmp ugt double %164, 1.000000e-02
  %166 = select i1 %165, double %164, double 1.000000e+00
  br label %167

167:                                              ; preds = %143, %162
  %168 = phi double [ %160, %143 ], [ %166, %162 ]
  %169 = fcmp ogt double %168, 1.000000e+04
  %170 = select i1 %169, double 1.000000e+04, double %168
  %171 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double %170, double* %171, align 8
  %172 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  store double %170, double* %172, align 8
  br label %175

173:                                              ; preds = %139
  %174 = add nuw nsw i32 %141, 1
  store i32 %174, i32* %140, align 8
  br label %175

175:                                              ; preds = %167, %173, %67, %4
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK6webrtc18VCMJitterEstimator26DeviationFromExpectedDelayEli(%"class.webrtc::VCMJitterEstimator"* nocapture readonly, i64, i32) local_unnamed_addr #6 align 2 {
  %4 = sitofp i64 %1 to double
  %5 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %6 = load double, double* %5, align 8
  %7 = sitofp i32 %2 to double
  %8 = fmul double %6, %7
  %9 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = fsub double %4, %11
  ret double %12
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator20EstimateRandomJitterEdb(%"class.webrtc::VCMJitterEstimator"*, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 32
  %5 = load %"class.webrtc::Clock"*, %"class.webrtc::Clock"** %4, align 8
  %6 = bitcast %"class.webrtc::Clock"* %5 to i64 (%"class.webrtc::Clock"*)***
  %7 = load i64 (%"class.webrtc::Clock"*)**, i64 (%"class.webrtc::Clock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %7, i64 2
  %9 = load i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.webrtc::Clock"* %5) #14
  %11 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 19
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, -1
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29
  %16 = sub i64 %10, %12
  tail call void @_ZN3rtc18RollingAccumulatorImE9AddSampleEm(%"class.rtc::RollingAccumulator"* %15, i64 %16)
  br label %17

17:                                               ; preds = %3, %14
  store i64 %10, i64* %11, align 8
  %18 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 23
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %80, label %21

21:                                               ; preds = %17
  %22 = add i32 %19, -1
  %23 = uitofp i32 %22 to double
  %24 = uitofp i32 %19 to double
  %25 = fdiv double %23, %24
  %26 = add i32 %19, 1
  %27 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 5
  %28 = load i32, i32* %27, align 8
  %29 = icmp ugt i32 %26, %28
  %30 = select i1 %29, i32 %28, i32 %26
  store i32 %30, i32* %18, align 8
  %31 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %57, label %34

34:                                               ; preds = %21
  %35 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 3
  %36 = load double, double* %35, align 8
  %37 = fcmp ugt double %36, 0.000000e+00
  br i1 %37, label %38, label %57

38:                                               ; preds = %34
  %39 = fdiv double 1.000000e+06, %36
  %40 = fcmp ogt double %39, 2.000000e+02
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = fcmp ogt double %39, 0.000000e+00
  br i1 %42, label %43, label %57

43:                                               ; preds = %38, %41
  %44 = phi double [ %39, %41 ], [ 2.000000e+02, %38 ]
  %45 = fdiv double 3.000000e+01, %44
  %46 = icmp ult i32 %30, 30
  br i1 %46, label %47, label %54

47:                                               ; preds = %43
  %48 = uitofp i32 %30 to double
  %49 = fmul double %45, %48
  %50 = sub nuw nsw i32 30, %30
  %51 = uitofp i32 %50 to double
  %52 = fadd double %49, %51
  %53 = fdiv double %52, 3.000000e+01
  br label %54

54:                                               ; preds = %47, %43
  %55 = phi double [ %53, %47 ], [ %45, %43 ]
  %56 = tail call double @pow(double %25, double %55) #14
  br label %57

57:                                               ; preds = %21, %34, %54, %41
  %58 = phi double [ %56, %54 ], [ %25, %41 ], [ %25, %34 ], [ %25, %21 ]
  %59 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 22
  %60 = load double, double* %59, align 8
  %61 = fsub double 1.000000e+00, %58
  %62 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %63 = load double, double* %62, align 8
  %64 = fmul double %58, %63
  %65 = fsub double %1, %60
  %66 = fmul double %61, %65
  %67 = fmul double %65, %66
  %68 = fadd double %64, %67
  %69 = xor i1 %2, true
  %70 = fcmp ogt double %68, %63
  %71 = or i1 %70, %69
  br i1 %71, label %72, label %76

72:                                               ; preds = %57
  %73 = fmul double %58, %60
  %74 = fmul double %61, %1
  %75 = fadd double %73, %74
  store double %75, double* %59, align 8
  store double %68, double* %62, align 8
  br label %76

76:                                               ; preds = %57, %72
  %77 = phi double [ %68, %72 ], [ %63, %57 ]
  %78 = fcmp olt double %77, 1.000000e+00
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  store double 1.000000e+00, double* %62, align 8
  br label %80

80:                                               ; preds = %76, %79, %17
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator21KalmanEstimateChannelEli(%"class.webrtc::VCMJitterEstimator"* nocapture, i64, i32) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 1, i64 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 1, i64 0
  %11 = load double, double* %10, align 8
  %12 = insertelement <2 x double> undef, double %5, i32 0
  %13 = insertelement <2 x double> %12, double %9, i32 1
  %14 = insertelement <2 x double> undef, double %7, i32 0
  %15 = insertelement <2 x double> %14, double %11, i32 1
  %16 = fadd <2 x double> %13, %15
  %17 = extractelement <2 x double> %16, i32 0
  store double %17, double* %6, align 8
  %18 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 0, i64 1
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 0, i64 1
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 13, i64 1, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 12, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = insertelement <2 x double> undef, double %19, i32 0
  %27 = insertelement <2 x double> %26, double %23, i32 1
  %28 = insertelement <2 x double> undef, double %21, i32 0
  %29 = insertelement <2 x double> %28, double %25, i32 1
  %30 = fadd <2 x double> %27, %29
  %31 = extractelement <2 x double> %30, i32 0
  store double %31, double* %20, align 8
  %32 = extractelement <2 x double> %16, i32 1
  store double %32, double* %10, align 8
  %33 = extractelement <2 x double> %30, i32 1
  store double %33, double* %24, align 8
  %34 = sitofp i32 %2 to double
  %35 = insertelement <2 x double> undef, double %34, i32 0
  %36 = shufflevector <2 x double> %35, <2 x double> undef, <2 x i32> zeroinitializer
  %37 = fmul <2 x double> %16, %36
  %38 = fadd <2 x double> %37, %30
  %39 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %40 = load double, double* %39, align 8
  %41 = fcmp olt double %40, 1.000000e+00
  br i1 %41, label %116, label %42

42:                                               ; preds = %3
  %43 = tail call double @llvm.fabs.f64(double %34)
  %44 = fsub double -0.000000e+00, %43
  %45 = fdiv double %44, %40
  %46 = tail call double @exp(double %45) #14
  %47 = fmul double %46, 3.000000e+02
  %48 = fadd double %47, 1.000000e+00
  %49 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %50 = load double, double* %49, align 8
  %51 = tail call double @sqrt(double %50) #14
  %52 = fmul double %48, %51
  %53 = fcmp olt double %52, 1.000000e+00
  %54 = select i1 %53, double 1.000000e+00, double %52
  %55 = extractelement <2 x double> %38, i32 0
  %56 = fmul double %55, %34
  %57 = extractelement <2 x double> %38, i32 1
  %58 = fadd double %56, %57
  %59 = fadd double %58, %54
  %60 = fcmp olt double %59, 1.000000e-09
  %61 = fcmp oge double %59, 0.000000e+00
  %62 = and i1 %60, %61
  br i1 %62, label %116, label %63

63:                                               ; preds = %42
  %64 = fcmp ogt double %59, -1.000000e-09
  %65 = fcmp ole double %59, 0.000000e+00
  %66 = and i1 %64, %65
  br i1 %66, label %116, label %67

67:                                               ; preds = %63
  %68 = insertelement <2 x double> undef, double %59, i32 0
  %69 = shufflevector <2 x double> %68, <2 x double> undef, <2 x i32> zeroinitializer
  %70 = fdiv <2 x double> %38, %69
  %71 = sitofp i64 %1 to double
  %72 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %73 = bitcast double* %72 to <2 x double>*
  %74 = load <2 x double>, <2 x double>* %73, align 8
  %75 = extractelement <2 x double> %74, i32 0
  %76 = fmul double %75, %34
  %77 = extractelement <2 x double> %74, i32 1
  %78 = fadd double %76, %77
  %79 = fsub double %71, %78
  %80 = insertelement <2 x double> undef, double %79, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = fmul <2 x double> %70, %81
  %83 = fadd <2 x double> %74, %82
  %84 = bitcast double* %72 to <2 x double>*
  store <2 x double> %83, <2 x double>* %84, align 8
  %85 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 6
  %86 = load double, double* %85, align 8
  %87 = extractelement <2 x double> %83, i32 0
  %88 = fcmp olt double %87, %86
  br i1 %88, label %89, label %90

89:                                               ; preds = %67
  store double %86, double* %72, align 8
  br label %90

90:                                               ; preds = %89, %67
  %91 = bitcast double* %6 to <2 x double>*
  %92 = load <2 x double>, <2 x double>* %91, align 8
  %93 = extractelement <2 x double> %70, i32 0
  %94 = fmul double %93, %34
  %95 = fsub double 1.000000e+00, %94
  %96 = insertelement <2 x double> undef, double %95, i32 0
  %97 = shufflevector <2 x double> %96, <2 x double> undef, <2 x i32> zeroinitializer
  %98 = fmul <2 x double> %97, %92
  %99 = bitcast double* %10 to <2 x double>*
  %100 = load <2 x double>, <2 x double>* %99, align 8
  %101 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %102 = fmul <2 x double> %101, %100
  %103 = fsub <2 x double> %98, %102
  %104 = bitcast double* %6 to <2 x double>*
  store <2 x double> %103, <2 x double>* %104, align 8
  %105 = extractelement <2 x double> %70, i32 1
  %106 = fsub double 1.000000e+00, %105
  %107 = fmul double %105, %34
  %108 = insertelement <2 x double> undef, double %106, i32 0
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> zeroinitializer
  %110 = fmul <2 x double> %109, %100
  %111 = insertelement <2 x double> undef, double %107, i32 0
  %112 = shufflevector <2 x double> %111, <2 x double> undef, <2 x i32> zeroinitializer
  %113 = fmul <2 x double> %112, %92
  %114 = fsub <2 x double> %110, %113
  %115 = bitcast double* %10 to <2 x double>*
  store <2 x double> %114, <2 x double>* %115, align 8
  br label %116

116:                                              ; preds = %90, %63, %42, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator19PostProcessEstimateEv(%"class.webrtc::VCMJitterEstimator"* nocapture) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %7 = load double, double* %6, align 8
  %8 = fsub double %5, %7
  %9 = fmul double %3, %8
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %13 = load double, double* %12, align 8
  %14 = tail call double @sqrt(double %13) #14
  %15 = fmul double %11, %14
  %16 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 11
  %17 = load double, double* %16, align 8
  %18 = fsub double %15, %17
  %19 = fcmp olt double %18, 1.000000e+00
  %20 = select i1 %19, double 1.000000e+00, double %18
  %21 = fadd double %9, %20
  %22 = fcmp olt double %21, 1.000000e+00
  br i1 %22, label %23, label %28

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  %25 = load double, double* %24, align 8
  %26 = fcmp ugt double %25, 1.000000e-02
  %27 = select i1 %26, double %25, double 1.000000e+00
  br label %28

28:                                               ; preds = %1, %23
  %29 = phi double [ %21, %1 ], [ %27, %23 ]
  %30 = fcmp ogt double %29, 1.000000e+04
  %31 = select i1 %30, double 1.000000e+04, double %29
  %32 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double %31, double* %32, align 8
  %33 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  store double %31, double* %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator11FrameNackedEv(%"class.webrtc::VCMJitterEstimator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 27
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = add nuw i32 %3, 1
  store i32 %8, i32* %2, align 8
  br label %9

9:                                                ; preds = %7, %1
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 32
  %11 = load %"class.webrtc::Clock"*, %"class.webrtc::Clock"** %10, align 8
  %12 = bitcast %"class.webrtc::Clock"* %11 to i64 (%"class.webrtc::Clock"*)***
  %13 = load i64 (%"class.webrtc::Clock"*)**, i64 (%"class.webrtc::Clock"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %13, i64 2
  %15 = load i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %14, align 8
  %16 = tail call i64 %15(%"class.webrtc::Clock"* %11) #14
  %17 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 26
  store i64 %16, i64* %17, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc18RollingAccumulatorImE9AddSampleEm(%"class.rtc::RollingAccumulator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 6
  %6 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 6, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp eq i64 %4, %12
  %14 = inttoptr i64 %10 to i64*
  %15 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  br i1 %13, label %17, label %47

17:                                               ; preds = %2
  %18 = getelementptr inbounds i64, i64* %14, i64 %16
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %4, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %17
  %22 = add nsw i64 %4, -1
  store i64 %22, i64* %3, align 8
  %23 = uitofp i64 %19 to double
  %24 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 3
  %25 = load double, double* %24, align 8
  %26 = fsub double %23, %25
  %27 = sitofp i64 %22 to double
  %28 = fdiv double %26, %27
  %29 = fsub double %25, %28
  store double %29, double* %24, align 8
  %30 = fsub double %23, %29
  %31 = fmul double %26, %30
  %32 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 4
  %33 = load double, double* %32, align 8
  %34 = fsub double %33, %31
  store double %34, double* %32, align 8
  br label %35

35:                                               ; preds = %17, %21
  %36 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %19, %37
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 3
  store i8 1, i8* %40, align 8
  br label %41

41:                                               ; preds = %35, %39
  %42 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = icmp ugt i64 %19, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 5
  store i8 1, i8* %46, align 8
  br label %47

47:                                               ; preds = %2, %45, %41
  %48 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 1
  %49 = getelementptr inbounds i64, i64* %14, i64 %16
  store i64 %1, i64* %49, align 8
  %50 = load i64, i64* %3, align 8
  %51 = icmp eq i64 %50, 0
  %52 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 2
  br i1 %51, label %53, label %55

53:                                               ; preds = %47
  store i64 %1, i64* %52, align 8
  %54 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 3
  store i8 0, i8* %54, align 8
  br label %64

55:                                               ; preds = %47
  %56 = load i64, i64* %52, align 8
  %57 = icmp ugt i64 %56, %1
  br i1 %57, label %60, label %58

58:                                               ; preds = %55
  store i64 %1, i64* %52, align 8
  %59 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 3
  store i8 0, i8* %59, align 8
  br label %60

60:                                               ; preds = %55, %58
  %61 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 4
  %62 = load i64, i64* %61, align 8
  %63 = icmp ult i64 %62, %1
  br i1 %63, label %67, label %64

64:                                               ; preds = %53, %60
  %65 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 4
  store i64 %1, i64* %65, align 8
  %66 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 5
  store i8 0, i8* %66, align 8
  br label %67

67:                                               ; preds = %60, %64
  %68 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 2
  %69 = load i64, i64* %68, align 8
  %70 = icmp ult i64 %69, %1
  %71 = select i1 %70, i64 %1, i64 %69
  store i64 %71, i64* %68, align 8
  %72 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp ugt i64 %73, %1
  %75 = select i1 %74, i64 %1, i64 %73
  store i64 %75, i64* %72, align 8
  %76 = add nsw i64 %50, 1
  store i64 %76, i64* %3, align 8
  %77 = uitofp i64 %1 to double
  %78 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 3
  %79 = load double, double* %78, align 8
  %80 = fsub double %77, %79
  %81 = sitofp i64 %76 to double
  %82 = fdiv double %80, %81
  %83 = fadd double %79, %82
  store double %83, double* %78, align 8
  %84 = fsub double %77, %83
  %85 = fmul double %80, %84
  %86 = getelementptr inbounds %"class.rtc::RollingAccumulator", %"class.rtc::RollingAccumulator"* %0, i64 0, i32 0, i32 4
  %87 = load double, double* %86, align 8
  %88 = fadd double %87, %85
  store double %88, double* %86, align 8
  %89 = load i64, i64* %48, align 8
  %90 = add i64 %89, 1
  %91 = load i64, i64* %7, align 8
  %92 = load i64, i64* %9, align 8
  %93 = sub i64 %91, %92
  %94 = ashr exact i64 %93, 3
  %95 = urem i64 %90, %94
  store i64 %95, i64* %48, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK6webrtc18VCMJitterEstimator12GetFrameRateEv(%"class.webrtc::VCMJitterEstimator"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 3
  %7 = load double, double* %6, align 8
  %8 = fcmp ugt double %7, 0.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = fdiv double 1.000000e+06, %7
  %11 = fcmp ogt double %10, 2.000000e+02
  %12 = select i1 %11, double 2.000000e+02, double %10
  br label %13

13:                                               ; preds = %1, %9, %5
  %14 = phi double [ 0.000000e+00, %5 ], [ %12, %9 ], [ 0.000000e+00, %1 ]
  ret double %14
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZNK6webrtc18VCMJitterEstimator14NoiseThresholdEv(%"class.webrtc::VCMJitterEstimator"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %5 = load double, double* %4, align 8
  %6 = tail call double @sqrt(double %5) #14
  %7 = fmul double %3, %6
  %8 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 11
  %9 = load double, double* %8, align 8
  %10 = fsub double %7, %9
  %11 = fcmp olt double %10, 1.000000e+00
  %12 = select i1 %11, double 1.000000e+00, double %10
  ret double %12
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN6webrtc18VCMJitterEstimator17CalculateEstimateEv(%"class.webrtc::VCMJitterEstimator"* nocapture) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %7 = load double, double* %6, align 8
  %8 = fsub double %5, %7
  %9 = fmul double %3, %8
  %10 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %13 = load double, double* %12, align 8
  %14 = tail call double @sqrt(double %13) #14
  %15 = fmul double %11, %14
  %16 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 11
  %17 = load double, double* %16, align 8
  %18 = fsub double %15, %17
  %19 = fcmp olt double %18, 1.000000e+00
  %20 = select i1 %19, double 1.000000e+00, double %18
  %21 = fadd double %9, %20
  %22 = fcmp olt double %21, 1.000000e+00
  br i1 %22, label %23, label %28

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  %25 = load double, double* %24, align 8
  %26 = fcmp ugt double %25, 1.000000e-02
  %27 = select i1 %26, double %25, double 1.000000e+00
  br label %28

28:                                               ; preds = %23, %1
  %29 = phi double [ %21, %1 ], [ %27, %23 ]
  %30 = fcmp ogt double %29, 1.000000e+04
  %31 = select i1 %30, double 1.000000e+04, double %29
  %32 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double %31, double* %32, align 8
  ret double %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18VCMJitterEstimator9UpdateRttEl(%"class.webrtc::VCMJitterEstimator"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 28
  tail call void @_ZN6webrtc12VCMRttFilter6UpdateEl(%"class.webrtc::VCMRttFilter"* %3, i64 %1) #14
  ret void
}

declare void @_ZN6webrtc12VCMRttFilter6UpdateEl(%"class.webrtc::VCMRttFilter"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc18VCMJitterEstimator17GetJitterEstimateEdN4absl8optionalIdEE(%"class.webrtc::VCMJitterEstimator"*, double, i8, double) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 1, i64 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 16
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 14
  %10 = load double, double* %9, align 8
  %11 = fsub double %8, %10
  %12 = fmul double %6, %11
  %13 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 10
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 2
  %16 = load double, double* %15, align 8
  %17 = tail call double @sqrt(double %16) #14
  %18 = fmul double %14, %17
  %19 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 11
  %20 = load double, double* %19, align 8
  %21 = fsub double %18, %20
  %22 = fcmp olt double %21, 1.000000e+00
  %23 = select i1 %22, double 1.000000e+00, double %21
  %24 = fadd double %12, %23
  %25 = fcmp olt double %24, 1.000000e+00
  br i1 %25, label %26, label %31

26:                                               ; preds = %4
  %27 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  %28 = load double, double* %27, align 8
  %29 = fcmp ugt double %28, 1.000000e-02
  %30 = select i1 %29, double %28, double 1.000000e+00
  br label %31

31:                                               ; preds = %4, %26
  %32 = phi double [ %24, %4 ], [ %30, %26 ]
  %33 = fcmp ogt double %32, 1.000000e+04
  %34 = select i1 %33, double 1.000000e+04, double %32
  %35 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 20
  store double %34, double* %35, align 8
  %36 = fadd double %34, 1.000000e+01
  %37 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 32
  %38 = load %"class.webrtc::Clock"*, %"class.webrtc::Clock"** %37, align 8
  %39 = bitcast %"class.webrtc::Clock"* %38 to i64 (%"class.webrtc::Clock"*)***
  %40 = load i64 (%"class.webrtc::Clock"*)**, i64 (%"class.webrtc::Clock"*)*** %39, align 8
  %41 = getelementptr inbounds i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %40, i64 2
  %42 = load i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %41, align 8
  %43 = tail call i64 %42(%"class.webrtc::Clock"* %38) #14
  %44 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 26
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = icmp ugt i64 %46, 60000000
  %48 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 27
  br i1 %47, label %51, label %49

49:                                               ; preds = %31
  %50 = load i32, i32* %48, align 8
  br label %52

51:                                               ; preds = %31
  store i32 0, i32* %48, align 8
  br label %52

52:                                               ; preds = %49, %51
  %53 = phi i32 [ %50, %49 ], [ 0, %51 ]
  %54 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 24
  %55 = load double, double* %54, align 8
  %56 = fcmp ogt double %55, %36
  %57 = select i1 %56, double %55, double %36
  %58 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 7
  %59 = load i32, i32* %58, align 8
  %60 = icmp ult i32 %53, %59
  br i1 %60, label %73, label %61

61:                                               ; preds = %52
  %62 = icmp eq i8 %2, 0
  %63 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 28
  %64 = tail call i64 @_ZNK6webrtc12VCMRttFilter5RttMsEv(%"class.webrtc::VCMRttFilter"* %63) #14
  %65 = sitofp i64 %64 to double
  %66 = fmul double %65, %1
  br i1 %62, label %71, label %67

67:                                               ; preds = %61
  %68 = fcmp ogt double %66, %3
  %69 = select i1 %68, double %3, double %66
  %70 = fadd double %57, %69
  br label %73

71:                                               ; preds = %61
  %72 = fadd double %57, %66
  br label %73

73:                                               ; preds = %52, %67, %71
  %74 = phi double [ %57, %52 ], [ %70, %67 ], [ %72, %71 ]
  %75 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 31
  %76 = load i8, i8* %75, align 8, !range !2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %112, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %93, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.webrtc::VCMJitterEstimator", %"class.webrtc::VCMJitterEstimator"* %0, i64 0, i32 29, i32 0, i32 3
  %84 = load double, double* %83, align 8
  %85 = fcmp ugt double %84, 0.000000e+00
  br i1 %85, label %86, label %93

86:                                               ; preds = %82
  %87 = fdiv double 1.000000e+06, %84
  %88 = fcmp ogt double %87, 2.000000e+02
  br i1 %88, label %112, label %89

89:                                               ; preds = %86
  %90 = fcmp olt double %87, 5.000000e+00
  br i1 %90, label %91, label %106

91:                                               ; preds = %89
  %92 = fcmp oeq double %87, 0.000000e+00
  br i1 %92, label %93, label %126

93:                                               ; preds = %82, %78, %91
  %94 = fcmp ogt double %74, 0.000000e+00
  %95 = select i1 %94, double %74, double 0.000000e+00
  %96 = fadd double %95, 5.000000e-01
  %97 = fcmp ole double %96, 0x41DFFFFFFFC00000
  %98 = select i1 %97, i32 0, i32 2
  %99 = fcmp ult double %96, 0xC1E0000000000000
  %100 = zext i1 %99 to i32
  %101 = or i32 %98, %100
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %104, label %103

103:                                              ; preds = %93
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #16
  unreachable

104:                                              ; preds = %93
  %105 = fptosi double %96 to i32
  br label %126

106:                                              ; preds = %89
  %107 = fcmp olt double %87, 1.000000e+01
  br i1 %107, label %108, label %112

108:                                              ; preds = %106
  %109 = fadd double %87, -5.000000e+00
  %110 = fmul double %109, 2.000000e-01
  %111 = fmul double %74, %110
  br label %112

112:                                              ; preds = %86, %106, %108, %73
  %113 = phi double [ %74, %73 ], [ %74, %106 ], [ %111, %108 ], [ %74, %86 ]
  %114 = fcmp ogt double %113, 0.000000e+00
  %115 = select i1 %114, double %113, double 0.000000e+00
  %116 = fadd double %115, 5.000000e-01
  %117 = fcmp ole double %116, 0x41DFFFFFFFC00000
  %118 = select i1 %117, i32 0, i32 2
  %119 = fcmp ult double %116, 0xC1E0000000000000
  %120 = zext i1 %119 to i32
  %121 = or i32 %118, %120
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %124, label %123

123:                                              ; preds = %112
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #16
  unreachable

124:                                              ; preds = %112
  %125 = fptosi double %116 to i32
  br label %126

126:                                              ; preds = %104, %91, %124
  %127 = phi i32 [ %125, %124 ], [ %105, %104 ], [ 0, %91 ]
  ret i32 %127
}

declare i64 @_ZNK6webrtc12VCMRttFilter5RttMsEv(%"class.webrtc::VCMRttFilter"*) local_unnamed_addr #1

declare void @_ZN6webrtc11field_trial12FindFullNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #12

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
