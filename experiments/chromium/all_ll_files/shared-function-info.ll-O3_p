; ModuleID = '../../v8/src/objects/shared-function-info.cc'
source_filename = "../../v8/src/objects/shared-function-info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.969"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.978", i32, i8, i8, i32, i32, %"class.std::__1::vector.984", %"class.std::__1::vector.984", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.991", i64, %"class.std::__1::unordered_map.992", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1048", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1086", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1120", %"class.std::__1::vector.1124", %"class.std::__1::vector.1124", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1359" }
%"class.std::__1::__compressed_pair.1359" = type { %"struct.std::__1::__compressed_pair_elem.1360" }
%"struct.std::__1::__compressed_pair_elem.1360" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::CompilationCacheScript", %"class.v8::internal::CompilationCacheEval", %"class.v8::internal::CompilationCacheEval", %"class.v8::internal::CompilationCacheRegExp", [4 x %"class.v8::internal::CompilationSubCache"*], i8, [7 x i8] }>
%"class.v8::internal::CompilationCacheScript" = type { %"class.v8::internal::CompilationSubCache" }
%"class.v8::internal::CompilationSubCache" = type { i32 (...)**, %"class.v8::internal::Isolate"*, i32, [2 x %"class.v8::internal::Object"] }
%"class.v8::internal::CompilationCacheEval" = type { %"class.v8::internal::CompilationSubCache" }
%"class.v8::internal::CompilationCacheRegExp" = type { %"class.v8::internal::CompilationSubCache" }
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ %union.anon.1351, i32, [4 x i8] }>
%union.anon.1351 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.956, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon.956 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.964" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"class.std::__1::__compressed_pair.959" }
%"struct.std::__1::pair.958" = type opaque
%"class.std::__1::__compressed_pair.959" = type { %"struct.std::__1::__compressed_pair_elem.960" }
%"struct.std::__1::__compressed_pair_elem.960" = type { %"struct.std::__1::pair.958"** }
%"class.std::__1::__compressed_pair.964" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.969" = type { %"class.std::__1::__vector_base.970" }
%"class.std::__1::__vector_base.970" = type { %"class.v8::internal::Handle.971"*, %"class.v8::internal::Handle.971"*, %"class.std::__1::__compressed_pair.972" }
%"class.v8::internal::Handle.971" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.973" }
%"struct.std::__1::__compressed_pair_elem.973" = type { %"class.v8::internal::Handle.971"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector.977", [128 x i8] }
%"class.v8::internal::Vector.977" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.978" = type { %"class.std::__1::__compressed_pair.979" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.980" }
%"struct.std::__1::__compressed_pair_elem.980" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.984" = type { %"class.std::__1::__vector_base.985" }
%"class.std::__1::__vector_base.985" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.986" }
%"class.std::__1::__compressed_pair.986" = type { %"struct.std::__1::__compressed_pair_elem.987" }
%"struct.std::__1::__compressed_pair_elem.987" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.991" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.992" = type { %"class.std::__1::__hash_table.993" }
%"class.std::__1::__hash_table.993" = type <{ %"class.std::__1::unique_ptr.994", %"class.std::__1::__compressed_pair.1004", %"class.std::__1::__compressed_pair.1009", %"class.std::__1::__compressed_pair.1012", [4 x i8] }>
%"class.std::__1::unique_ptr.994" = type { %"class.std::__1::__compressed_pair.995" }
%"class.std::__1::__compressed_pair.995" = type { %"struct.std::__1::__compressed_pair_elem.996", %"struct.std::__1::__compressed_pair_elem.998" }
%"struct.std::__1::__compressed_pair_elem.996" = type { %"struct.std::__1::__hash_node_base.997"** }
%"struct.std::__1::__hash_node_base.997" = type { %"struct.std::__1::__hash_node_base.997"* }
%"struct.std::__1::__compressed_pair_elem.998" = type { %"class.std::__1::__bucket_list_deallocator.999" }
%"class.std::__1::__bucket_list_deallocator.999" = type { %"class.std::__1::__compressed_pair.1000" }
%"class.std::__1::__compressed_pair.1000" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1004" = type { %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"struct.std::__1::__hash_node_base.997" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1012" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1016", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1045", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1046", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1016" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1041, %union.anon.1043, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1041 = type { i64 }
%union.anon.1043 = type { i64 }
%"class.std::__1::weak_ptr.1045" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1046" = type { %"class.v8::PersistentBase.1047" }
%"class.v8::PersistentBase.1047" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1017", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1017" = type { %"class.std::__1::__hash_table.1018" }
%"class.std::__1::__hash_table.1018" = type <{ %"class.std::__1::unique_ptr.1019", %"class.std::__1::__compressed_pair.1029", %"class.std::__1::__compressed_pair.1034", %"class.std::__1::__compressed_pair.1037", [4 x i8] }>
%"class.std::__1::unique_ptr.1019" = type { %"class.std::__1::__compressed_pair.1020" }
%"class.std::__1::__compressed_pair.1020" = type { %"struct.std::__1::__compressed_pair_elem.1021", %"struct.std::__1::__compressed_pair_elem.1023" }
%"struct.std::__1::__compressed_pair_elem.1021" = type { %"struct.std::__1::__hash_node_base.1022"** }
%"struct.std::__1::__hash_node_base.1022" = type { %"struct.std::__1::__hash_node_base.1022"* }
%"struct.std::__1::__compressed_pair_elem.1023" = type { %"class.std::__1::__bucket_list_deallocator.1024" }
%"class.std::__1::__bucket_list_deallocator.1024" = type { %"class.std::__1::__compressed_pair.1025" }
%"class.std::__1::__compressed_pair.1025" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1029" = type { %"struct.std::__1::__compressed_pair_elem.1030" }
%"struct.std::__1::__compressed_pair_elem.1030" = type { %"struct.std::__1::__hash_node_base.1022" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1037" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1048" = type { %"class.std::__1::__compressed_pair.1049" }
%"class.std::__1::__compressed_pair.1049" = type { %"struct.std::__1::__compressed_pair_elem.1050" }
%"struct.std::__1::__compressed_pair_elem.1050" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1077", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1053", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1057", %"class.std::__1::unique_ptr.1063", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1069", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1053" = type { %"struct.std::__1::__atomic_base.1054" }
%"struct.std::__1::__atomic_base.1054" = type { %"struct.std::__1::__cxx_atomic_impl.1055" }
%"struct.std::__1::__cxx_atomic_impl.1055" = type { %"struct.std::__1::__cxx_atomic_base_impl.1056" }
%"struct.std::__1::__cxx_atomic_base_impl.1056" = type { i32 }
%"class.std::__1::unique_ptr.1057" = type { %"class.std::__1::__compressed_pair.1058" }
%"class.std::__1::__compressed_pair.1058" = type { %"struct.std::__1::__compressed_pair_elem.1059" }
%"struct.std::__1::__compressed_pair_elem.1059" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::unique_ptr.1063" = type { %"class.std::__1::__compressed_pair.1064" }
%"class.std::__1::__compressed_pair.1064" = type { %"struct.std::__1::__compressed_pair_elem.1065" }
%"struct.std::__1::__compressed_pair_elem.1065" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1069" = type { %"class.std::__1::__vector_base.1070" }
%"class.std::__1::__vector_base.1070" = type { %"struct.std::__1::pair.1071"*, %"struct.std::__1::pair.1071"*, %"class.std::__1::__compressed_pair.1072" }
%"struct.std::__1::pair.1071" = type opaque
%"class.std::__1::__compressed_pair.1072" = type { %"struct.std::__1::__compressed_pair_elem.1073" }
%"struct.std::__1::__compressed_pair_elem.1073" = type { %"struct.std::__1::pair.1071"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1077" = type { %"class.std::__1::__compressed_pair.1078" }
%"class.std::__1::__compressed_pair.1078" = type { %"struct.std::__1::__compressed_pair_elem.1079" }
%"struct.std::__1::__compressed_pair_elem.1079" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1086" = type { %"class.std::__1::__compressed_pair.1087" }
%"class.std::__1::__compressed_pair.1087" = type { %"struct.std::__1::__compressed_pair_elem.1088" }
%"struct.std::__1::__compressed_pair_elem.1088" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1094" }
%"class.std::__1::unordered_map.1094" = type { %"class.std::__1::__hash_table.1095" }
%"class.std::__1::__hash_table.1095" = type <{ %"class.std::__1::unique_ptr.1096", %"class.std::__1::__compressed_pair.1106", %"class.std::__1::__compressed_pair.1111", %"class.std::__1::__compressed_pair.1114", [4 x i8] }>
%"class.std::__1::unique_ptr.1096" = type { %"class.std::__1::__compressed_pair.1097" }
%"class.std::__1::__compressed_pair.1097" = type { %"struct.std::__1::__compressed_pair_elem.1098", %"struct.std::__1::__compressed_pair_elem.1100" }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"struct.std::__1::__hash_node_base.1099"** }
%"struct.std::__1::__hash_node_base.1099" = type { %"struct.std::__1::__hash_node_base.1099"* }
%"struct.std::__1::__compressed_pair_elem.1100" = type { %"class.std::__1::__bucket_list_deallocator.1101" }
%"class.std::__1::__bucket_list_deallocator.1101" = type { %"class.std::__1::__compressed_pair.1102" }
%"class.std::__1::__compressed_pair.1102" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.1107" }
%"struct.std::__1::__compressed_pair_elem.1107" = type { %"struct.std::__1::__hash_node_base.1099" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1114" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.1120" = type { %"struct.std::__1::__atomic_base.1121" }
%"struct.std::__1::__atomic_base.1121" = type { %"struct.std::__1::__cxx_atomic_impl.1122" }
%"struct.std::__1::__cxx_atomic_impl.1122" = type { %"struct.std::__1::__cxx_atomic_base_impl.1123" }
%"struct.std::__1::__cxx_atomic_base_impl.1123" = type { %"class.std::__1::vector.1124"* }
%"class.std::__1::vector.1124" = type { %"class.std::__1::__vector_base.1125" }
%"class.std::__1::__vector_base.1125" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1126" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1126" = type { %"struct.std::__1::__compressed_pair_elem.1127" }
%"struct.std::__1::__compressed_pair_elem.1127" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.v8::internal::SharedFunctionInfo::ScriptIterator" = type <{ %"class.v8::internal::Handle.1160", i32, [4 x i8] }>
%"class.v8::internal::Handle.1160" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FunctionLiteral" = type { %"class.v8::internal::Expression", i32, i32, i32, i32, i32, i32, %"class.v8::internal::AstConsString"*, %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::ZoneList.1152", %"class.v8::internal::AstConsString"*, %"class.v8::internal::Handle.957", %"class.v8::internal::ProducedPreparseData"* }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%"class.v8::internal::DeclarationScope" = type <{ %"class.v8::internal::Scope.base", i16, i8, [2 x i8], i32, [4 x i8], %"class.v8::internal::ZoneList", %"class.v8::base::ThreadedListBase.1138", %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::PreparseDataBuilder"*, %"struct.v8::internal::DeclarationScope::RareData"* }>
%"class.v8::internal::Scope.base" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.1134", %"class.v8::base::ThreadedListBase.1136", %"class.v8::internal::Handle.1137", i32, i32, i32, i32, i8, i16 }>
%"class.v8::internal::Scope" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.1134", %"class.v8::base::ThreadedListBase.1136", %"class.v8::internal::Handle.1137", i32, i32, i32, i32, i8, i16, [5 x i8] }>
%"class.v8::internal::VariableMap" = type { %"class.v8::base::PointerTemplateHashMapImpl" }
%"class.v8::base::PointerTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl.1132" }
%"class.v8::base::TemplateHashMapImpl.1132" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry.1133"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry.1133" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::base::ThreadedListBase" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** }
%"class.v8::base::ThreadedListBase.1134" = type { %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** }
%"class.v8::internal::VariableProxy" = type { %"class.v8::internal::Expression", %union.anon.1135, %"class.v8::internal::VariableProxy"* }
%union.anon.1135 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::base::ThreadedListBase.1136" = type { %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** }
%"class.v8::internal::Declaration" = type { %"class.v8::internal::AstNode", %"class.v8::internal::Variable"*, %"class.v8::internal::Declaration"* }
%"class.v8::internal::Handle.1137" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::Variable"**, i32, i32 }
%"class.v8::base::ThreadedListBase.1138" = type { %"class.v8::internal::SloppyBlockFunctionStatement"*, %"class.v8::internal::SloppyBlockFunctionStatement"** }
%"class.v8::internal::SloppyBlockFunctionStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::Variable"*, %"class.v8::internal::Statement"*, %"class.v8::internal::SloppyBlockFunctionStatement"* }
%"class.v8::internal::Statement" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::Variable" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, i32, i32, i16, [6 x i8] }>
%"class.v8::internal::PreparseDataBuilder" = type <{ %"class.v8::internal::PreparseDataBuilder"*, %"class.v8::internal::PreparseDataBuilder::ByteData", %union.anon.1149, %"class.v8::internal::DeclarationScope"*, i32, i32, i32, i8, [3 x i8] }>
%"class.v8::internal::PreparseDataBuilder::ByteData" = type <{ %union.anon.1139, i8, [7 x i8] }>
%union.anon.1139 = type { %struct.anon.1140 }
%struct.anon.1140 = type { %"class.std::__1::vector.1141"*, i32 }
%"class.std::__1::vector.1141" = type { %"class.std::__1::__vector_base.1142" }
%"class.std::__1::__vector_base.1142" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1143" }
%"class.std::__1::__compressed_pair.1143" = type { %"struct.std::__1::__compressed_pair_elem.1144" }
%"struct.std::__1::__compressed_pair_elem.1144" = type { i8* }
%union.anon.1149 = type { %"class.v8::internal::ScopedList" }
%"class.v8::internal::ScopedList" = type { %"class.std::__1::vector.1150"*, i64, i64 }
%"class.std::__1::vector.1150" = type { %"class.std::__1::__vector_base.1353" }
%"class.std::__1::__vector_base.1353" = type { i8**, i8**, %"class.std::__1::__compressed_pair.1354" }
%"class.std::__1::__compressed_pair.1354" = type { %"struct.std::__1::__compressed_pair_elem.1355" }
%"struct.std::__1::__compressed_pair_elem.1355" = type { i8** }
%"struct.v8::internal::DeclarationScope::RareData" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"* }
%"class.v8::internal::ZoneList.1152" = type { %"class.v8::internal::Statement"**, i32, i32 }
%"class.v8::internal::AstConsString" = type { %"class.v8::internal::Handle.957", %"struct.v8::internal::AstConsString::Segment" }
%"struct.v8::internal::AstConsString::Segment" = type { %"class.v8::internal::AstRawString"*, %"struct.v8::internal::AstConsString::Segment"* }
%"class.v8::internal::Handle.957" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::ProducedPreparseData" = type { i32 (...)** }
%"class.v8::internal::ScopeInfo" = type { %"class.v8::internal::TorqueGeneratedScopeInfo" }
%"class.v8::internal::TorqueGeneratedScopeInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FactoryBase.1051" = type { i8 }
%"class.v8::internal::WasmInstanceObject" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::wasm::WasmModule" = type { %"class.std::__1::unique_ptr.1174", i32, i32, i8, i8, i8, i8, i8, i32, %"class.std::__1::vector.1180", i32, i32, i32, i32, i32, i32, i32, i32, %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", %"class.std::__1::vector.1194", %"class.std::__1::vector.1141", %"class.std::__1::vector.1202", %"class.std::__1::vector.1209", %"class.std::__1::vector.1216", %"class.std::__1::vector.1223", %"class.std::__1::vector.1230", %"class.std::__1::vector.1237", %"class.std::__1::vector.1244", %"class.std::__1::vector.1251", %"class.std::__1::vector.1264", %"class.std::__1::unordered_map.1271", %"class.v8::internal::wasm::SignatureMap", i8, %"class.v8::internal::wasm::LazilyGeneratedNames", %"struct.v8::internal::wasm::WasmDebugSymbols", %"class.std::__1::unique_ptr.1332" }
%"class.std::__1::unique_ptr.1174" = type { %"class.std::__1::__compressed_pair.1175" }
%"class.std::__1::__compressed_pair.1175" = type { %"struct.std::__1::__compressed_pair_elem.1176" }
%"struct.std::__1::__compressed_pair_elem.1176" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::vector.1180" = type { %"class.std::__1::__vector_base.1181" }
%"class.std::__1::__vector_base.1181" = type { %"struct.v8::internal::wasm::WasmGlobal"*, %"struct.v8::internal::wasm::WasmGlobal"*, %"class.std::__1::__compressed_pair.1189" }
%"struct.v8::internal::wasm::WasmGlobal" = type <{ %"class.v8::internal::wasm::ValueType", i8, [3 x i8], %"class.v8::internal::wasm::WasmInitExpr", %union.anon.1188, i8, i8, [2 x i8] }>
%"class.v8::internal::wasm::ValueType" = type { i32 }
%"class.v8::internal::wasm::WasmInitExpr" = type { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32, %"class.std::__1::unique_ptr.1182" }
%"union.v8::internal::wasm::WasmInitExpr::Immediate" = type { i64, [8 x i8] }
%"class.std::__1::unique_ptr.1182" = type { %"class.std::__1::__compressed_pair.1183" }
%"class.std::__1::__compressed_pair.1183" = type { %"struct.std::__1::__compressed_pair_elem.1184" }
%"struct.std::__1::__compressed_pair_elem.1184" = type { %"class.v8::internal::wasm::WasmInitExpr"* }
%union.anon.1188 = type { i32 }
%"class.std::__1::__compressed_pair.1189" = type { %"struct.std::__1::__compressed_pair_elem.1190" }
%"struct.std::__1::__compressed_pair_elem.1190" = type { %"struct.v8::internal::wasm::WasmGlobal"* }
%"class.v8::internal::wasm::WireBytesRef" = type { i32, i32 }
%"class.std::__1::vector.1194" = type { %"class.std::__1::__vector_base.1195" }
%"class.std::__1::__vector_base.1195" = type { %"struct.v8::internal::wasm::TypeDefinition"*, %"struct.v8::internal::wasm::TypeDefinition"*, %"class.std::__1::__compressed_pair.1197" }
%"struct.v8::internal::wasm::TypeDefinition" = type { %union.anon.1196 }
%union.anon.1196 = type { %"class.v8::internal::Signature"* }
%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::wasm::ValueType"* }
%"class.std::__1::__compressed_pair.1197" = type { %"struct.std::__1::__compressed_pair_elem.1198" }
%"struct.std::__1::__compressed_pair_elem.1198" = type { %"struct.v8::internal::wasm::TypeDefinition"* }
%"class.std::__1::vector.1202" = type { %"class.std::__1::__vector_base.1203" }
%"class.std::__1::__vector_base.1203" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1204" }
%"class.std::__1::__compressed_pair.1204" = type { %"struct.std::__1::__compressed_pair_elem.1205" }
%"struct.std::__1::__compressed_pair_elem.1205" = type { i32* }
%"class.std::__1::vector.1209" = type { %"class.std::__1::__vector_base.1210" }
%"class.std::__1::__vector_base.1210" = type { %"struct.v8::internal::wasm::WasmFunction"*, %"struct.v8::internal::wasm::WasmFunction"*, %"class.std::__1::__compressed_pair.1211" }
%"struct.v8::internal::wasm::WasmFunction" = type <{ %"class.v8::internal::Signature"*, i32, i32, %"class.v8::internal::wasm::WireBytesRef", i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.1211" = type { %"struct.std::__1::__compressed_pair_elem.1212" }
%"struct.std::__1::__compressed_pair_elem.1212" = type { %"struct.v8::internal::wasm::WasmFunction"* }
%"class.std::__1::vector.1216" = type { %"class.std::__1::__vector_base.1217" }
%"class.std::__1::__vector_base.1217" = type { %"struct.v8::internal::wasm::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmDataSegment"*, %"class.std::__1::__compressed_pair.1218" }
%"struct.v8::internal::wasm::WasmDataSegment" = type <{ %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WireBytesRef", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1218" = type { %"struct.std::__1::__compressed_pair_elem.1219" }
%"struct.std::__1::__compressed_pair_elem.1219" = type { %"struct.v8::internal::wasm::WasmDataSegment"* }
%"class.std::__1::vector.1223" = type { %"class.std::__1::__vector_base.1224" }
%"class.std::__1::__vector_base.1224" = type { %"struct.v8::internal::wasm::WasmTable"*, %"struct.v8::internal::wasm::WasmTable"*, %"class.std::__1::__compressed_pair.1225" }
%"struct.v8::internal::wasm::WasmTable" = type { %"class.v8::internal::wasm::ValueType", i32, i32, i8, i8, i8, %"class.v8::internal::wasm::WasmInitExpr" }
%"class.std::__1::__compressed_pair.1225" = type { %"struct.std::__1::__compressed_pair_elem.1226" }
%"struct.std::__1::__compressed_pair_elem.1226" = type { %"struct.v8::internal::wasm::WasmTable"* }
%"class.std::__1::vector.1230" = type { %"class.std::__1::__vector_base.1231" }
%"class.std::__1::__vector_base.1231" = type { %"struct.v8::internal::wasm::WasmImport"*, %"struct.v8::internal::wasm::WasmImport"*, %"class.std::__1::__compressed_pair.1232" }
%"struct.v8::internal::wasm::WasmImport" = type { %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1232" = type { %"struct.std::__1::__compressed_pair_elem.1233" }
%"struct.std::__1::__compressed_pair_elem.1233" = type { %"struct.v8::internal::wasm::WasmImport"* }
%"class.std::__1::vector.1237" = type { %"class.std::__1::__vector_base.1238" }
%"class.std::__1::__vector_base.1238" = type { %"struct.v8::internal::wasm::WasmExport"*, %"struct.v8::internal::wasm::WasmExport"*, %"class.std::__1::__compressed_pair.1239" }
%"struct.v8::internal::wasm::WasmExport" = type { %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1239" = type { %"struct.std::__1::__compressed_pair_elem.1240" }
%"struct.std::__1::__compressed_pair_elem.1240" = type { %"struct.v8::internal::wasm::WasmExport"* }
%"class.std::__1::vector.1244" = type { %"class.std::__1::__vector_base.1245" }
%"class.std::__1::__vector_base.1245" = type { %"struct.v8::internal::wasm::WasmException"*, %"struct.v8::internal::wasm::WasmException"*, %"class.std::__1::__compressed_pair.1246" }
%"struct.v8::internal::wasm::WasmException" = type { %"class.v8::internal::Signature"* }
%"class.std::__1::__compressed_pair.1246" = type { %"struct.std::__1::__compressed_pair_elem.1247" }
%"struct.std::__1::__compressed_pair_elem.1247" = type { %"struct.v8::internal::wasm::WasmException"* }
%"class.std::__1::vector.1251" = type { %"class.std::__1::__vector_base.1252" }
%"class.std::__1::__vector_base.1252" = type { %"struct.v8::internal::wasm::WasmElemSegment"*, %"struct.v8::internal::wasm::WasmElemSegment"*, %"class.std::__1::__compressed_pair.1259" }
%"struct.v8::internal::wasm::WasmElemSegment" = type <{ %"class.v8::internal::wasm::ValueType", i32, %"class.v8::internal::wasm::WasmInitExpr", %"class.std::__1::vector.1253", i32, [4 x i8] }>
%"class.std::__1::vector.1253" = type { %"class.std::__1::__vector_base.1254" }
%"class.std::__1::__vector_base.1254" = type { %"class.v8::internal::wasm::WasmInitExpr"*, %"class.v8::internal::wasm::WasmInitExpr"*, %"class.std::__1::__compressed_pair.1255" }
%"class.std::__1::__compressed_pair.1255" = type { %"struct.std::__1::__compressed_pair_elem.1184" }
%"class.std::__1::__compressed_pair.1259" = type { %"struct.std::__1::__compressed_pair_elem.1260" }
%"struct.std::__1::__compressed_pair_elem.1260" = type { %"struct.v8::internal::wasm::WasmElemSegment"* }
%"class.std::__1::vector.1264" = type { %"class.std::__1::__vector_base.1265" }
%"class.std::__1::__vector_base.1265" = type { %"struct.v8::internal::wasm::WasmCompilationHint"*, %"struct.v8::internal::wasm::WasmCompilationHint"*, %"class.std::__1::__compressed_pair.1266" }
%"struct.v8::internal::wasm::WasmCompilationHint" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.1266" = type { %"struct.std::__1::__compressed_pair_elem.1267" }
%"struct.std::__1::__compressed_pair_elem.1267" = type { %"struct.v8::internal::wasm::WasmCompilationHint"* }
%"class.std::__1::unordered_map.1271" = type { %"class.std::__1::__hash_table.1272" }
%"class.std::__1::__hash_table.1272" = type <{ %"class.std::__1::unique_ptr.1273", %"class.std::__1::__compressed_pair.1283", %"class.std::__1::__compressed_pair.1288", %"class.std::__1::__compressed_pair.1293", [4 x i8] }>
%"class.std::__1::unique_ptr.1273" = type { %"class.std::__1::__compressed_pair.1274" }
%"class.std::__1::__compressed_pair.1274" = type { %"struct.std::__1::__compressed_pair_elem.1275", %"struct.std::__1::__compressed_pair_elem.1277" }
%"struct.std::__1::__compressed_pair_elem.1275" = type { %"struct.std::__1::__hash_node_base.1276"** }
%"struct.std::__1::__hash_node_base.1276" = type { %"struct.std::__1::__hash_node_base.1276"* }
%"struct.std::__1::__compressed_pair_elem.1277" = type { %"class.std::__1::__bucket_list_deallocator.1278" }
%"class.std::__1::__bucket_list_deallocator.1278" = type { %"class.std::__1::__compressed_pair.1279" }
%"class.std::__1::__compressed_pair.1279" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1283" = type { %"struct.std::__1::__compressed_pair_elem.1284" }
%"struct.std::__1::__compressed_pair_elem.1284" = type { %"struct.std::__1::__hash_node_base.1276" }
%"class.std::__1::__compressed_pair.1288" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1293" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::wasm::SignatureMap" = type { i8, [7 x i8], %"class.std::__1::unordered_map.1299" }
%"class.std::__1::unordered_map.1299" = type { %"class.std::__1::__hash_table.1300" }
%"class.std::__1::__hash_table.1300" = type <{ %"class.std::__1::unique_ptr.1301", %"class.std::__1::__compressed_pair.1311", %"class.std::__1::__compressed_pair.1316", %"class.std::__1::__compressed_pair.1319", [4 x i8] }>
%"class.std::__1::unique_ptr.1301" = type { %"class.std::__1::__compressed_pair.1302" }
%"class.std::__1::__compressed_pair.1302" = type { %"struct.std::__1::__compressed_pair_elem.1303", %"struct.std::__1::__compressed_pair_elem.1305" }
%"struct.std::__1::__compressed_pair_elem.1303" = type { %"struct.std::__1::__hash_node_base.1304"** }
%"struct.std::__1::__hash_node_base.1304" = type { %"struct.std::__1::__hash_node_base.1304"* }
%"struct.std::__1::__compressed_pair_elem.1305" = type { %"class.std::__1::__bucket_list_deallocator.1306" }
%"class.std::__1::__bucket_list_deallocator.1306" = type { %"class.std::__1::__compressed_pair.1307" }
%"class.std::__1::__compressed_pair.1307" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1311" = type { %"struct.std::__1::__compressed_pair_elem.1312" }
%"struct.std::__1::__compressed_pair_elem.1312" = type { %"struct.std::__1::__hash_node_base.1304" }
%"class.std::__1::__compressed_pair.1316" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1319" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::wasm::LazilyGeneratedNames" = type { %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.1325" }
%"class.std::__1::unique_ptr.1325" = type { %"class.std::__1::__compressed_pair.1326" }
%"class.std::__1::__compressed_pair.1326" = type { %"struct.std::__1::__compressed_pair_elem.1327" }
%"struct.std::__1::__compressed_pair_elem.1327" = type { %"class.std::__1::unordered_map.1328"* }
%"class.std::__1::unordered_map.1328" = type opaque
%"struct.v8::internal::wasm::WasmDebugSymbols" = type { i32, %"class.v8::internal::wasm::WireBytesRef" }
%"class.std::__1::unique_ptr.1332" = type { %"class.std::__1::__compressed_pair.1333" }
%"class.std::__1::__compressed_pair.1333" = type { %"struct.std::__1::__compressed_pair_elem.1334" }
%"struct.std::__1::__compressed_pair_elem.1334" = type { %"class.v8::internal::wasm::AsmJsOffsetInformation"* }
%"class.v8::internal::wasm::AsmJsOffsetInformation" = type { %"class.v8::base::Mutex", %"class.v8::internal::OwnedVector", %"class.std::__1::unique_ptr.1341" }
%"class.v8::internal::OwnedVector" = type { %"class.std::__1::unique_ptr.1335", i64 }
%"class.std::__1::unique_ptr.1335" = type { %"class.std::__1::__compressed_pair.1336" }
%"class.std::__1::__compressed_pair.1336" = type { %"struct.std::__1::__compressed_pair_elem.1337" }
%"struct.std::__1::__compressed_pair_elem.1337" = type { i8* }
%"class.std::__1::unique_ptr.1341" = type { %"class.std::__1::__compressed_pair.1342" }
%"class.std::__1::__compressed_pair.1342" = type { %"struct.std::__1::__compressed_pair_elem.1343" }
%"struct.std::__1::__compressed_pair_elem.1343" = type { %"struct.v8::internal::wasm::AsmJsOffsets"* }
%"struct.v8::internal::wasm::AsmJsOffsets" = type opaque
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.v8::internal::DebugInfo" = type { %"class.v8::internal::TorqueGeneratedDebugInfo" }
%"class.v8::internal::TorqueGeneratedDebugInfo" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::Vector.1168" = type { i8*, i64 }
%"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef" = type { %"class.v8::internal::SharedFunctionInfo" }
%"class.v8::internal::Factory" = type { i8 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)* }
%"class.v8::internal::CompressedObjectSlot" = type { %"class.v8::internal::SlotBase.1169" }
%"class.v8::internal::SlotBase.1169" = type { i64 }
%"class.v8::internal::IncrementalStringBuilder" = type { %"class.v8::internal::Isolate"*, i32, i8, i32, i32, %"class.v8::internal::Handle.957", %"class.v8::internal::Handle.957" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"struct.v8::internal::SourceCodeOf" = type <{ %"class.v8::internal::SharedFunctionInfo", i32, [4 x i8] }>
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN2v88internal18SharedFunctionInfo23InitFromFunctionLiteralINS0_7IsolateEEEvPT_NS0_6HandleIS1_EEPNS0_15FunctionLiteralEb = comdat any

$_ZN2v88internal18SharedFunctionInfo23InitFromFunctionLiteralINS0_12LocalIsolateEEEvPT_NS0_6HandleIS1_EEPNS0_15FunctionLiteralEb = comdat any

$_ZNK2v88internal18SharedFunctionInfo4NameEv = comdat any

$_ZN2v88internal18SharedFunctionInfo13inferred_nameEv = comdat any

$_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_ = comdat any

$_ZN2v88internal18SharedFunctionInfo22SetActiveBytecodeArrayENS0_13BytecodeArrayE = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFvN2v88internal10HeapObjectENS3_20CompressedObjectSlotES4_EE11__call_implINS0_20__default_alloc_funcIZNS3_18SharedFunctionInfo23DiscardCompiledMetadataEPNS3_7IsolateENS_8functionIS6_EEEd_UlS4_S5_S4_E_S6_EEEEvPKNS0_16__policy_storageEOS4_OS5_SK_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal18SharedFunctionInfo23DiscardCompiledMetadataEPNS5_7IsolateENS_8functionIFvNS5_10HeapObjectENS5_20CompressedObjectSlotESA_EEEEd_UlSA_SB_SA_E_SC_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

@_ZN2v88internal18SharedFunctionInfo21kNoSharedNameSentinelE = hidden local_unnamed_addr constant { i64 } zeroinitializer, align 8
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internal25FLAG_trace_flush_bytecodeE = external local_unnamed_addr global i8, align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"[discarding compiled metadata for \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"function \00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"<No Source>\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"<Invalid Source>\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"...\0A\00", align 1
@_ZN2v88internal14FLAG_trace_optE = external local_unnamed_addr global i8, align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"[disabled optimization for \00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c", reason: %s]\0A\00", align 1
@_ZN2v88internal33FLAG_enable_lazy_source_positionsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@.str.13 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.15 = private unnamed_addr constant [103 x i8] c"could not open file. If on Android, try passing --redirect-code-traces-to=/sdcard/Download/<file-name>\00", align 1
@_ZN2v88internal25FLAG_redirect_code_tracesE = external local_unnamed_addr global i8, align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@.str.17 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal18SharedFunctionInfo23DiscardCompiledMetadataEPNS5_7IsolateENS_8functionIFvNS5_10HeapObjectENS5_20CompressedObjectSlotESA_EEEEd_UlSA_SB_SA_E_SC_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@switch.table._ZN2v88internal18SharedFunctionInfo4InitENS0_13ReadOnlyRootsEi = private unnamed_addr constant [24 x i32] [i32 194, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 194, i32 194, i32 194, i32 194, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192, i32 192], align 4

@_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC1EPNS0_7IsolateENS0_6ScriptE = hidden unnamed_addr alias void (%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*, %"class.v8::internal::Isolate"*, i64), void (%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*, %"class.v8::internal::Isolate"*, i64)* @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC2EPNS0_7IsolateENS0_6ScriptE
@_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC1ENS0_6HandleINS0_14WeakFixedArrayEEE = hidden unnamed_addr alias void (%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*, i64*), void (%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*, i64*)* @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC2ENS0_6HandleINS0_14WeakFixedArrayEEE

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal18SharedFunctionInfo23InitFromFunctionLiteralINS0_7IsolateEEEvPT_NS0_6HandleIS1_EEPNS0_15FunctionLiteralEb(%"class.v8::internal::Isolate"*, i64*, %"class.v8::internal::FunctionLiteral"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.v8::internal::ScopeInfo", align 8
  %6 = load i64, i64* %1, align 8
  %7 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = trunc i32 %8 to i16
  %10 = add i64 %6, 21
  %11 = inttoptr i64 %10 to i16*
  store i16 %9, i16* %11, align 2
  %12 = load i64, i64* %1, align 8
  %13 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %16 = icmp eq i32 %14, -1
  %17 = sub nsw i32 %15, %14
  %18 = select i1 %16, i32 0, i32 %17
  %19 = icmp slt i32 %18, 65535
  %20 = select i1 %19, i32 %18, i32 65535
  %21 = trunc i32 %20 to i16
  %22 = add i64 %12, 23
  %23 = inttoptr i64 %22 to i16*
  store i16 %21, i16* %23, align 2
  %24 = load i64, i64* %1, align 8
  %25 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 896
  %28 = add i64 %24, 27
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, -897
  %32 = or i32 %31, %27
  store atomic volatile i32 %32, i32* %29 monotonic, align 4
  %33 = load i64, i64* %1, align 8
  %34 = tail call zeroext i1 @_ZN2v88internal15FunctionLiteral21AllowsLazyCompilationEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %35 = add i64 %33, 27
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, -4097
  %39 = zext i1 %34 to i32
  %40 = shl nuw nsw i32 %39, 12
  %41 = or i32 %38, %40
  store atomic volatile i32 %41, i32* %36 monotonic, align 4
  %42 = load i64, i64* %1, align 8
  %43 = tail call zeroext i1 @_ZNK2v88internal15FunctionLiteral13language_modeEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %44 = add i64 %42, 27
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, -65
  %48 = zext i1 %43 to i32
  %49 = shl nuw nsw i32 %48, 6
  %50 = or i32 %47, %49
  store atomic volatile i32 %50, i32* %45 monotonic, align 4
  %51 = load atomic i32, i32* %45 monotonic, align 4
  %52 = and i32 %51, 64
  %53 = icmp eq i32 %52, 0
  %54 = load atomic i32, i32* %45 monotonic, align 4
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 31
  %57 = and i64 %42, -4294967296
  %58 = add i64 %42, 7
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %79, label %65

65:                                               ; preds = %4
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 178
  br i1 %74, label %75, label %79

75:                                               ; preds = %65
  %76 = bitcast %"class.v8::internal::ScopeInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  %77 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %62, i64* %77, align 8
  %78 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #12
  br label %81

79:                                               ; preds = %65, %4
  %80 = icmp ne i32 %60, 0
  br label %81

81:                                               ; preds = %79, %75
  %82 = phi i1 [ %78, %75 ], [ %80, %79 ]
  %83 = add nsw i8 %56, -3
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %113, label %85

85:                                               ; preds = %81
  %86 = add nsw i8 %56, -16
  %87 = icmp ult i8 %86, 6
  br i1 %87, label %88, label %92

88:                                               ; preds = %85
  %89 = add nsw i8 %56, -12
  %90 = icmp ult i8 %89, 7
  %91 = select i1 %90, i32 198, i32 196
  br label %106

92:                                               ; preds = %85
  %93 = add nsw i8 %56, -2
  %94 = icmp ult i8 %93, 24
  br i1 %94, label %97, label %95

95:                                               ; preds = %97, %92
  %96 = select i1 %53, i32 185, i32 189
  br label %106

97:                                               ; preds = %92
  %98 = zext i8 %93 to i32
  %99 = lshr i32 15744993, %98
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %95, label %102

102:                                              ; preds = %97
  %103 = sext i8 %93 to i64
  %104 = getelementptr inbounds [24 x i32], [24 x i32]* @switch.table._ZN2v88internal18SharedFunctionInfo4InitENS0_13ReadOnlyRootsEi, i64 0, i64 %103
  %105 = load i32, i32* %104, align 4
  br label %106

106:                                              ; preds = %102, %95, %88
  %107 = phi i32 [ %91, %88 ], [ %96, %95 ], [ %105, %102 ]
  %108 = xor i1 %82, true
  %109 = zext i1 %108 to i32
  %110 = add nuw nsw i32 %107, %109
  %111 = shl nuw nsw i32 %110, 14
  %112 = add nsw i32 %111, -3031040
  br label %113

113:                                              ; preds = %81, %106
  %114 = phi i32 [ %112, %106 ], [ 245760, %81 ]
  %115 = load atomic i32, i32* %45 monotonic, align 4
  %116 = and i32 %115, -507905
  %117 = or i32 %116, %114
  store atomic volatile i32 %117, i32* %45 monotonic, align 4
  %118 = load i64, i64* %1, align 8
  %119 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 6
  %120 = load i32, i32* %119, align 4
  %121 = add i64 %118, 31
  %122 = inttoptr i64 %121 to i32*
  store i32 %120, i32* %122, align 4
  %123 = load i64, i64* %1, align 8
  %124 = load i32, i32* %25, align 4
  %125 = add i64 %123, 27
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, -8388609
  %129 = shl i32 %124, 3
  %130 = and i32 %129, 8388608
  %131 = or i32 %128, %130
  store atomic volatile i32 %131, i32* %126 monotonic, align 4
  %132 = load i64, i64* %1, align 8
  %133 = load i32, i32* %25, align 4
  %134 = add i64 %132, 26
  %135 = inttoptr i64 %134 to i8*
  %136 = load i8, i8* %135, align 1
  %137 = and i8 %136, -2
  %138 = lshr i32 %133, 21
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = or i8 %140, %137
  store i8 %141, i8* %135, align 1
  %142 = load i64, i64* %1, align 8
  %143 = load i32, i32* %25, align 4
  %144 = add i64 %142, 26
  %145 = inttoptr i64 %144 to i8*
  %146 = load i8, i8* %145, align 1
  %147 = and i8 %146, -3
  %148 = lshr i32 %143, 21
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 2
  %151 = or i8 %150, %147
  store i8 %151, i8* %145, align 1
  %152 = load i64, i64* %1, align 8
  %153 = add i64 %152, 27
  %154 = inttoptr i64 %153 to i32*
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, -134217729
  %157 = zext i1 %3 to i32
  %158 = shl nuw nsw i32 %157, 27
  %159 = or i32 %156, %158
  store atomic volatile i32 %159, i32* %154 monotonic, align 4
  br i1 %3, label %216, label %160

160:                                              ; preds = %113
  %161 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 8
  %162 = bitcast %"class.v8::internal::DeclarationScope"** %161 to %"class.v8::internal::Scope"**
  %163 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %162, align 8
  %164 = call %"class.v8::internal::Scope"* @_ZN2v88internal5Scope24GetOuterScopeWithContextEv(%"class.v8::internal::Scope"* %163) #12
  %165 = icmp eq %"class.v8::internal::Scope"* %164, null
  br i1 %165, label %216, label %166

166:                                              ; preds = %160
  %167 = load i64, i64* %1, align 8
  %168 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %164, i64 0, i32 7, i32 0, i32 0
  %169 = load i64*, i64** %168, align 8
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %167, 11
  %172 = inttoptr i64 %171 to i32*
  %173 = trunc i64 %170 to i32
  store atomic volatile i32 %173, i32* %172 monotonic, align 4
  %174 = and i64 %170, 1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %187, label %176

176:                                              ; preds = %166
  %177 = and i64 %167, -262144
  %178 = or i64 %177, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %180, 262144
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %176
  %184 = or i64 %177, 16
  %185 = inttoptr i64 %184 to %"class.v8::internal::Heap"**
  %186 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %185, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %186, i64 %167, i64 %171, i64 %170) #12
  br label %187

187:                                              ; preds = %183, %176, %166
  %188 = and i64 %170, -262144
  %189 = or i64 %188, 8
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = and i64 %191, 24
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %202, label %194

194:                                              ; preds = %187
  %195 = and i64 %167, -262144
  %196 = or i64 %195, 8
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = and i64 %198, 24
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %202

201:                                              ; preds = %194
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %167, i64 %171, i64 %170) #12
  br label %202

202:                                              ; preds = %187, %194, %201
  %203 = load i64, i64* %1, align 8
  %204 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %162, align 8
  %205 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %204, i64 0, i32 13
  %206 = load i16, i16* %205, align 1
  %207 = add i64 %203, 27
  %208 = inttoptr i64 %207 to i32*
  %209 = load atomic i32, i32* %208 monotonic, align 4
  %210 = and i32 %209, -536870913
  %211 = lshr i16 %206, 9
  %212 = and i16 %211, 1
  %213 = zext i16 %212 to i32
  %214 = shl nuw nsw i32 %213, 29
  %215 = or i32 %214, %210
  store atomic volatile i32 %215, i32* %208 monotonic, align 4
  br label %216

216:                                              ; preds = %202, %160, %113
  %217 = load i64, i64* %1, align 8
  %218 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 3
  %219 = load i32, i32* %218, align 8
  %220 = trunc i32 %219 to i16
  %221 = add i64 %217, 19
  %222 = inttoptr i64 %221 to i16*
  store i16 %220, i16* %222, align 2
  %223 = call zeroext i1 @_ZNK2v88internal15FunctionLiteral18ShouldEagerCompileEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %224 = load i64, i64* %1, align 8
  br i1 %223, label %225, label %270

225:                                              ; preds = %216
  %226 = load i32, i32* %25, align 4
  %227 = add i64 %224, 27
  %228 = inttoptr i64 %227 to i32*
  %229 = load atomic i32, i32* %228 monotonic, align 4
  %230 = and i32 %229, -2049
  %231 = and i32 %226, 2048
  %232 = or i32 %230, %231
  store atomic volatile i32 %232, i32* %228 monotonic, align 4
  %233 = load i64, i64* %1, align 8
  %234 = add i64 %233, 27
  %235 = inttoptr i64 %234 to i32*
  %236 = load atomic i32, i32* %235 monotonic, align 4
  %237 = and i32 %236, 268435456
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %243, label %239

239:                                              ; preds = %225
  %240 = load atomic i32, i32* %235 monotonic, align 4
  %241 = and i32 %240, 1024
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %371

243:                                              ; preds = %239, %225
  %244 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 1
  %245 = load i32, i32* %244, align 8
  %246 = load atomic i32, i32* %235 monotonic, align 4
  %247 = and i32 %246, 1024
  %248 = icmp eq i32 %247, 0
  %249 = add i64 %233, 25
  %250 = inttoptr i64 %249 to i8*
  br i1 %248, label %255, label %251

251:                                              ; preds = %243
  %252 = load i8, i8* %250, align 1
  %253 = zext i8 %252 to i32
  %254 = add nsw i32 %245, %253
  br label %255

255:                                              ; preds = %251, %243
  %256 = phi i32 [ %254, %251 ], [ %245, %243 ]
  %257 = trunc i32 %256 to i16
  %258 = icmp eq i16 %257, 0
  %259 = and i32 %256, 65535
  %260 = select i1 %258, i32 2, i32 %259
  %261 = icmp ult i32 %260, 255
  %262 = select i1 %261, i32 %260, i32 255
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %250, align 1
  %264 = load atomic i32, i32* %235 monotonic, align 4
  %265 = and i32 %264, 1024
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %371, label %267

267:                                              ; preds = %255
  %268 = load atomic i32, i32* %235 monotonic, align 4
  %269 = or i32 %268, 268435456
  store atomic volatile i32 %269, i32* %235 monotonic, align 4
  br label %371

270:                                              ; preds = %216
  %271 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 1
  %272 = load i32, i32* %271, align 8
  %273 = add i64 %224, 27
  %274 = inttoptr i64 %273 to i32*
  %275 = load atomic i32, i32* %274 monotonic, align 4
  %276 = and i32 %275, 1024
  %277 = icmp eq i32 %276, 0
  %278 = add i64 %224, 25
  %279 = inttoptr i64 %278 to i8*
  br i1 %277, label %284, label %280

280:                                              ; preds = %270
  %281 = load i8, i8* %279, align 1
  %282 = zext i8 %281 to i32
  %283 = add nsw i32 %272, %282
  br label %284

284:                                              ; preds = %270, %280
  %285 = phi i32 [ %283, %280 ], [ %272, %270 ]
  %286 = and i32 %285, 65535
  %287 = icmp ult i32 %286, 255
  %288 = select i1 %287, i32 %286, i32 255
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %279, align 1
  %290 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 12
  %291 = load %"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::ProducedPreparseData"** %290, align 8
  %292 = icmp eq %"class.v8::internal::ProducedPreparseData"* %291, null
  br i1 %292, label %318, label %293

293:                                              ; preds = %284
  %294 = bitcast %"class.v8::internal::ProducedPreparseData"* %291 to i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::Isolate"*)***
  %295 = load i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::Isolate"*)**, i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::Isolate"*)*** %294, align 8
  %296 = load i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::Isolate"*)*, i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::Isolate"*)** %295, align 8
  %297 = call i64* %296(%"class.v8::internal::ProducedPreparseData"* nonnull %291, %"class.v8::internal::Isolate"* %0) #12
  %298 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %299 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 11, i32 0, i32 0
  %300 = load i64*, i64** %299, align 8
  %301 = icmp eq i64* %300, null
  br i1 %301, label %302, label %313

302:                                              ; preds = %293
  %303 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 10
  %304 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %303, align 8
  %305 = icmp eq %"class.v8::internal::AstConsString"* %304, null
  br i1 %305, label %312, label %306

306:                                              ; preds = %302
  %307 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %304, i64 0, i32 0, i32 0, i32 0
  %308 = load i64*, i64** %307, align 8
  %309 = icmp eq i64* %308, null
  br i1 %309, label %310, label %313

310:                                              ; preds = %306
  %311 = call i64* @_ZNK2v88internal13AstConsString8AllocateINS0_7IsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"* nonnull %304, %"class.v8::internal::Isolate"* %0) #12
  store i64* %311, i64** %307, align 8
  br label %313

312:                                              ; preds = %302
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #13
  unreachable

313:                                              ; preds = %293, %306, %310
  %314 = phi i64* [ %311, %310 ], [ %308, %306 ], [ %300, %293 ]
  %315 = call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %316 = call i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %317 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE33NewUncompiledDataWithPreparseDataENS0_6HandleINS0_6StringEEEiiNS4_INS0_12PreparseDataEEE(%"class.v8::internal::FactoryBase"* %298, i64* %314, i32 %315, i32 %316, i64* %297) #12
  br label %339

318:                                              ; preds = %284
  %319 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %320 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 11, i32 0, i32 0
  %321 = load i64*, i64** %320, align 8
  %322 = icmp eq i64* %321, null
  br i1 %322, label %323, label %334

323:                                              ; preds = %318
  %324 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 10
  %325 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %324, align 8
  %326 = icmp eq %"class.v8::internal::AstConsString"* %325, null
  br i1 %326, label %333, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %325, i64 0, i32 0, i32 0, i32 0
  %329 = load i64*, i64** %328, align 8
  %330 = icmp eq i64* %329, null
  br i1 %330, label %331, label %334

331:                                              ; preds = %327
  %332 = call i64* @_ZNK2v88internal13AstConsString8AllocateINS0_7IsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"* nonnull %325, %"class.v8::internal::Isolate"* %0) #12
  store i64* %332, i64** %328, align 8
  br label %334

333:                                              ; preds = %323
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #13
  unreachable

334:                                              ; preds = %318, %327, %331
  %335 = phi i64* [ %332, %331 ], [ %329, %327 ], [ %321, %318 ]
  %336 = call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %337 = call i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %338 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE36NewUncompiledDataWithoutPreparseDataENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::FactoryBase"* %319, i64* %335, i32 %336, i32 %337) #12
  br label %339

339:                                              ; preds = %334, %313
  %340 = phi i64* [ %338, %334 ], [ %317, %313 ]
  %341 = load i64, i64* %1, align 8
  %342 = load i64, i64* %340, align 8
  %343 = add i64 %341, 3
  %344 = inttoptr i64 %343 to i32*
  %345 = trunc i64 %342 to i32
  store atomic volatile i32 %345, i32* %344 release, align 4
  %346 = and i64 %342, 1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %371, label %348

348:                                              ; preds = %339
  %349 = and i64 %341, -262144
  %350 = or i64 %349, 8
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = and i64 %352, 262144
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %359, label %355

355:                                              ; preds = %348
  %356 = or i64 %349, 16
  %357 = inttoptr i64 %356 to %"class.v8::internal::Heap"**
  %358 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %357, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %358, i64 %341, i64 %343, i64 %342) #12
  br label %359

359:                                              ; preds = %355, %348
  %360 = and i64 %342, -262144
  %361 = or i64 %360, 8
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = and i64 %363, 24
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %371, label %366

366:                                              ; preds = %359
  %367 = load i64, i64* %351, align 8
  %368 = and i64 %367, 24
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %366
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %341, i64 %343, i64 %342) #12
  br label %371

371:                                              ; preds = %370, %366, %359, %339, %267, %255, %239
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo24SetFunctionTokenPositionEii(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = icmp eq i32 %1, -1
  %5 = sub nsw i32 %2, %1
  %6 = select i1 %4, i32 0, i32 %5
  %7 = icmp slt i32 %6, 65535
  %8 = select i1 %7, i32 %6, i32 65535
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 23
  %13 = inttoptr i64 %12 to i16*
  store i16 %9, i16* %13, align 2
  ret void
}

declare i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal15FunctionLiteral21AllowsLazyCompilationEv(%"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal15FunctionLiteral13language_modeEv(%"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #3

declare %"class.v8::internal::Scope"* @_ZN2v88internal5Scope24GetOuterScopeWithContextEv(%"class.v8::internal::Scope"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal15FunctionLiteral18ShouldEagerCompileEv(%"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo50UpdateAndFinalizeExpectedNofPropertiesFromEstimateEPNS0_15FunctionLiteralE(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, %"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 27
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 268435456
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = load atomic i32, i32* %6 monotonic, align 4
  %12 = and i32 %11, 1024
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %44

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = load atomic i32, i32* %6 monotonic, align 4
  %18 = and i32 %17, 1024
  %19 = icmp eq i32 %18, 0
  %20 = add i64 %4, 25
  %21 = inttoptr i64 %20 to i8*
  br i1 %19, label %26, label %22

22:                                               ; preds = %14
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %16, %24
  br label %26

26:                                               ; preds = %14, %22
  %27 = phi i32 [ %25, %22 ], [ %16, %14 ]
  %28 = trunc i32 %27 to i16
  %29 = icmp eq i16 %28, 0
  %30 = and i32 %27, 65535
  %31 = select i1 %29, i32 2, i32 %30
  %32 = icmp ult i32 %31, 255
  %33 = select i1 %32, i32 %31, i32 255
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %21, align 1
  %35 = load i64, i64* %3, align 8
  %36 = add i64 %35, 27
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1024
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %26
  %42 = load atomic i32, i32* %37 monotonic, align 4
  %43 = or i32 %42, 268435456
  store atomic volatile i32 %43, i32* %37 monotonic, align 4
  br label %44

44:                                               ; preds = %10, %41, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo39UpdateExpectedNofPropertiesFromEstimateEPNS0_15FunctionLiteralE(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, %"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 27
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 1024
  %11 = icmp eq i32 %10, 0
  %12 = add i64 %6, 25
  %13 = inttoptr i64 %12 to i8*
  br i1 %11, label %18, label %14

14:                                               ; preds = %2
  %15 = load i8, i8* %13, align 1
  %16 = zext i8 %15 to i32
  %17 = add nsw i32 %4, %16
  br label %18

18:                                               ; preds = %2, %14
  %19 = phi i32 [ %17, %14 ], [ %4, %2 ]
  %20 = and i32 %19, 65535
  %21 = icmp ult i32 %20, 255
  %22 = select i1 %21, i32 %20, i32 255
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %13, align 1
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE33NewUncompiledDataWithPreparseDataENS0_6HandleINS0_6StringEEEiiNS4_INS0_12PreparseDataEEE(%"class.v8::internal::FactoryBase"*, i64*, i32, i32, i64*) local_unnamed_addr #3

declare i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE36NewUncompiledDataWithoutPreparseDataENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::FactoryBase"*, i64*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal18SharedFunctionInfo23InitFromFunctionLiteralINS0_12LocalIsolateEEEvPT_NS0_6HandleIS1_EEPNS0_15FunctionLiteralEb(%"class.v8::internal::LocalIsolate"*, i64*, %"class.v8::internal::FunctionLiteral"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.v8::internal::ScopeInfo", align 8
  %6 = load i64, i64* %1, align 8
  %7 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = trunc i32 %8 to i16
  %10 = add i64 %6, 21
  %11 = inttoptr i64 %10 to i16*
  store i16 %9, i16* %11, align 2
  %12 = load i64, i64* %1, align 8
  %13 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %16 = icmp eq i32 %14, -1
  %17 = sub nsw i32 %15, %14
  %18 = select i1 %16, i32 0, i32 %17
  %19 = icmp slt i32 %18, 65535
  %20 = select i1 %19, i32 %18, i32 65535
  %21 = trunc i32 %20 to i16
  %22 = add i64 %12, 23
  %23 = inttoptr i64 %22 to i16*
  store i16 %21, i16* %23, align 2
  %24 = load i64, i64* %1, align 8
  %25 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 896
  %28 = add i64 %24, 27
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, -897
  %32 = or i32 %31, %27
  store atomic volatile i32 %32, i32* %29 monotonic, align 4
  %33 = load i64, i64* %1, align 8
  %34 = tail call zeroext i1 @_ZN2v88internal15FunctionLiteral21AllowsLazyCompilationEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %35 = add i64 %33, 27
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, -4097
  %39 = zext i1 %34 to i32
  %40 = shl nuw nsw i32 %39, 12
  %41 = or i32 %38, %40
  store atomic volatile i32 %41, i32* %36 monotonic, align 4
  %42 = load i64, i64* %1, align 8
  %43 = tail call zeroext i1 @_ZNK2v88internal15FunctionLiteral13language_modeEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %44 = add i64 %42, 27
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, -65
  %48 = zext i1 %43 to i32
  %49 = shl nuw nsw i32 %48, 6
  %50 = or i32 %47, %49
  store atomic volatile i32 %50, i32* %45 monotonic, align 4
  %51 = load atomic i32, i32* %45 monotonic, align 4
  %52 = and i32 %51, 64
  %53 = icmp eq i32 %52, 0
  %54 = load atomic i32, i32* %45 monotonic, align 4
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 31
  %57 = and i64 %42, -4294967296
  %58 = add i64 %42, 7
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %79, label %65

65:                                               ; preds = %4
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 178
  br i1 %74, label %75, label %79

75:                                               ; preds = %65
  %76 = bitcast %"class.v8::internal::ScopeInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  %77 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %62, i64* %77, align 8
  %78 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #12
  br label %81

79:                                               ; preds = %65, %4
  %80 = icmp ne i32 %60, 0
  br label %81

81:                                               ; preds = %79, %75
  %82 = phi i1 [ %78, %75 ], [ %80, %79 ]
  %83 = add nsw i8 %56, -3
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %113, label %85

85:                                               ; preds = %81
  %86 = add nsw i8 %56, -16
  %87 = icmp ult i8 %86, 6
  br i1 %87, label %88, label %92

88:                                               ; preds = %85
  %89 = add nsw i8 %56, -12
  %90 = icmp ult i8 %89, 7
  %91 = select i1 %90, i32 198, i32 196
  br label %106

92:                                               ; preds = %85
  %93 = add nsw i8 %56, -2
  %94 = icmp ult i8 %93, 24
  br i1 %94, label %97, label %95

95:                                               ; preds = %97, %92
  %96 = select i1 %53, i32 185, i32 189
  br label %106

97:                                               ; preds = %92
  %98 = zext i8 %93 to i32
  %99 = lshr i32 15744993, %98
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %95, label %102

102:                                              ; preds = %97
  %103 = sext i8 %93 to i64
  %104 = getelementptr inbounds [24 x i32], [24 x i32]* @switch.table._ZN2v88internal18SharedFunctionInfo4InitENS0_13ReadOnlyRootsEi, i64 0, i64 %103
  %105 = load i32, i32* %104, align 4
  br label %106

106:                                              ; preds = %102, %95, %88
  %107 = phi i32 [ %91, %88 ], [ %96, %95 ], [ %105, %102 ]
  %108 = xor i1 %82, true
  %109 = zext i1 %108 to i32
  %110 = add nuw nsw i32 %107, %109
  %111 = shl nuw nsw i32 %110, 14
  %112 = add nsw i32 %111, -3031040
  br label %113

113:                                              ; preds = %81, %106
  %114 = phi i32 [ %112, %106 ], [ 245760, %81 ]
  %115 = load atomic i32, i32* %45 monotonic, align 4
  %116 = and i32 %115, -507905
  %117 = or i32 %116, %114
  store atomic volatile i32 %117, i32* %45 monotonic, align 4
  %118 = load i64, i64* %1, align 8
  %119 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 6
  %120 = load i32, i32* %119, align 4
  %121 = add i64 %118, 31
  %122 = inttoptr i64 %121 to i32*
  store i32 %120, i32* %122, align 4
  %123 = load i64, i64* %1, align 8
  %124 = load i32, i32* %25, align 4
  %125 = add i64 %123, 27
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, -8388609
  %129 = shl i32 %124, 3
  %130 = and i32 %129, 8388608
  %131 = or i32 %128, %130
  store atomic volatile i32 %131, i32* %126 monotonic, align 4
  %132 = load i64, i64* %1, align 8
  %133 = load i32, i32* %25, align 4
  %134 = add i64 %132, 26
  %135 = inttoptr i64 %134 to i8*
  %136 = load i8, i8* %135, align 1
  %137 = and i8 %136, -2
  %138 = lshr i32 %133, 21
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = or i8 %140, %137
  store i8 %141, i8* %135, align 1
  %142 = load i64, i64* %1, align 8
  %143 = load i32, i32* %25, align 4
  %144 = add i64 %142, 26
  %145 = inttoptr i64 %144 to i8*
  %146 = load i8, i8* %145, align 1
  %147 = and i8 %146, -3
  %148 = lshr i32 %143, 21
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 2
  %151 = or i8 %150, %147
  store i8 %151, i8* %145, align 1
  %152 = load i64, i64* %1, align 8
  %153 = add i64 %152, 27
  %154 = inttoptr i64 %153 to i32*
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, -134217729
  %157 = zext i1 %3 to i32
  %158 = shl nuw nsw i32 %157, 27
  %159 = or i32 %156, %158
  store atomic volatile i32 %159, i32* %154 monotonic, align 4
  br i1 %3, label %216, label %160

160:                                              ; preds = %113
  %161 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 8
  %162 = bitcast %"class.v8::internal::DeclarationScope"** %161 to %"class.v8::internal::Scope"**
  %163 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %162, align 8
  %164 = call %"class.v8::internal::Scope"* @_ZN2v88internal5Scope24GetOuterScopeWithContextEv(%"class.v8::internal::Scope"* %163) #12
  %165 = icmp eq %"class.v8::internal::Scope"* %164, null
  br i1 %165, label %216, label %166

166:                                              ; preds = %160
  %167 = load i64, i64* %1, align 8
  %168 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %164, i64 0, i32 7, i32 0, i32 0
  %169 = load i64*, i64** %168, align 8
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %167, 11
  %172 = inttoptr i64 %171 to i32*
  %173 = trunc i64 %170 to i32
  store atomic volatile i32 %173, i32* %172 monotonic, align 4
  %174 = and i64 %170, 1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %187, label %176

176:                                              ; preds = %166
  %177 = and i64 %167, -262144
  %178 = or i64 %177, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %180, 262144
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %176
  %184 = or i64 %177, 16
  %185 = inttoptr i64 %184 to %"class.v8::internal::Heap"**
  %186 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %185, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %186, i64 %167, i64 %171, i64 %170) #12
  br label %187

187:                                              ; preds = %183, %176, %166
  %188 = and i64 %170, -262144
  %189 = or i64 %188, 8
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = and i64 %191, 24
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %202, label %194

194:                                              ; preds = %187
  %195 = and i64 %167, -262144
  %196 = or i64 %195, 8
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = and i64 %198, 24
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %202

201:                                              ; preds = %194
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %167, i64 %171, i64 %170) #12
  br label %202

202:                                              ; preds = %187, %194, %201
  %203 = load i64, i64* %1, align 8
  %204 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %162, align 8
  %205 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %204, i64 0, i32 13
  %206 = load i16, i16* %205, align 1
  %207 = add i64 %203, 27
  %208 = inttoptr i64 %207 to i32*
  %209 = load atomic i32, i32* %208 monotonic, align 4
  %210 = and i32 %209, -536870913
  %211 = lshr i16 %206, 9
  %212 = and i16 %211, 1
  %213 = zext i16 %212 to i32
  %214 = shl nuw nsw i32 %213, 29
  %215 = or i32 %214, %210
  store atomic volatile i32 %215, i32* %208 monotonic, align 4
  br label %216

216:                                              ; preds = %202, %160, %113
  %217 = load i64, i64* %1, align 8
  %218 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 3
  %219 = load i32, i32* %218, align 8
  %220 = trunc i32 %219 to i16
  %221 = add i64 %217, 19
  %222 = inttoptr i64 %221 to i16*
  store i16 %220, i16* %222, align 2
  %223 = call zeroext i1 @_ZNK2v88internal15FunctionLiteral18ShouldEagerCompileEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %224 = load i64, i64* %1, align 8
  br i1 %223, label %225, label %270

225:                                              ; preds = %216
  %226 = load i32, i32* %25, align 4
  %227 = add i64 %224, 27
  %228 = inttoptr i64 %227 to i32*
  %229 = load atomic i32, i32* %228 monotonic, align 4
  %230 = and i32 %229, -2049
  %231 = and i32 %226, 2048
  %232 = or i32 %230, %231
  store atomic volatile i32 %232, i32* %228 monotonic, align 4
  %233 = load i64, i64* %1, align 8
  %234 = add i64 %233, 27
  %235 = inttoptr i64 %234 to i32*
  %236 = load atomic i32, i32* %235 monotonic, align 4
  %237 = and i32 %236, 268435456
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %243, label %239

239:                                              ; preds = %225
  %240 = load atomic i32, i32* %235 monotonic, align 4
  %241 = and i32 %240, 1024
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %358

243:                                              ; preds = %239, %225
  %244 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 1
  %245 = load i32, i32* %244, align 8
  %246 = load atomic i32, i32* %235 monotonic, align 4
  %247 = and i32 %246, 1024
  %248 = icmp eq i32 %247, 0
  %249 = add i64 %233, 25
  %250 = inttoptr i64 %249 to i8*
  br i1 %248, label %255, label %251

251:                                              ; preds = %243
  %252 = load i8, i8* %250, align 1
  %253 = zext i8 %252 to i32
  %254 = add nsw i32 %245, %253
  br label %255

255:                                              ; preds = %251, %243
  %256 = phi i32 [ %254, %251 ], [ %245, %243 ]
  %257 = trunc i32 %256 to i16
  %258 = icmp eq i16 %257, 0
  %259 = and i32 %256, 65535
  %260 = select i1 %258, i32 2, i32 %259
  %261 = icmp ult i32 %260, 255
  %262 = select i1 %261, i32 %260, i32 255
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %250, align 1
  %264 = load atomic i32, i32* %235 monotonic, align 4
  %265 = and i32 %264, 1024
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %358, label %267

267:                                              ; preds = %255
  %268 = load atomic i32, i32* %235 monotonic, align 4
  %269 = or i32 %268, 268435456
  store atomic volatile i32 %269, i32* %235 monotonic, align 4
  br label %358

270:                                              ; preds = %216
  %271 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 1
  %272 = load i32, i32* %271, align 8
  %273 = add i64 %224, 27
  %274 = inttoptr i64 %273 to i32*
  %275 = load atomic i32, i32* %274 monotonic, align 4
  %276 = and i32 %275, 1024
  %277 = icmp eq i32 %276, 0
  %278 = add i64 %224, 25
  %279 = inttoptr i64 %278 to i8*
  br i1 %277, label %284, label %280

280:                                              ; preds = %270
  %281 = load i8, i8* %279, align 1
  %282 = zext i8 %281 to i32
  %283 = add nsw i32 %272, %282
  br label %284

284:                                              ; preds = %270, %280
  %285 = phi i32 [ %283, %280 ], [ %272, %270 ]
  %286 = and i32 %285, 65535
  %287 = icmp ult i32 %286, 255
  %288 = select i1 %287, i32 %286, i32 255
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %279, align 1
  %290 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 12
  %291 = load %"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::ProducedPreparseData"** %290, align 8
  %292 = icmp eq %"class.v8::internal::ProducedPreparseData"* %291, null
  br i1 %292, label %312, label %293

293:                                              ; preds = %284
  %294 = bitcast %"class.v8::internal::ProducedPreparseData"* %291 to i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)***
  %295 = load i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)**, i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)*** %294, align 8
  %296 = getelementptr inbounds i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)*, i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)** %295, i64 1
  %297 = load i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)*, i64* (%"class.v8::internal::ProducedPreparseData"*, %"class.v8::internal::LocalIsolate"*)** %296, align 8
  %298 = call i64* %297(%"class.v8::internal::ProducedPreparseData"* nonnull %291, %"class.v8::internal::LocalIsolate"* %0) #12
  %299 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1051"*
  %300 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 10
  %301 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %300, align 8
  %302 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %301, i64 0, i32 0, i32 0, i32 0
  %303 = load i64*, i64** %302, align 8
  %304 = icmp eq i64* %303, null
  br i1 %304, label %305, label %307

305:                                              ; preds = %293
  %306 = call i64* @_ZNK2v88internal13AstConsString8AllocateINS0_12LocalIsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"* %301, %"class.v8::internal::LocalIsolate"* %0) #12
  store i64* %306, i64** %302, align 8
  br label %307

307:                                              ; preds = %293, %305
  %308 = phi i64* [ %306, %305 ], [ %303, %293 ]
  %309 = call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %310 = call i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %311 = call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE33NewUncompiledDataWithPreparseDataENS0_6HandleINS0_6StringEEEiiNS4_INS0_12PreparseDataEEE(%"class.v8::internal::FactoryBase.1051"* %299, i64* %308, i32 %309, i32 %310, i64* %298) #12
  br label %326

312:                                              ; preds = %284
  %313 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1051"*
  %314 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %2, i64 0, i32 10
  %315 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %314, align 8
  %316 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %315, i64 0, i32 0, i32 0, i32 0
  %317 = load i64*, i64** %316, align 8
  %318 = icmp eq i64* %317, null
  br i1 %318, label %319, label %321

319:                                              ; preds = %312
  %320 = call i64* @_ZNK2v88internal13AstConsString8AllocateINS0_12LocalIsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"* %315, %"class.v8::internal::LocalIsolate"* %0) #12
  store i64* %320, i64** %316, align 8
  br label %321

321:                                              ; preds = %312, %319
  %322 = phi i64* [ %320, %319 ], [ %317, %312 ]
  %323 = call i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %324 = call i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"* %2) #12
  %325 = call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE36NewUncompiledDataWithoutPreparseDataENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::FactoryBase.1051"* %313, i64* %322, i32 %323, i32 %324) #12
  br label %326

326:                                              ; preds = %321, %307
  %327 = phi i64* [ %325, %321 ], [ %311, %307 ]
  %328 = load i64, i64* %1, align 8
  %329 = load i64, i64* %327, align 8
  %330 = add i64 %328, 3
  %331 = inttoptr i64 %330 to i32*
  %332 = trunc i64 %329 to i32
  store atomic volatile i32 %332, i32* %331 release, align 4
  %333 = and i64 %329, 1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %358, label %335

335:                                              ; preds = %326
  %336 = and i64 %328, -262144
  %337 = or i64 %336, 8
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = and i64 %339, 262144
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %346, label %342

342:                                              ; preds = %335
  %343 = or i64 %336, 16
  %344 = inttoptr i64 %343 to %"class.v8::internal::Heap"**
  %345 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %344, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %345, i64 %328, i64 %330, i64 %329) #12
  br label %346

346:                                              ; preds = %342, %335
  %347 = and i64 %329, -262144
  %348 = or i64 %347, 8
  %349 = inttoptr i64 %348 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = and i64 %350, 24
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %358, label %353

353:                                              ; preds = %346
  %354 = load i64, i64* %338, align 8
  %355 = and i64 %354, 24
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %358

357:                                              ; preds = %353
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %328, i64 %330, i64 %329) #12
  br label %358

358:                                              ; preds = %357, %353, %346, %326, %267, %255, %239
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE33NewUncompiledDataWithPreparseDataENS0_6HandleINS0_6StringEEEiiNS4_INS0_12PreparseDataEEE(%"class.v8::internal::FactoryBase.1051"*, i64*, i32, i32, i64*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE36NewUncompiledDataWithoutPreparseDataENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::FactoryBase.1051"*, i64*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal18SharedFunctionInfo4HashEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %28

20:                                               ; preds = %1
  %21 = add i64 %10, 11
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %5, %24
  %26 = add i64 %25, -1
  %27 = inttoptr i64 %26 to i32*
  br label %28

28:                                               ; preds = %1, %20
  %29 = phi i32* [ %12, %1 ], [ %27, %20 ]
  %30 = phi i64 [ %10, %1 ], [ %25, %20 ]
  %31 = and i64 %30, -4294967296
  %32 = load atomic i32, i32* %29 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %31, %33
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i16*
  %37 = load atomic i16, i16* %36 monotonic, align 2
  %38 = icmp eq i16 %37, 112
  br i1 %38, label %39, label %68

39:                                               ; preds = %28
  %40 = load i64, i64* %3, align 8
  %41 = and i64 %40, -4294967296
  %42 = add i64 %40, 15
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 acquire, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %41, %45
  %47 = add i64 %46, -1
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %41, %50
  %52 = add i64 %51, 7
  %53 = inttoptr i64 %52 to i16*
  %54 = load atomic i16, i16* %53 monotonic, align 2
  %55 = icmp eq i16 %54, 100
  br i1 %55, label %56, label %62

56:                                               ; preds = %39
  %57 = add i64 %46, 11
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = or i64 %41, %60
  br label %62

62:                                               ; preds = %39, %56
  %63 = phi i64 [ %61, %56 ], [ %46, %39 ]
  %64 = add i64 %63, 31
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = ashr i32 %66, 1
  br label %68

68:                                               ; preds = %28, %62
  %69 = phi i32 [ %67, %62 ], [ 0, %28 ]
  %70 = tail call i64 @_ZN2v84base10hash_valueEj(i32 %69) #12
  %71 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 0, i64 %70) #12
  %72 = tail call i64 @_ZN2v84base10hash_valueEj(i32 %2) #12
  %73 = tail call i64 @_ZN2v84base12hash_combineEmm(i64 %71, i64 %72) #12
  %74 = trunc i64 %73 to i32
  ret i32 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %4 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 7
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = and i64 %10, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %31, label %14

14:                                               ; preds = %1
  %15 = add i64 %11, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 178
  br i1 %23, label %24, label %31

24:                                               ; preds = %14
  %25 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %11, i64* %26, align 8
  %27 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasPositionInfoEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  br label %31

29:                                               ; preds = %24
  %30 = call i32 @_ZNK2v88internal9ScopeInfo13StartPositionEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  br label %142

31:                                               ; preds = %1, %28, %14
  %32 = load i64, i64* %4, align 8
  %33 = and i64 %32, -4294967296
  %34 = add i64 %32, 3
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = zext i32 %36 to i64
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %63, label %40

40:                                               ; preds = %31
  %41 = or i64 %33, %37
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %33, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = add i16 %49, -157
  %51 = icmp ult i16 %50, 2
  br i1 %51, label %52, label %63

52:                                               ; preds = %40
  %53 = load i64, i64* %4, align 8
  %54 = and i64 %53, -4294967296
  %55 = add i64 %53, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 acquire, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %54, %58
  %60 = add i64 %59, 7
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  br label %142

63:                                               ; preds = %31, %40
  %64 = load i64, i64* %4, align 8
  %65 = and i64 %64, -4294967296
  %66 = add i64 %64, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 acquire, align 4
  %69 = zext i32 %68 to i64
  %70 = and i64 %69, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %63
  %73 = or i64 %65, %69
  %74 = add i64 %73, -1
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %65, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 83
  br i1 %82, label %142, label %83

83:                                               ; preds = %63, %72
  %84 = load i64, i64* %4, align 8
  %85 = add i64 %84, 3
  %86 = inttoptr i64 %85 to i32*
  %87 = load atomic i32, i32* %86 acquire, align 4
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %142, label %90

90:                                               ; preds = %83
  %91 = load i64, i64* %4, align 8
  %92 = and i64 %91, -4294967296
  %93 = add i64 %91, 3
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 acquire, align 4
  %96 = zext i32 %95 to i64
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %142, label %99

99:                                               ; preds = %90
  %100 = or i64 %92, %96
  %101 = add i64 %100, -1
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %92, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 73
  br i1 %109, label %110, label %142

110:                                              ; preds = %99
  %111 = bitcast %"class.v8::internal::WasmInstanceObject"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #12
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, -4294967296
  %114 = add i64 %112, 3
  %115 = inttoptr i64 %114 to i32*
  %116 = load atomic i32, i32* %115 acquire, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %113, %117
  %119 = add i64 %118, 19
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %113, %122
  %124 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %123, i64* %124, align 8
  %125 = load i64, i64* %4, align 8
  %126 = and i64 %125, -4294967296
  %127 = add i64 %125, 3
  %128 = inttoptr i64 %127 to i32*
  %129 = load atomic i32, i32* %128 acquire, align 4
  %130 = zext i32 %129 to i64
  %131 = or i64 %126, %130
  %132 = add i64 %131, 23
  %133 = inttoptr i64 %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = ashr i32 %134, 1
  %136 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %3) #12
  %137 = sext i32 %135 to i64
  %138 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModule", %"struct.v8::internal::wasm::WasmModule"* %136, i64 0, i32 23, i32 0, i32 0
  %139 = load %"struct.v8::internal::wasm::WasmFunction"*, %"struct.v8::internal::wasm::WasmFunction"** %138, align 8
  %140 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunction", %"struct.v8::internal::wasm::WasmFunction"* %139, i64 %137, i32 3, i32 0
  %141 = load i32, i32* %140, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #12
  br label %142

142:                                              ; preds = %90, %29, %99, %72, %83, %110, %52
  %143 = phi i32 [ %62, %52 ], [ %141, %110 ], [ %30, %29 ], [ 0, %83 ], [ 0, %72 ], [ -1, %99 ], [ -1, %90 ]
  ret i32 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo4InitENS0_13ReadOnlyRootsEi(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::ScopeInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  store atomic volatile i32 320, i32* %8 release, align 4
  %9 = load i64, i64* %5, align 8
  %10 = add i64 %9, 7
  %11 = inttoptr i64 %10 to i32*
  store atomic volatile i32 0, i32* %11 release, align 4
  %12 = getelementptr inbounds i64, i64* %1, i64 5
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %5, align 8
  %15 = add i64 %14, 11
  %16 = inttoptr i64 %15 to i32*
  %17 = trunc i64 %13 to i32
  store atomic volatile i32 %17, i32* %16 monotonic, align 4
  %18 = getelementptr inbounds i64, i64* %1, i64 4
  %19 = load i64, i64* %18, align 8
  %20 = load i64, i64* %5, align 8
  %21 = add i64 %20, 15
  %22 = inttoptr i64 %21 to i32*
  %23 = trunc i64 %19 to i32
  store atomic volatile i32 %23, i32* %22 release, align 4
  %24 = load i64, i64* %5, align 8
  %25 = add i64 %24, 31
  %26 = inttoptr i64 %25 to i32*
  store i32 -1, i32* %26, align 4
  %27 = load i64, i64* %5, align 8
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i16*
  store i16 0, i16* %29, align 2
  %30 = load i64, i64* %5, align 8
  %31 = add i64 %30, 21
  %32 = inttoptr i64 %31 to i16*
  store i16 0, i16* %32, align 2
  %33 = load i64, i64* %5, align 8
  %34 = add i64 %33, 25
  %35 = inttoptr i64 %34 to i8*
  store i8 0, i8* %35, align 1
  %36 = load i64, i64* %5, align 8
  %37 = add i64 %36, 23
  %38 = inttoptr i64 %37 to i16*
  store i16 0, i16* %38, align 2
  %39 = load i64, i64* %5, align 8
  %40 = add i64 %39, 27
  %41 = inttoptr i64 %40 to i32*
  store atomic volatile i32 16777216, i32* %41 monotonic, align 4
  %42 = load i64, i64* %5, align 8
  %43 = add i64 %42, 26
  %44 = inttoptr i64 %43 to i8*
  store i8 0, i8* %44, align 1
  %45 = load i64, i64* %5, align 8
  %46 = add i64 %45, 27
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 64
  %50 = icmp eq i32 %49, 0
  %51 = load atomic i32, i32* %47 monotonic, align 4
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 31
  %54 = and i64 %45, -4294967296
  %55 = add i64 %45, 7
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 acquire, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %54, %58
  %60 = and i64 %58, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %3
  %63 = add i64 %59, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %54, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 178
  br i1 %71, label %72, label %76

72:                                               ; preds = %62
  %73 = bitcast %"class.v8::internal::ScopeInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #12
  %74 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %59, i64* %74, align 8
  %75 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #12
  br label %78

76:                                               ; preds = %62, %3
  %77 = icmp ne i32 %57, 0
  br label %78

78:                                               ; preds = %76, %72
  %79 = phi i1 [ %75, %72 ], [ %77, %76 ]
  %80 = add nsw i8 %53, -3
  %81 = icmp ult i8 %80, 4
  br i1 %81, label %110, label %82

82:                                               ; preds = %78
  %83 = add nsw i8 %53, -16
  %84 = icmp ult i8 %83, 6
  br i1 %84, label %85, label %89

85:                                               ; preds = %82
  %86 = add nsw i8 %53, -12
  %87 = icmp ult i8 %86, 7
  %88 = select i1 %87, i32 198, i32 196
  br label %103

89:                                               ; preds = %82
  %90 = add nsw i8 %53, -2
  %91 = icmp ult i8 %90, 24
  br i1 %91, label %94, label %92

92:                                               ; preds = %94, %89
  %93 = select i1 %50, i32 185, i32 189
  br label %103

94:                                               ; preds = %89
  %95 = zext i8 %90 to i32
  %96 = lshr i32 15744993, %95
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %92, label %99

99:                                               ; preds = %94
  %100 = sext i8 %90 to i64
  %101 = getelementptr inbounds [24 x i32], [24 x i32]* @switch.table._ZN2v88internal18SharedFunctionInfo4InitENS0_13ReadOnlyRootsEi, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  br label %103

103:                                              ; preds = %99, %92, %85
  %104 = phi i32 [ %88, %85 ], [ %93, %92 ], [ %102, %99 ]
  %105 = xor i1 %79, true
  %106 = zext i1 %105 to i32
  %107 = add nuw nsw i32 %104, %106
  %108 = shl nuw nsw i32 %107, 14
  %109 = add nsw i32 %108, -3031040
  br label %110

110:                                              ; preds = %78, %103
  %111 = phi i32 [ %109, %103 ], [ 245760, %78 ]
  %112 = load i64, i64* %5, align 8
  %113 = add i64 %112, 27
  %114 = inttoptr i64 %113 to i32*
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, -507905
  %117 = or i32 %116, %111
  store atomic volatile i32 %117, i32* %114 monotonic, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18SharedFunctionInfo7GetCodeEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -262144
  %5 = or i64 %4, 16
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 16
  %8 = add i64 %7, -41416
  %9 = inttoptr i64 %8 to %"class.v8::internal::Isolate"*
  %10 = and i64 %3, -4294967296
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 acquire, align 4
  %14 = zext i32 %13 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 41
  %19 = load i64, i64* %2, align 8
  %20 = add i64 %19, 3
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 acquire, align 4
  %23 = ashr i32 %22, 1
  %24 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %18, i32 %23) #12
  br label %200

25:                                               ; preds = %1
  %26 = or i64 %10, %14
  %27 = add i64 %26, -1
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %10, %30
  %32 = add i64 %31, 7
  %33 = inttoptr i64 %32 to i16*
  %34 = load atomic i16, i16* %33 monotonic, align 2
  %35 = icmp eq i16 %34, 133
  br i1 %35, label %36, label %39

36:                                               ; preds = %25
  %37 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 41
  %38 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %37, i32 69) #12
  br label %200

39:                                               ; preds = %25
  %40 = load atomic i32, i32* %28 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %10, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = icmp eq i16 %45, 94
  br i1 %46, label %47, label %60

47:                                               ; preds = %39
  %48 = load i64, i64* %2, align 8
  %49 = and i64 %48, -4294967296
  %50 = add i64 %48, 3
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %49, %53
  %55 = add i64 %54, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %49, %58
  br label %200

60:                                               ; preds = %39
  %61 = load atomic i32, i32* %28 monotonic, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %10, %62
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = icmp eq i16 %66, 92
  br i1 %67, label %68, label %71

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 41
  %70 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %69, i32 87) #12
  br label %200

71:                                               ; preds = %60
  %72 = load atomic i32, i32* %28 monotonic, align 4
  %73 = zext i32 %72 to i64
  %74 = or i64 %10, %73
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i16*
  %77 = load atomic i16, i16* %76 monotonic, align 2
  %78 = icmp eq i16 %77, 73
  br i1 %78, label %79, label %92

79:                                               ; preds = %71
  %80 = load i64, i64* %2, align 8
  %81 = and i64 %80, -4294967296
  %82 = add i64 %80, 3
  %83 = inttoptr i64 %82 to i32*
  %84 = load atomic i32, i32* %83 acquire, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %81, %85
  %87 = add i64 %86, 15
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = or i64 %81, %90
  br label %200

92:                                               ; preds = %71
  %93 = load atomic i32, i32* %28 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %10, %94
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i16*
  %98 = load atomic i16, i16* %97 monotonic, align 2
  %99 = icmp eq i16 %98, 74
  br i1 %99, label %100, label %113

100:                                              ; preds = %92
  %101 = load i64, i64* %2, align 8
  %102 = and i64 %101, -4294967296
  %103 = add i64 %101, 3
  %104 = inttoptr i64 %103 to i32*
  %105 = load atomic i32, i32* %104 acquire, align 4
  %106 = zext i32 %105 to i64
  %107 = or i64 %102, %106
  %108 = add i64 %107, 15
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = or i64 %102, %111
  br label %200

113:                                              ; preds = %92
  %114 = load atomic i32, i32* %28 monotonic, align 4
  %115 = zext i32 %114 to i64
  %116 = or i64 %10, %115
  %117 = add i64 %116, 7
  %118 = inttoptr i64 %117 to i16*
  %119 = load atomic i16, i16* %118 monotonic, align 2
  %120 = icmp eq i16 %119, 72
  br i1 %120, label %121, label %134

121:                                              ; preds = %113
  %122 = load i64, i64* %2, align 8
  %123 = and i64 %122, -4294967296
  %124 = add i64 %122, 3
  %125 = inttoptr i64 %124 to i32*
  %126 = load atomic i32, i32* %125 acquire, align 4
  %127 = zext i32 %126 to i64
  %128 = or i64 %123, %127
  %129 = add i64 %128, 15
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %123, %132
  br label %200

134:                                              ; preds = %113
  %135 = load atomic i32, i32* %28 monotonic, align 4
  %136 = zext i32 %135 to i64
  %137 = or i64 %10, %136
  %138 = add i64 %137, 7
  %139 = inttoptr i64 %138 to i16*
  %140 = load atomic i16, i16* %139 monotonic, align 2
  %141 = add i16 %140, -157
  %142 = icmp ult i16 %141, 2
  br i1 %142, label %143, label %146

143:                                              ; preds = %134
  %144 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 41
  %145 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %144, i32 85) #12
  br label %200

146:                                              ; preds = %134
  %147 = load atomic i32, i32* %28 monotonic, align 4
  %148 = zext i32 %147 to i64
  %149 = or i64 %10, %148
  %150 = add i64 %149, 7
  %151 = inttoptr i64 %150 to i16*
  %152 = load atomic i16, i16* %151 monotonic, align 2
  %153 = icmp eq i16 %152, 83
  br i1 %153, label %154, label %157

154:                                              ; preds = %146
  %155 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 41
  %156 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %155, i32 99) #12
  br label %200

157:                                              ; preds = %146
  %158 = load atomic i32, i32* %28 monotonic, align 4
  %159 = zext i32 %158 to i64
  %160 = or i64 %10, %159
  %161 = add i64 %160, 7
  %162 = inttoptr i64 %161 to i16*
  %163 = load atomic i16, i16* %162 monotonic, align 2
  %164 = icmp eq i16 %163, 105
  br i1 %164, label %165, label %199

165:                                              ; preds = %157
  %166 = load i64, i64* %2, align 8
  %167 = and i64 %166, -4294967296
  %168 = add i64 %166, 3
  %169 = inttoptr i64 %168 to i32*
  %170 = load atomic i32, i32* %169 acquire, align 4
  %171 = zext i32 %170 to i64
  %172 = or i64 %167, %171
  %173 = and i64 %171, 1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %191, label %175

175:                                              ; preds = %165
  %176 = add i64 %172, -1
  %177 = inttoptr i64 %176 to i32*
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = zext i32 %178 to i64
  %180 = or i64 %167, %179
  %181 = add i64 %180, 7
  %182 = inttoptr i64 %181 to i16*
  %183 = load atomic i16, i16* %182 monotonic, align 2
  %184 = icmp eq i16 %183, 94
  br i1 %184, label %185, label %191

185:                                              ; preds = %175
  %186 = add i64 %172, 7
  %187 = inttoptr i64 %186 to i32*
  %188 = load i32, i32* %187, align 4
  %189 = zext i32 %188 to i64
  %190 = or i64 %167, %189
  br label %191

191:                                              ; preds = %165, %175, %185
  %192 = phi i64 [ %190, %185 ], [ %172, %175 ], [ %172, %165 ]
  %193 = and i64 %192, -4294967296
  %194 = add i64 %192, 7
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i64
  %198 = or i64 %193, %197
  br label %200

199:                                              ; preds = %157
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #13
  unreachable

200:                                              ; preds = %191, %154, %143, %121, %100, %79, %68, %47, %36, %17
  %201 = phi i64 [ %24, %17 ], [ %38, %36 ], [ %59, %47 ], [ %70, %68 ], [ %91, %79 ], [ %112, %100 ], [ %133, %121 ], [ %145, %143 ], [ %156, %154 ], [ %198, %191 ]
  ret i64 %201
}

declare i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"*, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18SharedFunctionInfo27wasm_exported_function_dataEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  ret i64 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18SharedFunctionInfo21wasm_js_function_dataEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  ret i64 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18SharedFunctionInfo23wasm_capi_function_dataEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  ret i64 %9
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC2EPNS0_7IsolateENS0_6ScriptE(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nocapture, %"class.v8::internal::Isolate"*, i64) unnamed_addr #0 align 2 {
  %4 = add i64 %2, 23
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, -2
  %8 = icmp eq i32 %7, 6
  br i1 %8, label %9, label %18

9:                                                ; preds = %3
  %10 = and i64 %2, -262144
  %11 = or i64 %10, 16
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 16
  %14 = add i64 %13, -41416
  %15 = inttoptr i64 %14 to %"class.v8::internal::Isolate"*
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %15, i64 0, i32 0, i32 7, i32 0, i64 119
  %17 = load i64, i64* %16, align 8
  br label %25

18:                                               ; preds = %3
  %19 = add i64 %2, 43
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i64 %2, -4294967296
  %23 = zext i32 %21 to i64
  %24 = or i64 %22, %23
  br label %25

25:                                               ; preds = %9, %18
  %26 = phi i64 [ %17, %9 ], [ %24, %18 ]
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %28 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %27, align 8
  %29 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  %31 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %28, i64 %26) #12
  br label %45

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %36 = load i64*, i64** %35, align 8
  %37 = icmp eq i64* %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #12
  br label %40

40:                                               ; preds = %38, %32
  %41 = phi i64* [ %39, %38 ], [ %34, %32 ]
  %42 = ptrtoint i64* %41 to i64
  %43 = add i64 %42, 8
  %44 = inttoptr i64 %43 to i64*
  store i64* %44, i64** %33, align 8
  store i64 %26, i64* %41, align 8
  br label %45

45:                                               ; preds = %30, %40
  %46 = phi i64* [ %31, %30 ], [ %41, %40 ]
  %47 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 0, i32 0, i32 0
  store i64* %46, i64** %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 1
  store i32 0, i32* %48, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC2ENS0_6HandleINS0_14WeakFixedArrayEEE(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nocapture, i64*) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 0, i32 0, i32 0
  store i64* %1, i64** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal18SharedFunctionInfo14ScriptIterator4NextEv(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = ashr i32 %9, 1
  %11 = icmp slt i32 %3, %10
  br i1 %11, label %12, label %61

12:                                               ; preds = %1, %54
  %13 = phi i64 [ %55, %54 ], [ %6, %1 ]
  %14 = phi i32 [ %15, %54 ], [ %3, %1 ]
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 8
  %16 = shl i32 %14, 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 7
  %19 = add i64 %18, %13
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = zext i32 %21 to i64
  %23 = and i64 %22, 1
  %24 = icmp ne i64 %23, 0
  %25 = icmp ne i32 %21, 3
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %54

27:                                               ; preds = %12
  %28 = and i64 %13, -4294967296
  %29 = and i64 %22, 4294967293
  %30 = or i64 %29, %28
  %31 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %32 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %31, i64 0, i32 0, i32 1
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %31, i64 0, i32 1, i64 0
  br label %47

39:                                               ; preds = %33, %27
  %40 = and i64 %30, -262144
  %41 = or i64 %40, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 16
  %44 = add i64 %43, -41416
  %45 = inttoptr i64 %44 to %"class.v8::internal::Isolate"*
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %45, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %47

47:                                               ; preds = %37, %39
  %48 = phi i64* [ %46, %39 ], [ %38, %37 ]
  %49 = getelementptr inbounds i64, i64* %48, i64 4
  %50 = load i64, i64* %49, align 8
  %51 = trunc i64 %29 to i32
  %52 = trunc i64 %50 to i32
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %54, label %61

54:                                               ; preds = %12, %47
  %55 = load i64, i64* %5, align 8
  %56 = add i64 %55, 3
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = ashr i32 %58, 1
  %60 = icmp slt i32 %15, %59
  br i1 %60, label %12, label %61

61:                                               ; preds = %47, %54, %1
  %62 = phi i64 [ 0, %1 ], [ 0, %54 ], [ %30, %47 ]
  ret i64 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo14ScriptIterator5ResetEPNS0_7IsolateENS0_6ScriptE(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nocapture, %"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %4 = add i64 %2, 23
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, -2
  %8 = icmp eq i32 %7, 6
  br i1 %8, label %9, label %18

9:                                                ; preds = %3
  %10 = and i64 %2, -262144
  %11 = or i64 %10, 16
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 16
  %14 = add i64 %13, -41416
  %15 = inttoptr i64 %14 to %"class.v8::internal::Isolate"*
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %15, i64 0, i32 0, i32 7, i32 0, i64 119
  %17 = load i64, i64* %16, align 8
  br label %25

18:                                               ; preds = %3
  %19 = add i64 %2, 43
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i64 %2, -4294967296
  %23 = zext i32 %21 to i64
  %24 = or i64 %22, %23
  br label %25

25:                                               ; preds = %9, %18
  %26 = phi i64 [ %17, %9 ], [ %24, %18 ]
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %28 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %27, align 8
  %29 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  %31 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %28, i64 %26) #12
  br label %45

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %36 = load i64*, i64** %35, align 8
  %37 = icmp eq i64* %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #12
  br label %40

40:                                               ; preds = %38, %32
  %41 = phi i64* [ %39, %38 ], [ %34, %32 ]
  %42 = ptrtoint i64* %41 to i64
  %43 = add i64 %42, 8
  %44 = inttoptr i64 %43 to i64*
  store i64* %44, i64** %33, align 8
  store i64 %26, i64* %41, align 8
  br label %45

45:                                               ; preds = %30, %40
  %46 = phi i64* [ %31, %30 ], [ %41, %40 ]
  %47 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 0, i32 0, i32 0
  store i64* %46, i64** %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo::ScriptIterator", %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %0, i64 0, i32 1
  store i32 0, i32* %48, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo9SetScriptENS0_13ReadOnlyRootsENS0_10HeapObjectEib(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, i64*, i64, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %7 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, -4294967296
  %10 = add i64 %8, 15
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = add i64 %14, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %9, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 100
  br i1 %23, label %24, label %30

24:                                               ; preds = %5
  %25 = add i64 %14, 11
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %9, %28
  br label %30

30:                                               ; preds = %5, %24
  %31 = phi i64 [ %29, %24 ], [ %14, %5 ]
  %32 = trunc i64 %31 to i32
  %33 = trunc i64 %2 to i32
  %34 = icmp eq i32 %32, %33
  br i1 %34, label %411, label %35

35:                                               ; preds = %30
  br i1 %4, label %36, label %108

36:                                               ; preds = %35
  %37 = load i64, i64* %7, align 8
  %38 = and i64 %37, -4294967296
  %39 = add i64 %37, 3
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 acquire, align 4
  %42 = zext i32 %41 to i64
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %108, label %45

45:                                               ; preds = %36
  %46 = or i64 %38, %42
  %47 = add i64 %46, -1
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %38, %50
  %52 = add i64 %51, 7
  %53 = inttoptr i64 %52 to i16*
  %54 = load atomic i16, i16* %53 monotonic, align 2
  %55 = icmp eq i16 %54, 157
  br i1 %55, label %56, label %108

56:                                               ; preds = %45
  %57 = load i64, i64* %7, align 8
  %58 = and i64 %57, -4294967296
  %59 = add i64 %57, 3
  %60 = inttoptr i64 %59 to i32*
  %61 = load atomic i32, i32* %60 acquire, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %58, %62
  %64 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %64) #12
  %65 = and i64 %63, -262144
  %66 = or i64 %65, 16
  %67 = inttoptr i64 %66 to %"class.v8::internal::Heap"**
  %68 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %67, align 16
  call void @_ZN2v88internal4Heap24NotifyObjectLayoutChangeENS0_10HeapObjectERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS4_ILS5_1ELb0EEEEEENS0_23InvalidateRecordedSlotsE(%"class.v8::internal::Heap"* %68, i64 %63, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %6, i32 0) #12
  %69 = load i64, i64* %7, align 8
  %70 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %71 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %70, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %56
  %73 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %70, i64 0, i32 0, i32 1
  %74 = load i8, i8* %73, align 8, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %70, i64 0, i32 1, i64 0
  br label %86

78:                                               ; preds = %72, %56
  %79 = and i64 %69, -262144
  %80 = or i64 %79, 16
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81, align 16
  %83 = add i64 %82, -41416
  %84 = inttoptr i64 %83 to %"class.v8::internal::Isolate"*
  %85 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %84, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %86

86:                                               ; preds = %78, %76
  %87 = phi i64* [ %85, %78 ], [ %77, %76 ]
  %88 = getelementptr inbounds i64, i64* %87, i64 564
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %63, -1
  %91 = inttoptr i64 %90 to i32*
  %92 = trunc i64 %89 to i32
  store atomic volatile i32 %92, i32* %91 release, align 4
  %93 = icmp eq i32 %92, 0
  %94 = and i64 %89, 1
  %95 = icmp eq i64 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %105, label %97

97:                                               ; preds = %86
  %98 = or i64 %65, 8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = and i64 %100, 262144
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %105, label %103

103:                                              ; preds = %97
  %104 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %67, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %104, i64 %63, i64 0, i64 %89) #12
  br label %105

105:                                              ; preds = %86, %97, %103
  %106 = add i64 %63, 15
  %107 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %68, i64 %106, i32 4, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %64) #12
  br label %108

108:                                              ; preds = %36, %105, %45, %35
  %109 = and i64 %2, -4294967296
  %110 = add i64 %2, -1
  %111 = inttoptr i64 %110 to i32*
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = zext i32 %112 to i64
  %114 = or i64 %109, %113
  %115 = add i64 %114, 7
  %116 = inttoptr i64 %115 to i16*
  %117 = load atomic i16, i16* %116 monotonic, align 2
  %118 = icmp eq i16 %117, 112
  br i1 %118, label %119, label %182

119:                                              ; preds = %108
  %120 = add i64 %2, 23
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %122, -2
  %124 = icmp eq i32 %123, 6
  br i1 %124, label %125, label %134

125:                                              ; preds = %119
  %126 = and i64 %2, -262144
  %127 = or i64 %126, 16
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 16
  %130 = add i64 %129, -41416
  %131 = inttoptr i64 %130 to %"class.v8::internal::Isolate"*
  %132 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %131, i64 0, i32 0, i32 7, i32 0, i64 119
  %133 = load i64, i64* %132, align 8
  br label %140

134:                                              ; preds = %119
  %135 = add i64 %2, 43
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i64
  %139 = or i64 %109, %138
  br label %140

140:                                              ; preds = %125, %134
  %141 = phi i64 [ %133, %125 ], [ %139, %134 ]
  %142 = load i64, i64* %7, align 8
  %143 = shl i32 %3, 2
  %144 = sext i32 %143 to i64
  %145 = add nsw i64 %144, 7
  %146 = add i64 %145, %141
  %147 = inttoptr i64 %146 to i32*
  %148 = trunc i64 %142 to i32
  %149 = or i32 %148, 2
  store atomic volatile i32 %149, i32* %147 monotonic, align 4
  %150 = and i64 %142, 1
  %151 = icmp ne i64 %150, 0
  %152 = icmp ne i32 %149, 3
  %153 = and i1 %151, %152
  br i1 %153, label %154, label %325

154:                                              ; preds = %140
  %155 = and i64 %141, -262144
  %156 = or i64 %155, 8
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = and i64 %158, 262144
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %166, label %161

161:                                              ; preds = %154
  %162 = and i64 %142, -3
  %163 = or i64 %155, 16
  %164 = inttoptr i64 %163 to %"class.v8::internal::Heap"**
  %165 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %164, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %165, i64 %141, i64 %146, i64 %162) #12
  br label %166

166:                                              ; preds = %161, %154
  %167 = and i64 %142, -3
  %168 = and i64 %142, -262144
  %169 = or i64 %168, 8
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = and i64 %171, 24
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %325, label %174

174:                                              ; preds = %166
  %175 = and i64 %141, -262144
  %176 = or i64 %175, 8
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = and i64 %178, 24
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %325

181:                                              ; preds = %174
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %141, i64 %146, i64 %167) #12
  br label %325

182:                                              ; preds = %108
  %183 = load i64, i64* %7, align 8
  %184 = and i64 %183, -4294967296
  %185 = add i64 %183, 15
  %186 = inttoptr i64 %185 to i32*
  %187 = load atomic i32, i32* %186 acquire, align 4
  %188 = zext i32 %187 to i64
  %189 = or i64 %184, %188
  %190 = add i64 %189, -1
  %191 = inttoptr i64 %190 to i32*
  %192 = load atomic i32, i32* %191 monotonic, align 4
  %193 = zext i32 %192 to i64
  %194 = or i64 %184, %193
  %195 = add i64 %194, 7
  %196 = inttoptr i64 %195 to i16*
  %197 = load atomic i16, i16* %196 monotonic, align 2
  %198 = icmp eq i16 %197, 100
  br i1 %198, label %199, label %205

199:                                              ; preds = %182
  %200 = add i64 %189, 11
  %201 = inttoptr i64 %200 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  %204 = or i64 %184, %203
  br label %205

205:                                              ; preds = %182, %199
  %206 = phi i64 [ %204, %199 ], [ %189, %182 ]
  %207 = add i64 %206, 23
  %208 = inttoptr i64 %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = and i32 %209, -2
  %211 = icmp eq i32 %210, 6
  br i1 %211, label %212, label %221

212:                                              ; preds = %205
  %213 = and i64 %206, -262144
  %214 = or i64 %213, 16
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215, align 16
  %217 = add i64 %216, -41416
  %218 = inttoptr i64 %217 to %"class.v8::internal::Isolate"*
  %219 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %218, i64 0, i32 0, i32 7, i32 0, i64 119
  %220 = load i64, i64* %219, align 8
  br label %228

221:                                              ; preds = %205
  %222 = add i64 %206, 43
  %223 = inttoptr i64 %222 to i32*
  %224 = load i32, i32* %223, align 4
  %225 = and i64 %206, -4294967296
  %226 = zext i32 %224 to i64
  %227 = or i64 %225, %226
  br label %228

228:                                              ; preds = %212, %221
  %229 = phi i64 [ %220, %212 ], [ %227, %221 ]
  %230 = add i64 %229, 3
  %231 = inttoptr i64 %230 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = ashr i32 %232, 1
  %234 = icmp sgt i32 %233, %3
  br i1 %234, label %235, label %325

235:                                              ; preds = %228
  br i1 %211, label %236, label %245

236:                                              ; preds = %235
  %237 = and i64 %206, -262144
  %238 = or i64 %237, 16
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239, align 16
  %241 = add i64 %240, -41416
  %242 = inttoptr i64 %241 to %"class.v8::internal::Isolate"*
  %243 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %242, i64 0, i32 0, i32 7, i32 0, i64 119
  %244 = load i64, i64* %243, align 8
  br label %252

245:                                              ; preds = %235
  %246 = add i64 %206, 43
  %247 = inttoptr i64 %246 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = and i64 %206, -4294967296
  %250 = zext i32 %248 to i64
  %251 = or i64 %249, %250
  br label %252

252:                                              ; preds = %236, %245
  %253 = phi i64 [ %244, %236 ], [ %251, %245 ]
  %254 = shl i32 %3, 2
  %255 = sext i32 %254 to i64
  %256 = add nsw i64 %255, 7
  %257 = add i64 %253, %256
  %258 = inttoptr i64 %257 to i32*
  %259 = load atomic i32, i32* %258 monotonic, align 4
  %260 = and i32 %259, 3
  %261 = icmp eq i32 %260, 3
  %262 = icmp ne i32 %259, 3
  %263 = and i1 %262, %261
  br i1 %263, label %264, label %325

264:                                              ; preds = %252
  %265 = and i32 %259, -3
  %266 = load i64, i64* %7, align 8
  %267 = trunc i64 %266 to i32
  %268 = icmp eq i32 %265, %267
  br i1 %268, label %269, label %325

269:                                              ; preds = %264
  br i1 %211, label %270, label %279

270:                                              ; preds = %269
  %271 = and i64 %206, -262144
  %272 = or i64 %271, 16
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273, align 16
  %275 = add i64 %274, -41416
  %276 = inttoptr i64 %275 to %"class.v8::internal::Isolate"*
  %277 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %276, i64 0, i32 0, i32 7, i32 0, i64 119
  %278 = load i64, i64* %277, align 8
  br label %286

279:                                              ; preds = %269
  %280 = add i64 %206, 43
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = and i64 %206, -4294967296
  %284 = zext i32 %282 to i64
  %285 = or i64 %283, %284
  br label %286

286:                                              ; preds = %270, %279
  %287 = phi i64 [ %278, %270 ], [ %285, %279 ]
  %288 = getelementptr inbounds i64, i64* %1, i64 4
  %289 = load i64, i64* %288, align 8
  %290 = add i64 %287, %256
  %291 = inttoptr i64 %290 to i32*
  %292 = trunc i64 %289 to i32
  store atomic volatile i32 %292, i32* %291 monotonic, align 4
  %293 = and i64 %289, 1
  %294 = icmp ne i64 %293, 0
  %295 = icmp ne i32 %292, 3
  %296 = and i1 %295, %294
  br i1 %296, label %297, label %325

297:                                              ; preds = %286
  %298 = and i64 %287, -262144
  %299 = or i64 %298, 8
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = and i64 %301, 262144
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %309, label %304

304:                                              ; preds = %297
  %305 = and i64 %289, -3
  %306 = or i64 %298, 16
  %307 = inttoptr i64 %306 to %"class.v8::internal::Heap"**
  %308 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %307, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %308, i64 %287, i64 %290, i64 %305) #12
  br label %309

309:                                              ; preds = %304, %297
  %310 = and i64 %289, -3
  %311 = and i64 %289, -262144
  %312 = or i64 %311, 8
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = and i64 %314, 24
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %325, label %317

317:                                              ; preds = %309
  %318 = and i64 %287, -262144
  %319 = or i64 %318, 8
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = and i64 %321, 24
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %325

324:                                              ; preds = %317
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %287, i64 %290, i64 %310) #12
  br label %325

325:                                              ; preds = %286, %140, %228, %324, %317, %309, %252, %264, %181, %174, %166
  %326 = load i64, i64* %7, align 8
  %327 = and i64 %326, -4294967296
  %328 = add i64 %326, 15
  %329 = inttoptr i64 %328 to i32*
  %330 = load atomic i32, i32* %329 acquire, align 4
  %331 = zext i32 %330 to i64
  %332 = or i64 %327, %331
  %333 = add i64 %332, -1
  %334 = inttoptr i64 %333 to i32*
  %335 = load atomic i32, i32* %334 monotonic, align 4
  %336 = zext i32 %335 to i64
  %337 = or i64 %327, %336
  %338 = add i64 %337, 7
  %339 = inttoptr i64 %338 to i16*
  %340 = load atomic i16, i16* %339 monotonic, align 2
  %341 = icmp eq i16 %340, 100
  br i1 %341, label %342, label %373

342:                                              ; preds = %325
  %343 = add i64 %332, 11
  %344 = inttoptr i64 %343 to i32*
  store atomic volatile i32 %33, i32* %344 monotonic, align 4
  %345 = and i64 %2, 1
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %358, label %347

347:                                              ; preds = %342
  %348 = and i64 %332, -262144
  %349 = or i64 %348, 8
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 262144
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %358, label %354

354:                                              ; preds = %347
  %355 = or i64 %348, 16
  %356 = inttoptr i64 %355 to %"class.v8::internal::Heap"**
  %357 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %356, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %357, i64 %332, i64 %343, i64 %2) #12
  br label %358

358:                                              ; preds = %354, %347, %342
  %359 = and i64 %2, -262144
  %360 = or i64 %359, 8
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = and i64 %362, 24
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %411, label %365

365:                                              ; preds = %358
  %366 = and i64 %332, -262144
  %367 = or i64 %366, 8
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = and i64 %369, 24
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %372, label %411

372:                                              ; preds = %365
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %332, i64 %343, i64 %2) #12
  br label %411

373:                                              ; preds = %325
  %374 = load i64, i64* %7, align 8
  %375 = add i64 %374, 15
  %376 = inttoptr i64 %375 to i32*
  store atomic volatile i32 %33, i32* %376 release, align 4
  %377 = load i64, i64* %7, align 8
  %378 = add i64 %377, 15
  %379 = and i64 %2, 1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %394, label %381

381:                                              ; preds = %373
  %382 = and i64 %377, -262144
  %383 = or i64 %382, 8
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384, align 8
  %386 = and i64 %385, 262144
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %394, label %388

388:                                              ; preds = %381
  %389 = or i64 %382, 16
  %390 = inttoptr i64 %389 to %"class.v8::internal::Heap"**
  %391 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %390, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %391, i64 %377, i64 %378, i64 %2) #12
  %392 = load i64, i64* %7, align 8
  %393 = add i64 %392, 15
  br label %394

394:                                              ; preds = %388, %381, %373
  %395 = phi i64 [ %393, %388 ], [ %378, %381 ], [ %378, %373 ]
  %396 = phi i64 [ %392, %388 ], [ %377, %381 ], [ %377, %373 ]
  %397 = and i64 %2, -262144
  %398 = or i64 %397, 8
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = and i64 %400, 24
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %411, label %403

403:                                              ; preds = %394
  %404 = and i64 %396, -262144
  %405 = or i64 %404, 8
  %406 = inttoptr i64 %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = and i64 %407, 24
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %410, label %411

410:                                              ; preds = %403
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %396, i64 %395, i64 %2) #12
  br label %411

411:                                              ; preds = %358, %365, %372, %394, %403, %410, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal18SharedFunctionInfo12HasBreakInfoEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::DebugInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %31

20:                                               ; preds = %1
  %21 = bitcast %"class.v8::internal::DebugInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  %22 = load i64, i64* %3, align 8
  %23 = and i64 %22, -4294967296
  %24 = add i64 %22, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = getelementptr inbounds %"class.v8::internal::DebugInfo", %"class.v8::internal::DebugInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %28, i64* %29, align 8
  %30 = call zeroext i1 @_ZNK2v88internal9DebugInfo12HasBreakInfoEv(%"class.v8::internal::DebugInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %31

31:                                               ; preds = %1, %20
  %32 = phi i1 [ %30, %20 ], [ false, %1 ]
  ret i1 %32
}

declare zeroext i1 @_ZNK2v88internal9DebugInfo12HasBreakInfoEv(%"class.v8::internal::DebugInfo"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal18SharedFunctionInfo12BreakAtEntryEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::DebugInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %31

20:                                               ; preds = %1
  %21 = bitcast %"class.v8::internal::DebugInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  %22 = load i64, i64* %3, align 8
  %23 = and i64 %22, -4294967296
  %24 = add i64 %22, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = getelementptr inbounds %"class.v8::internal::DebugInfo", %"class.v8::internal::DebugInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %28, i64* %29, align 8
  %30 = call zeroext i1 @_ZNK2v88internal9DebugInfo12BreakAtEntryEv(%"class.v8::internal::DebugInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %31

31:                                               ; preds = %1, %20
  %32 = phi i1 [ %30, %20 ], [ false, %1 ]
  ret i1 %32
}

declare zeroext i1 @_ZNK2v88internal9DebugInfo12BreakAtEntryEv(%"class.v8::internal::DebugInfo"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal18SharedFunctionInfo15HasCoverageInfoEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::DebugInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %31

20:                                               ; preds = %1
  %21 = bitcast %"class.v8::internal::DebugInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  %22 = load i64, i64* %3, align 8
  %23 = and i64 %22, -4294967296
  %24 = add i64 %22, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = getelementptr inbounds %"class.v8::internal::DebugInfo", %"class.v8::internal::DebugInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %28, i64* %29, align 8
  %30 = call zeroext i1 @_ZNK2v88internal9DebugInfo15HasCoverageInfoEv(%"class.v8::internal::DebugInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %31

31:                                               ; preds = %1, %20
  %32 = phi i1 [ %30, %20 ], [ false, %1 ]
  ret i1 %32
}

declare zeroext i1 @_ZNK2v88internal9DebugInfo15HasCoverageInfoEv(%"class.v8::internal::DebugInfo"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18SharedFunctionInfo15GetCoverageInfoEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 15
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 31
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %4, %13
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal18SharedFunctionInfo13DebugNameCStrEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::String", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %40, label %12

12:                                               ; preds = %1
  %13 = or i64 %5, %9
  %14 = add i64 %13, -1
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = icmp eq i16 %21, 73
  br i1 %22, label %23, label %40

23:                                               ; preds = %12
  %24 = load i64, i64* %3, align 8
  %25 = and i64 %24, -4294967296
  %26 = add i64 %24, 3
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 acquire, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %25, %29
  %31 = add i64 %30, 27
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %25, %34
  %36 = add i64 %35, 3
  %37 = inttoptr i64 %36 to %"class.v8::internal::Signature"**
  %38 = load %"class.v8::internal::Signature"*, %"class.v8::internal::Signature"** %37, align 1
  %39 = tail call i8* @_ZN2v88internal20WasmExportedFunction12GetDebugNameEPKNS0_9SignatureINS0_4wasm9ValueTypeEEE(%"class.v8::internal::Signature"* %38) #12
  br label %52

40:                                               ; preds = %1, %12
  %41 = bitcast %"class.v8::internal::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #12
  %42 = tail call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  %43 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %42, i64* %43, align 8
  %44 = add i64 %42, 7
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %40
  %49 = tail call i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  store i64 %49, i64* %43, align 8
  br label %50

50:                                               ; preds = %48, %40
  %51 = call i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"* nonnull %2, i32 1, i32 1, i32* null) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #12
  br label %52

52:                                               ; preds = %50, %23
  %53 = phi i8* [ %39, %23 ], [ %51, %50 ]
  ret i8* %53
}

declare i8* @_ZN2v88internal20WasmExportedFunction12GetDebugNameEPKNS0_9SignatureINS0_4wasm9ValueTypeEEE(%"class.v8::internal::Signature"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #6 comdat align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = alloca %"class.v8::internal::ScopeInfo", align 8
  %4 = alloca %"class.v8::internal::ScopeInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, -4294967296
  %8 = add i64 %6, 7
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = and i64 %11, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %1
  %16 = add i64 %12, -1
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %7, %19
  %21 = add i64 %20, 7
  %22 = inttoptr i64 %21 to i16*
  %23 = load atomic i16, i16* %22 monotonic, align 2
  %24 = icmp eq i16 %23, 178
  br i1 %24, label %25, label %29

25:                                               ; preds = %15
  %26 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #12
  %27 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %27, align 8
  %28 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #12
  br i1 %28, label %53, label %31

29:                                               ; preds = %1, %15
  %30 = icmp eq i32 %10, 0
  br i1 %30, label %31, label %53

31:                                               ; preds = %29, %25
  %32 = load i64, i64* %5, align 8
  %33 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %34 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 0, i32 1
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 1, i64 0
  br label %49

41:                                               ; preds = %35, %31
  %42 = and i64 %32, -262144
  %43 = or i64 %42, 16
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 16
  %46 = add i64 %45, -41416
  %47 = inttoptr i64 %46 to %"class.v8::internal::Isolate"*
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %47, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %49

49:                                               ; preds = %39, %41
  %50 = phi i64* [ %48, %41 ], [ %40, %39 ]
  %51 = getelementptr inbounds i64, i64* %50, i64 9
  %52 = load i64, i64* %51, align 8
  br label %103

53:                                               ; preds = %29, %25
  %54 = load i64, i64* %5, align 8
  %55 = and i64 %54, -4294967296
  %56 = add i64 %54, 7
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 acquire, align 4
  %59 = zext i32 %58 to i64
  %60 = or i64 %55, %59
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %103, label %63

63:                                               ; preds = %53
  %64 = add i64 %60, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %55, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 178
  br i1 %72, label %73, label %103

73:                                               ; preds = %63
  %74 = bitcast %"class.v8::internal::ScopeInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #12
  %75 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %75, align 8
  %76 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #12
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  %78 = bitcast %"class.v8::internal::ScopeInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #12
  %79 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %79, align 8
  %80 = call i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #12
  br label %103

81:                                               ; preds = %73
  %82 = load i64, i64* %5, align 8
  %83 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %84 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 0, i32 1
  %87 = load i8, i8* %86, align 8, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 1, i64 0
  br label %99

91:                                               ; preds = %85, %81
  %92 = and i64 %82, -262144
  %93 = or i64 %92, 16
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 16
  %96 = add i64 %95, -41416
  %97 = inttoptr i64 %96 to %"class.v8::internal::Isolate"*
  %98 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %97, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %99

99:                                               ; preds = %89, %91
  %100 = phi i64* [ %98, %91 ], [ %90, %89 ]
  %101 = getelementptr inbounds i64, i64* %100, i64 9
  %102 = load i64, i64* %101, align 8
  br label %103

103:                                              ; preds = %53, %77, %99, %63, %49
  %104 = phi i64 [ %52, %49 ], [ %80, %77 ], [ %102, %99 ], [ %60, %63 ], [ %60, %53 ]
  ret i64 %104
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #6 comdat align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 7
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = and i64 %9, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %44, label %13

13:                                               ; preds = %1
  %14 = add i64 %10, -1
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = icmp eq i16 %21, 178
  br i1 %22, label %23, label %44

23:                                               ; preds = %13
  %24 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %10, i64* %25, align 8
  %26 = call zeroext i1 @_ZNK2v88internal9ScopeInfo23HasInferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  br i1 %26, label %27, label %42

27:                                               ; preds = %23
  %28 = call i64 @_ZNK2v88internal9ScopeInfo20InferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %42, label %31

31:                                               ; preds = %27
  %32 = and i64 %28, -4294967296
  %33 = add i64 %28, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %32, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp ult i16 %40, 64
  br i1 %41, label %43, label %42

42:                                               ; preds = %23, %31, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  br label %78

43:                                               ; preds = %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  br label %100

44:                                               ; preds = %1, %13
  %45 = load i64, i64* %3, align 8
  %46 = and i64 %45, -4294967296
  %47 = add i64 %45, 3
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 acquire, align 4
  %50 = zext i32 %49 to i64
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %78, label %53

53:                                               ; preds = %44
  %54 = or i64 %46, %50
  %55 = add i64 %54, -1
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %46, %58
  %60 = add i64 %59, 7
  %61 = inttoptr i64 %60 to i16*
  %62 = load atomic i16, i16* %61 monotonic, align 2
  %63 = add i16 %62, -157
  %64 = icmp ult i16 %63, 2
  br i1 %64, label %65, label %78

65:                                               ; preds = %53
  %66 = load i64, i64* %3, align 8
  %67 = and i64 %66, -4294967296
  %68 = add i64 %66, 3
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 acquire, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %67, %71
  %73 = add i64 %72, 3
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %67, %76
  br label %100

78:                                               ; preds = %44, %42, %53
  %79 = load i64, i64* %3, align 8
  %80 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %81 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %80, null
  br i1 %81, label %88, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %80, i64 0, i32 0, i32 1
  %84 = load i8, i8* %83, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %80, i64 0, i32 1, i64 0
  br label %96

88:                                               ; preds = %82, %78
  %89 = and i64 %79, -262144
  %90 = or i64 %89, 16
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 16
  %93 = add i64 %92, -41416
  %94 = inttoptr i64 %93 to %"class.v8::internal::Isolate"*
  %95 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %94, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %96

96:                                               ; preds = %86, %88
  %97 = phi i64* [ %95, %88 ], [ %87, %86 ]
  %98 = getelementptr inbounds i64, i64* %97, i64 9
  %99 = load i64, i64* %98, align 8
  br label %100

100:                                              ; preds = %43, %96, %65
  %101 = phi i64 [ %99, %96 ], [ %28, %43 ], [ %77, %65 ]
  ret i64 %101
}

declare i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"*, i32, i32, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Vector.1168", align 8
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %6 = load i64, i64* %0, align 8
  %7 = and i64 %6, -4294967296
  %8 = add i64 %6, 3
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = zext i32 %10 to i64
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %1
  %15 = or i64 %7, %11
  %16 = add i64 %15, -1
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %7, %19
  %21 = add i64 %20, 7
  %22 = inttoptr i64 %21 to i16*
  %23 = load atomic i16, i16* %22 monotonic, align 2
  %24 = icmp eq i16 %23, 73
  br i1 %24, label %25, label %48

25:                                               ; preds = %14
  %26 = load i64, i64* %0, align 8
  %27 = and i64 %26, -262144
  %28 = or i64 %27, 16
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 16
  %31 = add i64 %30, -41416
  %32 = inttoptr i64 %31 to %"class.v8::internal::Factory"*
  %33 = bitcast %"class.v8::internal::Vector.1168"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #12
  %34 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %26, i64* %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %37 = call i8* @_ZN2v88internal18SharedFunctionInfo13DebugNameCStrEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %36)
  %38 = call i64 @strlen(i8* %37) #14
  %39 = getelementptr inbounds %"class.v8::internal::Vector.1168", %"class.v8::internal::Vector.1168"* %2, i64 0, i32 0
  store i8* %37, i8** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Vector.1168", %"class.v8::internal::Vector.1168"* %2, i64 0, i32 1
  store i64 %38, i64* %40, align 8
  %41 = call i64* @_ZN2v88internal7Factory17NewStringFromUtf8ERKNS0_6VectorIKcEENS0_14AllocationTypeE(%"class.v8::internal::Factory"* %32, %"class.v8::internal::Vector.1168"* nonnull dereferenceable(16) %2, i8 zeroext 0) #12
  %42 = icmp eq i64* %41, null
  br i1 %42, label %43, label %44, !prof !3

43:                                               ; preds = %25
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #13
  unreachable

44:                                               ; preds = %25
  %45 = icmp eq i8* %37, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %44
  call void @_ZdaPv(i8* nonnull %37) #15
  br label %47

47:                                               ; preds = %44, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #12
  br label %91

48:                                               ; preds = %1, %14
  %49 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #12
  %50 = load i64, i64* %0, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %53 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #12
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %48
  %59 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #12
  %60 = load i64, i64* %0, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0
  %63 = call i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %62)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #12
  br label %64

64:                                               ; preds = %58, %48
  %65 = phi i64 [ %63, %58 ], [ %53, %48 ]
  %66 = load i64, i64* %0, align 8
  %67 = and i64 %66, -262144
  %68 = or i64 %67, 16
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 16
  %71 = add i64 %70, -41416
  %72 = inttoptr i64 %71 to %"class.v8::internal::Isolate"*
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %72, i64 0, i32 31, i32 4
  %74 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %73, align 8
  %75 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %64
  %77 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %74, i64 %65) #12
  br label %91

78:                                               ; preds = %64
  %79 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %72, i64 0, i32 31, i32 0
  %80 = load i64*, i64** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %72, i64 0, i32 31, i32 1
  %82 = load i64*, i64** %81, align 8
  %83 = icmp eq i64* %80, %82
  br i1 %83, label %84, label %86

84:                                               ; preds = %78
  %85 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %72) #12
  br label %86

86:                                               ; preds = %84, %78
  %87 = phi i64* [ %85, %84 ], [ %80, %78 ]
  %88 = ptrtoint i64* %87 to i64
  %89 = add i64 %88, 8
  %90 = inttoptr i64 %89 to i64*
  store i64* %90, i64** %79, align 8
  store i64 %65, i64* %87, align 8
  br label %91

91:                                               ; preds = %86, %76, %47
  %92 = phi i64* [ %41, %47 ], [ %77, %76 ], [ %87, %86 ]
  ret i64* %92
}

declare i64* @_ZN2v88internal7Factory17NewStringFromUtf8ERKNS0_6VectorIKcEENS0_14AllocationTypeE(%"class.v8::internal::Factory"*, %"class.v8::internal::Vector.1168"* dereferenceable(16), i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal18SharedFunctionInfo12PassesFilterEPKc(%"class.v8::internal::SharedFunctionInfo"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #14
  %4 = tail call i8* @_ZN2v88internal18SharedFunctionInfo13DebugNameCStrEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  %5 = tail call i64 @strlen(i8* %4) #14
  %6 = tail call zeroext i1 @_ZN2v88internal12PassesFilterENS0_6VectorIKcEES3_(i8* %4, i64 %5, i8* %1, i64 %3) #12
  %7 = icmp eq i8* %4, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %2
  tail call void @_ZdaPv(i8* nonnull %4) #15
  br label %9

9:                                                ; preds = %2, %8
  ret i1 %6
}

declare zeroext i1 @_ZN2v88internal12PassesFilterENS0_6VectorIKcEES3_(i8*, i64, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %5 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %4, i64 0, i32 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %4, i64 0, i32 1, i64 0
  br label %20

12:                                               ; preds = %6, %1
  %13 = and i64 %3, -262144
  %14 = or i64 %13, 16
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 16
  %17 = add i64 %16, -41416
  %18 = inttoptr i64 %17 to %"class.v8::internal::Isolate"*
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %20

20:                                               ; preds = %10, %12
  %21 = phi i64* [ %19, %12 ], [ %11, %10 ]
  %22 = and i64 %3, -4294967296
  %23 = add i64 %3, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, 7
  %34 = inttoptr i64 %33 to i16*
  %35 = load atomic i16, i16* %34 monotonic, align 2
  %36 = icmp eq i16 %35, 100
  br i1 %36, label %37, label %43

37:                                               ; preds = %20
  %38 = add i64 %27, 11
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %22, %41
  br label %43

43:                                               ; preds = %20, %37
  %44 = phi i64 [ %42, %37 ], [ %27, %20 ]
  %45 = getelementptr inbounds i64, i64* %21, i64 4
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %44 to i32
  %48 = trunc i64 %46 to i32
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %116, label %50

50:                                               ; preds = %43
  %51 = load i64, i64* %2, align 8
  %52 = and i64 %51, -4294967296
  %53 = add i64 %51, 15
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 acquire, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %52, %56
  %58 = add i64 %57, -1
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %52, %61
  %63 = add i64 %62, 7
  %64 = inttoptr i64 %63 to i16*
  %65 = load atomic i16, i16* %64 monotonic, align 2
  %66 = icmp eq i16 %65, 100
  br i1 %66, label %67, label %73

67:                                               ; preds = %50
  %68 = add i64 %57, 11
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %52, %71
  br label %73

73:                                               ; preds = %50, %67
  %74 = phi i64 [ %72, %67 ], [ %57, %50 ]
  %75 = add i64 %74, 3
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = load i64, i64* %45, align 8
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %77, %79
  br i1 %80, label %116, label %81

81:                                               ; preds = %73
  %82 = load i64, i64* %2, align 8
  %83 = and i64 %82, -4294967296
  %84 = add i64 %82, 15
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 acquire, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, -1
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %83, %92
  %94 = add i64 %93, 7
  %95 = inttoptr i64 %94 to i16*
  %96 = load atomic i16, i16* %95 monotonic, align 2
  %97 = icmp eq i16 %96, 100
  br i1 %97, label %98, label %104

98:                                               ; preds = %81
  %99 = add i64 %88, 11
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %83, %102
  br label %104

104:                                              ; preds = %81, %98
  %105 = phi i64 [ %103, %98 ], [ %88, %81 ]
  %106 = and i64 %105, -4294967296
  %107 = add i64 %105, 3
  %108 = inttoptr i64 %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = or i64 %106, %110
  %112 = add i64 %111, 7
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = icmp sgt i32 %114, 0
  br label %116

116:                                              ; preds = %104, %73, %43
  %117 = phi i1 [ false, %73 ], [ false, %43 ], [ %115, %104 ]
  ret i1 %117
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo23DiscardCompiledMetadataEPNS0_7IsolateENSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEE(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*, %"class.std::__1::function"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::HeapObject", align 8
  %5 = alloca %"class.v8::internal::CompressedObjectSlot", align 8
  %6 = alloca %"class.v8::internal::HeapObject", align 8
  %7 = alloca %"class.v8::internal::ScopeInfo", align 8
  %8 = alloca %"class.v8::internal::ScopeInfo", align 8
  %9 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, -4294967296
  %12 = add i64 %10, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 acquire, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %11, %15
  %17 = icmp eq i32 %14, 170
  br i1 %17, label %228, label %18

18:                                               ; preds = %3
  %19 = and i64 %15, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %18
  %22 = add i64 %16, -1
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %11, %25
  %27 = add i64 %26, 7
  %28 = inttoptr i64 %27 to i16*
  %29 = load atomic i16, i16* %28 monotonic, align 2
  %30 = add i16 %29, -157
  %31 = icmp ugt i16 %30, 1
  br i1 %31, label %32, label %228

32:                                               ; preds = %18, %21
  %33 = load i8, i8* @_ZN2v88internal25FLAG_trace_flush_bytecodeE, align 1, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %77, label %35

35:                                               ; preds = %32
  %36 = load i64, i64* %9, align 8
  %37 = and i64 %36, -262144
  %38 = or i64 %37, 16
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 16
  %41 = add i64 %40, -41416
  %42 = inttoptr i64 %41 to %"class.v8::internal::Isolate"*
  %43 = tail call %"class.v8::internal::CodeTracer"* @_ZN2v88internal7Isolate13GetCodeTracerEv(%"class.v8::internal::Isolate"* %42) #12
  %44 = load i8, i8* @_ZN2v88internal25FLAG_redirect_code_tracesE, align 1, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %43, i64 0, i32 1
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %46, align 8
  br i1 %45, label %61, label %48

48:                                               ; preds = %35
  %49 = icmp eq %struct._IO_FILE* %47, null
  br i1 %49, label %50, label %56

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %43, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = tail call %struct._IO_FILE* @_ZN2v84base2OS5FOpenEPKcS3_(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #12
  store %struct._IO_FILE* %53, %struct._IO_FILE** %46, align 8
  %54 = icmp eq %struct._IO_FILE* %53, null
  br i1 %54, label %55, label %56, !prof !3

55:                                               ; preds = %50
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)) #13
  unreachable

56:                                               ; preds = %50, %48
  %57 = phi %struct._IO_FILE* [ %53, %50 ], [ %47, %48 ]
  %58 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %43, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %58, align 8
  br label %61

61:                                               ; preds = %35, %56
  %62 = phi %struct._IO_FILE* [ %57, %56 ], [ %47, %35 ]
  %63 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %43, i64 0, i32 1
  tail call void (%struct._IO_FILE*, i8*, ...) @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE* %62, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0)) #12
  %64 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %63, align 8
  tail call void @_ZNK2v88internal6Object10ShortPrintEP8_IO_FILE(%"class.v8::internal::Object"* %64, %struct._IO_FILE* %65) #12
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %63, align 8
  tail call void (%struct._IO_FILE*, i8*, ...) @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #12
  %67 = load i8, i8* @_ZN2v88internal25FLAG_redirect_code_tracesE, align 1, !range !2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %43, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = add nsw i32 %71, -1
  store i32 %72, i32* %70, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %69
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %63, align 8
  %76 = tail call i32 @fclose(%struct._IO_FILE* %75) #12
  store %struct._IO_FILE* null, %struct._IO_FILE** %63, align 8
  br label %77

77:                                               ; preds = %74, %69, %61, %32
  %78 = bitcast %"class.v8::internal::ScopeInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #12
  %79 = load i64, i64* %9, align 8
  %80 = and i64 %79, -4294967296
  %81 = add i64 %79, 7
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 acquire, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = and i64 %84, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %98, label %88

88:                                               ; preds = %77
  %89 = add i64 %85, -1
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %80, %92
  %94 = add i64 %93, 7
  %95 = inttoptr i64 %94 to i16*
  %96 = load atomic i16, i16* %95 monotonic, align 2
  %97 = icmp eq i16 %96, 178
  br i1 %97, label %120, label %98

98:                                               ; preds = %88, %77
  %99 = load i64, i64* %9, align 8
  %100 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %101 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %100, null
  br i1 %101, label %108, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %100, i64 0, i32 0, i32 1
  %104 = load i8, i8* %103, align 8, !range !2
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %100, i64 0, i32 1, i64 0
  br label %116

108:                                              ; preds = %102, %98
  %109 = and i64 %99, -262144
  %110 = or i64 %109, 16
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111, align 16
  %113 = add i64 %112, -41416
  %114 = inttoptr i64 %113 to %"class.v8::internal::Isolate"*
  %115 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %114, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %116

116:                                              ; preds = %108, %106
  %117 = phi i64* [ %115, %108 ], [ %107, %106 ]
  %118 = getelementptr inbounds i64, i64* %117, i64 28
  %119 = load i64, i64* %118, align 8
  br label %120

120:                                              ; preds = %88, %116
  %121 = phi i64 [ %119, %116 ], [ %85, %88 ]
  %122 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %121, i64* %122, align 8
  %123 = call zeroext i1 @_ZNK2v88internal9ScopeInfo17HasOuterScopeInfoEv(%"class.v8::internal::ScopeInfo"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #12
  br i1 %123, label %124, label %171

124:                                              ; preds = %120
  %125 = bitcast %"class.v8::internal::ScopeInfo"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #12
  %126 = load i64, i64* %9, align 8
  %127 = and i64 %126, -4294967296
  %128 = add i64 %126, 7
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 acquire, align 4
  %131 = zext i32 %130 to i64
  %132 = or i64 %127, %131
  %133 = and i64 %131, 1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %124
  %136 = add i64 %132, -1
  %137 = inttoptr i64 %136 to i32*
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = zext i32 %138 to i64
  %140 = or i64 %127, %139
  %141 = add i64 %140, 7
  %142 = inttoptr i64 %141 to i16*
  %143 = load atomic i16, i16* %142 monotonic, align 2
  %144 = icmp eq i16 %143, 178
  br i1 %144, label %167, label %145

145:                                              ; preds = %135, %124
  %146 = load i64, i64* %9, align 8
  %147 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %148 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %147, null
  br i1 %148, label %155, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %147, i64 0, i32 0, i32 1
  %151 = load i8, i8* %150, align 8, !range !2
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %147, i64 0, i32 1, i64 0
  br label %163

155:                                              ; preds = %149, %145
  %156 = and i64 %146, -262144
  %157 = or i64 %156, 16
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158, align 16
  %160 = add i64 %159, -41416
  %161 = inttoptr i64 %160 to %"class.v8::internal::Isolate"*
  %162 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %161, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %163

163:                                              ; preds = %155, %153
  %164 = phi i64* [ %162, %155 ], [ %154, %153 ]
  %165 = getelementptr inbounds i64, i64* %164, i64 28
  %166 = load i64, i64* %165, align 8
  br label %167

167:                                              ; preds = %135, %163
  %168 = phi i64 [ %166, %163 ], [ %132, %135 ]
  %169 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %168, i64* %169, align 8
  %170 = call i64 @_ZNK2v88internal9ScopeInfo14OuterScopeInfoEv(%"class.v8::internal::ScopeInfo"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #12
  br label %174

171:                                              ; preds = %120
  %172 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %173 = load i64, i64* %172, align 8
  br label %174

174:                                              ; preds = %171, %167
  %175 = phi i64 [ %170, %167 ], [ %173, %171 ]
  %176 = load i64, i64* %9, align 8
  %177 = add i64 %176, 11
  %178 = inttoptr i64 %177 to i32*
  %179 = trunc i64 %175 to i32
  store atomic volatile i32 %179, i32* %178 monotonic, align 4
  %180 = load i64, i64* %9, align 8
  %181 = add i64 %180, 11
  %182 = and i64 %175, 1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %197, label %184

184:                                              ; preds = %174
  %185 = and i64 %180, -262144
  %186 = or i64 %185, 8
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = and i64 %188, 262144
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %197, label %191

191:                                              ; preds = %184
  %192 = or i64 %185, 16
  %193 = inttoptr i64 %192 to %"class.v8::internal::Heap"**
  %194 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %193, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %194, i64 %180, i64 %181, i64 %175) #12
  %195 = load i64, i64* %9, align 8
  %196 = add i64 %195, 11
  br label %197

197:                                              ; preds = %191, %184, %174
  %198 = phi i64 [ %196, %191 ], [ %181, %184 ], [ %181, %174 ]
  %199 = phi i64 [ %195, %191 ], [ %180, %184 ], [ %180, %174 ]
  %200 = and i64 %175, -262144
  %201 = or i64 %200, 8
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = and i64 %203, 24
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %216, label %206

206:                                              ; preds = %197
  %207 = and i64 %199, -262144
  %208 = or i64 %207, 8
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = and i64 %210, 24
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %206
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %199, i64 %198, i64 %175) #12
  %214 = load i64, i64* %9, align 8
  %215 = add i64 %214, 11
  br label %216

216:                                              ; preds = %197, %206, %213
  %217 = phi i64 [ %198, %197 ], [ %198, %206 ], [ %215, %213 ]
  %218 = phi i64 [ %199, %197 ], [ %199, %206 ], [ %214, %213 ]
  %219 = bitcast %"class.v8::internal::HeapObject"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %219)
  %220 = bitcast %"class.v8::internal::CompressedObjectSlot"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220)
  %221 = bitcast %"class.v8::internal::HeapObject"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221)
  %222 = getelementptr inbounds %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject"* %4, i64 0, i32 0, i32 0, i32 0
  store i64 %218, i64* %222, align 8
  %223 = getelementptr inbounds %"class.v8::internal::CompressedObjectSlot", %"class.v8::internal::CompressedObjectSlot"* %5, i64 0, i32 0, i32 0
  store i64 %217, i64* %223, align 8
  %224 = getelementptr inbounds %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject"* %6, i64 0, i32 0, i32 0, i32 0
  store i64 %175, i64* %224, align 8
  %225 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %2, i64 0, i32 0, i32 1, i32 0
  %226 = load void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)*, void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)** %225, align 8
  %227 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %2, i64 0, i32 0, i32 0
  call void %226(%"union.std::__1::__function::__policy_storage"* %227, %"class.v8::internal::HeapObject"* nonnull dereferenceable(8) %4, %"class.v8::internal::CompressedObjectSlot"* nonnull dereferenceable(8) %5, %"class.v8::internal::HeapObject"* nonnull dereferenceable(8) %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %219)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221)
  br label %228

228:                                              ; preds = %3, %21, %216
  ret void
}

declare %"class.v8::internal::CodeTracer"* @_ZN2v88internal7Isolate13GetCodeTracerEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare void @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #3

declare void @_ZNK2v88internal6Object10ShortPrintEP8_IO_FILE(%"class.v8::internal::Object"*, %struct._IO_FILE*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo17HasOuterScopeInfoEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9ScopeInfo14OuterScopeInfoEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo15DiscardCompiledEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %8 = alloca %"class.std::__1::function", align 8
  %9 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = load i64, i64* %1, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %13 = call i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %12)
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %15 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %14, align 8
  %16 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %15, i64 %13) #12
  br label %32

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %23 = load i64*, i64** %22, align 8
  %24 = icmp eq i64* %21, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i64* [ %26, %25 ], [ %21, %19 ]
  %29 = ptrtoint i64* %28 to i64
  %30 = add i64 %29, 8
  %31 = inttoptr i64 %30 to i64*
  store i64* %31, i64** %20, align 8
  store i64 %13, i64* %28, align 8
  br label %32

32:                                               ; preds = %17, %27
  %33 = phi i64* [ %18, %17 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %34 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = load i64, i64* %1, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0
  %38 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %37)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  %39 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #12
  %40 = load i64, i64* %1, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0
  %43 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %42)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #12
  %44 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #12
  %45 = load i64, i64* %1, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %7, i64 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %8, i64 0, i32 0, i32 1, i32 0
  %49 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %8, i64 0, i32 0, i32 2
  store void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)* @_ZNSt3__110__function16__policy_invokerIFvN2v88internal10HeapObjectENS3_20CompressedObjectSlotES4_EE11__call_implINS0_20__default_alloc_funcIZNS3_18SharedFunctionInfo23DiscardCompiledMetadataEPNS3_7IsolateENS_8functionIS6_EEEd_UlS4_S5_S4_E_S6_EEEEvPKNS0_16__policy_storageEOS4_OS5_SK_, void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)** %48, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal18SharedFunctionInfo23DiscardCompiledMetadataEPNS5_7IsolateENS_8functionIFvNS5_10HeapObjectENS5_20CompressedObjectSlotESA_EEEEd_UlSA_SB_SA_E_SC_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %49, align 8
  call void @_ZN2v88internal18SharedFunctionInfo23DiscardCompiledMetadataEPNS0_7IsolateENSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEE(%"class.v8::internal::SharedFunctionInfo"* nonnull %47, %"class.v8::internal::Isolate"* %0, %"class.std::__1::function"* nonnull %8)
  %50 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %49, align 8
  %51 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %50, i64 0, i32 1
  %52 = load void (i8*)*, void (i8*)** %51, align 8
  %53 = icmp eq void (i8*)* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %32
  %55 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %8, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  call void %52(i8* %56) #12
  br label %57

57:                                               ; preds = %32, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #12
  %58 = load i64, i64* %1, align 8
  %59 = and i64 %58, -4294967296
  %60 = add i64 %58, 3
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 acquire, align 4
  %63 = zext i32 %62 to i64
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %128, label %66

66:                                               ; preds = %57
  %67 = or i64 %59, %63
  %68 = add i64 %67, -1
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %59, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load atomic i16, i16* %74 monotonic, align 2
  %76 = icmp eq i16 %75, 157
  br i1 %76, label %77, label %128

77:                                               ; preds = %66
  %78 = load i64, i64* %1, align 8
  %79 = and i64 %78, -4294967296
  %80 = add i64 %78, 3
  %81 = inttoptr i64 %80 to i32*
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %79, %83
  %85 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %85) #12
  %86 = and i64 %84, -262144
  %87 = or i64 %86, 16
  %88 = inttoptr i64 %87 to %"class.v8::internal::Heap"**
  %89 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %88, align 16
  call void @_ZN2v88internal4Heap24NotifyObjectLayoutChangeENS0_10HeapObjectERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS4_ILS5_1ELb0EEEEEENS0_23InvalidateRecordedSlotsE(%"class.v8::internal::Heap"* %89, i64 %84, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %3, i32 0) #12
  %90 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %91 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %90, null
  br i1 %91, label %98, label %92

92:                                               ; preds = %77
  %93 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %90, i64 0, i32 0, i32 1
  %94 = load i8, i8* %93, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %90, i64 0, i32 1, i64 0
  br label %106

98:                                               ; preds = %92, %77
  %99 = and i64 %78, -262144
  %100 = or i64 %99, 16
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101, align 16
  %103 = add i64 %102, -41416
  %104 = inttoptr i64 %103 to %"class.v8::internal::Isolate"*
  %105 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %104, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %106

106:                                              ; preds = %98, %96
  %107 = phi i64* [ %105, %98 ], [ %97, %96 ]
  %108 = getelementptr inbounds i64, i64* %107, i64 564
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %84, -1
  %111 = inttoptr i64 %110 to i32*
  %112 = trunc i64 %109 to i32
  store atomic volatile i32 %112, i32* %111 release, align 4
  %113 = icmp eq i32 %112, 0
  %114 = and i64 %109, 1
  %115 = icmp eq i64 %114, 0
  %116 = or i1 %113, %115
  br i1 %116, label %125, label %117

117:                                              ; preds = %106
  %118 = or i64 %86, 8
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = and i64 %120, 262144
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %117
  %124 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %88, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %124, i64 %84, i64 0, i64 %109) #12
  br label %125

125:                                              ; preds = %106, %117, %123
  %126 = add i64 %84, 15
  %127 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %89, i64 %126, i32 4, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %85) #12
  br label %161

128:                                              ; preds = %57, %66
  %129 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %130 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE36NewUncompiledDataWithoutPreparseDataENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::FactoryBase"* %129, i64* %33, i32 %38, i32 %43) #12
  %131 = load i64, i64* %1, align 8
  %132 = load i64, i64* %130, align 8
  %133 = add i64 %131, 3
  %134 = inttoptr i64 %133 to i32*
  %135 = trunc i64 %132 to i32
  store atomic volatile i32 %135, i32* %134 release, align 4
  %136 = and i64 %132, 1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %161, label %138

138:                                              ; preds = %128
  %139 = and i64 %131, -262144
  %140 = or i64 %139, 8
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = and i64 %142, 262144
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %149, label %145

145:                                              ; preds = %138
  %146 = or i64 %139, 16
  %147 = inttoptr i64 %146 to %"class.v8::internal::Heap"**
  %148 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %147, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %148, i64 %131, i64 %133, i64 %132) #12
  br label %149

149:                                              ; preds = %145, %138
  %150 = and i64 %132, -262144
  %151 = or i64 %150, 8
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = and i64 %153, 24
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %161, label %156

156:                                              ; preds = %149
  %157 = load i64, i64* %141, align 8
  %158 = and i64 %157, 24
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %156
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %131, i64 %133, i64 %132) #12
  br label %161

161:                                              ; preds = %160, %156, %149, %128, %125
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %4 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 7
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = and i64 %10, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %31, label %14

14:                                               ; preds = %1
  %15 = add i64 %11, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 178
  br i1 %23, label %24, label %31

24:                                               ; preds = %14
  %25 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %11, i64* %26, align 8
  %27 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasPositionInfoEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  br label %31

29:                                               ; preds = %24
  %30 = call i32 @_ZNK2v88internal9ScopeInfo11EndPositionEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  br label %145

31:                                               ; preds = %1, %28, %14
  %32 = load i64, i64* %4, align 8
  %33 = and i64 %32, -4294967296
  %34 = add i64 %32, 3
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = zext i32 %36 to i64
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %63, label %40

40:                                               ; preds = %31
  %41 = or i64 %33, %37
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %33, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = add i16 %49, -157
  %51 = icmp ult i16 %50, 2
  br i1 %51, label %52, label %63

52:                                               ; preds = %40
  %53 = load i64, i64* %4, align 8
  %54 = and i64 %53, -4294967296
  %55 = add i64 %53, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 acquire, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %54, %58
  %60 = add i64 %59, 11
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  br label %145

63:                                               ; preds = %31, %40
  %64 = load i64, i64* %4, align 8
  %65 = and i64 %64, -4294967296
  %66 = add i64 %64, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 acquire, align 4
  %69 = zext i32 %68 to i64
  %70 = and i64 %69, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %63
  %73 = or i64 %65, %69
  %74 = add i64 %73, -1
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %65, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 83
  br i1 %82, label %145, label %83

83:                                               ; preds = %63, %72
  %84 = load i64, i64* %4, align 8
  %85 = add i64 %84, 3
  %86 = inttoptr i64 %85 to i32*
  %87 = load atomic i32, i32* %86 acquire, align 4
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %145, label %90

90:                                               ; preds = %83
  %91 = load i64, i64* %4, align 8
  %92 = and i64 %91, -4294967296
  %93 = add i64 %91, 3
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 acquire, align 4
  %96 = zext i32 %95 to i64
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %145, label %99

99:                                               ; preds = %90
  %100 = or i64 %92, %96
  %101 = add i64 %100, -1
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %92, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 73
  br i1 %109, label %110, label %145

110:                                              ; preds = %99
  %111 = bitcast %"class.v8::internal::WasmInstanceObject"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #12
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, -4294967296
  %114 = add i64 %112, 3
  %115 = inttoptr i64 %114 to i32*
  %116 = load atomic i32, i32* %115 acquire, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %113, %117
  %119 = add i64 %118, 19
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %113, %122
  %124 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %123, i64* %124, align 8
  %125 = load i64, i64* %4, align 8
  %126 = and i64 %125, -4294967296
  %127 = add i64 %125, 3
  %128 = inttoptr i64 %127 to i32*
  %129 = load atomic i32, i32* %128 acquire, align 4
  %130 = zext i32 %129 to i64
  %131 = or i64 %126, %130
  %132 = add i64 %131, 23
  %133 = inttoptr i64 %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = ashr i32 %134, 1
  %136 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %3) #12
  %137 = sext i32 %135 to i64
  %138 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModule", %"struct.v8::internal::wasm::WasmModule"* %136, i64 0, i32 23, i32 0, i32 0
  %139 = load %"struct.v8::internal::wasm::WasmFunction"*, %"struct.v8::internal::wasm::WasmFunction"** %138, align 8
  %140 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunction", %"struct.v8::internal::wasm::WasmFunction"* %139, i64 %137, i32 3, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %"struct.v8::internal::wasm::WasmFunction", %"struct.v8::internal::wasm::WasmFunction"* %139, i64 %137, i32 3, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = add i32 %143, %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #12
  br label %145

145:                                              ; preds = %90, %29, %99, %72, %83, %110, %52
  %146 = phi i32 [ %62, %52 ], [ %144, %110 ], [ %30, %29 ], [ 0, %83 ], [ 0, %72 ], [ -1, %99 ], [ -1, %90 ]
  ret i32 %146
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal18SharedFunctionInfo13GetSourceCodeENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #12
  %13 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %5, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2, i64 0, i32 0
  %15 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %14)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #12
  br i1 %15, label %20, label %16

16:                                               ; preds = %1
  %17 = inttoptr i64 %10 to %"class.v8::internal::Factory"*
  %18 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %17, i64 160
  %19 = bitcast %"class.v8::internal::Factory"* %18 to i64*
  br label %93

20:                                               ; preds = %1
  %21 = load i64, i64* %0, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, 7
  %34 = inttoptr i64 %33 to i16*
  %35 = load atomic i16, i16* %34 monotonic, align 2
  %36 = icmp eq i16 %35, 100
  br i1 %36, label %37, label %43

37:                                               ; preds = %20
  %38 = add i64 %27, 11
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %22, %41
  br label %43

43:                                               ; preds = %20, %37
  %44 = phi i64 [ %42, %37 ], [ %27, %20 ]
  %45 = and i64 %44, -4294967296
  %46 = add i64 %44, 3
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 4
  %52 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %51, align 8
  %53 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %43
  %55 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %52, i64 %50) #12
  br label %69

56:                                               ; preds = %43
  %57 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %58 = load i64*, i64** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %60 = load i64*, i64** %59, align 8
  %61 = icmp eq i64* %58, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #12
  br label %64

64:                                               ; preds = %62, %56
  %65 = phi i64* [ %63, %62 ], [ %58, %56 ]
  %66 = ptrtoint i64* %65 to i64
  %67 = add i64 %66, 8
  %68 = inttoptr i64 %67 to i64*
  store i64* %68, i64** %57, align 8
  store i64 %50, i64* %65, align 8
  br label %69

69:                                               ; preds = %54, %64
  %70 = phi i64* [ %55, %54 ], [ %65, %64 ]
  %71 = inttoptr i64 %10 to %"class.v8::internal::Factory"*
  %72 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #12
  %73 = load i64, i64* %0, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %76 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %75)
  %77 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #12
  %78 = load i64, i64* %0, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %81 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %80)
  %82 = icmp eq i32 %76, 0
  br i1 %82, label %83, label %89

83:                                               ; preds = %69
  %84 = load i64, i64* %70, align 8
  %85 = add i64 %84, 7
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, %81
  br i1 %88, label %91, label %89

89:                                               ; preds = %83, %69
  %90 = tail call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %71, i64* %70, i32 %76, i32 %81) #12
  br label %91

91:                                               ; preds = %83, %89
  %92 = phi i64* [ %90, %89 ], [ %70, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #12
  br label %93

93:                                               ; preds = %91, %16
  %94 = phi i64* [ %92, %91 ], [ %19, %16 ]
  ret i64* %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal18SharedFunctionInfo20GetSourceCodeHarmonyENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::IncrementalStringBuilder", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %7 = load i64, i64* %0, align 8
  %8 = and i64 %7, -262144
  %9 = or i64 %8, 16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10, align 16
  %12 = add i64 %11, -41416
  %13 = inttoptr i64 %12 to %"class.v8::internal::Isolate"*
  %14 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %7, i64* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %2, i64 0, i32 0
  %17 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #12
  br i1 %17, label %22, label %18

18:                                               ; preds = %1
  %19 = inttoptr i64 %12 to %"class.v8::internal::Factory"*
  %20 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %19, i64 160
  %21 = bitcast %"class.v8::internal::Factory"* %20 to i64*
  br label %478

22:                                               ; preds = %1
  %23 = load i64, i64* %0, align 8
  %24 = and i64 %23, -4294967296
  %25 = add i64 %23, 15
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 acquire, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %24, %28
  %30 = add i64 %29, -1
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %24, %33
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i16*
  %37 = load atomic i16, i16* %36 monotonic, align 2
  %38 = icmp eq i16 %37, 100
  br i1 %38, label %39, label %45

39:                                               ; preds = %22
  %40 = add i64 %29, 11
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = or i64 %24, %43
  br label %45

45:                                               ; preds = %22, %39
  %46 = phi i64 [ %44, %39 ], [ %29, %22 ]
  %47 = and i64 %46, -4294967296
  %48 = add i64 %46, 3
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %47, %51
  %53 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 4
  %54 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %53, align 8
  %55 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %45
  %57 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %54, i64 %52) #12
  br label %71

58:                                               ; preds = %45
  %59 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %60 = load i64*, i64** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %62 = load i64*, i64** %61, align 8
  %63 = icmp eq i64* %60, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %58
  %65 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #12
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i64* [ %65, %64 ], [ %60, %58 ]
  %68 = ptrtoint i64* %67 to i64
  %69 = add i64 %68, 8
  %70 = inttoptr i64 %69 to i64*
  store i64* %70, i64** %59, align 8
  store i64 %52, i64* %67, align 8
  br label %71

71:                                               ; preds = %56, %66
  %72 = phi i64* [ %57, %56 ], [ %67, %66 ]
  %73 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #12
  %74 = load i64, i64* %0, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %74, i64* %75, align 8
  %76 = add i64 %74, 23
  %77 = inttoptr i64 %76 to i16*
  %78 = load i16, i16* %77, align 2
  %79 = icmp eq i16 %78, -1
  br i1 %79, label %86, label %80

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %82 = zext i16 %78 to i32
  %83 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %81) #12
  %84 = sub nsw i32 %83, %82
  %85 = load i64, i64* %0, align 8
  br label %86

86:                                               ; preds = %71, %80
  %87 = phi i64 [ %85, %80 ], [ %74, %71 ]
  %88 = phi i32 [ %84, %80 ], [ -1, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #12
  %89 = inttoptr i64 %12 to %"class.v8::internal::Factory"*
  %90 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #12
  %91 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %87, i64* %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %93 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %92)
  %94 = icmp eq i32 %88, 0
  br i1 %94, label %95, label %101

95:                                               ; preds = %86
  %96 = load i64, i64* %72, align 8
  %97 = add i64 %96, 7
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, %93
  br i1 %100, label %103, label %101

101:                                              ; preds = %95, %86
  %102 = tail call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %89, i64* %72, i32 %88, i32 %93) #12
  br label %103

103:                                              ; preds = %95, %101
  %104 = phi i64* [ %102, %101 ], [ %72, %95 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #12
  %105 = load i64, i64* %0, align 8
  %106 = add i64 %105, 27
  %107 = inttoptr i64 %106 to i32*
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 896
  %110 = icmp eq i32 %109, 512
  br i1 %110, label %111, label %478

111:                                              ; preds = %103
  %112 = bitcast %"class.v8::internal::IncrementalStringBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %112) #12
  call void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, %"class.v8::internal::Isolate"* %13) #12
  %113 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 6, i32 0, i32 0
  %117 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 4
  %118 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 3
  %119 = load i64*, i64** %116, align 8
  %120 = load i64, i64* %119, align 8
  %121 = load i32, i32* %117, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %117, align 4
  br i1 %115, label %132, label %123

123:                                              ; preds = %111
  %124 = shl nsw i32 %121, 1
  %125 = sext i32 %124 to i64
  %126 = add i64 %120, 11
  %127 = add i64 %126, %125
  %128 = inttoptr i64 %127 to i16*
  store i16 102, i16* %128, align 2
  %129 = load i32, i32* %117, align 4
  %130 = load i32, i32* %118, align 8
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %154, label %156

132:                                              ; preds = %111
  %133 = sext i32 %121 to i64
  %134 = add i64 %120, 11
  %135 = add i64 %134, %133
  %136 = inttoptr i64 %135 to i8*
  store i8 102, i8* %136, align 1
  %137 = load i32, i32* %117, align 4
  %138 = load i32, i32* %118, align 8
  %139 = icmp eq i32 %137, %138
  br i1 %139, label %140, label %142

140:                                              ; preds = %132
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %141 = load i32, i32* %117, align 4
  br label %142

142:                                              ; preds = %140, %132
  %143 = phi i32 [ %141, %140 ], [ %137, %132 ]
  %144 = load i64*, i64** %116, align 8
  %145 = load i64, i64* %144, align 8
  %146 = add nsw i32 %143, 1
  store i32 %146, i32* %117, align 4
  %147 = sext i32 %143 to i64
  %148 = add i64 %145, 11
  %149 = add i64 %148, %147
  %150 = inttoptr i64 %149 to i8*
  store i8 117, i8* %150, align 1
  %151 = load i32, i32* %117, align 4
  %152 = load i32, i32* %118, align 8
  %153 = icmp eq i32 %151, %152
  br i1 %153, label %544, label %546

154:                                              ; preds = %123
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %155 = load i32, i32* %117, align 4
  br label %156

156:                                              ; preds = %154, %123
  %157 = phi i32 [ %155, %154 ], [ %129, %123 ]
  %158 = load i64*, i64** %116, align 8
  %159 = load i64, i64* %158, align 8
  %160 = add nsw i32 %157, 1
  store i32 %160, i32* %117, align 4
  %161 = shl nsw i32 %157, 1
  %162 = sext i32 %161 to i64
  %163 = add i64 %159, 11
  %164 = add i64 %163, %162
  %165 = inttoptr i64 %164 to i16*
  store i16 117, i16* %165, align 2
  %166 = load i32, i32* %117, align 4
  %167 = load i32, i32* %118, align 8
  %168 = icmp eq i32 %166, %167
  br i1 %168, label %643, label %645

169:                                              ; preds = %735, %748, %630, %642
  %170 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %170) #12
  %171 = load i64, i64* %0, align 8
  %172 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %171, i64* %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0
  %174 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %173)
  %175 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %53, align 8
  %176 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %175, null
  br i1 %176, label %179, label %177

177:                                              ; preds = %169
  %178 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %175, i64 %174) #12
  br label %192

179:                                              ; preds = %169
  %180 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %181 = load i64*, i64** %180, align 8
  %182 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %183 = load i64*, i64** %182, align 8
  %184 = icmp eq i64* %181, %183
  br i1 %184, label %185, label %187

185:                                              ; preds = %179
  %186 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #12
  br label %187

187:                                              ; preds = %185, %179
  %188 = phi i64* [ %186, %185 ], [ %181, %179 ]
  %189 = ptrtoint i64* %188 to i64
  %190 = add i64 %189, 8
  %191 = inttoptr i64 %190 to i64*
  store i64* %191, i64** %180, align 8
  store i64 %174, i64* %188, align 8
  br label %192

192:                                              ; preds = %177, %187
  %193 = phi i64* [ %178, %177 ], [ %188, %187 ]
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* %193) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %170) #12
  %194 = load i32, i32* %113, align 8
  %195 = icmp eq i32 %194, 0
  %196 = load i64*, i64** %116, align 8
  %197 = load i64, i64* %196, align 8
  %198 = load i32, i32* %117, align 4
  %199 = add nsw i32 %198, 1
  store i32 %199, i32* %117, align 4
  br i1 %195, label %209, label %200

200:                                              ; preds = %192
  %201 = shl nsw i32 %198, 1
  %202 = sext i32 %201 to i64
  %203 = add i64 %197, 11
  %204 = add i64 %203, %202
  %205 = inttoptr i64 %204 to i16*
  store i16 40, i16* %205, align 2
  %206 = load i32, i32* %117, align 4
  %207 = load i32, i32* %118, align 8
  %208 = icmp eq i32 %206, %207
  br i1 %208, label %218, label %219

209:                                              ; preds = %192
  %210 = sext i32 %198 to i64
  %211 = add i64 %197, 11
  %212 = add i64 %211, %210
  %213 = inttoptr i64 %212 to i8*
  store i8 40, i8* %213, align 1
  %214 = load i32, i32* %117, align 4
  %215 = load i32, i32* %118, align 8
  %216 = icmp eq i32 %214, %215
  br i1 %216, label %217, label %219

217:                                              ; preds = %209
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %219

218:                                              ; preds = %200
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %219

219:                                              ; preds = %200, %218, %209, %217
  %220 = load i64, i64* %0, align 8
  %221 = and i64 %220, -4294967296
  %222 = add i64 %220, 15
  %223 = inttoptr i64 %222 to i32*
  %224 = load atomic i32, i32* %223 acquire, align 4
  %225 = zext i32 %224 to i64
  %226 = or i64 %221, %225
  %227 = add i64 %226, -1
  %228 = inttoptr i64 %227 to i32*
  %229 = load atomic i32, i32* %228 monotonic, align 4
  %230 = zext i32 %229 to i64
  %231 = or i64 %221, %230
  %232 = add i64 %231, 7
  %233 = inttoptr i64 %232 to i16*
  %234 = load atomic i16, i16* %233 monotonic, align 2
  %235 = icmp eq i16 %234, 100
  br i1 %235, label %236, label %242

236:                                              ; preds = %219
  %237 = add i64 %226, 11
  %238 = inttoptr i64 %237 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %239 to i64
  %241 = or i64 %221, %240
  br label %242

242:                                              ; preds = %219, %236
  %243 = phi i64 [ %241, %236 ], [ %226, %219 ]
  %244 = and i64 %243, -4294967296
  %245 = add i64 %243, 35
  %246 = inttoptr i64 %245 to i32*
  %247 = load i32, i32* %246, align 4
  %248 = zext i32 %247 to i64
  %249 = or i64 %244, %248
  %250 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %53, align 8
  %251 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %242
  %253 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %250, i64 %249) #12
  %254 = load i64, i64* %253, align 8
  br label %268

255:                                              ; preds = %242
  %256 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %257 = load i64*, i64** %256, align 8
  %258 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %259 = load i64*, i64** %258, align 8
  %260 = icmp eq i64* %257, %259
  br i1 %260, label %261, label %263

261:                                              ; preds = %255
  %262 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #12
  br label %263

263:                                              ; preds = %261, %255
  %264 = phi i64* [ %262, %261 ], [ %257, %255 ]
  %265 = ptrtoint i64* %264 to i64
  %266 = add i64 %265, 8
  %267 = inttoptr i64 %266 to i64*
  store i64* %267, i64** %256, align 8
  store i64 %249, i64* %264, align 8
  br label %268

268:                                              ; preds = %252, %263
  %269 = phi i64 [ %254, %252 ], [ %249, %263 ]
  %270 = phi i64* [ %253, %252 ], [ %264, %263 ]
  %271 = add i64 %269, 3
  %272 = inttoptr i64 %271 to i32*
  %273 = load i32, i32* %272, align 4
  %274 = icmp sgt i32 %273, 1
  br i1 %274, label %275, label %280

275:                                              ; preds = %268
  %276 = lshr i32 %273, 1
  %277 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %278 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %279 = zext i32 %276 to i64
  br label %391

280:                                              ; preds = %474, %268
  %281 = load i32, i32* %113, align 8
  %282 = icmp eq i32 %281, 0
  %283 = load i64*, i64** %116, align 8
  %284 = load i64, i64* %283, align 8
  %285 = load i32, i32* %117, align 4
  %286 = add nsw i32 %285, 1
  store i32 %286, i32* %117, align 4
  br i1 %282, label %296, label %287

287:                                              ; preds = %280
  %288 = shl nsw i32 %285, 1
  %289 = sext i32 %288 to i64
  %290 = add i64 %284, 11
  %291 = add i64 %290, %289
  %292 = inttoptr i64 %291 to i16*
  store i16 41, i16* %292, align 2
  %293 = load i32, i32* %117, align 4
  %294 = load i32, i32* %118, align 8
  %295 = icmp eq i32 %293, %294
  br i1 %295, label %318, label %320

296:                                              ; preds = %280
  %297 = sext i32 %285 to i64
  %298 = add i64 %284, 11
  %299 = add i64 %298, %297
  %300 = inttoptr i64 %299 to i8*
  store i8 41, i8* %300, align 1
  %301 = load i32, i32* %117, align 4
  %302 = load i32, i32* %118, align 8
  %303 = icmp eq i32 %301, %302
  br i1 %303, label %304, label %306

304:                                              ; preds = %296
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %305 = load i32, i32* %117, align 4
  br label %306

306:                                              ; preds = %304, %296
  %307 = phi i32 [ %305, %304 ], [ %301, %296 ]
  %308 = load i64*, i64** %116, align 8
  %309 = load i64, i64* %308, align 8
  %310 = add nsw i32 %307, 1
  store i32 %310, i32* %117, align 4
  %311 = sext i32 %307 to i64
  %312 = add i64 %309, 11
  %313 = add i64 %312, %311
  %314 = inttoptr i64 %313 to i8*
  store i8 32, i8* %314, align 1
  %315 = load i32, i32* %117, align 4
  %316 = load i32, i32* %118, align 8
  %317 = icmp eq i32 %315, %316
  br i1 %317, label %482, label %484

318:                                              ; preds = %287
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %319 = load i32, i32* %117, align 4
  br label %320

320:                                              ; preds = %318, %287
  %321 = phi i32 [ %319, %318 ], [ %293, %287 ]
  %322 = load i64*, i64** %116, align 8
  %323 = load i64, i64* %322, align 8
  %324 = add nsw i32 %321, 1
  store i32 %324, i32* %117, align 4
  %325 = shl nsw i32 %321, 1
  %326 = sext i32 %325 to i64
  %327 = add i64 %323, 11
  %328 = add i64 %327, %326
  %329 = inttoptr i64 %328 to i16*
  store i16 32, i16* %329, align 2
  %330 = load i32, i32* %117, align 4
  %331 = load i32, i32* %118, align 8
  %332 = icmp eq i32 %330, %331
  br i1 %332, label %511, label %513

333:                                              ; preds = %528, %541, %498, %510
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* %104) #12
  %334 = load i32, i32* %113, align 8
  %335 = icmp eq i32 %334, 0
  %336 = load i64*, i64** %116, align 8
  %337 = load i64, i64* %336, align 8
  %338 = load i32, i32* %117, align 4
  %339 = add nsw i32 %338, 1
  store i32 %339, i32* %117, align 4
  br i1 %335, label %349, label %340

340:                                              ; preds = %333
  %341 = shl nsw i32 %338, 1
  %342 = sext i32 %341 to i64
  %343 = add i64 %337, 11
  %344 = add i64 %343, %342
  %345 = inttoptr i64 %344 to i16*
  store i16 10, i16* %345, align 2
  %346 = load i32, i32* %117, align 4
  %347 = load i32, i32* %118, align 8
  %348 = icmp eq i32 %346, %347
  br i1 %348, label %371, label %373

349:                                              ; preds = %333
  %350 = sext i32 %338 to i64
  %351 = add i64 %337, 11
  %352 = add i64 %351, %350
  %353 = inttoptr i64 %352 to i8*
  store i8 10, i8* %353, align 1
  %354 = load i32, i32* %117, align 4
  %355 = load i32, i32* %118, align 8
  %356 = icmp eq i32 %354, %355
  br i1 %356, label %357, label %359

357:                                              ; preds = %349
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %358 = load i32, i32* %117, align 4
  br label %359

359:                                              ; preds = %357, %349
  %360 = phi i32 [ %358, %357 ], [ %354, %349 ]
  %361 = load i64*, i64** %116, align 8
  %362 = load i64, i64* %361, align 8
  %363 = add nsw i32 %360, 1
  store i32 %363, i32* %117, align 4
  %364 = sext i32 %360 to i64
  %365 = add i64 %362, 11
  %366 = add i64 %365, %364
  %367 = inttoptr i64 %366 to i8*
  store i8 125, i8* %367, align 1
  %368 = load i32, i32* %117, align 4
  %369 = load i32, i32* %118, align 8
  %370 = icmp eq i32 %368, %369
  br i1 %370, label %480, label %386

371:                                              ; preds = %340
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %372 = load i32, i32* %117, align 4
  br label %373

373:                                              ; preds = %371, %340
  %374 = phi i32 [ %372, %371 ], [ %346, %340 ]
  %375 = load i64*, i64** %116, align 8
  %376 = load i64, i64* %375, align 8
  %377 = add nsw i32 %374, 1
  store i32 %377, i32* %117, align 4
  %378 = shl nsw i32 %374, 1
  %379 = sext i32 %378 to i64
  %380 = add i64 %376, 11
  %381 = add i64 %380, %379
  %382 = inttoptr i64 %381 to i16*
  store i16 125, i16* %382, align 2
  %383 = load i32, i32* %117, align 4
  %384 = load i32, i32* %118, align 8
  %385 = icmp eq i32 %383, %384
  br i1 %385, label %481, label %386

386:                                              ; preds = %373, %481, %359, %480
  %387 = call i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %388 = icmp eq i64* %387, null
  br i1 %388, label %389, label %390, !prof !3

389:                                              ; preds = %386
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #13
  unreachable

390:                                              ; preds = %386
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %112) #12
  br label %478

391:                                              ; preds = %275, %474
  %392 = phi i64 [ 0, %275 ], [ %476, %474 ]
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %447, label %394

394:                                              ; preds = %391
  %395 = load i32, i32* %113, align 8
  %396 = icmp eq i32 %395, 0
  %397 = load i64*, i64** %116, align 8
  %398 = load i64, i64* %397, align 8
  %399 = load i32, i32* %117, align 4
  %400 = add nsw i32 %399, 1
  store i32 %400, i32* %117, align 4
  br i1 %396, label %410, label %401

401:                                              ; preds = %394
  %402 = shl nsw i32 %399, 1
  %403 = sext i32 %402 to i64
  %404 = add i64 %398, 11
  %405 = add i64 %404, %403
  %406 = inttoptr i64 %405 to i16*
  store i16 44, i16* %406, align 2
  %407 = load i32, i32* %117, align 4
  %408 = load i32, i32* %118, align 8
  %409 = icmp eq i32 %407, %408
  br i1 %409, label %432, label %434

410:                                              ; preds = %394
  %411 = sext i32 %399 to i64
  %412 = add i64 %398, 11
  %413 = add i64 %412, %411
  %414 = inttoptr i64 %413 to i8*
  store i8 44, i8* %414, align 1
  %415 = load i32, i32* %117, align 4
  %416 = load i32, i32* %118, align 8
  %417 = icmp eq i32 %415, %416
  br i1 %417, label %418, label %420

418:                                              ; preds = %410
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %419 = load i32, i32* %117, align 4
  br label %420

420:                                              ; preds = %418, %410
  %421 = phi i32 [ %419, %418 ], [ %415, %410 ]
  %422 = load i64*, i64** %116, align 8
  %423 = load i64, i64* %422, align 8
  %424 = add nsw i32 %421, 1
  store i32 %424, i32* %117, align 4
  %425 = sext i32 %421 to i64
  %426 = add i64 %423, 11
  %427 = add i64 %426, %425
  %428 = inttoptr i64 %427 to i8*
  store i8 32, i8* %428, align 1
  %429 = load i32, i32* %117, align 4
  %430 = load i32, i32* %118, align 8
  %431 = icmp eq i32 %429, %430
  br i1 %431, label %543, label %447

432:                                              ; preds = %401
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %433 = load i32, i32* %117, align 4
  br label %434

434:                                              ; preds = %432, %401
  %435 = phi i32 [ %433, %432 ], [ %407, %401 ]
  %436 = load i64*, i64** %116, align 8
  %437 = load i64, i64* %436, align 8
  %438 = add nsw i32 %435, 1
  store i32 %438, i32* %117, align 4
  %439 = shl nsw i32 %435, 1
  %440 = sext i32 %439 to i64
  %441 = add i64 %437, 11
  %442 = add i64 %441, %440
  %443 = inttoptr i64 %442 to i16*
  store i16 32, i16* %443, align 2
  %444 = load i32, i32* %117, align 4
  %445 = load i32, i32* %118, align 8
  %446 = icmp eq i32 %444, %445
  br i1 %446, label %542, label %447

447:                                              ; preds = %420, %543, %434, %542, %391
  %448 = load i64, i64* %270, align 8
  %449 = and i64 %448, -4294967296
  %450 = trunc i64 %392 to i32
  %451 = shl i32 %450, 2
  %452 = sext i32 %451 to i64
  %453 = add nsw i64 %452, 7
  %454 = add i64 %453, %448
  %455 = inttoptr i64 %454 to i32*
  %456 = load atomic i32, i32* %455 monotonic, align 4
  %457 = zext i32 %456 to i64
  %458 = or i64 %449, %457
  %459 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %53, align 8
  %460 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %459, null
  br i1 %460, label %463, label %461

461:                                              ; preds = %447
  %462 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %459, i64 %458) #12
  br label %474

463:                                              ; preds = %447
  %464 = load i64*, i64** %277, align 8
  %465 = load i64*, i64** %278, align 8
  %466 = icmp eq i64* %464, %465
  br i1 %466, label %467, label %469

467:                                              ; preds = %463
  %468 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #12
  br label %469

469:                                              ; preds = %467, %463
  %470 = phi i64* [ %468, %467 ], [ %464, %463 ]
  %471 = ptrtoint i64* %470 to i64
  %472 = add i64 %471, 8
  %473 = inttoptr i64 %472 to i64*
  store i64* %473, i64** %277, align 8
  store i64 %458, i64* %470, align 8
  br label %474

474:                                              ; preds = %461, %469
  %475 = phi i64* [ %462, %461 ], [ %470, %469 ]
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* %475) #12
  %476 = add nuw nsw i64 %392, 1
  %477 = icmp ult i64 %476, %279
  br i1 %477, label %391, label %280

478:                                              ; preds = %390, %103, %18
  %479 = phi i64* [ %21, %18 ], [ %387, %390 ], [ %104, %103 ]
  ret i64* %479

480:                                              ; preds = %359
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %386

481:                                              ; preds = %373
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %386

482:                                              ; preds = %306
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %483 = load i32, i32* %117, align 4
  br label %484

484:                                              ; preds = %482, %306
  %485 = phi i32 [ %483, %482 ], [ %315, %306 ]
  %486 = load i64*, i64** %116, align 8
  %487 = load i64, i64* %486, align 8
  %488 = add nsw i32 %485, 1
  store i32 %488, i32* %117, align 4
  %489 = sext i32 %485 to i64
  %490 = add i64 %487, 11
  %491 = add i64 %490, %489
  %492 = inttoptr i64 %491 to i8*
  store i8 123, i8* %492, align 1
  %493 = load i32, i32* %117, align 4
  %494 = load i32, i32* %118, align 8
  %495 = icmp eq i32 %493, %494
  br i1 %495, label %496, label %498

496:                                              ; preds = %484
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %497 = load i32, i32* %117, align 4
  br label %498

498:                                              ; preds = %496, %484
  %499 = phi i32 [ %497, %496 ], [ %493, %484 ]
  %500 = load i64*, i64** %116, align 8
  %501 = load i64, i64* %500, align 8
  %502 = add nsw i32 %499, 1
  store i32 %502, i32* %117, align 4
  %503 = sext i32 %499 to i64
  %504 = add i64 %501, 11
  %505 = add i64 %504, %503
  %506 = inttoptr i64 %505 to i8*
  store i8 10, i8* %506, align 1
  %507 = load i32, i32* %117, align 4
  %508 = load i32, i32* %118, align 8
  %509 = icmp eq i32 %507, %508
  br i1 %509, label %510, label %333

510:                                              ; preds = %498
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %333

511:                                              ; preds = %320
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %512 = load i32, i32* %117, align 4
  br label %513

513:                                              ; preds = %511, %320
  %514 = phi i32 [ %512, %511 ], [ %330, %320 ]
  %515 = load i64*, i64** %116, align 8
  %516 = load i64, i64* %515, align 8
  %517 = add nsw i32 %514, 1
  store i32 %517, i32* %117, align 4
  %518 = shl nsw i32 %514, 1
  %519 = sext i32 %518 to i64
  %520 = add i64 %516, 11
  %521 = add i64 %520, %519
  %522 = inttoptr i64 %521 to i16*
  store i16 123, i16* %522, align 2
  %523 = load i32, i32* %117, align 4
  %524 = load i32, i32* %118, align 8
  %525 = icmp eq i32 %523, %524
  br i1 %525, label %526, label %528

526:                                              ; preds = %513
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %527 = load i32, i32* %117, align 4
  br label %528

528:                                              ; preds = %526, %513
  %529 = phi i32 [ %527, %526 ], [ %523, %513 ]
  %530 = load i64*, i64** %116, align 8
  %531 = load i64, i64* %530, align 8
  %532 = add nsw i32 %529, 1
  store i32 %532, i32* %117, align 4
  %533 = shl nsw i32 %529, 1
  %534 = sext i32 %533 to i64
  %535 = add i64 %531, 11
  %536 = add i64 %535, %534
  %537 = inttoptr i64 %536 to i16*
  store i16 10, i16* %537, align 2
  %538 = load i32, i32* %117, align 4
  %539 = load i32, i32* %118, align 8
  %540 = icmp eq i32 %538, %539
  br i1 %540, label %541, label %333

541:                                              ; preds = %528
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %333

542:                                              ; preds = %434
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %447

543:                                              ; preds = %420
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %447

544:                                              ; preds = %142
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %545 = load i32, i32* %117, align 4
  br label %546

546:                                              ; preds = %544, %142
  %547 = phi i32 [ %545, %544 ], [ %151, %142 ]
  %548 = load i64*, i64** %116, align 8
  %549 = load i64, i64* %548, align 8
  %550 = add nsw i32 %547, 1
  store i32 %550, i32* %117, align 4
  %551 = sext i32 %547 to i64
  %552 = add i64 %549, 11
  %553 = add i64 %552, %551
  %554 = inttoptr i64 %553 to i8*
  store i8 110, i8* %554, align 1
  %555 = load i32, i32* %117, align 4
  %556 = load i32, i32* %118, align 8
  %557 = icmp eq i32 %555, %556
  br i1 %557, label %558, label %560

558:                                              ; preds = %546
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %559 = load i32, i32* %117, align 4
  br label %560

560:                                              ; preds = %558, %546
  %561 = phi i32 [ %559, %558 ], [ %555, %546 ]
  %562 = load i64*, i64** %116, align 8
  %563 = load i64, i64* %562, align 8
  %564 = add nsw i32 %561, 1
  store i32 %564, i32* %117, align 4
  %565 = sext i32 %561 to i64
  %566 = add i64 %563, 11
  %567 = add i64 %566, %565
  %568 = inttoptr i64 %567 to i8*
  store i8 99, i8* %568, align 1
  %569 = load i32, i32* %117, align 4
  %570 = load i32, i32* %118, align 8
  %571 = icmp eq i32 %569, %570
  br i1 %571, label %572, label %574

572:                                              ; preds = %560
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %573 = load i32, i32* %117, align 4
  br label %574

574:                                              ; preds = %572, %560
  %575 = phi i32 [ %573, %572 ], [ %569, %560 ]
  %576 = load i64*, i64** %116, align 8
  %577 = load i64, i64* %576, align 8
  %578 = add nsw i32 %575, 1
  store i32 %578, i32* %117, align 4
  %579 = sext i32 %575 to i64
  %580 = add i64 %577, 11
  %581 = add i64 %580, %579
  %582 = inttoptr i64 %581 to i8*
  store i8 116, i8* %582, align 1
  %583 = load i32, i32* %117, align 4
  %584 = load i32, i32* %118, align 8
  %585 = icmp eq i32 %583, %584
  br i1 %585, label %586, label %588

586:                                              ; preds = %574
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %587 = load i32, i32* %117, align 4
  br label %588

588:                                              ; preds = %586, %574
  %589 = phi i32 [ %587, %586 ], [ %583, %574 ]
  %590 = load i64*, i64** %116, align 8
  %591 = load i64, i64* %590, align 8
  %592 = add nsw i32 %589, 1
  store i32 %592, i32* %117, align 4
  %593 = sext i32 %589 to i64
  %594 = add i64 %591, 11
  %595 = add i64 %594, %593
  %596 = inttoptr i64 %595 to i8*
  store i8 105, i8* %596, align 1
  %597 = load i32, i32* %117, align 4
  %598 = load i32, i32* %118, align 8
  %599 = icmp eq i32 %597, %598
  br i1 %599, label %600, label %602

600:                                              ; preds = %588
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %601 = load i32, i32* %117, align 4
  br label %602

602:                                              ; preds = %600, %588
  %603 = phi i32 [ %601, %600 ], [ %597, %588 ]
  %604 = load i64*, i64** %116, align 8
  %605 = load i64, i64* %604, align 8
  %606 = add nsw i32 %603, 1
  store i32 %606, i32* %117, align 4
  %607 = sext i32 %603 to i64
  %608 = add i64 %605, 11
  %609 = add i64 %608, %607
  %610 = inttoptr i64 %609 to i8*
  store i8 111, i8* %610, align 1
  %611 = load i32, i32* %117, align 4
  %612 = load i32, i32* %118, align 8
  %613 = icmp eq i32 %611, %612
  br i1 %613, label %614, label %616

614:                                              ; preds = %602
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %615 = load i32, i32* %117, align 4
  br label %616

616:                                              ; preds = %614, %602
  %617 = phi i32 [ %615, %614 ], [ %611, %602 ]
  %618 = load i64*, i64** %116, align 8
  %619 = load i64, i64* %618, align 8
  %620 = add nsw i32 %617, 1
  store i32 %620, i32* %117, align 4
  %621 = sext i32 %617 to i64
  %622 = add i64 %619, 11
  %623 = add i64 %622, %621
  %624 = inttoptr i64 %623 to i8*
  store i8 110, i8* %624, align 1
  %625 = load i32, i32* %117, align 4
  %626 = load i32, i32* %118, align 8
  %627 = icmp eq i32 %625, %626
  br i1 %627, label %628, label %630

628:                                              ; preds = %616
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %629 = load i32, i32* %117, align 4
  br label %630

630:                                              ; preds = %628, %616
  %631 = phi i32 [ %629, %628 ], [ %625, %616 ]
  %632 = load i64*, i64** %116, align 8
  %633 = load i64, i64* %632, align 8
  %634 = add nsw i32 %631, 1
  store i32 %634, i32* %117, align 4
  %635 = sext i32 %631 to i64
  %636 = add i64 %633, 11
  %637 = add i64 %636, %635
  %638 = inttoptr i64 %637 to i8*
  store i8 32, i8* %638, align 1
  %639 = load i32, i32* %117, align 4
  %640 = load i32, i32* %118, align 8
  %641 = icmp eq i32 %639, %640
  br i1 %641, label %642, label %169

642:                                              ; preds = %630
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %169

643:                                              ; preds = %156
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %644 = load i32, i32* %117, align 4
  br label %645

645:                                              ; preds = %643, %156
  %646 = phi i32 [ %644, %643 ], [ %166, %156 ]
  %647 = load i64*, i64** %116, align 8
  %648 = load i64, i64* %647, align 8
  %649 = add nsw i32 %646, 1
  store i32 %649, i32* %117, align 4
  %650 = shl nsw i32 %646, 1
  %651 = sext i32 %650 to i64
  %652 = add i64 %648, 11
  %653 = add i64 %652, %651
  %654 = inttoptr i64 %653 to i16*
  store i16 110, i16* %654, align 2
  %655 = load i32, i32* %117, align 4
  %656 = load i32, i32* %118, align 8
  %657 = icmp eq i32 %655, %656
  br i1 %657, label %658, label %660

658:                                              ; preds = %645
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %659 = load i32, i32* %117, align 4
  br label %660

660:                                              ; preds = %658, %645
  %661 = phi i32 [ %659, %658 ], [ %655, %645 ]
  %662 = load i64*, i64** %116, align 8
  %663 = load i64, i64* %662, align 8
  %664 = add nsw i32 %661, 1
  store i32 %664, i32* %117, align 4
  %665 = shl nsw i32 %661, 1
  %666 = sext i32 %665 to i64
  %667 = add i64 %663, 11
  %668 = add i64 %667, %666
  %669 = inttoptr i64 %668 to i16*
  store i16 99, i16* %669, align 2
  %670 = load i32, i32* %117, align 4
  %671 = load i32, i32* %118, align 8
  %672 = icmp eq i32 %670, %671
  br i1 %672, label %673, label %675

673:                                              ; preds = %660
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %674 = load i32, i32* %117, align 4
  br label %675

675:                                              ; preds = %673, %660
  %676 = phi i32 [ %674, %673 ], [ %670, %660 ]
  %677 = load i64*, i64** %116, align 8
  %678 = load i64, i64* %677, align 8
  %679 = add nsw i32 %676, 1
  store i32 %679, i32* %117, align 4
  %680 = shl nsw i32 %676, 1
  %681 = sext i32 %680 to i64
  %682 = add i64 %678, 11
  %683 = add i64 %682, %681
  %684 = inttoptr i64 %683 to i16*
  store i16 116, i16* %684, align 2
  %685 = load i32, i32* %117, align 4
  %686 = load i32, i32* %118, align 8
  %687 = icmp eq i32 %685, %686
  br i1 %687, label %688, label %690

688:                                              ; preds = %675
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %689 = load i32, i32* %117, align 4
  br label %690

690:                                              ; preds = %688, %675
  %691 = phi i32 [ %689, %688 ], [ %685, %675 ]
  %692 = load i64*, i64** %116, align 8
  %693 = load i64, i64* %692, align 8
  %694 = add nsw i32 %691, 1
  store i32 %694, i32* %117, align 4
  %695 = shl nsw i32 %691, 1
  %696 = sext i32 %695 to i64
  %697 = add i64 %693, 11
  %698 = add i64 %697, %696
  %699 = inttoptr i64 %698 to i16*
  store i16 105, i16* %699, align 2
  %700 = load i32, i32* %117, align 4
  %701 = load i32, i32* %118, align 8
  %702 = icmp eq i32 %700, %701
  br i1 %702, label %703, label %705

703:                                              ; preds = %690
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %704 = load i32, i32* %117, align 4
  br label %705

705:                                              ; preds = %703, %690
  %706 = phi i32 [ %704, %703 ], [ %700, %690 ]
  %707 = load i64*, i64** %116, align 8
  %708 = load i64, i64* %707, align 8
  %709 = add nsw i32 %706, 1
  store i32 %709, i32* %117, align 4
  %710 = shl nsw i32 %706, 1
  %711 = sext i32 %710 to i64
  %712 = add i64 %708, 11
  %713 = add i64 %712, %711
  %714 = inttoptr i64 %713 to i16*
  store i16 111, i16* %714, align 2
  %715 = load i32, i32* %117, align 4
  %716 = load i32, i32* %118, align 8
  %717 = icmp eq i32 %715, %716
  br i1 %717, label %718, label %720

718:                                              ; preds = %705
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %719 = load i32, i32* %117, align 4
  br label %720

720:                                              ; preds = %718, %705
  %721 = phi i32 [ %719, %718 ], [ %715, %705 ]
  %722 = load i64*, i64** %116, align 8
  %723 = load i64, i64* %722, align 8
  %724 = add nsw i32 %721, 1
  store i32 %724, i32* %117, align 4
  %725 = shl nsw i32 %721, 1
  %726 = sext i32 %725 to i64
  %727 = add i64 %723, 11
  %728 = add i64 %727, %726
  %729 = inttoptr i64 %728 to i16*
  store i16 110, i16* %729, align 2
  %730 = load i32, i32* %117, align 4
  %731 = load i32, i32* %118, align 8
  %732 = icmp eq i32 %730, %731
  br i1 %732, label %733, label %735

733:                                              ; preds = %720
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  %734 = load i32, i32* %117, align 4
  br label %735

735:                                              ; preds = %733, %720
  %736 = phi i32 [ %734, %733 ], [ %730, %720 ]
  %737 = load i64*, i64** %116, align 8
  %738 = load i64, i64* %737, align 8
  %739 = add nsw i32 %736, 1
  store i32 %739, i32* %117, align 4
  %740 = shl nsw i32 %736, 1
  %741 = sext i32 %740 to i64
  %742 = add i64 %738, 11
  %743 = add i64 %742, %741
  %744 = inttoptr i64 %743 to i16*
  store i16 32, i16* %744, align 2
  %745 = load i32, i32* %117, align 4
  %746 = load i32, i32* %118, align 8
  %747 = icmp eq i32 %745, %746
  br i1 %747, label %748, label %169

748:                                              ; preds = %735
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #12
  br label %169
}

declare void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"*, %"class.v8::internal::Isolate"*) unnamed_addr #3

declare void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"*, i64*) local_unnamed_addr #3

declare i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal18SharedFunctionInfo10SourceSizeEv(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  %3 = tail call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* %0)
  %4 = sub nsw i32 %2, %3
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internallsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_12SourceCodeOfE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"struct.v8::internal::SourceCodeOf"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = alloca %"class.v8::internal::String", align 8
  %5 = alloca %"class.v8::internal::String", align 8
  %6 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"struct.v8::internal::SourceCodeOf", %"struct.v8::internal::SourceCodeOf"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %8, align 8
  %10 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i64 11) #12
  br label %85

13:                                               ; preds = %2
  %14 = bitcast %"class.v8::internal::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #12
  %15 = and i64 %9, -4294967296
  %16 = add i64 %9, 15
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 acquire, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %15, %19
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %15, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = icmp eq i16 %28, 100
  br i1 %29, label %30, label %36

30:                                               ; preds = %13
  %31 = add i64 %20, 11
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %15, %34
  br label %36

36:                                               ; preds = %13, %30
  %37 = phi i64 [ %35, %30 ], [ %20, %13 ]
  %38 = and i64 %37, -4294967296
  %39 = add i64 %37, 3
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %38, %42
  %44 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %43, i64* %44, align 8
  %45 = call zeroext i1 @_ZN2v88internal6String10LooksValidEv(%"class.v8::internal::String"* nonnull %4) #12
  br i1 %45, label %48, label %46

46:                                               ; preds = %36
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i64 16) #12
  br label %83

48:                                               ; preds = %36
  %49 = load i64, i64* %8, align 8
  %50 = add i64 %49, 27
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 134217728
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %48
  %56 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 9) #12
  %57 = bitcast %"class.v8::internal::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #12
  %58 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  %59 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %58, i64* %59, align 8
  %60 = add i64 %58, 7
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %55
  call void @_ZN2v88internal6String9PrintUC16ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEii(%"class.v8::internal::String"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0, i32 0, i32 -1) #12
  br label %65

65:                                               ; preds = %64, %55
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #12
  br label %66

66:                                               ; preds = %48, %65
  %67 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  %68 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  %69 = sub nsw i32 %67, %68
  %70 = getelementptr inbounds %"struct.v8::internal::SourceCodeOf", %"struct.v8::internal::SourceCodeOf"* %1, i64 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = icmp sle i32 %69, %71
  %73 = icmp slt i32 %71, 0
  %74 = or i1 %72, %73
  %75 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  br i1 %74, label %76, label %78

76:                                               ; preds = %66
  %77 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  call void @_ZN2v88internal6String9PrintUC16ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEii(%"class.v8::internal::String"* nonnull %4, %"class.std::__1::basic_ostream"* dereferenceable(160) %0, i32 %75, i32 %77) #12
  br label %83

78:                                               ; preds = %66
  %79 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  %80 = load i32, i32* %70, align 8
  %81 = add nsw i32 %80, %79
  call void @_ZN2v88internal6String9PrintUC16ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEii(%"class.v8::internal::String"* nonnull %4, %"class.std::__1::basic_ostream"* dereferenceable(160) %0, i32 %75, i32 %81) #12
  %82 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i64 4) #12
  br label %83

83:                                               ; preds = %76, %78, %46
  %84 = phi %"class.std::__1::basic_ostream"* [ %47, %46 ], [ %0, %76 ], [ %82, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #12
  br label %85

85:                                               ; preds = %83, %11
  %86 = phi %"class.std::__1::basic_ostream"* [ %84, %83 ], [ %12, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %86
}

declare zeroext i1 @_ZN2v88internal6String10LooksValidEv(%"class.v8::internal::String"*) local_unnamed_addr #3

declare void @_ZN2v88internal6String9PrintUC16ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEii(%"class.v8::internal::String"*, %"class.std::__1::basic_ostream"* dereferenceable(160), i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo19DisableOptimizationENS0_13BailoutReasonE(%"class.v8::internal::SharedFunctionInfo"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 27
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, -7864321
  %9 = zext i8 %1 to i32
  %10 = shl nuw nsw i32 %9, 19
  %11 = or i32 %8, %10
  store atomic volatile i32 %11, i32* %6 monotonic, align 4
  %12 = load i64, i64* %3, align 8
  %13 = and i64 %12, -262144
  %14 = or i64 %13, 16
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 16
  %17 = add i64 %16, -41416
  %18 = inttoptr i64 %17 to %"class.v8::internal::Isolate"*
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 70, i32 0, i32 0, i32 0
  %20 = load %"class.v8::internal::CodeEventDispatcher"*, %"class.v8::internal::CodeEventDispatcher"** %19, align 8
  %21 = and i64 %12, -4294967296
  %22 = add i64 %12, 3
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 acquire, align 4
  %25 = zext i32 %24 to i64
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %57, label %28

28:                                               ; preds = %2
  %29 = or i64 %21, %25
  %30 = add i64 %29, -1
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %21, %33
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i16*
  %37 = load atomic i16, i16* %36 monotonic, align 2
  %38 = icmp eq i16 %37, 133
  br i1 %38, label %55, label %39

39:                                               ; preds = %28
  %40 = load atomic i32, i32* %31 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %21, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = icmp eq i16 %45, 105
  br i1 %46, label %55, label %47

47:                                               ; preds = %39
  %48 = load atomic i32, i32* %31 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %21, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = icmp eq i16 %53, 94
  br i1 %54, label %55, label %57

55:                                               ; preds = %47, %39, %28
  %56 = tail call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* %0, %"class.v8::internal::Isolate"* %18) #12
  br label %59

57:                                               ; preds = %47, %2
  %58 = tail call i64 @_ZNK2v88internal18SharedFunctionInfo7GetCodeEv(%"class.v8::internal::SharedFunctionInfo"* %0) #12
  br label %59

59:                                               ; preds = %55, %57
  %60 = phi i64 [ %56, %55 ], [ %58, %57 ]
  %61 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 31, i32 4
  %62 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %61, align 8
  %63 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %59
  %65 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %62, i64 %60) #12
  br label %79

66:                                               ; preds = %59
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 31, i32 0
  %68 = load i64*, i64** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 31, i32 1
  %70 = load i64*, i64** %69, align 8
  %71 = icmp eq i64* %68, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %18) #12
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64* [ %73, %72 ], [ %68, %66 ]
  %76 = ptrtoint i64* %75 to i64
  %77 = add i64 %76, 8
  %78 = inttoptr i64 %77 to i64*
  store i64* %78, i64** %67, align 8
  store i64 %60, i64* %75, align 8
  br label %79

79:                                               ; preds = %64, %74
  %80 = phi i64* [ %65, %64 ], [ %75, %74 ]
  %81 = load i64, i64* %3, align 8
  %82 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %61, align 8
  %83 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %79
  %85 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %82, i64 %81) #12
  br label %99

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 31, i32 0
  %88 = load i64*, i64** %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 31, i32 1
  %90 = load i64*, i64** %89, align 8
  %91 = icmp eq i64* %88, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %86
  %93 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %18) #12
  br label %94

94:                                               ; preds = %92, %86
  %95 = phi i64* [ %93, %92 ], [ %88, %86 ]
  %96 = ptrtoint i64* %95 to i64
  %97 = add i64 %96, 8
  %98 = inttoptr i64 %97 to i64*
  store i64* %98, i64** %87, align 8
  store i64 %81, i64* %95, align 8
  br label %99

99:                                               ; preds = %84, %94
  %100 = phi i64* [ %85, %84 ], [ %95, %94 ]
  %101 = bitcast %"class.v8::internal::CodeEventDispatcher"* %20 to void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)***
  %102 = load void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)**, void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)*** %101, align 8
  %103 = getelementptr inbounds void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)*, void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)** %102, i64 15
  %104 = load void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)*, void (%"class.v8::internal::CodeEventDispatcher"*, i64*, i64*)** %103, align 8
  tail call void %104(%"class.v8::internal::CodeEventDispatcher"* %20, i64* %80, i64* %100) #12
  %105 = load i8, i8* @_ZN2v88internal14FLAG_trace_optE, align 1, !range !2
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %143, label %107

107:                                              ; preds = %99
  %108 = tail call %"class.v8::internal::CodeTracer"* @_ZN2v88internal7Isolate13GetCodeTracerEv(%"class.v8::internal::Isolate"* %18) #12
  %109 = load i8, i8* @_ZN2v88internal25FLAG_redirect_code_tracesE, align 1, !range !2
  %110 = icmp eq i8 %109, 0
  %111 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %108, i64 0, i32 1
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %111, align 8
  br i1 %110, label %126, label %113

113:                                              ; preds = %107
  %114 = icmp eq %struct._IO_FILE* %112, null
  br i1 %114, label %115, label %121

115:                                              ; preds = %113
  %116 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %108, i64 0, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = tail call %struct._IO_FILE* @_ZN2v84base2OS5FOpenEPKcS3_(i8* %117, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #12
  store %struct._IO_FILE* %118, %struct._IO_FILE** %111, align 8
  %119 = icmp eq %struct._IO_FILE* %118, null
  br i1 %119, label %120, label %121, !prof !3

120:                                              ; preds = %115
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)) #13
  unreachable

121:                                              ; preds = %115, %113
  %122 = phi %struct._IO_FILE* [ %118, %115 ], [ %112, %113 ]
  %123 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %108, i64 0, i32 2
  %124 = load i32, i32* %123, align 8
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %123, align 8
  br label %126

126:                                              ; preds = %107, %121
  %127 = phi %struct._IO_FILE* [ %122, %121 ], [ %112, %107 ]
  %128 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %108, i64 0, i32 1
  tail call void (%struct._IO_FILE*, i8*, ...) @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE* %127, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0)) #12
  %129 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** %128, align 8
  tail call void @_ZNK2v88internal6Object10ShortPrintEP8_IO_FILE(%"class.v8::internal::Object"* %129, %struct._IO_FILE* %130) #12
  %131 = load %struct._IO_FILE*, %struct._IO_FILE** %128, align 8
  %132 = tail call i8* @_ZN2v88internal16GetBailoutReasonENS0_13BailoutReasonE(i8 zeroext %1) #12
  tail call void (%struct._IO_FILE*, i8*, ...) @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE* %131, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* %132) #12
  %133 = load i8, i8* @_ZN2v88internal25FLAG_redirect_code_tracesE, align 1, !range !2
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %126
  %136 = getelementptr inbounds %"class.v8::internal::CodeTracer", %"class.v8::internal::CodeTracer"* %108, i64 0, i32 2
  %137 = load i32, i32* %136, align 8
  %138 = add nsw i32 %137, -1
  store i32 %138, i32* %136, align 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %135
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %128, align 8
  %142 = tail call i32 @fclose(%struct._IO_FILE* %141) #12
  store %struct._IO_FILE* null, %struct._IO_FILE** %128, align 8
  br label %143

143:                                              ; preds = %140, %135, %126, %99
  ret void
}

declare i8* @_ZN2v88internal16GetBailoutReasonENS0_13BailoutReasonE(i8 zeroext) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo15HasPositionInfoEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i32 @_ZNK2v88internal9ScopeInfo13StartPositionEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"*) local_unnamed_addr #3

declare i32 @_ZNK2v88internal9ScopeInfo11EndPositionEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo11SetPositionEii(%"class.v8::internal::SharedFunctionInfo"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %5 = alloca %"class.v8::internal::ScopeInfo", align 8
  %6 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, -4294967296
  %9 = add i64 %7, 7
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 acquire, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %8, %12
  %14 = and i64 %12, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %32, label %16

16:                                               ; preds = %3
  %17 = add i64 %13, -1
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %8, %20
  %22 = add i64 %21, 7
  %23 = inttoptr i64 %22 to i16*
  %24 = load atomic i16, i16* %23 monotonic, align 2
  %25 = icmp eq i16 %24, 178
  br i1 %25, label %26, label %32

26:                                               ; preds = %16
  %27 = bitcast %"class.v8::internal::ScopeInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %13, i64* %28, align 8
  %29 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasPositionInfoEv(%"class.v8::internal::ScopeInfo"* nonnull %5) #12
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  call void @_ZN2v88internal9ScopeInfo15SetPositionInfoEii(%"class.v8::internal::ScopeInfo"* nonnull %5, i32 %1, i32 %2) #12
  br label %31

31:                                               ; preds = %30, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #12
  br label %145

32:                                               ; preds = %3, %16
  %33 = load i64, i64* %6, align 8
  %34 = and i64 %33, -4294967296
  %35 = add i64 %33, 3
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = zext i32 %37 to i64
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %144, label %41

41:                                               ; preds = %32
  %42 = or i64 %34, %38
  %43 = add i64 %42, -1
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %34, %46
  %48 = add i64 %47, 7
  %49 = inttoptr i64 %48 to i16*
  %50 = load atomic i16, i16* %49 monotonic, align 2
  %51 = add i16 %50, -157
  %52 = icmp ult i16 %51, 2
  br i1 %52, label %53, label %144

53:                                               ; preds = %41
  %54 = load i64, i64* %6, align 8
  %55 = and i64 %54, -4294967296
  %56 = add i64 %54, 3
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 acquire, align 4
  %59 = zext i32 %58 to i64
  %60 = and i64 %59, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %125, label %62

62:                                               ; preds = %53
  %63 = or i64 %55, %59
  %64 = add i64 %63, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %55, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 157
  br i1 %72, label %73, label %125

73:                                               ; preds = %62
  %74 = load i64, i64* %6, align 8
  %75 = and i64 %74, -4294967296
  %76 = add i64 %74, 3
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 acquire, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %75, %79
  %81 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %81) #12
  %82 = and i64 %80, -262144
  %83 = or i64 %82, 16
  %84 = inttoptr i64 %83 to %"class.v8::internal::Heap"**
  %85 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %84, align 16
  call void @_ZN2v88internal4Heap24NotifyObjectLayoutChangeENS0_10HeapObjectERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS4_ILS5_1ELb0EEEEEENS0_23InvalidateRecordedSlotsE(%"class.v8::internal::Heap"* %85, i64 %80, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %4, i32 0) #12
  %86 = load i64, i64* %6, align 8
  %87 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %88 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %87, null
  br i1 %88, label %95, label %89

89:                                               ; preds = %73
  %90 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %87, i64 0, i32 0, i32 1
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %87, i64 0, i32 1, i64 0
  br label %103

95:                                               ; preds = %89, %73
  %96 = and i64 %86, -262144
  %97 = or i64 %96, 16
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98, align 16
  %100 = add i64 %99, -41416
  %101 = inttoptr i64 %100 to %"class.v8::internal::Isolate"*
  %102 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %101, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %103

103:                                              ; preds = %95, %93
  %104 = phi i64* [ %102, %95 ], [ %94, %93 ]
  %105 = getelementptr inbounds i64, i64* %104, i64 564
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %80, -1
  %108 = inttoptr i64 %107 to i32*
  %109 = trunc i64 %106 to i32
  store atomic volatile i32 %109, i32* %108 release, align 4
  %110 = icmp eq i32 %109, 0
  %111 = and i64 %106, 1
  %112 = icmp eq i64 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %122, label %114

114:                                              ; preds = %103
  %115 = or i64 %82, 8
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = and i64 %117, 262144
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %114
  %121 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %84, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %121, i64 %80, i64 0, i64 %106) #12
  br label %122

122:                                              ; preds = %103, %114, %120
  %123 = add i64 %80, 15
  %124 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %85, i64 %123, i32 4, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %81) #12
  br label %125

125:                                              ; preds = %53, %122, %62
  %126 = load i64, i64* %6, align 8
  %127 = and i64 %126, -4294967296
  %128 = add i64 %126, 3
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 acquire, align 4
  %131 = zext i32 %130 to i64
  %132 = or i64 %127, %131
  %133 = add i64 %132, 7
  %134 = inttoptr i64 %133 to i32*
  store i32 %1, i32* %134, align 4
  %135 = load i64, i64* %6, align 8
  %136 = and i64 %135, -4294967296
  %137 = add i64 %135, 3
  %138 = inttoptr i64 %137 to i32*
  %139 = load atomic i32, i32* %138 acquire, align 4
  %140 = zext i32 %139 to i64
  %141 = or i64 %136, %140
  %142 = add i64 %141, 11
  %143 = inttoptr i64 %142 to i32*
  store i32 %2, i32* %143, align 4
  br label %145

144:                                              ; preds = %32, %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #13
  unreachable

145:                                              ; preds = %125, %31
  ret void
}

declare void @_ZN2v88internal9ScopeInfo15SetPositionInfoEii(%"class.v8::internal::ScopeInfo"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo30EnsureSourcePositionsAvailableEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = load i8, i8* @_ZN2v88internal33FLAG_enable_lazy_source_positionsE, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  br i1 %5, label %113, label %7

7:                                                ; preds = %2
  %8 = load i64, i64* %1, align 8
  %9 = and i64 %8, -4294967296
  %10 = add i64 %8, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = zext i32 %12 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %112, label %16

16:                                               ; preds = %7
  %17 = or i64 %9, %13
  %18 = add i64 %17, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %9, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp eq i16 %25, 133
  br i1 %26, label %43, label %27

27:                                               ; preds = %16
  %28 = load atomic i32, i32* %19 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %9, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp eq i16 %33, 105
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = load atomic i32, i32* %19 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %9, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i16*
  %41 = load atomic i16, i16* %40 monotonic, align 2
  %42 = icmp eq i16 %41, 94
  br i1 %42, label %43, label %112

43:                                               ; preds = %16, %27, %35
  %44 = load i64, i64* %1, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %47 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %46, %"class.v8::internal::Isolate"* %0)
  %48 = and i64 %47, -4294967296
  %49 = add i64 %47, 15
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 acquire, align 4
  %52 = zext i32 %51 to i64
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %80, label %55

55:                                               ; preds = %43
  %56 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %57 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %56, null
  br i1 %57, label %64, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %56, i64 0, i32 0, i32 1
  %60 = load i8, i8* %59, align 8, !range !2
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %56, i64 0, i32 1, i64 0
  br label %73

64:                                               ; preds = %58, %55
  %65 = and i64 %52, 4294705152
  %66 = or i64 %48, %65
  %67 = or i64 %66, 16
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68, align 16
  %70 = add i64 %69, -41416
  %71 = inttoptr i64 %70 to %"class.v8::internal::Isolate"*
  %72 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %71, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %73

73:                                               ; preds = %64, %62
  %74 = phi i64* [ %72, %64 ], [ %63, %62 ]
  %75 = getelementptr inbounds i64, i64* %74, i64 4
  %76 = load i64, i64* %75, align 8
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %51, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  br label %110

80:                                               ; preds = %73, %43
  %81 = load atomic i32, i32* %50 acquire, align 4
  %82 = zext i32 %81 to i64
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  br label %114

86:                                               ; preds = %80
  %87 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %88 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %87, null
  br i1 %88, label %95, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %87, i64 0, i32 0, i32 1
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %87, i64 0, i32 1, i64 0
  br label %104

95:                                               ; preds = %89, %86
  %96 = and i64 %82, 4294705152
  %97 = or i64 %48, %96
  %98 = or i64 %97, 16
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99, align 16
  %101 = add i64 %100, -41416
  %102 = inttoptr i64 %101 to %"class.v8::internal::Isolate"*
  %103 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %102, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %104

104:                                              ; preds = %93, %95
  %105 = phi i64* [ %103, %95 ], [ %94, %93 ]
  %106 = getelementptr inbounds i64, i64* %105, i64 32
  %107 = load i64, i64* %106, align 8
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %81, %108
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  br i1 %109, label %110, label %114

110:                                              ; preds = %104, %79
  %111 = call zeroext i1 @_ZN2v88internal8Compiler22CollectSourcePositionsEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEE(%"class.v8::internal::Isolate"* %0, i64* %1) #12
  br label %114

112:                                              ; preds = %7, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  br label %114

113:                                              ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  br label %114

114:                                              ; preds = %104, %85, %113, %112, %110
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %55

20:                                               ; preds = %2
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 acquire, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %22, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp eq i16 %40, 133
  br i1 %41, label %42, label %55

42:                                               ; preds = %20
  %43 = load i64, i64* %3, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 acquire, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  %50 = add i64 %49, 15
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %44, %53
  br label %120

55:                                               ; preds = %2, %20
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 3
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %114, label %65

65:                                               ; preds = %55
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 133
  br i1 %74, label %120, label %75

75:                                               ; preds = %65
  %76 = load atomic i32, i32* %67 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %57, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 94
  br i1 %82, label %83, label %114

83:                                               ; preds = %75
  %84 = load i64, i64* %3, align 8
  %85 = and i64 %84, -4294967296
  %86 = add i64 %84, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %85, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %85, %94
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %83
  %99 = add i64 %95, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %85, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = icmp eq i16 %106, 133
  br i1 %107, label %120, label %108

108:                                              ; preds = %98, %83
  %109 = add i64 %95, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %85, %112
  br label %120

114:                                              ; preds = %75, %55
  %115 = add i64 %62, 3
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %57, %118
  br label %120

120:                                              ; preds = %114, %108, %98, %65, %42
  %121 = phi i64 [ %54, %42 ], [ %119, %114 ], [ %62, %65 ], [ %113, %108 ], [ %95, %98 ]
  ret i64 %121
}

declare zeroext i1 @_ZN2v88internal8Compiler22CollectSourcePositionsEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo20InstallDebugBytecodeENS0_6HandleIS1_EEPNS0_7IsolateE(i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = load i64, i64* %0, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %9 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %8, %"class.v8::internal::Isolate"* %1)
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %11 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %10, align 8
  %12 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %11, i64 %9) #12
  br label %28

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %19 = load i64*, i64** %18, align 8
  %20 = icmp eq i64* %17, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #12
  br label %23

23:                                               ; preds = %21, %15
  %24 = phi i64* [ %22, %21 ], [ %17, %15 ]
  %25 = ptrtoint i64* %24 to i64
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %26 to i64*
  store i64* %27, i64** %16, align 8
  store i64 %9, i64* %24, align 8
  br label %28

28:                                               ; preds = %13, %23
  %29 = phi i64* [ %14, %13 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %30 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::Factory"*
  %31 = call i64* @_ZN2v88internal7Factory17CopyBytecodeArrayENS0_6HandleINS0_13BytecodeArrayEEE(%"class.v8::internal::Factory"* %30, i64* %29) #12
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 19
  call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %32) #12
  %33 = load i64, i64* %0, align 8
  %34 = and i64 %33, -4294967296
  %35 = add i64 %33, 15
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %34, %38
  %40 = load i64, i64* %29, align 8
  %41 = add i64 %39, 15
  %42 = inttoptr i64 %41 to i32*
  %43 = trunc i64 %40 to i32
  store atomic volatile i32 %43, i32* %42 release, align 4
  %44 = and i64 %40, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %28
  %47 = and i64 %39, -262144
  %48 = or i64 %47, 8
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, 262144
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %46
  %54 = or i64 %47, 16
  %55 = inttoptr i64 %54 to %"class.v8::internal::Heap"**
  %56 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %55, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %56, i64 %39, i64 %41, i64 %40) #12
  br label %57

57:                                               ; preds = %53, %46, %28
  %58 = and i64 %40, -262144
  %59 = or i64 %58, 8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = and i64 %61, 24
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %57
  %65 = and i64 %39, -262144
  %66 = or i64 %65, 8
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, 24
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %64
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %39, i64 %41, i64 %40) #12
  br label %72

72:                                               ; preds = %57, %64, %71
  %73 = load i64, i64* %31, align 8
  %74 = add i64 %39, 19
  %75 = inttoptr i64 %74 to i32*
  %76 = trunc i64 %73 to i32
  store atomic volatile i32 %76, i32* %75 release, align 4
  %77 = and i64 %73, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %72
  %80 = and i64 %39, -262144
  %81 = or i64 %80, 8
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, 262144
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %79
  %87 = or i64 %80, 16
  %88 = inttoptr i64 %87 to %"class.v8::internal::Heap"**
  %89 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %88, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %89, i64 %39, i64 %74, i64 %73) #12
  br label %90

90:                                               ; preds = %86, %79, %72
  %91 = and i64 %73, -262144
  %92 = or i64 %91, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 24
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %90
  %98 = and i64 %39, -262144
  %99 = or i64 %98, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, 24
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %39, i64 %74, i64 %73) #12
  br label %105

105:                                              ; preds = %90, %97, %104
  %106 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #12
  %107 = load i64, i64* %0, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %110 = load i64, i64* %31, align 8
  call void @_ZN2v88internal18SharedFunctionInfo22SetActiveBytecodeArrayENS0_13BytecodeArrayE(%"class.v8::internal::SharedFunctionInfo"* nonnull %109, i64 %110)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #12
  call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %32) #12
  ret void
}

declare i64* @_ZN2v88internal7Factory17CopyBytecodeArrayENS0_6HandleINS0_13BytecodeArrayEEE(%"class.v8::internal::Factory"*, i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal18SharedFunctionInfo22SetActiveBytecodeArrayENS0_13BytecodeArrayE(%"class.v8::internal::SharedFunctionInfo"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %157, label %12

12:                                               ; preds = %2
  %13 = or i64 %5, %9
  %14 = add i64 %13, -1
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = icmp eq i16 %21, 133
  br i1 %22, label %23, label %62

23:                                               ; preds = %12
  %24 = load i64, i64* %3, align 8
  %25 = add i64 %24, 3
  %26 = inttoptr i64 %25 to i32*
  %27 = trunc i64 %1 to i32
  store atomic volatile i32 %27, i32* %26 release, align 4
  %28 = load i64, i64* %3, align 8
  %29 = add i64 %28, 3
  %30 = and i64 %1, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %216, label %32

32:                                               ; preds = %23
  %33 = and i64 %28, -262144
  %34 = or i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = and i64 %36, 262144
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %32
  %40 = or i64 %33, 16
  %41 = inttoptr i64 %40 to %"class.v8::internal::Heap"**
  %42 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %41, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %42, i64 %28, i64 %29, i64 %1) #12
  %43 = load i64, i64* %3, align 8
  %44 = add i64 %43, 3
  br label %45

45:                                               ; preds = %39, %32
  %46 = phi i64 [ %44, %39 ], [ %29, %32 ]
  %47 = phi i64 [ %43, %39 ], [ %28, %32 ]
  %48 = and i64 %1, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 24
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %216, label %54

54:                                               ; preds = %45
  %55 = and i64 %47, -262144
  %56 = or i64 %55, 8
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 24
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %216

61:                                               ; preds = %54
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %47, i64 %46, i64 %1) #12
  br label %216

62:                                               ; preds = %12
  %63 = load atomic i32, i32* %15 monotonic, align 4
  %64 = zext i32 %63 to i64
  %65 = or i64 %5, %64
  %66 = add i64 %65, 7
  %67 = inttoptr i64 %66 to i16*
  %68 = load atomic i16, i16* %67 monotonic, align 2
  %69 = icmp eq i16 %68, 94
  br i1 %69, label %70, label %157

70:                                               ; preds = %62
  %71 = load i64, i64* %3, align 8
  %72 = and i64 %71, -4294967296
  %73 = add i64 %71, 3
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 acquire, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %72, %76
  %78 = add i64 %77, 7
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i64
  %82 = or i64 %72, %81
  %83 = and i64 %81, 1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %125, label %85

85:                                               ; preds = %70
  %86 = add i64 %82, -1
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %72, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = icmp eq i16 %93, 133
  br i1 %94, label %95, label %125

95:                                               ; preds = %85
  %96 = trunc i64 %1 to i32
  store atomic volatile i32 %96, i32* %79 monotonic, align 4
  %97 = and i64 %1, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %95
  %100 = and i64 %77, -262144
  %101 = or i64 %100, 8
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = and i64 %103, 262144
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %99
  %107 = or i64 %100, 16
  %108 = inttoptr i64 %107 to %"class.v8::internal::Heap"**
  %109 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %108, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %109, i64 %77, i64 %78, i64 %1) #12
  br label %110

110:                                              ; preds = %106, %99, %95
  %111 = and i64 %1, -262144
  %112 = or i64 %111, 8
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = and i64 %114, 24
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %216, label %117

117:                                              ; preds = %110
  %118 = and i64 %77, -262144
  %119 = or i64 %118, 8
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = and i64 %121, 24
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %216

124:                                              ; preds = %117
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %77, i64 %78, i64 %1) #12
  br label %216

125:                                              ; preds = %85, %70
  %126 = add i64 %82, 3
  %127 = inttoptr i64 %126 to i32*
  %128 = trunc i64 %1 to i32
  store atomic volatile i32 %128, i32* %127 monotonic, align 4
  %129 = and i64 %1, 1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %125
  %132 = and i64 %82, -262144
  %133 = or i64 %132, 8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = and i64 %135, 262144
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %142, label %138

138:                                              ; preds = %131
  %139 = or i64 %132, 16
  %140 = inttoptr i64 %139 to %"class.v8::internal::Heap"**
  %141 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %140, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %141, i64 %82, i64 %126, i64 %1) #12
  br label %142

142:                                              ; preds = %138, %131, %125
  %143 = and i64 %1, -262144
  %144 = or i64 %143, 8
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, 24
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %216, label %149

149:                                              ; preds = %142
  %150 = and i64 %82, -262144
  %151 = or i64 %150, 8
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = and i64 %153, 24
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %216

156:                                              ; preds = %149
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %82, i64 %126, i64 %1) #12
  br label %216

157:                                              ; preds = %2, %62
  %158 = load i64, i64* %3, align 8
  %159 = and i64 %158, -4294967296
  %160 = add i64 %158, 3
  %161 = inttoptr i64 %160 to i32*
  %162 = load atomic i32, i32* %161 acquire, align 4
  %163 = zext i32 %162 to i64
  %164 = or i64 %159, %163
  %165 = and i64 %163, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %183, label %167

167:                                              ; preds = %157
  %168 = add i64 %164, -1
  %169 = inttoptr i64 %168 to i32*
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = zext i32 %170 to i64
  %172 = or i64 %159, %171
  %173 = add i64 %172, 7
  %174 = inttoptr i64 %173 to i16*
  %175 = load atomic i16, i16* %174 monotonic, align 2
  %176 = icmp eq i16 %175, 94
  br i1 %176, label %177, label %183

177:                                              ; preds = %167
  %178 = add i64 %164, 7
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  %182 = or i64 %159, %181
  br label %183

183:                                              ; preds = %157, %167, %177
  %184 = phi i64 [ %182, %177 ], [ %164, %167 ], [ %164, %157 ]
  %185 = add i64 %184, 3
  %186 = inttoptr i64 %185 to i32*
  %187 = trunc i64 %1 to i32
  store atomic volatile i32 %187, i32* %186 monotonic, align 4
  %188 = and i64 %1, 1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %183
  %191 = and i64 %184, -262144
  %192 = or i64 %191, 8
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = and i64 %194, 262144
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %201, label %197

197:                                              ; preds = %190
  %198 = or i64 %191, 16
  %199 = inttoptr i64 %198 to %"class.v8::internal::Heap"**
  %200 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %199, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %200, i64 %184, i64 %185, i64 %1) #12
  br label %201

201:                                              ; preds = %197, %190, %183
  %202 = and i64 %1, -262144
  %203 = or i64 %202, 8
  %204 = inttoptr i64 %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = and i64 %205, 24
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %216, label %208

208:                                              ; preds = %201
  %209 = and i64 %184, -262144
  %210 = or i64 %209, 8
  %211 = inttoptr i64 %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = and i64 %212, 24
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %208
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %184, i64 %185, i64 %1) #12
  br label %216

216:                                              ; preds = %215, %208, %201, %110, %117, %124, %142, %149, %156, %61, %54, %45, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18SharedFunctionInfo22UninstallDebugBytecodeES1_PNS0_7IsolateE(i64, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 19
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %5) #12
  %6 = and i64 %0, -4294967296
  %7 = add i64 %0, 15
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = add i64 %11, 15
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 acquire, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %6, %15
  call void @_ZN2v88internal18SharedFunctionInfo22SetActiveBytecodeArrayENS0_13BytecodeArrayE(%"class.v8::internal::SharedFunctionInfo"* nonnull %3, i64 %16)
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  store atomic volatile i32 %19, i32* %13 release, align 4
  %20 = and i64 %18, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %2
  %23 = and i64 %11, -262144
  %24 = or i64 %23, 8
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, 262144
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %22
  %30 = or i64 %23, 16
  %31 = inttoptr i64 %30 to %"class.v8::internal::Heap"**
  %32 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %31, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %32, i64 %11, i64 %12, i64 %18) #12
  br label %33

33:                                               ; preds = %29, %22, %2
  %34 = and i64 %18, -262144
  %35 = or i64 %34, 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %33
  %41 = and i64 %11, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 24
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %11, i64 %12, i64 %18) #12
  br label %48

48:                                               ; preds = %33, %40, %47
  %49 = load i64, i64* %17, align 8
  %50 = add i64 %11, 19
  %51 = inttoptr i64 %50 to i32*
  %52 = trunc i64 %49 to i32
  store atomic volatile i32 %52, i32* %51 release, align 4
  %53 = and i64 %49, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %66, label %55

55:                                               ; preds = %48
  %56 = and i64 %11, -262144
  %57 = or i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 262144
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %55
  %63 = or i64 %56, 16
  %64 = inttoptr i64 %63 to %"class.v8::internal::Heap"**
  %65 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %64, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %65, i64 %11, i64 %50, i64 %49) #12
  br label %66

66:                                               ; preds = %62, %55, %48
  %67 = and i64 %49, -262144
  %68 = or i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = and i64 %70, 24
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %66
  %74 = and i64 %11, -262144
  %75 = or i64 %74, 8
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = and i64 %77, 24
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %73
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %11, i64 %50, i64 %49) #12
  br label %81

81:                                               ; preds = %66, %73, %80
  call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %5) #12
  ret void
}

declare i64* @_ZNK2v88internal13AstConsString8AllocateINS0_7IsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64* @_ZNK2v88internal13AstConsString8AllocateINS0_12LocalIsolateEEENS0_6HandleINS0_6StringEEEPT_(%"class.v8::internal::AstConsString"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #3

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #3

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare void @_ZN2v88internal4Heap24NotifyObjectLayoutChangeENS0_10HeapObjectERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS4_ILS5_1ELb0EEEEEENS0_23InvalidateRecordedSlotsE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1), i32) local_unnamed_addr #3

declare i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"*, i64, i32, i32) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo23HasInferredFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9ScopeInfo20InferredFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

declare %struct._IO_FILE* @_ZN2v84base2OS5FOpenEPKcS3_(i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #8

declare i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"*, i64*, i32, i32) local_unnamed_addr #3

declare void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #15
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #12
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #9

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

declare void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #3

declare void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #11

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64 @_ZN2v84base12hash_combineEmm(i64, i64) local_unnamed_addr #3

declare i64 @_ZN2v84base10hash_valueEj(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFvN2v88internal10HeapObjectENS3_20CompressedObjectSlotES4_EE11__call_implINS0_20__default_alloc_funcIZNS3_18SharedFunctionInfo23DiscardCompiledMetadataEPNS3_7IsolateENS_8functionIS6_EEEd_UlS4_S5_S4_E_S6_EEEEvPKNS0_16__policy_storageEOS4_OS5_SK_(%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"* dereferenceable(8), %"class.v8::internal::CompressedObjectSlot"* dereferenceable(8), %"class.v8::internal::HeapObject"* dereferenceable(8)) #0 comdat align 2 {
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readonly }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
