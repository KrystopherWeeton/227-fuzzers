; ModuleID = '../../third_party/webrtc/rtc_base/ssl_adapter.cc'
source_filename = "../../third_party/webrtc/rtc_base/ssl_adapter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.rtc::SSLAdapterFactory" = type { i32 (...)** }
%"class.rtc::OpenSSLAdapterFactory" = type { %"class.rtc::SSLAdapterFactory", i32, %"class.std::__1::unique_ptr", %"class.rtc::SSLCertificateVerifier"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.rtc::OpenSSLSessionCache"* }
%"class.rtc::OpenSSLSessionCache" = type { i32, %struct.ssl_ctx_st*, %"class.std::__1::map" }
%struct.ssl_ctx_st = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.rtc::SSLCertificateVerifier" = type { i32 (...)** }
%"class.rtc::SSLAdapter" = type { %"class.rtc::AsyncSocketAdapter" }
%"class.rtc::AsyncSocketAdapter" = type { %"class.rtc::AsyncSocket", %"class.sigslot::has_slots", %"class.rtc::AsyncSocket"* }
%"class.rtc::AsyncSocket" = type { %"class.rtc::Socket", %"class.sigslot::signal_with_thread_policy", %"class.sigslot::signal_with_thread_policy", %"class.sigslot::signal_with_thread_policy.11", %"class.sigslot::signal_with_thread_policy.15" }
%"class.rtc::Socket" = type { i32 (...)** }
%"class.sigslot::signal_with_thread_policy" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::_signal_base.base" = type <{ %"class.sigslot::_signal_base_interface", %"class.sigslot::multi_threaded_local", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.sigslot::_signal_base_interface" = type { void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::has_slots_interface" = type { i32 (...)**, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::multi_threaded_local" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.7" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"class.sigslot::signal_with_thread_policy.11" = type { %"class.sigslot::_signal_base.base.13", [7 x i8] }
%"class.sigslot::_signal_base.base.13" = type <{ %"class.sigslot::_signal_base_interface", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.sigslot::signal_with_thread_policy.15" = type { %"class.sigslot::_signal_base.base.13", [7 x i8] }
%"class.sigslot::has_slots" = type { %"class.sigslot::has_slots_interface", %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.17" }
%"class.std::__1::__tree.17" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.rtc::OpenSSLAdapter" = type <{ %"class.rtc::SSLAdapter", %"class.rtc::MessageHandlerAutoCleanup", %"class.rtc::OpenSSLSessionCache"*, %"class.rtc::SSLCertificateVerifier"*, i32, [4 x i8], %"class.std::__1::unique_ptr.26", i32, i8, i8, [2 x i8], %"class.rtc::BufferT", %struct.ssl_st*, %struct.ssl_ctx_st*, %"class.std::__1::basic_string", i32, i8, [3 x i8], %"class.std::__1::vector.66", %"class.std::__1::vector.66", i8, [7 x i8] }>
%"class.rtc::MessageHandlerAutoCleanup" = type { %"class.rtc::MessageHandler" }
%"class.rtc::MessageHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.rtc::BoringSSLIdentity"* }
%"class.rtc::BoringSSLIdentity" = type { %"class.rtc::SSLIdentity", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35" }
%"class.rtc::SSLIdentity" = type { i32 (...)** }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.rtc::OpenSSLKeyPair"* }
%"class.rtc::OpenSSLKeyPair" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type opaque
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.rtc::SSLCertChain"* }
%"class.rtc::SSLCertChain" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.rtc::SSLCertificate"* }
%"class.rtc::SSLCertificate" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::unique_ptr.38"* }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr.55" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i8* }
%struct.ssl_st = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::basic_string"* }

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.rtc::SSLAdapterFactory"* @_ZN3rtc17SSLAdapterFactory6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 32) #3
  %2 = bitcast i8* %1 to %"class.rtc::OpenSSLAdapterFactory"*
  tail call void @_ZN3rtc21OpenSSLAdapterFactoryC1Ev(%"class.rtc::OpenSSLAdapterFactory"* nonnull %2) #4
  %3 = bitcast i8* %1 to %"class.rtc::SSLAdapterFactory"*
  ret %"class.rtc::SSLAdapterFactory"* %3
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare void @_ZN3rtc21OpenSSLAdapterFactoryC1Ev(%"class.rtc::OpenSSLAdapterFactory"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.rtc::SSLAdapter"* @_ZN3rtc10SSLAdapter6CreateEPNS_11AsyncSocketE(%"class.rtc::AsyncSocket"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 552) #3
  %3 = bitcast i8* %2 to %"class.rtc::OpenSSLAdapter"*
  tail call void @_ZN3rtc14OpenSSLAdapterC1EPNS_11AsyncSocketEPNS_19OpenSSLSessionCacheEPNS_22SSLCertificateVerifierE(%"class.rtc::OpenSSLAdapter"* nonnull %3, %"class.rtc::AsyncSocket"* %0, %"class.rtc::OpenSSLSessionCache"* null, %"class.rtc::SSLCertificateVerifier"* null) #4
  %4 = bitcast i8* %2 to %"class.rtc::SSLAdapter"*
  ret %"class.rtc::SSLAdapter"* %4
}

declare void @_ZN3rtc14OpenSSLAdapterC1EPNS_11AsyncSocketEPNS_19OpenSSLSessionCacheEPNS_22SSLCertificateVerifierE(%"class.rtc::OpenSSLAdapter"*, %"class.rtc::AsyncSocket"*, %"class.rtc::OpenSSLSessionCache"*, %"class.rtc::SSLCertificateVerifier"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc13InitializeSSLEv() local_unnamed_addr #0 {
  %1 = tail call zeroext i1 @_ZN3rtc14OpenSSLAdapter13InitializeSSLEv() #4
  ret i1 %1
}

declare zeroext i1 @_ZN3rtc14OpenSSLAdapter13InitializeSSLEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc10CleanupSSLEv() local_unnamed_addr #0 {
  %1 = tail call zeroext i1 @_ZN3rtc14OpenSSLAdapter10CleanupSSLEv() #4
  ret i1 %1
}

declare zeroext i1 @_ZN3rtc14OpenSSLAdapter10CleanupSSLEv() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { builtin nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
