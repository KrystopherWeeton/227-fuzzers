; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/StringMap.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/StringMap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::StringMapImpl" = type { %"class.llvm::StringMapEntryBase"**, i32, i32, i32, i32 }
%"class.llvm::StringMapEntryBase" = type { i32 }

@_ZN4llvm13StringMapImplC1Ejj = hidden unnamed_addr alias void (%"class.llvm::StringMapImpl"*, i32, i32), void (%"class.llvm::StringMapImpl"*, i32, i32)* @_ZN4llvm13StringMapImplC2Ejj

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZN4llvm13StringMapImplC2Ejj(%"class.llvm::StringMapImpl"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 4
  store i32 %2, i32* %4, align 4
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %3
  %7 = shl i32 %1, 2
  %8 = udiv i32 %7, 3
  %9 = add nuw nsw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = lshr i64 %10, 1
  %12 = or i64 %11, %10
  %13 = lshr i64 %12, 2
  %14 = or i64 %13, %12
  %15 = lshr i64 %14, 4
  %16 = or i64 %15, %14
  %17 = lshr i64 %16, 8
  %18 = or i64 %17, %16
  %19 = lshr i64 %18, 16
  %20 = or i64 %19, %18
  %21 = lshr i64 %20, 32
  %22 = or i64 %21, %20
  %23 = trunc i64 %22 to i32
  %24 = add i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 16, i32 %24
  %27 = add i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = tail call noalias i8* @calloc(i64 %28, i64 12) #6
  %30 = bitcast i8* %29 to %"class.llvm::StringMapEntryBase"**
  %31 = bitcast %"class.llvm::StringMapImpl"* %0 to i8**
  store i8* %29, i8** %31, align 8
  %32 = zext i32 %26 to i64
  %33 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %30, i64 %32
  store %"class.llvm::StringMapEntryBase"* inttoptr (i64 2 to %"class.llvm::StringMapEntryBase"*), %"class.llvm::StringMapEntryBase"** %33, align 8
  br label %36

34:                                               ; preds = %3
  %35 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 0
  store %"class.llvm::StringMapEntryBase"** null, %"class.llvm::StringMapEntryBase"*** %35, align 8
  br label %36

36:                                               ; preds = %34, %6
  %37 = phi i32 [ 0, %34 ], [ %26, %6 ]
  %38 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 1
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 2
  store i32 0, i32* %39, align 4
  %40 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  store i32 0, i32* %40, align 8
  ret void
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZN4llvm13StringMapImpl4initEj(%"class.llvm::StringMapImpl"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  %4 = select i1 %3, i32 16, i32 %1
  %5 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 1
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 2
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  store i32 0, i32* %7, align 8
  %8 = add i32 %4, 1
  %9 = zext i32 %8 to i64
  %10 = tail call noalias i8* @calloc(i64 %9, i64 12) #6
  %11 = bitcast i8* %10 to %"class.llvm::StringMapEntryBase"**
  %12 = bitcast %"class.llvm::StringMapImpl"* %0 to i8**
  store i8* %10, i8** %12, align 8
  %13 = zext i32 %4 to i64
  %14 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %11, i64 %13
  store %"class.llvm::StringMapEntryBase"* inttoptr (i64 2 to %"class.llvm::StringMapEntryBase"*), %"class.llvm::StringMapEntryBase"** %14, align 8
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm13StringMapImpl15LookupBucketForENS_9StringRefE(%"class.llvm::StringMapImpl"* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  store i32 16, i32* %4, align 8
  %8 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8
  %10 = tail call noalias i8* @calloc(i64 17, i64 12) #6
  %11 = bitcast %"class.llvm::StringMapImpl"* %0 to i8**
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 128
  %13 = bitcast i8* %12 to %"class.llvm::StringMapEntryBase"**
  store %"class.llvm::StringMapEntryBase"* inttoptr (i64 2 to %"class.llvm::StringMapEntryBase"*), %"class.llvm::StringMapEntryBase"** %13, align 8
  br label %14

14:                                               ; preds = %7, %3
  %15 = phi i32 [ 16, %7 ], [ %5, %3 ]
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %27, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %25, %17 ], [ 0, %14 ]
  %19 = phi i32 [ %24, %17 ], [ 0, %14 ]
  %20 = mul i32 %19, 33
  %21 = getelementptr inbounds i8, i8* %1, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add i32 %20, %23
  %25 = add nuw i64 %18, 1
  %26 = icmp eq i64 %25, %2
  br i1 %26, label %27, label %17

27:                                               ; preds = %17, %14
  %28 = phi i32 [ 0, %14 ], [ %24, %17 ]
  %29 = add i32 %15, -1
  %30 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 0
  %31 = load %"class.llvm::StringMapEntryBase"**, %"class.llvm::StringMapEntryBase"*** %30, align 8
  %32 = zext i32 %15 to i64
  %33 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %31, i64 %32
  %34 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %33, i64 1
  %35 = bitcast %"class.llvm::StringMapEntryBase"** %34 to i32*
  %36 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 4
  br label %37

37:                                               ; preds = %74, %27
  %38 = phi i32 [ %28, %27 ], [ %76, %74 ]
  %39 = phi i32 [ 1, %27 ], [ %77, %74 ]
  %40 = phi i32 [ -1, %27 ], [ %75, %74 ]
  %41 = and i32 %38, %29
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %31, i64 %42
  %44 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %43, align 8
  %45 = ptrtoint %"class.llvm::StringMapEntryBase"* %44 to i64
  switch i64 %45, label %57 [
    i64 0, label %46
    i64 -4, label %54
  ], !prof !2

46:                                               ; preds = %37
  %47 = icmp eq i32 %40, -1
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = sext i32 %40 to i64
  %50 = getelementptr inbounds i32, i32* %35, i64 %49
  store i32 %28, i32* %50, align 4
  br label %78

51:                                               ; preds = %46
  %52 = zext i32 %41 to i64
  %53 = getelementptr inbounds i32, i32* %35, i64 %52
  store i32 %28, i32* %53, align 4
  br label %78

54:                                               ; preds = %37
  %55 = icmp eq i32 %40, -1
  %56 = select i1 %55, i32 %41, i32 %40
  br label %74

57:                                               ; preds = %37
  %58 = getelementptr inbounds i32, i32* %35, i64 %42
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, %28
  br i1 %60, label %61, label %74, !prof !3

61:                                               ; preds = %57
  %62 = bitcast %"class.llvm::StringMapEntryBase"* %44 to i8*
  %63 = load i32, i32* %36, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = getelementptr inbounds %"class.llvm::StringMapEntryBase", %"class.llvm::StringMapEntryBase"* %44, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = icmp eq i64 %68, %2
  br i1 %69, label %70, label %74

70:                                               ; preds = %61
  br i1 %16, label %78, label %71

71:                                               ; preds = %70
  %72 = tail call i32 @bcmp(i8* %1, i8* %65, i64 %2) #7
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %61, %57, %54, %71
  %75 = phi i32 [ %40, %57 ], [ %56, %54 ], [ %40, %71 ], [ %40, %61 ]
  %76 = add i32 %41, %39
  %77 = add i32 %39, 1
  br label %37

78:                                               ; preds = %70, %71, %48, %51
  %79 = phi i32 [ %41, %51 ], [ %40, %48 ], [ %41, %71 ], [ %41, %70 ]
  ret i32 %79
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm13StringMapImpl7FindKeyENS_9StringRefE(%"class.llvm::StringMapImpl"* nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %57, label %7

7:                                                ; preds = %3
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ %17, %9 ], [ 0, %7 ]
  %11 = phi i32 [ %16, %9 ], [ 0, %7 ]
  %12 = mul i32 %11, 33
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add i32 %12, %15
  %17 = add nuw i64 %10, 1
  %18 = icmp eq i64 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %7
  %20 = phi i32 [ 0, %7 ], [ %16, %9 ]
  %21 = add i32 %5, -1
  %22 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 0
  %23 = load %"class.llvm::StringMapEntryBase"**, %"class.llvm::StringMapEntryBase"*** %22, align 8
  %24 = zext i32 %5 to i64
  %25 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %23, i64 %24
  %26 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %25, i64 1
  %27 = bitcast %"class.llvm::StringMapEntryBase"** %26 to i32*
  %28 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 4
  br label %29

29:                                               ; preds = %54, %19
  %30 = phi i32 [ %20, %19 ], [ %55, %54 ]
  %31 = phi i32 [ 1, %19 ], [ %56, %54 ]
  %32 = and i32 %30, %21
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %23, i64 %33
  %35 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %34, align 8
  %36 = ptrtoint %"class.llvm::StringMapEntryBase"* %35 to i64
  switch i64 %36, label %37 [
    i64 0, label %57
    i64 -4, label %54
  ], !prof !2

37:                                               ; preds = %29
  %38 = getelementptr inbounds i32, i32* %27, i64 %33
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, %20
  br i1 %40, label %41, label %54, !prof !3

41:                                               ; preds = %37
  %42 = bitcast %"class.llvm::StringMapEntryBase"* %35 to i8*
  %43 = load i32, i32* %28, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = getelementptr inbounds %"class.llvm::StringMapEntryBase", %"class.llvm::StringMapEntryBase"* %35, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  %49 = icmp eq i64 %48, %2
  br i1 %49, label %50, label %54

50:                                               ; preds = %41
  br i1 %8, label %57, label %51

51:                                               ; preds = %50
  %52 = tail call i32 @bcmp(i8* %1, i8* %45, i64 %2) #7
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %29, %41, %37, %51
  %55 = add i32 %32, %31
  %56 = add i32 %31, 1
  br label %29

57:                                               ; preds = %29, %50, %51, %3
  %58 = phi i32 [ -1, %3 ], [ %32, %50 ], [ %32, %51 ], [ -1, %29 ]
  ret i32 %58
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZN4llvm13StringMapImpl9RemoveKeyEPNS_18StringMapEntryBaseE(%"class.llvm::StringMapImpl"* nocapture, %"class.llvm::StringMapEntryBase"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.llvm::StringMapEntryBase"* %1 to i8*
  %4 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %3, i64 %6
  %8 = getelementptr inbounds %"class.llvm::StringMapEntryBase", %"class.llvm::StringMapEntryBase"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = tail call %"class.llvm::StringMapEntryBase"* @_ZN4llvm13StringMapImpl9RemoveKeyENS_9StringRefE(%"class.llvm::StringMapImpl"* %0, i8* %7, i64 %10) #8
  ret void
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden %"class.llvm::StringMapEntryBase"* @_ZN4llvm13StringMapImpl9RemoveKeyENS_9StringRefE(%"class.llvm::StringMapImpl"* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @_ZNK4llvm13StringMapImpl7FindKeyENS_9StringRefE(%"class.llvm::StringMapImpl"* %0, i8* %1, i64 %2) #8
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %18, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 0
  %8 = load %"class.llvm::StringMapEntryBase"**, %"class.llvm::StringMapEntryBase"*** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %8, i64 %9
  %11 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %10, align 8
  store %"class.llvm::StringMapEntryBase"* inttoptr (i64 -4 to %"class.llvm::StringMapEntryBase"*), %"class.llvm::StringMapEntryBase"** %10, align 8
  %12 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, -1
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, 1
  store i32 %17, i32* %15, align 8
  br label %18

18:                                               ; preds = %3, %6
  %19 = phi %"class.llvm::StringMapEntryBase"* [ %11, %6 ], [ null, %3 ]
  ret %"class.llvm::StringMapEntryBase"* %19
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm13StringMapImpl11RehashTableEj(%"class.llvm::StringMapImpl"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 0
  %4 = load %"class.llvm::StringMapEntryBase"**, %"class.llvm::StringMapEntryBase"*** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %4, i64 %7
  %9 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %8, i64 1
  %10 = bitcast %"class.llvm::StringMapEntryBase"** %9 to i32*
  %11 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 %12, 2
  %14 = mul i32 %6, 3
  %15 = icmp ugt i32 %13, %14
  %16 = bitcast %"class.llvm::StringMapEntryBase"** %4 to i8*
  br i1 %15, label %17, label %20, !prof !4

17:                                               ; preds = %2
  %18 = shl i32 %6, 1
  %19 = zext i32 %18 to i64
  br label %27

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = sub i32 %6, %12
  %24 = sub i32 %23, %22
  %25 = lshr i32 %6, 3
  %26 = icmp ugt i32 %24, %25
  br i1 %26, label %83, label %27, !prof !3

27:                                               ; preds = %20, %17
  %28 = phi i64 [ %7, %20 ], [ %19, %17 ]
  %29 = phi i32 [ %6, %20 ], [ %18, %17 ]
  %30 = add i32 %29, 1
  %31 = zext i32 %30 to i64
  %32 = tail call noalias i8* @calloc(i64 %31, i64 12) #6
  %33 = bitcast i8* %32 to %"class.llvm::StringMapEntryBase"**
  %34 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %33, i64 %28
  %35 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %34, i64 1
  %36 = bitcast %"class.llvm::StringMapEntryBase"** %35 to i32*
  store %"class.llvm::StringMapEntryBase"* inttoptr (i64 2 to %"class.llvm::StringMapEntryBase"*), %"class.llvm::StringMapEntryBase"** %34, align 8
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %27
  %39 = add i32 %29, -1
  %40 = zext i32 %1 to i64
  br label %45

41:                                               ; preds = %79, %27
  %42 = phi i32 [ %1, %27 ], [ %80, %79 ]
  %43 = bitcast %"class.llvm::StringMapImpl"* %0 to i8**
  tail call void @free(i8* %16) #6
  store i8* %32, i8** %43, align 8
  store i32 %29, i32* %5, align 8
  %44 = getelementptr inbounds %"class.llvm::StringMapImpl", %"class.llvm::StringMapImpl"* %0, i64 0, i32 3
  store i32 0, i32* %44, align 8
  br label %83

45:                                               ; preds = %38, %79
  %46 = phi i64 [ 0, %38 ], [ %81, %79 ]
  %47 = phi i32 [ %1, %38 ], [ %80, %79 ]
  %48 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %4, i64 %46
  %49 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %48, align 8
  %50 = ptrtoint %"class.llvm::StringMapEntryBase"* %49 to i64
  switch i64 %50, label %51 [
    i64 0, label %79
    i64 -4, label %79
  ]

51:                                               ; preds = %45
  %52 = getelementptr inbounds i32, i32* %10, i64 %46
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, %39
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %33, i64 %55
  %57 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %56, align 8
  %58 = icmp eq %"class.llvm::StringMapEntryBase"* %57, null
  br i1 %58, label %59, label %63

59:                                               ; preds = %51
  store %"class.llvm::StringMapEntryBase"* %49, %"class.llvm::StringMapEntryBase"** %56, align 8
  %60 = getelementptr inbounds i32, i32* %36, i64 %55
  store i32 %53, i32* %60, align 4
  %61 = icmp eq i64 %46, %40
  %62 = select i1 %61, i32 %54, i32 %47
  br label %79

63:                                               ; preds = %51, %63
  %64 = phi i32 [ %68, %63 ], [ %54, %51 ]
  %65 = phi i32 [ %66, %63 ], [ 1, %51 ]
  %66 = add i32 %65, 1
  %67 = add i32 %65, %64
  %68 = and i32 %67, %39
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %33, i64 %69
  %71 = load %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %70, align 8
  %72 = icmp eq %"class.llvm::StringMapEntryBase"* %71, null
  br i1 %72, label %73, label %63

73:                                               ; preds = %63
  %74 = zext i32 %68 to i64
  %75 = getelementptr inbounds %"class.llvm::StringMapEntryBase"*, %"class.llvm::StringMapEntryBase"** %33, i64 %74
  store %"class.llvm::StringMapEntryBase"* %49, %"class.llvm::StringMapEntryBase"** %75, align 8
  %76 = getelementptr inbounds i32, i32* %36, i64 %74
  store i32 %53, i32* %76, align 4
  %77 = icmp eq i64 %46, %40
  %78 = select i1 %77, i32 %68, i32 %47
  br label %79

79:                                               ; preds = %45, %45, %59, %73
  %80 = phi i32 [ %47, %45 ], [ %78, %73 ], [ %62, %59 ], [ %47, %45 ]
  %81 = add nuw nsw i64 %46, 1
  %82 = icmp eq i64 %81, %7
  br i1 %82, label %41, label %45

83:                                               ; preds = %20, %41
  %84 = phi i32 [ %42, %41 ], [ %1, %20 ]
  ret i32 %84
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind optsize }
attributes #7 = { nounwind }
attributes #8 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 4000, i32 1}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
