; ModuleID = '../../ppapi/shared_impl/ppb_gamepad_shared.cc'
source_filename = "../../ppapi/shared_impl/ppb_gamepad_shared.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.device::Gamepads" = type { [4 x %"class.device::Gamepad"] }
%"class.device::Gamepad" = type <{ i8, i8, [128 x i16], [2 x i8], i64, i32, i32, [16 x double], i32, [32 x %"class.device::GamepadButton"], %"class.device::GamepadHapticActuator", i32, %"class.device::GamepadPose", i32, i32, i8, [3 x i8] }>
%"class.device::GamepadButton" = type <{ i8, i8, i8, i8, double }>
%"class.device::GamepadHapticActuator" = type { i8, i32 }
%"class.device::GamepadPose" = type { i8, i8, i8, %"class.device::GamepadQuaternion", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector" }
%"class.device::GamepadQuaternion" = type { i8, float, float, float, float }
%"class.device::GamepadVector" = type { i8, float, float, float }
%struct.PP_GamepadsSampleData = type { i32, [4 x i8], [4 x %struct.PP_GamepadSampleData] }
%struct.PP_GamepadSampleData = type { i32, [16 x float], i32, [32 x float], double, [128 x i16], i32, [4 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi24ConvertDeviceGamepadDataERKN6device8GamepadsEP21PP_GamepadsSampleData(%"class.device::Gamepads"* nocapture readonly dereferenceable(3680), %struct.PP_GamepadsSampleData* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 0
  store i32 4, i32* %3, align 8
  br label %5

4:                                                ; preds = %53
  ret void

5:                                                ; preds = %53, %2
  %6 = phi i64 [ 0, %2 ], [ %54, %53 ]
  %7 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 0
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 6
  store i32 %9, i32* %10, align 8
  %11 = load i8, i8* %7, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %53, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 5, i64 0
  %15 = bitcast i16* %14 to i8*
  %16 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 2, i64 0
  %17 = bitcast i16* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 2 %17, i64 256, i1 false)
  %18 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 4
  %19 = load i64, i64* %18, align 4
  %20 = sitofp i64 %19 to double
  %21 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 4
  store double %20, double* %21, align 8
  %22 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 0
  store i32 %23, i32* %24, align 8
  %25 = load i32, i32* %22, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %33, %13
  %28 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 8
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 2
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* %28, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %53, label %43

33:                                               ; preds = %13, %33
  %34 = phi i64 [ %39, %33 ], [ 0, %13 ]
  %35 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 7, i64 %34
  %36 = load double, double* %35, align 4
  %37 = fptrunc double %36 to float
  %38 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 1, i64 %34
  store float %37, float* %38, align 4
  %39 = add nuw nsw i64 %34, 1
  %40 = load i32, i32* %22, align 4
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %33, label %27

43:                                               ; preds = %27, %43
  %44 = phi i64 [ %49, %43 ], [ 0, %27 ]
  %45 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 %6, i32 9, i64 %44, i32 4
  %46 = load double, double* %45, align 4
  %47 = fptrunc double %46 to float
  %48 = getelementptr inbounds %struct.PP_GamepadsSampleData, %struct.PP_GamepadsSampleData* %1, i64 0, i32 2, i64 %6, i32 3, i64 %44
  store float %47, float* %48, align 4
  %49 = add nuw nsw i64 %44, 1
  %50 = load i32, i32* %28, align 4
  %51 = zext i32 %50 to i64
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %43, label %53

53:                                               ; preds = %43, %27, %5
  %54 = add nuw nsw i64 %6, 1
  %55 = icmp eq i64 %54, 4
  br i1 %55, label %4, label %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
