; ModuleID = '../../third_party/libwebp/src/utils/huffman_utils.c'
source_filename = "../../third_party/libwebp/src/utils/huffman_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.HTreeGroup = type { [5 x %struct.HuffmanCode*], i32, i32, i32, i32, [64 x %struct.HuffmanCode32] }
%struct.HuffmanCode = type { i8, i16 }
%struct.HuffmanCode32 = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.HTreeGroup* @VP8LHtreeGroupsNew(i32) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = tail call i8* @WebPSafeMalloc(i64 %2, i64 568) #3
  %4 = bitcast i8* %3 to %struct.HTreeGroup*
  ret %struct.HTreeGroup* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LHtreeGroupsFree(%struct.HTreeGroup*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.HTreeGroup* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.HTreeGroup* %0 to i8*
  tail call void @WebPSafeFree(i8* nonnull %4) #3
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LBuildHuffmanTable(%struct.HuffmanCode*, i32, i32* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = alloca [512 x i16], align 16
  %6 = icmp eq %struct.HuffmanCode* %0, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call fastcc i32 @BuildHuffmanTable(%struct.HuffmanCode* null, i32 %1, i32* %2, i32 %3, i16* null)
  br label %22

9:                                                ; preds = %4
  %10 = icmp slt i32 %3, 513
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = bitcast [512 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %12) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1024, i1 false)
  %13 = getelementptr inbounds [512 x i16], [512 x i16]* %5, i64 0, i64 0
  %14 = call fastcc i32 @BuildHuffmanTable(%struct.HuffmanCode* nonnull %0, i32 %1, i32* %2, i32 %3, i16* nonnull %13)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %12) #3
  br label %22

15:                                               ; preds = %9
  %16 = sext i32 %3 to i64
  %17 = tail call i8* @WebPSafeMalloc(i64 %16, i64 2) #3
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = bitcast i8* %17 to i16*
  %21 = tail call fastcc i32 @BuildHuffmanTable(%struct.HuffmanCode* nonnull %0, i32 %1, i32* %2, i32 %3, i16* nonnull %20)
  tail call void @WebPSafeFree(i8* nonnull %17) #3
  br label %22

22:                                               ; preds = %7, %11, %19, %15
  %23 = phi i32 [ 0, %15 ], [ %8, %7 ], [ %14, %11 ], [ %21, %19 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @BuildHuffmanTable(%struct.HuffmanCode*, i32, i32* nocapture readonly, i32, i16*) unnamed_addr #0 {
  %6 = alloca [16 x i32], align 16
  %7 = alloca [16 x i32], align 16
  %8 = shl i32 1, %1
  %9 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 64, i1 false)
  %10 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %29

12:                                               ; preds = %5
  %13 = zext i32 %3 to i64
  br label %14

14:                                               ; preds = %19, %12
  %15 = phi i64 [ 0, %12 ], [ %24, %19 ]
  %16 = getelementptr inbounds i32, i32* %2, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 15
  br i1 %18, label %402, label %19

19:                                               ; preds = %14
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %21, align 4
  %24 = add nuw nsw i64 %15, 1
  %25 = icmp eq i64 %24, %13
  br i1 %25, label %26, label %14

26:                                               ; preds = %19
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %28 = load i32, i32* %27, align 16
  br label %29

29:                                               ; preds = %26, %5
  %30 = phi i32 [ %28, %26 ], [ 0, %5 ]
  %31 = icmp eq i32 %30, %3
  br i1 %31, label %402, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 1
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 2
  br i1 %36, label %402, label %40

37:                                               ; preds = %476
  %38 = icmp eq i16* %4, null
  %39 = zext i32 %3 to i64
  br label %45

40:                                               ; preds = %32
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 2
  store i32 %35, i32* %41, align 8
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 2
  %43 = load i32, i32* %42, align 8
  %44 = icmp sgt i32 %43, 4
  br i1 %44, label %402, label %404

45:                                               ; preds = %64, %37
  %46 = phi i64 [ 0, %37 ], [ %65, %64 ]
  %47 = getelementptr inbounds i32, i32* %2, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %64

50:                                               ; preds = %45
  br i1 %38, label %59, label %51

51:                                               ; preds = %50
  %52 = trunc i64 %46 to i16
  %53 = sext i32 %48 to i64
  %54 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %54, align 4
  %57 = sext i32 %55 to i64
  %58 = getelementptr inbounds i16, i16* %4, i64 %57
  store i16 %52, i16* %58, align 2
  br label %64

59:                                               ; preds = %50
  %60 = sext i32 %48 to i64
  %61 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %61, align 4
  br label %64

64:                                               ; preds = %51, %59, %45
  %65 = add nuw nsw i64 %46, 1
  %66 = icmp eq i64 %65, %39
  br i1 %66, label %67, label %45

67:                                               ; preds = %64
  %68 = load i32, i32* %478, align 4
  br label %69

69:                                               ; preds = %67, %476
  %70 = phi i32 [ %68, %67 ], [ %477, %476 ]
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %164

72:                                               ; preds = %69
  %73 = icmp eq i16* %4, null
  br i1 %73, label %402, label %74

74:                                               ; preds = %72
  %75 = load i16, i16* %4, align 2
  %76 = zext i16 %75 to i32
  %77 = shl nuw i32 %76, 16
  %78 = or i32 %77, 43520
  %79 = sext i32 %8 to i64
  %80 = icmp slt i64 %79, 1
  %81 = select i1 %80, i64 %79, i64 1
  %82 = add nsw i64 %81, -1
  %83 = sub nsw i64 %79, %82
  %84 = icmp ult i64 %83, 8
  br i1 %84, label %156, label %85

85:                                               ; preds = %74
  %86 = and i64 %83, -8
  %87 = sub nsw i64 %79, %86
  %88 = insertelement <4 x i32> undef, i32 %78, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = insertelement <4 x i32> undef, i32 %78, i32 0
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> zeroinitializer
  %92 = add nsw i64 %86, -8
  %93 = lshr exact i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 3
  %96 = icmp ult i64 %92, 24
  br i1 %96, label %137, label %97

97:                                               ; preds = %85
  %98 = sub nsw i64 %94, %95
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ 0, %97 ], [ %134, %99 ]
  %101 = phi i64 [ %98, %97 ], [ %135, %99 ]
  %102 = xor i64 %100, -1
  %103 = add i64 %102, %79
  %104 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %103
  %105 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %104, i64 -3
  %106 = bitcast %struct.HuffmanCode* %105 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %106, align 2
  %107 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %104, i64 -4
  %108 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %107, i64 -3
  %109 = bitcast %struct.HuffmanCode* %108 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %109, align 2
  %110 = sub nuw nsw i64 -9, %100
  %111 = add i64 %110, %79
  %112 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %111
  %113 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %112, i64 -3
  %114 = bitcast %struct.HuffmanCode* %113 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %114, align 2
  %115 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %112, i64 -4
  %116 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %115, i64 -3
  %117 = bitcast %struct.HuffmanCode* %116 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %117, align 2
  %118 = sub nuw nsw i64 -17, %100
  %119 = add i64 %118, %79
  %120 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %119
  %121 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %120, i64 -3
  %122 = bitcast %struct.HuffmanCode* %121 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %122, align 2
  %123 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %120, i64 -4
  %124 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %123, i64 -3
  %125 = bitcast %struct.HuffmanCode* %124 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %125, align 2
  %126 = sub nuw nsw i64 -25, %100
  %127 = add i64 %126, %79
  %128 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %127
  %129 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %128, i64 -3
  %130 = bitcast %struct.HuffmanCode* %129 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %130, align 2
  %131 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %128, i64 -4
  %132 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %131, i64 -3
  %133 = bitcast %struct.HuffmanCode* %132 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %133, align 2
  %134 = add i64 %100, 32
  %135 = add i64 %101, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %99, !llvm.loop !2

137:                                              ; preds = %99, %85
  %138 = phi i64 [ 0, %85 ], [ %134, %99 ]
  %139 = icmp eq i64 %95, 0
  br i1 %139, label %154, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %151, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %152, %140 ], [ %95, %137 ]
  %143 = xor i64 %141, -1
  %144 = add i64 %143, %79
  %145 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %144
  %146 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %145, i64 -3
  %147 = bitcast %struct.HuffmanCode* %146 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %147, align 2
  %148 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %145, i64 -4
  %149 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %148, i64 -3
  %150 = bitcast %struct.HuffmanCode* %149 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %150, align 2
  %151 = add i64 %141, 8
  %152 = add i64 %142, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %140, !llvm.loop !4

154:                                              ; preds = %140, %137
  %155 = icmp eq i64 %83, %86
  br i1 %155, label %402, label %156

156:                                              ; preds = %154, %74
  %157 = phi i64 [ %79, %74 ], [ %87, %154 ]
  br label %158

158:                                              ; preds = %156, %158
  %159 = phi i64 [ %160, %158 ], [ %157, %156 ]
  %160 = add nsw i64 %159, -1
  %161 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %160
  %162 = bitcast %struct.HuffmanCode* %161 to i32*
  store i32 %78, i32* %162, align 2
  %163 = icmp sgt i64 %160, 0
  br i1 %163, label %158, label %402, !llvm.loop !6

164:                                              ; preds = %69
  %165 = add nsw i32 %8, -1
  %166 = icmp slt i32 %1, 1
  br i1 %166, label %167, label %169

167:                                              ; preds = %164
  %168 = add nsw i32 %1, 1
  br label %179

169:                                              ; preds = %164
  %170 = icmp ne %struct.HuffmanCode* %0, null
  %171 = add nuw i32 %1, 1
  %172 = zext i32 %171 to i64
  %173 = icmp sgt i32 %35, 2
  br i1 %173, label %402, label %174

174:                                              ; preds = %169
  %175 = sub nsw i32 2, %35
  %176 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  br label %188

177:                                              ; preds = %243
  %178 = icmp slt i32 %171, 16
  br i1 %178, label %179, label %394

179:                                              ; preds = %167, %177
  %180 = phi i32 [ 1, %167 ], [ %189, %177 ]
  %181 = phi i32 [ 1, %167 ], [ %191, %177 ]
  %182 = phi i32 [ 0, %167 ], [ %245, %177 ]
  %183 = phi i32 [ 0, %167 ], [ %244, %177 ]
  %184 = phi i32 [ %168, %167 ], [ %171, %177 ]
  %185 = icmp ne %struct.HuffmanCode* %0, null
  %186 = ptrtoint %struct.HuffmanCode* %0 to i64
  %187 = sext i32 %184 to i64
  br label %257

188:                                              ; preds = %174, %248
  %189 = phi i32 [ %175, %174 ], [ %255, %248 ]
  %190 = phi i32* [ %176, %174 ], [ %254, %248 ]
  %191 = phi i32 [ 3, %174 ], [ %253, %248 ]
  %192 = phi i32 [ 0, %174 ], [ %244, %248 ]
  %193 = phi i32 [ 2, %174 ], [ %249, %248 ]
  %194 = phi i32 [ 0, %174 ], [ %245, %248 ]
  %195 = phi i64 [ 1, %174 ], [ %246, %248 ]
  %196 = phi i32 [ %35, %174 ], [ %251, %248 ]
  %197 = icmp sgt i32 %196, 0
  %198 = and i1 %170, %197
  br i1 %198, label %199, label %243

199:                                              ; preds = %188
  %200 = trunc i64 %195 to i32
  %201 = and i32 %200, 255
  %202 = trunc i64 %195 to i32
  %203 = add i32 %202, -1
  %204 = shl i32 1, %203
  %205 = sext i32 %192 to i64
  br label %206

206:                                              ; preds = %199, %237
  %207 = phi i64 [ %205, %199 ], [ %231, %237 ]
  %208 = phi i32 [ %194, %199 ], [ %238, %237 ]
  %209 = phi i32 [ %196, %199 ], [ %239, %237 ]
  %210 = getelementptr inbounds i16, i16* %4, i64 %207
  %211 = load i16, i16* %210, align 2
  %212 = zext i32 %208 to i64
  %213 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %212
  %214 = zext i16 %211 to i32
  %215 = shl nuw i32 %214, 16
  %216 = or i32 %201, %215
  %217 = or i32 %216, 43520
  br label %218

218:                                              ; preds = %218, %206
  %219 = phi i32 [ %8, %206 ], [ %220, %218 ]
  %220 = sub nsw i32 %219, %193
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %213, i64 %221
  %223 = bitcast %struct.HuffmanCode* %222 to i32*
  store i32 %217, i32* %223, align 2
  %224 = icmp sgt i32 %220, 0
  br i1 %224, label %218, label %225

225:                                              ; preds = %218, %225
  %226 = phi i32 [ %229, %225 ], [ %204, %218 ]
  %227 = and i32 %226, %208
  %228 = icmp eq i32 %227, 0
  %229 = lshr i32 %226, 1
  br i1 %228, label %230, label %225

230:                                              ; preds = %225
  %231 = add nsw i64 %207, 1
  %232 = icmp eq i32 %226, 0
  br i1 %232, label %237, label %233

233:                                              ; preds = %230
  %234 = add i32 %226, -1
  %235 = and i32 %234, %208
  %236 = add i32 %235, %226
  br label %237

237:                                              ; preds = %230, %233
  %238 = phi i32 [ %236, %233 ], [ %208, %230 ]
  %239 = add nsw i32 %209, -1
  %240 = icmp sgt i32 %239, 0
  br i1 %240, label %206, label %241

241:                                              ; preds = %237
  %242 = trunc i64 %231 to i32
  store i32 0, i32* %190, align 4
  br label %243

243:                                              ; preds = %188, %241
  %244 = phi i32 [ %192, %188 ], [ %242, %241 ]
  %245 = phi i32 [ %194, %188 ], [ %238, %241 ]
  %246 = add nuw nsw i64 %195, 1
  %247 = icmp eq i64 %246, %172
  br i1 %247, label %177, label %248

248:                                              ; preds = %243
  %249 = shl i32 %193, 1
  %250 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %246
  %251 = load i32, i32* %250, align 4
  %252 = shl i32 %189, 1
  %253 = add nsw i32 %252, %191
  %254 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %246
  %255 = sub nsw i32 %252, %251
  %256 = icmp slt i32 %255, 0
  br i1 %256, label %402, label %188

257:                                              ; preds = %380, %179
  %258 = phi i64 [ %187, %179 ], [ %389, %380 ]
  %259 = phi %struct.HuffmanCode* [ %0, %179 ], [ %387, %380 ]
  %260 = phi i32 [ %8, %179 ], [ %386, %380 ]
  %261 = phi i32 [ %1, %179 ], [ %381, %380 ]
  %262 = phi i32 [ %8, %179 ], [ %385, %380 ]
  %263 = phi i32 [ %180, %179 ], [ %273, %380 ]
  %264 = phi i32 [ %181, %179 ], [ %270, %380 ]
  %265 = phi i32 [ %182, %179 ], [ %384, %380 ]
  %266 = phi i32 [ -1, %179 ], [ %383, %380 ]
  %267 = phi i32 [ 2, %179 ], [ %388, %380 ]
  %268 = phi i32 [ %183, %179 ], [ %382, %380 ]
  %269 = shl i32 %263, 1
  %270 = add nsw i32 %269, %264
  %271 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %258
  %272 = load i32, i32* %271, align 4
  %273 = sub nsw i32 %269, %272
  %274 = icmp slt i32 %273, 0
  br i1 %274, label %402, label %275

275:                                              ; preds = %257
  %276 = icmp sgt i32 %272, 0
  %277 = and i1 %185, %276
  br i1 %277, label %280, label %278

278:                                              ; preds = %275
  %279 = trunc i64 %258 to i32
  br label %380

280:                                              ; preds = %275
  %281 = icmp slt i64 %258, 15
  %282 = trunc i64 %258 to i32
  %283 = sub i32 %282, %1
  %284 = shl i32 1, %283
  %285 = and i32 %283, 255
  %286 = shl i32 1, %261
  %287 = sext i32 %268 to i64
  %288 = trunc i64 %258 to i32
  br label %289

289:                                              ; preds = %280, %373
  %290 = phi i32 [ %272, %280 ], [ %376, %373 ]
  %291 = phi i64 [ %287, %280 ], [ %367, %373 ]
  %292 = phi %struct.HuffmanCode* [ %259, %280 ], [ %344, %373 ]
  %293 = phi i32 [ %260, %280 ], [ %343, %373 ]
  %294 = phi i32 [ %262, %280 ], [ %342, %373 ]
  %295 = phi i32 [ %265, %280 ], [ %374, %373 ]
  %296 = phi i32 [ %266, %280 ], [ %341, %373 ]
  %297 = and i32 %295, %165
  %298 = icmp eq i32 %297, %296
  br i1 %298, label %340, label %299

299:                                              ; preds = %289
  %300 = sext i32 %294 to i64
  %301 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %292, i64 %300
  br i1 %281, label %302, label %326

302:                                              ; preds = %299
  %303 = sub nsw i32 %284, %290
  %304 = icmp slt i32 %303, 1
  br i1 %304, label %319, label %305

305:                                              ; preds = %302, %313
  %306 = phi i32 [ %317, %313 ], [ %303, %302 ]
  %307 = phi i32 [ %310, %313 ], [ %288, %302 ]
  %308 = phi i64 [ %309, %313 ], [ %258, %302 ]
  %309 = add nsw i64 %308, 1
  %310 = add nsw i32 %307, 1
  %311 = trunc i64 %309 to i32
  %312 = icmp eq i32 %311, 15
  br i1 %312, label %322, label %313

313:                                              ; preds = %305
  %314 = shl i32 %306, 1
  %315 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %309
  %316 = load i32, i32* %315, align 4
  %317 = sub nsw i32 %314, %316
  %318 = icmp slt i32 %317, 1
  br i1 %318, label %319, label %305

319:                                              ; preds = %313, %302
  %320 = phi i64 [ %258, %302 ], [ %309, %313 ]
  %321 = trunc i64 %320 to i32
  br label %322

322:                                              ; preds = %305, %319
  %323 = phi i32 [ %321, %319 ], [ %310, %305 ]
  %324 = sub nsw i32 %323, %1
  %325 = shl i32 1, %324
  br label %326

326:                                              ; preds = %299, %322
  %327 = phi i32 [ %284, %299 ], [ %325, %322 ]
  %328 = phi i32 [ %283, %299 ], [ %324, %322 ]
  %329 = add nsw i32 %327, %293
  %330 = add nsw i32 %328, %1
  %331 = trunc i32 %330 to i8
  %332 = zext i32 %297 to i64
  %333 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %332, i32 0
  store i8 %331, i8* %333, align 2
  %334 = ptrtoint %struct.HuffmanCode* %301 to i64
  %335 = sub i64 %334, %186
  %336 = lshr exact i64 %335, 2
  %337 = sub nsw i64 %336, %332
  %338 = trunc i64 %337 to i16
  %339 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %332, i32 1
  store i16 %338, i16* %339, align 2
  br label %340

340:                                              ; preds = %289, %326
  %341 = phi i32 [ %297, %326 ], [ %296, %289 ]
  %342 = phi i32 [ %327, %326 ], [ %294, %289 ]
  %343 = phi i32 [ %329, %326 ], [ %293, %289 ]
  %344 = phi %struct.HuffmanCode* [ %301, %326 ], [ %292, %289 ]
  %345 = getelementptr inbounds i16, i16* %4, i64 %291
  %346 = load i16, i16* %345, align 2
  %347 = lshr i32 %295, %1
  %348 = zext i32 %347 to i64
  %349 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %344, i64 %348
  %350 = zext i16 %346 to i32
  %351 = shl nuw i32 %350, 16
  %352 = or i32 %285, %351
  %353 = or i32 %352, 43520
  br label %354

354:                                              ; preds = %354, %340
  %355 = phi i32 [ %342, %340 ], [ %356, %354 ]
  %356 = sub nsw i32 %355, %267
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %349, i64 %357
  %359 = bitcast %struct.HuffmanCode* %358 to i32*
  store i32 %353, i32* %359, align 2
  %360 = icmp sgt i32 %356, 0
  br i1 %360, label %354, label %361

361:                                              ; preds = %354, %361
  %362 = phi i32 [ %365, %361 ], [ %286, %354 ]
  %363 = and i32 %362, %295
  %364 = icmp eq i32 %363, 0
  %365 = lshr i32 %362, 1
  br i1 %364, label %366, label %361

366:                                              ; preds = %361
  %367 = add i64 %291, 1
  %368 = icmp eq i32 %362, 0
  br i1 %368, label %373, label %369

369:                                              ; preds = %366
  %370 = add i32 %362, -1
  %371 = and i32 %370, %295
  %372 = add i32 %371, %362
  br label %373

373:                                              ; preds = %366, %369
  %374 = phi i32 [ %372, %369 ], [ %295, %366 ]
  %375 = load i32, i32* %271, align 4
  %376 = add nsw i32 %375, -1
  store i32 %376, i32* %271, align 4
  %377 = icmp sgt i32 %376, 0
  br i1 %377, label %289, label %378

378:                                              ; preds = %373
  %379 = trunc i64 %367 to i32
  br label %380

380:                                              ; preds = %278, %378
  %381 = phi i32 [ %279, %278 ], [ %288, %378 ]
  %382 = phi i32 [ %268, %278 ], [ %379, %378 ]
  %383 = phi i32 [ %266, %278 ], [ %341, %378 ]
  %384 = phi i32 [ %265, %278 ], [ %374, %378 ]
  %385 = phi i32 [ %262, %278 ], [ %342, %378 ]
  %386 = phi i32 [ %260, %278 ], [ %343, %378 ]
  %387 = phi %struct.HuffmanCode* [ %259, %278 ], [ %344, %378 ]
  %388 = shl i32 %267, 1
  %389 = add nsw i64 %258, 1
  %390 = trunc i64 %389 to i32
  %391 = icmp eq i32 %390, 16
  br i1 %391, label %392, label %257

392:                                              ; preds = %380
  %393 = load i32, i32* %478, align 4
  br label %394

394:                                              ; preds = %392, %177
  %395 = phi i32 [ %70, %177 ], [ %393, %392 ]
  %396 = phi i32 [ %191, %177 ], [ %270, %392 ]
  %397 = phi i32 [ %8, %177 ], [ %386, %392 ]
  %398 = shl i32 %395, 1
  %399 = add nsw i32 %398, -1
  %400 = icmp eq i32 %396, %399
  %401 = select i1 %400, i32 %397, i32 0
  br label %402

402:                                              ; preds = %14, %248, %257, %158, %169, %154, %32, %40, %404, %410, %416, %422, %428, %434, %440, %446, %452, %458, %464, %470, %394, %72, %29
  %403 = phi i32 [ 0, %29 ], [ %8, %72 ], [ %401, %394 ], [ 0, %470 ], [ 0, %464 ], [ 0, %458 ], [ 0, %452 ], [ 0, %446 ], [ 0, %440 ], [ 0, %434 ], [ 0, %428 ], [ 0, %422 ], [ 0, %416 ], [ 0, %410 ], [ 0, %404 ], [ 0, %40 ], [ 0, %32 ], [ %8, %154 ], [ 0, %169 ], [ %8, %158 ], [ 0, %257 ], [ 0, %248 ], [ 0, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  ret i32 %403

404:                                              ; preds = %40
  %405 = add nsw i32 %35, %43
  %406 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 3
  store i32 %405, i32* %406, align 4
  %407 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  %408 = load i32, i32* %407, align 4
  %409 = icmp sgt i32 %408, 8
  br i1 %409, label %402, label %410

410:                                              ; preds = %404
  %411 = add nsw i32 %405, %408
  %412 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 4
  store i32 %411, i32* %412, align 16
  %413 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %414 = load i32, i32* %413, align 16
  %415 = icmp sgt i32 %414, 16
  br i1 %415, label %402, label %416

416:                                              ; preds = %410
  %417 = add nsw i32 %411, %414
  %418 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 5
  store i32 %417, i32* %418, align 4
  %419 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %420 = load i32, i32* %419, align 4
  %421 = icmp sgt i32 %420, 32
  br i1 %421, label %402, label %422

422:                                              ; preds = %416
  %423 = add nsw i32 %417, %420
  %424 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 6
  store i32 %423, i32* %424, align 8
  %425 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 6
  %426 = load i32, i32* %425, align 8
  %427 = icmp sgt i32 %426, 64
  br i1 %427, label %402, label %428

428:                                              ; preds = %422
  %429 = add nsw i32 %423, %426
  %430 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 7
  store i32 %429, i32* %430, align 4
  %431 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %432 = load i32, i32* %431, align 4
  %433 = icmp sgt i32 %432, 128
  br i1 %433, label %402, label %434

434:                                              ; preds = %428
  %435 = add nsw i32 %429, %432
  %436 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 8
  store i32 %435, i32* %436, align 16
  %437 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %438 = load i32, i32* %437, align 16
  %439 = icmp sgt i32 %438, 256
  br i1 %439, label %402, label %440

440:                                              ; preds = %434
  %441 = add nsw i32 %435, %438
  %442 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 9
  store i32 %441, i32* %442, align 4
  %443 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  %444 = load i32, i32* %443, align 4
  %445 = icmp sgt i32 %444, 512
  br i1 %445, label %402, label %446

446:                                              ; preds = %440
  %447 = add nsw i32 %441, %444
  %448 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 10
  store i32 %447, i32* %448, align 8
  %449 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 10
  %450 = load i32, i32* %449, align 8
  %451 = icmp sgt i32 %450, 1024
  br i1 %451, label %402, label %452

452:                                              ; preds = %446
  %453 = add nsw i32 %447, %450
  %454 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 11
  store i32 %453, i32* %454, align 4
  %455 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  %456 = load i32, i32* %455, align 4
  %457 = icmp sgt i32 %456, 2048
  br i1 %457, label %402, label %458

458:                                              ; preds = %452
  %459 = add nsw i32 %453, %456
  %460 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 12
  store i32 %459, i32* %460, align 16
  %461 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %462 = load i32, i32* %461, align 16
  %463 = icmp sgt i32 %462, 4096
  br i1 %463, label %402, label %464

464:                                              ; preds = %458
  %465 = add nsw i32 %459, %462
  %466 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 13
  store i32 %465, i32* %466, align 4
  %467 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %468 = load i32, i32* %467, align 4
  %469 = icmp sgt i32 %468, 8192
  br i1 %469, label %402, label %470

470:                                              ; preds = %464
  %471 = add nsw i32 %465, %468
  %472 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 14
  store i32 %471, i32* %472, align 8
  %473 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 14
  %474 = load i32, i32* %473, align 8
  %475 = icmp sgt i32 %474, 16384
  br i1 %475, label %402, label %476

476:                                              ; preds = %470
  %477 = add nsw i32 %471, %474
  %478 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 15
  store i32 %477, i32* %478, align 4
  br i1 %11, label %37, label %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
