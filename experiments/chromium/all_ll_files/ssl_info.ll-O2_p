; ModuleID = '../../net/ssl/ssl_info.cc'
source_filename = "../../net/ssl/ssl_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::SSLInfo" = type <{ %class.scoped_refptr, %class.scoped_refptr, i32, i16, i16, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.17", %"class.std::__1::basic_string", %"class.std::__1::vector.25", i32, %"struct.net::OCSPVerifyResult", i8, [3 x i8] }>
%class.scoped_refptr = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.10" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.20" }
%"class.net::HashValue" = type { i32, %union.anon.19 }
%union.anon.19 = type { %"struct.net::SHA256HashValue" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.net::HashValue"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.29" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.27, i32, [4 x i8] }>
%class.scoped_refptr.27 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.28", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.28" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorIN3net9HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN3net35SignedCertificateTimestampAndStatusENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

@_ZN3net7SSLInfoC1Ev = hidden unnamed_addr alias void (%"class.net::SSLInfo"*), void (%"class.net::SSLInfo"*)* @_ZN3net7SSLInfoC2Ev
@_ZN3net7SSLInfoC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::SSLInfo"*, %"class.net::SSLInfo"*), void (%"class.net::SSLInfo"*, %"class.net::SSLInfo"*)* @_ZN3net7SSLInfoC2ERKS0_
@_ZN3net7SSLInfoD1Ev = hidden unnamed_addr alias void (%"class.net::SSLInfo"*), void (%"class.net::SSLInfo"*)* @_ZN3net7SSLInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net7SSLInfoC2Ev(%"class.net::SSLInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 15
  %4 = bitcast %"class.net::SSLInfo"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 36, i1 false)
  %5 = bitcast %"class.std::__1::vector.17"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 72, i1 false)
  store i32 4, i32* %3, align 8
  %6 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 16
  tail call void @_ZN3net16OCSPVerifyResultC1Ev(%"struct.net::OCSPVerifyResult"* %6) #7
  %7 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 17
  store i8 0, i8* %7, align 4
  ret void
}

declare void @_ZN3net16OCSPVerifyResultC1Ev(%"struct.net::OCSPVerifyResult"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net7SSLInfoC2ERKS0_(%"class.net::SSLInfo"*, %"class.net::SSLInfo"* dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %3, align 8
  %5 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 0, i32 0
  store %"class.net::X509Certificate"* %4, %"class.net::X509Certificate"** %5, align 8
  %6 = icmp eq %"class.net::X509Certificate"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 1, i32 0
  %12 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %11, align 8
  %13 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 1, i32 0
  store %"class.net::X509Certificate"* %12, %"class.net::X509Certificate"** %13, align 8
  %14 = icmp eq %"class.net::X509Certificate"* %12, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic
  br label %18

18:                                               ; preds = %10, %15
  %19 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 2
  %20 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 2
  %21 = bitcast i32* %19 to i8*
  %22 = bitcast i32* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 20, i1 false)
  %23 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12
  %24 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 12
  %25 = bitcast %"class.std::__1::vector.17"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #7
  %26 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 12, i32 0, i32 1
  %27 = bitcast %"class.net::HashValue"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.17"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = sdiv exact i64 %31, 36
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %61, label %34

34:                                               ; preds = %18
  %35 = icmp ugt i64 %32, 512409557603043100
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector.17"* %23 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #8
  unreachable

38:                                               ; preds = %34
  %39 = tail call i8* @_Znwm(i64 %31) #9
  %40 = bitcast i8* %39 to %"class.net::HashValue"*
  %41 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12, i32 0, i32 1
  %42 = bitcast %"class.net::HashValue"** %41 to i8**
  store i8* %39, i8** %42, align 8
  %43 = bitcast %"class.std::__1::vector.17"* %23 to i8**
  store i8* %39, i8** %43, align 8
  %44 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %40, i64 %32
  %45 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  store %"class.net::HashValue"* %44, %"class.net::HashValue"** %45, align 8
  %46 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %24, i64 0, i32 0, i32 0
  %47 = load %"class.net::HashValue"*, %"class.net::HashValue"** %46, align 8
  %48 = load i64, i64* %27, align 8
  %49 = bitcast %"class.net::HashValue"** %41 to i64*
  %50 = ptrtoint i8* %39 to i64
  %51 = ptrtoint %"class.net::HashValue"* %47 to i64
  %52 = sub i64 %48, %51
  %53 = icmp sgt i64 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %38
  %55 = udiv exact i64 %52, 36
  %56 = bitcast %"class.net::HashValue"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %39, i8* align 4 %56, i64 %52, i1 false) #7
  %57 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %40, i64 %55
  %58 = ptrtoint %"class.net::HashValue"* %57 to i64
  br label %59

59:                                               ; preds = %54, %38
  %60 = phi i64 [ %58, %54 ], [ %50, %38 ]
  store i64 %60, i64* %49, align 8
  br label %61

61:                                               ; preds = %18, %59
  %62 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 13
  %63 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 13
  %64 = bitcast %"class.std::__1::basic_string"* %63 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %61
  %69 = bitcast %"class.std::__1::basic_string"* %62 to i8*
  %70 = bitcast %"class.std::__1::basic_string"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #7
  br label %76

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %62, i8* %73, i64 %75) #7
  br label %76

76:                                               ; preds = %68, %71
  %77 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14
  %78 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 14
  %79 = bitcast %"class.std::__1::vector.25"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 24, i1 false) #7
  %80 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 14, i32 0, i32 1
  %81 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.std::__1::vector.25"* %78 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %82, %84
  %86 = ashr exact i64 %85, 4
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %116, label %88

88:                                               ; preds = %76
  %89 = icmp ugt i64 %86, 1152921504606846975
  br i1 %89, label %90, label %92

90:                                               ; preds = %88
  %91 = bitcast %"class.std::__1::vector.25"* %77 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #8
  unreachable

92:                                               ; preds = %88
  %93 = tail call i8* @_Znwm(i64 %85) #9
  %94 = bitcast i8* %93 to %"struct.net::SignedCertificateTimestampAndStatus"*
  %95 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14, i32 0, i32 1
  %96 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %95 to i8**
  store i8* %93, i8** %96, align 8
  %97 = bitcast %"class.std::__1::vector.25"* %77 to i8**
  store i8* %93, i8** %97, align 8
  %98 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %94, i64 %86
  %99 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14, i32 0, i32 2, i32 0, i32 0
  store %"struct.net::SignedCertificateTimestampAndStatus"* %98, %"struct.net::SignedCertificateTimestampAndStatus"** %99, align 8
  %100 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %78, i64 0, i32 0, i32 0
  %101 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %100, align 8
  %102 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %80, align 8
  %103 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %95 to i64*
  %104 = ptrtoint i8* %93 to i64
  %105 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %101, %102
  br i1 %105, label %114, label %106

106:                                              ; preds = %92, %106
  %107 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %110, %106 ], [ %94, %92 ]
  %108 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %109, %106 ], [ %101, %92 ]
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusC1ERKS0_(%"struct.net::SignedCertificateTimestampAndStatus"* %107, %"struct.net::SignedCertificateTimestampAndStatus"* dereferenceable(16) %108) #7
  %109 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %108, i64 1
  %110 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %107, i64 1
  %111 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %109, %102
  br i1 %111, label %112, label %106

112:                                              ; preds = %106
  %113 = ptrtoint %"struct.net::SignedCertificateTimestampAndStatus"* %110 to i64
  br label %114

114:                                              ; preds = %112, %92
  %115 = phi i64 [ %104, %92 ], [ %113, %112 ]
  store i64 %115, i64* %103, align 8
  br label %116

116:                                              ; preds = %76, %114
  %117 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 15
  %118 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 15
  %119 = load i32, i32* %118, align 8
  store i32 %119, i32* %117, align 8
  %120 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 16
  %121 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 16
  tail call void @_ZN3net16OCSPVerifyResultC1ERKS0_(%"struct.net::OCSPVerifyResult"* %120, %"struct.net::OCSPVerifyResult"* dereferenceable(8) %121) #7
  %122 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 17
  %123 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 17
  %124 = load i8, i8* %123, align 4, !range !2
  store i8 %124, i8* %122, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3net16OCSPVerifyResultC1ERKS0_(%"struct.net::OCSPVerifyResult"*, %"struct.net::OCSPVerifyResult"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net7SSLInfoD2Ev(%"class.net::SSLInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 16
  tail call void @_ZN3net16OCSPVerifyResultD1Ev(%"struct.net::OCSPVerifyResult"* %2) #7
  %3 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14
  %4 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %4, align 8
  %6 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"* %5 to i8*
  %9 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14, i32 0, i32 1
  %10 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %9, align 8
  %11 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %10, %5
  br i1 %11, label %19, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %13, i64 -1
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"* %14) #7
  %15 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %14, %5
  br i1 %15, label %16, label %12

16:                                               ; preds = %12
  %17 = bitcast %"class.std::__1::vector.25"* %3 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i8* [ %18, %16 ], [ %8, %7 ]
  store %"struct.net::SignedCertificateTimestampAndStatus"* %5, %"struct.net::SignedCertificateTimestampAndStatus"** %9, align 8
  tail call void @_ZdlPv(i8* %20) #9
  br label %21

21:                                               ; preds = %1, %19
  %22 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 13
  %23 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #9
  br label %30

30:                                               ; preds = %21, %27
  %31 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12, i32 0, i32 0
  %32 = load %"class.net::HashValue"*, %"class.net::HashValue"** %31, align 8
  %33 = icmp eq %"class.net::HashValue"* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %30
  %35 = ptrtoint %"class.net::HashValue"* %32 to i64
  %36 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12, i32 0, i32 1
  %37 = bitcast %"class.net::HashValue"** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast %"class.net::HashValue"* %32 to i8*
  tail call void @_ZdlPv(i8* %38) #9
  br label %39

39:                                               ; preds = %30, %34
  %40 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 1, i32 0
  %41 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %40, align 8
  %42 = icmp eq %"class.net::X509Certificate"* %41, null
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %41) #7
  %48 = bitcast %"class.net::X509Certificate"* %41 to i8*
  tail call void @_ZdlPv(i8* %48) #9
  br label %49

49:                                               ; preds = %39, %43, %47
  %50 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %50, align 8
  %52 = icmp eq %"class.net::X509Certificate"* %51, null
  br i1 %52, label %59, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = atomicrmw sub i32* %54, i32 1 acq_rel
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %51) #7
  %58 = bitcast %"class.net::X509Certificate"* %51 to i8*
  tail call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %49, %53, %57
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net16OCSPVerifyResultD1Ev(%"struct.net::OCSPVerifyResult"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.net::SSLInfo"* @_ZN3net7SSLInfoaSERKS0_(%"class.net::SSLInfo"* returned, %"class.net::SSLInfo"* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %3, align 8
  %5 = icmp eq %"class.net::X509Certificate"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 1 monotonic
  br label %9

9:                                                ; preds = %2, %6
  %10 = ptrtoint %"class.net::X509Certificate"* %4 to i64
  %11 = bitcast %"class.net::SSLInfo"* %0 to i64*
  %12 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 0, i32 0
  %13 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %12, align 8
  store i64 %10, i64* %11, align 8
  %14 = icmp eq %"class.net::X509Certificate"* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw sub i32* %16, i32 1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %13) #7
  %20 = bitcast %"class.net::X509Certificate"* %13 to i8*
  tail call void @_ZdlPv(i8* %20) #9
  br label %21

21:                                               ; preds = %9, %15, %19
  %22 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 1, i32 0
  %24 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %23, align 8
  %25 = icmp eq %"class.net::X509Certificate"* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 1 monotonic
  br label %29

29:                                               ; preds = %21, %26
  %30 = ptrtoint %"class.net::X509Certificate"* %24 to i64
  %31 = bitcast %class.scoped_refptr* %22 to i64*
  %32 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %22, i64 0, i32 0
  %33 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %32, align 8
  store i64 %30, i64* %31, align 8
  %34 = icmp eq %"class.net::X509Certificate"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = atomicrmw sub i32* %36, i32 1 acq_rel
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %33) #7
  %40 = bitcast %"class.net::X509Certificate"* %33 to i8*
  tail call void @_ZdlPv(i8* %40) #9
  br label %41

41:                                               ; preds = %29, %35, %39
  %42 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 2
  %43 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 2
  %44 = bitcast i32* %42 to i8*
  %45 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 20, i1 false)
  %46 = icmp eq %"class.net::SSLInfo"* %0, %1
  br i1 %46, label %89, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 12
  %49 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 12, i32 0, i32 0
  %50 = load %"class.net::HashValue"*, %"class.net::HashValue"** %49, align 8
  %51 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 12, i32 0, i32 1
  %52 = load %"class.net::HashValue"*, %"class.net::HashValue"** %51, align 8
  tail call void @_ZNSt3__16vectorIN3net9HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.17"* %48, %"class.net::HashValue"* %50, %"class.net::HashValue"* %52) #7
  %53 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 13
  %54 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 13
  %55 = bitcast %"class.std::__1::basic_string"* %53 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = icmp slt i8 %57, 0
  %59 = bitcast %"class.std::__1::basic_string"* %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %58, label %73, label %63

63:                                               ; preds = %47
  br i1 %62, label %67, label %64

64:                                               ; preds = %63
  %65 = bitcast %"class.std::__1::basic_string"* %53 to i8*
  %66 = bitcast %"class.std::__1::basic_string"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 24, i1 false) #7
  br label %83

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %53, i8* %69, i64 %71) #7
  br label %83

73:                                               ; preds = %47
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.std::__1::basic_string"* %54 to i8*
  %79 = zext i8 %61 to i64
  %80 = select i1 %62, i8* %75, i8* %78
  %81 = select i1 %62, i64 %77, i64 %79
  %82 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %53, i8* %80, i64 %81) #7
  br label %83

83:                                               ; preds = %64, %67, %73
  %84 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 14
  %85 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 14, i32 0, i32 0
  %86 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %85, align 8
  %87 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 14, i32 0, i32 1
  %88 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %87, align 8
  tail call void @_ZNSt3__16vectorIN3net35SignedCertificateTimestampAndStatusENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.25"* %84, %"struct.net::SignedCertificateTimestampAndStatus"* %86, %"struct.net::SignedCertificateTimestampAndStatus"* %88) #7
  br label %89

89:                                               ; preds = %41, %83
  %90 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %0, i64 0, i32 15
  %91 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 15
  %92 = bitcast i32* %90 to i8*
  %93 = bitcast i32* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 13, i1 false)
  ret %"class.net::SSLInfo"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net7SSLInfo5ResetEv(%"class.net::SSLInfo"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.net::SSLInfo", align 8
  %3 = bitcast %"class.net::SSLInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  %4 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %2, i64 0, i32 12
  %5 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %2, i64 0, i32 15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 36, i1 false) #7
  %6 = bitcast %"class.std::__1::vector.17"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 72, i1 false) #7
  store i32 4, i32* %5, align 8
  %7 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %2, i64 0, i32 16
  call void @_ZN3net16OCSPVerifyResultC1Ev(%"struct.net::OCSPVerifyResult"* %7) #7
  %8 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %2, i64 0, i32 17
  store i8 0, i8* %8, align 4
  %9 = call dereferenceable(128) %"class.net::SSLInfo"* @_ZN3net7SSLInfoaSERKS0_(%"class.net::SSLInfo"* %0, %"class.net::SSLInfo"* nonnull dereferenceable(128) %2)
  call void @_ZN3net7SSLInfoD2Ev(%"class.net::SSLInfo"* nonnull %2) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN3net35SignedCertificateTimestampAndStatusC1ERKS0_(%"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"* dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net9HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.17"*, %"class.net::HashValue"*, %"class.net::HashValue"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.net::HashValue"* %2 to i64
  %5 = ptrtoint %"class.net::HashValue"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 36
  %8 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.net::HashValue"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.17"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 36
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.net::HashValue"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.net::HashValue"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 36
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %1, i64 %22
  %25 = select i1 %23, %"class.net::HashValue"* %24, %"class.net::HashValue"* %2
  %26 = ptrtoint %"class.net::HashValue"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = sdiv exact i64 %27, 36
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %"class.net::HashValue"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #7
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = udiv exact i64 %36, 36
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %"class.net::HashValue"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #7
  %42 = inttoptr i64 %35 to %"class.net::HashValue"*
  %43 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %42, i64 %39
  %44 = ptrtoint %"class.net::HashValue"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %87

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %16, i64 %28
  store %"class.net::HashValue"* %48, %"class.net::HashValue"** %18, align 8
  br label %87

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"class.net::HashValue"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #9
  %55 = bitcast %"class.std::__1::vector.17"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #7
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 512409557603043100
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.17"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #8
  unreachable

61:                                               ; preds = %56
  %62 = sdiv exact i64 %57, 36
  %63 = icmp ult i64 %62, 256204778801521550
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = shl nsw i64 %62, 1
  %66 = icmp ult i64 %65, %7
  %67 = select i1 %66, i64 %7, i64 %65
  br label %68

68:                                               ; preds = %64, %61
  %69 = phi i64 [ %67, %64 ], [ 512409557603043100, %61 ]
  %70 = mul i64 %69, 36
  %71 = tail call i8* @_Znwm(i64 %70) #9
  %72 = bitcast i8* %71 to %"class.net::HashValue"*
  %73 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %74 = bitcast %"class.net::HashValue"** %73 to i8**
  store i8* %71, i8** %74, align 8
  %75 = bitcast %"class.std::__1::vector.17"* %0 to i8**
  store i8* %71, i8** %75, align 8
  %76 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %72, i64 %69
  store %"class.net::HashValue"* %76, %"class.net::HashValue"** %8, align 8
  %77 = bitcast %"class.net::HashValue"** %73 to i64*
  %78 = ptrtoint i8* %71 to i64
  %79 = icmp sgt i64 %6, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %68
  %81 = udiv exact i64 %6, 36
  %82 = bitcast %"class.net::HashValue"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %71, i8* align 4 %82, i64 %6, i1 false) #7
  %83 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %72, i64 %81
  %84 = ptrtoint %"class.net::HashValue"* %83 to i64
  br label %85

85:                                               ; preds = %68, %80
  %86 = phi i64 [ %84, %80 ], [ %78, %68 ]
  store i64 %86, i64* %77, align 8
  br label %87

87:                                               ; preds = %45, %47, %85
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net35SignedCertificateTimestampAndStatusENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.25"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.net::SignedCertificateTimestampAndStatus"* %2 to i64
  %5 = ptrtoint %"struct.net::SignedCertificateTimestampAndStatus"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  %8 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.25"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.net::SignedCertificateTimestampAndStatus"*
  br i1 %15, label %80, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 4
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %1, i64 %22
  %25 = select i1 %23, %"struct.net::SignedCertificateTimestampAndStatus"* %24, %"struct.net::SignedCertificateTimestampAndStatus"* %2
  %26 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %25, %1
  br i1 %26, label %55, label %27

27:                                               ; preds = %17, %48
  %28 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %53, %48 ], [ %16, %17 ]
  %29 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %52, %48 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %29, i64 0, i32 0, i32 0
  %31 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %30, align 8
  %32 = icmp eq %"struct.net::ct::SignedCertificateTimestamp"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %33, %27
  %37 = ptrtoint %"struct.net::ct::SignedCertificateTimestamp"* %31 to i64
  %38 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"* %28 to i64*
  %39 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %28, i64 0, i32 0, i32 0
  %40 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"struct.net::ct::SignedCertificateTimestamp"* %40, null
  br i1 %41, label %48, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw sub i32* %43, i32 1 acq_rel
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  tail call void @_ZN3net2ct26SignedCertificateTimestampD1Ev(%"struct.net::ct::SignedCertificateTimestamp"* nonnull %40) #7
  %47 = bitcast %"struct.net::ct::SignedCertificateTimestamp"* %40 to i8*
  tail call void @_ZdlPv(i8* %47) #9
  br label %48

48:                                               ; preds = %46, %42, %36
  %49 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %29, i64 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %28, i64 0, i32 1
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %29, i64 1
  %53 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %28, i64 1
  %54 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %52, %25
  br i1 %54, label %55, label %27

55:                                               ; preds = %48, %17
  %56 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %16, %17 ], [ %53, %48 ]
  br i1 %23, label %57, label %72

57:                                               ; preds = %55
  %58 = load i64, i64* %19, align 8
  %59 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %25, %2
  br i1 %59, label %70, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %58 to %"struct.net::SignedCertificateTimestampAndStatus"*
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %66, %62 ], [ %61, %60 ]
  %64 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %65, %62 ], [ %24, %60 ]
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusC1ERKS0_(%"struct.net::SignedCertificateTimestampAndStatus"* %63, %"struct.net::SignedCertificateTimestampAndStatus"* dereferenceable(16) %64) #7
  %65 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %64, i64 1
  %66 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %63, i64 1
  %67 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %65, %2
  br i1 %67, label %68, label %62

68:                                               ; preds = %62
  %69 = ptrtoint %"struct.net::SignedCertificateTimestampAndStatus"* %66 to i64
  br label %70

70:                                               ; preds = %57, %68
  %71 = phi i64 [ %58, %57 ], [ %69, %68 ]
  store i64 %71, i64* %19, align 8
  br label %134

72:                                               ; preds = %55
  %73 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %18, align 8
  %74 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %73, %56
  br i1 %74, label %79, label %75

75:                                               ; preds = %72, %75
  %76 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %77, %75 ], [ %73, %72 ]
  %77 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %76, i64 -1
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"* %77) #7
  %78 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %77, %56
  br i1 %78, label %79, label %75

79:                                               ; preds = %75, %72
  store %"struct.net::SignedCertificateTimestampAndStatus"* %56, %"struct.net::SignedCertificateTimestampAndStatus"** %18, align 8
  br label %134

80:                                               ; preds = %3
  %81 = icmp eq i64 %12, 0
  br i1 %81, label %97, label %82

82:                                               ; preds = %80
  %83 = inttoptr i64 %12 to i8*
  %84 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %0, i64 0, i32 0, i32 1
  %85 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %84, align 8
  %86 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %85, %16
  br i1 %86, label %94, label %87

87:                                               ; preds = %82, %87
  %88 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %89, %87 ], [ %85, %82 ]
  %89 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %88, i64 -1
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"* %89) #7
  %90 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %89, %16
  br i1 %90, label %91, label %87

91:                                               ; preds = %87
  %92 = bitcast %"class.std::__1::vector.25"* %0 to i8**
  %93 = load i8*, i8** %92, align 8
  br label %94

94:                                               ; preds = %91, %82
  %95 = phi i8* [ %93, %91 ], [ %83, %82 ]
  store %"struct.net::SignedCertificateTimestampAndStatus"* %16, %"struct.net::SignedCertificateTimestampAndStatus"** %84, align 8
  tail call void @_ZdlPv(i8* %95) #9
  %96 = bitcast %"class.std::__1::vector.25"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 24, i1 false) #7
  br label %97

97:                                               ; preds = %80, %94
  %98 = phi i64 [ %10, %80 ], [ 0, %94 ]
  %99 = icmp ugt i64 %7, 1152921504606846975
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  %101 = bitcast %"class.std::__1::vector.25"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %101) #8
  unreachable

102:                                              ; preds = %97
  %103 = ashr exact i64 %98, 4
  %104 = icmp ult i64 %103, 576460752303423487
  br i1 %104, label %105, label %112

105:                                              ; preds = %102
  %106 = ashr exact i64 %98, 3
  %107 = icmp ult i64 %106, %7
  br i1 %107, label %112, label %108

108:                                              ; preds = %105
  %109 = icmp ugt i64 %106, 1152921504606846975
  br i1 %109, label %110, label %112

110:                                              ; preds = %108
  %111 = bitcast %"class.std::__1::vector.25"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %111) #8
  unreachable

112:                                              ; preds = %105, %102, %108
  %113 = phi i64 [ %106, %108 ], [ 1152921504606846975, %102 ], [ %7, %105 ]
  %114 = shl i64 %113, 4
  %115 = tail call i8* @_Znwm(i64 %114) #9
  %116 = bitcast i8* %115 to %"struct.net::SignedCertificateTimestampAndStatus"*
  %117 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %0, i64 0, i32 0, i32 1
  %118 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %117 to i8**
  store i8* %115, i8** %118, align 8
  %119 = bitcast %"class.std::__1::vector.25"* %0 to i8**
  store i8* %115, i8** %119, align 8
  %120 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %116, i64 %113
  store %"struct.net::SignedCertificateTimestampAndStatus"* %120, %"struct.net::SignedCertificateTimestampAndStatus"** %8, align 8
  %121 = bitcast %"struct.net::SignedCertificateTimestampAndStatus"** %117 to i64*
  %122 = ptrtoint i8* %115 to i64
  %123 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %1, %2
  br i1 %123, label %132, label %124

124:                                              ; preds = %112, %124
  %125 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %128, %124 ], [ %116, %112 ]
  %126 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %127, %124 ], [ %1, %112 ]
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusC1ERKS0_(%"struct.net::SignedCertificateTimestampAndStatus"* %125, %"struct.net::SignedCertificateTimestampAndStatus"* dereferenceable(16) %126) #7
  %127 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %126, i64 1
  %128 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %125, i64 1
  %129 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %127, %2
  br i1 %129, label %130, label %124

130:                                              ; preds = %124
  %131 = ptrtoint %"struct.net::SignedCertificateTimestampAndStatus"* %128 to i64
  br label %132

132:                                              ; preds = %112, %130
  %133 = phi i64 [ %122, %112 ], [ %131, %130 ]
  store i64 %133, i64* %121, align 8
  br label %134

134:                                              ; preds = %70, %79, %132
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net2ct26SignedCertificateTimestampD1Ev(%"struct.net::ct::SignedCertificateTimestamp"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
