; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsCurve.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsCurve.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDVector = type { double, double }
%struct.SkPoint = type { float, float }
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkDRect = type { double, double, double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>

@__const._ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_.i = private unnamed_addr constant %class.SkIntersections <{ [13 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x [13 x double]] [[13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [2 x i16] [i16 -21846, i16 -21846], [2 x i8] c"\AA\AA", i8 -86, i8 -86, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZL18CurveDIntersectRay = internal unnamed_addr constant [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*] [void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* null, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19dline_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19dquad_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL20dconic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL20dcubic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections], align 16
@__const._ZN8SkDCurve14setConicBoundsEPK7SkPointfddP15SkPathOpsBounds.dCurve = private unnamed_addr constant { %struct.SkDQuad, float, [4 x i8] } { %struct.SkDQuad { [3 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve*, i32, %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.SkIntersections, align 8
  %10 = alloca %struct.SkDLine, align 8
  %11 = add i32 %1, 1
  %12 = ashr i32 %11, 2
  %13 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = bitcast %struct.SkDCurve* %0 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %5, align 8
  %16 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16)
  store i64 %15, i64* %6, align 8
  %17 = icmp sge i32 %12, %1
  %18 = bitcast i64 %15 to double
  br i1 %17, label %46, label %19

19:                                               ; preds = %4
  %20 = bitcast i64* %5 to double*
  %21 = bitcast i64* %6 to double*
  %22 = sub i32 %11, %12
  %23 = zext i32 %22 to i64
  %24 = add nsw i64 %23, -1
  %25 = and i64 %24, 1
  %26 = icmp eq i32 %22, 2
  br i1 %26, label %29, label %27

27:                                               ; preds = %19
  %28 = sub nsw i64 %24, %25
  br label %55

29:                                               ; preds = %55, %19
  %30 = phi double [ undef, %19 ], [ %70, %55 ]
  %31 = phi double [ undef, %19 ], [ %72, %55 ]
  %32 = phi double [ %18, %19 ], [ %72, %55 ]
  %33 = phi i64 [ 1, %19 ], [ %73, %55 ]
  %34 = phi double [ %18, %19 ], [ %70, %55 ]
  %35 = icmp eq i64 %25, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %33, i32 0
  %38 = load double, double* %37, align 8
  %39 = fcmp olt double %32, %38
  %40 = select i1 %39, double %38, double %32
  %41 = fcmp olt double %38, %34
  %42 = select i1 %41, double %38, double %34
  br label %43

43:                                               ; preds = %29, %36
  %44 = phi double [ %30, %29 ], [ %42, %36 ]
  %45 = phi double [ %31, %29 ], [ %40, %36 ]
  store double %45, double* %21, align 8
  store double %44, double* %20, align 8
  br label %46

46:                                               ; preds = %4, %43
  %47 = phi double [ %45, %43 ], [ %18, %4 ]
  %48 = phi double [ %44, %43 ], [ %18, %4 ]
  %49 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %50 = load double, double* %49, align 8
  %51 = fptrunc double %48 to float
  %52 = fptrunc double %50 to float
  %53 = fptrunc double %47 to float
  %54 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %51, float %52, float %53) #6
  br i1 %54, label %76, label %226

55:                                               ; preds = %55, %27
  %56 = phi double [ %18, %27 ], [ %72, %55 ]
  %57 = phi i64 [ 1, %27 ], [ %73, %55 ]
  %58 = phi double [ %18, %27 ], [ %70, %55 ]
  %59 = phi i64 [ %28, %27 ], [ %74, %55 ]
  %60 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %57, i32 0
  %61 = load double, double* %60, align 8
  %62 = fcmp olt double %61, %58
  %63 = select i1 %62, double %61, double %58
  %64 = fcmp olt double %56, %61
  %65 = select i1 %64, double %61, double %56
  %66 = add nuw nsw i64 %57, 1
  %67 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %66, i32 0
  %68 = load double, double* %67, align 8
  %69 = fcmp olt double %68, %63
  %70 = select i1 %69, double %68, double %63
  %71 = fcmp olt double %65, %68
  %72 = select i1 %71, double %68, double %65
  %73 = add nuw nsw i64 %57, 2
  %74 = add i64 %59, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %29, label %55

76:                                               ; preds = %46
  %77 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77)
  %78 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %7, align 8
  %81 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81)
  store i64 %80, i64* %8, align 8
  %82 = bitcast i64 %80 to double
  br i1 %17, label %110, label %83

83:                                               ; preds = %76
  %84 = bitcast i64* %7 to double*
  %85 = bitcast i64* %8 to double*
  %86 = sub i32 %11, %12
  %87 = zext i32 %86 to i64
  %88 = add nsw i64 %87, -1
  %89 = and i64 %88, 1
  %90 = icmp eq i32 %86, 2
  br i1 %90, label %93, label %91

91:                                               ; preds = %83
  %92 = sub nsw i64 %88, %89
  br label %119

93:                                               ; preds = %119, %83
  %94 = phi double [ undef, %83 ], [ %134, %119 ]
  %95 = phi double [ undef, %83 ], [ %136, %119 ]
  %96 = phi double [ %82, %83 ], [ %136, %119 ]
  %97 = phi i64 [ 1, %83 ], [ %137, %119 ]
  %98 = phi double [ %82, %83 ], [ %134, %119 ]
  %99 = icmp eq i64 %89, 0
  br i1 %99, label %107, label %100

100:                                              ; preds = %93
  %101 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %97, i32 1
  %102 = load double, double* %101, align 8
  %103 = fcmp olt double %96, %102
  %104 = select i1 %103, double %102, double %96
  %105 = fcmp olt double %102, %98
  %106 = select i1 %105, double %102, double %98
  br label %107

107:                                              ; preds = %93, %100
  %108 = phi double [ %94, %93 ], [ %106, %100 ]
  %109 = phi double [ %95, %93 ], [ %104, %100 ]
  store double %109, double* %85, align 8
  store double %108, double* %84, align 8
  br label %110

110:                                              ; preds = %76, %107
  %111 = phi double [ %109, %107 ], [ %82, %76 ]
  %112 = phi double [ %108, %107 ], [ %82, %76 ]
  %113 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %114 = load double, double* %113, align 8
  %115 = fptrunc double %112 to float
  %116 = fptrunc double %114 to float
  %117 = fptrunc double %111 to float
  %118 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %115, float %116, float %117) #6
  br i1 %118, label %140, label %224

119:                                              ; preds = %119, %91
  %120 = phi double [ %82, %91 ], [ %136, %119 ]
  %121 = phi i64 [ 1, %91 ], [ %137, %119 ]
  %122 = phi double [ %82, %91 ], [ %134, %119 ]
  %123 = phi i64 [ %92, %91 ], [ %138, %119 ]
  %124 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %121, i32 1
  %125 = load double, double* %124, align 8
  %126 = fcmp olt double %125, %122
  %127 = select i1 %126, double %125, double %122
  %128 = fcmp olt double %120, %125
  %129 = select i1 %128, double %125, double %120
  %130 = add nuw nsw i64 %121, 1
  %131 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %130, i32 1
  %132 = load double, double* %131, align 8
  %133 = fcmp olt double %132, %127
  %134 = select i1 %133, double %132, double %127
  %135 = fcmp olt double %129, %132
  %136 = select i1 %135, double %132, double %129
  %137 = add nuw nsw i64 %121, 2
  %138 = add i64 %123, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %93, label %119

140:                                              ; preds = %110
  %141 = bitcast %class.SkIntersections* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %141) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %141, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_.i to i8*), i64 464, i1 false)
  %142 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 8
  store i8 0, i8* %142, align 1
  %143 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 4, i64 0
  %144 = bitcast i8* %143 to i16*
  store i16 0, i16* %144, align 4
  %145 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 0, i64 448, i1 false) #6
  store i8 1, i8* %145, align 8
  %146 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 5
  store i8 0, i8* %146, align 2
  %147 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 3, i64 0
  %148 = bitcast i16* %147 to i32*
  store i32 0, i32* %148, align 8
  %149 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 6
  store i8 0, i8* %149, align 1
  %150 = bitcast %struct.SkDLine* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %150) #6
  %151 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %10, i64 0, i32 0, i64 1, i32 0
  %152 = bitcast %struct.SkDPoint* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %150, i8* align 8 %152, i64 16, i1 false)
  %153 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  %154 = load double, double* %153, align 8
  %155 = bitcast %struct.SkDPoint* %2 to <2 x double>*
  %156 = load <2 x double>, <2 x double>* %155, align 8
  %157 = insertelement <2 x double> undef, double %154, i32 0
  %158 = shufflevector <2 x double> %157, <2 x double> %156, <2 x i32> <i32 0, i32 2>
  %159 = fadd <2 x double> %156, %158
  %160 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  %161 = load double, double* %160, align 8
  %162 = extractelement <2 x double> %156, i32 1
  %163 = insertelement <2 x double> undef, double %162, i32 0
  %164 = insertelement <2 x double> %163, double %161, i32 1
  %165 = fsub <2 x double> %159, %164
  %166 = bitcast double* %151 to <2 x double>*
  store <2 x double> %165, <2 x double>* %166, align 8
  %167 = zext i32 %1 to i64
  %168 = getelementptr inbounds [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL18CurveDIntersectRay, i64 0, i64 %167
  %169 = load void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)** %168, align 8
  call void %169(%struct.SkDCurve* dereferenceable(64) %0, %struct.SkDLine* nonnull dereferenceable(32) %10, %class.SkIntersections* nonnull %9) #6
  %170 = load i8, i8* %146, align 2
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %222, label %172

172:                                              ; preds = %140
  %173 = bitcast %struct.SkDPoint* %2 to <2 x double>*
  br label %176

174:                                              ; preds = %176
  %175 = icmp slt i32 %192, 0
  br i1 %175, label %222, label %198

176:                                              ; preds = %172, %176
  %177 = phi i64 [ %194, %176 ], [ 0, %172 ]
  %178 = phi double [ %193, %176 ], [ 0x47EFFFFFE0000000, %172 ]
  %179 = phi i32 [ %192, %176 ], [ -1, %172 ]
  %180 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 0, i64 %177, i32 0
  %181 = load <2 x double>, <2 x double>* %173, align 8
  %182 = bitcast double* %180 to <2 x double>*
  %183 = load <2 x double>, <2 x double>* %182, align 8
  %184 = fsub <2 x double> %181, %183
  %185 = fmul <2 x double> %184, %184
  %186 = extractelement <2 x double> %185, i32 0
  %187 = extractelement <2 x double> %185, i32 1
  %188 = fadd double %186, %187
  %189 = call double @sqrt(double %188) #6
  %190 = fcmp ogt double %178, %189
  %191 = trunc i64 %177 to i32
  %192 = select i1 %190, i32 %191, i32 %179
  %193 = select i1 %190, double %189, double %178
  %194 = add nuw nsw i64 %177, 1
  %195 = load i8, i8* %146, align 2
  %196 = zext i8 %195 to i64
  %197 = icmp ult i64 %194, %196
  br i1 %197, label %176, label %174

198:                                              ; preds = %174
  %199 = fcmp olt double %47, %111
  %200 = select i1 %199, i64* %8, i64* %6
  %201 = bitcast i64* %200 to double*
  %202 = fcmp olt double %112, %48
  %203 = select i1 %202, i64* %7, i64* %5
  %204 = bitcast i64* %203 to double*
  %205 = load double, double* %204, align 8
  %206 = fsub double -0.000000e+00, %205
  %207 = load double, double* %201, align 8
  %208 = fcmp olt double %207, %206
  %209 = select i1 %208, double %206, double %207
  %210 = fadd double %193, %209
  %211 = fptrunc double %209 to float
  %212 = fptrunc double %210 to float
  %213 = call zeroext i1 @_Z19AlmostEqualUlps_Pinff(float %211, float %212) #6
  br i1 %213, label %214, label %222

214:                                              ; preds = %198
  %215 = sext i32 %192 to i64
  %216 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 2, i64 0, i64 %215
  %217 = load double, double* %216, align 8
  %218 = fcmp olt double %217, 0x3CD0000000000000
  %219 = fcmp ogt double %217, 0x3FEFFFFFFFFFFFF8
  %220 = select i1 %219, double 1.000000e+00, double %217
  %221 = select i1 %218, double 0.000000e+00, double %220
  br label %222

222:                                              ; preds = %140, %214, %198, %174
  %223 = phi double [ -1.000000e+00, %174 ], [ %221, %214 ], [ -1.000000e+00, %198 ], [ -1.000000e+00, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %150) #6
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %141) #6
  br label %224

224:                                              ; preds = %110, %222
  %225 = phi double [ %223, %222 ], [ -1.000000e+00, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77)
  br label %226

226:                                              ; preds = %46, %224
  %227 = phi double [ %225, %224 ], [ -1.000000e+00, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  ret double %227
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkDCurve6offsetEN6SkPath4VerbERK9SkDVector(%struct.SkDCurve* nocapture, i32, %struct.SkDVector* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %4 = bitcast %struct.SkDCurve* %0 to i8*
  %5 = add i32 %1, 1
  %6 = ashr i32 %5, 2
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %66, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %2, i64 0, i32 0
  %10 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %2, i64 0, i32 1
  %11 = sub i32 %5, %6
  %12 = zext i32 %11 to i64
  %13 = icmp ult i32 %11, 2
  br i1 %13, label %14, label %33

14:                                               ; preds = %64, %33, %8
  %15 = phi i64 [ 0, %33 ], [ 0, %8 ], [ %42, %64 ]
  %16 = xor i64 %15, -1
  %17 = and i64 %12, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %14
  %20 = load double, double* %9, align 8
  %21 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %15, i32 0
  %22 = load double, double* %21, align 8
  %23 = fadd double %20, %22
  store double %23, double* %21, align 8
  %24 = load double, double* %10, align 8
  %25 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %15, i32 1
  %26 = load double, double* %25, align 8
  %27 = fadd double %24, %26
  store double %27, double* %25, align 8
  %28 = or i64 %15, 1
  br label %29

29:                                               ; preds = %14, %19
  %30 = phi i64 [ %15, %14 ], [ %28, %19 ]
  %31 = sub nsw i64 0, %12
  %32 = icmp eq i64 %16, %31
  br i1 %32, label %66, label %67

33:                                               ; preds = %8
  %34 = getelementptr %struct.SkDVector, %struct.SkDVector* %2, i64 0, i32 1
  %35 = bitcast double* %34 to i8*
  %36 = getelementptr i8, i8* %35, i64 1
  %37 = icmp ugt i8* %36, %4
  %38 = getelementptr %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %12, i32 0
  %39 = icmp ult double* %10, %38
  %40 = and i1 %37, %39
  br i1 %40, label %14, label %41

41:                                               ; preds = %33
  %42 = and i64 %12, 4294967294
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %62, %43 ]
  %45 = load double, double* %9, align 8, !alias.scope !2
  %46 = insertelement <2 x double> undef, double %45, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %44, i32 0
  %49 = bitcast double* %48 to <4 x double>*
  %50 = load <4 x double>, <4 x double>* %49, align 8
  %51 = shufflevector <4 x double> %50, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %52 = shufflevector <4 x double> %50, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %53 = fadd <2 x double> %47, %51
  %54 = load double, double* %10, align 8, !alias.scope !2
  %55 = insertelement <2 x double> undef, double %54, i32 0
  %56 = shufflevector <2 x double> %55, <2 x double> undef, <2 x i32> zeroinitializer
  %57 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %44, i32 1
  %58 = fadd <2 x double> %56, %52
  %59 = getelementptr inbounds double, double* %57, i64 -1
  %60 = bitcast double* %59 to <4 x double>*
  %61 = shufflevector <2 x double> %53, <2 x double> %58, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %61, <4 x double>* %60, align 8
  %62 = add i64 %44, 2
  %63 = icmp eq i64 %62, %42
  br i1 %63, label %64, label %43, !llvm.loop !5

64:                                               ; preds = %43
  %65 = icmp eq i64 %42, %12
  br i1 %65, label %66, label %14

66:                                               ; preds = %29, %67, %64, %3
  ret void

67:                                               ; preds = %29, %67
  %68 = phi i64 [ %86, %67 ], [ %30, %29 ]
  %69 = load double, double* %9, align 8
  %70 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %68, i32 0
  %71 = load double, double* %70, align 8
  %72 = fadd double %69, %71
  store double %72, double* %70, align 8
  %73 = load double, double* %10, align 8
  %74 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %68, i32 1
  %75 = load double, double* %74, align 8
  %76 = fadd double %73, %75
  store double %76, double* %74, align 8
  %77 = add nuw nsw i64 %68, 1
  %78 = load double, double* %9, align 8
  %79 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %77, i32 0
  %80 = load double, double* %79, align 8
  %81 = fadd double %78, %80
  store double %81, double* %79, align 8
  %82 = load double, double* %10, align 8
  %83 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 %77, i32 1
  %84 = load double, double* %83, align 8
  %85 = fadd double %82, %84
  store double %85, double* %83, align 8
  %86 = add nuw nsw i64 %68, 2
  %87 = icmp eq i64 %86, %12
  br i1 %87, label %66, label %67, !llvm.loop !7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkDCurve14setConicBoundsEPK7SkPointfddP15SkPathOpsBounds(%struct.SkDCurve*, %struct.SkPoint* nocapture readonly, float, double, double, %struct.SkPathOpsBounds* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDConic, align 16
  %8 = alloca <4 x double>, align 8
  %9 = bitcast <4 x double>* %8 to %struct.SkDRect*
  %10 = bitcast %struct.SkDConic* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %10) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDCurve14setConicBoundsEPK7SkPointfddP15SkPathOpsBounds.dCurve to i8*), i64 56, i1 false)
  %11 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fpext <2 x float> %12 to <2 x double>
  %14 = bitcast %struct.SkDConic* %7 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 16
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %16 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 0, i32 0, i64 1, i32 0
  %17 = bitcast float* %15 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fpext <2 x float> %18 to <2 x double>
  %20 = bitcast double* %16 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 16
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 0, i32 0, i64 2, i32 0
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = bitcast double* %22 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 16
  %27 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 1
  store float %2, float* %27, align 16
  %28 = bitcast <4 x double>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #6
  %29 = bitcast %struct.SkDCurve* %0 to %struct.SkDConic*
  %30 = bitcast <4 x double>* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -1, i64 32, i1 false)
  call void @_ZN7SkDRect9setBoundsERK8SkDConicS2_dd(%struct.SkDRect* nonnull %9, %struct.SkDConic* nonnull dereferenceable(56) %7, %struct.SkDConic* dereferenceable(56) %29, double %3, double %4) #6
  %31 = load <4 x double>, <4 x double>* %8, align 8
  %32 = fptrunc <4 x double> %31 to <4 x float>
  %33 = bitcast %struct.SkPathOpsBounds* %5 to <4 x float>*
  store <4 x float> %32, <4 x float>* %33, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %10) #6
  ret void
}

declare void @_ZN7SkDRect9setBoundsERK8SkDConicS2_dd(%struct.SkDRect*, %struct.SkDConic* dereferenceable(56), %struct.SkDConic* dereferenceable(56), double, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkDCurve14setCubicBoundsEPK7SkPointfddP15SkPathOpsBounds(%struct.SkDCurve*, %struct.SkPoint* nocapture readonly, float, double, double, %struct.SkPathOpsBounds* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDCubic, align 16
  %8 = alloca <4 x double>, align 8
  %9 = bitcast <4 x double>* %8 to %struct.SkDRect*
  %10 = bitcast %struct.SkDCubic* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #6
  %11 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fpext <2 x float> %12 to <2 x double>
  %14 = bitcast %struct.SkDCubic* %7 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 16
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %16 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 1, i32 0
  %17 = bitcast float* %15 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fpext <2 x float> %18 to <2 x double>
  %20 = bitcast double* %16 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 16
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 2, i32 0
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = bitcast double* %22 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 16
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %28 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 3, i32 0
  %29 = bitcast float* %27 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = fpext <2 x float> %30 to <2 x double>
  %32 = bitcast double* %28 to <2 x double>*
  store <2 x double> %31, <2 x double>* %32, align 16
  %33 = bitcast <4 x double>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #6
  %34 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0
  %35 = bitcast <4 x double>* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -1, i64 32, i1 false)
  call void @_ZN7SkDRect9setBoundsERK8SkDCubicS2_dd(%struct.SkDRect* nonnull %9, %struct.SkDCubic* nonnull dereferenceable(64) %7, %struct.SkDCubic* dereferenceable(64) %34, double %3, double %4) #6
  %36 = load <4 x double>, <4 x double>* %8, align 8
  %37 = fptrunc <4 x double> %36 to <4 x float>
  %38 = bitcast %struct.SkPathOpsBounds* %5 to <4 x float>*
  store <4 x float> %37, <4 x float>* %38, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN7SkDRect9setBoundsERK8SkDCubicS2_dd(%struct.SkDRect*, %struct.SkDCubic* dereferenceable(64), %struct.SkDCubic* dereferenceable(64), double, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkDCurve13setQuadBoundsEPK7SkPointfddP15SkPathOpsBounds(%struct.SkDCurve*, %struct.SkPoint* nocapture readonly, float, double, double, %struct.SkPathOpsBounds* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDQuad, align 16
  %8 = alloca <4 x double>, align 8
  %9 = bitcast <4 x double>* %8 to %struct.SkDRect*
  %10 = bitcast %struct.SkDQuad* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #6
  %11 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %7, i64 0, i32 0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %7, i64 0, i32 0, i64 2, i32 0
  %13 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast %struct.SkDQuad* %7 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %11 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = bitcast double* %12 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 16
  %27 = bitcast <4 x double>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #6
  %28 = bitcast %struct.SkDCurve* %0 to %struct.SkDQuad*
  %29 = bitcast <4 x double>* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -1, i64 32, i1 false)
  call void @_ZN7SkDRect9setBoundsERK7SkDQuadS2_dd(%struct.SkDRect* nonnull %9, %struct.SkDQuad* nonnull dereferenceable(48) %7, %struct.SkDQuad* dereferenceable(48) %28, double %3, double %4) #6
  %30 = load <4 x double>, <4 x double>* %8, align 8
  %31 = fptrunc <4 x double> %30 to <4 x float>
  %32 = bitcast %struct.SkPathOpsBounds* %5 to <4 x float>*
  store <4 x float> %31, <4 x float>* %32, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #6
  ret void
}

declare void @_ZN7SkDRect9setBoundsERK7SkDQuadS2_dd(%struct.SkDRect*, %struct.SkDQuad* dereferenceable(48), %struct.SkDQuad* dereferenceable(48), double, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkDCurveSweep17setCurveHullSweepEN6SkPath4VerbE(%class.SkDCurveSweep* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 3
  store i8 1, i8* %3, align 1
  %4 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %5 = bitcast %class.SkDCurveSweep* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast %struct.SkDPoint* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fsub <2 x double> %8, %6
  %10 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 0, i32 0
  %11 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 0, i32 1
  %12 = bitcast double* %10 to <2 x double>*
  store <2 x double> %9, <2 x double>* %12, align 8
  %13 = icmp eq i32 %1, 1
  br i1 %13, label %14, label %20

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1
  %16 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 1
  %17 = bitcast %struct.SkDVector* %16 to i8*
  %18 = bitcast [2 x %struct.SkDVector]* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false)
  %19 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 2
  store i8 0, i8* %19, align 8
  br label %221

20:                                               ; preds = %2
  %21 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2, i32 0
  %22 = bitcast double* %21 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = fsub <2 x double> %23, %6
  %25 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 1, i32 0
  %26 = bitcast double* %25 to <2 x double>*
  store <2 x double> %24, <2 x double>* %26, align 8
  %27 = add i32 %1, 1
  %28 = ashr i32 %27, 2
  %29 = icmp sgt i32 %28, %1
  br i1 %29, label %70, label %30

30:                                               ; preds = %20
  %31 = sub i32 %27, %28
  %32 = fcmp olt <2 x double> %6, zeroinitializer
  %33 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %6
  %34 = select <2 x i1> %32, <2 x double> %33, <2 x double> %6
  %35 = extractelement <2 x double> %34, i32 0
  %36 = extractelement <2 x double> %34, i32 1
  %37 = fcmp olt double %35, %36
  %38 = select i1 %37, double %36, double %35
  %39 = fcmp ogt double %38, 0.000000e+00
  %40 = select i1 %39, double %38, double 0.000000e+00
  %41 = icmp eq i32 %31, 1
  br i1 %41, label %67, label %42

42:                                               ; preds = %30
  %43 = zext i32 %31 to i64
  %44 = add nsw i64 %43, -1
  %45 = and i64 %44, 1
  %46 = icmp eq i32 %31, 2
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = sub nsw i64 %44, %45
  br label %73

49:                                               ; preds = %73, %42
  %50 = phi double [ undef, %42 ], [ %101, %73 ]
  %51 = phi i64 [ 1, %42 ], [ %102, %73 ]
  %52 = phi double [ %40, %42 ], [ %101, %73 ]
  %53 = icmp eq i64 %45, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %51, i32 0
  %56 = bitcast double* %55 to <2 x double>*
  %57 = load <2 x double>, <2 x double>* %56, align 8
  %58 = fcmp olt <2 x double> %57, zeroinitializer
  %59 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %57
  %60 = select <2 x i1> %58, <2 x double> %59, <2 x double> %57
  %61 = extractelement <2 x double> %60, i32 0
  %62 = extractelement <2 x double> %60, i32 1
  %63 = fcmp olt double %61, %62
  %64 = select i1 %63, double %62, double %61
  %65 = fcmp olt double %52, %64
  %66 = select i1 %65, double %64, double %52
  br label %67

67:                                               ; preds = %54, %49, %30
  %68 = phi double [ %40, %30 ], [ %50, %49 ], [ %66, %54 ]
  %69 = fmul double %68, 0x3EE0000000000000
  br label %70

70:                                               ; preds = %67, %20
  %71 = phi double [ %69, %67 ], [ 0.000000e+00, %20 ]
  %72 = icmp eq i32 %1, 4
  br i1 %72, label %124, label %105

73:                                               ; preds = %73, %47
  %74 = phi i64 [ 1, %47 ], [ %102, %73 ]
  %75 = phi double [ %40, %47 ], [ %101, %73 ]
  %76 = phi i64 [ %48, %47 ], [ %103, %73 ]
  %77 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %74, i32 0
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8
  %80 = fcmp olt <2 x double> %79, zeroinitializer
  %81 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %82 = select <2 x i1> %80, <2 x double> %81, <2 x double> %79
  %83 = extractelement <2 x double> %82, i32 0
  %84 = extractelement <2 x double> %82, i32 1
  %85 = fcmp olt double %83, %84
  %86 = select i1 %85, double %84, double %83
  %87 = fcmp olt double %75, %86
  %88 = select i1 %87, double %86, double %75
  %89 = add nuw nsw i64 %74, 1
  %90 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %89, i32 0
  %91 = bitcast double* %90 to <2 x double>*
  %92 = load <2 x double>, <2 x double>* %91, align 8
  %93 = fcmp olt <2 x double> %92, zeroinitializer
  %94 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %92
  %95 = select <2 x i1> %93, <2 x double> %94, <2 x double> %92
  %96 = extractelement <2 x double> %95, i32 0
  %97 = extractelement <2 x double> %95, i32 1
  %98 = fcmp olt double %96, %97
  %99 = select i1 %98, double %97, double %96
  %100 = fcmp olt double %88, %99
  %101 = select i1 %100, double %99, double %88
  %102 = add nuw nsw i64 %74, 2
  %103 = add i64 %76, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %49, label %73

105:                                              ; preds = %70
  %106 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1
  %107 = extractelement <2 x double> %9, i32 0
  %108 = fcmp oeq double %107, 0.000000e+00
  br i1 %108, label %113, label %109

109:                                              ; preds = %105
  %110 = tail call double @llvm.fabs.f64(double %107) #6
  %111 = tail call double @llvm.fabs.f64(double %71) #6
  %112 = fcmp olt double %110, %111
  br i1 %112, label %113, label %205

113:                                              ; preds = %105, %109
  %114 = extractelement <2 x double> %9, i32 1
  %115 = fcmp oeq double %114, 0.000000e+00
  br i1 %115, label %120, label %116

116:                                              ; preds = %113
  %117 = tail call double @llvm.fabs.f64(double %114) #6
  %118 = tail call double @llvm.fabs.f64(double %71) #6
  %119 = fcmp olt double %117, %118
  br i1 %119, label %120, label %205

120:                                              ; preds = %113, %116
  %121 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 1
  %122 = bitcast [2 x %struct.SkDVector]* %106 to i8*
  %123 = bitcast %struct.SkDVector* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false)
  br label %205

124:                                              ; preds = %70
  %125 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %126 = bitcast %struct.SkDPoint* %125 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 8
  %128 = fsub <2 x double> %127, %6
  %129 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1
  %130 = extractelement <2 x double> %9, i32 0
  %131 = fcmp oeq double %130, 0.000000e+00
  %132 = extractelement <2 x double> %9, i32 1
  %133 = fcmp oeq double %132, 0.000000e+00
  %134 = and i1 %133, %131
  br i1 %134, label %135, label %157

135:                                              ; preds = %124
  %136 = getelementptr inbounds [2 x %struct.SkDVector], [2 x %struct.SkDVector]* %129, i64 0, i64 0, i32 0
  %137 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 1
  %138 = bitcast [2 x %struct.SkDVector]* %129 to i8*
  %139 = bitcast %struct.SkDVector* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false)
  %140 = bitcast double* %25 to <2 x double>*
  store <2 x double> %128, <2 x double>* %140, align 8
  %141 = load double, double* %136, align 8
  %142 = fcmp oeq double %141, 0.000000e+00
  br i1 %142, label %147, label %143

143:                                              ; preds = %135
  %144 = tail call double @llvm.fabs.f64(double %141) #6
  %145 = tail call double @llvm.fabs.f64(double %71) #6
  %146 = fcmp olt double %144, %145
  br i1 %146, label %147, label %205

147:                                              ; preds = %135, %143
  %148 = load double, double* %11, align 8
  %149 = fcmp oeq double %148, 0.000000e+00
  br i1 %149, label %154, label %150

150:                                              ; preds = %147
  %151 = tail call double @llvm.fabs.f64(double %148) #6
  %152 = tail call double @llvm.fabs.f64(double %71) #6
  %153 = fcmp olt double %151, %152
  br i1 %153, label %154, label %205

154:                                              ; preds = %147, %150
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false)
  %155 = bitcast %struct.SkDPoint* %4 to i8*
  %156 = bitcast %struct.SkDPoint* %125 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 16, i1 false)
  br label %205

157:                                              ; preds = %124
  %158 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %159 = fmul <2 x double> %158, %9
  %160 = extractelement <2 x double> %159, i32 0
  %161 = fptrunc double %160 to float
  %162 = extractelement <2 x double> %159, i32 1
  %163 = fptrunc double %162 to float
  %164 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %161, float %163) #6
  %165 = fsub double %160, %162
  %166 = select i1 %164, double 0.000000e+00, double %165
  %167 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 1, i64 1
  %168 = bitcast %struct.SkDVector* %167 to <2 x double>*
  %169 = load <2 x double>, <2 x double>* %168, align 8
  %170 = shufflevector <2 x double> %169, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %171 = fmul <2 x double> %128, %170
  %172 = extractelement <2 x double> %171, i32 0
  %173 = fptrunc double %172 to float
  %174 = extractelement <2 x double> %171, i32 1
  %175 = fptrunc double %174 to float
  %176 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %173, float %175) #6
  %177 = fsub double %172, %174
  %178 = select i1 %176, double 0.000000e+00, double %177
  %179 = fmul double %166, %178
  %180 = fcmp ult double %179, 0.000000e+00
  br i1 %180, label %184, label %181

181:                                              ; preds = %157
  %182 = bitcast double* %25 to <2 x double>*
  %183 = load <2 x double>, <2 x double>* %182, align 8
  br label %205

184:                                              ; preds = %157
  %185 = bitcast %struct.SkDVector* %167 to <2 x double>*
  %186 = load <2 x double>, <2 x double>* %185, align 8
  %187 = bitcast [2 x %struct.SkDVector]* %129 to <2 x double>*
  %188 = load <2 x double>, <2 x double>* %187, align 8
  %189 = shufflevector <2 x double> %188, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %190 = fmul <2 x double> %186, %189
  %191 = extractelement <2 x double> %190, i32 0
  %192 = fptrunc double %191 to float
  %193 = extractelement <2 x double> %190, i32 1
  %194 = fptrunc double %193 to float
  %195 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %192, float %194) #6
  %196 = fsub double %191, %193
  %197 = select i1 %195, double 0.000000e+00, double %196
  %198 = fmul double %178, %197
  %199 = fcmp olt double %198, 0.000000e+00
  br i1 %199, label %200, label %203

200:                                              ; preds = %184
  %201 = bitcast [2 x %struct.SkDVector]* %129 to i8*
  %202 = bitcast %struct.SkDVector* %167 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 16, i1 false)
  store i8 0, i8* %3, align 1
  br label %203

203:                                              ; preds = %200, %184
  %204 = bitcast double* %25 to <2 x double>*
  store <2 x double> %128, <2 x double>* %204, align 8
  br label %205

205:                                              ; preds = %181, %154, %150, %143, %203, %109, %116, %120
  %206 = phi <2 x double> [ %183, %181 ], [ %128, %154 ], [ %128, %150 ], [ %128, %143 ], [ %128, %203 ], [ %24, %109 ], [ %24, %116 ], [ %24, %120 ]
  %207 = load double, double* %10, align 8
  %208 = extractelement <2 x double> %206, i32 1
  %209 = fmul double %207, %208
  %210 = load double, double* %11, align 8
  %211 = extractelement <2 x double> %206, i32 0
  %212 = fmul double %210, %211
  %213 = fptrunc double %209 to float
  %214 = fptrunc double %212 to float
  %215 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %213, float %214) #6
  %216 = fsub double %209, %212
  %217 = select i1 %215, double 0.000000e+00, double %216
  %218 = fcmp une double %217, 0.000000e+00
  %219 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %0, i64 0, i32 2
  %220 = zext i1 %218 to i8
  store i8 %220, i8* %219, align 8
  br label %221

221:                                              ; preds = %205, %14
  ret void
}

declare zeroext i1 @_Z17AlmostBetweenUlpsfff(float, float, float) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19dline_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDLine*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* %2, %struct.SkDLine* dereferenceable(32) %4, %struct.SkDLine* dereferenceable(32) %1) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19dquad_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDQuad*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections* %2, %struct.SkDQuad* dereferenceable(48) %4, %struct.SkDLine* dereferenceable(32) %1) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20dconic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDConic*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections* %2, %struct.SkDConic* dereferenceable(56) %4, %struct.SkDLine* dereferenceable(32) %1) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20dcubic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections* %2, %struct.SkDCubic* dereferenceable(64) %4, %struct.SkDLine* dereferenceable(32) %1) #6
  ret void
}

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections*, %struct.SkDCubic* dereferenceable(64), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

declare zeroext i1 @_Z19AlmostEqualUlps_Pinff(float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !6}
