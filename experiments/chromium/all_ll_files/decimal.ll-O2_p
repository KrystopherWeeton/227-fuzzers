; ModuleID = '../../third_party/blink/renderer/platform/wtf/decimal.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/decimal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.blink::Decimal::EncodedData" = type <{ i64, i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.blink::Decimal" = type { %"class.blink::Decimal::EncodedData" }
%"struct.blink::Decimal::AlignedOperands" = type { i64, i64, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::IntegerToStringConverter" = type <{ [24 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::IntegerToStringConverter.17" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i16*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.6 }
%union.anon.6 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [10 x i8] c"-Infinity\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Infinity\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"0.\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"encode(\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Negative\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"Positive\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c")=\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.13 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.15 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.16 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN5blink7Decimal11EncodedDataC1ENS0_4SignENS1_11FormatClassE = hidden unnamed_addr alias void (%"class.blink::Decimal::EncodedData"*, i32, i32), void (%"class.blink::Decimal::EncodedData"*, i32, i32)* @_ZN5blink7Decimal11EncodedDataC2ENS0_4SignENS1_11FormatClassE
@_ZN5blink7Decimal11EncodedDataC1ENS0_4SignEim = hidden unnamed_addr alias void (%"class.blink::Decimal::EncodedData"*, i32, i32, i64), void (%"class.blink::Decimal::EncodedData"*, i32, i32, i64)* @_ZN5blink7Decimal11EncodedDataC2ENS0_4SignEim
@_ZN5blink7DecimalC1Ei = hidden unnamed_addr alias void (%"class.blink::Decimal"*, i32), void (%"class.blink::Decimal"*, i32)* @_ZN5blink7DecimalC2Ei
@_ZN5blink7DecimalC1ENS0_4SignEim = hidden unnamed_addr alias void (%"class.blink::Decimal"*, i32, i32, i64), void (%"class.blink::Decimal"*, i32, i32, i64)* @_ZN5blink7DecimalC2ENS0_4SignEim
@_ZN5blink7DecimalC1ERKNS0_11EncodedDataE = hidden unnamed_addr alias void (%"class.blink::Decimal"*, %"class.blink::Decimal::EncodedData"*), void (%"class.blink::Decimal"*, %"class.blink::Decimal::EncodedData"*)* @_ZN5blink7DecimalC2ERKNS0_11EncodedDataE
@_ZN5blink7DecimalC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::Decimal"*, %"class.blink::Decimal"*), void (%"class.blink::Decimal"*, %"class.blink::Decimal"*)* @_ZN5blink7DecimalC2ERKS0_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink7Decimal11EncodedDataC2ENS0_4SignENS1_11FormatClassE(%"class.blink::Decimal::EncodedData"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 1
  store i16 0, i16* %5, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 3
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 4
  store i32 %1, i32* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink7Decimal11EncodedDataC2ENS0_4SignEim(%"class.blink::Decimal::EncodedData"* nocapture, i32, i32, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 3
  %6 = icmp eq i64 %3, 0
  %7 = select i1 %6, i32 3, i32 1
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 4
  store i32 %1, i32* %8, align 8
  %9 = add i32 %2, 1023
  %10 = icmp ult i32 %9, 2047
  %11 = icmp ugt i64 %3, 999999999999999999
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %4, %13
  %14 = phi i64 [ %16, %13 ], [ %3, %4 ]
  %15 = phi i32 [ %17, %13 ], [ %2, %4 ]
  %16 = udiv i64 %14, 10
  %17 = add nsw i32 %15, 1
  %18 = icmp ugt i64 %14, -8446744073709551617
  br i1 %18, label %13, label %19

19:                                               ; preds = %13, %4
  %20 = phi i32 [ %2, %4 ], [ %17, %13 ]
  %21 = phi i64 [ %3, %4 ], [ %16, %13 ]
  %22 = icmp sgt i32 %20, 1023
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 0
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 1
  store i16 0, i16* %25, align 8
  store i32 0, i32* %5, align 4
  br label %34

26:                                               ; preds = %19
  %27 = icmp slt i32 %20, -1023
  %28 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 0
  br i1 %27, label %29, label %31

29:                                               ; preds = %26
  store i64 0, i64* %28, align 8
  %30 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 1
  store i16 0, i16* %30, align 8
  store i32 3, i32* %5, align 4
  br label %34

31:                                               ; preds = %26
  store i64 %21, i64* %28, align 8
  %32 = trunc i32 %20 to i16
  %33 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 1
  store i16 %32, i16* %33, align 8
  br label %34

34:                                               ; preds = %31, %29, %23
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink7Decimal11EncodedDataeqERKS1_(%"class.blink::Decimal::EncodedData"* nocapture readonly, %"class.blink::Decimal::EncodedData"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %26

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %1, i64 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = icmp eq i16 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %0, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.blink::Decimal::EncodedData", %"class.blink::Decimal::EncodedData"* %1, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %22, %24
  br label %26

26:                                               ; preds = %20, %14, %8, %2
  %27 = phi i1 [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %25, %20 ]
  ret i1 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink7DecimalC2Ei(%"class.blink::Decimal"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = icmp slt i32 %1, 0
  %4 = lshr i32 %1, 31
  %5 = sext i32 %1 to i64
  %6 = sub nsw i64 0, %5
  %7 = select i1 %3, i64 %6, i64 %5
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %9 = icmp eq i64 %7, 0
  %10 = select i1 %9, i32 3, i32 1
  store i32 %10, i32* %8, align 4
  %11 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %4, i32* %11, align 8
  %12 = icmp ugt i64 %7, 999999999999999999
  %13 = trunc i64 %7 to i32
  %14 = udiv i32 %13, 10
  %15 = zext i32 %14 to i64
  %16 = zext i1 %12 to i16
  %17 = select i1 %12, i64 %15, i64 %7
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %16, i16* %19, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink7DecimalC2ENS0_4SignEim(%"class.blink::Decimal"* nocapture, i32, i32, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %6 = icmp eq i64 %3, 0
  %7 = select i1 %6, i32 3, i32 1
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %1, i32* %8, align 8
  %9 = add i32 %2, 1023
  %10 = icmp ult i32 %9, 2047
  %11 = icmp ugt i64 %3, 999999999999999999
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %4, %13
  %14 = phi i64 [ %16, %13 ], [ %3, %4 ]
  %15 = phi i32 [ %17, %13 ], [ %2, %4 ]
  %16 = udiv i64 %14, 10
  %17 = add nsw i32 %15, 1
  %18 = icmp ugt i64 %14, -8446744073709551617
  br i1 %18, label %13, label %19

19:                                               ; preds = %13, %4
  %20 = phi i32 [ %2, %4 ], [ %17, %13 ]
  %21 = phi i64 [ %3, %4 ], [ %16, %13 ]
  %22 = icmp sgt i32 %20, 1023
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %25, align 8
  store i32 0, i32* %5, align 4
  br label %34

26:                                               ; preds = %19
  %27 = icmp slt i32 %20, -1023
  %28 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %27, label %29, label %31

29:                                               ; preds = %26
  store i64 0, i64* %28, align 8
  %30 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %30, align 8
  store i32 3, i32* %5, align 4
  br label %34

31:                                               ; preds = %26
  store i64 %21, i64* %28, align 8
  %32 = trunc i32 %20 to i16
  %33 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %32, i16* %33, align 8
  br label %34

34:                                               ; preds = %23, %29, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7DecimalC2ERKNS0_11EncodedDataE(%"class.blink::Decimal"* nocapture, %"class.blink::Decimal::EncodedData"* nocapture readonly dereferenceable(24)) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::Decimal"* %0 to i8*
  %4 = bitcast %"class.blink::Decimal::EncodedData"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7DecimalC2ERKS0_(%"class.blink::Decimal"* nocapture, %"class.blink::Decimal"* nocapture readonly dereferenceable(24)) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::Decimal"* %0 to i8*
  %4 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::Decimal"* @_ZN5blink7DecimalaSERKS0_(%"class.blink::Decimal"* returned, %"class.blink::Decimal"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::Decimal"* %0 to i8*
  %4 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 20, i1 false)
  ret %"class.blink::Decimal"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::Decimal"* @_ZN5blink7DecimalpLERKS0_(%"class.blink::Decimal"* returned, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  call void @_ZNK5blink7DecimalplERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1)
  %5 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 %4, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.blink::Decimal"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7DecimalplERKS0_(%"class.blink::Decimal"* noalias sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal"*, align 8
  %5 = alloca %"class.blink::Decimal"*, align 8
  %6 = alloca %"struct.blink::Decimal::AlignedOperands", align 8
  %7 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %"class.blink::Decimal"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = bitcast %"class.blink::Decimal"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  store %"class.blink::Decimal"* %1, %"class.blink::Decimal"** %4, align 8
  store %"class.blink::Decimal"* %2, %"class.blink::Decimal"** %5, align 8
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, -3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %53

22:                                               ; preds = %17, %3
  %23 = icmp eq i32 %14, 2
  br i1 %23, label %42, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %42, label %28

28:                                               ; preds = %24
  %29 = icmp eq i32 %14, 0
  br i1 %29, label %30, label %50

30:                                               ; preds = %28
  %31 = icmp eq i32 %26, 0
  br i1 %31, label %32, label %47

32:                                               ; preds = %30
  %33 = icmp eq i32 %8, %10
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = bitcast %"class.blink::Decimal"* %0 to i8*
  %36 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #12
  br label %146

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %38, align 8, !alias.scope !2
  %39 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %39, align 8, !alias.scope !2
  %40 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %40, align 4, !alias.scope !2
  %41 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %41, align 8, !alias.scope !2
  br label %146

42:                                               ; preds = %22, %24
  %43 = phi %"class.blink::Decimal"** [ %5, %24 ], [ %4, %22 ]
  %44 = bitcast %"class.blink::Decimal"** %43 to i8**
  %45 = load i8*, i8** %44, align 8, !noalias !5
  %46 = bitcast %"class.blink::Decimal"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %45, i64 24, i1 false) #12
  br label %146

47:                                               ; preds = %30
  %48 = bitcast %"class.blink::Decimal"* %0 to i8*
  %49 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #12
  br label %146

50:                                               ; preds = %28
  %51 = bitcast %"class.blink::Decimal"* %0 to i8*
  %52 = bitcast %"class.blink::Decimal"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false) #12
  br label %146

53:                                               ; preds = %17
  %54 = bitcast %"struct.blink::Decimal::AlignedOperands"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 24, i1 false)
  call void @_ZN5blink7Decimal13AlignOperandsERKS0_S2_(%"struct.blink::Decimal::AlignedOperands"* nonnull sret %6, %"class.blink::Decimal"* dereferenceable(24) %1, %"class.blink::Decimal"* dereferenceable(24) %2)
  %55 = icmp eq i32 %8, %10
  %56 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 0, %59
  %61 = select i1 %55, i64 %59, i64 %60
  %62 = add i64 %61, %57
  %63 = icmp ne i32 %8, 1
  %64 = icmp ne i32 %10, 0
  %65 = or i1 %63, %64
  %66 = icmp ne i64 %62, 0
  %67 = or i1 %65, %66
  br i1 %67, label %85, label %68

68:                                               ; preds = %53
  %69 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %71, align 4
  %72 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %72, align 8
  %73 = icmp sgt i32 %70, 1023
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %75, align 8
  %76 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %76, align 8
  store i32 0, i32* %71, align 4
  br label %145

77:                                               ; preds = %68
  %78 = icmp slt i32 %70, -1023
  %79 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %79, align 8
  br i1 %78, label %80, label %82

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %81, align 8
  store i32 3, i32* %71, align 4
  br label %145

82:                                               ; preds = %77
  %83 = trunc i32 %70 to i16
  %84 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %83, i16* %84, align 8
  br label %145

85:                                               ; preds = %53
  %86 = icmp sgt i64 %62, -1
  br i1 %86, label %87, label %116

87:                                               ; preds = %85
  %88 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %91 = icmp eq i64 %62, 0
  %92 = select i1 %91, i32 3, i32 1
  store i32 %92, i32* %90, align 4
  %93 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %8, i32* %93, align 8
  %94 = add i32 %89, 1023
  %95 = icmp ult i32 %94, 2047
  %96 = icmp ugt i64 %62, 999999999999999999
  %97 = and i1 %96, %95
  br i1 %97, label %98, label %101

98:                                               ; preds = %87
  %99 = udiv i64 %62, 10
  %100 = add nsw i32 %89, 1
  br label %101

101:                                              ; preds = %98, %87
  %102 = phi i32 [ %89, %87 ], [ %100, %98 ]
  %103 = phi i64 [ %62, %87 ], [ %99, %98 ]
  %104 = icmp sgt i32 %102, 1023
  br i1 %104, label %105, label %108

105:                                              ; preds = %101
  %106 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %106, align 8
  %107 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %107, align 8
  store i32 0, i32* %90, align 4
  br label %145

108:                                              ; preds = %101
  %109 = icmp slt i32 %102, -1023
  %110 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %109, label %111, label %113

111:                                              ; preds = %108
  store i64 0, i64* %110, align 8
  %112 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %112, align 8
  store i32 3, i32* %90, align 4
  br label %145

113:                                              ; preds = %108
  store i64 %103, i64* %110, align 8
  %114 = trunc i32 %102 to i16
  %115 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %114, i16* %115, align 8
  br label %145

116:                                              ; preds = %85
  %117 = zext i1 %63 to i32
  %118 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %119 = load i32, i32* %118, align 8
  %120 = sub nsw i64 0, %62
  %121 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 1, i32* %121, align 4
  %122 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %117, i32* %122, align 8
  %123 = add i32 %119, 1023
  %124 = icmp ult i32 %123, 2047
  %125 = icmp ugt i64 %120, 999999999999999999
  %126 = and i1 %125, %124
  br i1 %126, label %127, label %130

127:                                              ; preds = %116
  %128 = udiv i64 %120, 10
  %129 = add nsw i32 %119, 1
  br label %130

130:                                              ; preds = %127, %116
  %131 = phi i32 [ %119, %116 ], [ %129, %127 ]
  %132 = phi i64 [ %120, %116 ], [ %128, %127 ]
  %133 = icmp sgt i32 %131, 1023
  br i1 %133, label %134, label %137

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %135, align 8
  %136 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %136, align 8
  store i32 0, i32* %121, align 4
  br label %145

137:                                              ; preds = %130
  %138 = icmp slt i32 %131, -1023
  %139 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %138, label %140, label %142

140:                                              ; preds = %137
  store i64 0, i64* %139, align 8
  %141 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %141, align 8
  store i32 3, i32* %121, align 4
  br label %145

142:                                              ; preds = %137
  store i64 %132, i64* %139, align 8
  %143 = trunc i32 %131 to i16
  %144 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %143, i16* %144, align 8
  br label %145

145:                                              ; preds = %142, %140, %134, %113, %111, %105, %82, %80, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54) #12
  br label %146

146:                                              ; preds = %34, %37, %145, %50, %47, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::Decimal"* @_ZN5blink7DecimalmIERKS0_(%"class.blink::Decimal"* returned, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1)
  %5 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 %4, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.blink::Decimal"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* noalias sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal"*, align 8
  %5 = alloca %"class.blink::Decimal"*, align 8
  %6 = alloca %"struct.blink::Decimal::AlignedOperands", align 8
  %7 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %"class.blink::Decimal"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = bitcast %"class.blink::Decimal"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  store %"class.blink::Decimal"* %1, %"class.blink::Decimal"** %4, align 8
  store %"class.blink::Decimal"* %2, %"class.blink::Decimal"** %5, align 8
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, -3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %57

22:                                               ; preds = %17, %3
  %23 = icmp eq i32 %14, 2
  br i1 %23, label %42, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %42, label %28

28:                                               ; preds = %24
  %29 = icmp eq i32 %14, 0
  br i1 %29, label %30, label %50

30:                                               ; preds = %28
  %31 = icmp eq i32 %26, 0
  br i1 %31, label %32, label %47

32:                                               ; preds = %30
  %33 = icmp eq i32 %8, %10
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %35, align 8, !alias.scope !8
  %36 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %36, align 8, !alias.scope !8
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %37, align 4, !alias.scope !8
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %38, align 8, !alias.scope !8
  br label %150

39:                                               ; preds = %32
  %40 = bitcast %"class.blink::Decimal"* %0 to i8*
  %41 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  br label %150

42:                                               ; preds = %22, %24
  %43 = phi %"class.blink::Decimal"** [ %5, %24 ], [ %4, %22 ]
  %44 = bitcast %"class.blink::Decimal"** %43 to i8**
  %45 = load i8*, i8** %44, align 8, !noalias !11
  %46 = bitcast %"class.blink::Decimal"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %45, i64 24, i1 false) #12
  br label %150

47:                                               ; preds = %30
  %48 = bitcast %"class.blink::Decimal"* %0 to i8*
  %49 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #12
  br label %150

50:                                               ; preds = %28
  %51 = icmp ne i32 %10, 1
  %52 = zext i1 %51 to i32
  %53 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %53, align 8, !alias.scope !14
  %54 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %54, align 8, !alias.scope !14
  %55 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %55, align 4, !alias.scope !14
  %56 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %52, i32* %56, align 8, !alias.scope !14
  br label %150

57:                                               ; preds = %17
  %58 = bitcast %"struct.blink::Decimal::AlignedOperands"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 24, i1 false)
  call void @_ZN5blink7Decimal13AlignOperandsERKS0_S2_(%"struct.blink::Decimal::AlignedOperands"* nonnull sret %6, %"class.blink::Decimal"* dereferenceable(24) %1, %"class.blink::Decimal"* dereferenceable(24) %2)
  %59 = icmp eq i32 %8, %10
  %60 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 0, %63
  %65 = select i1 %59, i64 %64, i64 %63
  %66 = add i64 %65, %61
  %67 = icmp ne i32 %8, 1
  %68 = icmp ne i32 %10, 1
  %69 = or i1 %67, %68
  %70 = icmp ne i64 %66, 0
  %71 = or i1 %69, %70
  br i1 %71, label %89, label %72

72:                                               ; preds = %57
  %73 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %75, align 4
  %76 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %76, align 8
  %77 = icmp sgt i32 %74, 1023
  br i1 %77, label %78, label %81

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %79, align 8
  %80 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %80, align 8
  store i32 0, i32* %75, align 4
  br label %149

81:                                               ; preds = %72
  %82 = icmp slt i32 %74, -1023
  %83 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %83, align 8
  br i1 %82, label %84, label %86

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %85, align 8
  store i32 3, i32* %75, align 4
  br label %149

86:                                               ; preds = %81
  %87 = trunc i32 %74 to i16
  %88 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %87, i16* %88, align 8
  br label %149

89:                                               ; preds = %57
  %90 = icmp sgt i64 %66, -1
  br i1 %90, label %91, label %120

91:                                               ; preds = %89
  %92 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %95 = icmp eq i64 %66, 0
  %96 = select i1 %95, i32 3, i32 1
  store i32 %96, i32* %94, align 4
  %97 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %8, i32* %97, align 8
  %98 = add i32 %93, 1023
  %99 = icmp ult i32 %98, 2047
  %100 = icmp ugt i64 %66, 999999999999999999
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %105

102:                                              ; preds = %91
  %103 = udiv i64 %66, 10
  %104 = add nsw i32 %93, 1
  br label %105

105:                                              ; preds = %102, %91
  %106 = phi i32 [ %93, %91 ], [ %104, %102 ]
  %107 = phi i64 [ %66, %91 ], [ %103, %102 ]
  %108 = icmp sgt i32 %106, 1023
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %110, align 8
  %111 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %111, align 8
  store i32 0, i32* %94, align 4
  br label %149

112:                                              ; preds = %105
  %113 = icmp slt i32 %106, -1023
  %114 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %113, label %115, label %117

115:                                              ; preds = %112
  store i64 0, i64* %114, align 8
  %116 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %116, align 8
  store i32 3, i32* %94, align 4
  br label %149

117:                                              ; preds = %112
  store i64 %107, i64* %114, align 8
  %118 = trunc i32 %106 to i16
  %119 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %118, i16* %119, align 8
  br label %149

120:                                              ; preds = %89
  %121 = zext i1 %67 to i32
  %122 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %6, i64 0, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = sub nsw i64 0, %66
  %125 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 1, i32* %125, align 4
  %126 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %121, i32* %126, align 8
  %127 = add i32 %123, 1023
  %128 = icmp ult i32 %127, 2047
  %129 = icmp ugt i64 %124, 999999999999999999
  %130 = and i1 %129, %128
  br i1 %130, label %131, label %134

131:                                              ; preds = %120
  %132 = udiv i64 %124, 10
  %133 = add nsw i32 %123, 1
  br label %134

134:                                              ; preds = %131, %120
  %135 = phi i32 [ %123, %120 ], [ %133, %131 ]
  %136 = phi i64 [ %124, %120 ], [ %132, %131 ]
  %137 = icmp sgt i32 %135, 1023
  br i1 %137, label %138, label %141

138:                                              ; preds = %134
  %139 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %139, align 8
  %140 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %140, align 8
  store i32 0, i32* %125, align 4
  br label %149

141:                                              ; preds = %134
  %142 = icmp slt i32 %135, -1023
  %143 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %142, label %144, label %146

144:                                              ; preds = %141
  store i64 0, i64* %143, align 8
  %145 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %145, align 8
  store i32 3, i32* %125, align 4
  br label %149

146:                                              ; preds = %141
  store i64 %136, i64* %143, align 8
  %147 = trunc i32 %135 to i16
  %148 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %147, i16* %148, align 8
  br label %149

149:                                              ; preds = %146, %144, %138, %117, %115, %109, %86, %84, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #12
  br label %150

150:                                              ; preds = %34, %39, %149, %50, %47, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::Decimal"* @_ZN5blink7DecimalmLERKS0_(%"class.blink::Decimal"* returned, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  call void @_ZNK5blink7DecimalmlERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1)
  %5 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 %4, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.blink::Decimal"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7DecimalmlERKS0_(%"class.blink::Decimal"* noalias sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal"*, align 8
  %5 = alloca %"class.blink::Decimal"*, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp ne i32 %7, %9
  %11 = zext i1 %10 to i32
  %12 = bitcast %"class.blink::Decimal"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.blink::Decimal"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  store %"class.blink::Decimal"* %1, %"class.blink::Decimal"** %4, align 8
  store %"class.blink::Decimal"* %2, %"class.blink::Decimal"** %5, align 8
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, -3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %18, %3
  %24 = icmp eq i32 %15, 2
  br i1 %24, label %130, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %130, label %29

29:                                               ; preds = %25
  switch i32 %15, label %149 [
    i32 0, label %30
    i32 3, label %144
  ]

30:                                               ; preds = %29
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %125, label %135

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 1
  %41 = load i16, i16* %40, align 8
  %42 = sext i16 %41 to i32
  %43 = add nsw i32 %42, %39
  %44 = mul i64 %36, %34
  %45 = and i64 %34, 4294967295
  %46 = lshr i64 %34, 32
  %47 = and i64 %36, 4294967295
  %48 = lshr i64 %36, 32
  %49 = mul nuw i64 %47, %46
  %50 = mul nuw i64 %47, %45
  %51 = lshr i64 %50, 32
  %52 = add nuw i64 %51, %49
  %53 = mul nuw i64 %48, %46
  %54 = lshr i64 %52, 32
  %55 = add nuw i64 %54, %53
  %56 = mul nuw i64 %48, %45
  %57 = and i64 %52, 4294967295
  %58 = add nuw i64 %57, %56
  %59 = lshr i64 %58, 32
  %60 = add nuw i64 %55, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %93, label %62

62:                                               ; preds = %32, %62
  %63 = phi i32 [ %91, %62 ], [ %43, %32 ]
  %64 = phi i64 [ %90, %62 ], [ %60, %32 ]
  %65 = phi i64 [ %87, %62 ], [ %44, %32 ]
  %66 = lshr i64 %65, 32
  %67 = lshr i64 %64, 32
  %68 = trunc i64 %67 to i32
  %69 = urem i32 %68, 10
  %70 = zext i32 %69 to i64
  %71 = udiv i64 %64, 42949672960
  %72 = and i64 %64, 4294967295
  %73 = shl nuw nsw i64 %70, 32
  %74 = or i64 %73, %72
  %75 = urem i64 %74, 10
  %76 = udiv i64 %74, 10
  %77 = shl nuw nsw i64 %75, 32
  %78 = or i64 %77, %66
  %79 = urem i64 %78, 10
  %80 = udiv i64 %78, 10
  %81 = and i64 %65, 4294967294
  %82 = shl nuw nsw i64 %79, 32
  %83 = or i64 %82, %81
  %84 = udiv i64 %83, 10
  %85 = and i64 %84, 4294967295
  %86 = shl i64 %80, 32
  %87 = or i64 %85, %86
  %88 = and i64 %76, 4294967295
  %89 = shl nuw nsw i64 %71, 32
  %90 = or i64 %88, %89
  %91 = add nsw i32 %63, 1
  %92 = icmp eq i64 %90, 0
  br i1 %92, label %93, label %62

93:                                               ; preds = %62, %32
  %94 = phi i64 [ %44, %32 ], [ %87, %62 ]
  %95 = phi i32 [ %43, %32 ], [ %91, %62 ]
  %96 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %97 = icmp eq i64 %94, 0
  %98 = select i1 %97, i32 3, i32 1
  store i32 %98, i32* %96, align 4
  %99 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %99, align 8
  %100 = add i32 %95, 1023
  %101 = icmp ult i32 %100, 2047
  %102 = icmp ugt i64 %94, 999999999999999999
  %103 = and i1 %102, %101
  br i1 %103, label %104, label %110

104:                                              ; preds = %93, %104
  %105 = phi i64 [ %107, %104 ], [ %94, %93 ]
  %106 = phi i32 [ %108, %104 ], [ %95, %93 ]
  %107 = udiv i64 %105, 10
  %108 = add nsw i32 %106, 1
  %109 = icmp ugt i64 %105, -8446744073709551617
  br i1 %109, label %104, label %110

110:                                              ; preds = %104, %93
  %111 = phi i32 [ %95, %93 ], [ %108, %104 ]
  %112 = phi i64 [ %94, %93 ], [ %107, %104 ]
  %113 = icmp sgt i32 %111, 1023
  br i1 %113, label %114, label %117

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %115, align 8
  %116 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %116, align 8
  store i32 0, i32* %96, align 4
  br label %154

117:                                              ; preds = %110
  %118 = icmp slt i32 %111, -1023
  %119 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %118, label %120, label %122

120:                                              ; preds = %117
  store i64 0, i64* %119, align 8
  %121 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %121, align 8
  store i32 3, i32* %96, align 4
  br label %154

122:                                              ; preds = %117
  store i64 %112, i64* %119, align 8
  %123 = trunc i32 %111 to i16
  %124 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %123, i16* %124, align 8
  br label %154

125:                                              ; preds = %30
  %126 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %126, align 8, !alias.scope !17
  %127 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %127, align 8, !alias.scope !17
  %128 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %128, align 4, !alias.scope !17
  %129 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %129, align 8, !alias.scope !17
  br label %154

130:                                              ; preds = %23, %25
  %131 = phi %"class.blink::Decimal"** [ %5, %25 ], [ %4, %23 ]
  %132 = bitcast %"class.blink::Decimal"** %131 to i8**
  %133 = load i8*, i8** %132, align 8, !noalias !20
  %134 = bitcast %"class.blink::Decimal"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %133, i64 24, i1 false) #12
  br label %154

135:                                              ; preds = %30
  %136 = icmp eq i32 %27, 3
  %137 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %137, align 8
  %138 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %138, align 8
  %139 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  br i1 %136, label %140, label %142

140:                                              ; preds = %135
  store i32 2, i32* %139, align 4, !alias.scope !23
  %141 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %141, align 8, !alias.scope !23
  br label %154

142:                                              ; preds = %135
  store i32 0, i32* %139, align 4, !alias.scope !26
  %143 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %143, align 8, !alias.scope !26
  br label %154

144:                                              ; preds = %29
  %145 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %145, align 8, !alias.scope !29
  %146 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %146, align 8, !alias.scope !29
  %147 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %147, align 4, !alias.scope !29
  %148 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %148, align 8, !alias.scope !29
  br label %154

149:                                              ; preds = %29
  %150 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %150, align 8, !alias.scope !32
  %151 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %151, align 8, !alias.scope !32
  %152 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %152, align 4, !alias.scope !32
  %153 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %153, align 8, !alias.scope !32
  br label %154

154:                                              ; preds = %122, %120, %114, %144, %149, %140, %142, %130, %125
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::Decimal"* @_ZN5blink7DecimaldVERKS0_(%"class.blink::Decimal"* returned, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  call void @_ZNK5blink7DecimaldvERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1)
  %5 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 %4, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.blink::Decimal"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7DecimaldvERKS0_(%"class.blink::Decimal"* noalias sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal"*, align 8
  %5 = alloca %"class.blink::Decimal"*, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp ne i32 %7, %9
  %11 = zext i1 %10 to i32
  %12 = bitcast %"class.blink::Decimal"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.blink::Decimal"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  store %"class.blink::Decimal"* %1, %"class.blink::Decimal"** %4, align 8
  store %"class.blink::Decimal"* %2, %"class.blink::Decimal"** %5, align 8
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, -3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %50

23:                                               ; preds = %18, %3
  %24 = icmp eq i32 %15, 2
  br i1 %24, label %38, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %38, label %29

29:                                               ; preds = %25
  %30 = icmp eq i32 %15, 0
  br i1 %30, label %31, label %45

31:                                               ; preds = %29
  %32 = icmp eq i32 %27, 0
  %33 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %34, align 8
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  br i1 %32, label %36, label %43

36:                                               ; preds = %31
  store i32 2, i32* %35, align 4, !alias.scope !35
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %37, align 8, !alias.scope !35
  br label %156

38:                                               ; preds = %23, %25
  %39 = phi %"class.blink::Decimal"** [ %5, %25 ], [ %4, %23 ]
  %40 = bitcast %"class.blink::Decimal"** %39 to i8**
  %41 = load i8*, i8** %40, align 8, !noalias !38
  %42 = bitcast %"class.blink::Decimal"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %41, i64 24, i1 false) #12
  br label %156

43:                                               ; preds = %31
  store i32 0, i32* %35, align 4, !alias.scope !41
  %44 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %44, align 8, !alias.scope !41
  br label %156

45:                                               ; preds = %29
  %46 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %46, align 8, !alias.scope !44
  %47 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %47, align 8, !alias.scope !44
  %48 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %48, align 4, !alias.scope !44
  %49 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %49, align 8, !alias.scope !44
  br label %156

50:                                               ; preds = %18
  %51 = icmp eq i32 %20, 3
  br i1 %51, label %52, label %61

52:                                               ; preds = %50
  %53 = icmp eq i32 %15, 3
  %54 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %54, align 8
  %55 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %55, align 8
  %56 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  br i1 %53, label %57, label %59

57:                                               ; preds = %52
  store i32 2, i32* %56, align 4, !alias.scope !47
  %58 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %58, align 8, !alias.scope !47
  br label %156

59:                                               ; preds = %52
  store i32 0, i32* %56, align 4, !alias.scope !50
  %60 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %60, align 8, !alias.scope !50
  br label %156

61:                                               ; preds = %50
  %62 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %63 = load i16, i16* %62, align 8
  %64 = sext i16 %63 to i32
  %65 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 1
  %66 = load i16, i16* %65, align 8
  %67 = sext i16 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = icmp eq i32 %15, 3
  br i1 %69, label %70, label %85

70:                                               ; preds = %61
  %71 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %71, align 4
  %72 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %72, align 8
  %73 = icmp sgt i32 %68, 1023
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %75, align 8
  %76 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %76, align 8
  store i32 0, i32* %71, align 4
  br label %156

77:                                               ; preds = %70
  %78 = icmp slt i32 %68, -1023
  %79 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %79, align 8
  br i1 %78, label %80, label %82

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %81, align 8
  store i32 3, i32* %71, align 4
  br label %156

82:                                               ; preds = %77
  %83 = trunc i32 %68 to i16
  %84 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %83, i16* %84, align 8
  br label %156

85:                                               ; preds = %61
  %86 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 0
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %117, %85
  %91 = phi i32 [ %68, %85 ], [ %108, %117 ]
  %92 = phi i64 [ %87, %85 ], [ %114, %117 ]
  %93 = phi i64 [ 0, %85 ], [ %118, %117 ]
  %94 = icmp ult i64 %92, %89
  %95 = icmp ult i64 %93, 99999999999999999
  %96 = and i1 %94, %95
  br i1 %96, label %97, label %107

97:                                               ; preds = %90, %97
  %98 = phi i64 [ %102, %97 ], [ %93, %90 ]
  %99 = phi i64 [ %101, %97 ], [ %92, %90 ]
  %100 = phi i32 [ %103, %97 ], [ %91, %90 ]
  %101 = mul i64 %99, 10
  %102 = mul i64 %98, 10
  %103 = add nsw i32 %100, -1
  %104 = icmp ult i64 %101, %89
  %105 = icmp ult i64 %102, 99999999999999999
  %106 = and i1 %104, %105
  br i1 %106, label %97, label %107

107:                                              ; preds = %97, %90
  %108 = phi i32 [ %91, %90 ], [ %103, %97 ]
  %109 = phi i64 [ %92, %90 ], [ %101, %97 ]
  %110 = phi i64 [ %93, %90 ], [ %102, %97 ]
  %111 = phi i1 [ %94, %90 ], [ %104, %97 ]
  br i1 %111, label %120, label %112

112:                                              ; preds = %107
  %113 = udiv i64 %109, %89
  %114 = urem i64 %109, %89
  %115 = sub i64 999999999999999999, %113
  %116 = icmp ugt i64 %110, %115
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = add i64 %113, %110
  %119 = icmp eq i64 %114, 0
  br i1 %119, label %120, label %90

120:                                              ; preds = %117, %112, %107
  %121 = phi i64 [ %109, %107 ], [ 0, %117 ], [ %109, %112 ]
  %122 = phi i64 [ %110, %107 ], [ %118, %117 ], [ %110, %112 ]
  %123 = lshr i64 %89, 1
  %124 = icmp ugt i64 %121, %123
  %125 = zext i1 %124 to i64
  %126 = add i64 %122, %125
  %127 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %128 = icmp eq i64 %126, 0
  %129 = select i1 %128, i32 3, i32 1
  store i32 %129, i32* %127, align 4
  %130 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %130, align 8
  %131 = add i32 %108, 1023
  %132 = icmp ult i32 %131, 2047
  %133 = icmp ugt i64 %126, 999999999999999999
  %134 = and i1 %132, %133
  br i1 %134, label %135, label %141

135:                                              ; preds = %120, %135
  %136 = phi i64 [ %138, %135 ], [ %126, %120 ]
  %137 = phi i32 [ %139, %135 ], [ %108, %120 ]
  %138 = udiv i64 %136, 10
  %139 = add nsw i32 %137, 1
  %140 = icmp ugt i64 %136, -8446744073709551617
  br i1 %140, label %135, label %141

141:                                              ; preds = %135, %120
  %142 = phi i32 [ %108, %120 ], [ %139, %135 ]
  %143 = phi i64 [ %126, %120 ], [ %138, %135 ]
  %144 = icmp sgt i32 %142, 1023
  br i1 %144, label %145, label %148

145:                                              ; preds = %141
  %146 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %146, align 8
  %147 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %147, align 8
  store i32 0, i32* %127, align 4
  br label %156

148:                                              ; preds = %141
  %149 = icmp slt i32 %142, -1023
  %150 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %149, label %151, label %153

151:                                              ; preds = %148
  store i64 0, i64* %150, align 8
  %152 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %152, align 8
  store i32 3, i32* %127, align 4
  br label %156

153:                                              ; preds = %148
  store i64 %143, i64* %150, align 8
  %154 = trunc i32 %142 to i16
  %155 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %154, i16* %155, align 8
  br label %156

156:                                              ; preds = %153, %151, %145, %82, %80, %74, %57, %59, %45, %43, %38, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7DecimalngEv(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %"class.blink::Decimal"* %0 to i8*
  %8 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false) #12
  br label %40

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 2, i64 0
  %15 = load i8, i8* %14, align 2
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 2, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 5, i64 0
  %19 = load i8, i8* %18, align 4
  %20 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 5, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 5, i64 2
  %23 = load i8, i8* %22, align 2
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 5, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = icmp ne i32 %27, 1
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 %11, i64* %30, align 8
  %31 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %13, i16* %31, align 8
  %32 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 2, i64 0
  store i8 %15, i8* %32, align 2
  %33 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 2, i64 1
  store i8 %17, i8* %33, align 1
  %34 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 %4, i32* %34, align 4
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %29, i32* %35, align 8
  %36 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 5, i64 0
  store i8 %19, i8* %36, align 4
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 5, i64 1
  store i8 %21, i8* %37, align 1
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 5, i64 2
  store i8 %23, i8* %38, align 2
  %39 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 5, i64 3
  store i8 %25, i8* %39, align 1
  br label %40

40:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal3NanEv(%"class.blink::Decimal"* noalias nocapture sret) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal13AlignOperandsERKS0_S2_(%"struct.blink::Decimal::AlignedOperands"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly dereferenceable(24), %"class.blink::Decimal"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = sext i16 %8 to i32
  %10 = icmp slt i16 %8, %5
  %11 = select i1 %10, i16 %8, i16 %5
  %12 = sext i16 %11 to i32
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %2, i64 0, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  br i1 %10, label %17, label %87

17:                                               ; preds = %3
  %18 = icmp eq i64 %14, 0
  br i1 %18, label %159, label %19

19:                                               ; preds = %17, %24
  %20 = phi i64 [ %25, %24 ], [ 1, %17 ]
  %21 = phi i32 [ %22, %24 ], [ 0, %17 ]
  %22 = add nuw nsw i32 %21, 1
  %23 = icmp eq i32 %21, 19
  br i1 %23, label %27, label %24

24:                                               ; preds = %19
  %25 = mul i64 %20, 10
  %26 = icmp ugt i64 %25, %14
  br i1 %26, label %27, label %19

27:                                               ; preds = %24, %19
  %28 = sub nsw i32 %6, %9
  %29 = add nsw i32 %28, -18
  %30 = add i32 %29, %22
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %32, label %52

32:                                               ; preds = %27
  %33 = and i32 %28, 1
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i64 1, i64 10
  %36 = ashr i32 %28, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %49, label %38

38:                                               ; preds = %32, %38
  %39 = phi i32 [ %47, %38 ], [ %36, %32 ]
  %40 = phi i64 [ %46, %38 ], [ %35, %32 ]
  %41 = phi i64 [ %42, %38 ], [ 10, %32 ]
  %42 = mul i64 %41, %41
  %43 = and i32 %39, 1
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i64 1, i64 %42
  %46 = mul i64 %45, %40
  %47 = ashr i32 %39, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %38

49:                                               ; preds = %38, %32
  %50 = phi i64 [ %35, %32 ], [ %46, %38 ]
  %51 = mul i64 %50, %14
  br label %159

52:                                               ; preds = %27
  %53 = sub nsw i32 %28, %30
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, i64 1, i64 10
  %57 = ashr i32 %53, 1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %52, %59
  %60 = phi i32 [ %68, %59 ], [ %57, %52 ]
  %61 = phi i64 [ %67, %59 ], [ %56, %52 ]
  %62 = phi i64 [ %63, %59 ], [ 10, %52 ]
  %63 = mul i64 %62, %62
  %64 = and i32 %60, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 1, i64 %63
  %67 = mul i64 %66, %61
  %68 = ashr i32 %60, 1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %59

70:                                               ; preds = %59, %52
  %71 = phi i64 [ %56, %52 ], [ %67, %59 ]
  %72 = mul i64 %71, %14
  %73 = icmp sgt i32 %30, 0
  %74 = icmp ne i64 %16, 0
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %84

76:                                               ; preds = %70, %76
  %77 = phi i32 [ %80, %76 ], [ %30, %70 ]
  %78 = phi i64 [ %79, %76 ], [ %16, %70 ]
  %79 = udiv i64 %78, 10
  %80 = add nsw i32 %77, -1
  %81 = icmp sgt i32 %80, 0
  %82 = icmp ugt i64 %78, 9
  %83 = and i1 %82, %81
  br i1 %83, label %76, label %84

84:                                               ; preds = %76, %70
  %85 = phi i64 [ %16, %70 ], [ %79, %76 ]
  %86 = add nsw i32 %30, %12
  br label %159

87:                                               ; preds = %3
  %88 = icmp slt i16 %5, %8
  br i1 %88, label %89, label %159

89:                                               ; preds = %87
  %90 = icmp eq i64 %16, 0
  br i1 %90, label %159, label %91

91:                                               ; preds = %89, %96
  %92 = phi i64 [ %97, %96 ], [ 1, %89 ]
  %93 = phi i32 [ %94, %96 ], [ 0, %89 ]
  %94 = add nuw nsw i32 %93, 1
  %95 = icmp eq i32 %93, 19
  br i1 %95, label %99, label %96

96:                                               ; preds = %91
  %97 = mul i64 %92, 10
  %98 = icmp ugt i64 %97, %16
  br i1 %98, label %99, label %91

99:                                               ; preds = %96, %91
  %100 = sub nsw i32 %9, %6
  %101 = add nsw i32 %100, -18
  %102 = add i32 %101, %94
  %103 = icmp slt i32 %102, 1
  br i1 %103, label %104, label %124

104:                                              ; preds = %99
  %105 = and i32 %100, 1
  %106 = icmp eq i32 %105, 0
  %107 = select i1 %106, i64 1, i64 10
  %108 = ashr i32 %100, 1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %121, label %110

110:                                              ; preds = %104, %110
  %111 = phi i32 [ %119, %110 ], [ %108, %104 ]
  %112 = phi i64 [ %118, %110 ], [ %107, %104 ]
  %113 = phi i64 [ %114, %110 ], [ 10, %104 ]
  %114 = mul i64 %113, %113
  %115 = and i32 %111, 1
  %116 = icmp eq i32 %115, 0
  %117 = select i1 %116, i64 1, i64 %114
  %118 = mul i64 %117, %112
  %119 = ashr i32 %111, 1
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %110

121:                                              ; preds = %110, %104
  %122 = phi i64 [ %107, %104 ], [ %118, %110 ]
  %123 = mul i64 %122, %16
  br label %159

124:                                              ; preds = %99
  %125 = sub nsw i32 %100, %102
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = select i1 %127, i64 1, i64 10
  %129 = ashr i32 %125, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %124, %131
  %132 = phi i32 [ %140, %131 ], [ %129, %124 ]
  %133 = phi i64 [ %139, %131 ], [ %128, %124 ]
  %134 = phi i64 [ %135, %131 ], [ 10, %124 ]
  %135 = mul i64 %134, %134
  %136 = and i32 %132, 1
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, i64 1, i64 %135
  %139 = mul i64 %138, %133
  %140 = ashr i32 %132, 1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %131

142:                                              ; preds = %131, %124
  %143 = phi i64 [ %128, %124 ], [ %139, %131 ]
  %144 = mul i64 %143, %16
  %145 = icmp sgt i32 %102, 0
  %146 = icmp ne i64 %14, 0
  %147 = and i1 %146, %145
  br i1 %147, label %148, label %156

148:                                              ; preds = %142, %148
  %149 = phi i32 [ %152, %148 ], [ %102, %142 ]
  %150 = phi i64 [ %151, %148 ], [ %14, %142 ]
  %151 = udiv i64 %150, 10
  %152 = add nsw i32 %149, -1
  %153 = icmp sgt i32 %152, 0
  %154 = icmp ugt i64 %150, 9
  %155 = and i1 %154, %153
  br i1 %155, label %148, label %156

156:                                              ; preds = %148, %142
  %157 = phi i64 [ %14, %142 ], [ %151, %148 ]
  %158 = add nsw i32 %102, %12
  br label %159

159:                                              ; preds = %89, %17, %156, %121, %84, %49, %87
  %160 = phi i64 [ %16, %87 ], [ %16, %49 ], [ %85, %84 ], [ %123, %121 ], [ %144, %156 ], [ %16, %17 ], [ 0, %89 ]
  %161 = phi i64 [ %14, %87 ], [ %51, %49 ], [ %72, %84 ], [ %14, %121 ], [ %157, %156 ], [ 0, %17 ], [ %14, %89 ]
  %162 = phi i32 [ %6, %87 ], [ %12, %49 ], [ %86, %84 ], [ %12, %121 ], [ %158, %156 ], [ %9, %17 ], [ %6, %89 ]
  %163 = bitcast %"struct.blink::Decimal::AlignedOperands"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %163, i8 -86, i64 24, i1 false)
  %164 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %0, i64 0, i32 2
  store i32 %162, i32* %164, align 8
  %165 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %0, i64 0, i32 0
  store i64 %161, i64* %165, align 8
  %166 = getelementptr inbounds %"struct.blink::Decimal::AlignedOperands", %"struct.blink::Decimal::AlignedOperands"* %0, i64 0, i32 1
  store i64 %160, i64* %166, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal8InfinityENS0_4SignE(%"class.blink::Decimal"* noalias nocapture sret, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %4, align 8
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %1, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal4ZeroENS0_4SignE(%"class.blink::Decimal"* noalias nocapture sret, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %4, align 8
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %1, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimaleqERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = icmp eq i16 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %35, label %27

27:                                               ; preds = %2, %9, %15, %21
  %28 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12, !noalias !53
  %29 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 24, i1 false) #12, !noalias !53
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !53
  %30 = load i32, i32* %29, align 4, !noalias !53
  %31 = icmp ult i32 %30, 4
  %32 = trunc i32 %30 to i4
  %33 = icmp eq i4 %32, 3
  %34 = and i1 %31, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !53
  br label %35

35:                                               ; preds = %27, %21
  %36 = phi i1 [ true, %21 ], [ %34, %27 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal9CompareToERKS0_(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal", align 8
  %5 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %4, i64 0, i32 0, i32 3
  %7 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %4, %"class.blink::Decimal"* %1, %"class.blink::Decimal"* dereferenceable(24) %2)
  %8 = load i32, i32* %6, align 4
  switch i32 %8, label %28 [
    i32 0, label %9
    i32 2, label %21
    i32 1, label %21
    i32 3, label %23
  ]

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %4, i64 0, i32 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 1, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  br i1 %12, label %15, label %18

15:                                               ; preds = %9
  store i32 1, i32* %14, align 8
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 1, i64* %16, align 8
  %17 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %17, align 8
  br label %33

18:                                               ; preds = %9
  store i32 0, i32* %14, align 8
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 1, i64* %19, align 8
  %20 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %20, align 8
  br label %33

21:                                               ; preds = %3, %3
  %22 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %5, i64 24, i1 false) #12
  br label %33

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %24, align 8, !alias.scope !56
  %25 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %25, align 8, !alias.scope !56
  %26 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %26, align 4, !alias.scope !56
  %27 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %27, align 8, !alias.scope !56
  br label %33

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %29, align 8, !alias.scope !59
  %30 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %30, align 8, !alias.scope !59
  %31 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %31, align 4, !alias.scope !59
  %32 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %32, align 8, !alias.scope !59
  br label %33

33:                                               ; preds = %15, %18, %28, %23, %21
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimalneERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = icmp eq i16 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %40, label %27

27:                                               ; preds = %2, %9, %15, %21
  %28 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12, !noalias !62
  %29 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 24, i1 false) #12, !noalias !62
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !62
  %30 = load i32, i32* %29, align 4, !noalias !62
  switch i32 %30, label %32 [
    i32 0, label %31
    i32 2, label %35
    i32 1, label %35
    i32 3, label %33
  ]

31:                                               ; preds = %27
  br label %33

32:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !62
  br label %40

33:                                               ; preds = %31, %27
  %34 = phi i32 [ %30, %27 ], [ 1, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !62
  br label %37

35:                                               ; preds = %27, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !62
  %36 = icmp eq i32 %30, 2
  br i1 %36, label %40, label %37

37:                                               ; preds = %33, %35
  %38 = phi i32 [ %34, %33 ], [ 1, %35 ]
  %39 = icmp ne i32 %38, 3
  br label %40

40:                                               ; preds = %37, %35, %32, %21
  %41 = phi i1 [ false, %21 ], [ %39, %37 ], [ false, %35 ], [ false, %32 ]
  ret i1 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimalltERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12, !noalias !65
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 24, i1 false) #12, !noalias !65
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !65
  %6 = load i32, i32* %5, align 4, !noalias !65
  switch i32 %6, label %12 [
    i32 0, label %7
    i32 2, label %13
    i32 1, label %13
    i32 3, label %17
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8, !noalias !65
  %10 = icmp eq i32 %9, 1
  %11 = zext i1 %10 to i32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !65
  br label %18

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !65
  br label %21

13:                                               ; preds = %2, %2
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !65
  %16 = icmp eq i32 %6, 2
  br i1 %16, label %21, label %18

17:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !65
  br label %21

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %11, %7 ], [ %15, %13 ]
  %20 = icmp eq i32 %19, 1
  br label %21

21:                                               ; preds = %17, %12, %18, %13
  %22 = phi i1 [ false, %13 ], [ false, %17 ], [ %20, %18 ], [ false, %12 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimalleERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = icmp eq i16 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %45, label %27

27:                                               ; preds = %2, %9, %15, %21
  %28 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12, !noalias !68
  %29 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 24, i1 false) #12, !noalias !68
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !68
  %30 = load i32, i32* %29, align 4, !noalias !68
  switch i32 %30, label %36 [
    i32 0, label %31
    i32 2, label %37
    i32 1, label %37
    i32 3, label %41
  ]

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %33 = load i32, i32* %32, align 8, !noalias !68
  %34 = icmp eq i32 %33, 1
  %35 = zext i1 %34 to i32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !68
  br label %42

36:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !68
  br label %45

37:                                               ; preds = %27, %27
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %39 = load i32, i32* %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !68
  %40 = icmp eq i32 %30, 2
  br i1 %40, label %45, label %42

41:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !68
  br label %45

42:                                               ; preds = %37, %31
  %43 = phi i32 [ %35, %31 ], [ %39, %37 ]
  %44 = icmp eq i32 %43, 1
  br label %45

45:                                               ; preds = %37, %42, %36, %41, %21
  %46 = phi i1 [ true, %21 ], [ false, %37 ], [ true, %41 ], [ %44, %42 ], [ false, %36 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimalgtERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12, !noalias !71
  %5 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 24, i1 false) #12, !noalias !71
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !71
  %6 = load i32, i32* %5, align 4, !noalias !71
  switch i32 %6, label %12 [
    i32 0, label %7
    i32 2, label %13
    i32 1, label %13
    i32 3, label %17
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8, !noalias !71
  %10 = icmp eq i32 %9, 1
  %11 = zext i1 %10 to i32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !71
  br label %18

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !71
  br label %21

13:                                               ; preds = %2, %2
  %14 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !71
  %16 = icmp eq i32 %6, 2
  br i1 %16, label %21, label %18

17:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12, !noalias !71
  br label %21

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %11, %7 ], [ %15, %13 ]
  %20 = icmp eq i32 %19, 0
  br label %21

21:                                               ; preds = %17, %12, %18, %13
  %22 = phi i1 [ false, %13 ], [ false, %17 ], [ %20, %18 ], [ false, %12 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink7DecimalgeERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::Decimal", align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = icmp eq i16 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %45, label %27

27:                                               ; preds = %2, %9, %15, %21
  %28 = bitcast %"class.blink::Decimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12, !noalias !74
  %29 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 24, i1 false) #12, !noalias !74
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* nonnull sret %3, %"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %1) #12, !noalias !74
  %30 = load i32, i32* %29, align 4, !noalias !74
  switch i32 %30, label %36 [
    i32 0, label %31
    i32 2, label %37
    i32 1, label %37
    i32 3, label %41
  ]

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %33 = load i32, i32* %32, align 8, !noalias !74
  %34 = icmp eq i32 %33, 1
  %35 = zext i1 %34 to i32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !74
  br label %42

36:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !74
  br label %45

37:                                               ; preds = %27, %27
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %3, i64 0, i32 0, i32 4
  %39 = load i32, i32* %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !74
  %40 = icmp eq i32 %30, 2
  br i1 %40, label %45, label %42

41:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12, !noalias !74
  br label %45

42:                                               ; preds = %37, %31
  %43 = phi i32 [ %35, %31 ], [ %39, %37 ]
  %44 = icmp ne i32 %43, 1
  br label %45

45:                                               ; preds = %37, %42, %36, %41, %21
  %46 = phi i1 [ true, %21 ], [ false, %37 ], [ true, %41 ], [ %44, %42 ], [ false, %36 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal3AbsEv(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %4 = bitcast %"class.blink::Decimal"* %0 to i8*
  %5 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false) #12
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal4CeilEv(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -3
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::Decimal"* %0 to i8*
  %9 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %113

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = sext i16 %12 to i32
  %14 = icmp sgt i16 %12, -1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = bitcast %"class.blink::Decimal"* %0 to i8*
  %17 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false) #12
  br label %113

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %18, %27
  %23 = phi i64 [ %28, %27 ], [ 1, %18 ]
  %24 = phi i32 [ %25, %27 ], [ 0, %18 ]
  %25 = add nuw nsw i32 %24, 1
  %26 = icmp eq i32 %24, 19
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = mul i64 %23, 10
  %29 = icmp ugt i64 %28, %20
  br i1 %29, label %30, label %22

30:                                               ; preds = %22, %27, %18
  %31 = phi i32 [ 0, %18 ], [ 20, %22 ], [ %25, %27 ]
  %32 = sub nsw i32 0, %13
  %33 = icmp sgt i32 %31, %32
  br i1 %33, label %48, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 1, i32* %39, align 4
  %40 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 1, i64* %41, align 8
  %42 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %42, align 8
  br label %113

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %44, align 8, !alias.scope !77
  %45 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %45, align 8, !alias.scope !77
  %46 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %46, align 4, !alias.scope !77
  %47 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %47, align 8, !alias.scope !77
  br label %113

48:                                               ; preds = %30
  %49 = icmp slt i16 %12, 0
  %50 = icmp ne i64 %20, 0
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %60

52:                                               ; preds = %48, %52
  %53 = phi i32 [ %56, %52 ], [ %32, %48 ]
  %54 = phi i64 [ %55, %52 ], [ %20, %48 ]
  %55 = udiv i64 %54, 10
  %56 = add nsw i32 %53, -1
  %57 = icmp sgt i32 %56, 0
  %58 = icmp ugt i64 %54, 9
  %59 = and i1 %58, %57
  br i1 %59, label %52, label %60

60:                                               ; preds = %52, %48
  %61 = phi i64 [ %20, %48 ], [ %55, %52 ]
  %62 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %89

65:                                               ; preds = %60
  br i1 %21, label %88, label %66

66:                                               ; preds = %65
  %67 = and i32 %32, 1
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i64 1, i64 10
  %70 = ashr i32 %32, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %66, %72
  %73 = phi i32 [ %81, %72 ], [ %70, %66 ]
  %74 = phi i64 [ %80, %72 ], [ %69, %66 ]
  %75 = phi i64 [ %76, %72 ], [ 10, %66 ]
  %76 = mul i64 %75, %75
  %77 = and i32 %73, 1
  %78 = icmp eq i32 %77, 0
  %79 = select i1 %78, i64 1, i64 %76
  %80 = mul i64 %79, %74
  %81 = ashr i32 %73, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %72

83:                                               ; preds = %72, %66
  %84 = phi i64 [ %69, %66 ], [ %80, %72 ]
  %85 = urem i64 %20, %84
  %86 = icmp eq i64 %85, 0
  %87 = add i64 %61, 1
  br i1 %86, label %88, label %89

88:                                               ; preds = %65, %83
  br label %89

89:                                               ; preds = %88, %83, %60
  %90 = phi i64 [ %61, %60 ], [ %61, %88 ], [ %87, %83 ]
  %91 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %92 = icmp eq i64 %90, 0
  %93 = select i1 %92, i32 3, i32 1
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %63, i32* %94, align 8
  %95 = icmp ugt i64 %90, 999999999999999999
  br i1 %95, label %96, label %107

96:                                               ; preds = %89, %96
  %97 = phi i64 [ %99, %96 ], [ %90, %89 ]
  %98 = phi i32 [ %100, %96 ], [ 0, %89 ]
  %99 = udiv i64 %97, 10
  %100 = add nuw nsw i32 %98, 1
  %101 = icmp ugt i64 %97, -8446744073709551617
  br i1 %101, label %96, label %102

102:                                              ; preds = %96
  %103 = icmp ugt i32 %98, 1022
  br i1 %103, label %104, label %107

104:                                              ; preds = %102
  %105 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %106, align 8
  store i32 0, i32* %91, align 4
  br label %113

107:                                              ; preds = %102, %89
  %108 = phi i32 [ 0, %89 ], [ %100, %102 ]
  %109 = phi i64 [ %90, %89 ], [ %99, %102 ]
  %110 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 %109, i64* %110, align 8
  %111 = trunc i32 %108 to i16
  %112 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %111, i16* %112, align 8
  br label %113

113:                                              ; preds = %107, %104, %43, %38, %15, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal5FloorEv(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -3
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::Decimal"* %0 to i8*
  %9 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %113

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = sext i16 %12 to i32
  %14 = icmp sgt i16 %12, -1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = bitcast %"class.blink::Decimal"* %0 to i8*
  %17 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false) #12
  br label %113

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %18, %27
  %23 = phi i64 [ %28, %27 ], [ 1, %18 ]
  %24 = phi i32 [ %25, %27 ], [ 0, %18 ]
  %25 = add nuw nsw i32 %24, 1
  %26 = icmp eq i32 %24, 19
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = mul i64 %23, 10
  %29 = icmp ugt i64 %28, %20
  br i1 %29, label %30, label %22

30:                                               ; preds = %22, %27, %18
  %31 = phi i32 [ 0, %18 ], [ 20, %22 ], [ %25, %27 ]
  %32 = sub nsw i32 0, %13
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %48

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %39, align 8, !alias.scope !80
  %40 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %40, align 8, !alias.scope !80
  %41 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %41, align 4, !alias.scope !80
  %42 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %42, align 8, !alias.scope !80
  br label %113

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 1, i32* %44, align 4
  %45 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 1, i32* %45, align 8
  %46 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 1, i64* %46, align 8
  %47 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %47, align 8
  br label %113

48:                                               ; preds = %30
  %49 = icmp slt i16 %12, 0
  %50 = icmp ne i64 %20, 0
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %60

52:                                               ; preds = %48, %52
  %53 = phi i32 [ %56, %52 ], [ %32, %48 ]
  %54 = phi i64 [ %55, %52 ], [ %20, %48 ]
  %55 = udiv i64 %54, 10
  %56 = add nsw i32 %53, -1
  %57 = icmp sgt i32 %56, 0
  %58 = icmp ugt i64 %54, 9
  %59 = and i1 %58, %57
  br i1 %59, label %52, label %60

60:                                               ; preds = %52, %48
  %61 = phi i64 [ %20, %48 ], [ %55, %52 ]
  %62 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %89

65:                                               ; preds = %60
  br i1 %21, label %88, label %66

66:                                               ; preds = %65
  %67 = and i32 %32, 1
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i64 1, i64 10
  %70 = ashr i32 %32, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %66, %72
  %73 = phi i32 [ %81, %72 ], [ %70, %66 ]
  %74 = phi i64 [ %80, %72 ], [ %69, %66 ]
  %75 = phi i64 [ %76, %72 ], [ 10, %66 ]
  %76 = mul i64 %75, %75
  %77 = and i32 %73, 1
  %78 = icmp eq i32 %77, 0
  %79 = select i1 %78, i64 1, i64 %76
  %80 = mul i64 %79, %74
  %81 = ashr i32 %73, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %72

83:                                               ; preds = %72, %66
  %84 = phi i64 [ %69, %66 ], [ %80, %72 ]
  %85 = urem i64 %20, %84
  %86 = icmp eq i64 %85, 0
  %87 = add i64 %61, 1
  br i1 %86, label %88, label %89

88:                                               ; preds = %65, %83
  br label %89

89:                                               ; preds = %88, %83, %60
  %90 = phi i64 [ %61, %60 ], [ %61, %88 ], [ %87, %83 ]
  %91 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %92 = icmp eq i64 %90, 0
  %93 = select i1 %92, i32 3, i32 1
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %63, i32* %94, align 8
  %95 = icmp ugt i64 %90, 999999999999999999
  br i1 %95, label %96, label %107

96:                                               ; preds = %89, %96
  %97 = phi i64 [ %99, %96 ], [ %90, %89 ]
  %98 = phi i32 [ %100, %96 ], [ 0, %89 ]
  %99 = udiv i64 %97, 10
  %100 = add nuw nsw i32 %98, 1
  %101 = icmp ugt i64 %97, -8446744073709551617
  br i1 %101, label %96, label %102

102:                                              ; preds = %96
  %103 = icmp ugt i32 %98, 1022
  br i1 %103, label %104, label %107

104:                                              ; preds = %102
  %105 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %106, align 8
  store i32 0, i32* %91, align 4
  br label %113

107:                                              ; preds = %102, %89
  %108 = phi i32 [ 0, %89 ], [ %100, %102 ]
  %109 = phi i64 [ %90, %89 ], [ %99, %102 ]
  %110 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 %109, i64* %110, align 8
  %111 = trunc i32 %108 to i16
  %112 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %111, i16* %112, align 8
  br label %113

113:                                              ; preds = %107, %104, %43, %38, %15, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal10FromDoubleEd(%"class.blink::Decimal"* noalias sret, double) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call double @llvm.fabs.f64(double %1) #13
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String24NumberToStringECMAScriptEd(double %1) #12
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  call void @_ZN5blink7Decimal10FromStringERKN3WTF6StringE(%"class.blink::Decimal"* sret %0, %"class.WTF::String"* nonnull dereferenceable(8) %3)
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %24

24:                                               ; preds = %6, %20, %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  br label %39

25:                                               ; preds = %2
  %26 = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %26, label %27, label %34

27:                                               ; preds = %25
  %28 = fcmp olt double %1, 0.000000e+00
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %30, align 8, !alias.scope !83
  %31 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %31, align 8, !alias.scope !83
  %32 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %32, align 4, !alias.scope !83
  %33 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %29, i32* %33, align 8, !alias.scope !83
  br label %39

34:                                               ; preds = %25
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %35, align 8, !alias.scope !86
  %36 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %36, align 8, !alias.scope !86
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %37, align 4, !alias.scope !86
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %38, align 8, !alias.scope !86
  br label %39

39:                                               ; preds = %34, %27, %24
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink7Decimal10FromStringERKN3WTF6StringE(%"class.blink::Decimal"* noalias sret, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %9 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  br label %11

11:                                               ; preds = %191, %2
  %12 = phi i64 [ %200, %191 ], [ 0, %2 ]
  %13 = phi i32 [ %192, %191 ], [ 0, %2 ]
  %14 = phi i32 [ %193, %191 ], [ 0, %2 ]
  %15 = phi i32 [ %194, %191 ], [ 0, %2 ]
  %16 = phi i32 [ %195, %191 ], [ 0, %2 ]
  %17 = phi i32 [ %196, %191 ], [ 0, %2 ]
  %18 = phi i32 [ %197, %191 ], [ 0, %2 ]
  %19 = phi i32 [ %198, %191 ], [ 7, %2 ]
  %20 = phi i64 [ %199, %191 ], [ 0, %2 ]
  br i1 %5, label %23, label %21

21:                                               ; preds = %11
  %22 = load i32, i32* %6, align 4
  br label %23

23:                                               ; preds = %11, %21
  %24 = phi i32 [ %22, %21 ], [ 0, %11 ]
  %25 = zext i32 %24 to i64
  %26 = icmp ult i64 %12, %25
  br i1 %26, label %27, label %201

27:                                               ; preds = %23
  br i1 %5, label %43, label %28

28:                                               ; preds = %27
  %29 = load i32, i32* %6, align 4
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %12, %30
  br i1 %31, label %32, label %43

32:                                               ; preds = %28
  %33 = load atomic i32, i32* %7 monotonic, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %9, i64 %12
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  br label %43

40:                                               ; preds = %32
  %41 = getelementptr inbounds i16, i16* %10, i64 %12
  %42 = load i16, i16* %41, align 2
  br label %43

43:                                               ; preds = %27, %28, %36, %40
  %44 = phi i16 [ 0, %28 ], [ 0, %27 ], [ %39, %36 ], [ %42, %40 ]
  %45 = zext i16 %44 to i32
  switch i32 %19, label %186 [
    i32 0, label %46
    i32 1, label %69
    i32 2, label %69
    i32 3, label %89
    i32 4, label %101
    i32 5, label %130
    i32 6, label %140
    i32 7, label %153
    i32 8, label %168
  ]

46:                                               ; preds = %43
  %47 = add i16 %44, -48
  %48 = icmp ult i16 %47, 10
  br i1 %48, label %49, label %59

49:                                               ; preds = %46
  %50 = icmp slt i32 %15, 18
  br i1 %50, label %51, label %57

51:                                               ; preds = %49
  %52 = add nsw i32 %15, 1
  %53 = mul i64 %20, 10
  %54 = add nsw i32 %45, -48
  %55 = sext i32 %54 to i64
  %56 = add i64 %53, %55
  br label %191

57:                                               ; preds = %49
  %58 = add nsw i32 %17, 1
  br label %191

59:                                               ; preds = %46
  %60 = icmp eq i16 %44, 46
  br i1 %60, label %191, label %61

61:                                               ; preds = %59
  %62 = or i16 %44, 32
  %63 = icmp eq i16 %62, 101
  br i1 %63, label %191, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %65, align 8, !alias.scope !89
  %66 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %66, align 8, !alias.scope !89
  %67 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %67, align 4, !alias.scope !89
  %68 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %68, align 8, !alias.scope !89
  br label %291

69:                                               ; preds = %43, %43
  %70 = add i16 %44, -48
  %71 = icmp ult i16 %70, 10
  br i1 %71, label %72, label %81

72:                                               ; preds = %69
  %73 = icmp slt i32 %15, 18
  br i1 %73, label %74, label %191

74:                                               ; preds = %72
  %75 = add nsw i32 %15, 1
  %76 = add nsw i32 %16, 1
  %77 = mul i64 %20, 10
  %78 = add nsw i32 %45, -48
  %79 = sext i32 %78 to i64
  %80 = add i64 %77, %79
  br label %191

81:                                               ; preds = %69
  %82 = or i16 %44, 32
  %83 = icmp eq i16 %82, 101
  br i1 %83, label %191, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %85, align 8, !alias.scope !92
  %86 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %86, align 8, !alias.scope !92
  %87 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %87, align 4, !alias.scope !92
  %88 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %88, align 8, !alias.scope !92
  br label %291

89:                                               ; preds = %43
  switch i16 %44, label %91 [
    i16 43, label %191
    i16 45, label %90
  ]

90:                                               ; preds = %89
  br label %191

91:                                               ; preds = %89
  %92 = add i16 %44, -48
  %93 = icmp ult i16 %92, 10
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = add nsw i32 %45, -48
  br label %191

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %97, align 8, !alias.scope !95
  %98 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %98, align 8, !alias.scope !95
  %99 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %99, align 4, !alias.scope !95
  %100 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %100, align 8, !alias.scope !95
  br label %291

101:                                              ; preds = %43
  %102 = add i16 %44, -48
  %103 = icmp ult i16 %102, 10
  br i1 %103, label %104, label %125

104:                                              ; preds = %101
  %105 = mul nsw i32 %13, 10
  %106 = add nsw i32 %45, -48
  %107 = add nsw i32 %106, %105
  %108 = icmp sgt i32 %107, 1041
  br i1 %108, label %109, label %191

109:                                              ; preds = %104
  %110 = icmp eq i64 %20, 0
  br i1 %110, label %120, label %111

111:                                              ; preds = %109
  %112 = icmp eq i32 %14, 1
  %113 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %113, align 8
  %114 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %114, align 8
  %115 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  br i1 %112, label %116, label %118

116:                                              ; preds = %111
  store i32 3, i32* %115, align 4, !alias.scope !98
  %117 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %117, align 8, !alias.scope !98
  br label %291

118:                                              ; preds = %111
  store i32 0, i32* %115, align 4, !alias.scope !101
  %119 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %18, i32* %119, align 8, !alias.scope !101
  br label %291

120:                                              ; preds = %109
  %121 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %121, align 8, !alias.scope !104
  %122 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %122, align 8, !alias.scope !104
  %123 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %123, align 4, !alias.scope !104
  %124 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %18, i32* %124, align 8, !alias.scope !104
  br label %291

125:                                              ; preds = %101
  %126 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %126, align 8, !alias.scope !107
  %127 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %127, align 8, !alias.scope !107
  %128 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %128, align 4, !alias.scope !107
  %129 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %129, align 8, !alias.scope !107
  br label %291

130:                                              ; preds = %43
  %131 = add i16 %44, -48
  %132 = icmp ult i16 %131, 10
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = add nsw i32 %45, -48
  br label %191

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %136, align 8, !alias.scope !110
  %137 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %137, align 8, !alias.scope !110
  %138 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %138, align 4, !alias.scope !110
  %139 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %139, align 8, !alias.scope !110
  br label %291

140:                                              ; preds = %43
  %141 = add i16 %44, -49
  %142 = icmp ult i16 %141, 9
  br i1 %142, label %143, label %146

143:                                              ; preds = %140
  %144 = add nsw i32 %45, -48
  %145 = sext i32 %144 to i64
  br label %191

146:                                              ; preds = %140
  switch i16 %44, label %148 [
    i16 48, label %191
    i16 46, label %147
  ]

147:                                              ; preds = %146
  br label %191

148:                                              ; preds = %146
  %149 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %149, align 8, !alias.scope !113
  %150 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %150, align 8, !alias.scope !113
  %151 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %151, align 4, !alias.scope !113
  %152 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %152, align 8, !alias.scope !113
  br label %291

153:                                              ; preds = %43
  %154 = add i16 %44, -49
  %155 = icmp ult i16 %154, 9
  br i1 %155, label %156, label %159

156:                                              ; preds = %153
  %157 = add nsw i32 %45, -48
  %158 = sext i32 %157 to i64
  br label %191

159:                                              ; preds = %153
  switch i16 %44, label %163 [
    i16 45, label %191
    i16 43, label %160
    i16 48, label %161
    i16 46, label %162
  ]

160:                                              ; preds = %159
  br label %191

161:                                              ; preds = %159
  br label %191

162:                                              ; preds = %159
  br label %191

163:                                              ; preds = %159
  %164 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %164, align 8, !alias.scope !116
  %165 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %165, align 8, !alias.scope !116
  %166 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %166, align 4, !alias.scope !116
  %167 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %167, align 8, !alias.scope !116
  br label %291

168:                                              ; preds = %43
  %169 = icmp eq i16 %44, 48
  br i1 %169, label %191, label %170

170:                                              ; preds = %168
  %171 = add i16 %44, -49
  %172 = icmp ult i16 %171, 9
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = add nsw i32 %45, -48
  %175 = sext i32 %174 to i64
  br label %191

176:                                              ; preds = %170
  %177 = icmp eq i16 %44, 46
  br i1 %177, label %191, label %178

178:                                              ; preds = %176
  %179 = or i16 %44, 32
  %180 = icmp eq i16 %179, 101
  br i1 %180, label %191, label %181

181:                                              ; preds = %178
  %182 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %182, align 8, !alias.scope !119
  %183 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %183, align 8, !alias.scope !119
  %184 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %184, align 4, !alias.scope !119
  %185 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %185, align 8, !alias.scope !119
  br label %291

186:                                              ; preds = %43
  %187 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %187, align 8, !alias.scope !122
  %188 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %188, align 8, !alias.scope !122
  %189 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %189, align 4, !alias.scope !122
  %190 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %190, align 8, !alias.scope !122
  br label %291

191:                                              ; preds = %178, %176, %159, %146, %104, %89, %81, %72, %74, %61, %59, %168, %51, %57, %173, %162, %161, %160, %156, %147, %143, %133, %94, %90
  %192 = phi i32 [ %13, %178 ], [ %13, %176 ], [ %13, %159 ], [ %13, %146 ], [ %107, %104 ], [ %13, %89 ], [ %13, %81 ], [ %13, %72 ], [ %13, %74 ], [ %13, %61 ], [ %13, %59 ], [ %13, %57 ], [ %13, %51 ], [ %95, %94 ], [ %13, %90 ], [ %134, %133 ], [ %13, %147 ], [ %13, %143 ], [ %13, %162 ], [ %13, %161 ], [ %13, %160 ], [ %13, %156 ], [ %13, %173 ], [ %13, %168 ]
  %193 = phi i32 [ %14, %178 ], [ %14, %176 ], [ %14, %159 ], [ %14, %146 ], [ %14, %104 ], [ 0, %89 ], [ %14, %81 ], [ %14, %72 ], [ %14, %74 ], [ %14, %61 ], [ %14, %59 ], [ %14, %57 ], [ %14, %51 ], [ %14, %94 ], [ 1, %90 ], [ %14, %133 ], [ %14, %147 ], [ %14, %143 ], [ %14, %162 ], [ %14, %161 ], [ %14, %160 ], [ %14, %156 ], [ %14, %173 ], [ %14, %168 ]
  %194 = phi i32 [ %15, %178 ], [ %15, %176 ], [ %15, %159 ], [ %15, %146 ], [ %15, %104 ], [ %15, %89 ], [ %15, %81 ], [ %15, %72 ], [ %75, %74 ], [ %15, %61 ], [ %15, %59 ], [ %15, %57 ], [ %52, %51 ], [ %15, %94 ], [ %15, %90 ], [ %15, %133 ], [ %15, %147 ], [ 1, %143 ], [ %15, %162 ], [ %15, %161 ], [ %15, %160 ], [ 1, %156 ], [ 1, %173 ], [ %15, %168 ]
  %195 = phi i32 [ %16, %178 ], [ %16, %176 ], [ %16, %159 ], [ %16, %146 ], [ %16, %104 ], [ %16, %89 ], [ %16, %81 ], [ %16, %72 ], [ %76, %74 ], [ %16, %61 ], [ %16, %59 ], [ %16, %57 ], [ %16, %51 ], [ %16, %94 ], [ %16, %90 ], [ %16, %133 ], [ %16, %147 ], [ %16, %143 ], [ %16, %162 ], [ %16, %161 ], [ %16, %160 ], [ %16, %156 ], [ %16, %173 ], [ %16, %168 ]
  %196 = phi i32 [ %17, %178 ], [ %17, %176 ], [ %17, %159 ], [ %17, %146 ], [ %17, %104 ], [ %17, %89 ], [ %17, %81 ], [ %17, %72 ], [ %17, %74 ], [ %17, %61 ], [ %17, %59 ], [ %58, %57 ], [ %17, %51 ], [ %17, %94 ], [ %17, %90 ], [ %17, %133 ], [ %17, %147 ], [ %17, %143 ], [ %17, %162 ], [ %17, %161 ], [ %17, %160 ], [ %17, %156 ], [ %17, %173 ], [ %17, %168 ]
  %197 = phi i32 [ %18, %178 ], [ %18, %176 ], [ 1, %159 ], [ %18, %146 ], [ %18, %104 ], [ %18, %89 ], [ %18, %81 ], [ %18, %72 ], [ %18, %74 ], [ %18, %61 ], [ %18, %59 ], [ %18, %57 ], [ %18, %51 ], [ %18, %94 ], [ %18, %90 ], [ %18, %133 ], [ %18, %147 ], [ %18, %143 ], [ %18, %162 ], [ %18, %161 ], [ 0, %160 ], [ %18, %156 ], [ %18, %173 ], [ %18, %168 ]
  %198 = phi i32 [ 3, %178 ], [ 1, %176 ], [ 6, %159 ], [ 8, %146 ], [ 4, %104 ], [ 5, %89 ], [ 3, %81 ], [ 2, %72 ], [ 2, %74 ], [ 3, %61 ], [ 1, %59 ], [ 0, %57 ], [ 0, %51 ], [ 4, %94 ], [ 5, %90 ], [ 4, %133 ], [ 1, %147 ], [ 0, %143 ], [ 1, %162 ], [ 8, %161 ], [ 6, %160 ], [ 0, %156 ], [ 0, %173 ], [ 8, %168 ]
  %199 = phi i64 [ %20, %178 ], [ %20, %176 ], [ %20, %159 ], [ %20, %146 ], [ %20, %104 ], [ %20, %89 ], [ %20, %81 ], [ %20, %72 ], [ %80, %74 ], [ %20, %61 ], [ %20, %59 ], [ %20, %57 ], [ %56, %51 ], [ %20, %94 ], [ %20, %90 ], [ %20, %133 ], [ %20, %147 ], [ %145, %143 ], [ %20, %162 ], [ %20, %161 ], [ %20, %160 ], [ %158, %156 ], [ %175, %173 ], [ %20, %168 ]
  %200 = add nuw nsw i64 %12, 1
  br label %11

201:                                              ; preds = %23
  switch i32 %19, label %286 [
    i32 8, label %202
    i32 4, label %207
    i32 2, label %207
    i32 0, label %207
  ]

202:                                              ; preds = %201
  %203 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %203, align 8, !alias.scope !125
  %204 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %204, align 8, !alias.scope !125
  %205 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %205, align 4, !alias.scope !125
  %206 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %18, i32* %206, align 8, !alias.scope !125
  br label %291

207:                                              ; preds = %201, %201, %201
  %208 = icmp eq i32 %14, 1
  %209 = select i1 %208, i32 -1, i32 1
  %210 = mul nsw i32 %209, %13
  %211 = sub nsw i32 %210, %16
  %212 = add nsw i32 %211, %17
  %213 = icmp slt i32 %212, -1023
  br i1 %213, label %214, label %219

214:                                              ; preds = %207
  %215 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %215, align 8, !alias.scope !128
  %216 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %216, align 8, !alias.scope !128
  %217 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %217, align 4, !alias.scope !128
  %218 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %218, align 8, !alias.scope !128
  br label %291

219:                                              ; preds = %207
  %220 = add nsw i32 %212, -1022
  %221 = icmp sgt i32 %220, 0
  br i1 %221, label %222, label %251

222:                                              ; preds = %219
  %223 = sub i32 %15, %16
  %224 = add i32 %223, %220
  %225 = icmp sgt i32 %224, 18
  br i1 %225, label %226, label %231

226:                                              ; preds = %222
  %227 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %227, align 8, !alias.scope !131
  %228 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %228, align 8, !alias.scope !131
  %229 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %229, align 4, !alias.scope !131
  %230 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %18, i32* %230, align 8, !alias.scope !131
  br label %291

231:                                              ; preds = %222
  %232 = and i32 %220, 1
  %233 = icmp eq i32 %232, 0
  %234 = select i1 %233, i64 1, i64 10
  %235 = lshr i32 %220, 1
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %248, label %237

237:                                              ; preds = %231, %237
  %238 = phi i32 [ %246, %237 ], [ %235, %231 ]
  %239 = phi i64 [ %245, %237 ], [ %234, %231 ]
  %240 = phi i64 [ %241, %237 ], [ 10, %231 ]
  %241 = mul i64 %240, %240
  %242 = and i32 %238, 1
  %243 = icmp eq i32 %242, 0
  %244 = select i1 %243, i64 1, i64 %241
  %245 = mul i64 %244, %239
  %246 = ashr i32 %238, 1
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %237

248:                                              ; preds = %237, %231
  %249 = phi i64 [ %234, %231 ], [ %245, %237 ]
  %250 = mul i64 %249, %20
  br label %251

251:                                              ; preds = %248, %219
  %252 = phi i64 [ %250, %248 ], [ %20, %219 ]
  %253 = phi i32 [ 1022, %248 ], [ %212, %219 ]
  %254 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %255 = icmp eq i64 %252, 0
  %256 = select i1 %255, i32 3, i32 1
  store i32 %256, i32* %254, align 4
  %257 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %18, i32* %257, align 8
  %258 = add nsw i32 %253, 1023
  %259 = icmp ult i32 %258, 2047
  %260 = icmp ugt i64 %252, 999999999999999999
  %261 = and i1 %260, %259
  br i1 %261, label %264, label %262

262:                                              ; preds = %251
  %263 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br label %280

264:                                              ; preds = %251, %264
  %265 = phi i64 [ %267, %264 ], [ %252, %251 ]
  %266 = phi i32 [ %268, %264 ], [ %253, %251 ]
  %267 = udiv i64 %265, 10
  %268 = add nsw i32 %266, 1
  %269 = icmp ugt i64 %265, -8446744073709551617
  br i1 %269, label %264, label %270

270:                                              ; preds = %264
  %271 = icmp sgt i32 %266, 1022
  br i1 %271, label %272, label %275

272:                                              ; preds = %270
  %273 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %273, align 8
  %274 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %274, align 8
  store i32 0, i32* %254, align 4
  br label %291

275:                                              ; preds = %270
  %276 = icmp slt i32 %268, -1023
  %277 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  br i1 %276, label %278, label %280

278:                                              ; preds = %275
  store i64 0, i64* %277, align 8
  %279 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %279, align 8
  store i32 3, i32* %254, align 4
  br label %291

280:                                              ; preds = %262, %275
  %281 = phi i64* [ %263, %262 ], [ %277, %275 ]
  %282 = phi i32 [ %253, %262 ], [ %268, %275 ]
  %283 = phi i64 [ %252, %262 ], [ %267, %275 ]
  store i64 %283, i64* %281, align 8
  %284 = trunc i32 %282 to i16
  %285 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %284, i16* %285, align 8
  br label %291

286:                                              ; preds = %201
  %287 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %287, align 8, !alias.scope !134
  %288 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %288, align 8, !alias.scope !134
  %289 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 2, i32* %289, align 4, !alias.scope !134
  %290 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %290, align 8, !alias.scope !134
  br label %291

291:                                              ; preds = %116, %118, %64, %84, %96, %125, %120, %135, %148, %163, %181, %186, %280, %278, %272, %214, %226, %286, %202
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String24NumberToStringECMAScriptEd(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal9RemainderERKS0_(%"class.blink::Decimal"* noalias sret, %"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::Decimal", align 8
  %5 = alloca %"class.blink::Decimal", align 8
  %6 = alloca %"class.blink::Decimal", align 8
  %7 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %4, i64 0, i32 0, i32 3
  %9 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @_ZNK5blink7DecimaldvERKS0_(%"class.blink::Decimal"* nonnull sret %4, %"class.blink::Decimal"* %1, %"class.blink::Decimal"* dereferenceable(24) %2)
  %10 = load i32, i32* %8, align 4
  %11 = and i32 %10, -3
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %"class.blink::Decimal"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %14 = bitcast %"class.blink::Decimal"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #12
  br i1 %12, label %15, label %17

15:                                               ; preds = %3
  %16 = bitcast %"class.blink::Decimal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 8 %7, i64 24, i1 false) #12
  br label %24

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %4, i64 0, i32 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @_ZNK5blink7Decimal4CeilEv(%"class.blink::Decimal"* nonnull sret %6, %"class.blink::Decimal"* nonnull %4)
  br label %23

22:                                               ; preds = %17
  call void @_ZNK5blink7Decimal5FloorEv(%"class.blink::Decimal"* nonnull sret %6, %"class.blink::Decimal"* nonnull %4)
  br label %23

23:                                               ; preds = %22, %21
  call void @_ZNK5blink7DecimalmlERKS0_(%"class.blink::Decimal"* nonnull sret %5, %"class.blink::Decimal"* nonnull %6, %"class.blink::Decimal"* dereferenceable(24) %2)
  call void @_ZNK5blink7DecimalmiERKS0_(%"class.blink::Decimal"* sret %0, %"class.blink::Decimal"* %1, %"class.blink::Decimal"* nonnull dereferenceable(24) %5)
  br label %24

24:                                               ; preds = %23, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Decimal5RoundEv(%"class.blink::Decimal"* noalias nocapture sret, %"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -3
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::Decimal"* %0 to i8*
  %9 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %71

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = sext i16 %12 to i32
  %14 = icmp sgt i16 %12, -1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = bitcast %"class.blink::Decimal"* %0 to i8*
  %17 = bitcast %"class.blink::Decimal"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false) #12
  br label %71

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %18, %27
  %23 = phi i64 [ %28, %27 ], [ 1, %18 ]
  %24 = phi i32 [ %25, %27 ], [ 0, %18 ]
  %25 = add nuw nsw i32 %24, 1
  %26 = icmp eq i32 %24, 19
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = mul i64 %23, 10
  %29 = icmp ugt i64 %28, %20
  br i1 %29, label %30, label %22

30:                                               ; preds = %22, %27, %18
  %31 = phi i32 [ 0, %18 ], [ 20, %22 ], [ %25, %27 ]
  %32 = sub nsw i32 0, %13
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 0, i64* %35, align 8, !alias.scope !137
  %36 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %36, align 8, !alias.scope !137
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  store i32 3, i32* %37, align 4, !alias.scope !137
  %38 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %38, align 8, !alias.scope !137
  br label %71

39:                                               ; preds = %30
  %40 = icmp slt i16 %12, -1
  %41 = icmp ne i64 %20, 0
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %53

43:                                               ; preds = %39
  %44 = xor i32 %13, -1
  br label %45

45:                                               ; preds = %43, %45
  %46 = phi i32 [ %49, %45 ], [ %44, %43 ]
  %47 = phi i64 [ %48, %45 ], [ %20, %43 ]
  %48 = udiv i64 %47, 10
  %49 = add nsw i32 %46, -1
  %50 = icmp sgt i32 %49, 0
  %51 = icmp ugt i64 %47, 9
  %52 = and i1 %51, %50
  br i1 %52, label %45, label %53

53:                                               ; preds = %45, %39
  %54 = phi i64 [ %20, %39 ], [ %48, %45 ]
  %55 = urem i64 %54, 10
  %56 = icmp ugt i64 %55, 4
  %57 = add i64 %54, 10
  %58 = select i1 %56, i64 %57, i64 %54
  %59 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %62 = icmp ult i64 %58, 10
  %63 = select i1 %62, i32 3, i32 1
  store i32 %63, i32* %61, align 4
  %64 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  store i32 %60, i32* %64, align 8
  %65 = icmp ugt i64 %58, -8446744073709551617
  %66 = zext i1 %65 to i16
  %67 = select i1 %65, i64 100, i64 10
  %68 = udiv i64 %58, %67
  %69 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  store i16 %66, i16* %70, align 8
  br label %71

71:                                               ; preds = %34, %53, %15, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK5blink7Decimal8ToDoubleEv(%"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca i8, align 1
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, -3
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #12
  store i8 -86, i8* %2, align 1
  %9 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"* %0)
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = call double @_ZNK3WTF6String8ToDoubleEPb(%"class.WTF::String"* nonnull %3, i8* nonnull %2) #12
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #12
  br label %28

28:                                               ; preds = %8, %24, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %29 = load i8, i8* %2, align 1, !range !140
  %30 = icmp eq i8 %29, 0
  %31 = select i1 %30, double 0x7FF8000000000000, double %12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #12
  br label %39

32:                                               ; preds = %1
  %33 = icmp eq i32 %5, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  %38 = select i1 %37, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %39

39:                                               ; preds = %32, %34, %28
  %40 = phi double [ %31, %28 ], [ %38, %34 ], [ 0x7FF8000000000000, %32 ]
  ret double %40
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter.17", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::StringBuilder", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  switch i32 %14, label %22 [
    i32 0, label %15
    i32 2, label %21
    i32 1, label %23
    i32 3, label %23
  ]

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)
  %20 = select i1 %18, i64 8, i64 9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* %19, i64 %20) #12
  br label %487

21:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #12
  br label %487

22:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i64 0) #12
  br label %487

23:                                               ; preds = %1, %1
  %24 = bitcast %"class.WTF::StringBuilder"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %24) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 48, i1 false)
  %25 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %25, align 8
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1
  %27 = bitcast %union.anon* %26 to i8*
  store i8 0, i8* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 2
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 3
  store i8 1, i8* %29, align 4
  %30 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 4
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %23
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext 45) #12
  br label %35

35:                                               ; preds = %23, %34
  %36 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp slt i16 %37, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %35
  %43 = urem i64 %40, 10
  br label %89

44:                                               ; preds = %35
  %45 = icmp eq i64 %40, 0
  br i1 %45, label %65, label %46

46:                                               ; preds = %44, %60
  %47 = phi i64 [ %61, %60 ], [ 0, %44 ]
  %48 = phi i32 [ %63, %60 ], [ %38, %44 ]
  %49 = phi i64 [ %62, %60 ], [ %40, %44 ]
  br label %50

50:                                               ; preds = %46, %54
  %51 = phi i64 [ %56, %54 ], [ 1, %46 ]
  %52 = phi i32 [ %55, %54 ], [ 0, %46 ]
  %53 = icmp eq i32 %52, 19
  br i1 %53, label %60, label %54

54:                                               ; preds = %50
  %55 = add nuw nsw i32 %52, 1
  %56 = mul i64 %51, 10
  %57 = icmp ugt i64 %56, %49
  br i1 %57, label %58, label %50

58:                                               ; preds = %54
  %59 = icmp ugt i32 %52, 14
  br i1 %59, label %60, label %65

60:                                               ; preds = %50, %58
  %61 = urem i64 %49, 10
  %62 = udiv i64 %49, 10
  %63 = add nsw i32 %48, 1
  %64 = icmp ult i64 %49, 10
  br i1 %64, label %65, label %46

65:                                               ; preds = %58, %60, %44
  %66 = phi i64 [ 0, %44 ], [ %62, %60 ], [ %49, %58 ]
  %67 = phi i32 [ %38, %44 ], [ %63, %60 ], [ %48, %58 ]
  %68 = phi i64 [ 0, %44 ], [ %61, %60 ], [ %47, %58 ]
  %69 = icmp ugt i64 %68, 4
  %70 = zext i1 %69 to i64
  %71 = add nuw i64 %66, %70
  %72 = icmp slt i32 %67, 0
  %73 = icmp ne i64 %71, 0
  %74 = and i1 %73, %72
  %75 = urem i64 %71, 10
  %76 = icmp eq i64 %75, 0
  %77 = and i1 %76, %74
  br i1 %77, label %78, label %89

78:                                               ; preds = %65, %78
  %79 = phi i32 [ %82, %78 ], [ %67, %65 ]
  %80 = phi i64 [ %81, %78 ], [ %71, %65 ]
  %81 = udiv i64 %80, 10
  %82 = add nsw i32 %79, 1
  %83 = icmp slt i32 %82, 0
  %84 = icmp ugt i64 %80, 9
  %85 = and i1 %84, %83
  %86 = urem i64 %81, 10
  %87 = icmp eq i64 %86, 0
  %88 = and i1 %87, %85
  br i1 %88, label %78, label %89

89:                                               ; preds = %78, %42, %65
  %90 = phi i64 [ %43, %42 ], [ %75, %65 ], [ %86, %78 ]
  %91 = phi i64 [ %40, %42 ], [ %71, %65 ], [ %81, %78 ]
  %92 = phi i32 [ %38, %42 ], [ %67, %65 ], [ %82, %78 ]
  %93 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %93) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 40, i1 false) #12
  %94 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 24
  %95 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 1
  %96 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 23
  store i8* %96, i8** %95, align 8
  %97 = trunc i64 %90 to i8
  %98 = or i8 %97, 48
  store i8 %98, i8* %96, align 1
  %99 = icmp ugt i64 %91, 9
  br i1 %99, label %100, label %116

100:                                              ; preds = %89
  %101 = udiv i64 %91, 10
  %102 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 22
  store i8* %102, i8** %95, align 8
  %103 = urem i64 %101, 10
  %104 = trunc i64 %103 to i8
  %105 = or i8 %104, 48
  store i8 %105, i8* %102, align 2
  %106 = icmp ugt i64 %91, 99
  br i1 %106, label %107, label %114

107:                                              ; preds = %100
  %108 = udiv i64 %91, 100
  %109 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 21
  store i8* %109, i8** %95, align 8
  %110 = urem i64 %108, 10
  %111 = trunc i64 %110 to i8
  %112 = or i8 %111, 48
  store i8 %112, i8* %109, align 1
  %113 = icmp ugt i64 %91, 999
  br i1 %113, label %118, label %127

114:                                              ; preds = %100
  %115 = ptrtoint i8* %102 to i64
  br label %130

116:                                              ; preds = %89
  %117 = ptrtoint i8* %96 to i64
  br label %130

118:                                              ; preds = %107, %118
  %119 = phi i64 [ %121, %118 ], [ %108, %107 ]
  %120 = load i8*, i8** %95, align 8
  %121 = udiv i64 %119, 10
  %122 = getelementptr inbounds i8, i8* %120, i64 -1
  store i8* %122, i8** %95, align 8
  %123 = urem i64 %121, 10
  %124 = trunc i64 %123 to i8
  %125 = or i8 %124, 48
  store i8 %125, i8* %122, align 1
  %126 = icmp ugt i64 %119, 99
  br i1 %126, label %118, label %127

127:                                              ; preds = %118, %107
  %128 = bitcast i8** %95 to i64*
  %129 = load i64, i64* %128, align 8
  br label %130

130:                                              ; preds = %127, %114, %116
  %131 = phi i64 [ %117, %116 ], [ %129, %127 ], [ %115, %114 ]
  %132 = ptrtoint i8* %94 to i64
  %133 = sub i64 %132, %131
  %134 = trunc i64 %133 to i32
  %135 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  store i32 %134, i32* %135, align 8
  %136 = inttoptr i64 %131 to i8*
  %137 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %136, i32 %134) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %93) #12
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %142, label %139

139:                                              ; preds = %130
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %141 = load i32, i32* %140, align 4
  br label %142

142:                                              ; preds = %130, %139
  %143 = phi i32 [ %141, %139 ], [ 0, %130 ]
  %144 = add nsw i32 %143, %92
  %145 = add nsw i32 %144, -1
  %146 = icmp slt i32 %92, 1
  %147 = icmp sgt i32 %145, -7
  %148 = and i1 %146, %147
  br i1 %148, label %149, label %261

149:                                              ; preds = %142
  %150 = icmp eq i32 %92, 0
  br i1 %150, label %151, label %167

151:                                              ; preds = %149
  %152 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #12
  br i1 %138, label %153, label %157

153:                                              ; preds = %151
  %154 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %154, align 8
  %155 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %156 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %155, i64* %156, align 8
  br label %164

157:                                              ; preds = %151
  %158 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %137, %"class.WTF::StringImpl"** %158, align 8
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  %162 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %163 = bitcast i8** %162 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %163, align 8
  br label %164

164:                                              ; preds = %153, %157
  %165 = phi i32 [ %160, %157 ], [ 0, %153 ]
  %166 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %165, i32* %166, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #12
  br label %454

167:                                              ; preds = %149
  %168 = icmp sgt i32 %144, 0
  br i1 %168, label %169, label %234

169:                                              ; preds = %167
  %170 = icmp sgt i32 %143, 0
  br i1 %170, label %171, label %454

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  %175 = bitcast %"class.WTF::StringImpl"* %174 to i8*
  %176 = bitcast %"class.WTF::StringImpl"* %174 to i16*
  %177 = bitcast i16* %3 to i8*
  %178 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %179 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %180 = bitcast %union.anon* %26 to i16**
  %181 = bitcast %union.anon* %26 to %"class.WTF::Vector.1"*
  %182 = zext i32 %145 to i64
  %183 = zext i32 %143 to i64
  br label %184

184:                                              ; preds = %231, %171
  %185 = phi i64 [ 0, %171 ], [ %232, %231 ]
  br i1 %138, label %201, label %186

186:                                              ; preds = %184
  %187 = load i32, i32* %172, align 4
  %188 = zext i32 %187 to i64
  %189 = icmp ult i64 %185, %188
  br i1 %189, label %190, label %201

190:                                              ; preds = %186
  %191 = load atomic i32, i32* %173 monotonic, align 4
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %198, label %194

194:                                              ; preds = %190
  %195 = getelementptr inbounds i8, i8* %175, i64 %185
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  br label %201

198:                                              ; preds = %190
  %199 = getelementptr inbounds i16, i16* %176, i64 %185
  %200 = load i16, i16* %199, align 2
  br label %201

201:                                              ; preds = %184, %186, %194, %198
  %202 = phi i16 [ 0, %186 ], [ 0, %184 ], [ %197, %194 ], [ %200, %198 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %177)
  store i16 %202, i16* %3, align 2
  %203 = load i8, i8* %29, align 4, !range !140
  %204 = icmp ne i8 %203, 0
  %205 = icmp ult i16 %202, 256
  %206 = and i1 %205, %204
  br i1 %206, label %207, label %209

207:                                              ; preds = %201
  %208 = trunc i16 %202 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext %208) #12
  br label %228

209:                                              ; preds = %201
  %210 = load i8, i8* %30, align 1
  %211 = icmp eq i8 %210, 0
  %212 = or i1 %204, %211
  br i1 %212, label %213, label %214

213:                                              ; preds = %209
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %8, i32 1) #12
  br label %214

214:                                              ; preds = %209, %213
  %215 = load i32, i32* %178, align 4
  %216 = load i32, i32* %179, align 8
  %217 = icmp eq i32 %215, %216
  br i1 %217, label %224, label %218, !prof !141

218:                                              ; preds = %214
  %219 = load i16*, i16** %180, align 8
  %220 = zext i32 %215 to i64
  %221 = getelementptr inbounds i16, i16* %219, i64 %220
  store i16 %202, i16* %221, align 2
  %222 = load i32, i32* %178, align 4
  %223 = add i32 %222, 1
  store i32 %223, i32* %178, align 4
  br label %225

224:                                              ; preds = %214
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %181, i16* nonnull dereferenceable(2) %3) #12
  br label %225

225:                                              ; preds = %224, %218
  %226 = load i32, i32* %28, align 8
  %227 = add i32 %226, 1
  store i32 %227, i32* %28, align 8
  br label %228

228:                                              ; preds = %207, %225
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %177)
  %229 = icmp eq i64 %185, %182
  br i1 %229, label %230, label %231

230:                                              ; preds = %228
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext 46) #12
  br label %231

231:                                              ; preds = %228, %230
  %232 = add nuw nsw i64 %185, 1
  %233 = icmp eq i64 %232, %183
  br i1 %233, label %454, label %184

234:                                              ; preds = %167
  %235 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %235) #12
  %236 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %237 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8** %238, align 8
  %239 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 2, i32* %239, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %235) #12
  %240 = icmp slt i32 %144, 0
  br i1 %240, label %257, label %241

241:                                              ; preds = %257, %234
  %242 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242) #12
  br i1 %138, label %243, label %247

243:                                              ; preds = %241
  %244 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %244, align 8
  %245 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %246 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %245, i64* %246, align 8
  br label %254

247:                                              ; preds = %241
  %248 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %137, %"class.WTF::StringImpl"** %248, align 8
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  %252 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %253 = bitcast i8** %252 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %251, %"class.WTF::StringImpl"** %253, align 8
  br label %254

254:                                              ; preds = %243, %247
  %255 = phi i32 [ %250, %247 ], [ 0, %243 ]
  %256 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %255, i32* %256, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242) #12
  br label %454

257:                                              ; preds = %234, %257
  %258 = phi i32 [ %259, %257 ], [ %144, %234 ]
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext 48) #12
  %259 = add i32 %258, 1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %241, label %257

261:                                              ; preds = %142
  br i1 %138, label %279, label %262

262:                                              ; preds = %261
  %263 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %279, label %266

266:                                              ; preds = %262
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %268 = load atomic i32, i32* %267 monotonic, align 4
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  br i1 %270, label %276, label %272

272:                                              ; preds = %266
  %273 = bitcast %"class.WTF::StringImpl"* %271 to i8*
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i16
  br label %279

276:                                              ; preds = %266
  %277 = bitcast %"class.WTF::StringImpl"* %271 to i16*
  %278 = load i16, i16* %277, align 2
  br label %279

279:                                              ; preds = %262, %261, %272, %276
  %280 = phi i16 [ 0, %262 ], [ 0, %261 ], [ %275, %272 ], [ %278, %276 ]
  %281 = bitcast i16* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %281)
  store i16 %280, i16* %2, align 2
  %282 = load i8, i8* %29, align 4, !range !140
  %283 = icmp ne i8 %282, 0
  %284 = icmp ult i16 %280, 256
  %285 = and i1 %284, %283
  br i1 %285, label %286, label %288

286:                                              ; preds = %279
  %287 = trunc i16 %280 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext %287) #12
  br label %311

288:                                              ; preds = %279
  %289 = load i8, i8* %30, align 1
  %290 = icmp eq i8 %289, 0
  %291 = or i1 %283, %290
  br i1 %291, label %292, label %293

292:                                              ; preds = %288
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %8, i32 1) #12
  br label %293

293:                                              ; preds = %288, %292
  %294 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %295 = load i32, i32* %294, align 4
  %296 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %297 = load i32, i32* %296, align 8
  %298 = icmp eq i32 %295, %297
  br i1 %298, label %306, label %299, !prof !141

299:                                              ; preds = %293
  %300 = bitcast %union.anon* %26 to i16**
  %301 = load i16*, i16** %300, align 8
  %302 = zext i32 %295 to i64
  %303 = getelementptr inbounds i16, i16* %301, i64 %302
  store i16 %280, i16* %303, align 2
  %304 = load i32, i32* %294, align 4
  %305 = add i32 %304, 1
  store i32 %305, i32* %294, align 4
  br label %308

306:                                              ; preds = %293
  %307 = bitcast %union.anon* %26 to %"class.WTF::Vector.1"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %307, i16* nonnull dereferenceable(2) %2) #12
  br label %308

308:                                              ; preds = %306, %299
  %309 = load i32, i32* %28, align 8
  %310 = add i32 %309, 1
  store i32 %310, i32* %28, align 8
  br label %311

311:                                              ; preds = %286, %308
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %281)
  %312 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %314 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  %315 = bitcast %"class.WTF::StringImpl"* %314 to i8*
  %316 = bitcast %"class.WTF::StringImpl"* %314 to i16*
  br label %317

317:                                              ; preds = %337, %311
  %318 = phi i32 [ %143, %311 ], [ %321, %337 ]
  %319 = icmp sgt i32 %318, 1
  br i1 %319, label %320, label %398

320:                                              ; preds = %317
  %321 = add nsw i32 %318, -1
  br i1 %138, label %341, label %322

322:                                              ; preds = %320
  %323 = load i32, i32* %312, align 4
  %324 = icmp ugt i32 %323, %321
  br i1 %324, label %325, label %340

325:                                              ; preds = %322
  %326 = load atomic i32, i32* %313 monotonic, align 4
  %327 = and i32 %326, 1
  %328 = icmp eq i32 %327, 0
  %329 = zext i32 %321 to i64
  br i1 %328, label %334, label %330

330:                                              ; preds = %325
  %331 = getelementptr inbounds i8, i8* %315, i64 %329
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i16
  br label %337

334:                                              ; preds = %325
  %335 = getelementptr inbounds i16, i16* %316, i64 %329
  %336 = load i16, i16* %335, align 2
  br label %337

337:                                              ; preds = %330, %334
  %338 = phi i16 [ %333, %330 ], [ %336, %334 ]
  %339 = icmp eq i16 %338, 48
  br i1 %339, label %317, label %340

340:                                              ; preds = %322, %337
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext 46) #12
  br label %343

341:                                              ; preds = %320
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext 46) #12
  %342 = icmp sgt i32 %143, 1
  br i1 %342, label %343, label %398

343:                                              ; preds = %340, %341
  %344 = phi i32 [ %318, %340 ], [ %143, %341 ]
  %345 = bitcast i16* %4 to i8*
  %346 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %347 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %348 = bitcast %union.anon* %26 to i16**
  %349 = bitcast %union.anon* %26 to %"class.WTF::Vector.1"*
  %350 = zext i32 %344 to i64
  br label %351

351:                                              ; preds = %395, %343
  %352 = phi i64 [ 1, %343 ], [ %396, %395 ]
  br i1 %138, label %368, label %353

353:                                              ; preds = %351
  %354 = load i32, i32* %312, align 4
  %355 = zext i32 %354 to i64
  %356 = icmp ult i64 %352, %355
  br i1 %356, label %357, label %368

357:                                              ; preds = %353
  %358 = load atomic i32, i32* %313 monotonic, align 4
  %359 = and i32 %358, 1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %365, label %361

361:                                              ; preds = %357
  %362 = getelementptr inbounds i8, i8* %315, i64 %352
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i16
  br label %368

365:                                              ; preds = %357
  %366 = getelementptr inbounds i16, i16* %316, i64 %352
  %367 = load i16, i16* %366, align 2
  br label %368

368:                                              ; preds = %351, %353, %361, %365
  %369 = phi i16 [ 0, %353 ], [ 0, %351 ], [ %364, %361 ], [ %367, %365 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %345)
  store i16 %369, i16* %4, align 2
  %370 = load i8, i8* %29, align 4, !range !140
  %371 = icmp ne i8 %370, 0
  %372 = icmp ult i16 %369, 256
  %373 = and i1 %372, %371
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = trunc i16 %369 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %8, i8 zeroext %375) #12
  br label %395

376:                                              ; preds = %368
  %377 = load i8, i8* %30, align 1
  %378 = icmp eq i8 %377, 0
  %379 = or i1 %371, %378
  br i1 %379, label %380, label %381

380:                                              ; preds = %376
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %8, i32 1) #12
  br label %381

381:                                              ; preds = %376, %380
  %382 = load i32, i32* %346, align 4
  %383 = load i32, i32* %347, align 8
  %384 = icmp eq i32 %382, %383
  br i1 %384, label %391, label %385, !prof !141

385:                                              ; preds = %381
  %386 = load i16*, i16** %348, align 8
  %387 = zext i32 %382 to i64
  %388 = getelementptr inbounds i16, i16* %386, i64 %387
  store i16 %369, i16* %388, align 2
  %389 = load i32, i32* %346, align 4
  %390 = add i32 %389, 1
  store i32 %390, i32* %346, align 4
  br label %392

391:                                              ; preds = %381
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %349, i16* nonnull dereferenceable(2) %4) #12
  br label %392

392:                                              ; preds = %391, %385
  %393 = load i32, i32* %28, align 8
  %394 = add i32 %393, 1
  store i32 %394, i32* %28, align 8
  br label %395

395:                                              ; preds = %374, %392
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %345)
  %396 = add nuw nsw i64 %352, 1
  %397 = icmp eq i64 %396, %350
  br i1 %397, label %398, label %351

398:                                              ; preds = %317, %395, %341
  %399 = icmp eq i32 %145, 0
  br i1 %399, label %454, label %400

400:                                              ; preds = %398
  %401 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %401) #12
  %402 = icmp slt i32 %144, 1
  %403 = select i1 %402, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)
  %404 = select i1 %402, i32 1, i32 2
  %405 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %406 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %405, i64* %406, align 8
  %407 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* %403, i8** %407, align 8
  %408 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %404, i32* %408, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %401) #12
  %409 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %409) #12
  %410 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 0, i64 12
  %411 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 2
  %412 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 3
  %413 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 0, i64 13
  %414 = sub i32 1, %144
  %415 = select i1 %402, i32 %414, i32 %145
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %409, i8 -86, i64 32, i1 false) #12
  store i8* %410, i8** %411, align 8
  %416 = urem i32 %415, 10
  %417 = udiv i32 %415, 10
  %418 = trunc i32 %416 to i8
  %419 = or i8 %418, 48
  store i8 %419, i8* %410, align 4
  %420 = icmp ugt i32 %415, 9
  br i1 %420, label %421, label %443

421:                                              ; preds = %400
  %422 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 0, i64 11
  store i8* %422, i8** %411, align 8
  %423 = urem i32 %417, 10
  %424 = trunc i32 %423 to i8
  %425 = or i8 %424, 48
  store i8 %425, i8* %422, align 1
  %426 = icmp ugt i32 %415, 99
  br i1 %426, label %427, label %443

427:                                              ; preds = %421
  %428 = udiv i32 %415, 100
  %429 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %6, i64 0, i32 0, i64 10
  store i8* %429, i8** %411, align 8
  %430 = urem i32 %428, 10
  %431 = trunc i32 %430 to i8
  %432 = or i8 %431, 48
  store i8 %432, i8* %429, align 2
  %433 = icmp ugt i32 %415, 999
  br i1 %433, label %434, label %443

434:                                              ; preds = %427, %434
  %435 = phi i32 [ %437, %434 ], [ %428, %427 ]
  %436 = load i8*, i8** %411, align 8
  %437 = udiv i32 %435, 10
  %438 = getelementptr inbounds i8, i8* %436, i64 -1
  store i8* %438, i8** %411, align 8
  %439 = urem i32 %437, 10
  %440 = trunc i32 %439 to i8
  %441 = or i8 %440, 48
  store i8 %441, i8* %438, align 1
  %442 = icmp ugt i32 %435, 99
  br i1 %442, label %434, label %443

443:                                              ; preds = %434, %427, %421, %400
  br i1 %402, label %444, label %447

444:                                              ; preds = %443
  %445 = load i8*, i8** %411, align 8
  %446 = getelementptr inbounds i8, i8* %445, i64 -1
  store i8* %446, i8** %411, align 8
  store i8 45, i8* %446, align 1
  br label %447

447:                                              ; preds = %443, %444
  %448 = bitcast i8** %411 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = ptrtoint i8* %413 to i64
  %451 = sub i64 %450, %449
  %452 = trunc i64 %451 to i32
  store i32 %452, i32* %412, align 8
  %453 = inttoptr i64 %449 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %8, i8* %453, i32 %452) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %409) #12
  br label %454

454:                                              ; preds = %231, %254, %447, %398, %169, %164
  %455 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %8) #12
  %456 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %455, %"class.WTF::StringImpl"** %456, align 8
  br i1 %138, label %470, label %457

457:                                              ; preds = %454
  %458 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %459 = load atomic i32, i32* %458 monotonic, align 4
  %460 = and i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 0
  %463 = load i32, i32* %462, align 4
  br i1 %461, label %464, label %466

464:                                              ; preds = %457
  %465 = add i32 %463, -1
  store i32 %465, i32* %462, align 4
  br label %466

466:                                              ; preds = %464, %457
  %467 = phi i32 [ %465, %464 ], [ %463, %457 ]
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %469, label %470

469:                                              ; preds = %466
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %137) #12
  br label %470

470:                                              ; preds = %454, %466, %469
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %8) #12
  %471 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %472 = icmp eq %"class.WTF::StringImpl"* %471, null
  br i1 %472, label %486, label %473

473:                                              ; preds = %470
  %474 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %471, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %475 = load atomic i32, i32* %474 monotonic, align 4
  %476 = and i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %471, i64 0, i32 0
  %479 = load i32, i32* %478, align 4
  br i1 %477, label %480, label %482

480:                                              ; preds = %473
  %481 = add i32 %479, -1
  store i32 %481, i32* %478, align 4
  br label %482

482:                                              ; preds = %480, %473
  %483 = phi i32 [ %481, %480 ], [ %479, %473 ]
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %486

485:                                              ; preds = %482
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %471) #12
  br label %486

486:                                              ; preds = %470, %482, %485
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %24) #12
  br label %487

487:                                              ; preds = %486, %22, %21, %15
  %488 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %489 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %488, align 8
  ret %"class.WTF::StringImpl"* %489
}

declare double @_ZNK3WTF6String8ToDoubleEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !140
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #12
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !141

46:                                               ; preds = %37
  tail call void @llvm.trap() #12
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #12
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #12
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #12
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_7DecimalE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::Decimal"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 {
  %3 = alloca %"class.WTF::IntegerToStringConverter.17", align 8
  %4 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %1, i64 0, i32 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i64 7) #12
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #12
  %19 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 40, i1 false) #12
  %21 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 24
  %22 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 1
  %23 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 23
  store i8* %23, i8** %22, align 8
  %24 = urem i64 %12, 10
  %25 = udiv i64 %12, 10
  %26 = trunc i64 %24 to i8
  %27 = or i8 %26, 48
  store i8 %27, i8* %23, align 1
  %28 = icmp ugt i64 %12, 9
  br i1 %28, label %29, label %44

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 22
  store i8* %30, i8** %22, align 8
  %31 = urem i64 %25, 10
  %32 = trunc i64 %31 to i8
  %33 = or i8 %32, 48
  store i8 %33, i8* %30, align 2
  %34 = icmp ugt i64 %12, 99
  br i1 %34, label %35, label %42

35:                                               ; preds = %29
  %36 = udiv i64 %12, 100
  %37 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 21
  store i8* %37, i8** %22, align 8
  %38 = urem i64 %36, 10
  %39 = trunc i64 %38 to i8
  %40 = or i8 %39, 48
  store i8 %40, i8* %37, align 1
  %41 = icmp ugt i64 %12, 999
  br i1 %41, label %46, label %55

42:                                               ; preds = %29
  %43 = ptrtoint i8* %30 to i64
  br label %58

44:                                               ; preds = %2
  %45 = ptrtoint i8* %23 to i64
  br label %58

46:                                               ; preds = %35, %46
  %47 = phi i64 [ %49, %46 ], [ %36, %35 ]
  %48 = load i8*, i8** %22, align 8
  %49 = udiv i64 %47, 10
  %50 = getelementptr inbounds i8, i8* %48, i64 -1
  store i8* %50, i8** %22, align 8
  %51 = urem i64 %49, 10
  %52 = trunc i64 %51 to i8
  %53 = or i8 %52, 48
  store i8 %53, i8* %50, align 1
  %54 = icmp ugt i64 %47, 99
  br i1 %54, label %46, label %55

55:                                               ; preds = %46, %35
  %56 = bitcast i8** %22 to i64*
  %57 = load i64, i64* %56, align 8
  br label %58

58:                                               ; preds = %55, %42, %44
  %59 = phi i64 [ %45, %44 ], [ %57, %55 ], [ %43, %42 ]
  %60 = ptrtoint i8* %21 to i64
  %61 = sub i64 %60, %59
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 2
  store i32 %62, i32* %63, align 8
  %64 = inttoptr i64 %59 to i8*
  %65 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %64, i32 %62) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #12
  %66 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %66, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.WTF::String"* nonnull %6) #12
  %67 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = zext i8 %69 to i64
  %76 = select i1 %70, i8* %72, i8* %18
  %77 = select i1 %70, i64 %74, i64 %75
  %78 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %17, i8* %76, i64 %77) #12
  %79 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i64 2) #12
  %80 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %80) #12
  %81 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #12
  %82 = sext i16 %14 to i32
  %83 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #12
  %84 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 0, i64 12
  %85 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 2
  %86 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 3
  %87 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 0, i64 13
  %88 = icmp slt i16 %14, 0
  %89 = sub nsw i32 0, %82
  %90 = select i1 %88, i32 %89, i32 %82
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 -86, i64 32, i1 false) #12
  store i8* %84, i8** %85, align 8
  %91 = trunc i32 %90 to i16
  %92 = urem i16 %91, 10
  %93 = trunc i16 %92 to i8
  %94 = or i8 %93, 48
  store i8 %94, i8* %84, align 4
  %95 = icmp ugt i32 %90, 9
  br i1 %95, label %96, label %121

96:                                               ; preds = %58
  %97 = trunc i32 %90 to i16
  %98 = udiv i16 %97, 10
  %99 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 0, i64 11
  store i8* %99, i8** %85, align 8
  %100 = urem i16 %98, 10
  %101 = trunc i16 %100 to i8
  %102 = or i8 %101, 48
  store i8 %102, i8* %99, align 1
  %103 = icmp ugt i32 %90, 99
  br i1 %103, label %104, label %121

104:                                              ; preds = %96
  %105 = udiv i16 %97, 100
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds %"class.WTF::IntegerToStringConverter.17", %"class.WTF::IntegerToStringConverter.17"* %3, i64 0, i32 0, i64 10
  store i8* %107, i8** %85, align 8
  %108 = urem i32 %106, 10
  %109 = trunc i32 %108 to i8
  %110 = or i8 %109, 48
  store i8 %110, i8* %107, align 2
  %111 = icmp ugt i16 %97, 999
  br i1 %111, label %112, label %121

112:                                              ; preds = %104, %112
  %113 = phi i32 [ %115, %112 ], [ %106, %104 ]
  %114 = load i8*, i8** %85, align 8
  %115 = udiv i32 %113, 10
  %116 = getelementptr inbounds i8, i8* %114, i64 -1
  store i8* %116, i8** %85, align 8
  %117 = urem i32 %115, 10
  %118 = trunc i32 %117 to i8
  %119 = or i8 %118, 48
  store i8 %119, i8* %116, align 1
  %120 = icmp ugt i32 %113, 99
  br i1 %120, label %112, label %121

121:                                              ; preds = %112, %104, %96, %58
  br i1 %88, label %122, label %125

122:                                              ; preds = %121
  %123 = load i8*, i8** %85, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 -1
  store i8* %124, i8** %85, align 8
  store i8 45, i8* %124, align 1
  br label %125

125:                                              ; preds = %121, %122
  %126 = bitcast i8** %85 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = ptrtoint i8* %87 to i64
  %129 = sub i64 %128, %127
  %130 = trunc i64 %129 to i32
  store i32 %130, i32* %86, align 8
  %131 = inttoptr i64 %127 to i8*
  %132 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %131, i32 %130) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #12
  %133 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %132, %"class.WTF::StringImpl"** %133, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.WTF::String"* nonnull %8) #12
  %134 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %135 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %134, i64 0, i32 1, i32 0
  %136 = load i8, i8* %135, align 1
  %137 = icmp slt i8 %136, 0
  %138 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  %142 = zext i8 %136 to i64
  %143 = select i1 %137, i8* %139, i8* %80
  %144 = select i1 %137, i64 %141, i64 %142
  %145 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %79, i8* %143, i64 %144) #12
  %146 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %145, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i64 2) #12
  %147 = icmp eq i32 %16, 1
  %148 = select i1 %147, [9 x i8]* @.str.9, [9 x i8]* @.str.10
  %149 = getelementptr inbounds [9 x i8], [9 x i8]* %148, i64 0, i64 0
  %150 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %146, i8* nonnull %149, i64 8) #12
  %151 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %150, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2) #12
  %152 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #12
  %153 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %153) #12
  %154 = call %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"* %1)
  %155 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %154, %"class.WTF::StringImpl"** %155, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %9, %"class.WTF::String"* nonnull %10) #12
  %156 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %157 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %156, i64 0, i32 1, i32 0
  %158 = load i8, i8* %157, align 1
  %159 = icmp slt i8 %158, 0
  %160 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = zext i8 %158 to i64
  %165 = select i1 %159, i8* %161, i8* %152
  %166 = select i1 %159, i64 %163, i64 %164
  %167 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %151, i8* %165, i64 %166) #12
  %168 = load i8, i8* %157, align 1
  %169 = icmp slt i8 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %125
  %171 = load i8*, i8** %160, align 8
  call void @_ZdlPv(i8* %171) #14
  br label %172

172:                                              ; preds = %125, %170
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %174 = icmp eq %"class.WTF::StringImpl"* %173, null
  br i1 %174, label %188, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %177 = load atomic i32, i32* %176 monotonic, align 4
  %178 = and i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 0
  %181 = load i32, i32* %180, align 4
  br i1 %179, label %182, label %184

182:                                              ; preds = %175
  %183 = add i32 %181, -1
  store i32 %183, i32* %180, align 4
  br label %184

184:                                              ; preds = %182, %175
  %185 = phi i32 [ %183, %182 ], [ %181, %175 ]
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %184
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %173) #12
  br label %188

188:                                              ; preds = %172, %184, %187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %153) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #12
  %189 = load i8, i8* %135, align 1
  %190 = icmp slt i8 %189, 0
  br i1 %190, label %191, label %193

191:                                              ; preds = %188
  %192 = load i8*, i8** %138, align 8
  call void @_ZdlPv(i8* %192) #14
  br label %193

193:                                              ; preds = %188, %191
  %194 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %195 = icmp eq %"class.WTF::StringImpl"* %194, null
  br i1 %195, label %209, label %196

196:                                              ; preds = %193
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %198 = load atomic i32, i32* %197 monotonic, align 4
  %199 = and i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  br i1 %200, label %203, label %205

203:                                              ; preds = %196
  %204 = add i32 %202, -1
  store i32 %204, i32* %201, align 4
  br label %205

205:                                              ; preds = %203, %196
  %206 = phi i32 [ %204, %203 ], [ %202, %196 ]
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %205
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %194) #12
  br label %209

209:                                              ; preds = %193, %205, %208
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %80) #12
  %210 = load i8, i8* %68, align 1
  %211 = icmp slt i8 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %209
  %213 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %213) #14
  br label %214

214:                                              ; preds = %209, %212
  %215 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %230, label %217

217:                                              ; preds = %214
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %223 = load i32, i32* %222, align 4
  br i1 %221, label %224, label %226

224:                                              ; preds = %217
  %225 = add i32 %223, -1
  store i32 %225, i32* %222, align 4
  br label %226

226:                                              ; preds = %224, %217
  %227 = phi i32 [ %225, %224 ], [ %223, %217 ]
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %226
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %215) #12
  br label %230

230:                                              ; preds = %214, %226, %229
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #12
  ret %"class.std::__1::basic_ostream"* %167
}

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !140
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !140
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !141

22:                                               ; preds = %15
  %23 = bitcast %union.anon* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon* %16 to %"class.WTF::Vector.1"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %30, i16* nonnull dereferenceable(2) %3) #12
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !140
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !141

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %41, i8* nonnull dereferenceable(1) %4) #12
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !142

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #12
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !141

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #12
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %18, i8* nonnull %6) #12
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #12
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !142

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #12
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !142

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %46, i8* %42) #12
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.16, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"*, i8*) local_unnamed_addr #7 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #12
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"*, i16* dereferenceable(2)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #12
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #12
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !142

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"* %0, i32 %27) #12
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !141

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #12
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %19, i16* nonnull %6) #12
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #12
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !142

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #12
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !142

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %53, i16* %48) #12
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.16, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #12
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"*, i16*) local_unnamed_addr #7 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #12
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #2 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !140
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #2 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #14
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #8

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #5

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink7Decimal3NanEv: argument 0"}
!4 = distinct !{!4, !"_ZN5blink7Decimal3NanEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv: argument 0"}
!7 = distinct !{!7, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN5blink7Decimal3NanEv: argument 0"}
!10 = distinct !{!10, !"_ZN5blink7Decimal3NanEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv: argument 0"}
!13 = distinct !{!13, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!16 = distinct !{!16, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!19 = distinct !{!19, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv: argument 0"}
!22 = distinct !{!22, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN5blink7Decimal3NanEv: argument 0"}
!25 = distinct !{!25, !"_ZN5blink7Decimal3NanEv"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!28 = distinct !{!28, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN5blink7Decimal3NanEv: argument 0"}
!31 = distinct !{!31, !"_ZN5blink7Decimal3NanEv"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!34 = distinct !{!34, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN5blink7Decimal3NanEv: argument 0"}
!37 = distinct !{!37, !"_ZN5blink7Decimal3NanEv"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv: argument 0"}
!40 = distinct !{!40, !"_ZNK5blink12_GLOBAL__N_119SpecialValueHandler5ValueEv"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!43 = distinct !{!43, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!46 = distinct !{!46, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN5blink7Decimal3NanEv: argument 0"}
!49 = distinct !{!49, !"_ZN5blink7Decimal3NanEv"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!52 = distinct !{!52, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!55 = distinct !{!55, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!58 = distinct !{!58, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN5blink7Decimal3NanEv: argument 0"}
!61 = distinct !{!61, !"_ZN5blink7Decimal3NanEv"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!64 = distinct !{!64, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!67 = distinct !{!67, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!70 = distinct !{!70, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!73 = distinct !{!73, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZNK5blink7Decimal9CompareToERKS0_: argument 0"}
!76 = distinct !{!76, !"_ZNK5blink7Decimal9CompareToERKS0_"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!79 = distinct !{!79, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!82 = distinct !{!82, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!85 = distinct !{!85, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN5blink7Decimal3NanEv: argument 0"}
!88 = distinct !{!88, !"_ZN5blink7Decimal3NanEv"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN5blink7Decimal3NanEv: argument 0"}
!91 = distinct !{!91, !"_ZN5blink7Decimal3NanEv"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN5blink7Decimal3NanEv: argument 0"}
!94 = distinct !{!94, !"_ZN5blink7Decimal3NanEv"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"_ZN5blink7Decimal3NanEv: argument 0"}
!97 = distinct !{!97, !"_ZN5blink7Decimal3NanEv"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!100 = distinct !{!100, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!103 = distinct !{!103, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!106 = distinct !{!106, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!107 = !{!108}
!108 = distinct !{!108, !109, !"_ZN5blink7Decimal3NanEv: argument 0"}
!109 = distinct !{!109, !"_ZN5blink7Decimal3NanEv"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN5blink7Decimal3NanEv: argument 0"}
!112 = distinct !{!112, !"_ZN5blink7Decimal3NanEv"}
!113 = !{!114}
!114 = distinct !{!114, !115, !"_ZN5blink7Decimal3NanEv: argument 0"}
!115 = distinct !{!115, !"_ZN5blink7Decimal3NanEv"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN5blink7Decimal3NanEv: argument 0"}
!118 = distinct !{!118, !"_ZN5blink7Decimal3NanEv"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN5blink7Decimal3NanEv: argument 0"}
!121 = distinct !{!121, !"_ZN5blink7Decimal3NanEv"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZN5blink7Decimal3NanEv: argument 0"}
!124 = distinct !{!124, !"_ZN5blink7Decimal3NanEv"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!127 = distinct !{!127, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!130 = distinct !{!130, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!131 = !{!132}
!132 = distinct !{!132, !133, !"_ZN5blink7Decimal8InfinityENS0_4SignE: argument 0"}
!133 = distinct !{!133, !"_ZN5blink7Decimal8InfinityENS0_4SignE"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN5blink7Decimal3NanEv: argument 0"}
!136 = distinct !{!136, !"_ZN5blink7Decimal3NanEv"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN5blink7Decimal4ZeroENS0_4SignE: argument 0"}
!139 = distinct !{!139, !"_ZN5blink7Decimal4ZeroENS0_4SignE"}
!140 = !{i8 0, i8 2}
!141 = !{!"branch_weights", i32 1, i32 2000}
!142 = !{!"branch_weights", i32 2000, i32 1}
