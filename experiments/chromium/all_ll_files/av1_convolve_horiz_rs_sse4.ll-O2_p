; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/av1_convolve_horiz_rs_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/av1_convolve_horiz_rs_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_convolve_horiz_rs_sse4_1(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, i16* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = getelementptr inbounds i8, i8* %0, i64 -3
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %9
  %13 = shl nsw i32 %8, 1
  %14 = mul nsw i32 %8, 3
  %15 = icmp sgt i32 %5, 0
  %16 = sext i32 %1 to i64
  %17 = sext i32 %3 to i64
  %18 = shl i32 %8, 2
  %19 = sext i32 %4 to i64
  br label %21

20:                                               ; preds = %60, %9
  ret void

21:                                               ; preds = %12, %60
  %22 = phi i64 [ 0, %12 ], [ %61, %60 ]
  %23 = phi i32 [ %7, %12 ], [ %62, %60 ]
  %24 = add nsw i32 %23, %8
  %25 = add nsw i32 %23, %13
  %26 = add nsw i32 %23, %14
  %27 = lshr i32 %23, 5
  %28 = and i32 %27, 504
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %6, i64 %29
  %31 = lshr i32 %24, 5
  %32 = and i32 %31, 504
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %6, i64 %33
  %35 = lshr i32 %25, 5
  %36 = and i32 %35, 504
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i16, i16* %6, i64 %37
  %39 = lshr i32 %26, 5
  %40 = and i32 %39, 504
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %6, i64 %41
  %43 = bitcast i16* %30 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 1
  %45 = bitcast i16* %34 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 1
  %47 = bitcast i16* %38 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = bitcast i16* %42 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  br i1 %15, label %51, label %60

51:                                               ; preds = %21
  %52 = ashr i32 %23, 14
  %53 = sext i32 %52 to i64
  %54 = ashr i32 %24, 14
  %55 = sext i32 %54 to i64
  %56 = ashr i32 %25, 14
  %57 = sext i32 %56 to i64
  %58 = ashr i32 %26, 14
  %59 = sext i32 %58 to i64
  br label %64

60:                                               ; preds = %64, %21
  %61 = add nuw nsw i64 %22, 4
  %62 = add nsw i32 %23, %18
  %63 = icmp slt i64 %61, %19
  br i1 %63, label %21, label %20

64:                                               ; preds = %64, %51
  %65 = phi i8* [ %10, %51 ], [ %112, %64 ]
  %66 = phi i8* [ %2, %51 ], [ %113, %64 ]
  %67 = phi i32 [ 0, %51 ], [ %111, %64 ]
  %68 = getelementptr inbounds i8, i8* %65, i64 %53
  %69 = getelementptr inbounds i8, i8* %65, i64 %55
  %70 = getelementptr inbounds i8, i8* %65, i64 %57
  %71 = getelementptr inbounds i8, i8* %65, i64 %59
  %72 = bitcast i8* %68 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = bitcast i8* %69 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = bitcast i8* %70 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast i8* %71 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %74 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = zext <8 x i8> %85 to <8 x i16>
  %87 = bitcast <2 x i64> %77 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = zext <8 x i8> %88 to <8 x i16>
  %90 = bitcast <2 x i64> %80 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %92 = zext <8 x i8> %91 to <8 x i16>
  %93 = bitcast <2 x i64> %83 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %95 = zext <8 x i8> %94 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> %44) #2
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %46) #2
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> %48) #2
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %50) #2
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %96, <4 x i32> %97) #2
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %98, <4 x i32> %99) #2
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %101) #2
  %103 = add <4 x i32> %102, <i32 64, i32 64, i32 64, i32 64>
  %104 = ashr <4 x i32> %103, <i32 7, i32 7, i32 7, i32 7>
  %105 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %104, <4 x i32> undef) #2
  %106 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> undef) #2
  %107 = getelementptr inbounds i8, i8* %66, i64 %22
  %108 = bitcast <16 x i8> %106 to <4 x i32>
  %109 = extractelement <4 x i32> %108, i32 0
  %110 = bitcast i8* %107 to i32*
  store i32 %109, i32* %110, align 1
  %111 = add nuw nsw i32 %67, 1
  %112 = getelementptr inbounds i8, i8* %65, i64 %16
  %113 = getelementptr inbounds i8, i8* %66, i64 %17
  %114 = icmp eq i32 %111, %5
  br i1 %114, label %60, label %64
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_highbd_convolve_horiz_rs_sse4_1(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, i16* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %11 = getelementptr inbounds i16, i16* %0, i64 -3
  %12 = shl nsw i32 -1, %9
  %13 = trunc i32 %12 to i16
  %14 = xor i16 %13, -1
  %15 = insertelement <8 x i16> undef, i16 %14, i32 0
  %16 = shufflevector <8 x i16> %15, <8 x i16> undef, <8 x i32> zeroinitializer
  %17 = icmp sgt i32 %4, 0
  br i1 %17, label %18, label %26

18:                                               ; preds = %10
  %19 = shl nsw i32 %8, 1
  %20 = mul nsw i32 %8, 3
  %21 = icmp sgt i32 %5, 0
  %22 = sext i32 %1 to i64
  %23 = sext i32 %3 to i64
  %24 = shl i32 %8, 2
  %25 = sext i32 %4 to i64
  br label %27

26:                                               ; preds = %66, %10
  ret void

27:                                               ; preds = %18, %66
  %28 = phi i64 [ 0, %18 ], [ %67, %66 ]
  %29 = phi i32 [ %7, %18 ], [ %68, %66 ]
  %30 = add nsw i32 %29, %8
  %31 = add nsw i32 %29, %19
  %32 = add nsw i32 %29, %20
  %33 = lshr i32 %29, 5
  %34 = and i32 %33, 504
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %6, i64 %35
  %37 = lshr i32 %30, 5
  %38 = and i32 %37, 504
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %6, i64 %39
  %41 = lshr i32 %31, 5
  %42 = and i32 %41, 504
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %6, i64 %43
  %45 = lshr i32 %32, 5
  %46 = and i32 %45, 504
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %6, i64 %47
  %49 = bitcast i16* %36 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = bitcast i16* %40 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = bitcast i16* %44 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = bitcast i16* %48 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 1
  br i1 %21, label %57, label %66

57:                                               ; preds = %27
  %58 = ashr i32 %29, 14
  %59 = sext i32 %58 to i64
  %60 = ashr i32 %30, 14
  %61 = sext i32 %60 to i64
  %62 = ashr i32 %31, 14
  %63 = sext i32 %62 to i64
  %64 = ashr i32 %32, 14
  %65 = sext i32 %64 to i64
  br label %70

66:                                               ; preds = %70, %27
  %67 = add nuw nsw i64 %28, 4
  %68 = add nsw i32 %29, %24
  %69 = icmp slt i64 %67, %25
  br i1 %69, label %27, label %26

70:                                               ; preds = %70, %57
  %71 = phi i16* [ %11, %57 ], [ %103, %70 ]
  %72 = phi i16* [ %2, %57 ], [ %104, %70 ]
  %73 = phi i32 [ 0, %57 ], [ %102, %70 ]
  %74 = getelementptr inbounds i16, i16* %71, i64 %59
  %75 = getelementptr inbounds i16, i16* %71, i64 %61
  %76 = getelementptr inbounds i16, i16* %71, i64 %63
  %77 = getelementptr inbounds i16, i16* %71, i64 %65
  %78 = bitcast i16* %74 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = bitcast i16* %75 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 1
  %82 = bitcast i16* %76 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 1
  %84 = bitcast i16* %77 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 1
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %50) #2
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %52) #2
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %54) #2
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %56) #2
  %90 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %86, <4 x i32> %87) #2
  %91 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %88, <4 x i32> %89) #2
  %92 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %90, <4 x i32> %91) #2
  %93 = add <4 x i32> %92, <i32 64, i32 64, i32 64, i32 64>
  %94 = ashr <4 x i32> %93, <i32 7, i32 7, i32 7, i32 7>
  %95 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %94, <4 x i32> zeroinitializer) #2
  %96 = icmp slt <8 x i16> %95, %16
  %97 = select <8 x i1> %96, <8 x i16> %95, <8 x i16> %16
  %98 = bitcast <8 x i16> %97 to <2 x i64>
  %99 = getelementptr inbounds i16, i16* %72, i64 %28
  %100 = extractelement <2 x i64> %98, i32 0
  %101 = bitcast i16* %99 to i64*
  store i64 %100, i64* %101, align 1
  %102 = add nuw nsw i32 %73, 1
  %103 = getelementptr inbounds i16, i16* %71, i64 %22
  %104 = getelementptr inbounds i16, i16* %72, i64 %23
  %105 = icmp eq i32 %102, %5
  br i1 %105, label %66, label %70
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
