; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_polygon.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_polygon.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatPolygon" = type { %"class.WTF::Vector", %"class.blink::FloatRect", i8, %"class.WTF::Vector.0", %"class.WTF::PODIntervalTree" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FloatPoint"*, i32, i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.blink::FloatPolygonEdge"*, i32, i32 }
%"class.blink::FloatPolygonEdge" = type { %"class.blink::VertexPair", i32, i32, i32, %"class.blink::FloatPolygon"* }
%"class.blink::VertexPair" = type { i32 (...)** }
%"class.WTF::PODIntervalTree" = type { %"class.WTF::PODRedBlackTree.base", [7 x i8] }
%"class.WTF::PODRedBlackTree.base" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i8 }>
%class.scoped_refptr = type { %"class.WTF::PODFreeListArena"* }
%"class.WTF::PODFreeListArena" = type { %"class.WTF::RefCounted", %class.scoped_refptr.15, %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.scoped_refptr.15 = type { %"class.WTF::PODArena"* }
%"class.WTF::PODArena" = type { %"class.WTF::RefCounted.16", %class.scoped_refptr.18, %"class.WTF::PODArena::Chunk"*, i64, %"class.WTF::Vector.21" }
%"class.WTF::RefCounted.16" = type { %"class.base::RefCounted.17" }
%"class.base::RefCounted.17" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.18 = type { %"class.WTF::PODArena::Allocator"* }
%"class.WTF::PODArena::Allocator" = type <{ i32 (...)**, %"class.WTF::RefCounted.19", [4 x i8] }>
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::PODArena::Chunk" = type { %"class.WTF::PODArena::Allocator"*, i8*, i64, i64 }
%"class.WTF::Vector.21" = type { %"class.WTF::VectorBuffer.22" }
%"class.WTF::VectorBuffer.22" = type { %"class.WTF::VectorBufferBase.23" }
%"class.WTF::VectorBufferBase.23" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.WTF::PODArena::Chunk"* }
%"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk" = type { %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* }
%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node" = type { i32 (...)**, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i32, %"class.WTF::PODInterval" }
%"class.WTF::PODInterval" = type { float, float, %"class.blink::FloatPolygonEdge"*, float, float }
%"class.WTF::PODRedBlackTree" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i8, [7 x i8] }>
%"class.WTF::Vector.5" = type { %"class.WTF::VectorBuffer.6" }
%"class.WTF::VectorBuffer.6" = type { %"class.WTF::VectorBufferBase.7" }
%"class.WTF::VectorBufferBase.7" = type { %"class.blink::FloatPolygonEdge"**, i32, i32 }
%"class.WTF::PODIntervalSearchAdapter" = type { %"class.WTF::Vector.10"*, float, float }
%"class.WTF::Vector.10" = type { %"class.WTF::VectorBuffer.11" }
%"class.WTF::VectorBuffer.11" = type { %"class.WTF::VectorBufferBase.12" }
%"class.WTF::VectorBufferBase.12" = type { %"class.WTF::PODInterval"*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::PODArena::FastMallocAllocator" = type { %"class.WTF::PODArena::Allocator.base", [4 x i8] }
%"class.WTF::PODArena::Allocator.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.19" }>

$_ZNK5blink16FloatPolygonEdge7Vertex1Ev = comdat any

$_ZNK5blink16FloatPolygonEdge7Vertex2Ev = comdat any

$_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev = comdat any

$_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEED0Ev = comdat any

$_ZNK3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE15CheckInvariantsEv = comdat any

$_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE10UpdateNodeEPNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev = comdat any

$_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE = comdat any

$_ZN3WTF8PODArena19FastMallocAllocator8AllocateEm = comdat any

$_ZN3WTF8PODArena19FastMallocAllocator4FreeEPv = comdat any

$_ZN3WTF8PODArena9AllocatorD2Ev = comdat any

$_ZN3WTF8PODArena19FastMallocAllocatorD0Ev = comdat any

$_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi = comdat any

$_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE23CheckInvariantsFromNodeEPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE = comdat any

$_ZN5blink10VertexPairD2Ev = comdat any

$_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatPolygonEdgeEEEmm = comdat any

$_ZN5blink16FloatPolygonEdgeD0Ev = comdat any

$_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10InsertNodeEPNS6_4NodeE = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD2Ev = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD0Ev = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4Node8CopyFromEPS7_ = comdat any

$_ZN3WTF8PODArena12AllocateBaseINS_15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeEEEPvv = comdat any

$_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrINS_8PODArena5ChunkENS2_14default_deleteIS5_EEEEEEmm = comdat any

$_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE21SearchForOverlapsFromINS_24PODIntervalSearchAdapterIfS3_EEEEvPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeERT_ = comdat any

$_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS5_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink16FloatPolygonEdgeEEEmm = comdat any

$_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZTVN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEEE = comdat any

$_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE = comdat any

$_ZTVN3WTF8PODArena19FastMallocAllocatorE = comdat any

$_ZTVN5blink16FloatPolygonEdgeE = comdat any

$_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeE = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZTVN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEEE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::PODRedBlackTree"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev to i8*), i8* bitcast (void (%"class.WTF::PODIntervalTree"*)* @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEED0Ev to i8*), i8* bitcast (i1 (%"class.WTF::PODIntervalTree"*)* @_ZNK3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE15CheckInvariantsEv to i8*), i8* bitcast (i1 (%"class.WTF::PODIntervalTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE10UpdateNodeEPNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE to i8*)] }, comdat, align 8
@_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::PODRedBlackTree"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev to i8*), i8* bitcast (void (%"class.WTF::PODRedBlackTree"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev to i8*), i8* bitcast (i1 (%"class.WTF::PODRedBlackTree"*)* @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv to i8*), i8* bitcast (i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE to i8*)] }, comdat, align 8
@_ZTVN3WTF8PODArena19FastMallocAllocatorE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.WTF::PODArena::FastMallocAllocator"*, i64)* @_ZN3WTF8PODArena19FastMallocAllocator8AllocateEm to i8*), i8* bitcast (void (%"class.WTF::PODArena::FastMallocAllocator"*, i8*)* @_ZN3WTF8PODArena19FastMallocAllocator4FreeEPv to i8*), i8* bitcast (void (%"class.WTF::PODArena::Allocator"*)* @_ZN3WTF8PODArena9AllocatorD2Ev to i8*), i8* bitcast (void (%"class.WTF::PODArena::FastMallocAllocator"*)* @_ZN3WTF8PODArena19FastMallocAllocatorD0Ev to i8*)] }, comdat, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_8PODArenaEEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::PODArena]\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatPolygonEdgeEEEPKcv = private unnamed_addr constant [71 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FloatPolygonEdge]\00", align 1
@_ZTVN5blink16FloatPolygonEdgeE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::VertexPair"*)* @_ZN5blink10VertexPairD2Ev to i8*), i8* bitcast (void (%"class.blink::FloatPolygonEdge"*)* @_ZN5blink16FloatPolygonEdgeD0Ev to i8*), i8* bitcast (%"class.blink::FloatPoint"* (%"class.blink::FloatPolygonEdge"*)* @_ZNK5blink16FloatPolygonEdge7Vertex1Ev to i8*), i8* bitcast (%"class.blink::FloatPoint"* (%"class.blink::FloatPolygonEdge"*)* @_ZNK5blink16FloatPolygonEdge7Vertex2Ev to i8*)] }, comdat, align 8
@_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD2Ev to i8*), i8* bitcast (void (%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD0Ev to i8*), i8* bitcast (void (%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4Node8CopyFromEPS7_ to i8*)] }, comdat, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEEEEPKcv = private unnamed_addr constant [139 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::unique_ptr<WTF::PODArena::Chunk, std::__1::default_delete<WTF::PODArena::Chunk> >]\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"blink_gc_plugin_ignore\00", section "llvm.metadata"
@.str.13 = private unnamed_addr constant [61 x i8] c"../../third_party/blink/renderer/platform/wtf/pod_interval.h\00", section "llvm.metadata"
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEPKcv = private unnamed_addr constant [98 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::PODInterval<float, blink::FloatPolygonEdge *>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink16FloatPolygonEdgeEEEPKcv = private unnamed_addr constant [79 x i8] c"const char *WTF::GetStringWithTypeName() [T = const blink::FloatPolygonEdge *]\00", align 1

@_ZN5blink12FloatPolygonC1EN3WTF6VectorINS_10FloatPointELj0ENS1_18PartitionAllocatorEEE = hidden unnamed_addr alias void (%"class.blink::FloatPolygon"*, %"class.WTF::Vector"*), void (%"class.blink::FloatPolygon"*, %"class.WTF::Vector"*)* @_ZN5blink12FloatPolygonC2EN3WTF6VectorINS_10FloatPointELj0ENS1_18PartitionAllocatorEEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12FloatPolygonC2EN3WTF6VectorINS_10FloatPointELj0ENS1_18PartitionAllocatorEEE(%"class.blink::FloatPolygon"*, %"class.WTF::Vector"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::PODInterval", align 8
  %4 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.WTF::Vector"* %1 to i64*
  %8 = bitcast %"class.blink::FloatPolygon"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #9
  %9 = load i64, i64* %7, align 8
  %10 = bitcast %"class.blink::FloatPolygon"* %0 to i64*
  store atomic i64 0, i64* %7 monotonic, align 8
  store atomic i64 %9, i64* %10 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* %11, align 4
  store i32 %13, i32* %5, align 4
  store i32 %12, i32* %11, align 4
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %15 = load i32, i32* %6, align 4
  %16 = load i32, i32* %14, align 4
  store i32 %16, i32* %6, align 4
  store i32 %15, i32* %14, align 4
  %17 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 1
  %18 = bitcast %"class.blink::FloatRect"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 16, i1 false) #9
  %19 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3
  %20 = bitcast %"class.WTF::Vector.0"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #9
  %21 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.WTF::PODIntervalTree", %"class.WTF::PODIntervalTree"* %21, i64 0, i32 0, i32 0
  %23 = tail call noalias i8* @malloc(i64 24) #9
  %24 = bitcast i8* %23 to i32*
  store i32 1, i32* %24, align 4
  %25 = tail call noalias i8* @malloc(i64 48) #9
  %26 = bitcast i8* %25 to i32*
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %25, i64 8
  %28 = tail call noalias i8* @malloc(i64 16) #9
  %29 = getelementptr inbounds i8, i8* %28, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 1, i32* %30, align 4
  %31 = bitcast i8* %28 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3WTF8PODArena19FastMallocAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = ptrtoint i8* %28 to i64
  %33 = bitcast i8* %27 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %25, i64 16
  %35 = bitcast i8* %34 to %"class.WTF::PODArena::Chunk"**
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %35, align 8
  %36 = getelementptr inbounds i8, i8* %25, i64 24
  %37 = bitcast i8* %36 to i64*
  store i64 16384, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %25, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false) #9
  %39 = getelementptr inbounds i8, i8* %23, i64 8
  %40 = bitcast i8* %39 to i8**
  store i8* %25, i8** %40, align 8
  %41 = getelementptr inbounds i8, i8* %23, i64 16
  %42 = bitcast i8* %41 to %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"**
  store %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* null, %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"** %42, align 8
  %43 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 4, i32 0, i32 1, i32 0
  %44 = bitcast %"class.WTF::PODFreeListArena"** %43 to i8**
  store i8* %23, i8** %44, align 8
  %45 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 4, i32 0, i32 2
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* null, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %45, align 8
  %46 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 4, i32 0, i32 3
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  store i8 1, i8* %46, align 8
  %47 = load i32, i32* %6, align 4
  %48 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %49 = icmp eq i32 %47, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %2
  store i32 %47, i32* %48, align 4
  %51 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 2
  store i8 1, i8* %51, align 8
  br label %135

52:                                               ; preds = %2
  %53 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %54 = icmp ugt i32 %47, 4
  %55 = select i1 %54, i32 %47, i32 4
  %56 = zext i32 %55 to i64
  %57 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatPolygonEdgeEEEmm(i64 %56) #9
  %58 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %57, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatPolygonEdgeEEEPKcv, i64 0, i64 0)) #9
  %59 = ptrtoint i8* %58 to i64
  %60 = bitcast %"class.WTF::Vector.0"* %19 to i64*
  store atomic i64 %59, i64* %60 monotonic, align 8
  %61 = lshr i64 %57, 5
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %53, align 8
  %63 = bitcast i8* %58 to %"class.blink::FloatPolygonEdge"*
  %64 = load i32, i32* %48, align 4
  %65 = zext i32 %47 to i64
  %66 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %63, i64 %65
  %67 = icmp eq i32 %64, %47
  br i1 %67, label %68, label %72

68:                                               ; preds = %52
  store i32 %47, i32* %48, align 4
  %69 = icmp ult i32 %47, 3
  %70 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 2
  %71 = zext i1 %69 to i8
  store i8 %71, i8* %70, align 8
  br label %128

72:                                               ; preds = %52
  %73 = zext i32 %64 to i64
  %74 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %63, i64 %73
  %75 = shl nuw nsw i64 %65, 5
  %76 = add nsw i64 %75, -32
  %77 = shl nuw nsw i64 %73, 5
  %78 = sub nsw i64 %76, %77
  %79 = lshr exact i64 %78, 5
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 7
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %72, %83
  %84 = phi %"class.blink::FloatPolygonEdge"* [ %89, %83 ], [ %74, %72 ]
  %85 = phi i64 [ %90, %83 ], [ %81, %72 ]
  %86 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %84, i64 0, i32 1
  %87 = bitcast i32* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #9
  %88 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %84, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %88, align 8
  %89 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %84, i64 1
  %90 = add i64 %85, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %83, !llvm.loop !2

92:                                               ; preds = %83, %72
  %93 = phi %"class.blink::FloatPolygonEdge"* [ %74, %72 ], [ %89, %83 ]
  %94 = icmp ult i64 %78, 224
  br i1 %94, label %123, label %95

95:                                               ; preds = %92, %95
  %96 = phi %"class.blink::FloatPolygonEdge"* [ %121, %95 ], [ %93, %92 ]
  %97 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 0, i32 1
  %98 = bitcast i32* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 24, i1 false) #9
  %99 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %99, align 8
  %100 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 1, i32 1
  %101 = bitcast i32* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 24, i1 false) #9
  %102 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %102, align 8
  %103 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 2, i32 1
  %104 = bitcast i32* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 24, i1 false) #9
  %105 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %105, align 8
  %106 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 3, i32 1
  %107 = bitcast i32* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #9
  %108 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %108, align 8
  %109 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 4, i32 1
  %110 = bitcast i32* %109 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 24, i1 false) #9
  %111 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %111, align 8
  %112 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 5, i32 1
  %113 = bitcast i32* %112 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #9
  %114 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 5, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %114, align 8
  %115 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 6, i32 1
  %116 = bitcast i32* %115 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #9
  %117 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 6, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %117, align 8
  %118 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 7, i32 1
  %119 = bitcast i32* %118 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 24, i1 false) #9
  %120 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %120, align 8
  %121 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %96, i64 8
  %122 = icmp eq %"class.blink::FloatPolygonEdge"* %121, %66
  br i1 %122, label %123, label %95

123:                                              ; preds = %95, %92
  store i32 %47, i32* %48, align 4
  %124 = icmp ult i32 %47, 3
  %125 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 2
  %126 = zext i1 %124 to i8
  store i8 %126, i8* %125, align 8
  %127 = icmp eq i32 %47, 0
  br i1 %127, label %135, label %128

128:                                              ; preds = %68, %123
  %129 = phi i8* [ %70, %68 ], [ %125, %123 ]
  %130 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 0) #9
  %131 = bitcast %"class.blink::FloatPoint"* %130 to i64*
  %132 = bitcast %"class.blink::FloatRect"* %17 to i64*
  %133 = load i64, i64* %131, align 4
  store i64 %133, i64* %132, align 4
  %134 = load i8, i8* %129, align 8
  br label %135

135:                                              ; preds = %50, %123, %128
  %136 = phi i8 [ %126, %123 ], [ %134, %128 ], [ 1, %50 ]
  %137 = phi i8* [ %125, %123 ], [ %129, %128 ], [ %51, %50 ]
  %138 = icmp eq i8 %136, 0
  br i1 %138, label %139, label %465

139:                                              ; preds = %135
  %140 = icmp ugt i32 %47, 1
  br i1 %140, label %165, label %141

141:                                              ; preds = %189, %139
  %142 = phi i32 [ 0, %139 ], [ %190, %189 ]
  %143 = add i32 %142, 1
  %144 = urem i32 %143, %47
  %145 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %144) #9
  %146 = bitcast %"class.blink::FloatPoint"* %145 to <2 x float>*
  %147 = load <2 x float>, <2 x float>* %146, align 4
  %148 = add i32 %47, -1
  %149 = add i32 %148, %142
  %150 = urem i32 %149, %47
  %151 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %150) #9
  %152 = bitcast %"class.blink::FloatPoint"* %151 to <2 x float>*
  %153 = load <2 x float>, <2 x float>* %152, align 4
  %154 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %142) #9
  %155 = bitcast %"class.blink::FloatPoint"* %154 to <2 x float>*
  %156 = load <2 x float>, <2 x float>* %155, align 4
  %157 = fsub <2 x float> %156, %153
  %158 = shufflevector <2 x float> %157, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %159 = fsub <2 x float> %147, %153
  %160 = fmul <2 x float> %159, %158
  %161 = extractelement <2 x float> %160, i32 0
  %162 = extractelement <2 x float> %160, i32 1
  %163 = fsub float %162, %161
  %164 = fcmp ogt float %163, 0.000000e+00
  br label %193

165:                                              ; preds = %139, %189
  %166 = phi i32 [ %190, %189 ], [ 0, %139 ]
  %167 = phi i32 [ %191, %189 ], [ 1, %139 ]
  %168 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %167) #9
  %169 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %168, i64 0, i32 1
  %170 = load float, float* %169, align 4
  %171 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %166) #9
  %172 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %171, i64 0, i32 1
  %173 = load float, float* %172, align 4
  %174 = fcmp olt float %170, %173
  br i1 %174, label %188, label %175

175:                                              ; preds = %165
  %176 = load float, float* %169, align 4
  %177 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %166) #9
  %178 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %177, i64 0, i32 1
  %179 = load float, float* %178, align 4
  %180 = fcmp oeq float %176, %179
  br i1 %180, label %181, label %189

181:                                              ; preds = %175
  %182 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %168, i64 0, i32 0
  %183 = load float, float* %182, align 4
  %184 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %166) #9
  %185 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %184, i64 0, i32 0
  %186 = load float, float* %185, align 4
  %187 = fcmp olt float %183, %186
  br i1 %187, label %188, label %189

188:                                              ; preds = %181, %165
  br label %189

189:                                              ; preds = %188, %181, %175
  %190 = phi i32 [ %167, %188 ], [ %166, %181 ], [ %166, %175 ]
  %191 = add nuw i32 %167, 1
  %192 = icmp eq i32 %191, %47
  br i1 %192, label %141, label %165

193:                                              ; preds = %247, %141
  %194 = phi i32 [ 0, %141 ], [ %256, %247 ]
  %195 = phi i32 [ 0, %141 ], [ %225, %247 ]
  %196 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %195) #9
  tail call void @_ZN5blink9FloatRect6ExtendERKNS_10FloatPointE(%"class.blink::FloatRect"* %17, %"class.blink::FloatPoint"* dereferenceable(8) %196) #9
  %197 = load i32, i32* %6, align 4
  %198 = add i32 %197, -1
  %199 = select i1 %164, i32 1, i32 %198
  %200 = add i32 %199, %195
  %201 = urem i32 %200, %197
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %222, label %203

203:                                              ; preds = %193, %218
  %204 = phi i32 [ %220, %218 ], [ %201, %193 ]
  %205 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %195) #9
  %206 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %204) #9
  %207 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %205, i64 0, i32 0
  %208 = load float, float* %207, align 4
  %209 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %206, i64 0, i32 0
  %210 = load float, float* %209, align 4
  %211 = fcmp oeq float %208, %210
  br i1 %211, label %212, label %222

212:                                              ; preds = %203
  %213 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %205, i64 0, i32 1
  %214 = load float, float* %213, align 4
  %215 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %206, i64 0, i32 1
  %216 = load float, float* %215, align 4
  %217 = fcmp oeq float %214, %216
  br i1 %217, label %218, label %222

218:                                              ; preds = %212
  %219 = add i32 %204, %199
  %220 = urem i32 %219, %197
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %203

222:                                              ; preds = %218, %212, %203, %193
  %223 = phi i32 [ 0, %193 ], [ %204, %203 ], [ 0, %218 ], [ %204, %212 ]
  br label %224

224:                                              ; preds = %222, %227
  %225 = phi i32 [ %229, %227 ], [ %223, %222 ]
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %247, label %227

227:                                              ; preds = %224
  %228 = add i32 %225, %199
  %229 = urem i32 %228, %197
  %230 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %195) #9
  %231 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %225) #9
  %232 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %229) #9
  %233 = bitcast %"class.blink::FloatPoint"* %231 to <2 x float>*
  %234 = load <2 x float>, <2 x float>* %233, align 4
  %235 = bitcast %"class.blink::FloatPoint"* %230 to <2 x float>*
  %236 = load <2 x float>, <2 x float>* %235, align 4
  %237 = fsub <2 x float> %234, %236
  %238 = bitcast %"class.blink::FloatPoint"* %232 to <2 x float>*
  %239 = load <2 x float>, <2 x float>* %238, align 4
  %240 = fsub <2 x float> %239, %236
  %241 = shufflevector <2 x float> %240, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %242 = fmul <2 x float> %237, %241
  %243 = extractelement <2 x float> %242, i32 0
  %244 = extractelement <2 x float> %242, i32 1
  %245 = fsub float %243, %244
  %246 = fcmp oeq float %245, 0.000000e+00
  br i1 %246, label %224, label %247

247:                                              ; preds = %224, %227
  %248 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %194) #9
  %249 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %248, i64 0, i32 4
  store %"class.blink::FloatPolygon"* %0, %"class.blink::FloatPolygon"** %249, align 8
  %250 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %194) #9
  %251 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %250, i64 0, i32 1
  store i32 %195, i32* %251, align 8
  %252 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %194) #9
  %253 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %252, i64 0, i32 2
  store i32 %225, i32* %253, align 4
  %254 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %194) #9
  %255 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %254, i64 0, i32 3
  store i32 %194, i32* %255, align 8
  %256 = add i32 %194, 1
  %257 = icmp eq i32 %225, 0
  br i1 %257, label %258, label %193

258:                                              ; preds = %247
  %259 = icmp ugt i32 %256, 3
  br i1 %259, label %260, label %298

260:                                              ; preds = %258
  %261 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 0) #9
  %262 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %194) #9
  %263 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %262, i64 0, i32 4
  %264 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %263, align 8
  %265 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %262, i64 0, i32 1
  %266 = load i32, i32* %265, align 8
  %267 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %264, i64 0, i32 0
  %268 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %267, i32 %266) #9
  %269 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %263, align 8
  %270 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %262, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %269, i64 0, i32 0
  %273 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %272, i32 %271) #9
  %274 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %261, i64 0, i32 4
  %275 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %274, align 8
  %276 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %261, i64 0, i32 2
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %275, i64 0, i32 0
  %279 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %278, i32 %277) #9
  %280 = bitcast %"class.blink::FloatPoint"* %273 to <2 x float>*
  %281 = load <2 x float>, <2 x float>* %280, align 4
  %282 = bitcast %"class.blink::FloatPoint"* %268 to <2 x float>*
  %283 = load <2 x float>, <2 x float>* %282, align 4
  %284 = fsub <2 x float> %281, %283
  %285 = bitcast %"class.blink::FloatPoint"* %279 to <2 x float>*
  %286 = load <2 x float>, <2 x float>* %285, align 4
  %287 = fsub <2 x float> %286, %283
  %288 = shufflevector <2 x float> %287, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %289 = fmul <2 x float> %284, %288
  %290 = extractelement <2 x float> %289, i32 0
  %291 = extractelement <2 x float> %289, i32 1
  %292 = fsub float %290, %291
  %293 = fcmp oeq float %292, 0.000000e+00
  br i1 %293, label %294, label %298

294:                                              ; preds = %260
  %295 = load i32, i32* %265, align 8
  %296 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 0) #9
  %297 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %296, i64 0, i32 1
  store i32 %295, i32* %297, align 8
  br label %298

298:                                              ; preds = %260, %294, %258
  %299 = phi i32 [ %256, %258 ], [ %194, %294 ], [ %256, %260 ]
  %300 = load i32, i32* %48, align 4
  %301 = icmp ult i32 %300, %299
  br i1 %301, label %302, label %386

302:                                              ; preds = %298
  %303 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %304 = load i32, i32* %303, align 8
  %305 = icmp ult i32 %304, %299
  br i1 %305, label %306, label %328

306:                                              ; preds = %302
  %307 = lshr i32 %304, 2
  %308 = add nuw i32 %304, 1
  %309 = add i32 %308, %307
  %310 = icmp ugt i32 %309, 4
  %311 = select i1 %310, i32 %309, i32 4
  %312 = icmp ugt i32 %311, %299
  %313 = select i1 %312, i32 %311, i32 %299
  %314 = icmp ult i32 %304, %313
  br i1 %314, label %315, label %328, !prof !4

315:                                              ; preds = %306
  %316 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %19, i64 0, i32 0, i32 0, i32 0
  %317 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %316, align 8
  %318 = icmp eq %"class.blink::FloatPolygonEdge"* %317, null
  br i1 %318, label %319, label %327

319:                                              ; preds = %315
  %320 = zext i32 %313 to i64
  %321 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatPolygonEdgeEEEmm(i64 %320) #9
  %322 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %321, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatPolygonEdgeEEEPKcv, i64 0, i64 0)) #9
  %323 = ptrtoint i8* %322 to i64
  %324 = bitcast %"class.WTF::Vector.0"* %19 to i64*
  store atomic i64 %323, i64* %324 monotonic, align 8
  %325 = lshr i64 %321, 5
  %326 = trunc i64 %325 to i32
  store i32 %326, i32* %303, align 8
  br label %328

327:                                              ; preds = %315
  tail call void @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.0"* %19, i32 %313) #9
  br label %328

328:                                              ; preds = %327, %319, %306, %302
  %329 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %19, i64 0, i32 0, i32 0, i32 0
  %330 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %329, align 8
  %331 = load i32, i32* %48, align 4
  %332 = zext i32 %299 to i64
  %333 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %330, i64 %332
  %334 = icmp eq i32 %331, %299
  br i1 %334, label %386, label %335

335:                                              ; preds = %328
  %336 = zext i32 %331 to i64
  %337 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %330, i64 %336
  %338 = shl nuw nsw i64 %332, 5
  %339 = add nsw i64 %338, -32
  %340 = shl nuw nsw i64 %336, 5
  %341 = sub nsw i64 %339, %340
  %342 = lshr exact i64 %341, 5
  %343 = add nuw nsw i64 %342, 1
  %344 = and i64 %343, 7
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %355, label %346

346:                                              ; preds = %335, %346
  %347 = phi %"class.blink::FloatPolygonEdge"* [ %352, %346 ], [ %337, %335 ]
  %348 = phi i64 [ %353, %346 ], [ %344, %335 ]
  %349 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %347, i64 0, i32 1
  %350 = bitcast i32* %349 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %350, i8 0, i64 24, i1 false) #9
  %351 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %347, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %351, align 8
  %352 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %347, i64 1
  %353 = add i64 %348, -1
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %346, !llvm.loop !5

355:                                              ; preds = %346, %335
  %356 = phi %"class.blink::FloatPolygonEdge"* [ %337, %335 ], [ %352, %346 ]
  %357 = icmp ult i64 %341, 224
  br i1 %357, label %386, label %358

358:                                              ; preds = %355, %358
  %359 = phi %"class.blink::FloatPolygonEdge"* [ %384, %358 ], [ %356, %355 ]
  %360 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 0, i32 1
  %361 = bitcast i32* %360 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %361, i8 0, i64 24, i1 false) #9
  %362 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %362, align 8
  %363 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 1, i32 1
  %364 = bitcast i32* %363 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %364, i8 0, i64 24, i1 false) #9
  %365 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %365, align 8
  %366 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 2, i32 1
  %367 = bitcast i32* %366 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %367, i8 0, i64 24, i1 false) #9
  %368 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %368, align 8
  %369 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 3, i32 1
  %370 = bitcast i32* %369 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %370, i8 0, i64 24, i1 false) #9
  %371 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %371, align 8
  %372 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 4, i32 1
  %373 = bitcast i32* %372 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %373, i8 0, i64 24, i1 false) #9
  %374 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %374, align 8
  %375 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 5, i32 1
  %376 = bitcast i32* %375 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %376, i8 0, i64 24, i1 false) #9
  %377 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 5, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %377, align 8
  %378 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 6, i32 1
  %379 = bitcast i32* %378 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %379, i8 0, i64 24, i1 false) #9
  %380 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 6, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %380, align 8
  %381 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 7, i32 1
  %382 = bitcast i32* %381 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %382, i8 0, i64 24, i1 false) #9
  %383 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %383, align 8
  %384 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %359, i64 8
  %385 = icmp eq %"class.blink::FloatPolygonEdge"* %384, %333
  br i1 %385, label %386, label %358

386:                                              ; preds = %355, %358, %298, %328
  store i32 %299, i32* %48, align 4
  %387 = icmp ult i32 %299, 3
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %137, align 8
  br i1 %387, label %465, label %389

389:                                              ; preds = %386
  %390 = bitcast %"class.WTF::PODIntervalTree"* %21 to %"class.WTF::PODRedBlackTree"*
  %391 = bitcast %"class.WTF::PODInterval"* %3 to i8*
  %392 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %3, i64 0, i32 0
  %393 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %3, i64 0, i32 1
  %394 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %3, i64 0, i32 2
  %395 = bitcast %"class.blink::FloatPolygonEdge"** %394 to i8*
  %396 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %3, i64 0, i32 3
  %397 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %3, i64 0, i32 4
  br label %398

398:                                              ; preds = %389, %459
  %399 = phi i32 [ 0, %389 ], [ %462, %459 ]
  %400 = call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %19, i32 %399) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %391) #9
  %401 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %400, i64 0, i32 0
  %402 = bitcast %"class.blink::FloatPolygonEdge"* %400 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %403 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %402, align 8
  %404 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %403, i64 2
  %405 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %404, align 8
  %406 = call dereferenceable(8) %"class.blink::FloatPoint"* %405(%"class.blink::VertexPair"* %401) #9
  %407 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %406, i64 0, i32 1
  %408 = load float, float* %407, align 4
  %409 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %402, align 8
  %410 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %409, i64 3
  %411 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %410, align 8
  %412 = call dereferenceable(8) %"class.blink::FloatPoint"* %411(%"class.blink::VertexPair"* %401) #9
  %413 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %412, i64 0, i32 1
  %414 = load float, float* %413, align 4
  %415 = fcmp olt float %414, %408
  %416 = select i1 %415, float %414, float %408
  %417 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %402, align 8
  %418 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %417, i64 2
  %419 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %418, align 8
  %420 = call dereferenceable(8) %"class.blink::FloatPoint"* %419(%"class.blink::VertexPair"* %401) #9
  %421 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %420, i64 0, i32 1
  %422 = load float, float* %421, align 4
  %423 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %402, align 8
  %424 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %423, i64 3
  %425 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %424, align 8
  %426 = call dereferenceable(8) %"class.blink::FloatPoint"* %425(%"class.blink::VertexPair"* %401) #9
  %427 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %426, i64 0, i32 1
  %428 = load float, float* %427, align 4
  %429 = fcmp olt float %422, %428
  %430 = select i1 %429, float %428, float %422
  store float %416, float* %392, align 8
  store float %430, float* %393, align 4
  %431 = call i8* @llvm.ptr.annotation.p0i8(i8* %395, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0), i32 152) #9
  %432 = bitcast i8* %431 to %"class.blink::FloatPolygonEdge"**
  store %"class.blink::FloatPolygonEdge"* %400, %"class.blink::FloatPolygonEdge"** %432, align 8
  store float %416, float* %396, align 8
  store float %430, float* %397, align 4
  %433 = load %"class.WTF::PODFreeListArena"*, %"class.WTF::PODFreeListArena"** %43, align 8
  %434 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %433, i64 0, i32 2
  %435 = load %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"*, %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"** %434, align 8
  %436 = icmp eq %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435, null
  br i1 %436, label %449, label %437

437:                                              ; preds = %398
  %438 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"** %434 to i64*
  store i64 %439, i64* %440, align 8
  %441 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435 to %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*
  %442 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %442, align 8
  %443 = getelementptr inbounds %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk", %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435, i64 1
  %444 = getelementptr inbounds %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk", %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435, i64 4
  %445 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %444 to i32*
  %446 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %443 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %446, i8 0, i64 24, i1 false) #9
  store i32 1, i32* %445, align 8
  %447 = getelementptr inbounds %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk", %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %435, i64 5
  %448 = bitcast %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* %447 to i8*
  br label %459

449:                                              ; preds = %398
  %450 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %433, i64 0, i32 1, i32 0
  %451 = load %"class.WTF::PODArena"*, %"class.WTF::PODArena"** %450, align 8
  %452 = call i8* @_ZN3WTF8PODArena12AllocateBaseINS_15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeEEEPvv(%"class.WTF::PODArena"* %451) #9
  %453 = bitcast i8* %452 to %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*
  %454 = bitcast i8* %452 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %454, align 8
  %455 = getelementptr inbounds i8, i8* %452, i64 8
  %456 = getelementptr inbounds i8, i8* %452, i64 32
  %457 = bitcast i8* %456 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %455, i8 0, i64 24, i1 false) #9
  store i32 1, i32* %457, align 8
  %458 = getelementptr inbounds i8, i8* %452, i64 40
  br label %459

459:                                              ; preds = %437, %449
  %460 = phi i8* [ %448, %437 ], [ %458, %449 ]
  %461 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %441, %437 ], [ %453, %449 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %460, i8* nonnull align 8 %391, i64 24, i1 false) #9
  call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10InsertNodeEPNS6_4NodeE(%"class.WTF::PODRedBlackTree"* %390, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %461) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %391) #9
  %462 = add nuw i32 %399, 1
  %463 = load i32, i32* %48, align 4
  %464 = icmp ult i32 %462, %463
  br i1 %464, label %398, label %465

465:                                              ; preds = %459, %386, %135
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink9FloatRect6ExtendERKNS_10FloatPointE(%"class.blink::FloatRect"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK5blink16FloatPolygonEdge7Vertex1Ev(%"class.blink::FloatPolygonEdge"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %0, i64 0, i32 4
  %3 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %3, i64 0, i32 0
  %7 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %6, i32 %5) #9
  ret %"class.blink::FloatPoint"* %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK5blink16FloatPolygonEdge7Vertex2Ev(%"class.blink::FloatPolygonEdge"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %0, i64 0, i32 4
  %3 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %3, i64 0, i32 0
  %7 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %6, i32 %5) #9
  ret %"class.blink::FloatPoint"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink12FloatPolygon16OverlappingEdgesEffRN3WTF6VectorIPKNS_16FloatPolygonEdgeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::FloatPolygon"* nocapture readonly, float, float, %"class.WTF::Vector.5"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %5 = alloca %"class.WTF::PODIntervalSearchAdapter", align 8
  %6 = alloca %"class.WTF::Vector.10", align 8
  %7 = alloca %"class.WTF::PODInterval", align 8
  %8 = bitcast %"class.WTF::Vector.10"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %6, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %6, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #9
  %11 = bitcast %"class.WTF::PODInterval"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = bitcast %"class.WTF::PODInterval"* %7 to i32*
  %13 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 0, i32 0
  store float %1, float* %13, align 8
  %14 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 0, i32 1
  %15 = bitcast float* %14 to i32*
  store float %2, float* %14, align 4
  %16 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 0, i32 2
  %17 = bitcast %"class.blink::FloatPolygonEdge"** %16 to i8*
  %18 = call i8* @llvm.ptr.annotation.p0i8(i8* %17, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0), i32 152) #9
  %19 = bitcast i8* %18 to %"class.blink::FloatPolygonEdge"**
  store %"class.blink::FloatPolygonEdge"* null, %"class.blink::FloatPolygonEdge"** %19, align 8
  %20 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 0, i32 3
  store float %1, float* %20, align 8
  %21 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 0, i32 4
  store float %2, float* %21, align 4
  %22 = bitcast %"class.WTF::PODIntervalSearchAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %5, i64 0, i32 0
  %24 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %5, i64 0, i32 1
  %25 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %5, i64 0, i32 2
  store %"class.WTF::Vector.10"* %6, %"class.WTF::Vector.10"** %23, align 8
  %26 = load i32, i32* %12, align 8
  %27 = bitcast float* %24 to i32*
  store i32 %26, i32* %27, align 8
  %28 = load i32, i32* %15, align 4
  %29 = bitcast float* %25 to i32*
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 4, i32 0, i32 2
  %31 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %30, align 8
  call void @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE21SearchForOverlapsFromINS_24PODIntervalSearchAdapterIfS3_EEEEvPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeERT_(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %31, %"class.WTF::PODIntervalSearchAdapter"* nonnull dereferenceable(16) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  %32 = load i32, i32* %10, align 4
  %33 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %3, i64 0, i32 0, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %34, %32
  br i1 %35, label %36, label %91

36:                                               ; preds = %4
  %37 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %3, i64 0, i32 0, i32 0, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = icmp ult i32 %38, %32
  br i1 %39, label %40, label %79

40:                                               ; preds = %36
  %41 = lshr i32 %38, 2
  %42 = add nuw i32 %38, 1
  %43 = add i32 %42, %41
  %44 = icmp ugt i32 %43, 4
  %45 = select i1 %44, i32 %43, i32 4
  %46 = icmp ugt i32 %45, %32
  %47 = select i1 %46, i32 %45, i32 %32
  %48 = icmp ult i32 %38, %47
  br i1 %48, label %49, label %79, !prof !4

49:                                               ; preds = %40
  %50 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %3, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %50, align 8
  %52 = icmp eq %"class.blink::FloatPolygonEdge"** %51, null
  %53 = zext i32 %47 to i64
  %54 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink16FloatPolygonEdgeEEEmm(i64 %53) #9
  %55 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %54, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink16FloatPolygonEdgeEEEPKcv, i64 0, i64 0)) #9
  br i1 %52, label %56, label %61

56:                                               ; preds = %49
  %57 = ptrtoint i8* %55 to i64
  %58 = bitcast %"class.WTF::Vector.5"* %3 to i64*
  store atomic i64 %57, i64* %58 monotonic, align 8
  %59 = lshr i64 %54, 3
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %37, align 8
  br label %79

61:                                               ; preds = %49
  %62 = lshr i64 %54, 3
  %63 = ptrtoint i8* %55 to i64
  %64 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %50, align 8
  %65 = icmp ne i8* %55, null
  %66 = icmp ne %"class.blink::FloatPolygonEdge"** %64, null
  %67 = and i1 %65, %66
  %68 = bitcast %"class.blink::FloatPolygonEdge"** %64 to i8*
  br i1 %67, label %69, label %75, !prof !4

69:                                               ; preds = %61
  %70 = load i32, i32* %33, align 4
  %71 = zext i32 %70 to i64
  %72 = shl nuw nsw i64 %71, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %55, i8* nonnull align 8 %68, i64 %72, i1 false) #9
  %73 = bitcast %"class.WTF::Vector.5"* %3 to i8**
  %74 = load i8*, i8** %73, align 8
  br label %75

75:                                               ; preds = %69, %61
  %76 = phi i8* [ %74, %69 ], [ %68, %61 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #9
  %77 = bitcast %"class.WTF::Vector.5"* %3 to i64*
  store atomic i64 %63, i64* %77 monotonic, align 8
  %78 = trunc i64 %62 to i32
  store i32 %78, i32* %37, align 8
  br label %79

79:                                               ; preds = %36, %40, %56, %75
  %80 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %3, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %80, align 8
  %82 = load i32, i32* %33, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %81, i64 %83
  %85 = zext i32 %32 to i64
  %86 = getelementptr inbounds %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %81, i64 %85
  %87 = bitcast %"class.blink::FloatPolygonEdge"** %84 to i8*
  %88 = ptrtoint %"class.blink::FloatPolygonEdge"** %86 to i64
  %89 = ptrtoint %"class.blink::FloatPolygonEdge"** %84 to i64
  %90 = sub i64 %88, %89
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 %90, i1 false) #9
  store i32 %32, i32* %33, align 4
  br label %93

91:                                               ; preds = %4
  store i32 %32, i32* %33, align 4
  %92 = icmp eq i32 %32, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %79, %91
  br label %105

94:                                               ; preds = %105, %91
  %95 = icmp ne i32 %32, 0
  %96 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %9, align 8
  %97 = icmp eq %"class.WTF::PODInterval"* %96, null
  %98 = bitcast %"class.WTF::PODInterval"* %96 to i8*
  br i1 %97, label %104, label %99, !prof !4

99:                                               ; preds = %94
  %100 = load i32, i32* %10, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %103, label %102, !prof !6

102:                                              ; preds = %99
  store i32 0, i32* %10, align 4
  br label %103

103:                                              ; preds = %102, %99
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %98) #9
  store %"class.WTF::PODInterval"* null, %"class.WTF::PODInterval"** %9, align 8
  br label %104

104:                                              ; preds = %94, %103
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #9
  ret i1 %95

105:                                              ; preds = %93, %105
  %106 = phi i32 [ %115, %105 ], [ 0, %93 ]
  %107 = call dereferenceable(24) %"class.WTF::PODInterval"* @_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.10"* nonnull %6, i32 %106) #9
  %108 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %107, i64 0, i32 2
  %109 = bitcast %"class.blink::FloatPolygonEdge"** %108 to i8*
  %110 = call i8* @llvm.ptr.annotation.p0i8(i8* %109, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0), i32 152) #9
  %111 = bitcast i8* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = call dereferenceable(8) %"class.blink::FloatPolygonEdge"** @_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %3, i32 %106) #9
  %114 = bitcast %"class.blink::FloatPolygonEdge"** %113 to i64*
  store i64 %112, i64* %114, align 8
  %115 = add nuw i32 %106, 1
  %116 = icmp eq i32 %115, %32
  br i1 %116, label %94, label %105
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink12FloatPolygon15ContainsEvenOddERKNS_10FloatPointE(%"class.blink::FloatPolygon"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 1
  %4 = tail call zeroext i1 @_ZNK5blink9FloatRect8ContainsERKNS_10FloatPointENS0_12ContainsModeE(%"class.blink::FloatRect"* %3, %"class.blink::FloatPoint"* dereferenceable(8) %1, i32 0) #9
  br i1 %4, label %5, label %98

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %94, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  br label %13

13:                                               ; preds = %9, %89
  %14 = phi i32 [ 0, %9 ], [ %91, %89 ]
  %15 = phi i32 [ 0, %9 ], [ %90, %89 ]
  %16 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %10, i32 %14) #9
  %17 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %16, i64 0, i32 4
  %18 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %16, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %18, i64 0, i32 0
  %22 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %21, i32 %20) #9
  %23 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %10, i32 %14) #9
  %24 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 4
  %25 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %25, i64 0, i32 0
  %29 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %28, i32 %27) #9
  %30 = load float, float* %11, align 4
  %31 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 0
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = fcmp olt float %34, %32
  %36 = select i1 %35, float %34, float %32
  %37 = fcmp ult float %30, %36
  br i1 %37, label %63, label %38

38:                                               ; preds = %13
  %39 = fcmp olt float %32, %34
  %40 = select i1 %39, float %34, float %32
  %41 = fcmp ugt float %30, %40
  br i1 %41, label %63, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = insertelement <2 x float> undef, float %34, i32 0
  %48 = insertelement <2 x float> %47, float %30, i32 1
  %49 = insertelement <2 x float> undef, float %32, i32 0
  %50 = shufflevector <2 x float> %49, <2 x float> undef, <2 x i32> zeroinitializer
  %51 = fsub <2 x float> %48, %50
  %52 = load float, float* %12, align 4
  %53 = insertelement <2 x float> undef, float %52, i32 0
  %54 = insertelement <2 x float> %53, float %44, i32 1
  %55 = insertelement <2 x float> undef, float %46, i32 0
  %56 = shufflevector <2 x float> %55, <2 x float> undef, <2 x i32> zeroinitializer
  %57 = fsub <2 x float> %54, %56
  %58 = fmul <2 x float> %51, %57
  %59 = extractelement <2 x float> %58, i32 0
  %60 = extractelement <2 x float> %58, i32 1
  %61 = fsub float %59, %60
  %62 = fcmp oeq float %61, 0.000000e+00
  br i1 %62, label %98, label %63

63:                                               ; preds = %13, %38, %42
  %64 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  %65 = load float, float* %64, align 4
  %66 = load float, float* %12, align 4
  %67 = fcmp ugt float %65, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 1
  %70 = load float, float* %69, align 4
  %71 = fcmp ogt float %70, %66
  br i1 %71, label %78, label %72

72:                                               ; preds = %63, %68
  %73 = fcmp ogt float %65, %66
  br i1 %73, label %74, label %89

74:                                               ; preds = %72
  %75 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 1
  %76 = load float, float* %75, align 4
  %77 = fcmp ugt float %76, %66
  br i1 %77, label %89, label %78

78:                                               ; preds = %74, %68
  %79 = phi float [ %76, %74 ], [ %70, %68 ]
  %80 = fsub float %66, %65
  %81 = fsub float %79, %65
  %82 = fdiv float %80, %81
  %83 = fsub float %34, %32
  %84 = fmul float %83, %82
  %85 = fadd float %32, %84
  %86 = fcmp olt float %30, %85
  %87 = zext i1 %86 to i32
  %88 = add i32 %15, %87
  br label %89

89:                                               ; preds = %78, %74, %72
  %90 = phi i32 [ %88, %78 ], [ %15, %72 ], [ %15, %74 ]
  %91 = add nuw i32 %14, 1
  %92 = load i32, i32* %6, align 4
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %13, label %94

94:                                               ; preds = %89, %5
  %95 = phi i32 [ 0, %5 ], [ %90, %89 ]
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br label %98

98:                                               ; preds = %42, %94, %2
  %99 = phi i1 [ false, %2 ], [ %97, %94 ], [ true, %42 ]
  ret i1 %99
}

declare zeroext i1 @_ZNK5blink9FloatRect8ContainsERKNS_10FloatPointENS0_12ContainsModeE(%"class.blink::FloatRect"*, %"class.blink::FloatPoint"* dereferenceable(8), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink12FloatPolygon15ContainsNonZeroERKNS_10FloatPointE(%"class.blink::FloatPolygon"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 1
  %4 = tail call zeroext i1 @_ZNK5blink9FloatRect8ContainsERKNS_10FloatPointENS0_12ContainsModeE(%"class.blink::FloatRect"* %3, %"class.blink::FloatPoint"* dereferenceable(8) %1, i32 0) #9
  br i1 %4, label %5, label %122

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %119, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  br label %13

13:                                               ; preds = %9, %114
  %14 = phi i32 [ 0, %9 ], [ %116, %114 ]
  %15 = phi i32 [ 0, %9 ], [ %115, %114 ]
  %16 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %10, i32 %14) #9
  %17 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %16, i64 0, i32 4
  %18 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %16, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %18, i64 0, i32 0
  %22 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %21, i32 %20) #9
  %23 = tail call dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %10, i32 %14) #9
  %24 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 4
  %25 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %25, i64 0, i32 0
  %29 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %28, i32 %27) #9
  %30 = load float, float* %11, align 4
  %31 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 0
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = fcmp olt float %34, %32
  %36 = select i1 %35, float %34, float %32
  %37 = fcmp ult float %30, %36
  br i1 %37, label %63, label %38

38:                                               ; preds = %13
  %39 = fcmp olt float %32, %34
  %40 = select i1 %39, float %34, float %32
  %41 = fcmp ugt float %30, %40
  br i1 %41, label %63, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = insertelement <2 x float> undef, float %34, i32 0
  %48 = insertelement <2 x float> %47, float %30, i32 1
  %49 = insertelement <2 x float> undef, float %32, i32 0
  %50 = shufflevector <2 x float> %49, <2 x float> undef, <2 x i32> zeroinitializer
  %51 = fsub <2 x float> %48, %50
  %52 = load float, float* %12, align 4
  %53 = insertelement <2 x float> undef, float %52, i32 0
  %54 = insertelement <2 x float> %53, float %44, i32 1
  %55 = insertelement <2 x float> undef, float %46, i32 0
  %56 = shufflevector <2 x float> %55, <2 x float> undef, <2 x i32> zeroinitializer
  %57 = fsub <2 x float> %54, %56
  %58 = fmul <2 x float> %51, %57
  %59 = extractelement <2 x float> %58, i32 0
  %60 = extractelement <2 x float> %58, i32 1
  %61 = fsub float %59, %60
  %62 = fcmp oeq float %61, 0.000000e+00
  br i1 %62, label %122, label %63

63:                                               ; preds = %13, %38, %42
  %64 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %29, i64 0, i32 1
  %65 = load float, float* %64, align 4
  %66 = load float, float* %12, align 4
  %67 = fcmp ugt float %65, %66
  br i1 %67, label %90, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  %70 = load float, float* %69, align 4
  %71 = fcmp ogt float %70, %66
  br i1 %71, label %72, label %114

72:                                               ; preds = %68
  %73 = insertelement <2 x float> undef, float %30, i32 0
  %74 = insertelement <2 x float> %73, float %34, i32 1
  %75 = insertelement <2 x float> undef, float %32, i32 0
  %76 = shufflevector <2 x float> %75, <2 x float> undef, <2 x i32> zeroinitializer
  %77 = fsub <2 x float> %74, %76
  %78 = insertelement <2 x float> undef, float %65, i32 0
  %79 = insertelement <2 x float> %78, float %66, i32 1
  %80 = insertelement <2 x float> undef, float %70, i32 0
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <2 x i32> zeroinitializer
  %82 = fsub <2 x float> %79, %81
  %83 = fmul <2 x float> %77, %82
  %84 = extractelement <2 x float> %83, i32 0
  %85 = extractelement <2 x float> %83, i32 1
  %86 = fsub float %84, %85
  %87 = fcmp ogt float %86, 0.000000e+00
  br i1 %87, label %88, label %114

88:                                               ; preds = %72
  %89 = add nsw i32 %15, 1
  br label %114

90:                                               ; preds = %63
  %91 = fcmp ult float %65, %66
  br i1 %91, label %114, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  %94 = load float, float* %93, align 4
  %95 = fcmp ugt float %94, %66
  br i1 %95, label %114, label %96

96:                                               ; preds = %92
  %97 = insertelement <2 x float> undef, float %30, i32 0
  %98 = insertelement <2 x float> %97, float %34, i32 1
  %99 = insertelement <2 x float> undef, float %32, i32 0
  %100 = shufflevector <2 x float> %99, <2 x float> undef, <2 x i32> zeroinitializer
  %101 = fsub <2 x float> %98, %100
  %102 = insertelement <2 x float> undef, float %65, i32 0
  %103 = insertelement <2 x float> %102, float %66, i32 1
  %104 = insertelement <2 x float> undef, float %94, i32 0
  %105 = shufflevector <2 x float> %104, <2 x float> undef, <2 x i32> zeroinitializer
  %106 = fsub <2 x float> %103, %105
  %107 = fmul <2 x float> %101, %106
  %108 = extractelement <2 x float> %107, i32 0
  %109 = extractelement <2 x float> %107, i32 1
  %110 = fsub float %108, %109
  %111 = fcmp olt float %110, 0.000000e+00
  br i1 %111, label %112, label %114

112:                                              ; preds = %96
  %113 = add nsw i32 %15, -1
  br label %114

114:                                              ; preds = %92, %90, %112, %96, %68, %72, %88
  %115 = phi i32 [ %15, %90 ], [ %15, %92 ], [ %15, %96 ], [ %113, %112 ], [ %15, %68 ], [ %15, %72 ], [ %89, %88 ]
  %116 = add nuw i32 %14, 1
  %117 = load i32, i32* %6, align 4
  %118 = icmp ult i32 %116, %117
  br i1 %118, label %13, label %119

119:                                              ; preds = %114, %5
  %120 = phi i32 [ 0, %5 ], [ %115, %114 ]
  %121 = icmp ne i32 %120, 0
  br label %122

122:                                              ; preds = %42, %119, %2
  %123 = phi i1 [ false, %2 ], [ %121, %119 ], [ true, %42 ]
  ret i1 %123
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink10VertexPair12IntersectionERKS0_RNS_10FloatPointE(%"class.blink::VertexPair"*, %"class.blink::VertexPair"* dereferenceable(8), %"class.blink::FloatPoint"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::VertexPair"* %0 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %5 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %5, i64 3
  %7 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %6, align 8
  %8 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %7(%"class.blink::VertexPair"* %0) #9
  %9 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %4, align 8
  %10 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %9, i64 2
  %11 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %10, align 8
  %12 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %11(%"class.blink::VertexPair"* %0) #9
  %13 = bitcast %"class.blink::FloatPoint"* %8 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = bitcast %"class.blink::FloatPoint"* %12 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = fsub <2 x float> %14, %16
  %18 = bitcast %"class.blink::VertexPair"* %1 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %19 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %19, i64 3
  %21 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %20, align 8
  %22 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %21(%"class.blink::VertexPair"* %1) #9
  %23 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %18, align 8
  %24 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %23, i64 2
  %25 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %24, align 8
  %26 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %25(%"class.blink::VertexPair"* %1) #9
  %27 = bitcast %"class.blink::FloatPoint"* %22 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = bitcast %"class.blink::FloatPoint"* %26 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = fsub <2 x float> %28, %30
  %32 = shufflevector <2 x float> %17, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %33 = fmul <2 x float> %32, %31
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = fsub float %35, %34
  %37 = fcmp une float %36, 0.000000e+00
  br i1 %37, label %38, label %93

38:                                               ; preds = %3
  %39 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %4, align 8
  %40 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %39, i64 2
  %41 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %40, align 8
  %42 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %41(%"class.blink::VertexPair"* %0) #9
  %43 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %18, align 8
  %44 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %43, i64 2
  %45 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %44, align 8
  %46 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %45(%"class.blink::VertexPair"* %1) #9
  %47 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %42, i64 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %46, i64 0, i32 0
  %50 = load float, float* %49, align 4
  %51 = fsub float %48, %50
  %52 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %42, i64 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %46, i64 0, i32 1
  %55 = load float, float* %54, align 4
  %56 = fsub float %53, %55
  %57 = extractelement <2 x float> %31, i32 0
  %58 = insertelement <2 x float> undef, float %57, i32 0
  %59 = insertelement <2 x float> %58, float %56, i32 1
  %60 = insertelement <2 x float> undef, float %56, i32 0
  %61 = shufflevector <2 x float> %60, <2 x float> %17, <2 x i32> <i32 0, i32 2>
  %62 = fmul <2 x float> %59, %61
  %63 = extractelement <2 x float> %31, i32 1
  %64 = insertelement <2 x float> undef, float %63, i32 0
  %65 = insertelement <2 x float> %64, float %51, i32 1
  %66 = insertelement <2 x float> %17, float %51, i32 0
  %67 = fmul <2 x float> %65, %66
  %68 = fsub <2 x float> %62, %67
  %69 = insertelement <2 x float> undef, float %36, i32 0
  %70 = shufflevector <2 x float> %69, <2 x float> undef, <2 x i32> zeroinitializer
  %71 = fdiv <2 x float> %68, %70
  %72 = fcmp olt <2 x float> %71, zeroinitializer
  %73 = extractelement <2 x i1> %72, i32 0
  %74 = extractelement <2 x i1> %72, i32 1
  %75 = or i1 %73, %74
  %76 = extractelement <2 x float> %71, i32 0
  %77 = fcmp ogt float %76, 1.000000e+00
  %78 = or i1 %77, %75
  %79 = extractelement <2 x float> %71, i32 1
  %80 = fcmp ogt float %79, 1.000000e+00
  %81 = or i1 %80, %78
  br i1 %81, label %93, label %82

82:                                               ; preds = %38
  %83 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %4, align 8
  %84 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %83, i64 2
  %85 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %84, align 8
  %86 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %85(%"class.blink::VertexPair"* %0) #9
  %87 = shufflevector <2 x float> %71, <2 x float> undef, <2 x i32> zeroinitializer
  %88 = fmul <2 x float> %17, %87
  %89 = bitcast %"class.blink::FloatPoint"* %86 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 4
  %91 = fadd <2 x float> %88, %90
  %92 = bitcast %"class.blink::FloatPoint"* %2 to <2 x float>*
  store <2 x float> %91, <2 x float>* %92, align 4
  br label %93

93:                                               ; preds = %82, %38, %3
  %94 = phi i1 [ false, %3 ], [ true, %82 ], [ false, %38 ]
  ret i1 %94
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPoint"*, %"class.blink::FloatPoint"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %24, i64 %25
  ret %"class.blink::FloatPoint"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZNK3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %24, i64 %25
  ret %"class.blink::FloatPolygonEdge"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.WTF::PODFreeListArena"*, %"class.WTF::PODFreeListArena"** %3, align 8
  %5 = icmp eq %"class.WTF::PODFreeListArena"* %4, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %7) #9
  %8 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %79

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %12, i64 2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.WTF::PODArena"**
  %15 = load %"class.WTF::PODArena"*, %"class.WTF::PODArena"** %14, align 8
  %16 = icmp eq %"class.WTF::PODArena"* %15, null
  br i1 %16, label %77, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %18) #9
  %19 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %77

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 4
  %24 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %24, align 8
  %26 = icmp eq %"class.std::__1::unique_ptr"* %25, null
  br i1 %26, label %58, label %27, !prof !4

27:                                               ; preds = %22
  %28 = bitcast %"class.std::__1::unique_ptr"* %25 to i8*
  %29 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 4, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %56, label %32, !prof !6

32:                                               ; preds = %27
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 %33
  br label %35

35:                                               ; preds = %50, %32
  %36 = phi %"class.std::__1::unique_ptr"* [ %51, %50 ], [ %25, %32 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::PODArena::Chunk"*, %"class.WTF::PODArena::Chunk"** %37, align 8
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %37, align 8
  %39 = icmp eq %"class.WTF::PODArena::Chunk"* %38, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %38, i64 0, i32 0
  %42 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %38, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = bitcast %"class.WTF::PODArena::Allocator"* %42 to void (%"class.WTF::PODArena::Allocator"*, i8*)***
  %46 = load void (%"class.WTF::PODArena::Allocator"*, i8*)**, void (%"class.WTF::PODArena::Allocator"*, i8*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %46, i64 1
  %48 = load void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %47, align 8
  tail call void %48(%"class.WTF::PODArena::Allocator"* %42, i8* %44) #9
  %49 = bitcast %"class.WTF::PODArena::Chunk"* %38 to i8*
  tail call void @free(i8* %49) #9
  br label %50

50:                                               ; preds = %40, %35
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 1
  %52 = icmp eq %"class.std::__1::unique_ptr"* %51, %34
  br i1 %52, label %53, label %35

53:                                               ; preds = %50
  store i32 0, i32* %29, align 4
  %54 = bitcast %"class.WTF::Vector.21"* %23 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %53, %27
  %57 = phi i8* [ %55, %53 ], [ %28, %27 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #9
  store %"class.std::__1::unique_ptr"* null, %"class.std::__1::unique_ptr"** %24, align 8
  br label %58

58:                                               ; preds = %56, %22
  %59 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 1, i32 0
  %60 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %59, align 8
  %61 = icmp eq %"class.WTF::PODArena::Allocator"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.WTF::PODArena::Allocator", %"class.WTF::PODArena::Allocator"* %60, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %"class.base::RefCounted.20", %"class.base::RefCounted.20"* %63, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %64) #9
  %65 = getelementptr inbounds %"class.base::RefCounted.20", %"class.base::RefCounted.20"* %63, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %75

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.base::RefCounted.20", %"class.base::RefCounted.20"* %63, i64 -2
  %70 = bitcast %"class.base::RefCounted.20"* %69 to %"class.WTF::PODArena::Allocator"*
  %71 = bitcast %"class.base::RefCounted.20"* %69 to void (%"class.WTF::PODArena::Allocator"*)***
  %72 = load void (%"class.WTF::PODArena::Allocator"*)**, void (%"class.WTF::PODArena::Allocator"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.WTF::PODArena::Allocator"*)*, void (%"class.WTF::PODArena::Allocator"*)** %72, i64 3
  %74 = load void (%"class.WTF::PODArena::Allocator"*)*, void (%"class.WTF::PODArena::Allocator"*)** %73, align 8
  tail call void %74(%"class.WTF::PODArena::Allocator"* nonnull %70) #9
  br label %75

75:                                               ; preds = %58, %62, %68
  %76 = bitcast %"class.WTF::PODArena"* %15 to i8*
  tail call void @free(i8* %76) #9
  br label %77

77:                                               ; preds = %75, %17, %11
  %78 = bitcast %"class.WTF::PODFreeListArena"* %4 to i8*
  tail call void @free(i8* %78) #9
  br label %79

79:                                               ; preds = %1, %6, %77
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEED0Ev(%"class.WTF::PODIntervalTree"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.WTF::PODIntervalTree"* %0 to %"class.WTF::PODRedBlackTree"*
  tail call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"* %2) #9
  %3 = bitcast %"class.WTF::PODIntervalTree"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE15CheckInvariantsEv(%"class.WTF::PODIntervalTree"*) unnamed_addr #3 comdat align 2 {
  %2 = alloca i32, align 4
  %3 = bitcast %"class.WTF::PODIntervalTree"* %0 to %"class.WTF::PODRedBlackTree"*
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store i32 -1431655766, i32* %2, align 4
  %5 = getelementptr inbounds %"class.WTF::PODIntervalTree", %"class.WTF::PODIntervalTree"* %0, i64 0, i32 0, i32 2
  %6 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %5, align 8
  %7 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %3, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %6, i32* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %5, align 8
  %10 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  %12 = call zeroext i1 @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE23CheckInvariantsFromNodeEPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* nonnull %9)
  br label %13

13:                                               ; preds = %8, %1, %11
  %14 = phi i1 [ %12, %11 ], [ false, %1 ], [ true, %8 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE10UpdateNodeEPNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE(%"class.WTF::PODIntervalTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5, i32 1
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5, i32 0
  %7 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 1
  %8 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %7, align 8
  %9 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %8, null
  %10 = bitcast i32 %5 to float
  br i1 %9, label %19, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %8, i64 0, i32 5, i32 3
  %13 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %8, i64 0, i32 5, i32 4
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %14, %10
  %16 = bitcast float %14 to i32
  %17 = select i1 %15, i32 %16, i32 %5
  %18 = bitcast i32 %17 to float
  br label %19

19:                                               ; preds = %2, %11
  %20 = phi i32 [ %5, %2 ], [ %17, %11 ]
  %21 = phi float [ %10, %2 ], [ %18, %11 ]
  %22 = phi float* [ %6, %2 ], [ %12, %11 ]
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 2
  %25 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %24, align 8
  %26 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %25, i64 0, i32 5, i32 4
  %29 = load float, float* %28, align 4
  %30 = fcmp olt float %21, %29
  %31 = select i1 %30, float %29, float %21
  %32 = bitcast float %31 to i32
  br label %33

33:                                               ; preds = %19, %27
  %34 = phi i32 [ %20, %19 ], [ %32, %27 ]
  %35 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5, i32 3
  %36 = load float, float* %35, align 4
  %37 = fcmp oeq float %36, %23
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  store float %23, float* %35, align 8
  br label %39

39:                                               ; preds = %38, %33
  %40 = phi i1 [ false, %33 ], [ true, %38 ]
  %41 = bitcast i32 %34 to float
  %42 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5, i32 4
  %43 = load float, float* %42, align 4
  %44 = fcmp oeq float %43, %41
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = bitcast float* %42 to i32*
  store i32 %34, i32* %46, align 4
  br label %47

47:                                               ; preds = %45, %39
  %48 = phi i1 [ %40, %39 ], [ true, %45 ]
  ret i1 %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev(%"class.WTF::PODRedBlackTree"*) unnamed_addr #3 comdat align 2 {
  tail call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"* %0) #9
  %2 = bitcast %"class.WTF::PODRedBlackTree"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv(%"class.WTF::PODRedBlackTree"*) unnamed_addr #3 comdat align 2 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store i32 -1431655766, i32* %2, align 4
  %4 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 2
  %5 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %4, align 8
  %6 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %5, i32* nonnull %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE(%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #3 comdat align 2 {
  ret i1 false
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN3WTF8PODArena19FastMallocAllocator8AllocateEm(%"class.WTF::PODArena::FastMallocAllocator"*, i64) unnamed_addr #3 comdat align 2 {
  %3 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 %1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_8PODArenaEEEPKcv, i64 0, i64 0)) #9
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF8PODArena19FastMallocAllocator4FreeEPv(%"class.WTF::PODArena::FastMallocAllocator"*, i8*) unnamed_addr #3 comdat align 2 {
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF8PODArena9AllocatorD2Ev(%"class.WTF::PODArena::Allocator"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF8PODArena19FastMallocAllocatorD0Ev(%"class.WTF::PODArena::FastMallocAllocator"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.WTF::PODArena::FastMallocAllocator"* %0 to i8*
  tail call void @free(i8* %2) #9
  ret void
}

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i32*) local_unnamed_addr #3 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  store i32 1, i32* %2, align 4
  br label %49

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %49 [
    i32 1, label %14
    i32 2, label %11
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 1
  %13 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %12, align 8
  br label %30

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 1
  %16 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %15, align 8
  %17 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %16, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %49

22:                                               ; preds = %14, %18
  %23 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 2
  %24 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %23, align 8
  %25 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %24, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %49

30:                                               ; preds = %11, %22, %26
  %31 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %13, %11 ], [ %16, %22 ], [ %16, %26 ]
  %32 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #9
  store i32 0, i32* %4, align 4
  %33 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #9
  store i32 0, i32* %5, align 4
  %34 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %31, i32* nonnull %4)
  %35 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 2
  %36 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %35, align 8
  %37 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %36, i32* nonnull %5)
  %38 = and i1 %34, %37
  br i1 %38, label %39, label %47

39:                                               ; preds = %30
  %40 = load i32, i32* %4, align 4
  %41 = load i32, i32* %9, align 8
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i32
  %44 = add nsw i32 %40, %43
  store i32 %44, i32* %2, align 4
  %45 = load i32, i32* %5, align 4
  %46 = icmp eq i32 %40, %45
  br label %47

47:                                               ; preds = %30, %39
  %48 = phi i1 [ %46, %39 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #9
  br label %49

49:                                               ; preds = %8, %26, %18, %47, %7
  %50 = phi i1 [ %48, %47 ], [ true, %7 ], [ false, %18 ], [ false, %26 ], [ false, %8 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE23CheckInvariantsFromNodeEPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 1
  %4 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 2
  %6 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 0
  %8 = load float, float* %7, align 4
  %9 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 1
  %11 = bitcast float* %10 to i32*
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %2, align 4
  %13 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %4, null
  %14 = bitcast i32 %12 to float
  br i1 %13, label %35, label %15

15:                                               ; preds = %1
  %16 = tail call zeroext i1 @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE23CheckInvariantsFromNodeEPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* nonnull %4)
  br i1 %16, label %17, label %71

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %4, i64 0, i32 5, i32 3
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 3
  %21 = load float, float* %20, align 4
  %22 = fcmp oeq float %19, %21
  br i1 %22, label %23, label %71

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 4
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %4, i64 0, i32 5, i32 4
  %27 = load float, float* %26, align 4
  %28 = fcmp olt float %25, %27
  br i1 %28, label %71, label %29

29:                                               ; preds = %23
  %30 = fcmp ogt float %27, %14
  %31 = bitcast float* %26 to i32*
  %32 = select i1 %30, i32* %31, i32* %2
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %2, align 4
  %34 = bitcast i32 %33 to float
  br label %35

35:                                               ; preds = %1, %29
  %36 = phi float [ %34, %29 ], [ %14, %1 ]
  %37 = phi float [ %19, %29 ], [ %8, %1 ]
  %38 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %6, null
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 3
  %41 = load float, float* %40, align 4
  br label %62

42:                                               ; preds = %35
  %43 = tail call zeroext i1 @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE23CheckInvariantsFromNodeEPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeE(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* nonnull %6)
  br i1 %43, label %44, label %71

44:                                               ; preds = %42
  %45 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %6, i64 0, i32 5, i32 3
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 3
  %48 = load float, float* %47, align 4
  %49 = fcmp olt float %46, %48
  br i1 %49, label %71, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 4
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %6, i64 0, i32 5, i32 4
  %54 = load float, float* %53, align 4
  %55 = fcmp olt float %52, %54
  br i1 %55, label %71, label %56

56:                                               ; preds = %50
  %57 = fcmp olt float %36, %54
  %58 = bitcast float* %53 to i32*
  %59 = select i1 %57, i32* %58, i32* %2
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %2, align 4
  %61 = bitcast i32 %60 to float
  br label %62

62:                                               ; preds = %39, %56
  %63 = phi float [ %36, %39 ], [ %61, %56 ]
  %64 = phi float [ %41, %39 ], [ %48, %56 ]
  %65 = fcmp oeq float %37, %64
  br i1 %65, label %66, label %71

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5, i32 4
  %68 = load float, float* %67, align 4
  %69 = fcmp oeq float %63, %68
  br i1 %69, label %71, label %70

70:                                               ; preds = %66
  br label %71

71:                                               ; preds = %62, %50, %44, %23, %17, %66, %42, %15, %70
  %72 = phi i1 [ false, %70 ], [ false, %15 ], [ false, %42 ], [ true, %66 ], [ false, %17 ], [ false, %23 ], [ false, %44 ], [ false, %50 ], [ false, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %72
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10VertexPairD2Ev(%"class.blink::VertexPair"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %66

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %64, label %14

14:                                               ; preds = %4
  %15 = shl nuw nsw i64 %9, 5
  %16 = add nsw i64 %15, -32
  %17 = lshr exact i64 %16, 5
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 3
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %14, %21
  %22 = phi %"class.blink::FloatPolygonEdge"* [ %31, %21 ], [ %6, %14 ]
  %23 = phi %"class.blink::FloatPolygonEdge"* [ %30, %21 ], [ null, %14 ]
  %24 = phi i64 [ %32, %21 ], [ %19, %14 ]
  %25 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 0, i32 1
  %27 = bitcast i32* %26 to i8*
  %28 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %22, i64 0, i32 1
  %29 = bitcast i32* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %29, i64 24, i1 false) #9
  %30 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %23, i64 1
  %31 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %22, i64 1
  %32 = add i64 %24, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %21, !llvm.loop !7

34:                                               ; preds = %21, %14
  %35 = phi %"class.blink::FloatPolygonEdge"* [ %6, %14 ], [ %31, %21 ]
  %36 = phi %"class.blink::FloatPolygonEdge"* [ null, %14 ], [ %30, %21 ]
  %37 = icmp ult i64 %16, 96
  br i1 %37, label %64, label %38

38:                                               ; preds = %34, %38
  %39 = phi %"class.blink::FloatPolygonEdge"* [ %62, %38 ], [ %35, %34 ]
  %40 = phi %"class.blink::FloatPolygonEdge"* [ %61, %38 ], [ %36, %34 ]
  %41 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %41, align 8
  %42 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 0, i32 1
  %43 = bitcast i32* %42 to i8*
  %44 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %39, i64 0, i32 1
  %45 = bitcast i32* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %45, i64 24, i1 false) #9
  %46 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %46, align 8
  %47 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 1, i32 1
  %48 = bitcast i32* %47 to i8*
  %49 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %39, i64 1, i32 1
  %50 = bitcast i32* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %50, i64 24, i1 false) #9
  %51 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %51, align 8
  %52 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 2, i32 1
  %53 = bitcast i32* %52 to i8*
  %54 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %39, i64 2, i32 1
  %55 = bitcast i32* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %55, i64 24, i1 false) #9
  %56 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 3, i32 1
  %58 = bitcast i32* %57 to i8*
  %59 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %39, i64 3, i32 1
  %60 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %60, i64 24, i1 false) #9
  %61 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %40, i64 4
  %62 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %39, i64 4
  %63 = icmp eq %"class.blink::FloatPolygonEdge"* %62, %10
  br i1 %63, label %64, label %38

64:                                               ; preds = %34, %38, %4
  %65 = bitcast %"class.blink::FloatPolygonEdge"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %65) #9
  br label %140

66:                                               ; preds = %2
  %67 = zext i32 %1 to i64
  %68 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatPolygonEdgeEEEmm(i64 %67) #9
  %69 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %68, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatPolygonEdgeEEEPKcv, i64 0, i64 0)) #9
  %70 = lshr i64 %68, 5
  %71 = ptrtoint i8* %69 to i64
  %72 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %73 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %72, align 8
  %74 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %73, i64 %76
  %78 = icmp eq i32 %75, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %66
  %80 = bitcast %"class.blink::FloatPolygonEdge"* %73 to i8*
  br label %135

81:                                               ; preds = %66
  %82 = bitcast i8* %69 to %"class.blink::FloatPolygonEdge"*
  %83 = shl nuw nsw i64 %76, 5
  %84 = add nsw i64 %83, -32
  %85 = lshr exact i64 %84, 5
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 3
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %81, %89
  %90 = phi %"class.blink::FloatPolygonEdge"* [ %99, %89 ], [ %73, %81 ]
  %91 = phi %"class.blink::FloatPolygonEdge"* [ %98, %89 ], [ %82, %81 ]
  %92 = phi i64 [ %100, %89 ], [ %87, %81 ]
  %93 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %91, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %93, align 8
  %94 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %91, i64 0, i32 1
  %95 = bitcast i32* %94 to i8*
  %96 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %90, i64 0, i32 1
  %97 = bitcast i32* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %97, i64 24, i1 false) #9
  %98 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %91, i64 1
  %99 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %90, i64 1
  %100 = add i64 %92, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %89, !llvm.loop !8

102:                                              ; preds = %89, %81
  %103 = phi %"class.blink::FloatPolygonEdge"* [ %73, %81 ], [ %99, %89 ]
  %104 = phi %"class.blink::FloatPolygonEdge"* [ %82, %81 ], [ %98, %89 ]
  %105 = icmp ult i64 %84, 96
  br i1 %105, label %132, label %106

106:                                              ; preds = %102, %106
  %107 = phi %"class.blink::FloatPolygonEdge"* [ %130, %106 ], [ %103, %102 ]
  %108 = phi %"class.blink::FloatPolygonEdge"* [ %129, %106 ], [ %104, %102 ]
  %109 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 0, i32 1
  %111 = bitcast i32* %110 to i8*
  %112 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %107, i64 0, i32 1
  %113 = bitcast i32* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %113, i64 24, i1 false) #9
  %114 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %114, align 8
  %115 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 1, i32 1
  %116 = bitcast i32* %115 to i8*
  %117 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %107, i64 1, i32 1
  %118 = bitcast i32* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %118, i64 24, i1 false) #9
  %119 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %119, align 8
  %120 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 2, i32 1
  %121 = bitcast i32* %120 to i8*
  %122 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %107, i64 2, i32 1
  %123 = bitcast i32* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %123, i64 24, i1 false) #9
  %124 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16FloatPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %124, align 8
  %125 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 3, i32 1
  %126 = bitcast i32* %125 to i8*
  %127 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %107, i64 3, i32 1
  %128 = bitcast i32* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %128, i64 24, i1 false) #9
  %129 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %108, i64 4
  %130 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %107, i64 4
  %131 = icmp eq %"class.blink::FloatPolygonEdge"* %130, %77
  br i1 %131, label %132, label %106

132:                                              ; preds = %106, %102
  %133 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %134 = load i8*, i8** %133, align 8
  br label %135

135:                                              ; preds = %79, %132
  %136 = phi i8* [ %134, %132 ], [ %80, %79 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %136) #9
  %137 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %71, i64* %137 monotonic, align 8
  %138 = trunc i64 %70 to i32
  %139 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %138, i32* %139, align 8
  br label %140

140:                                              ; preds = %135, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatPolygonEdgeEEEmm(i64) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 67043328
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 67043328) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 5
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16FloatPolygonEdgeD0Ev(%"class.blink::FloatPolygonEdge"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.blink::FloatPolygonEdge"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.blink::FloatPolygonEdge"* @_ZN3WTF6VectorIN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %24, i64 %25
  ret %"class.blink::FloatPolygonEdge"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10InsertNodeEPNS6_4NodeE(%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 2
  %4 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %3, align 8
  %5 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5, i32 0
  %8 = load float, float* %7, align 4
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %4, %6 ], [ %17, %9 ]
  %11 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %10, i64 0, i32 5, i32 0
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %8, %12
  %14 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %10, i64 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %10, i64 0, i32 2
  %16 = select i1 %13, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %14, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %15
  %17 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %16, align 8
  %18 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %17, null
  br i1 %18, label %21, label %9

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* null, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %20, align 8
  br label %27

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %10, i64 0, i32 5, i32 0
  %23 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %10, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %23, align 8
  %24 = load float, float* %22, align 4
  %25 = fcmp olt float %8, %24
  %26 = select i1 %25, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %14, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %15
  br label %27

27:                                               ; preds = %21, %19
  %28 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %3, %19 ], [ %26, %21 ]
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 4
  store i32 1, i32* %29, align 8
  %30 = bitcast %"class.WTF::PODRedBlackTree"* %0 to i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)***
  %31 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %31, i64 3
  %33 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %32, align 8
  %34 = tail call zeroext i1 %33(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1) #9
  %35 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 3
  %36 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %35, align 8
  %37 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %3, align 8
  %38 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %37, %1
  br i1 %38, label %282, label %39

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %36, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %282

43:                                               ; preds = %39, %276
  %44 = phi i32* [ %279, %276 ], [ %40, %39 ]
  %45 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %272, %276 ], [ %1, %39 ]
  %46 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %278, %276 ], [ %36, %39 ]
  %47 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, i64 0, i32 3
  %48 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, i64 0, i32 3
  %49 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  %50 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %49, i64 0, i32 1
  %51 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %50, align 8
  %52 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, %51
  %53 = ptrtoint %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %49 to i64
  br i1 %52, label %54, label %163

54:                                               ; preds = %43
  %55 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %49, i64 0, i32 2
  %56 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %55, align 8
  %57 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %56, null
  br i1 %57, label %80, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %56, i64 0, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %80

62:                                               ; preds = %58
  store i32 2, i32* %44, align 8
  store i32 2, i32* %59, align 8
  %63 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %64 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %63, i64 0, i32 3
  %65 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %64, align 8
  %66 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %65, i64 0, i32 4
  store i32 1, i32* %66, align 8
  %67 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %68 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %69 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %68, i64 3
  %70 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %69, align 8
  %71 = tail call zeroext i1 %70(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %67) #9
  %72 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %73 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %72, i64 0, i32 3
  %74 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %73, align 8
  %75 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %76 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %75, i64 3
  %77 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %76, align 8
  %78 = tail call zeroext i1 %77(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %74) #9
  %79 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %74, i64 0, i32 3
  br label %270

80:                                               ; preds = %54, %58
  %81 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, i64 0, i32 2
  %82 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %81, align 8
  %83 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %82
  br i1 %83, label %84, label %117

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, i64 0, i32 1
  %86 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %81 to i64*
  store i64 %87, i64* %88, align 8
  %89 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %85, align 8
  %90 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %89, null
  br i1 %90, label %95, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %89, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %92, align 8
  %93 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48 to i64*
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %84, %91
  %96 = phi i64 [ %94, %91 ], [ %53, %84 ]
  %97 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47 to i64*
  store i64 %96, i64* %97, align 8
  %98 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  %99 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %98, null
  br i1 %99, label %106, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %98, i64 0, i32 1
  %102 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %101, align 8
  %103 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %102, %46
  %104 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %98, i64 0, i32 2
  %105 = select i1 %103, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %101, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %104
  br label %106

106:                                              ; preds = %100, %95
  %107 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %3, %95 ], [ %105, %100 ]
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %107, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %85, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  %108 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %109 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %108, i64 3
  %110 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %109, align 8
  %111 = tail call zeroext i1 %110(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46) #9
  %112 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %113 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %112, i64 3
  %114 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %113, align 8
  %115 = tail call zeroext i1 %114(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45) #9
  %116 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  br label %117

117:                                              ; preds = %106, %80
  %118 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %116, %106 ], [ %46, %80 ]
  %119 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %46, %106 ], [ %45, %80 ]
  %120 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %119, i64 0, i32 3
  %121 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %118, i64 0, i32 4
  store i32 2, i32* %121, align 8
  %122 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %120, align 8
  %123 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %122, i64 0, i32 3
  %124 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %123, align 8
  %125 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %124, i64 0, i32 4
  store i32 1, i32* %125, align 8
  %126 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %120, align 8
  %127 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %126, i64 0, i32 3
  %128 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %127, align 8
  %129 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %128, i64 0, i32 1
  %130 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %129, align 8
  %131 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %130, i64 0, i32 2
  %132 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %129 to i64*
  store i64 %133, i64* %134, align 8
  %135 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %131, align 8
  %136 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %135, null
  br i1 %136, label %139, label %137

137:                                              ; preds = %117
  %138 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %135, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %128, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %138, align 8
  br label %139

139:                                              ; preds = %137, %117
  %140 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %128, i64 0, i32 3
  %141 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %130, i64 0, i32 3
  %144 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %143 to i64*
  store i64 %142, i64* %144, align 8
  %145 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %140, align 8
  %146 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %145, null
  br i1 %146, label %153, label %147

147:                                              ; preds = %139
  %148 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %145, i64 0, i32 1
  %149 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %148, align 8
  %150 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %149, %128
  %151 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %145, i64 0, i32 2
  %152 = select i1 %150, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %148, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %151
  br label %153

153:                                              ; preds = %147, %139
  %154 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %3, %139 ], [ %152, %147 ]
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %130, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %154, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %128, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %131, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %130, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %140, align 8
  %155 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %156 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %155, i64 3
  %157 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %156, align 8
  %158 = tail call zeroext i1 %157(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %128) #9
  %159 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %160 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %159, i64 3
  %161 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %160, align 8
  %162 = tail call zeroext i1 %161(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %130) #9
  br label %270

163:                                              ; preds = %43
  %164 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %51, null
  br i1 %164, label %187, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %51, i64 0, i32 4
  %167 = load i32, i32* %166, align 8
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %187

169:                                              ; preds = %165
  store i32 2, i32* %44, align 8
  store i32 2, i32* %166, align 8
  %170 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %171 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %170, i64 0, i32 3
  %172 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %171, align 8
  %173 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %172, i64 0, i32 4
  store i32 1, i32* %173, align 8
  %174 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %175 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %176 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %175, i64 3
  %177 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %176, align 8
  %178 = tail call zeroext i1 %177(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %174) #9
  %179 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47, align 8
  %180 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %179, i64 0, i32 3
  %181 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %180, align 8
  %182 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %183 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %182, i64 3
  %184 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %183, align 8
  %185 = tail call zeroext i1 %184(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %181) #9
  %186 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %181, i64 0, i32 3
  br label %270

187:                                              ; preds = %163, %165
  %188 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, i64 0, i32 1
  %189 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %188, align 8
  %190 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %189
  br i1 %190, label %191, label %224

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, i64 0, i32 2
  %193 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %188 to i64*
  store i64 %194, i64* %195, align 8
  %196 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %192, align 8
  %197 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %196, null
  br i1 %197, label %202, label %198

198:                                              ; preds = %191
  %199 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %196, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %199, align 8
  %200 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48 to i64*
  %201 = load i64, i64* %200, align 8
  br label %202

202:                                              ; preds = %191, %198
  %203 = phi i64 [ %201, %198 ], [ %53, %191 ]
  %204 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %47 to i64*
  store i64 %203, i64* %204, align 8
  %205 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  %206 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %205, null
  br i1 %206, label %213, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %205, i64 0, i32 1
  %209 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %208, align 8
  %210 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %209, %46
  %211 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %205, i64 0, i32 2
  %212 = select i1 %210, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %208, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %211
  br label %213

213:                                              ; preds = %207, %202
  %214 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %3, %202 ], [ %212, %207 ]
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %214, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %192, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  %215 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %216 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %215, i64 3
  %217 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %216, align 8
  %218 = tail call zeroext i1 %217(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %46) #9
  %219 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %220 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %219, i64 3
  %221 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %220, align 8
  %222 = tail call zeroext i1 %221(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %45) #9
  %223 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %48, align 8
  br label %224

224:                                              ; preds = %213, %187
  %225 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %223, %213 ], [ %46, %187 ]
  %226 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %46, %213 ], [ %45, %187 ]
  %227 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %226, i64 0, i32 3
  %228 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %225, i64 0, i32 4
  store i32 2, i32* %228, align 8
  %229 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %227, align 8
  %230 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %229, i64 0, i32 3
  %231 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %230, align 8
  %232 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %231, i64 0, i32 4
  store i32 1, i32* %232, align 8
  %233 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %227, align 8
  %234 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %233, i64 0, i32 3
  %235 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %234, align 8
  %236 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %235, i64 0, i32 2
  %237 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %236, align 8
  %238 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %237, i64 0, i32 1
  %239 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %236 to i64*
  store i64 %240, i64* %241, align 8
  %242 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %238, align 8
  %243 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %242, null
  br i1 %243, label %246, label %244

244:                                              ; preds = %224
  %245 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %242, i64 0, i32 3
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %235, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %245, align 8
  br label %246

246:                                              ; preds = %244, %224
  %247 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %235, i64 0, i32 3
  %248 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %247 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %237, i64 0, i32 3
  %251 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %250 to i64*
  store i64 %249, i64* %251, align 8
  %252 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %247, align 8
  %253 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %252, null
  br i1 %253, label %260, label %254

254:                                              ; preds = %246
  %255 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %252, i64 0, i32 1
  %256 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %255, align 8
  %257 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %256, %235
  %258 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %252, i64 0, i32 2
  %259 = select i1 %257, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %255, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %258
  br label %260

260:                                              ; preds = %254, %246
  %261 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %3, %246 ], [ %259, %254 ]
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %237, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %261, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %235, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %238, align 8
  store %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %237, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %247, align 8
  %262 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %263 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %262, i64 3
  %264 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %263, align 8
  %265 = tail call zeroext i1 %264(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %235) #9
  %266 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %267 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %266, i64 3
  %268 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %267, align 8
  %269 = tail call zeroext i1 %268(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %237) #9
  br label %270

270:                                              ; preds = %169, %260, %62, %153
  %271 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** [ %79, %62 ], [ %143, %153 ], [ %186, %169 ], [ %250, %260 ]
  %272 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %74, %62 ], [ %119, %153 ], [ %181, %169 ], [ %226, %260 ]
  %273 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %271, align 8
  %274 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %3, align 8
  %275 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %272, %274
  br i1 %275, label %282, label %276

276:                                              ; preds = %270
  %277 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %272, i64 0, i32 3
  %278 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %277, align 8
  %279 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %278, i64 0, i32 4
  %280 = load i32, i32* %279, align 8
  %281 = icmp eq i32 %280, 1
  br i1 %281, label %43, label %282

282:                                              ; preds = %270, %276, %39, %27
  %283 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %1, %27 ], [ %37, %39 ], [ %274, %276 ], [ %272, %270 ]
  %284 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %36, %27 ], [ %36, %39 ], [ %273, %276 ], [ %273, %270 ]
  %285 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %284, null
  br i1 %285, label %298, label %286

286:                                              ; preds = %282, %286
  %287 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %293, %286 ], [ %284, %282 ]
  %288 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)**, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*** %30, align 8
  %289 = getelementptr inbounds i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %288, i64 3
  %290 = load i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)*, i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)** %289, align 8
  %291 = tail call zeroext i1 %290(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* nonnull %287) #9
  %292 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %287, i64 0, i32 3
  %293 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %292, align 8
  %294 = icmp ne %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %293, null
  %295 = and i1 %291, %294
  br i1 %295, label %286, label %296

296:                                              ; preds = %286
  %297 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %3, align 8
  br label %298

298:                                              ; preds = %296, %282
  %299 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %297, %296 ], [ %283, %282 ]
  %300 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %299, i64 0, i32 4
  store i32 2, i32* %300, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD2Ev(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeD0Ev(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4Node8CopyFromEPS7_(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 5
  %4 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, i64 0, i32 5
  %5 = bitcast %"class.WTF::PODInterval"* %4 to i8*
  %6 = bitcast %"class.WTF::PODInterval"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN3WTF8PODArena12AllocateBaseINS_15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE4NodeEEEPvv(%"class.WTF::PODArena"*) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.std::__1::unique_ptr", align 8
  %3 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 2
  %4 = load %"class.WTF::PODArena::Chunk"*, %"class.WTF::PODArena::Chunk"** %3, align 8
  %5 = icmp eq %"class.WTF::PODArena::Chunk"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %4, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 64
  %10 = icmp ugt i64 %8, -65
  br i1 %10, label %20, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %4, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %9, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %4, i64 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %8
  store i64 %9, i64* %7, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %91

20:                                               ; preds = %11, %6, %1, %15
  %21 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 64
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  store i64 64, i64* %21, align 8
  br label %25

25:                                               ; preds = %24, %20
  %26 = phi i64 [ 64, %24 ], [ %22, %20 ]
  %27 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 4
  %28 = bitcast %"class.std::__1::unique_ptr"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  %29 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 1, i32 0
  %30 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %29, align 8
  %31 = tail call noalias i8* @malloc(i64 32) #9
  %32 = bitcast i8* %31 to %"class.WTF::PODArena::Allocator"**
  store %"class.WTF::PODArena::Allocator"* %30, %"class.WTF::PODArena::Allocator"** %32, align 8
  %33 = getelementptr inbounds i8, i8* %31, i64 16
  %34 = bitcast i8* %33 to i64*
  store i64 %26, i64* %34, align 8
  %35 = getelementptr inbounds i8, i8* %31, i64 24
  %36 = bitcast i8* %35 to i64*
  store i64 0, i64* %36, align 8
  %37 = bitcast %"class.WTF::PODArena::Allocator"* %30 to i8* (%"class.WTF::PODArena::Allocator"*, i64)***
  %38 = load i8* (%"class.WTF::PODArena::Allocator"*, i64)**, i8* (%"class.WTF::PODArena::Allocator"*, i64)*** %37, align 8
  %39 = load i8* (%"class.WTF::PODArena::Allocator"*, i64)*, i8* (%"class.WTF::PODArena::Allocator"*, i64)** %38, align 8
  %40 = tail call i8* %39(%"class.WTF::PODArena::Allocator"* %30, i64 %26) #9
  %41 = getelementptr inbounds i8, i8* %31, i64 8
  %42 = bitcast i8* %41 to i8**
  store i8* %40, i8** %42, align 8
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %44 = bitcast %"class.std::__1::unique_ptr"* %2 to i8**
  store i8* %31, i8** %44, align 8
  %45 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %59, label %50, !prof !6

50:                                               ; preds = %25
  %51 = ptrtoint i8* %31 to i64
  %52 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %27, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %52, align 8
  %54 = zext i32 %46 to i64
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %53, i64 %54
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %43, align 8
  %56 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  store i64 %51, i64* %56, align 8
  %57 = load i32, i32* %45, align 4
  %58 = add i32 %57, 1
  store i32 %58, i32* %45, align 4
  br label %60

59:                                               ; preds = %25
  call void @_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_(%"class.WTF::Vector.21"* %27, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %2) #9
  br label %60

60:                                               ; preds = %50, %59
  %61 = load %"class.WTF::PODArena::Chunk"*, %"class.WTF::PODArena::Chunk"** %43, align 8
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %43, align 8
  %62 = icmp eq %"class.WTF::PODArena::Chunk"* %61, null
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %61, i64 0, i32 0
  %65 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %64, align 8
  %66 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %61, i64 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.WTF::PODArena::Allocator"* %65 to void (%"class.WTF::PODArena::Allocator"*, i8*)***
  %69 = load void (%"class.WTF::PODArena::Allocator"*, i8*)**, void (%"class.WTF::PODArena::Allocator"*, i8*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %69, i64 1
  %71 = load void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %70, align 8
  call void %71(%"class.WTF::PODArena::Allocator"* %65, i8* %67) #9
  %72 = bitcast %"class.WTF::PODArena::Chunk"* %61 to i8*
  call void @free(i8* %72) #9
  br label %73

73:                                               ; preds = %60, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  %74 = load i32, i32* %45, align 4
  %75 = add i32 %74, -1
  %76 = call dereferenceable(8) %"class.std::__1::unique_ptr"* @_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.21"* %27, i32 %75) #9
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::PODArena::Chunk"*, %"class.WTF::PODArena::Chunk"** %77, align 8
  store %"class.WTF::PODArena::Chunk"* %78, %"class.WTF::PODArena::Chunk"** %3, align 8
  %79 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %78, i64 0, i32 3
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 64
  %82 = icmp ugt i64 %80, -65
  br i1 %82, label %91, label %83

83:                                               ; preds = %73
  %84 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %78, i64 0, i32 2
  %85 = load i64, i64* %84, align 8
  %86 = icmp ugt i64 %81, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %78, i64 0, i32 1
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 %80
  store i64 %81, i64* %79, align 8
  br label %91

91:                                               ; preds = %87, %83, %73, %15
  %92 = phi i8* [ %18, %15 ], [ %90, %87 ], [ null, %73 ], [ null, %83 ]
  ret i8* %92
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_(%"class.WTF::Vector.21"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %8 = icmp ugt %"class.std::__1::unique_ptr"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %10
  %12 = icmp ugt %"class.std::__1::unique_ptr"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.std::__1::unique_ptr"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrINS_8PODArena5ChunkENS2_14default_deleteIS5_EEEEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.21"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.std::__1::unique_ptr"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.std::__1::unique_ptr"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.std::__1::unique_ptr"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.21"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.21"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.std::__1::unique_ptr"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.std::__1::unique_ptr"* %1 to i64
  %56 = ptrtoint %"class.std::__1::unique_ptr"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.std::__1::unique_ptr"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrINS_8PODArena5ChunkENS2_14default_deleteIS5_EEEEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.21"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.std::__1::unique_ptr"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.std::__1::unique_ptr"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.21"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.21"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.std::__1::unique_ptr"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.std::__1::unique_ptr"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.std::__1::unique_ptr"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.std::__1::unique_ptr"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %100, i64 %103
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  store i64 %107, i64* %108, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrINS_8PODArena5ChunkENS2_14default_deleteIS5_EEEEEEmm(i64) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.std::__1::unique_ptr"* @_ZN3WTF6VectorINSt3__110unique_ptrINS_8PODArena5ChunkENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.21"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.21", %"class.WTF::Vector.21"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %24, i64 %25
  ret %"class.std::__1::unique_ptr"* %26
}

; Function Attrs: nounwind
declare i8* @llvm.ptr.annotation.p0i8(i8*, i8*, i8*, i32) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE21SearchForOverlapsFromINS_24PODIntervalSearchAdapterIfS3_EEEEvPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeERT_(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODIntervalSearchAdapter"* dereferenceable(16)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %1, i64 0, i32 2
  %4 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %0, null
  br i1 %4, label %53, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"class.WTF::PODIntervalSearchAdapter", %"class.WTF::PODIntervalSearchAdapter"* %1, i64 0, i32 0
  br label %8

8:                                                ; preds = %5, %49
  %9 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %0, %5 ], [ %51, %49 ]
  %10 = load float, float* %3, align 4
  %11 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 5
  %12 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 5, i32 3
  %13 = load float, float* %12, align 4
  %14 = fcmp olt float %10, %13
  br i1 %14, label %53, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 5, i32 4
  %17 = load float, float* %16, align 4
  %18 = load float, float* %6, align 4
  %19 = fcmp olt float %17, %18
  br i1 %19, label %53, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 1
  %22 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %21, align 8
  tail call void @_ZN3WTF15PODIntervalTreeIfPN5blink16FloatPolygonEdgeEE21SearchForOverlapsFromINS_24PODIntervalSearchAdapterIfS3_EEEEvPKNS_15PODRedBlackTreeINS_11PODIntervalIfS3_EEE4NodeERT_(%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %22, %"class.WTF::PODIntervalSearchAdapter"* dereferenceable(16) %1)
  %23 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 5, i32 1
  %24 = load float, float* %23, align 4
  %25 = load float, float* %6, align 4
  %26 = fcmp olt float %24, %25
  br i1 %26, label %49, label %27

27:                                               ; preds = %20
  %28 = load float, float* %3, align 4
  %29 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %11, i64 0, i32 0
  %30 = load float, float* %29, align 4
  %31 = fcmp uge float %28, %30
  br i1 %31, label %32, label %49

32:                                               ; preds = %27
  %33 = load %"class.WTF::Vector.10"*, %"class.WTF::Vector.10"** %7, align 8
  %34 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %33, i64 0, i32 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %33, i64 0, i32 0, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %48, label %39, !prof !6

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %33, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %40, align 8
  %42 = zext i32 %35 to i64
  %43 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %41, i64 %42
  %44 = bitcast %"class.WTF::PODInterval"* %43 to i8*
  %45 = bitcast %"class.WTF::PODInterval"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false) #9
  %46 = load i32, i32* %34, align 4
  %47 = add i32 %46, 1
  store i32 %47, i32* %34, align 4
  br label %49

48:                                               ; preds = %32
  tail call void @_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS5_EEvOT_(%"class.WTF::Vector.10"* %33, %"class.WTF::PODInterval"* dereferenceable(24) %11) #9
  br label %49

49:                                               ; preds = %20, %27, %39, %48
  %50 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %9, i64 0, i32 2
  %51 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %50, align 8
  %52 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %51, null
  br i1 %52, label %53, label %8

53:                                               ; preds = %15, %8, %49, %2
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS5_EEvOT_(%"class.WTF::Vector.10"*, %"class.WTF::PODInterval"* dereferenceable(24)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %6, align 8
  %8 = icmp ugt %"class.WTF::PODInterval"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::PODInterval"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::PODInterval"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.10"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %27, 24
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::PODInterval"*
  br label %99

35:                                               ; preds = %24
  %36 = udiv i64 %27, 24
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::PODInterval"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::PODInterval"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = mul nuw nsw i64 %45, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.10"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.10"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::PODInterval"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::PODInterval"* %1 to i64
  %56 = ptrtoint %"class.WTF::PODInterval"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = sdiv exact i64 %57, 24
  %59 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::PODInterval"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.10"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::PODInterval"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::PODInterval"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = mul nuw nsw i64 %85, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.10"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.10"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = udiv i64 %72, 24
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::PODInterval"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::PODInterval"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::PODInterval"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::PODInterval"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %100, i64 %103
  %105 = bitcast %"class.WTF::PODInterval"* %104 to i8*
  %106 = bitcast %"class.WTF::PODInterval"* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 24, i1 false) #9
  %107 = load i32, i32* %3, align 4
  %108 = add i32 %107, 1
  store i32 %108, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEEmm(i64) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink16FloatPolygonEdgeEEEmm(i64) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.WTF::PODInterval"* @_ZN3WTF6VectorINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.10"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.10", %"class.WTF::Vector.10"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::PODInterval"*, %"class.WTF::PODInterval"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::PODInterval", %"class.WTF::PODInterval"* %24, i64 %25
  ret %"class.WTF::PODInterval"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPolygonEdge"** @_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"*, i32) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %24, i64 %25
  ret %"class.blink::FloatPolygonEdge"** %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = distinct !{!5, !3}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
