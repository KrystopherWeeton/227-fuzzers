; ModuleID = '../../third_party/libzip/src/lib/zip_delete.c'
source_filename = "../../third_party/libzip/src/lib/zip_delete.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_delete(%struct.zip*, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %7, i32 18, i32 0) #2
  br label %29

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  br i1 %12, label %15, label %14

14:                                               ; preds = %8
  tail call void @zip_error_set(%struct.zip_error* %13, i32 25, i32 0) #2
  br label %29

15:                                               ; preds = %8
  %16 = tail call i8* @_zip_get_name(%struct.zip* %0, i64 %1, i32 0, %struct.zip_error* %13) #2
  %17 = icmp eq i8* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %20 = load %struct.zip_hash*, %struct.zip_hash** %19, align 8
  %21 = tail call zeroext i1 @_zip_hash_delete(%struct.zip_hash* %20, i8* nonnull %16, %struct.zip_error* %13) #2
  br i1 %21, label %22, label %29

22:                                               ; preds = %18
  %23 = tail call i32 @_zip_unchange(%struct.zip* %0, i64 %1, i32 1) #2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %27 = load %struct.zip_entry*, %struct.zip_entry** %26, align 8
  %28 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %1, i32 3
  store i8 1, i8* %28, align 8
  br label %29

29:                                               ; preds = %22, %18, %15, %25, %14, %6
  %30 = phi i32 [ -1, %6 ], [ -1, %14 ], [ 0, %25 ], [ -1, %15 ], [ -1, %18 ], [ -1, %22 ]
  ret i32 %30
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare i8* @_zip_get_name(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare zeroext i1 @_zip_hash_delete(%struct.zip_hash*, i8*, %struct.zip_error*) local_unnamed_addr #1

declare i32 @_zip_unchange(%struct.zip*, i64, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
