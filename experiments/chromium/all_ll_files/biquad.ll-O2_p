; ModuleID = '../../third_party/blink/renderer/platform/audio/biquad.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/biquad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::Biquad" = type { i8, [7 x i8], %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", double, double, double, double }
%"class.blink::AudioArray" = type <{ double*, double*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::complex" = type { double, double }

$_ZN5blink10AudioArrayIdE8AllocateEm = comdat any

$_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_ = comdat any

$_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_ = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.2 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIdEEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<double>]\00", align 1

@_ZN5blink6BiquadC1Ej = hidden unnamed_addr alias void (%"class.blink::Biquad"*, i32), void (%"class.blink::Biquad"*, i32)* @_ZN5blink6BiquadC2Ej
@_ZN5blink6BiquadD1Ev = hidden unnamed_addr alias void (%"class.blink::Biquad"*), void (%"class.blink::Biquad"*)* @_ZN5blink6BiquadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6BiquadC2Ej(%"class.blink::Biquad"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 0
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2
  %5 = bitcast %"class.blink::AudioArray"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #10
  %6 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3
  %7 = bitcast %"class.blink::AudioArray"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #10
  %8 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4
  %9 = bitcast %"class.blink::AudioArray"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #10
  %10 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5
  %11 = bitcast %"class.blink::AudioArray"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #10
  %12 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6
  %13 = bitcast %"class.blink::AudioArray"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #10
  %14 = zext i32 %1 to i64
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %4, i64 %14)
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %6, i64 %14)
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %8, i64 %14)
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %10, i64 %14)
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %12, i64 %14)
  %15 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %16 = load double*, double** %15, align 8
  store double 1.000000e+00, double* %16, align 8
  %17 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %18 = load double*, double** %17, align 8
  store double 0.000000e+00, double* %18, align 8
  %19 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %20 = load double*, double** %19, align 8
  store double 0.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %22 = load double*, double** %21, align 8
  store double 0.000000e+00, double* %22, align 8
  %23 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %24 = load double*, double** %23, align 8
  store double 0.000000e+00, double* %24, align 8
  %25 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 7
  %26 = bitcast double* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 32, i1 false) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 536870911
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #10
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536870911) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %14) #10
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #10
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 3
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load double*, double** %24, align 8
  %26 = icmp eq double* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast double* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #10
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #10
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIdEEEEPKcv, i64 0, i64 0)) #10
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #10
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #10
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to double*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store double* %50, double** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad25SetNormalizedCoefficientsEidddddd(%"class.blink::Biquad"* nocapture readonly, i32, double, double, double, double, double, double) local_unnamed_addr #1 align 2 {
  %9 = fdiv double 1.000000e+00, %5
  %10 = fmul double %9, %2
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %13 = load double*, double** %12, align 8
  %14 = getelementptr inbounds double, double* %13, i64 %11
  store double %10, double* %14, align 8
  %15 = fmul double %9, %3
  %16 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %17 = load double*, double** %16, align 8
  %18 = getelementptr inbounds double, double* %17, i64 %11
  store double %15, double* %18, align 8
  %19 = fmul double %9, %4
  %20 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %21 = load double*, double** %20, align 8
  %22 = getelementptr inbounds double, double* %21, i64 %11
  store double %19, double* %22, align 8
  %23 = fmul double %9, %6
  %24 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %25 = load double*, double** %24, align 8
  %26 = getelementptr inbounds double, double* %25, i64 %11
  store double %23, double* %26, align 8
  %27 = fmul double %9, %7
  %28 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %29 = load double*, double** %28, align 8
  %30 = getelementptr inbounds double, double* %29, i64 %11
  store double %27, double* %30, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink6Biquad5ResetEv(%"class.blink::Biquad"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 7
  %3 = bitcast double* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6BiquadD2Ev(%"class.blink::Biquad"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6
  %3 = bitcast %"class.blink::AudioArray"* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %4) #10
  %5 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5
  %6 = bitcast %"class.blink::AudioArray"* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %7) #10
  %8 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4
  %9 = bitcast %"class.blink::AudioArray"* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %10) #10
  %11 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3
  %12 = bitcast %"class.blink::AudioArray"* %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %13) #10
  %14 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2
  %15 = bitcast %"class.blink::AudioArray"* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %16) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad7ProcessEPKfPfj(%"class.blink::Biquad"* nocapture, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !3
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 7
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 9
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %15 = load double*, double** %14, align 8
  br i1 %7, label %67, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %18 = load double*, double** %17, align 8
  %19 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %20 = load double*, double** %19, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %22 = load double*, double** %21, align 8
  %23 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %24 = load double*, double** %23, align 8
  %25 = icmp sgt i32 %3, 0
  br i1 %25, label %26, label %122

26:                                               ; preds = %16
  %27 = zext i32 %3 to i64
  %28 = extractelement <2 x double> %10, i32 0
  %29 = extractelement <2 x double> %10, i32 1
  %30 = extractelement <2 x double> %13, i32 0
  %31 = extractelement <2 x double> %13, i32 1
  br label %32

32:                                               ; preds = %32, %26
  %33 = phi i64 [ 0, %26 ], [ %65, %32 ]
  %34 = phi float* [ %1, %26 ], [ %40, %32 ]
  %35 = phi float* [ %2, %26 ], [ %63, %32 ]
  %36 = phi double [ %28, %26 ], [ %44, %32 ]
  %37 = phi double [ %31, %26 ], [ %38, %32 ]
  %38 = phi double [ %30, %26 ], [ %64, %32 ]
  %39 = phi double [ %29, %26 ], [ %36, %32 ]
  %40 = getelementptr inbounds float, float* %34, i64 1
  %41 = load float, float* %34, align 4
  %42 = getelementptr inbounds double, double* %15, i64 %33
  %43 = load double, double* %42, align 8
  %44 = fpext float %41 to double
  %45 = fmul double %43, %44
  %46 = getelementptr inbounds double, double* %18, i64 %33
  %47 = load double, double* %46, align 8
  %48 = fmul double %36, %47
  %49 = fadd double %45, %48
  %50 = getelementptr inbounds double, double* %20, i64 %33
  %51 = load double, double* %50, align 8
  %52 = fmul double %39, %51
  %53 = fadd double %49, %52
  %54 = getelementptr inbounds double, double* %22, i64 %33
  %55 = load double, double* %54, align 8
  %56 = fmul double %38, %55
  %57 = fsub double %53, %56
  %58 = getelementptr inbounds double, double* %24, i64 %33
  %59 = load double, double* %58, align 8
  %60 = fmul double %37, %59
  %61 = fsub double %57, %60
  %62 = fptrunc double %61 to float
  %63 = getelementptr inbounds float, float* %35, i64 1
  store float %62, float* %35, align 4
  %64 = fpext float %62 to double
  %65 = add nuw nsw i64 %33, 1
  %66 = icmp eq i64 %65, %27
  br i1 %66, label %117, label %32

67:                                               ; preds = %4
  %68 = load double, double* %15, align 8
  %69 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %70 = load double*, double** %69, align 8
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %73 = load double*, double** %72, align 8
  %74 = load double, double* %73, align 8
  %75 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %76 = load double*, double** %75, align 8
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %79 = load double*, double** %78, align 8
  %80 = load double, double* %79, align 8
  %81 = icmp eq i32 %3, 0
  br i1 %81, label %122, label %82

82:                                               ; preds = %67
  %83 = extractelement <2 x double> %13, i32 1
  %84 = extractelement <2 x double> %13, i32 0
  %85 = extractelement <2 x double> %10, i32 1
  %86 = extractelement <2 x double> %10, i32 0
  br label %87

87:                                               ; preds = %82, %87
  %88 = phi float* [ %96, %87 ], [ %1, %82 ]
  %89 = phi float* [ %109, %87 ], [ %2, %82 ]
  %90 = phi double [ %91, %87 ], [ %83, %82 ]
  %91 = phi double [ %110, %87 ], [ %84, %82 ]
  %92 = phi double [ %93, %87 ], [ %85, %82 ]
  %93 = phi double [ %98, %87 ], [ %86, %82 ]
  %94 = phi i32 [ %95, %87 ], [ %3, %82 ]
  %95 = add nsw i32 %94, -1
  %96 = getelementptr inbounds float, float* %88, i64 1
  %97 = load float, float* %88, align 4
  %98 = fpext float %97 to double
  %99 = fmul double %68, %98
  %100 = fmul double %71, %93
  %101 = fadd double %100, %99
  %102 = fmul double %74, %92
  %103 = fadd double %102, %101
  %104 = fmul double %77, %91
  %105 = fsub double %103, %104
  %106 = fmul double %80, %90
  %107 = fsub double %105, %106
  %108 = fptrunc double %107 to float
  %109 = getelementptr inbounds float, float* %89, i64 1
  store float %108, float* %89, align 4
  %110 = fpext float %108 to double
  %111 = icmp eq i32 %95, 0
  br i1 %111, label %112, label %87

112:                                              ; preds = %87
  %113 = insertelement <2 x double> undef, double %110, i32 0
  %114 = insertelement <2 x double> %113, double %91, i32 1
  %115 = insertelement <2 x double> undef, double %98, i32 0
  %116 = insertelement <2 x double> %115, double %93, i32 1
  br label %122

117:                                              ; preds = %32
  %118 = insertelement <2 x double> undef, double %64, i32 0
  %119 = insertelement <2 x double> %118, double %38, i32 1
  %120 = insertelement <2 x double> undef, double %44, i32 0
  %121 = insertelement <2 x double> %120, double %36, i32 1
  br label %122

122:                                              ; preds = %117, %112, %16, %67
  %123 = phi <2 x double> [ %10, %67 ], [ %10, %16 ], [ %116, %112 ], [ %121, %117 ]
  %124 = phi <2 x double> [ %13, %67 ], [ %13, %16 ], [ %114, %112 ], [ %119, %117 ]
  %125 = fptrunc <2 x double> %123 to <2 x float>
  %126 = fpext <2 x float> %125 to <2 x double>
  %127 = bitcast double* %8 to <2 x double>*
  store <2 x double> %126, <2 x double>* %127, align 8
  %128 = fptrunc <2 x double> %124 to <2 x float>
  %129 = fpext <2 x float> %128 to <2 x double>
  %130 = bitcast double* %11 to <2 x double>*
  store <2 x double> %129, <2 x double>* %130, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad16SetLowpassParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fcmp oeq double %8, 1.000000e+00
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %13 = load double*, double** %12, align 8
  %14 = getelementptr inbounds double, double* %13, i64 %11
  store double 1.000000e+00, double* %14, align 8
  %15 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %16 = load double*, double** %15, align 8
  %17 = getelementptr inbounds double, double* %16, i64 %11
  store double 0.000000e+00, double* %17, align 8
  %18 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %19 = load double*, double** %18, align 8
  %20 = getelementptr inbounds double, double* %19, i64 %11
  store double 0.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %22 = load double*, double** %21, align 8
  %23 = getelementptr inbounds double, double* %22, i64 %11
  store double 0.000000e+00, double* %23, align 8
  br label %75

24:                                               ; preds = %4
  %25 = fcmp ogt double %8, 0.000000e+00
  br i1 %25, label %26, label %61

26:                                               ; preds = %24
  %27 = fdiv double %3, 2.000000e+01
  %28 = fmul double %27, 0x40026BB1BBB55516
  %29 = fptrunc double %28 to float
  %30 = tail call float @_ZN6fdlibm4expfEf(float %29) #10
  %31 = fpext float %30 to double
  %32 = fmul double %8, 0x400921FB54442D18
  %33 = tail call double @_ZN6fdlibm3sinEd(double %32) #10
  %34 = fmul double %31, 2.000000e+00
  %35 = fdiv double %33, %34
  %36 = tail call double @_ZN6fdlibm3cosEd(double %32) #10
  %37 = fsub double 1.000000e+00, %36
  %38 = fmul double %37, 5.000000e-01
  %39 = fmul double %38, 2.000000e+00
  %40 = fadd double %35, 1.000000e+00
  %41 = fmul double %36, -2.000000e+00
  %42 = fsub double 1.000000e+00, %35
  %43 = fdiv double 1.000000e+00, %40
  %44 = fmul double %38, %43
  %45 = sext i32 %1 to i64
  %46 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %47 = load double*, double** %46, align 8
  %48 = getelementptr inbounds double, double* %47, i64 %45
  store double %44, double* %48, align 8
  %49 = fmul double %43, %39
  %50 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %51 = load double*, double** %50, align 8
  %52 = getelementptr inbounds double, double* %51, i64 %45
  store double %49, double* %52, align 8
  %53 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %54 = load double*, double** %53, align 8
  %55 = getelementptr inbounds double, double* %54, i64 %45
  store double %44, double* %55, align 8
  %56 = fmul double %41, %43
  %57 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %58 = load double*, double** %57, align 8
  %59 = getelementptr inbounds double, double* %58, i64 %45
  store double %56, double* %59, align 8
  %60 = fmul double %42, %43
  br label %75

61:                                               ; preds = %24
  %62 = sext i32 %1 to i64
  %63 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %64 = load double*, double** %63, align 8
  %65 = getelementptr inbounds double, double* %64, i64 %62
  store double 0.000000e+00, double* %65, align 8
  %66 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %67 = load double*, double** %66, align 8
  %68 = getelementptr inbounds double, double* %67, i64 %62
  store double 0.000000e+00, double* %68, align 8
  %69 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %70 = load double*, double** %69, align 8
  %71 = getelementptr inbounds double, double* %70, i64 %62
  store double 0.000000e+00, double* %71, align 8
  %72 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %73 = load double*, double** %72, align 8
  %74 = getelementptr inbounds double, double* %73, i64 %62
  store double 0.000000e+00, double* %74, align 8
  br label %75

75:                                               ; preds = %26, %61, %10
  %76 = phi i64 [ %45, %26 ], [ %62, %61 ], [ %11, %10 ]
  %77 = phi double [ %60, %26 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %10 ]
  %78 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %79 = load double*, double** %78, align 8
  %80 = getelementptr inbounds double, double* %79, i64 %76
  store double %77, double* %80, align 8
  ret void
}

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #4

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad17SetHighpassParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fcmp oeq double %8, 1.000000e+00
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %13 = load double*, double** %12, align 8
  %14 = getelementptr inbounds double, double* %13, i64 %11
  store double 0.000000e+00, double* %14, align 8
  %15 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %16 = load double*, double** %15, align 8
  %17 = getelementptr inbounds double, double* %16, i64 %11
  store double 0.000000e+00, double* %17, align 8
  %18 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %19 = load double*, double** %18, align 8
  %20 = getelementptr inbounds double, double* %19, i64 %11
  store double 0.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %22 = load double*, double** %21, align 8
  %23 = getelementptr inbounds double, double* %22, i64 %11
  store double 0.000000e+00, double* %23, align 8
  br label %75

24:                                               ; preds = %4
  %25 = fcmp ogt double %8, 0.000000e+00
  br i1 %25, label %26, label %61

26:                                               ; preds = %24
  %27 = fdiv double %3, 2.000000e+01
  %28 = fmul double %27, 0x40026BB1BBB55516
  %29 = fptrunc double %28 to float
  %30 = tail call float @_ZN6fdlibm4expfEf(float %29) #10
  %31 = fpext float %30 to double
  %32 = fmul double %8, 0x400921FB54442D18
  %33 = tail call double @_ZN6fdlibm3sinEd(double %32) #10
  %34 = fmul double %31, 2.000000e+00
  %35 = fdiv double %33, %34
  %36 = tail call double @_ZN6fdlibm3cosEd(double %32) #10
  %37 = fadd double %36, 1.000000e+00
  %38 = fmul double %37, 5.000000e-01
  %39 = fmul double %38, -2.000000e+00
  %40 = fadd double %35, 1.000000e+00
  %41 = fmul double %36, -2.000000e+00
  %42 = fsub double 1.000000e+00, %35
  %43 = fdiv double 1.000000e+00, %40
  %44 = fmul double %38, %43
  %45 = sext i32 %1 to i64
  %46 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %47 = load double*, double** %46, align 8
  %48 = getelementptr inbounds double, double* %47, i64 %45
  store double %44, double* %48, align 8
  %49 = fmul double %43, %39
  %50 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %51 = load double*, double** %50, align 8
  %52 = getelementptr inbounds double, double* %51, i64 %45
  store double %49, double* %52, align 8
  %53 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %54 = load double*, double** %53, align 8
  %55 = getelementptr inbounds double, double* %54, i64 %45
  store double %44, double* %55, align 8
  %56 = fmul double %41, %43
  %57 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %58 = load double*, double** %57, align 8
  %59 = getelementptr inbounds double, double* %58, i64 %45
  store double %56, double* %59, align 8
  %60 = fmul double %42, %43
  br label %75

61:                                               ; preds = %24
  %62 = sext i32 %1 to i64
  %63 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %64 = load double*, double** %63, align 8
  %65 = getelementptr inbounds double, double* %64, i64 %62
  store double 1.000000e+00, double* %65, align 8
  %66 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %67 = load double*, double** %66, align 8
  %68 = getelementptr inbounds double, double* %67, i64 %62
  store double 0.000000e+00, double* %68, align 8
  %69 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %70 = load double*, double** %69, align 8
  %71 = getelementptr inbounds double, double* %70, i64 %62
  store double 0.000000e+00, double* %71, align 8
  %72 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %73 = load double*, double** %72, align 8
  %74 = getelementptr inbounds double, double* %73, i64 %62
  store double 0.000000e+00, double* %74, align 8
  br label %75

75:                                               ; preds = %26, %61, %10
  %76 = phi i64 [ %45, %26 ], [ %62, %61 ], [ %11, %10 ]
  %77 = phi double [ %60, %26 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %10 ]
  %78 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %79 = load double*, double** %78, align 8
  %80 = getelementptr inbounds double, double* %79, i64 %76
  store double %77, double* %80, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad17SetLowShelfParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fdiv double %3, 4.000000e+01
  %10 = fmul double %9, 0x40026BB1BBB55516
  %11 = fptrunc double %10 to float
  %12 = tail call float @_ZN6fdlibm4expfEf(float %11) #10
  %13 = fpext float %12 to double
  %14 = fcmp oeq double %8, 1.000000e+00
  br i1 %14, label %15, label %30

15:                                               ; preds = %4
  %16 = fmul double %13, %13
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %19 = load double*, double** %18, align 8
  %20 = getelementptr inbounds double, double* %19, i64 %17
  store double %16, double* %20, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %22 = load double*, double** %21, align 8
  %23 = getelementptr inbounds double, double* %22, i64 %17
  store double 0.000000e+00, double* %23, align 8
  %24 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %25 = load double*, double** %24, align 8
  %26 = getelementptr inbounds double, double* %25, i64 %17
  store double 0.000000e+00, double* %26, align 8
  %27 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %28 = load double*, double** %27, align 8
  %29 = getelementptr inbounds double, double* %28, i64 %17
  store double 0.000000e+00, double* %29, align 8
  br label %96

30:                                               ; preds = %4
  %31 = fcmp ogt double %8, 0.000000e+00
  br i1 %31, label %32, label %82

32:                                               ; preds = %30
  %33 = fmul double %8, 0x400921FB54442D18
  %34 = tail call double @_ZN6fdlibm3sinEd(double %33) #10
  %35 = fmul double %34, 5.000000e-01
  %36 = fdiv double 1.000000e+00, %13
  %37 = fadd double %36, %13
  %38 = fmul double %37, 0.000000e+00
  %39 = fadd double %38, 2.000000e+00
  %40 = tail call double @sqrt(double %39) #10
  %41 = fmul double %35, %40
  %42 = tail call double @_ZN6fdlibm3cosEd(double %33) #10
  %43 = tail call double @sqrt(double %13) #10
  %44 = fmul double %43, 2.000000e+00
  %45 = fmul double %41, %44
  %46 = fadd double %13, 1.000000e+00
  %47 = fadd double %13, -1.000000e+00
  %48 = fmul double %47, %42
  %49 = fsub double %46, %48
  %50 = fadd double %49, %45
  %51 = fmul double %50, %13
  %52 = fmul double %13, 2.000000e+00
  %53 = fmul double %46, %42
  %54 = fsub double %47, %53
  %55 = fmul double %52, %54
  %56 = fsub double %49, %45
  %57 = fmul double %56, %13
  %58 = fadd double %46, %48
  %59 = fadd double %58, %45
  %60 = fadd double %47, %53
  %61 = fmul double %60, -2.000000e+00
  %62 = fsub double %58, %45
  %63 = fdiv double 1.000000e+00, %59
  %64 = fmul double %63, %51
  %65 = sext i32 %1 to i64
  %66 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %67 = load double*, double** %66, align 8
  %68 = getelementptr inbounds double, double* %67, i64 %65
  store double %64, double* %68, align 8
  %69 = fmul double %55, %63
  %70 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %71 = load double*, double** %70, align 8
  %72 = getelementptr inbounds double, double* %71, i64 %65
  store double %69, double* %72, align 8
  %73 = fmul double %63, %57
  %74 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %75 = load double*, double** %74, align 8
  %76 = getelementptr inbounds double, double* %75, i64 %65
  store double %73, double* %76, align 8
  %77 = fmul double %61, %63
  %78 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %79 = load double*, double** %78, align 8
  %80 = getelementptr inbounds double, double* %79, i64 %65
  store double %77, double* %80, align 8
  %81 = fmul double %62, %63
  br label %96

82:                                               ; preds = %30
  %83 = sext i32 %1 to i64
  %84 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %85 = load double*, double** %84, align 8
  %86 = getelementptr inbounds double, double* %85, i64 %83
  store double 1.000000e+00, double* %86, align 8
  %87 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %88 = load double*, double** %87, align 8
  %89 = getelementptr inbounds double, double* %88, i64 %83
  store double 0.000000e+00, double* %89, align 8
  %90 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %91 = load double*, double** %90, align 8
  %92 = getelementptr inbounds double, double* %91, i64 %83
  store double 0.000000e+00, double* %92, align 8
  %93 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %94 = load double*, double** %93, align 8
  %95 = getelementptr inbounds double, double* %94, i64 %83
  store double 0.000000e+00, double* %95, align 8
  br label %96

96:                                               ; preds = %32, %82, %15
  %97 = phi i64 [ %65, %32 ], [ %83, %82 ], [ %17, %15 ]
  %98 = phi double [ %81, %32 ], [ 0.000000e+00, %82 ], [ 0.000000e+00, %15 ]
  %99 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %100 = load double*, double** %99, align 8
  %101 = getelementptr inbounds double, double* %100, i64 %97
  store double %98, double* %101, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad18SetHighShelfParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fdiv double %3, 4.000000e+01
  %10 = fmul double %9, 0x40026BB1BBB55516
  %11 = fptrunc double %10 to float
  %12 = tail call float @_ZN6fdlibm4expfEf(float %11) #10
  %13 = fpext float %12 to double
  %14 = fcmp oeq double %8, 1.000000e+00
  br i1 %14, label %15, label %29

15:                                               ; preds = %4
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %18 = load double*, double** %17, align 8
  %19 = getelementptr inbounds double, double* %18, i64 %16
  store double 1.000000e+00, double* %19, align 8
  %20 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %21 = load double*, double** %20, align 8
  %22 = getelementptr inbounds double, double* %21, i64 %16
  store double 0.000000e+00, double* %22, align 8
  %23 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %24 = load double*, double** %23, align 8
  %25 = getelementptr inbounds double, double* %24, i64 %16
  store double 0.000000e+00, double* %25, align 8
  %26 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %27 = load double*, double** %26, align 8
  %28 = getelementptr inbounds double, double* %27, i64 %16
  store double 0.000000e+00, double* %28, align 8
  br label %96

29:                                               ; preds = %4
  %30 = fcmp ogt double %8, 0.000000e+00
  br i1 %30, label %31, label %81

31:                                               ; preds = %29
  %32 = fmul double %8, 0x400921FB54442D18
  %33 = tail call double @_ZN6fdlibm3sinEd(double %32) #10
  %34 = fmul double %33, 5.000000e-01
  %35 = fdiv double 1.000000e+00, %13
  %36 = fadd double %35, %13
  %37 = fmul double %36, 0.000000e+00
  %38 = fadd double %37, 2.000000e+00
  %39 = tail call double @sqrt(double %38) #10
  %40 = fmul double %34, %39
  %41 = tail call double @_ZN6fdlibm3cosEd(double %32) #10
  %42 = tail call double @sqrt(double %13) #10
  %43 = fmul double %42, 2.000000e+00
  %44 = fmul double %40, %43
  %45 = fadd double %13, 1.000000e+00
  %46 = fadd double %13, -1.000000e+00
  %47 = fmul double %46, %41
  %48 = fadd double %45, %47
  %49 = fadd double %48, %44
  %50 = fmul double %49, %13
  %51 = fmul double %13, -2.000000e+00
  %52 = fmul double %45, %41
  %53 = fadd double %46, %52
  %54 = fmul double %51, %53
  %55 = fsub double %48, %44
  %56 = fmul double %55, %13
  %57 = fsub double %45, %47
  %58 = fadd double %57, %44
  %59 = fsub double %46, %52
  %60 = fmul double %59, 2.000000e+00
  %61 = fsub double %57, %44
  %62 = fdiv double 1.000000e+00, %58
  %63 = fmul double %62, %50
  %64 = sext i32 %1 to i64
  %65 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %66 = load double*, double** %65, align 8
  %67 = getelementptr inbounds double, double* %66, i64 %64
  store double %63, double* %67, align 8
  %68 = fmul double %54, %62
  %69 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %70 = load double*, double** %69, align 8
  %71 = getelementptr inbounds double, double* %70, i64 %64
  store double %68, double* %71, align 8
  %72 = fmul double %62, %56
  %73 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %74 = load double*, double** %73, align 8
  %75 = getelementptr inbounds double, double* %74, i64 %64
  store double %72, double* %75, align 8
  %76 = fmul double %60, %62
  %77 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %78 = load double*, double** %77, align 8
  %79 = getelementptr inbounds double, double* %78, i64 %64
  store double %76, double* %79, align 8
  %80 = fmul double %61, %62
  br label %96

81:                                               ; preds = %29
  %82 = fmul double %13, %13
  %83 = sext i32 %1 to i64
  %84 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %85 = load double*, double** %84, align 8
  %86 = getelementptr inbounds double, double* %85, i64 %83
  store double %82, double* %86, align 8
  %87 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %88 = load double*, double** %87, align 8
  %89 = getelementptr inbounds double, double* %88, i64 %83
  store double 0.000000e+00, double* %89, align 8
  %90 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %91 = load double*, double** %90, align 8
  %92 = getelementptr inbounds double, double* %91, i64 %83
  store double 0.000000e+00, double* %92, align 8
  %93 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %94 = load double*, double** %93, align 8
  %95 = getelementptr inbounds double, double* %94, i64 %83
  store double 0.000000e+00, double* %95, align 8
  br label %96

96:                                               ; preds = %31, %81, %15
  %97 = phi i64 [ %64, %31 ], [ %83, %81 ], [ %16, %15 ]
  %98 = phi double [ %80, %31 ], [ 0.000000e+00, %81 ], [ 0.000000e+00, %15 ]
  %99 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %100 = load double*, double** %99, align 8
  %101 = getelementptr inbounds double, double* %100, i64 %97
  store double %98, double* %101, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad16SetPeakingParamsEiddd(%"class.blink::Biquad"* nocapture readonly, i32, double, double, double) local_unnamed_addr #0 align 2 {
  %6 = fcmp ult double %2, 1.000000e+00
  %7 = fcmp ole double %2, 0.000000e+00
  %8 = select i1 %7, double 0.000000e+00, double %2
  %9 = select i1 %6, double %8, double 1.000000e+00
  %10 = fdiv double %4, 4.000000e+01
  %11 = fmul double %10, 0x40026BB1BBB55516
  %12 = fptrunc double %11 to float
  %13 = tail call float @_ZN6fdlibm4expfEf(float %12) #10
  %14 = fpext float %13 to double
  %15 = fcmp ogt double %9, 0.000000e+00
  %16 = fcmp olt double %9, 1.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %66

18:                                               ; preds = %5
  %19 = fcmp ogt double %3, 0.000000e+00
  br i1 %19, label %20, label %51

20:                                               ; preds = %18
  %21 = fmul double %9, 0x400921FB54442D18
  %22 = tail call double @_ZN6fdlibm3sinEd(double %21) #10
  %23 = fmul double %3, 2.000000e+00
  %24 = fdiv double %22, %23
  %25 = tail call double @_ZN6fdlibm3cosEd(double %21) #10
  %26 = fmul double %24, %14
  %27 = fadd double %26, 1.000000e+00
  %28 = fmul double %25, -2.000000e+00
  %29 = fsub double 1.000000e+00, %26
  %30 = fdiv double %24, %14
  %31 = fadd double %30, 1.000000e+00
  %32 = fsub double 1.000000e+00, %30
  %33 = fdiv double 1.000000e+00, %31
  %34 = fmul double %27, %33
  %35 = sext i32 %1 to i64
  %36 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %37 = load double*, double** %36, align 8
  %38 = getelementptr inbounds double, double* %37, i64 %35
  store double %34, double* %38, align 8
  %39 = fmul double %28, %33
  %40 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %41 = load double*, double** %40, align 8
  %42 = getelementptr inbounds double, double* %41, i64 %35
  store double %39, double* %42, align 8
  %43 = fmul double %29, %33
  %44 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %45 = load double*, double** %44, align 8
  %46 = getelementptr inbounds double, double* %45, i64 %35
  store double %43, double* %46, align 8
  %47 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %48 = load double*, double** %47, align 8
  %49 = getelementptr inbounds double, double* %48, i64 %35
  store double %39, double* %49, align 8
  %50 = fmul double %32, %33
  br label %80

51:                                               ; preds = %18
  %52 = fmul double %14, %14
  %53 = sext i32 %1 to i64
  %54 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %55 = load double*, double** %54, align 8
  %56 = getelementptr inbounds double, double* %55, i64 %53
  store double %52, double* %56, align 8
  %57 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %58 = load double*, double** %57, align 8
  %59 = getelementptr inbounds double, double* %58, i64 %53
  store double 0.000000e+00, double* %59, align 8
  %60 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %61 = load double*, double** %60, align 8
  %62 = getelementptr inbounds double, double* %61, i64 %53
  store double 0.000000e+00, double* %62, align 8
  %63 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %64 = load double*, double** %63, align 8
  %65 = getelementptr inbounds double, double* %64, i64 %53
  store double 0.000000e+00, double* %65, align 8
  br label %80

66:                                               ; preds = %5
  %67 = sext i32 %1 to i64
  %68 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %69 = load double*, double** %68, align 8
  %70 = getelementptr inbounds double, double* %69, i64 %67
  store double 1.000000e+00, double* %70, align 8
  %71 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %72 = load double*, double** %71, align 8
  %73 = getelementptr inbounds double, double* %72, i64 %67
  store double 0.000000e+00, double* %73, align 8
  %74 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %75 = load double*, double** %74, align 8
  %76 = getelementptr inbounds double, double* %75, i64 %67
  store double 0.000000e+00, double* %76, align 8
  %77 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %78 = load double*, double** %77, align 8
  %79 = getelementptr inbounds double, double* %78, i64 %67
  store double 0.000000e+00, double* %79, align 8
  br label %80

80:                                               ; preds = %20, %51, %66
  %81 = phi i64 [ %35, %20 ], [ %53, %51 ], [ %67, %66 ]
  %82 = phi double [ %50, %20 ], [ 0.000000e+00, %51 ], [ 0.000000e+00, %66 ]
  %83 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %84 = load double*, double** %83, align 8
  %85 = getelementptr inbounds double, double* %84, i64 %81
  store double %82, double* %85, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad16SetAllpassParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fcmp ogt double %8, 0.000000e+00
  %10 = fcmp olt double %8, 1.000000e+00
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %42

12:                                               ; preds = %4
  %13 = fcmp ogt double %3, 0.000000e+00
  br i1 %13, label %14, label %34

14:                                               ; preds = %12
  %15 = fmul double %8, 0x400921FB54442D18
  %16 = tail call double @_ZN6fdlibm3sinEd(double %15) #10
  %17 = fmul double %3, 2.000000e+00
  %18 = fdiv double %16, %17
  %19 = tail call double @_ZN6fdlibm3cosEd(double %15) #10
  %20 = fsub double 1.000000e+00, %18
  %21 = fmul double %19, -2.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double 1.000000e+00, %22
  %24 = fmul double %20, %23
  %25 = sext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %27 = load double*, double** %26, align 8
  %28 = getelementptr inbounds double, double* %27, i64 %25
  store double %24, double* %28, align 8
  %29 = fmul double %21, %23
  %30 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %31 = load double*, double** %30, align 8
  %32 = getelementptr inbounds double, double* %31, i64 %25
  store double %29, double* %32, align 8
  %33 = fmul double %22, %23
  br label %50

34:                                               ; preds = %12
  %35 = sext i32 %1 to i64
  %36 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %37 = load double*, double** %36, align 8
  %38 = getelementptr inbounds double, double* %37, i64 %35
  store double -1.000000e+00, double* %38, align 8
  %39 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %40 = load double*, double** %39, align 8
  %41 = getelementptr inbounds double, double* %40, i64 %35
  store double 0.000000e+00, double* %41, align 8
  br label %50

42:                                               ; preds = %4
  %43 = sext i32 %1 to i64
  %44 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %45 = load double*, double** %44, align 8
  %46 = getelementptr inbounds double, double* %45, i64 %43
  store double 1.000000e+00, double* %46, align 8
  %47 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %48 = load double*, double** %47, align 8
  %49 = getelementptr inbounds double, double* %48, i64 %43
  store double 0.000000e+00, double* %49, align 8
  br label %50

50:                                               ; preds = %14, %34, %42
  %51 = phi i64 [ %25, %14 ], [ %35, %34 ], [ %43, %42 ]
  %52 = phi double [ %33, %14 ], [ 0.000000e+00, %34 ], [ 0.000000e+00, %42 ]
  %53 = phi double [ %29, %14 ], [ 0.000000e+00, %34 ], [ 0.000000e+00, %42 ]
  %54 = phi double [ %24, %14 ], [ 0.000000e+00, %34 ], [ 0.000000e+00, %42 ]
  %55 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %56 = load double*, double** %55, align 8
  %57 = getelementptr inbounds double, double* %56, i64 %51
  store double %52, double* %57, align 8
  %58 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %59 = load double*, double** %58, align 8
  %60 = getelementptr inbounds double, double* %59, i64 %51
  store double %53, double* %60, align 8
  %61 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %62 = load double*, double** %61, align 8
  %63 = getelementptr inbounds double, double* %62, i64 %51
  store double %54, double* %63, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad14SetNotchParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %2, 1.000000e+00
  %6 = fcmp ole double %2, 0.000000e+00
  %7 = select i1 %6, double 0.000000e+00, double %2
  %8 = select i1 %5, double %7, double 1.000000e+00
  %9 = fcmp ogt double %8, 0.000000e+00
  %10 = fcmp olt double %8, 1.000000e+00
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %53

12:                                               ; preds = %4
  %13 = fcmp ogt double %3, 0.000000e+00
  br i1 %13, label %14, label %39

14:                                               ; preds = %12
  %15 = fmul double %8, 0x400921FB54442D18
  %16 = tail call double @_ZN6fdlibm3sinEd(double %15) #10
  %17 = fmul double %3, 2.000000e+00
  %18 = fdiv double %16, %17
  %19 = tail call double @_ZN6fdlibm3cosEd(double %15) #10
  %20 = fmul double %19, -2.000000e+00
  %21 = fadd double %18, 1.000000e+00
  %22 = fsub double 1.000000e+00, %18
  %23 = fdiv double 1.000000e+00, %21
  %24 = sext i32 %1 to i64
  %25 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %26 = load double*, double** %25, align 8
  %27 = getelementptr inbounds double, double* %26, i64 %24
  store double %23, double* %27, align 8
  %28 = fmul double %20, %23
  %29 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %30 = load double*, double** %29, align 8
  %31 = getelementptr inbounds double, double* %30, i64 %24
  store double %28, double* %31, align 8
  %32 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %33 = load double*, double** %32, align 8
  %34 = getelementptr inbounds double, double* %33, i64 %24
  store double %23, double* %34, align 8
  %35 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %36 = load double*, double** %35, align 8
  %37 = getelementptr inbounds double, double* %36, i64 %24
  store double %28, double* %37, align 8
  %38 = fmul double %22, %23
  br label %67

39:                                               ; preds = %12
  %40 = sext i32 %1 to i64
  %41 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %42 = load double*, double** %41, align 8
  %43 = getelementptr inbounds double, double* %42, i64 %40
  store double 0.000000e+00, double* %43, align 8
  %44 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %45 = load double*, double** %44, align 8
  %46 = getelementptr inbounds double, double* %45, i64 %40
  store double 0.000000e+00, double* %46, align 8
  %47 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %48 = load double*, double** %47, align 8
  %49 = getelementptr inbounds double, double* %48, i64 %40
  store double 0.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %51 = load double*, double** %50, align 8
  %52 = getelementptr inbounds double, double* %51, i64 %40
  store double 0.000000e+00, double* %52, align 8
  br label %67

53:                                               ; preds = %4
  %54 = sext i32 %1 to i64
  %55 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %56 = load double*, double** %55, align 8
  %57 = getelementptr inbounds double, double* %56, i64 %54
  store double 1.000000e+00, double* %57, align 8
  %58 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %59 = load double*, double** %58, align 8
  %60 = getelementptr inbounds double, double* %59, i64 %54
  store double 0.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %62 = load double*, double** %61, align 8
  %63 = getelementptr inbounds double, double* %62, i64 %54
  store double 0.000000e+00, double* %63, align 8
  %64 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %65 = load double*, double** %64, align 8
  %66 = getelementptr inbounds double, double* %65, i64 %54
  store double 0.000000e+00, double* %66, align 8
  br label %67

67:                                               ; preds = %14, %39, %53
  %68 = phi i64 [ %24, %14 ], [ %40, %39 ], [ %54, %53 ]
  %69 = phi double [ %38, %14 ], [ 0.000000e+00, %39 ], [ 0.000000e+00, %53 ]
  %70 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %71 = load double*, double** %70, align 8
  %72 = getelementptr inbounds double, double* %71, i64 %68
  store double %69, double* %72, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad17SetBandpassParamsEidd(%"class.blink::Biquad"* nocapture readonly, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ogt double %2, 0.000000e+00
  %6 = select i1 %5, double %2, double 0.000000e+00
  %7 = fcmp olt double %6, 1.000000e+00
  %8 = and i1 %5, %7
  br i1 %8, label %9, label %53

9:                                                ; preds = %4
  %10 = fcmp ogt double %3, 0.000000e+00
  %11 = fmul double %6, 0x400921FB54442D18
  br i1 %10, label %12, label %39

12:                                               ; preds = %9
  %13 = tail call double @_ZN6fdlibm3sinEd(double %11) #10
  %14 = fmul double %3, 2.000000e+00
  %15 = fdiv double %13, %14
  %16 = tail call double @_ZN6fdlibm3cosEd(double %11) #10
  %17 = fadd double %15, 1.000000e+00
  %18 = fmul double %16, -2.000000e+00
  %19 = fsub double 1.000000e+00, %15
  %20 = fdiv double 1.000000e+00, %17
  %21 = fmul double %15, %20
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %24 = load double*, double** %23, align 8
  %25 = getelementptr inbounds double, double* %24, i64 %22
  store double %21, double* %25, align 8
  %26 = fmul double %20, 0.000000e+00
  %27 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %28 = load double*, double** %27, align 8
  %29 = getelementptr inbounds double, double* %28, i64 %22
  store double %26, double* %29, align 8
  %30 = fsub double -0.000000e+00, %21
  %31 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %32 = load double*, double** %31, align 8
  %33 = getelementptr inbounds double, double* %32, i64 %22
  store double %30, double* %33, align 8
  %34 = fmul double %18, %20
  %35 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %36 = load double*, double** %35, align 8
  %37 = getelementptr inbounds double, double* %36, i64 %22
  store double %34, double* %37, align 8
  %38 = fmul double %19, %20
  br label %67

39:                                               ; preds = %9
  %40 = sext i32 %1 to i64
  %41 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %42 = load double*, double** %41, align 8
  %43 = getelementptr inbounds double, double* %42, i64 %40
  store double 1.000000e+00, double* %43, align 8
  %44 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %45 = load double*, double** %44, align 8
  %46 = getelementptr inbounds double, double* %45, i64 %40
  store double 0.000000e+00, double* %46, align 8
  %47 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %48 = load double*, double** %47, align 8
  %49 = getelementptr inbounds double, double* %48, i64 %40
  store double 0.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %51 = load double*, double** %50, align 8
  %52 = getelementptr inbounds double, double* %51, i64 %40
  store double 0.000000e+00, double* %52, align 8
  br label %67

53:                                               ; preds = %4
  %54 = sext i32 %1 to i64
  %55 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %56 = load double*, double** %55, align 8
  %57 = getelementptr inbounds double, double* %56, i64 %54
  store double 0.000000e+00, double* %57, align 8
  %58 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %59 = load double*, double** %58, align 8
  %60 = getelementptr inbounds double, double* %59, i64 %54
  store double 0.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %62 = load double*, double** %61, align 8
  %63 = getelementptr inbounds double, double* %62, i64 %54
  store double 0.000000e+00, double* %63, align 8
  %64 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %65 = load double*, double** %64, align 8
  %66 = getelementptr inbounds double, double* %65, i64 %54
  store double 0.000000e+00, double* %66, align 8
  br label %67

67:                                               ; preds = %12, %39, %53
  %68 = phi i64 [ %22, %12 ], [ %40, %39 ], [ %54, %53 ]
  %69 = phi double [ %38, %12 ], [ 0.000000e+00, %39 ], [ 0.000000e+00, %53 ]
  %70 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %71 = load double*, double** %70, align 8
  %72 = getelementptr inbounds double, double* %71, i64 %68
  store double %69, double* %72, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink6Biquad20GetFrequencyResponseEiPKfPfS3_(%"class.blink::Biquad"* nocapture readonly, i32, float* nocapture readonly, float* nocapture, float* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::complex", align 8
  %7 = alloca %"class.std::__1::complex", align 8
  %8 = alloca %"class.std::__1::complex", align 8
  %9 = alloca <2 x double>, align 16
  %10 = bitcast <2 x double>* %9 to %"class.std::__1::complex"*
  %11 = alloca %"class.std::__1::complex", align 8
  %12 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %13 = load double*, double** %12, align 8
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %16 = load double*, double** %15, align 8
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %19 = load double*, double** %18, align 8
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %22 = load double*, double** %21, align 8
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %25 = load double*, double** %24, align 8
  %26 = load double, double* %25, align 8
  %27 = icmp sgt i32 %1, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %5
  %29 = bitcast %"class.std::__1::complex"* %6 to i8*
  %30 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %6, i64 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %6, i64 0, i32 1
  %32 = bitcast %"class.std::__1::complex"* %7 to i8*
  %33 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %7, i64 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %7, i64 0, i32 1
  %35 = bitcast %"class.std::__1::complex"* %8 to i8*
  %36 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %8, i64 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %8, i64 0, i32 1
  %38 = bitcast <2 x double>* %9 to i8*
  %39 = bitcast %"class.std::__1::complex"* %11 to i8*
  %40 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 1
  %42 = zext i32 %1 to i64
  %43 = bitcast %"class.std::__1::complex"* %6 to i8*
  %44 = bitcast %"class.std::__1::complex"* %7 to i8*
  %45 = bitcast <2 x double>* %9 to i8*
  br label %47

46:                                               ; preds = %89, %5
  ret void

47:                                               ; preds = %89, %28
  %48 = phi i64 [ 0, %28 ], [ %92, %89 ]
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = load float, float* %49, align 4
  %51 = fcmp olt float %50, 0.000000e+00
  %52 = fcmp ogt float %50, 1.000000e+00
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %47
  %55 = call float @nanf(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #11
  %56 = getelementptr inbounds float, float* %3, i64 %48
  store float %55, float* %56, align 4
  %57 = call float @nanf(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #11
  br label %89

58:                                               ; preds = %47
  %59 = fpext float %50 to double
  %60 = fmul double %59, 0xC00921FB54442D18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 -1, i64 16, i1 false)
  %61 = call double @_ZN6fdlibm3cosEd(double %60) #10
  %62 = call double @_ZN6fdlibm3sinEd(double %60) #10
  store double %61, double* %30, align 8
  store double %62, double* %31, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #10
  %63 = fmul double %20, %61
  %64 = fmul double %20, %62
  %65 = fadd double %17, %63
  store double %65, double* %36, align 8
  store double %64, double* %37, align 8
  %66 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %8, %"class.std::__1::complex"* nonnull dereferenceable(16) %6)
  %67 = extractvalue { double, double } %66, 0
  %68 = extractvalue { double, double } %66, 1
  %69 = fadd double %14, %67
  store double %69, double* %33, align 8
  store double %68, double* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #10
  %70 = load double, double* %30, align 8
  %71 = load double, double* %31, align 8
  %72 = fmul double %26, %70
  %73 = fmul double %26, %71
  %74 = fadd double %23, %72
  store double %74, double* %40, align 8
  store double %73, double* %41, align 8
  %75 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %11, %"class.std::__1::complex"* nonnull dereferenceable(16) %6)
  %76 = extractvalue { double, double } %75, 0
  %77 = extractvalue { double, double } %75, 1
  %78 = insertelement <2 x double> undef, double %76, i32 0
  %79 = insertelement <2 x double> %78, double %77, i32 1
  %80 = fadd <2 x double> %79, <double 1.000000e+00, double 0.000000e+00>
  store <2 x double> %80, <2 x double>* %9, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #10
  %81 = call { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %7, %"class.std::__1::complex"* nonnull dereferenceable(16) %10)
  %82 = extractvalue { double, double } %81, 0
  %83 = extractvalue { double, double } %81, 1
  %84 = call double @hypot(double %82, double %83) #10
  %85 = fptrunc double %84 to float
  %86 = getelementptr inbounds float, float* %3, i64 %48
  store float %85, float* %86, align 4
  %87 = call double @_ZN6fdlibm5atan2Edd(double %83, double %82) #10
  %88 = fptrunc double %87 to float
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #10
  br label %89

89:                                               ; preds = %54, %58
  %90 = phi float [ %57, %54 ], [ %88, %58 ]
  %91 = getelementptr inbounds float, float* %4, i64 %48
  store float %90, float* %91, align 4
  %92 = add nuw nsw i64 %48, 1
  %93 = icmp eq i64 %92, %42
  br i1 %93, label %46, label %47
}

; Function Attrs: nounwind readonly
declare float @nanf(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* dereferenceable(16), %"class.std::__1::complex"* dereferenceable(16)) local_unnamed_addr #0 comdat {
  %3 = bitcast %"class.std::__1::complex"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast %"class.std::__1::complex"* %1 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = shufflevector <2 x double> %4, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %8 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %9 = fmul <2 x double> %7, %8
  %10 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %4, %10
  %12 = fsub <2 x double> %11, %9
  %13 = fadd <2 x double> %11, %9
  %14 = shufflevector <2 x double> %12, <2 x double> %13, <2 x i32> <i32 0, i32 3>
  %15 = extractelement <2 x double> %12, i32 0
  %16 = fcmp uno double %15, 0.000000e+00
  %17 = extractelement <2 x double> %13, i32 1
  %18 = fcmp uno double %17, 0.000000e+00
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %77

20:                                               ; preds = %2
  %21 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %4)
  %22 = fcmp oeq <2 x double> %21, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %23 = extractelement <2 x i1> %22, i32 0
  %24 = extractelement <2 x i1> %22, i32 1
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = select <2 x i1> %22, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %28 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %27, <2 x double> %4)
  %29 = fcmp uno <2 x double> %6, zeroinitializer
  %30 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %6)
  %31 = select <2 x i1> %29, <2 x double> %30, <2 x double> %6
  br label %32

32:                                               ; preds = %20, %26
  %33 = phi i8 [ 1, %26 ], [ 0, %20 ]
  %34 = phi <2 x double> [ %28, %26 ], [ %4, %20 ]
  %35 = phi <2 x double> [ %31, %26 ], [ %6, %20 ]
  %36 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %35)
  %37 = fcmp oeq <2 x double> %36, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %38 = extractelement <2 x i1> %37, i32 0
  %39 = extractelement <2 x i1> %37, i32 1
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %47

41:                                               ; preds = %32
  %42 = select <2 x i1> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %43 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %42, <2 x double> %35)
  %44 = fcmp uno <2 x double> %34, zeroinitializer
  %45 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %34)
  %46 = select <2 x i1> %44, <2 x double> %45, <2 x double> %34
  br label %65

47:                                               ; preds = %32
  %48 = icmp eq i8 %33, 0
  br i1 %48, label %49, label %65

49:                                               ; preds = %47
  %50 = shufflevector <2 x double> %11, <2 x double> %9, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %51 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %50)
  %52 = fcmp oeq <4 x double> %51, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = shufflevector <4 x i1> %52, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %54 = or <4 x i1> %52, %53
  %55 = shufflevector <4 x i1> %54, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %56 = or <4 x i1> %54, %55
  %57 = extractelement <4 x i1> %56, i32 0
  br i1 %57, label %58, label %77

58:                                               ; preds = %49
  %59 = fcmp uno <2 x double> %34, zeroinitializer
  %60 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %34)
  %61 = select <2 x i1> %59, <2 x double> %60, <2 x double> %34
  %62 = fcmp uno <2 x double> %35, zeroinitializer
  %63 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %35)
  %64 = select <2 x i1> %62, <2 x double> %63, <2 x double> %35
  br label %65

65:                                               ; preds = %47, %41, %58
  %66 = phi <2 x double> [ %46, %41 ], [ %61, %58 ], [ %34, %47 ]
  %67 = phi <2 x double> [ %43, %41 ], [ %64, %58 ], [ %35, %47 ]
  %68 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %69 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %70 = fmul <2 x double> %68, %69
  %71 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x double> %71, %66
  %73 = fsub <2 x double> %72, %70
  %74 = fadd <2 x double> %72, %70
  %75 = shufflevector <2 x double> %73, <2 x double> %74, <2 x i32> <i32 0, i32 3>
  %76 = fmul <2 x double> %75, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  br label %77

77:                                               ; preds = %49, %65, %2
  %78 = phi <2 x double> [ %14, %2 ], [ %76, %65 ], [ %14, %49 ]
  %79 = extractelement <2 x double> %78, i32 0
  %80 = insertvalue { double, double } undef, double %79, 0
  %81 = extractelement <2 x double> %78, i32 1
  %82 = insertvalue { double, double } %80, double %81, 1
  ret { double, double } %82
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* dereferenceable(16), %"class.std::__1::complex"* dereferenceable(16)) local_unnamed_addr #0 comdat {
  %3 = bitcast %"class.std::__1::complex"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %1, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = tail call double @llvm.fabs.f64(double %6)
  %10 = tail call double @llvm.fabs.f64(double %8)
  %11 = tail call double @llvm.maxnum.f64(double %9, double %10)
  %12 = tail call double @logb(double %11) #10
  %13 = tail call double @llvm.fabs.f64(double %12) #12
  %14 = fcmp ueq double %13, 0x7FF0000000000000
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = fptosi double %12 to i32
  %17 = sub i32 0, %16
  %18 = tail call double @scalbn(double %6, i32 %17) #10
  %19 = tail call double @scalbn(double %8, i32 %17) #10
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi i32 [ %17, %15 ], [ 0, %2 ]
  %22 = phi double [ %18, %15 ], [ %6, %2 ]
  %23 = phi double [ %19, %15 ], [ %8, %2 ]
  %24 = extractelement <2 x double> %4, i32 0
  %25 = insertelement <2 x double> undef, double %24, i32 0
  %26 = insertelement <2 x double> %25, double %22, i32 1
  %27 = insertelement <2 x double> undef, double %22, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  %29 = fmul <2 x double> %26, %28
  %30 = extractelement <2 x double> %4, i32 1
  %31 = shufflevector <2 x double> %4, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %32 = insertelement <2 x double> %31, double %23, i32 1
  %33 = insertelement <2 x double> undef, double %23, i32 0
  %34 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = fmul <2 x double> %32, %34
  %36 = fadd <2 x double> %29, %35
  %37 = extractelement <2 x double> %36, i32 0
  %38 = extractelement <2 x double> %36, i32 1
  %39 = fdiv double %37, %38
  %40 = tail call double @scalbn(double %39, i32 %21) #10
  %41 = fmul double %30, %22
  %42 = fmul double %24, %23
  %43 = fsub double %41, %42
  %44 = fdiv double %43, %38
  %45 = tail call double @scalbn(double %44, i32 %21) #10
  %46 = fcmp uno double %40, 0.000000e+00
  %47 = fcmp uno double %45, 0.000000e+00
  %48 = and i1 %46, %47
  %49 = insertelement <2 x double> undef, double %40, i32 0
  %50 = insertelement <2 x double> %49, double %45, i32 1
  br i1 %48, label %51, label %112

51:                                               ; preds = %20
  %52 = fcmp oeq double %38, 0.000000e+00
  br i1 %52, label %53, label %62

53:                                               ; preds = %51
  %54 = fcmp uno double %24, 0.000000e+00
  %55 = fcmp uno double %30, 0.000000e+00
  %56 = and i1 %54, %55
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = tail call double @llvm.copysign.f64(double 0x7FF0000000000000, double %22)
  %59 = insertelement <2 x double> undef, double %58, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = fmul <2 x double> %4, %60
  br label %112

62:                                               ; preds = %53, %51
  %63 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %4)
  %64 = fcmp oeq <2 x double> %63, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %65 = extractelement <2 x i1> %64, i32 0
  %66 = extractelement <2 x i1> %64, i32 1
  %67 = or i1 %65, %66
  %68 = tail call double @llvm.fabs.f64(double %22) #12
  %69 = fcmp one double %68, 0x7FF0000000000000
  %70 = and i1 %67, %69
  %71 = tail call double @llvm.fabs.f64(double %23) #12
  %72 = fcmp one double %71, 0x7FF0000000000000
  %73 = and i1 %70, %72
  br i1 %73, label %74, label %84

74:                                               ; preds = %62
  %75 = select <2 x i1> %64, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %76 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %75, <2 x double> %4)
  %77 = fmul <2 x double> %76, %28
  %78 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %79 = fmul <2 x double> %78, %34
  %80 = fadd <2 x double> %77, %79
  %81 = fsub <2 x double> %77, %79
  %82 = shufflevector <2 x double> %80, <2 x double> %81, <2 x i32> <i32 0, i32 3>
  %83 = fmul <2 x double> %82, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  br label %112

84:                                               ; preds = %62
  %85 = fcmp oeq double %13, 0x7FF0000000000000
  %86 = fcmp ogt double %12, 0.000000e+00
  %87 = and i1 %86, %85
  %88 = extractelement <2 x double> %63, i32 0
  %89 = fcmp one double %88, 0x7FF0000000000000
  %90 = and i1 %89, %87
  %91 = extractelement <2 x double> %63, i32 1
  %92 = fcmp one double %91, 0x7FF0000000000000
  %93 = and i1 %92, %90
  br i1 %93, label %94, label %112

94:                                               ; preds = %84
  %95 = fcmp oeq double %68, 0x7FF0000000000000
  %96 = select i1 %95, double 1.000000e+00, double 0.000000e+00
  %97 = tail call double @llvm.copysign.f64(double %96, double %22)
  %98 = fcmp oeq double %71, 0x7FF0000000000000
  %99 = select i1 %98, double 1.000000e+00, double 0.000000e+00
  %100 = tail call double @llvm.copysign.f64(double %99, double %23)
  %101 = insertelement <2 x double> undef, double %97, i32 0
  %102 = shufflevector <2 x double> %101, <2 x double> undef, <2 x i32> zeroinitializer
  %103 = fmul <2 x double> %4, %102
  %104 = shufflevector <2 x double> %31, <2 x double> %4, <2 x i32> <i32 0, i32 2>
  %105 = insertelement <2 x double> undef, double %100, i32 0
  %106 = shufflevector <2 x double> %105, <2 x double> undef, <2 x i32> zeroinitializer
  %107 = fmul <2 x double> %104, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fsub <2 x double> %103, %107
  %110 = shufflevector <2 x double> %108, <2 x double> %109, <2 x i32> <i32 0, i32 3>
  %111 = fmul <2 x double> %110, zeroinitializer
  br label %112

112:                                              ; preds = %57, %84, %94, %74, %20
  %113 = phi <2 x double> [ %83, %74 ], [ %111, %94 ], [ %50, %84 ], [ %61, %57 ], [ %50, %20 ]
  %114 = extractelement <2 x double> %113, i32 0
  %115 = insertvalue { double, double } undef, double %114, 0
  %116 = extractelement <2 x double> %113, i32 1
  %117 = insertvalue { double, double } %115, double %116, 1
  ret { double, double } %117
}

declare double @_ZN6fdlibm5atan2Edd(double, double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink6Biquad9TailFrameEid(%"class.blink::Biquad"* nocapture readonly, i32, double) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x double>, align 16
  %5 = bitcast <2 x double>* %4 to %"class.std::__1::complex"*
  %6 = alloca <2 x double>, align 16
  %7 = bitcast <2 x double>* %6 to %"class.std::__1::complex"*
  %8 = alloca <2 x double>, align 16
  %9 = bitcast <2 x double>* %8 to %"class.std::__1::complex"*
  %10 = alloca <2 x double>, align 16
  %11 = bitcast <2 x double>* %10 to %"class.std::__1::complex"*
  %12 = alloca <2 x double>, align 16
  %13 = bitcast <2 x double>* %12 to %"class.std::__1::complex"*
  %14 = alloca <2 x double>, align 16
  %15 = bitcast <2 x double>* %14 to %"class.std::__1::complex"*
  %16 = alloca %"class.std::__1::complex", align 8
  %17 = alloca <2 x double>, align 16
  %18 = bitcast <2 x double>* %17 to %"class.std::__1::complex"*
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 5, i32 1
  %21 = load double*, double** %20, align 8
  %22 = getelementptr inbounds double, double* %21, i64 %19
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 6, i32 1
  %25 = load double*, double** %24, align 8
  %26 = getelementptr inbounds double, double* %25, i64 %19
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 2, i32 1
  %29 = load double*, double** %28, align 8
  %30 = getelementptr inbounds double, double* %29, i64 %19
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 3, i32 1
  %34 = load double*, double** %33, align 8
  %35 = getelementptr inbounds double, double* %34, i64 %19
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.blink::Biquad", %"class.blink::Biquad"* %0, i64 0, i32 4, i32 1
  %39 = load double*, double** %38, align 8
  %40 = getelementptr inbounds double, double* %39, i64 %19
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = fmul double %23, %23
  %44 = fmul double %27, 4.000000e+00
  %45 = fsub double %43, %44
  %46 = fcmp ogt double %45, 0.000000e+00
  br i1 %46, label %47, label %101

47:                                               ; preds = %3
  %48 = fsub double -0.000000e+00, %23
  %49 = tail call double @sqrt(double %45) #10
  %50 = tail call double @sqrt(double %45) #10
  %51 = insertelement <2 x double> undef, double %49, i32 0
  %52 = insertelement <2 x double> %51, double %48, i32 1
  %53 = insertelement <2 x double> undef, double %23, i32 0
  %54 = insertelement <2 x double> %53, double %50, i32 1
  %55 = fsub <2 x double> %52, %54
  %56 = fmul <2 x double> %55, <double 5.000000e-01, double 5.000000e-01>
  %57 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %56)
  %58 = extractelement <2 x double> %57, i32 0
  %59 = extractelement <2 x double> %57, i32 1
  %60 = fcmp oge double %58, %59
  %61 = extractelement <2 x double> %56, i32 0
  %62 = extractelement <2 x double> %56, i32 1
  %63 = select i1 %60, double %61, double %62
  %64 = fdiv double %27, %63
  %65 = bitcast i64 %32 to double
  %66 = bitcast i64 %37 to double
  %67 = bitcast i64 %42 to double
  %68 = fsub double %64, %63
  %69 = insertelement <2 x double> undef, double %63, i32 0
  %70 = insertelement <2 x double> %69, double %64, i32 1
  %71 = insertelement <2 x double> undef, double %65, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fmul <2 x double> %70, %72
  %74 = fmul <2 x double> %70, %73
  %75 = insertelement <2 x double> undef, double %66, i32 0
  %76 = shufflevector <2 x double> %75, <2 x double> undef, <2 x i32> zeroinitializer
  %77 = fmul <2 x double> %70, %76
  %78 = fadd <2 x double> %77, %74
  %79 = insertelement <2 x double> undef, double %67, i32 0
  %80 = shufflevector <2 x double> %79, <2 x double> undef, <2 x i32> zeroinitializer
  %81 = fadd <2 x double> %78, %80
  %82 = insertelement <2 x double> undef, double %68, i32 0
  %83 = shufflevector <2 x double> %82, <2 x double> undef, <2 x i32> zeroinitializer
  %84 = fdiv <2 x double> %81, %83
  %85 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %84)
  %86 = extractelement <2 x double> %85, i32 0
  %87 = extractelement <2 x double> %85, i32 1
  %88 = fadd double %86, %87
  %89 = fdiv double 0x3F00000000000000, %88
  %90 = tail call double @_ZN6fdlibm3logEd(double %89) #10
  %91 = tail call double @llvm.fabs.f64(double %63)
  %92 = tail call double @_ZN6fdlibm3logEd(double %91) #10
  %93 = fdiv double %90, %92
  %94 = fadd double %93, 1.000000e+00
  %95 = fcmp ult double %94, 0x41DFFFFFFFC00000
  br i1 %95, label %96, label %299

96:                                               ; preds = %47
  %97 = fcmp ugt double %94, 0.000000e+00
  br i1 %97, label %98, label %299

98:                                               ; preds = %96
  %99 = fptosi double %94 to i32
  %100 = sitofp i32 %99 to double
  br label %299

101:                                              ; preds = %3
  %102 = fcmp olt double %45, 0.000000e+00
  %103 = fmul double %23, -5.000000e-01
  br i1 %102, label %104, label %187

104:                                              ; preds = %101
  %105 = fsub double -0.000000e+00, %45
  %106 = tail call double @sqrt(double %105) #10
  %107 = fmul double %106, 5.000000e-01
  %108 = bitcast <2 x double>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %108) #10
  %109 = getelementptr inbounds <2 x double>, <2 x double>* %4, i64 0, i64 0
  %110 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %5, i64 0, i32 1
  store double %103, double* %109, align 16
  store double %107, double* %110, align 8
  %111 = bitcast <2 x double>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %111) #10
  %112 = getelementptr inbounds <2 x double>, <2 x double>* %6, i64 0, i64 0
  %113 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %7, i64 0, i32 1
  %114 = fsub double -0.000000e+00, %107
  store double %103, double* %112, align 16
  store double %114, double* %113, align 8
  %115 = tail call double @hypot(double %103, double %107) #10
  %116 = fcmp oeq double %115, 1.000000e+00
  br i1 %116, label %185, label %117

117:                                              ; preds = %104
  %118 = bitcast <2 x double>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #10
  %119 = bitcast <2 x double>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %119) #10
  %120 = bitcast i64 %32 to double
  %121 = insertelement <2 x double> undef, double %103, i32 0
  %122 = insertelement <2 x double> %121, double %107, i32 1
  %123 = insertelement <2 x double> undef, double %120, i32 0
  %124 = shufflevector <2 x double> %123, <2 x double> undef, <2 x i32> zeroinitializer
  %125 = fmul <2 x double> %122, %124
  store <2 x double> %125, <2 x double>* %10, align 16
  %126 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %11, %"class.std::__1::complex"* nonnull dereferenceable(16) %5)
  %127 = extractvalue { double, double } %126, 0
  %128 = extractvalue { double, double } %126, 1
  %129 = load <2 x double>, <2 x double>* %4, align 16
  %130 = bitcast i64 %37 to double
  %131 = extractelement <2 x double> %129, i32 0
  %132 = fmul double %131, %130
  %133 = extractelement <2 x double> %129, i32 1
  %134 = fmul double %133, %130
  %135 = fadd double %127, %132
  %136 = bitcast i64 %42 to double
  %137 = insertelement <2 x double> undef, double %135, i32 0
  %138 = insertelement <2 x double> %137, double %128, i32 1
  %139 = insertelement <2 x double> undef, double %136, i32 0
  %140 = insertelement <2 x double> %139, double %134, i32 1
  %141 = fadd <2 x double> %138, %140
  store <2 x double> %141, <2 x double>* %8, align 16
  %142 = bitcast <2 x double>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %142) #10
  %143 = insertelement <2 x double> %121, double %114, i32 1
  %144 = fsub <2 x double> %143, %129
  store <2 x double> %144, <2 x double>* %12, align 16
  %145 = call { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %9, %"class.std::__1::complex"* nonnull dereferenceable(16) %13)
  %146 = extractvalue { double, double } %145, 0
  %147 = extractvalue { double, double } %145, 1
  %148 = call double @hypot(double %146, double %147) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %142) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %119) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #10
  %149 = bitcast <2 x double>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %149) #10
  %150 = bitcast %"class.std::__1::complex"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %150) #10
  %151 = fmul double %114, %120
  %152 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %16, i64 0, i32 0
  %153 = extractelement <2 x double> %125, i32 0
  store double %153, double* %152, align 8
  %154 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %16, i64 0, i32 1
  store double %151, double* %154, align 8
  %155 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %16, %"class.std::__1::complex"* nonnull dereferenceable(16) %7)
  %156 = extractvalue { double, double } %155, 0
  %157 = extractvalue { double, double } %155, 1
  %158 = load <2 x double>, <2 x double>* %6, align 16
  %159 = extractelement <2 x double> %158, i32 0
  %160 = fmul double %159, %130
  %161 = extractelement <2 x double> %158, i32 1
  %162 = fmul double %161, %130
  %163 = fadd double %156, %160
  %164 = insertelement <2 x double> undef, double %163, i32 0
  %165 = insertelement <2 x double> %164, double %157, i32 1
  %166 = insertelement <2 x double> %139, double %162, i32 1
  %167 = fadd <2 x double> %165, %166
  store <2 x double> %167, <2 x double>* %14, align 16
  %168 = bitcast <2 x double>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %168) #10
  %169 = load <2 x double>, <2 x double>* %4, align 16
  %170 = fsub <2 x double> %158, %169
  store <2 x double> %170, <2 x double>* %17, align 16
  %171 = call { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %15, %"class.std::__1::complex"* nonnull dereferenceable(16) %18)
  %172 = extractvalue { double, double } %171, 0
  %173 = extractvalue { double, double } %171, 1
  %174 = call double @hypot(double %172, double %173) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %168) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %150) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %149) #10
  %175 = fadd double %148, %174
  %176 = fdiv double 0x3F00000000000000, %175
  %177 = call double @_ZN6fdlibm3logEd(double %176) #10
  %178 = call double @_ZN6fdlibm3logEd(double %115) #10
  %179 = fdiv double %177, %178
  %180 = fadd double %179, 1.000000e+00
  %181 = fcmp oeq double %148, 0.000000e+00
  %182 = fcmp oeq double %174, 0.000000e+00
  %183 = and i1 %181, %182
  %184 = select i1 %183, double 0.000000e+00, double %180
  br label %185

185:                                              ; preds = %104, %117
  %186 = phi double [ %184, %117 ], [ %2, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %111) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #10
  br label %299

187:                                              ; preds = %101
  %188 = fcmp oeq double %103, 0.000000e+00
  br i1 %188, label %299, label %189

189:                                              ; preds = %187
  %190 = tail call double @llvm.fabs.f64(double %103) #10
  %191 = fcmp ult double %190, 1.000000e+00
  br i1 %191, label %192, label %299

192:                                              ; preds = %189
  %193 = bitcast i64 %32 to double
  %194 = fmul double %103, %193
  %195 = fmul double %103, %194
  %196 = bitcast i64 %37 to double
  %197 = fmul double %103, %196
  %198 = fadd double %195, %197
  %199 = bitcast i64 %42 to double
  %200 = fadd double %198, %199
  %201 = fmul double %103, %103
  %202 = fdiv double %200, %201
  %203 = fmul double %199, 2.000000e+00
  %204 = fadd double %197, %203
  %205 = fcmp oeq double %202, 0.000000e+00
  %206 = fcmp oeq double %204, 0.000000e+00
  %207 = and i1 %205, %206
  br i1 %207, label %299, label %208

208:                                              ; preds = %192
  %209 = tail call double @_ZN6fdlibm3logEd(double %103) #10
  %210 = fadd double %209, 1.000000e+00
  %211 = fsub double -0.000000e+00, %210
  %212 = tail call double @_ZN6fdlibm3logEd(double %103) #10
  %213 = fdiv double %211, %212
  %214 = fadd double %2, -1.000000e+00
  %215 = fcmp ult double %213, %214
  %216 = fcmp ole double %213, 1.000000e+00
  %217 = select i1 %216, double 1.000000e+00, double %213
  %218 = select i1 %215, double %217, double %214
  %219 = tail call double @_ZN6fdlibm3logEd(double 0x3F00000000000000) #10
  %220 = tail call double @_ZN6fdlibm3logEd(double %103) #10
  %221 = fadd double %218, 1.000000e+00
  %222 = fmul double %202, %221
  %223 = fmul double %103, %222
  %224 = fmul double %103, %223
  %225 = fadd double %204, %224
  %226 = tail call double @llvm.fabs.f64(double %225) #10
  %227 = tail call double @_ZN6fdlibm3logEd(double %226) #10
  %228 = insertelement <2 x double> undef, double %2, i32 0
  %229 = insertelement <2 x double> %228, double %218, i32 1
  %230 = fadd <2 x double> %229, <double -2.000000e+00, double -2.000000e+00>
  %231 = tail call double @_ZN6fdlibm3logEd(double %103) #10
  %232 = insertelement <2 x double> undef, double %231, i32 0
  %233 = insertelement <2 x double> %232, double %220, i32 1
  %234 = fmul <2 x double> %230, %233
  %235 = fadd double %2, 1.000000e+00
  %236 = fmul double %235, %202
  %237 = fmul double %103, %236
  %238 = fmul double %103, %237
  %239 = fadd double %204, %238
  %240 = tail call double @llvm.fabs.f64(double %239) #10
  %241 = tail call double @_ZN6fdlibm3logEd(double %240) #10
  %242 = insertelement <2 x double> undef, double %241, i32 0
  %243 = insertelement <2 x double> %242, double %227, i32 1
  %244 = fadd <2 x double> %234, %243
  %245 = insertelement <2 x double> undef, double %219, i32 0
  %246 = shufflevector <2 x double> %245, <2 x double> undef, <2 x i32> zeroinitializer
  %247 = fsub <2 x double> %244, %246
  br label %248

248:                                              ; preds = %292, %208
  %249 = phi i32 [ 0, %208 ], [ %297, %292 ]
  %250 = phi i32 [ 0, %208 ], [ %295, %292 ]
  %251 = phi double [ %218, %208 ], [ %294, %292 ]
  %252 = phi double [ %2, %208 ], [ %293, %292 ]
  %253 = phi <2 x double> [ %247, %208 ], [ %296, %292 ]
  %254 = extractelement <2 x double> %253, i32 1
  %255 = fmul double %254, %252
  %256 = extractelement <2 x double> %253, i32 0
  %257 = fmul double %256, %251
  %258 = fsub double %255, %257
  %259 = fsub double %254, %256
  %260 = fdiv double %258, %259
  %261 = fsub double %252, %251
  %262 = tail call double @llvm.fabs.f64(double %261) #10
  %263 = fadd double %251, %252
  %264 = tail call double @llvm.fabs.f64(double %263) #10
  %265 = fmul double %264, 5.000000e-01
  %266 = fcmp olt double %262, %265
  br i1 %266, label %299, label %267

267:                                              ; preds = %248
  %268 = fadd double %260, -2.000000e+00
  %269 = tail call double @_ZN6fdlibm3logEd(double %103) #10
  %270 = fmul double %268, %269
  %271 = fadd double %260, 1.000000e+00
  %272 = fmul double %202, %271
  %273 = fmul double %103, %272
  %274 = fmul double %103, %273
  %275 = fadd double %204, %274
  %276 = tail call double @llvm.fabs.f64(double %275) #10
  %277 = tail call double @_ZN6fdlibm3logEd(double %276) #10
  %278 = fadd double %270, %277
  %279 = fsub double %278, %219
  %280 = fmul double %256, %279
  %281 = fcmp ogt double %280, 0.000000e+00
  %282 = insertelement <2 x double> %253, double %279, i32 0
  br i1 %281, label %292, label %283

283:                                              ; preds = %267
  %284 = fmul double %254, %279
  %285 = fcmp ogt double %284, 0.000000e+00
  br i1 %285, label %286, label %299

286:                                              ; preds = %283
  %287 = icmp eq i32 %250, 1
  %288 = fmul double %256, 5.000000e-01
  %289 = select i1 %287, double %288, double %256
  %290 = insertelement <2 x double> undef, double %289, i32 0
  %291 = insertelement <2 x double> %290, double %279, i32 1
  br label %292

292:                                              ; preds = %286, %267
  %293 = phi double [ %260, %267 ], [ %252, %286 ]
  %294 = phi double [ %251, %267 ], [ %260, %286 ]
  %295 = phi i32 [ -1, %267 ], [ 1, %286 ]
  %296 = phi <2 x double> [ %282, %267 ], [ %291, %286 ]
  %297 = add nuw nsw i32 %249, 1
  %298 = icmp eq i32 %297, 10
  br i1 %298, label %299, label %248

299:                                              ; preds = %292, %283, %248, %98, %96, %47, %189, %187, %192, %185
  %300 = phi double [ %186, %185 ], [ 2.000000e+00, %187 ], [ 0.000000e+00, %192 ], [ 0x7FF0000000000000, %189 ], [ %100, %98 ], [ 0x41DFFFFFFFC00000, %47 ], [ 0.000000e+00, %96 ], [ %260, %248 ], [ %260, %283 ], [ %260, %292 ]
  ret double %300
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

declare double @_ZN6fdlibm3logEd(double) local_unnamed_addr #4

; Function Attrs: nounwind
declare double @hypot(double, double) local_unnamed_addr #8

declare float @_ZN6fdlibm4expfEf(float) local_unnamed_addr #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #7

; Function Attrs: nofree nounwind
declare double @logb(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.maxnum.f64(double, double) #7

; Function Attrs: nounwind
declare double @scalbn(double, i32) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #7

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.copysign.v2f64(<2 x double>, <2 x double>) #7

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
