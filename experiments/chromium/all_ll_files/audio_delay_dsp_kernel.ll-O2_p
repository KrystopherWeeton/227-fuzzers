; ModuleID = '../../third_party/blink/renderer/platform/audio/audio_delay_dsp_kernel.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/audio_delay_dsp_kernel.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AudioDelayDSPKernel" = type { %"class.blink::AudioDSPKernel", %"class.blink::AudioArray", float, i32, double, %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioDSPKernel" = type { i32 (...)**, %"class.blink::AudioDSPKernelProcessor"*, float, i32 }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.blink::AudioDSPKernelProcessor" = type <{ %"class.blink::AudioProcessor", %"class.WTF::Vector", %"class.WTF::Mutex", i8, [7 x i8] }>
%"class.blink::AudioProcessor" = type { i32 (...)**, i8, i32, float, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

$_ZN5blink19AudioDelayDSPKernelD2Ev = comdat any

$_ZN5blink19AudioDelayDSPKernelD0Ev = comdat any

$_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj = comdat any

@_ZTVN5blink19AudioDelayDSPKernelE = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::AudioDelayDSPKernel"*)* @_ZN5blink19AudioDelayDSPKernelD2Ev to i8*), i8* bitcast (void (%"class.blink::AudioDelayDSPKernel"*)* @_ZN5blink19AudioDelayDSPKernelD0Ev to i8*), i8* bitcast (void (%"class.blink::AudioDelayDSPKernel"*, float*, float*, i32)* @_ZN5blink19AudioDelayDSPKernel7ProcessEPKfPfj to i8*), i8* bitcast (void (%"class.blink::AudioDSPKernel"*, i32)* @_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj to i8*), i8* bitcast (void (%"class.blink::AudioDelayDSPKernel"*)* @_ZN5blink19AudioDelayDSPKernel5ResetEv to i8*), i8* bitcast (double (%"class.blink::AudioDelayDSPKernel"*)* @_ZNK5blink19AudioDelayDSPKernel8TailTimeEv to i8*), i8* bitcast (double (%"class.blink::AudioDelayDSPKernel"*)* @_ZNK5blink19AudioDelayDSPKernel11LatencyTimeEv to i8*), i8* bitcast (i1 (%"class.blink::AudioDelayDSPKernel"*)* @_ZNK5blink19AudioDelayDSPKernel22RequiresTailProcessingEv to i8*), i8* bitcast (i1 (%"class.blink::AudioDelayDSPKernel"*)* @_ZN5blink19AudioDelayDSPKernel23HasSampleAccurateValuesEv to i8*), i8* bitcast (void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)* @_ZN5blink19AudioDelayDSPKernel29CalculateSampleAccurateValuesEPfj to i8*), i8* bitcast (double (%"class.blink::AudioDelayDSPKernel"*, float)* @_ZN5blink19AudioDelayDSPKernel9DelayTimeEf to i8*), i8* bitcast (i1 (%"class.blink::AudioDelayDSPKernel"*)* @_ZN5blink19AudioDelayDSPKernel11IsAudioRateEv to i8*)] }, align 8
@_ZTVN5blink14AudioDSPKernelE = external unnamed_addr constant { [10 x i8*] }, align 8
@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink19AudioDelayDSPKernelC1EPNS_23AudioDSPKernelProcessorEm = hidden unnamed_addr alias void (%"class.blink::AudioDelayDSPKernel"*, %"class.blink::AudioDSPKernelProcessor"*, i64), void (%"class.blink::AudioDelayDSPKernel"*, %"class.blink::AudioDSPKernelProcessor"*, i64)* @_ZN5blink19AudioDelayDSPKernelC2EPNS_23AudioDSPKernelProcessorEm
@_ZN5blink19AudioDelayDSPKernelC1Edfj = hidden unnamed_addr alias void (%"class.blink::AudioDelayDSPKernel"*, double, float, i32), void (%"class.blink::AudioDelayDSPKernel"*, double, float, i32)* @_ZN5blink19AudioDelayDSPKernelC2Edfj

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernelC2EPNS_23AudioDSPKernelProcessorEm(%"class.blink::AudioDelayDSPKernel"*, %"class.blink::AudioDSPKernelProcessor"*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink14AudioDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 1
  store %"class.blink::AudioDSPKernelProcessor"* %1, %"class.blink::AudioDSPKernelProcessor"** %5, align 8
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.blink::AudioDSPKernelProcessor", %"class.blink::AudioDSPKernelProcessor"* %1, i64 0, i32 0, i32 3
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 3
  %12 = getelementptr inbounds %"class.blink::AudioDSPKernelProcessor", %"class.blink::AudioDSPKernelProcessor"* %1, i64 0, i32 0, i32 4
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %11, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5blink19AudioDelayDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %14 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1
  %15 = bitcast %"class.blink::AudioArray"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 20, i1 false) #10
  %16 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 3
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5
  %18 = bitcast %"class.blink::AudioArray"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 20, i1 false) #10
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %17, i64 %2) #10
  %19 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 6
  %20 = bitcast %"class.blink::AudioArray"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 20, i1 false) #10
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %19, i64 %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernelC2Edfj(%"class.blink::AudioDelayDSPKernel"*, double, float, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 1
  store %"class.blink::AudioDSPKernelProcessor"* null, %"class.blink::AudioDSPKernelProcessor"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  store float %2, float* %7, align 8
  %8 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 3
  store i32 %3, i32* %8, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5blink19AudioDelayDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %9 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1
  %10 = bitcast %"class.blink::AudioArray"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 20, i1 false) #10
  %11 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 2
  %12 = fptrunc double %1 to float
  store float %12, float* %11, align 8
  %13 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 3
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5
  %15 = bitcast %"class.blink::AudioArray"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 20, i1 false) #10
  %16 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 6
  %17 = zext i32 %3 to i64
  %18 = bitcast %"class.blink::AudioArray"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 20, i1 false) #10
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %16, i64 %17) #10
  %19 = fpext float %2 to double
  %20 = tail call i64 @_ZN5blink15audio_utilities17TimeToSampleFrameEddNS0_19SampleFrameRoundingE(double %1, double %19, i32 2) #10
  %21 = add i64 %20, %17
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %9, i64 %21)
  %22 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %23 = bitcast float** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 %28, i1 false) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink19AudioDelayDSPKernel20BufferLengthForDelayEddj(%"class.blink::AudioDelayDSPKernel"* nocapture readnone, double, double, i32) local_unnamed_addr #0 align 2 {
  %5 = zext i32 %3 to i64
  %6 = tail call i64 @_ZN5blink15audio_utilities17TimeToSampleFrameEddNS0_19SampleFrameRoundingE(double %1, double %2, i32 2) #10
  %7 = add i64 %6, %5
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #10
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #10
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #10
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #10
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #10
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #10
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #10
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #10
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN5blink15audio_utilities17TimeToSampleFrameEddNS0_19SampleFrameRoundingE(double, double, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink19AudioDelayDSPKernel23HasSampleAccurateValuesEv(%"class.blink::AudioDelayDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel29CalculateSampleAccurateValuesEPfj(%"class.blink::AudioDelayDSPKernel"* nocapture, float* nocapture, i32) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink19AudioDelayDSPKernel11IsAudioRateEv(%"class.blink::AudioDelayDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN5blink19AudioDelayDSPKernel9DelayTimeEf(%"class.blink::AudioDelayDSPKernel"* nocapture readonly, float) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 4
  %4 = load double, double* %3, align 8
  %5 = fpext float %1 to double
  %6 = fdiv double %4, %5
  ret double %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK5blink19AudioDelayDSPKernel18ProcessARateScalarEjiPfj(%"class.blink::AudioDelayDSPKernel"* nocapture readonly, i32, i32, float* nocapture, i32) local_unnamed_addr #5 align 2 {
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5, i32 1
  %11 = load float*, float** %10, align 8
  %12 = icmp ult i32 %1, %4
  br i1 %12, label %13, label %20

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  %15 = load float, float* %14, align 8
  %16 = fpext float %15 to double
  %17 = sitofp i32 %7 to double
  %18 = zext i32 %1 to i64
  %19 = zext i32 %4 to i64
  br label %22

20:                                               ; preds = %22, %5
  %21 = phi i32 [ %2, %5 ], [ %52, %22 ]
  ret i32 %21

22:                                               ; preds = %22, %13
  %23 = phi i64 [ %18, %13 ], [ %57, %22 ]
  %24 = phi i32 [ %2, %13 ], [ %52, %22 ]
  %25 = getelementptr inbounds float, float* %11, i64 %23
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = fmul double %16, %27
  %29 = add nsw i32 %24, %7
  %30 = sitofp i32 %29 to double
  %31 = fsub double %30, %28
  %32 = fcmp ult double %31, %17
  %33 = fsub double %31, %17
  %34 = select i1 %32, double %31, double %33
  %35 = fptosi double %34 to i32
  %36 = add nsw i32 %35, 1
  %37 = icmp slt i32 %36, %7
  %38 = select i1 %37, i32 0, i32 %7
  %39 = sub nsw i32 %36, %38
  %40 = sitofp i32 %35 to double
  %41 = fsub double %34, %40
  %42 = fptrunc double %41 to float
  %43 = sext i32 %35 to i64
  %44 = getelementptr inbounds float, float* %9, i64 %43
  %45 = load float, float* %44, align 4
  %46 = sext i32 %39 to i64
  %47 = getelementptr inbounds float, float* %9, i64 %46
  %48 = load float, float* %47, align 4
  %49 = add nsw i32 %24, 1
  %50 = icmp slt i32 %49, %7
  %51 = select i1 %50, i32 0, i32 %7
  %52 = sub nsw i32 %49, %51
  %53 = fsub float %48, %45
  %54 = fmul float %53, %42
  %55 = fadd float %45, %54
  %56 = getelementptr inbounds float, float* %3, i64 %23
  store float %55, float* %56, align 4
  %57 = add nuw nsw i64 %23, 1
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %20, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel12ProcessARateEPKfPfj(%"class.blink::AudioDelayDSPKernel"*, float* nocapture readonly, float*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5, i32 1
  %10 = load float*, float** %9, align 8
  %11 = bitcast %"class.blink::AudioDelayDSPKernel"* %0 to void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)***
  %12 = load void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)**, void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)*, void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)** %12, i64 9
  %14 = load void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)*, void (%"class.blink::AudioDelayDSPKernel"*, float*, i32)** %13, align 8
  tail call void %14(%"class.blink::AudioDelayDSPKernel"* %0, float* %10, i32 %3) #10
  %15 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 2
  %16 = load float, float* %15, align 8
  tail call void @_ZN5blink19AudioDelayDSPKernel9HandleNaNEPfjf(%"class.blink::AudioDelayDSPKernel"* %0, float* %10, i32 %3, float %16) #10
  %17 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds float, float* %8, i64 %19
  %21 = sub nsw i32 %6, %18
  %22 = bitcast float* %20 to i8*
  %23 = bitcast float* %1 to i8*
  %24 = icmp slt i32 %21, %3
  %25 = select i1 %24, i32 %21, i32 %3
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %23, i64 %27, i1 false) #10
  %28 = bitcast float* %8 to i8*
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = bitcast float* %30 to i8*
  %32 = sub nsw i32 %3, %21
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %31, i64 %36, i1 false) #10
  %37 = tail call i64 @_ZNK5blink19AudioDelayDSPKernel18ProcessARateVectorEPfj(%"class.blink::AudioDelayDSPKernel"* %0, float* %2, i32 %3) #10
  %38 = trunc i64 %37 to i32
  %39 = lshr i64 %37, 32
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %17, align 4
  %41 = icmp ult i32 %38, %3
  br i1 %41, label %42, label %90

42:                                               ; preds = %4
  %43 = load i32, i32* %5, align 8
  %44 = load float*, float** %7, align 8
  %45 = load float*, float** %9, align 8
  %46 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  %47 = load float, float* %46, align 8
  %48 = fpext float %47 to double
  %49 = sitofp i32 %43 to double
  %50 = and i64 %37, 4294967295
  %51 = zext i32 %3 to i64
  br label %52

52:                                               ; preds = %52, %42
  %53 = phi i64 [ %50, %42 ], [ %87, %52 ]
  %54 = phi i32 [ %40, %42 ], [ %82, %52 ]
  %55 = getelementptr inbounds float, float* %45, i64 %53
  %56 = load float, float* %55, align 4
  %57 = fpext float %56 to double
  %58 = fmul double %48, %57
  %59 = add nsw i32 %54, %43
  %60 = sitofp i32 %59 to double
  %61 = fsub double %60, %58
  %62 = fcmp ult double %61, %49
  %63 = fsub double %61, %49
  %64 = select i1 %62, double %61, double %63
  %65 = fptosi double %64 to i32
  %66 = add nsw i32 %65, 1
  %67 = icmp slt i32 %66, %43
  %68 = select i1 %67, i32 0, i32 %43
  %69 = sub nsw i32 %66, %68
  %70 = sitofp i32 %65 to double
  %71 = fsub double %64, %70
  %72 = fptrunc double %71 to float
  %73 = sext i32 %65 to i64
  %74 = getelementptr inbounds float, float* %44, i64 %73
  %75 = load float, float* %74, align 4
  %76 = sext i32 %69 to i64
  %77 = getelementptr inbounds float, float* %44, i64 %76
  %78 = load float, float* %77, align 4
  %79 = add nsw i32 %54, 1
  %80 = icmp slt i32 %79, %43
  %81 = select i1 %80, i32 0, i32 %43
  %82 = sub nsw i32 %79, %81
  %83 = fsub float %78, %75
  %84 = fmul float %83, %72
  %85 = fadd float %75, %84
  %86 = getelementptr inbounds float, float* %2, i64 %53
  store float %85, float* %86, align 4
  %87 = add nuw nsw i64 %53, 1
  %88 = icmp eq i64 %87, %51
  br i1 %88, label %89, label %52

89:                                               ; preds = %52
  store i32 %82, i32* %17, align 4
  br label %90

90:                                               ; preds = %89, %4
  ret void
}

declare void @_ZN5blink19AudioDelayDSPKernel9HandleNaNEPfjf(%"class.blink::AudioDelayDSPKernel"*, float*, i32, float) local_unnamed_addr #2

declare i64 @_ZNK5blink19AudioDelayDSPKernel18ProcessARateVectorEPfj(%"class.blink::AudioDelayDSPKernel"*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel12ProcessKRateEPKfPfj(%"class.blink::AudioDelayDSPKernel"*, float* nocapture readonly, float*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  %10 = load float, float* %9, align 8
  %11 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 2
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = bitcast %"class.blink::AudioDelayDSPKernel"* %0 to double (%"class.blink::AudioDelayDSPKernel"*, float)***
  %15 = load double (%"class.blink::AudioDelayDSPKernel"*, float)**, double (%"class.blink::AudioDelayDSPKernel"*, float)*** %14, align 8
  %16 = getelementptr inbounds double (%"class.blink::AudioDelayDSPKernel"*, float)*, double (%"class.blink::AudioDelayDSPKernel"*, float)** %15, i64 10
  %17 = load double (%"class.blink::AudioDelayDSPKernel"*, float)*, double (%"class.blink::AudioDelayDSPKernel"*, float)** %16, align 8
  %18 = tail call double %17(%"class.blink::AudioDelayDSPKernel"* %0, float %10) #10
  %19 = fcmp ult double %18, %13
  %20 = fcmp ole double %18, 0.000000e+00
  %21 = select i1 %20, double 0.000000e+00, double %18
  %22 = select i1 %19, double %21, double %13
  %23 = fpext float %10 to double
  %24 = fmul double %22, %23
  %25 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = add nsw i32 %26, %6
  %28 = sitofp i32 %27 to double
  %29 = fsub double %28, %24
  %30 = sitofp i32 %6 to double
  %31 = fcmp ult double %29, %30
  %32 = fsub double %29, %30
  %33 = select i1 %31, double %29, double %32
  %34 = fptosi double %33 to i32
  %35 = sitofp i32 %34 to double
  %36 = fsub double %33, %35
  %37 = fptrunc double %36 to float
  %38 = sext i32 %6 to i64
  %39 = getelementptr inbounds float, float* %8, i64 %38
  %40 = sext i32 %26 to i64
  %41 = getelementptr inbounds float, float* %8, i64 %40
  %42 = sub nsw i32 %6, %26
  %43 = bitcast float* %41 to i8*
  %44 = bitcast float* %1 to i8*
  %45 = icmp slt i32 %42, %3
  %46 = select i1 %45, i32 %42, i32 %3
  %47 = sext i32 %46 to i64
  %48 = shl nsw i64 %47, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %44, i64 %48, i1 false) #10
  %49 = bitcast float* %8 to i8*
  %50 = sext i32 %42 to i64
  %51 = getelementptr inbounds float, float* %1, i64 %50
  %52 = bitcast float* %51 to i8*
  %53 = sub nsw i32 %3, %42
  %54 = icmp sgt i32 %53, 0
  %55 = select i1 %54, i32 %53, i32 0
  %56 = zext i32 %55 to i64
  %57 = shl nuw nsw i64 %56, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %52, i64 %57, i1 false) #10
  %58 = add i32 %26, %3
  %59 = icmp slt i32 %58, %6
  %60 = select i1 %59, i32 0, i32 %6
  %61 = sub nsw i32 %58, %60
  store i32 %61, i32* %25, align 4
  %62 = sext i32 %34 to i64
  %63 = getelementptr inbounds float, float* %8, i64 %62
  %64 = ptrtoint float* %39 to i64
  %65 = ptrtoint float* %63 to i64
  %66 = sub i64 %64, %65
  %67 = lshr exact i64 %66, 2
  %68 = trunc i64 %67 to i32
  %69 = bitcast float* %2 to i8*
  %70 = bitcast float* %63 to i8*
  %71 = icmp slt i32 %68, %3
  %72 = select i1 %71, i32 %68, i32 %3
  %73 = sext i32 %72 to i64
  %74 = shl nsw i64 %73, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %74, i1 false)
  %75 = shl i64 %66, 30
  %76 = ashr exact i64 %75, 32
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = bitcast float* %77 to i8*
  %79 = sub nsw i32 %3, %68
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = zext i32 %81 to i64
  %83 = shl nuw nsw i64 %82, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %49, i64 %83, i1 false)
  %84 = fcmp une float %37, 0.000000e+00
  br i1 %84, label %85, label %111

85:                                               ; preds = %4
  %86 = add nsw i32 %34, 1
  %87 = srem i32 %86, %6
  %88 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 6, i32 1
  %89 = load float*, float** %88, align 8
  %90 = sext i32 %87 to i64
  %91 = getelementptr inbounds float, float* %8, i64 %90
  %92 = ptrtoint float* %91 to i64
  %93 = sub i64 %64, %92
  %94 = lshr exact i64 %93, 2
  %95 = trunc i64 %94 to i32
  %96 = bitcast float* %89 to i8*
  %97 = bitcast float* %91 to i8*
  %98 = icmp slt i32 %95, %3
  %99 = select i1 %98, i32 %95, i32 %3
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* align 4 %97, i64 %101, i1 false)
  %102 = shl i64 %93, 30
  %103 = ashr exact i64 %102, 32
  %104 = getelementptr inbounds float, float* %89, i64 %103
  %105 = bitcast float* %104 to i8*
  %106 = sub nsw i32 %3, %95
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  %109 = zext i32 %108 to i64
  %110 = shl nuw nsw i64 %109, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %49, i64 %110, i1 false)
  tail call void @_ZN5blink11vector_math4VsubEPKfiS2_iPfij(float* %89, i32 1, float* %2, i32 1, float* %89, i32 1, i32 %3) #10
  tail call void @_ZN5blink11vector_math4VsmaEPKfifPfij(float* %89, i32 1, float %37, float* %2, i32 1, i32 %3) #10
  br label %111

111:                                              ; preds = %85, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink11vector_math4VsubEPKfiS2_iPfij(float*, i32, float*, i32, float*, i32, i32) local_unnamed_addr #2

declare void @_ZN5blink11vector_math4VsmaEPKfifPfij(float*, i32, float, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel7ProcessEPKfPfj(%"class.blink::AudioDelayDSPKernel"*, float* nocapture readonly, float*, i32) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.blink::AudioDelayDSPKernel"* %0 to i1 (%"class.blink::AudioDelayDSPKernel"*)***
  %6 = load i1 (%"class.blink::AudioDelayDSPKernel"*)**, i1 (%"class.blink::AudioDelayDSPKernel"*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.blink::AudioDelayDSPKernel"*)*, i1 (%"class.blink::AudioDelayDSPKernel"*)** %6, i64 8
  %8 = load i1 (%"class.blink::AudioDelayDSPKernel"*)*, i1 (%"class.blink::AudioDelayDSPKernel"*)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.blink::AudioDelayDSPKernel"* %0) #10
  br i1 %9, label %10, label %16

10:                                               ; preds = %4
  %11 = load i1 (%"class.blink::AudioDelayDSPKernel"*)**, i1 (%"class.blink::AudioDelayDSPKernel"*)*** %5, align 8
  %12 = getelementptr inbounds i1 (%"class.blink::AudioDelayDSPKernel"*)*, i1 (%"class.blink::AudioDelayDSPKernel"*)** %11, i64 11
  %13 = load i1 (%"class.blink::AudioDelayDSPKernel"*)*, i1 (%"class.blink::AudioDelayDSPKernel"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.blink::AudioDelayDSPKernel"* %0) #10
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void @_ZN5blink19AudioDelayDSPKernel12ProcessARateEPKfPfj(%"class.blink::AudioDelayDSPKernel"* %0, float* %1, float* %2, i32 %3)
  br label %17

16:                                               ; preds = %10, %4
  tail call void @_ZN5blink19AudioDelayDSPKernel12ProcessKRateEPKfPfj(%"class.blink::AudioDelayDSPKernel"* %0, float* %1, float* %2, i32 %3)
  br label %17

17:                                               ; preds = %16, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel5ResetEv(%"class.blink::AudioDelayDSPKernel"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %3 = bitcast float** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 %8, i1 false) #10
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink19AudioDelayDSPKernel22RequiresTailProcessingEv(%"class.blink::AudioDelayDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink19AudioDelayDSPKernel8TailTimeEv(%"class.blink::AudioDelayDSPKernel"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 2
  %3 = load float, float* %2, align 8
  %4 = fpext float %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZNK5blink19AudioDelayDSPKernel11LatencyTimeEv(%"class.blink::AudioDelayDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret double 0.000000e+00
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19AudioDelayDSPKernelD2Ev(%"class.blink::AudioDelayDSPKernel"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5blink19AudioDelayDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 6
  %4 = bitcast %"class.blink::AudioArray"* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %5) #10
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5
  %7 = bitcast %"class.blink::AudioArray"* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %8) #10
  %9 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1
  %10 = bitcast %"class.blink::AudioArray"* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %11) #10
  %12 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0
  tail call void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"* %12) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19AudioDelayDSPKernelD0Ev(%"class.blink::AudioDelayDSPKernel"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5blink19AudioDelayDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 6
  %4 = bitcast %"class.blink::AudioArray"* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %5) #10
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5
  %7 = bitcast %"class.blink::AudioArray"* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %8) #10
  %9 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1
  %10 = bitcast %"class.blink::AudioArray"* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %11) #10
  %12 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0
  tail call void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"* %12) #10
  %13 = bitcast %"class.blink::AudioDelayDSPKernel"* %0 to i8*
  tail call void @free(i8* %13) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj(%"class.blink::AudioDSPKernel"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"*) unnamed_addr #7

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
