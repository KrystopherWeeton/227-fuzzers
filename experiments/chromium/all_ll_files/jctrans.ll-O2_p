; ModuleID = '../../third_party/libjpeg_turbo/jctrans.c'
source_filename = "../../third_party/libjpeg_turbo/jctrans.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_coef_controller = type { %struct.jpeg_c_coef_controller, i32, i32, i32, i32, %struct.jvirt_barray_control**, [10 x [64 x i16]*] }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_write_coefficients(%struct.jpeg_compress_struct*, %struct.jvirt_barray_control**) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 100
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  br label %19

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 20, i32* %11, align 8
  %12 = load i32, i32* %3, align 4
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 6, i32 0, i64 0
  store i32 %12, i32* %14, align 4
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %16, align 8
  %18 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %17(%struct.jpeg_common_struct* %18) #3
  br label %19

19:                                               ; preds = %6, %8
  %20 = phi %struct.jpeg_common_struct* [ %7, %6 ], [ %18, %8 ]
  tail call void @jpeg_suppress_tables(%struct.jpeg_compress_struct* %0, i32 0) #3
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 4
  %24 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %23, align 8
  tail call void %24(%struct.jpeg_common_struct* %20) #3
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %26 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %25, align 8
  %27 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %26, i64 0, i32 2
  %28 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %27, align 8
  tail call void %28(%struct.jpeg_compress_struct* %0) #3
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  store i32 1, i32* %29, align 8
  tail call void @jinit_c_master_control(%struct.jpeg_compress_struct* %0, i32 1) #3
  %30 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 25
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %19
  %34 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 5
  store i32 1, i32* %35, align 8
  %36 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %36, i64 0, i32 0
  %38 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %37, align 8
  tail call void %38(%struct.jpeg_common_struct* %20) #3
  br label %45

39:                                               ; preds = %19
  %40 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 40
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @jinit_phuff_encoder(%struct.jpeg_compress_struct* %0) #3
  br label %45

44:                                               ; preds = %39
  tail call void @jinit_huff_encoder(%struct.jpeg_compress_struct* %0) #3
  br label %45

45:                                               ; preds = %33, %43, %44
  %46 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %47 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %46, align 8
  %48 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %47, i64 0, i32 0
  %49 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %48, align 8
  %50 = tail call i8* %49(%struct.jpeg_common_struct* %20, i32 1, i64 120) #3
  %51 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %52 = bitcast %struct.jpeg_c_coef_controller** %51 to i8**
  store i8* %50, i8** %52, align 8
  %53 = bitcast i8* %50 to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_coef, void (%struct.jpeg_compress_struct*, i32)** %53, align 8
  %54 = getelementptr inbounds i8, i8* %50, i64 8
  %55 = bitcast i8* %54 to i32 (%struct.jpeg_compress_struct*, i8***)**
  store i32 (%struct.jpeg_compress_struct*, i8***)* @compress_output, i32 (%struct.jpeg_compress_struct*, i8***)** %55, align 8
  %56 = getelementptr inbounds i8, i8* %50, i64 32
  %57 = bitcast i8* %56 to %struct.jvirt_barray_control***
  store %struct.jvirt_barray_control** %1, %struct.jvirt_barray_control*** %57, align 8
  %58 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %46, align 8
  %59 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %58, i64 0, i32 1
  %60 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %59, align 8
  %61 = tail call i8* %60(%struct.jpeg_common_struct* %20, i32 1, i64 1280) #3
  tail call void @jzero_far(i8* %61, i64 1280) #3
  %62 = getelementptr inbounds i8, i8* %50, i64 40
  %63 = bitcast i8* %62 to i8**
  store i8* %61, i8** %63, align 8
  %64 = getelementptr inbounds i8, i8* %50, i64 48
  %65 = insertelement <2 x i8*> undef, i8* %61, i32 0
  %66 = shufflevector <2 x i8*> %65, <2 x i8*> undef, <2 x i32> zeroinitializer
  %67 = getelementptr i8, <2 x i8*> %66, <2 x i64> <i64 128, i64 256>
  %68 = bitcast i8* %64 to <2 x i8*>*
  store <2 x i8*> %67, <2 x i8*>* %68, align 8
  %69 = getelementptr inbounds i8, i8* %50, i64 64
  %70 = getelementptr i8, <2 x i8*> %66, <2 x i64> <i64 384, i64 512>
  %71 = bitcast i8* %69 to <2 x i8*>*
  store <2 x i8*> %70, <2 x i8*>* %71, align 8
  %72 = getelementptr inbounds i8, i8* %50, i64 80
  %73 = getelementptr i8, <2 x i8*> %66, <2 x i64> <i64 640, i64 768>
  %74 = bitcast i8* %72 to <2 x i8*>*
  store <2 x i8*> %73, <2 x i8*>* %74, align 8
  %75 = getelementptr inbounds i8, i8* %50, i64 96
  %76 = getelementptr i8, <2 x i8*> %66, <2 x i64> <i64 896, i64 1024>
  %77 = bitcast i8* %75 to <2 x i8*>*
  store <2 x i8*> %76, <2 x i8*>* %77, align 8
  %78 = getelementptr inbounds i8, i8* %61, i64 1152
  %79 = getelementptr inbounds i8, i8* %50, i64 112
  %80 = bitcast i8* %79 to i8**
  store i8* %78, i8** %80, align 8
  tail call void @jinit_marker_writer(%struct.jpeg_compress_struct* %0) #3
  %81 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %46, align 8
  %82 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %81, i64 0, i32 6
  %83 = bitcast {}** %82 to void (%struct.jpeg_common_struct*)**
  %84 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %83, align 8
  tail call void %84(%struct.jpeg_common_struct* %20) #3
  %85 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 58
  %86 = load %struct.jpeg_marker_writer*, %struct.jpeg_marker_writer** %85, align 8
  %87 = getelementptr inbounds %struct.jpeg_marker_writer, %struct.jpeg_marker_writer* %86, i64 0, i32 0
  %88 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %87, align 8
  tail call void %88(%struct.jpeg_compress_struct* %0) #3
  %89 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 39
  store i32 0, i32* %89, align 8
  store i32 103, i32* %3, align 4
  ret void
}

declare void @jpeg_suppress_tables(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_copy_critical_parameters(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_compress_struct*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 100
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast %struct.jpeg_compress_struct* %1 to %struct.jpeg_common_struct*
  br label %19

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 20, i32* %11, align 8
  %12 = load i32, i32* %3, align 4
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 6, i32 0, i64 0
  store i32 %12, i32* %14, align 4
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %16, align 8
  %18 = bitcast %struct.jpeg_compress_struct* %1 to %struct.jpeg_common_struct*
  tail call void %17(%struct.jpeg_common_struct* %18) #3
  br label %19

19:                                               ; preds = %6, %8
  %20 = phi %struct.jpeg_common_struct* [ %7, %6 ], [ %18, %8 ]
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 7
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 8
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 9
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 10
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 10
  store i32 %31, i32* %32, align 4
  tail call void @jpeg_set_defaults(%struct.jpeg_compress_struct* %1) #3
  %33 = load i32, i32* %30, align 4
  tail call void @jpeg_set_colorspace(%struct.jpeg_compress_struct* %1, i32 %33) #3
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 43
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 12
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 59
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 27
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 0
  %41 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %40, align 8
  %42 = icmp eq %struct.JQUANT_TBL* %41, null
  br i1 %42, label %58, label %43

43:                                               ; preds = %19
  %44 = bitcast %struct.JQUANT_TBL* %41 to i8*
  %45 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 16, i64 0
  %46 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %45, align 8
  %47 = icmp eq %struct.JQUANT_TBL* %46, null
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %20) #3
  store %struct.JQUANT_TBL* %49, %struct.JQUANT_TBL** %45, align 8
  %50 = bitcast %struct.JQUANT_TBL** %40 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %43, %48
  %53 = phi i8* [ %51, %48 ], [ %44, %43 ]
  %54 = phi %struct.JQUANT_TBL* [ %49, %48 ], [ %46, %43 ]
  %55 = bitcast %struct.JQUANT_TBL* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %53, i64 128, i1 false)
  %56 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %45, align 8
  %57 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %56, i64 0, i32 1
  store i32 0, i32* %57, align 4
  br label %58

58:                                               ; preds = %19, %52
  %59 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 1
  %60 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %59, align 8
  %61 = icmp eq %struct.JQUANT_TBL* %60, null
  br i1 %61, label %182, label %167

62:                                               ; preds = %220
  %63 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 0
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %63, align 8
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 5
  store i32 26, i32* %65, align 8
  %66 = load i32, i32* %222, align 4
  %67 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %63, align 8
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %67, i64 0, i32 6, i32 0, i64 0
  store i32 %66, i32* %68, align 4
  %69 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %63, align 8
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 6, i32 0, i64 1
  store i32 10, i32* %70, align 4
  %71 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %63, align 8
  %72 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %71, i64 0, i32 0
  %73 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %72, align 8
  tail call void %73(%struct.jpeg_common_struct* %20) #3
  %74 = load i32, i32* %222, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %143

76:                                               ; preds = %220, %62
  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 15
  %78 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %80 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %79, align 8
  %81 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 0
  br label %82

82:                                               ; preds = %76, %137
  %83 = phi i32 [ 0, %76 ], [ %138, %137 ]
  %84 = phi %struct.jpeg_component_info* [ %78, %76 ], [ %140, %137 ]
  %85 = phi %struct.jpeg_component_info* [ %80, %76 ], [ %139, %137 ]
  %86 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %84, i64 0, i32 0
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 2
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %84, i64 0, i32 2
  store i32 %90, i32* %91, align 8
  %92 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %84, i64 0, i32 3
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 4
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %84, i64 0, i32 4
  store i32 %96, i32* %97, align 8
  %98 = icmp ugt i32 %96, 3
  %99 = sext i32 %96 to i64
  br i1 %98, label %104, label %100

100:                                              ; preds = %82
  %101 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 %99
  %102 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %101, align 8
  %103 = icmp eq %struct.JQUANT_TBL* %102, null
  br i1 %103, label %104, label %114

104:                                              ; preds = %82, %100
  %105 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %105, i64 0, i32 5
  store i32 52, i32* %106, align 8
  %107 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %108 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %107, i64 0, i32 6, i32 0, i64 0
  store i32 %96, i32* %108, align 4
  %109 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %110 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %109, i64 0, i32 0
  %111 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %110, align 8
  tail call void %111(%struct.jpeg_common_struct* %20) #3
  %112 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 %99
  %113 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %112, align 8
  br label %114

114:                                              ; preds = %104, %100
  %115 = phi %struct.JQUANT_TBL* [ %113, %104 ], [ %102, %100 ]
  %116 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 19
  %117 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %116, align 8
  %118 = icmp eq %struct.JQUANT_TBL* %117, null
  br i1 %118, label %137, label %119

119:                                              ; preds = %114, %134
  %120 = phi i64 [ %135, %134 ], [ 0, %114 ]
  %121 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %117, i64 0, i32 0, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %115, i64 0, i32 0, i64 %120
  %124 = load i16, i16* %123, align 2
  %125 = icmp eq i16 %122, %124
  br i1 %125, label %134, label %126

126:                                              ; preds = %119
  %127 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %128 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %127, i64 0, i32 5
  store i32 44, i32* %128, align 8
  %129 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %130 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %129, i64 0, i32 6, i32 0, i64 0
  store i32 %96, i32* %130, align 4
  %131 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %81, align 8
  %132 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %131, i64 0, i32 0
  %133 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %132, align 8
  tail call void %133(%struct.jpeg_common_struct* %20) #3
  br label %134

134:                                              ; preds = %119, %126
  %135 = add nuw nsw i64 %120, 1
  %136 = icmp eq i64 %135, 64
  br i1 %136, label %137, label %119

137:                                              ; preds = %134, %114
  %138 = add nuw nsw i32 %83, 1
  %139 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 1
  %140 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %84, i64 1
  %141 = load i32, i32* %222, align 4
  %142 = icmp slt i32 %138, %141
  br i1 %142, label %82, label %143

143:                                              ; preds = %137, %62
  %144 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 51
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %166, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 52
  %149 = load i8, i8* %148, align 8
  %150 = icmp eq i8 %149, 1
  br i1 %150, label %151, label %156

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 33
  store i8 1, i8* %152, align 4
  %153 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 53
  %154 = load i8, i8* %153, align 1
  %155 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 34
  store i8 %154, i8* %155, align 1
  br label %156

156:                                              ; preds = %151, %147
  %157 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 54
  %158 = load i8, i8* %157, align 2
  %159 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 35
  store i8 %158, i8* %159, align 2
  %160 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 55
  %161 = load i16, i16* %160, align 4
  %162 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 36
  store i16 %161, i16* %162, align 8
  %163 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 56
  %164 = load i16, i16* %163, align 2
  %165 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 37
  store i16 %164, i16* %165, align 2
  br label %166

166:                                              ; preds = %143, %156
  ret void

167:                                              ; preds = %58
  %168 = bitcast %struct.JQUANT_TBL* %60 to i8*
  %169 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 16, i64 1
  %170 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %169, align 8
  %171 = icmp eq %struct.JQUANT_TBL* %170, null
  br i1 %171, label %172, label %176

172:                                              ; preds = %167
  %173 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %20) #3
  store %struct.JQUANT_TBL* %173, %struct.JQUANT_TBL** %169, align 8
  %174 = bitcast %struct.JQUANT_TBL** %59 to i8**
  %175 = load i8*, i8** %174, align 8
  br label %176

176:                                              ; preds = %167, %172
  %177 = phi i8* [ %175, %172 ], [ %168, %167 ]
  %178 = phi %struct.JQUANT_TBL* [ %173, %172 ], [ %170, %167 ]
  %179 = bitcast %struct.JQUANT_TBL* %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %177, i64 128, i1 false)
  %180 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %169, align 8
  %181 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %180, i64 0, i32 1
  store i32 0, i32* %181, align 4
  br label %182

182:                                              ; preds = %176, %58
  %183 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 2
  %184 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %183, align 8
  %185 = icmp eq %struct.JQUANT_TBL* %184, null
  br i1 %185, label %201, label %186

186:                                              ; preds = %182
  %187 = bitcast %struct.JQUANT_TBL* %184 to i8*
  %188 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 16, i64 2
  %189 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %188, align 8
  %190 = icmp eq %struct.JQUANT_TBL* %189, null
  br i1 %190, label %191, label %195

191:                                              ; preds = %186
  %192 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %20) #3
  store %struct.JQUANT_TBL* %192, %struct.JQUANT_TBL** %188, align 8
  %193 = bitcast %struct.JQUANT_TBL** %183 to i8**
  %194 = load i8*, i8** %193, align 8
  br label %195

195:                                              ; preds = %186, %191
  %196 = phi i8* [ %194, %191 ], [ %187, %186 ]
  %197 = phi %struct.JQUANT_TBL* [ %192, %191 ], [ %189, %186 ]
  %198 = bitcast %struct.JQUANT_TBL* %197 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %196, i64 128, i1 false)
  %199 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %188, align 8
  %200 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %199, i64 0, i32 1
  store i32 0, i32* %200, align 4
  br label %201

201:                                              ; preds = %195, %182
  %202 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 3
  %203 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %202, align 8
  %204 = icmp eq %struct.JQUANT_TBL* %203, null
  br i1 %204, label %220, label %205

205:                                              ; preds = %201
  %206 = bitcast %struct.JQUANT_TBL* %203 to i8*
  %207 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 16, i64 3
  %208 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %207, align 8
  %209 = icmp eq %struct.JQUANT_TBL* %208, null
  br i1 %209, label %210, label %214

210:                                              ; preds = %205
  %211 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %20) #3
  store %struct.JQUANT_TBL* %211, %struct.JQUANT_TBL** %207, align 8
  %212 = bitcast %struct.JQUANT_TBL** %202 to i8**
  %213 = load i8*, i8** %212, align 8
  br label %214

214:                                              ; preds = %205, %210
  %215 = phi i8* [ %213, %210 ], [ %206, %205 ]
  %216 = phi %struct.JQUANT_TBL* [ %211, %210 ], [ %208, %205 ]
  %217 = bitcast %struct.JQUANT_TBL* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %217, i8* align 4 %215, i64 128, i1 false)
  %218 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %207, align 8
  %219 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %218, i64 0, i32 1
  store i32 0, i32* %219, align 4
  br label %220

220:                                              ; preds = %214, %201
  %221 = load i32, i32* %27, align 8
  %222 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %1, i64 0, i32 13
  store i32 %221, i32* %222, align 4
  %223 = add i32 %221, -1
  %224 = icmp ugt i32 %223, 9
  br i1 %224, label %62, label %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @jpeg_set_defaults(%struct.jpeg_compress_struct*) local_unnamed_addr #1

declare void @jpeg_set_colorspace(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #1

declare %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @jinit_c_master_control(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #1

declare void @jinit_phuff_encoder(%struct.jpeg_compress_struct*) local_unnamed_addr #1

declare void @jinit_huff_encoder(%struct.jpeg_compress_struct*) local_unnamed_addr #1

declare void @jinit_marker_writer(%struct.jpeg_compress_struct*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_coef(%struct.jpeg_compress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %4 = bitcast %struct.jpeg_c_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = icmp eq i32 %1, 2
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 4, i32* %10, align 8
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %12, align 8
  %14 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %13(%struct.jpeg_common_struct* %14) #3
  br label %15

15:                                               ; preds = %2, %7
  %16 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  store i32 0, i32* %16, align 8
  %17 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %36, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %17, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -1
  %27 = icmp ult i32 %23, %26
  %28 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 0
  %29 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %28, align 8
  br i1 %27, label %30, label %33

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  br label %36

33:                                               ; preds = %21
  %34 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 18
  %35 = load i32, i32* %34, align 8
  br label %36

36:                                               ; preds = %15, %30, %33
  %37 = phi i32 [ %32, %30 ], [ %35, %33 ], [ 1, %15 ]
  %38 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %17, i64 0, i32 4
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %17, i64 0, i32 2
  store i32 0, i32* %39, align 4
  %40 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %17, i64 0, i32 3
  store i32 0, i32* %40, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @compress_output(%struct.jpeg_compress_struct*, i8*** nocapture readnone) #0 {
  %3 = alloca [4 x [64 x i16]**], align 16
  %4 = alloca [10 x [64 x i16]*], align 16
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %6 = bitcast %struct.jpeg_c_coef_controller** %5 to %struct.my_coef_controller**
  %7 = load %struct.my_coef_controller*, %struct.my_coef_controller** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -1
  %14 = bitcast [4 x [64 x i16]**]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #3
  %15 = bitcast [10 x [64 x i16]*]* %4 to i8*
  %16 = bitcast [4 x [64 x i16]**]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 80, i1 false)
  %17 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %48

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %22 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %23 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 5
  %24 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 1
  br label %25

25:                                               ; preds = %20, %25
  %26 = phi i64 [ 0, %20 ], [ %44, %25 ]
  %27 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %26
  %28 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %27, align 8
  %29 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %21, align 8
  %30 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %29, i64 0, i32 8
  %31 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %30, align 8
  %32 = load %struct.jvirt_barray_control**, %struct.jvirt_barray_control*** %23, align 8
  %33 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %28, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %32, i64 %35
  %37 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %36, align 8
  %38 = load i32, i32* %24, align 8
  %39 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %28, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = mul i32 %40, %38
  %42 = tail call [64 x i16]** %31(%struct.jpeg_common_struct* %22, %struct.jvirt_barray_control* %37, i32 %41, i32 %40, i32 0) #3
  %43 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %3, i64 0, i64 %26
  store [64 x i16]** %42, [64 x i16]*** %43, align 8
  %44 = add nuw nsw i64 %26, 1
  %45 = load i32, i32* %17, align 4
  %46 = sext i32 %45 to i64
  %47 = icmp slt i64 %44, %46
  br i1 %47, label %25, label %48

48:                                               ; preds = %25, %2
  %49 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 3
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %50, %52
  br i1 %53, label %54, label %222

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 2
  %56 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 1
  %57 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %58 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %4, i64 0, i64 0
  %59 = sext i32 %50 to i64
  %60 = load i32, i32* %55, align 4
  br label %61

61:                                               ; preds = %54, %217
  %62 = phi i32 [ %52, %54 ], [ %218, %217 ]
  %63 = phi i32 [ %60, %54 ], [ 0, %217 ]
  %64 = phi i64 [ %59, %54 ], [ %219, %217 ]
  %65 = load i32, i32* %8, align 8
  %66 = icmp ult i32 %63, %65
  br i1 %66, label %67, label %217

67:                                               ; preds = %61, %211
  %68 = phi i32 [ %212, %211 ], [ %63, %61 ]
  %69 = load i32, i32* %17, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %203

71:                                               ; preds = %67
  %72 = icmp ult i32 %68, %10
  br label %73

73:                                               ; preds = %71, %197
  %74 = phi i32 [ %69, %71 ], [ %198, %197 ]
  %75 = phi i64 [ 0, %71 ], [ %200, %197 ]
  %76 = phi i32 [ 0, %71 ], [ %199, %197 ]
  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %75
  %78 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %78, i64 0, i32 13
  %80 = load i32, i32* %79, align 4
  %81 = mul i32 %80, %68
  br i1 %72, label %85, label %82

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %78, i64 0, i32 17
  %84 = load i32, i32* %83, align 4
  br label %85

85:                                               ; preds = %73, %82
  %86 = phi i32 [ %84, %82 ], [ %80, %73 ]
  %87 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %78, i64 0, i32 14
  %88 = load i32, i32* %87, align 8
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %197

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %78, i64 0, i32 18
  %92 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %3, i64 0, i64 %75
  %93 = zext i32 %81 to i64
  %94 = icmp sgt i32 %86, 0
  %95 = add i32 %86, -1
  %96 = zext i32 %95 to i64
  %97 = add nuw nsw i64 %96, 1
  %98 = xor i1 %94, true
  %99 = icmp ult i64 %97, 4
  %100 = and i64 %97, 8589934588
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i64 %97, %100
  br label %103

103:                                              ; preds = %90, %188
  %104 = phi i32 [ %80, %90 ], [ %189, %188 ]
  %105 = phi i64 [ 0, %90 ], [ %191, %188 ]
  %106 = phi i32 [ %76, %90 ], [ %190, %188 ]
  %107 = load i32, i32* %56, align 8
  %108 = icmp ult i32 %107, %13
  %109 = add nsw i64 %105, %64
  br i1 %108, label %115, label %110

110:                                              ; preds = %103
  %111 = load i32, i32* %91, align 8
  %112 = sext i32 %111 to i64
  %113 = icmp sge i64 %109, %112
  %114 = or i1 %113, %98
  br i1 %114, label %163, label %116

115:                                              ; preds = %103
  br i1 %94, label %116, label %163

116:                                              ; preds = %110, %115
  %117 = load [64 x i16]**, [64 x i16]*** %92, align 8
  %118 = getelementptr inbounds [64 x i16]*, [64 x i16]** %117, i64 %109
  %119 = load [64 x i16]*, [64 x i16]** %118, align 8
  %120 = getelementptr inbounds [64 x i16], [64 x i16]* %119, i64 %93
  %121 = sext i32 %106 to i64
  br i1 %99, label %146, label %122

122:                                              ; preds = %116
  %123 = add nsw i64 %100, %121
  %124 = getelementptr [64 x i16], [64 x i16]* %120, i64 %100
  br label %125

125:                                              ; preds = %125, %122
  %126 = phi i64 [ 0, %122 ], [ %143, %125 ]
  %127 = add i64 %126, %121
  %128 = getelementptr [64 x i16], [64 x i16]* %120, i64 %126
  %129 = or i64 %126, 1
  %130 = getelementptr [64 x i16], [64 x i16]* %120, i64 %129
  %131 = insertelement <2 x [64 x i16]*> undef, [64 x i16]* %128, i32 0
  %132 = insertelement <2 x [64 x i16]*> %131, [64 x i16]* %130, i32 1
  %133 = or i64 %126, 2
  %134 = getelementptr [64 x i16], [64 x i16]* %120, i64 %133
  %135 = or i64 %126, 3
  %136 = getelementptr [64 x i16], [64 x i16]* %120, i64 %135
  %137 = insertelement <2 x [64 x i16]*> undef, [64 x i16]* %134, i32 0
  %138 = insertelement <2 x [64 x i16]*> %137, [64 x i16]* %136, i32 1
  %139 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %4, i64 0, i64 %127
  %140 = bitcast [64 x i16]** %139 to <2 x [64 x i16]*>*
  store <2 x [64 x i16]*> %132, <2 x [64 x i16]*>* %140, align 8
  %141 = getelementptr inbounds [64 x i16]*, [64 x i16]** %139, i64 2
  %142 = bitcast [64 x i16]** %141 to <2 x [64 x i16]*>*
  store <2 x [64 x i16]*> %138, <2 x [64 x i16]*>* %142, align 8
  %143 = add i64 %126, 4
  %144 = icmp eq i64 %143, %100
  br i1 %144, label %145, label %125, !llvm.loop !2

145:                                              ; preds = %125
  br i1 %102, label %159, label %146

146:                                              ; preds = %145, %116
  %147 = phi i64 [ %121, %116 ], [ %123, %145 ]
  %148 = phi [64 x i16]* [ %120, %116 ], [ %124, %145 ]
  %149 = phi i32 [ 0, %116 ], [ %101, %145 ]
  br label %150

150:                                              ; preds = %146, %150
  %151 = phi i64 [ %155, %150 ], [ %147, %146 ]
  %152 = phi [64 x i16]* [ %154, %150 ], [ %148, %146 ]
  %153 = phi i32 [ %157, %150 ], [ %149, %146 ]
  %154 = getelementptr inbounds [64 x i16], [64 x i16]* %152, i64 1
  %155 = add nsw i64 %151, 1
  %156 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %4, i64 0, i64 %151
  store [64 x i16]* %152, [64 x i16]** %156, align 8
  %157 = add nuw nsw i32 %153, 1
  %158 = icmp eq i32 %157, %86
  br i1 %158, label %159, label %150, !llvm.loop !4

159:                                              ; preds = %150, %145
  %160 = phi i64 [ %123, %145 ], [ %155, %150 ]
  %161 = trunc i64 %160 to i32
  %162 = load i32, i32* %79, align 4
  br label %163

163:                                              ; preds = %110, %159, %115
  %164 = phi i32 [ %104, %110 ], [ %104, %115 ], [ %162, %159 ]
  %165 = phi i32 [ %106, %110 ], [ %106, %115 ], [ %161, %159 ]
  %166 = phi i32 [ 0, %110 ], [ 0, %115 ], [ %86, %159 ]
  %167 = icmp slt i32 %166, %164
  br i1 %167, label %168, label %188

168:                                              ; preds = %163
  %169 = sext i32 %165 to i64
  br label %170

170:                                              ; preds = %168, %170
  %171 = phi i64 [ %169, %168 ], [ %182, %170 ]
  %172 = phi i32 [ %166, %168 ], [ %183, %170 ]
  %173 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 6, i64 %171
  %174 = load [64 x i16]*, [64 x i16]** %173, align 8
  %175 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %4, i64 0, i64 %171
  store [64 x i16]* %174, [64 x i16]** %175, align 8
  %176 = add nsw i64 %171, -1
  %177 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %4, i64 0, i64 %176
  %178 = load [64 x i16]*, [64 x i16]** %177, align 8
  %179 = getelementptr inbounds [64 x i16], [64 x i16]* %178, i64 0, i64 0
  %180 = load i16, i16* %179, align 2
  %181 = getelementptr inbounds [64 x i16], [64 x i16]* %174, i64 0, i64 0
  store i16 %180, i16* %181, align 2
  %182 = add nsw i64 %171, 1
  %183 = add nuw nsw i32 %172, 1
  %184 = load i32, i32* %79, align 4
  %185 = icmp slt i32 %183, %184
  br i1 %185, label %170, label %186

186:                                              ; preds = %170
  %187 = trunc i64 %182 to i32
  br label %188

188:                                              ; preds = %186, %163
  %189 = phi i32 [ %164, %163 ], [ %184, %186 ]
  %190 = phi i32 [ %165, %163 ], [ %187, %186 ]
  %191 = add nuw nsw i64 %105, 1
  %192 = load i32, i32* %87, align 8
  %193 = sext i32 %192 to i64
  %194 = icmp slt i64 %191, %193
  br i1 %194, label %103, label %195

195:                                              ; preds = %188
  %196 = load i32, i32* %17, align 4
  br label %197

197:                                              ; preds = %195, %85
  %198 = phi i32 [ %74, %85 ], [ %196, %195 ]
  %199 = phi i32 [ %76, %85 ], [ %190, %195 ]
  %200 = add nuw nsw i64 %75, 1
  %201 = sext i32 %198 to i64
  %202 = icmp slt i64 %200, %201
  br i1 %202, label %73, label %203

203:                                              ; preds = %197, %67
  %204 = load %struct.jpeg_entropy_encoder*, %struct.jpeg_entropy_encoder** %57, align 8
  %205 = getelementptr inbounds %struct.jpeg_entropy_encoder, %struct.jpeg_entropy_encoder* %204, i64 0, i32 1
  %206 = load i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %205, align 8
  %207 = call i32 %206(%struct.jpeg_compress_struct* %0, [64 x i16]** nonnull %58) #3
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %211

209:                                              ; preds = %203
  %210 = trunc i64 %64 to i32
  store i32 %210, i32* %49, align 8
  store i32 %68, i32* %55, align 4
  br label %248

211:                                              ; preds = %203
  %212 = add nuw i32 %68, 1
  %213 = load i32, i32* %8, align 8
  %214 = icmp ult i32 %212, %213
  br i1 %214, label %67, label %215

215:                                              ; preds = %211
  %216 = load i32, i32* %51, align 4
  br label %217

217:                                              ; preds = %215, %61
  %218 = phi i32 [ %216, %215 ], [ %62, %61 ]
  store i32 0, i32* %55, align 4
  %219 = add nsw i64 %64, 1
  %220 = sext i32 %218 to i64
  %221 = icmp slt i64 %219, %220
  br i1 %221, label %61, label %222

222:                                              ; preds = %217, %48
  %223 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 1
  %224 = load i32, i32* %223, align 8
  %225 = add i32 %224, 1
  store i32 %225, i32* %223, align 8
  %226 = load %struct.my_coef_controller*, %struct.my_coef_controller** %6, align 8
  %227 = load i32, i32* %17, align 4
  %228 = icmp sgt i32 %227, 1
  br i1 %228, label %243, label %229

229:                                              ; preds = %222
  %230 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %226, i64 0, i32 1
  %231 = load i32, i32* %230, align 8
  %232 = load i32, i32* %11, align 8
  %233 = add i32 %232, -1
  %234 = icmp ult i32 %231, %233
  %235 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 0
  %236 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %235, align 8
  br i1 %234, label %237, label %240

237:                                              ; preds = %229
  %238 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %236, i64 0, i32 3
  %239 = load i32, i32* %238, align 4
  br label %243

240:                                              ; preds = %229
  %241 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %236, i64 0, i32 18
  %242 = load i32, i32* %241, align 8
  br label %243

243:                                              ; preds = %222, %237, %240
  %244 = phi i32 [ %239, %237 ], [ %242, %240 ], [ 1, %222 ]
  %245 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %226, i64 0, i32 4
  store i32 %244, i32* %245, align 4
  %246 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %226, i64 0, i32 2
  store i32 0, i32* %246, align 4
  %247 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %226, i64 0, i32 3
  store i32 0, i32* %247, align 8
  br label %248

248:                                              ; preds = %243, %209
  %249 = phi i32 [ 0, %209 ], [ 1, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #3
  ret i32 %249
}

declare void @jzero_far(i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
