; ModuleID = '../../third_party/icu/source/common/ucnvlat1.cpp'
source_filename = "../../third_party/icu/source/common/ucnvlat1.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque

@_ZL11_Latin1Impl = internal constant %struct.UConverterImpl { i32 3, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* null, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL27_Latin1ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL27_Latin1ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL29_Latin1FromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL29_Latin1FromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL19_Latin1GetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* null, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL20_Latin1GetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL19ucnv_Latin1FromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@_Latin1Data_69 = hidden constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ [10 x i8], [50 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL17_Latin1StaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL11_Latin1Impl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL10_ASCIIImpl = internal constant %struct.UConverterImpl { i32 26, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* null, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_ASCIIToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_ASCIIToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL29_Latin1FromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL29_Latin1FromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL18_ASCIIGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* null, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL19_ASCIIGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL18ucnv_ASCIIFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@_ASCIIData_69 = hidden local_unnamed_addr constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL16_ASCIIStaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL10_ASCIIImpl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL17_Latin1StaticData = internal constant { i32, <{ [10 x i8], [50 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ [10 x i8], [50 x i8] }> <{ [10 x i8] c"ISO-8859-1", [50 x i8] zeroinitializer }>, i32 819, i8 0, i8 3, i8 1, i8 1, [4 x i8] c"\1A\00\00\00", i8 1, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@_ZL16_ASCIIStaticData = internal constant { i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ [8 x i8], [52 x i8] }> <{ [8 x i8] c"US-ASCII", [52 x i8] zeroinitializer }>, i32 367, i8 0, i8 26, i8 1, i8 1, [4 x i8] c"\1A\00\00\00", i8 1, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL27_Latin1ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %8 = bitcast i16** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint i16* %6 to i64
  %11 = sub i64 %9, %10
  %12 = lshr exact i64 %11, 1
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint i8* %4 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = icmp sgt i32 %21, %13
  br i1 %22, label %23, label %24

23:                                               ; preds = %2
  store i32 15, i32* %1, align 4
  br label %24

24:                                               ; preds = %2, %23
  %25 = phi i32 [ %13, %23 ], [ %21, %2 ]
  %26 = icmp sgt i32 %25, 7
  br i1 %26, label %27, label %89

27:                                               ; preds = %24
  %28 = lshr i32 %25, 3
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %4, %27 ], [ %64, %29 ]
  %31 = phi i16* [ %6, %27 ], [ %63, %29 ]
  %32 = phi i32 [ %28, %27 ], [ %65, %29 ]
  %33 = load i8, i8* %30, align 1
  %34 = zext i8 %33 to i16
  store i16 %34, i16* %31, align 2
  %35 = getelementptr inbounds i8, i8* %30, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds i8, i8* %30, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %41, i16* %42, align 2
  %43 = getelementptr inbounds i8, i8* %30, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %45, i16* %46, align 2
  %47 = getelementptr inbounds i8, i8* %30, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %49, i16* %50, align 2
  %51 = getelementptr inbounds i8, i8* %30, i64 5
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds i8, i8* %30, i64 6
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %57, i16* %58, align 2
  %59 = getelementptr inbounds i8, i8* %30, i64 7
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %61, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %31, i64 8
  %64 = getelementptr inbounds i8, i8* %30, i64 8
  %65 = add nsw i32 %32, -1
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %29, label %67

67:                                               ; preds = %29
  %68 = and i32 %25, 7
  %69 = icmp eq i32* %15, null
  br i1 %69, label %89, label %70

70:                                               ; preds = %67, %70
  %71 = phi i32* [ %86, %70 ], [ %15, %67 ]
  %72 = phi i32 [ %84, %70 ], [ 0, %67 ]
  %73 = phi i32 [ %87, %70 ], [ %28, %67 ]
  store i32 %72, i32* %71, align 4
  %74 = getelementptr inbounds i32, i32* %71, i64 1
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  %77 = or <4 x i32> %76, <i32 1, i32 2, i32 3, i32 4>
  %78 = or i32 %72, 5
  %79 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %79, align 4
  %80 = or i32 %72, 6
  %81 = getelementptr inbounds i32, i32* %71, i64 5
  store i32 %78, i32* %81, align 4
  %82 = or i32 %72, 7
  %83 = getelementptr inbounds i32, i32* %71, i64 6
  store i32 %80, i32* %83, align 4
  %84 = add nuw nsw i32 %72, 8
  %85 = getelementptr inbounds i32, i32* %71, i64 7
  store i32 %82, i32* %85, align 4
  %86 = getelementptr inbounds i32, i32* %71, i64 8
  %87 = add nsw i32 %73, -1
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %70, label %89

89:                                               ; preds = %70, %67, %24
  %90 = phi i8* [ %4, %24 ], [ %64, %67 ], [ %64, %70 ]
  %91 = phi i16* [ %6, %24 ], [ %63, %67 ], [ %63, %70 ]
  %92 = phi i32 [ %25, %24 ], [ %68, %67 ], [ %68, %70 ]
  %93 = phi i32* [ %15, %24 ], [ null, %67 ], [ %86, %70 ]
  %94 = phi i32 [ 0, %24 ], [ 0, %67 ], [ %84, %70 ]
  %95 = bitcast i16* %91 to i8*
  %96 = icmp sgt i32 %92, 0
  br i1 %96, label %97, label %188

97:                                               ; preds = %89
  %98 = add nsw i32 %92, -1
  %99 = zext i32 %98 to i64
  %100 = add nuw nsw i64 %99, 1
  %101 = icmp ult i64 %100, 16
  br i1 %101, label %174, label %102

102:                                              ; preds = %97
  %103 = add nsw i32 %92, -1
  %104 = zext i32 %103 to i64
  %105 = add nuw nsw i64 %104, 1
  %106 = getelementptr i16, i16* %91, i64 %105
  %107 = bitcast i16* %106 to i8*
  %108 = getelementptr i8, i8* %90, i64 %105
  %109 = icmp ugt i8* %108, %95
  %110 = icmp ult i8* %90, %107
  %111 = and i1 %109, %110
  br i1 %111, label %174, label %112

112:                                              ; preds = %102
  %113 = and i64 %100, 8589934576
  %114 = trunc i64 %113 to i32
  %115 = sub i32 %92, %114
  %116 = getelementptr i16, i16* %91, i64 %113
  %117 = getelementptr i8, i8* %90, i64 %113
  %118 = add nsw i64 %113, -16
  %119 = lshr exact i64 %118, 4
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %156, label %123

123:                                              ; preds = %112
  %124 = sub nuw nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %153, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %154, %125 ]
  %128 = getelementptr i16, i16* %91, i64 %126
  %129 = getelementptr i8, i8* %90, i64 %126
  %130 = bitcast i8* %129 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1, !alias.scope !2
  %132 = getelementptr i8, i8* %129, i64 8
  %133 = bitcast i8* %132 to <8 x i8>*
  %134 = load <8 x i8>, <8 x i8>* %133, align 1, !alias.scope !2
  %135 = zext <8 x i8> %131 to <8 x i16>
  %136 = zext <8 x i8> %134 to <8 x i16>
  %137 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !5, !noalias !2
  %138 = getelementptr i16, i16* %128, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2, !alias.scope !5, !noalias !2
  %140 = or i64 %126, 16
  %141 = getelementptr i16, i16* %91, i64 %140
  %142 = getelementptr i8, i8* %90, i64 %140
  %143 = bitcast i8* %142 to <8 x i8>*
  %144 = load <8 x i8>, <8 x i8>* %143, align 1, !alias.scope !2
  %145 = getelementptr i8, i8* %142, i64 8
  %146 = bitcast i8* %145 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !2
  %148 = zext <8 x i8> %144 to <8 x i16>
  %149 = zext <8 x i8> %147 to <8 x i16>
  %150 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %150, align 2, !alias.scope !5, !noalias !2
  %151 = getelementptr i16, i16* %141, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %152, align 2, !alias.scope !5, !noalias !2
  %153 = add i64 %126, 32
  %154 = add i64 %127, -2
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %125, !llvm.loop !7

156:                                              ; preds = %125, %112
  %157 = phi i64 [ 0, %112 ], [ %153, %125 ]
  %158 = icmp eq i64 %121, 0
  br i1 %158, label %172, label %159

159:                                              ; preds = %156
  %160 = getelementptr i16, i16* %91, i64 %157
  %161 = getelementptr i8, i8* %90, i64 %157
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1, !alias.scope !2
  %164 = getelementptr i8, i8* %161, i64 8
  %165 = bitcast i8* %164 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 1, !alias.scope !2
  %167 = zext <8 x i8> %163 to <8 x i16>
  %168 = zext <8 x i8> %166 to <8 x i16>
  %169 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !5, !noalias !2
  %170 = getelementptr i16, i16* %160, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %171, align 2, !alias.scope !5, !noalias !2
  br label %172

172:                                              ; preds = %156, %159
  %173 = icmp eq i64 %100, %113
  br i1 %173, label %188, label %174

174:                                              ; preds = %172, %102, %97
  %175 = phi i32 [ %92, %102 ], [ %92, %97 ], [ %115, %172 ]
  %176 = phi i16* [ %91, %102 ], [ %91, %97 ], [ %116, %172 ]
  %177 = phi i8* [ %90, %102 ], [ %90, %97 ], [ %117, %172 ]
  br label %178

178:                                              ; preds = %174, %178
  %179 = phi i32 [ %186, %178 ], [ %175, %174 ]
  %180 = phi i16* [ %185, %178 ], [ %176, %174 ]
  %181 = phi i8* [ %182, %178 ], [ %177, %174 ]
  %182 = getelementptr inbounds i8, i8* %181, i64 1
  %183 = load i8, i8* %181, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i16, i16* %180, i64 1
  store i16 %184, i16* %180, align 2
  %186 = add nsw i32 %179, -1
  %187 = icmp sgt i32 %186, 0
  br i1 %187, label %178, label %188, !llvm.loop !9

188:                                              ; preds = %178, %172, %89
  %189 = phi i8* [ %90, %89 ], [ %117, %172 ], [ %182, %178 ]
  %190 = phi i16* [ %91, %89 ], [ %116, %172 ], [ %185, %178 ]
  store i8* %189, i8** %3, align 8
  store i16* %190, i16** %5, align 8
  %191 = icmp eq i32* %93, null
  br i1 %191, label %278, label %192

192:                                              ; preds = %188
  br i1 %96, label %193, label %276

193:                                              ; preds = %192
  %194 = add i32 %92, %94
  %195 = add nsw i32 %92, -1
  %196 = zext i32 %195 to i64
  %197 = add nuw nsw i64 %196, 1
  %198 = icmp ult i64 %197, 8
  br i1 %198, label %267, label %199

199:                                              ; preds = %193
  %200 = and i64 %197, 8589934584
  %201 = trunc i64 %200 to i32
  %202 = add i32 %94, %201
  %203 = getelementptr i32, i32* %93, i64 %200
  %204 = insertelement <4 x i32> undef, i32 %94, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  %206 = add <4 x i32> %205, <i32 0, i32 1, i32 2, i32 3>
  %207 = add nsw i64 %200, -8
  %208 = lshr exact i64 %207, 3
  %209 = add nuw nsw i64 %208, 1
  %210 = and i64 %209, 3
  %211 = icmp ult i64 %207, 24
  br i1 %211, label %248, label %212

212:                                              ; preds = %199
  %213 = sub nsw i64 %209, %210
  br label %214

214:                                              ; preds = %214, %212
  %215 = phi i64 [ 0, %212 ], [ %244, %214 ]
  %216 = phi <4 x i32> [ %206, %212 ], [ %245, %214 ]
  %217 = phi i64 [ %213, %212 ], [ %246, %214 ]
  %218 = add <4 x i32> %216, <i32 4, i32 4, i32 4, i32 4>
  %219 = getelementptr i32, i32* %93, i64 %215
  %220 = bitcast i32* %219 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4
  %221 = getelementptr i32, i32* %219, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %222, align 4
  %223 = or i64 %215, 8
  %224 = add <4 x i32> %216, <i32 8, i32 8, i32 8, i32 8>
  %225 = add <4 x i32> %216, <i32 12, i32 12, i32 12, i32 12>
  %226 = getelementptr i32, i32* %93, i64 %223
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %227, align 4
  %228 = getelementptr i32, i32* %226, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %229, align 4
  %230 = or i64 %215, 16
  %231 = add <4 x i32> %216, <i32 16, i32 16, i32 16, i32 16>
  %232 = add <4 x i32> %216, <i32 20, i32 20, i32 20, i32 20>
  %233 = getelementptr i32, i32* %93, i64 %230
  %234 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %234, align 4
  %235 = getelementptr i32, i32* %233, i64 4
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %236, align 4
  %237 = or i64 %215, 24
  %238 = add <4 x i32> %216, <i32 24, i32 24, i32 24, i32 24>
  %239 = add <4 x i32> %216, <i32 28, i32 28, i32 28, i32 28>
  %240 = getelementptr i32, i32* %93, i64 %237
  %241 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %241, align 4
  %242 = getelementptr i32, i32* %240, i64 4
  %243 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> %239, <4 x i32>* %243, align 4
  %244 = add i64 %215, 32
  %245 = add <4 x i32> %216, <i32 32, i32 32, i32 32, i32 32>
  %246 = add i64 %217, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %214, !llvm.loop !10

248:                                              ; preds = %214, %199
  %249 = phi i64 [ 0, %199 ], [ %244, %214 ]
  %250 = phi <4 x i32> [ %206, %199 ], [ %245, %214 ]
  %251 = icmp eq i64 %210, 0
  br i1 %251, label %265, label %252

252:                                              ; preds = %248, %252
  %253 = phi i64 [ %261, %252 ], [ %249, %248 ]
  %254 = phi <4 x i32> [ %262, %252 ], [ %250, %248 ]
  %255 = phi i64 [ %263, %252 ], [ %210, %248 ]
  %256 = add <4 x i32> %254, <i32 4, i32 4, i32 4, i32 4>
  %257 = getelementptr i32, i32* %93, i64 %253
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %258, align 4
  %259 = getelementptr i32, i32* %257, i64 4
  %260 = bitcast i32* %259 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %260, align 4
  %261 = add i64 %253, 8
  %262 = add <4 x i32> %254, <i32 8, i32 8, i32 8, i32 8>
  %263 = add i64 %255, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %252, !llvm.loop !11

265:                                              ; preds = %252, %248
  %266 = icmp eq i64 %197, %200
  br i1 %266, label %276, label %267

267:                                              ; preds = %265, %193
  %268 = phi i32 [ %94, %193 ], [ %202, %265 ]
  %269 = phi i32* [ %93, %193 ], [ %203, %265 ]
  br label %270

270:                                              ; preds = %267, %270
  %271 = phi i32 [ %273, %270 ], [ %268, %267 ]
  %272 = phi i32* [ %274, %270 ], [ %269, %267 ]
  %273 = add i32 %271, 1
  %274 = getelementptr inbounds i32, i32* %272, i64 1
  store i32 %271, i32* %272, align 4
  %275 = icmp eq i32 %273, %194
  br i1 %275, label %276, label %270, !llvm.loop !13

276:                                              ; preds = %270, %265, %192
  %277 = phi i32* [ %93, %192 ], [ %203, %265 ], [ %274, %270 ]
  store i32* %277, i32** %14, align 8
  br label %278

278:                                              ; preds = %188, %276
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL29_Latin1FromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = sub i64 %13, %14
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 6
  %20 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %19, align 8
  %21 = icmp eq %struct.UConverterSharedData* %20, @_Latin1Data_69
  %22 = select i1 %21, i32 255, i32 127
  %23 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 17
  %24 = load i32, i32* %23, align 4
  %25 = icmp ne i32 %24, 0
  %26 = sext i1 %25 to i32
  %27 = ptrtoint i16* %8 to i64
  %28 = ptrtoint i16* %6 to i64
  %29 = sub i64 %27, %28
  %30 = lshr exact i64 %29, 1
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, %16
  %33 = select i1 %32, i32 %31, i32 %16
  %34 = icmp sgt i32 %33, 0
  %35 = and i1 %25, %34
  br i1 %35, label %193, label %36

36:                                               ; preds = %2
  %37 = icmp sgt i32 %33, 15
  br i1 %37, label %38, label %165

38:                                               ; preds = %36
  %39 = lshr i32 %33, 4
  br label %40

40:                                               ; preds = %125, %38
  %41 = phi i16* [ %6, %38 ], [ %118, %125 ]
  %42 = phi i8* [ %10, %38 ], [ %122, %125 ]
  %43 = phi i32 [ %39, %38 ], [ %126, %125 ]
  %44 = getelementptr inbounds i16, i16* %41, i64 1
  %45 = load i16, i16* %41, align 2
  %46 = trunc i16 %45 to i8
  %47 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %46, i8* %42, align 1
  %48 = getelementptr inbounds i16, i16* %41, i64 2
  %49 = load i16, i16* %44, align 2
  %50 = or i16 %49, %45
  %51 = trunc i16 %49 to i8
  %52 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %51, i8* %47, align 1
  %53 = getelementptr inbounds i16, i16* %41, i64 3
  %54 = load i16, i16* %48, align 2
  %55 = or i16 %50, %54
  %56 = trunc i16 %54 to i8
  %57 = getelementptr inbounds i8, i8* %42, i64 3
  store i8 %56, i8* %52, align 1
  %58 = getelementptr inbounds i16, i16* %41, i64 4
  %59 = load i16, i16* %53, align 2
  %60 = or i16 %55, %59
  %61 = trunc i16 %59 to i8
  %62 = getelementptr inbounds i8, i8* %42, i64 4
  store i8 %61, i8* %57, align 1
  %63 = getelementptr inbounds i16, i16* %41, i64 5
  %64 = load i16, i16* %58, align 2
  %65 = or i16 %60, %64
  %66 = trunc i16 %64 to i8
  %67 = getelementptr inbounds i8, i8* %42, i64 5
  store i8 %66, i8* %62, align 1
  %68 = getelementptr inbounds i16, i16* %41, i64 6
  %69 = load i16, i16* %63, align 2
  %70 = or i16 %65, %69
  %71 = trunc i16 %69 to i8
  %72 = getelementptr inbounds i8, i8* %42, i64 6
  store i8 %71, i8* %67, align 1
  %73 = getelementptr inbounds i16, i16* %41, i64 7
  %74 = load i16, i16* %68, align 2
  %75 = or i16 %70, %74
  %76 = trunc i16 %74 to i8
  %77 = getelementptr inbounds i8, i8* %42, i64 7
  store i8 %76, i8* %72, align 1
  %78 = getelementptr inbounds i16, i16* %41, i64 8
  %79 = load i16, i16* %73, align 2
  %80 = or i16 %75, %79
  %81 = trunc i16 %79 to i8
  %82 = getelementptr inbounds i8, i8* %42, i64 8
  store i8 %81, i8* %77, align 1
  %83 = getelementptr inbounds i16, i16* %41, i64 9
  %84 = load i16, i16* %78, align 2
  %85 = or i16 %80, %84
  %86 = trunc i16 %84 to i8
  %87 = getelementptr inbounds i8, i8* %42, i64 9
  store i8 %86, i8* %82, align 1
  %88 = getelementptr inbounds i16, i16* %41, i64 10
  %89 = load i16, i16* %83, align 2
  %90 = or i16 %85, %89
  %91 = trunc i16 %89 to i8
  %92 = getelementptr inbounds i8, i8* %42, i64 10
  store i8 %91, i8* %87, align 1
  %93 = getelementptr inbounds i16, i16* %41, i64 11
  %94 = load i16, i16* %88, align 2
  %95 = or i16 %90, %94
  %96 = trunc i16 %94 to i8
  %97 = getelementptr inbounds i8, i8* %42, i64 11
  store i8 %96, i8* %92, align 1
  %98 = getelementptr inbounds i16, i16* %41, i64 12
  %99 = load i16, i16* %93, align 2
  %100 = or i16 %95, %99
  %101 = trunc i16 %99 to i8
  %102 = getelementptr inbounds i8, i8* %42, i64 12
  store i8 %101, i8* %97, align 1
  %103 = getelementptr inbounds i16, i16* %41, i64 13
  %104 = load i16, i16* %98, align 2
  %105 = or i16 %100, %104
  %106 = trunc i16 %104 to i8
  %107 = getelementptr inbounds i8, i8* %42, i64 13
  store i8 %106, i8* %102, align 1
  %108 = getelementptr inbounds i16, i16* %41, i64 14
  %109 = load i16, i16* %103, align 2
  %110 = or i16 %105, %109
  %111 = trunc i16 %109 to i8
  %112 = getelementptr inbounds i8, i8* %42, i64 14
  store i8 %111, i8* %107, align 1
  %113 = getelementptr inbounds i16, i16* %41, i64 15
  %114 = load i16, i16* %108, align 2
  %115 = or i16 %110, %114
  %116 = trunc i16 %114 to i8
  %117 = getelementptr inbounds i8, i8* %42, i64 15
  store i8 %116, i8* %112, align 1
  %118 = getelementptr inbounds i16, i16* %41, i64 16
  %119 = load i16, i16* %113, align 2
  %120 = or i16 %115, %119
  %121 = trunc i16 %119 to i8
  %122 = getelementptr inbounds i8, i8* %42, i64 16
  store i8 %121, i8* %117, align 1
  %123 = zext i16 %120 to i32
  %124 = icmp ult i32 %22, %123
  br i1 %124, label %128, label %125

125:                                              ; preds = %40
  %126 = add nsw i32 %43, -1
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %40, label %128

128:                                              ; preds = %40, %125
  %129 = phi i16* [ %118, %125 ], [ %41, %40 ]
  %130 = phi i8* [ %122, %125 ], [ %42, %40 ]
  %131 = phi i32 [ %126, %125 ], [ %43, %40 ]
  %132 = sub nsw i32 %39, %131
  %133 = shl nsw i32 %132, 4
  %134 = sub nsw i32 %33, %133
  %135 = icmp eq i32* %18, null
  br i1 %135, label %165, label %136

136:                                              ; preds = %128
  %137 = sext i32 %133 to i64
  %138 = getelementptr inbounds i8, i8* %10, i64 %137
  %139 = icmp sgt i32 %132, 0
  br i1 %139, label %140, label %165

140:                                              ; preds = %136, %140
  %141 = phi i32 [ %163, %140 ], [ %132, %136 ]
  %142 = phi i32 [ %161, %140 ], [ %26, %136 ]
  %143 = phi i32* [ %162, %140 ], [ %18, %136 ]
  %144 = getelementptr inbounds i32, i32* %143, i64 1
  store i32 %142, i32* %143, align 4
  %145 = insertelement <4 x i32> undef, i32 %142, i32 0
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> zeroinitializer
  %147 = add nsw <4 x i32> %146, <i32 1, i32 2, i32 3, i32 4>
  %148 = getelementptr inbounds i32, i32* %143, i64 5
  %149 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 4
  %150 = add nsw <4 x i32> %146, <i32 5, i32 6, i32 7, i32 8>
  %151 = getelementptr inbounds i32, i32* %143, i64 9
  %152 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %152, align 4
  %153 = add nsw <4 x i32> %146, <i32 9, i32 10, i32 11, i32 12>
  %154 = add nsw i32 %142, 13
  %155 = getelementptr inbounds i32, i32* %143, i64 13
  %156 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %156, align 4
  %157 = add nsw i32 %142, 14
  %158 = getelementptr inbounds i32, i32* %143, i64 14
  store i32 %154, i32* %155, align 4
  %159 = add nsw i32 %142, 15
  %160 = getelementptr inbounds i32, i32* %143, i64 15
  store i32 %157, i32* %158, align 4
  %161 = add nsw i32 %142, 16
  %162 = getelementptr inbounds i32, i32* %143, i64 16
  store i32 %159, i32* %160, align 4
  %163 = add nsw i32 %141, -1
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %140, label %165

165:                                              ; preds = %140, %136, %128, %36
  %166 = phi i16* [ %6, %36 ], [ %129, %128 ], [ %129, %136 ], [ %129, %140 ]
  %167 = phi i8* [ %10, %36 ], [ %130, %128 ], [ %130, %136 ], [ %130, %140 ]
  %168 = phi i8* [ %10, %36 ], [ %10, %128 ], [ %138, %136 ], [ %138, %140 ]
  %169 = phi i32 [ %33, %36 ], [ %134, %128 ], [ %134, %136 ], [ %134, %140 ]
  %170 = phi i32* [ %18, %36 ], [ null, %128 ], [ %18, %136 ], [ %162, %140 ]
  %171 = phi i32 [ %26, %36 ], [ %26, %128 ], [ %26, %136 ], [ %161, %140 ]
  %172 = icmp sgt i32 %169, 0
  br i1 %172, label %173, label %222

173:                                              ; preds = %165, %181
  %174 = phi i32 [ %184, %181 ], [ %169, %165 ]
  %175 = phi i8* [ %183, %181 ], [ %167, %165 ]
  %176 = phi i16* [ %177, %181 ], [ %166, %165 ]
  %177 = getelementptr inbounds i16, i16* %176, i64 1
  %178 = load i16, i16* %176, align 2
  %179 = zext i16 %178 to i32
  %180 = icmp ult i32 %22, %179
  br i1 %180, label %186, label %181

181:                                              ; preds = %173
  %182 = trunc i16 %178 to i8
  %183 = getelementptr inbounds i8, i8* %175, i64 1
  store i8 %182, i8* %175, align 1
  %184 = add nsw i32 %174, -1
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %173, label %186

186:                                              ; preds = %181, %173
  %187 = phi i8* [ %183, %181 ], [ %175, %173 ]
  %188 = zext i16 %178 to i32
  %189 = icmp ult i32 %22, %188
  br i1 %189, label %190, label %222

190:                                              ; preds = %186
  %191 = and i32 %188, 64512
  %192 = icmp eq i32 %191, 55296
  br i1 %192, label %193, label %212

193:                                              ; preds = %190, %2
  %194 = phi i16* [ %6, %2 ], [ %177, %190 ]
  %195 = phi i8* [ %10, %2 ], [ %187, %190 ]
  %196 = phi i8* [ %10, %2 ], [ %168, %190 ]
  %197 = phi i32* [ %18, %2 ], [ %170, %190 ]
  %198 = phi i32 [ %24, %2 ], [ %188, %190 ]
  %199 = phi i32 [ %26, %2 ], [ %171, %190 ]
  %200 = icmp ult i16* %194, %8
  br i1 %200, label %201, label %211

201:                                              ; preds = %193
  %202 = load i16, i16* %194, align 2
  %203 = zext i16 %202 to i32
  %204 = and i32 %203, 64512
  %205 = icmp eq i32 %204, 56320
  br i1 %205, label %206, label %212

206:                                              ; preds = %201
  %207 = getelementptr inbounds i16, i16* %194, i64 1
  %208 = shl i32 %198, 10
  %209 = add i32 %208, -56613888
  %210 = add i32 %209, %203
  br label %212

211:                                              ; preds = %193
  store i32 %198, i32* %23, align 4
  br label %222

212:                                              ; preds = %206, %201, %190
  %213 = phi i16* [ %177, %190 ], [ %207, %206 ], [ %194, %201 ]
  %214 = phi i8* [ %187, %190 ], [ %195, %206 ], [ %195, %201 ]
  %215 = phi i8* [ %168, %190 ], [ %196, %206 ], [ %196, %201 ]
  %216 = phi i32* [ %170, %190 ], [ %197, %206 ], [ %197, %201 ]
  %217 = phi i32 [ %188, %190 ], [ %210, %206 ], [ %198, %201 ]
  %218 = phi i32 [ %171, %190 ], [ %199, %206 ], [ %199, %201 ]
  %219 = and i32 %217, -2048
  %220 = icmp eq i32 %219, 55296
  %221 = select i1 %220, i32 12, i32 10
  store i32 %221, i32* %1, align 4
  store i32 %217, i32* %23, align 4
  br label %222

222:                                              ; preds = %165, %186, %212, %211
  %223 = phi i16* [ %213, %212 ], [ %194, %211 ], [ %177, %186 ], [ %166, %165 ]
  %224 = phi i8* [ %214, %212 ], [ %195, %211 ], [ %187, %186 ], [ %167, %165 ]
  %225 = phi i8* [ %215, %212 ], [ %196, %211 ], [ %168, %186 ], [ %168, %165 ]
  %226 = phi i32* [ %216, %212 ], [ %197, %211 ], [ %170, %186 ], [ %170, %165 ]
  %227 = phi i32 [ %218, %212 ], [ %199, %211 ], [ %171, %186 ], [ %171, %165 ]
  %228 = icmp eq i32* %226, null
  br i1 %228, label %317, label %229

229:                                              ; preds = %222
  %230 = ptrtoint i8* %224 to i64
  %231 = ptrtoint i8* %225 to i64
  %232 = sub i64 %230, %231
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %317, label %234

234:                                              ; preds = %229
  %235 = icmp ult i64 %232, 8
  br i1 %235, label %305, label %236

236:                                              ; preds = %234
  %237 = and i64 %232, -8
  %238 = sub i64 %232, %237
  %239 = trunc i64 %237 to i32
  %240 = add i32 %227, %239
  %241 = getelementptr i32, i32* %226, i64 %237
  %242 = insertelement <4 x i32> undef, i32 %227, i32 0
  %243 = shufflevector <4 x i32> %242, <4 x i32> undef, <4 x i32> zeroinitializer
  %244 = add <4 x i32> %243, <i32 0, i32 1, i32 2, i32 3>
  %245 = add i64 %237, -8
  %246 = lshr exact i64 %245, 3
  %247 = add nuw nsw i64 %246, 1
  %248 = and i64 %247, 3
  %249 = icmp ult i64 %245, 24
  br i1 %249, label %286, label %250

250:                                              ; preds = %236
  %251 = sub nsw i64 %247, %248
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %282, %252 ]
  %254 = phi <4 x i32> [ %244, %250 ], [ %283, %252 ]
  %255 = phi i64 [ %251, %250 ], [ %284, %252 ]
  %256 = add <4 x i32> %254, <i32 4, i32 4, i32 4, i32 4>
  %257 = getelementptr i32, i32* %226, i64 %253
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %258, align 4
  %259 = getelementptr i32, i32* %257, i64 4
  %260 = bitcast i32* %259 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %260, align 4
  %261 = or i64 %253, 8
  %262 = add <4 x i32> %254, <i32 8, i32 8, i32 8, i32 8>
  %263 = add <4 x i32> %254, <i32 12, i32 12, i32 12, i32 12>
  %264 = getelementptr i32, i32* %226, i64 %261
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %265, align 4
  %266 = getelementptr i32, i32* %264, i64 4
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4
  %268 = or i64 %253, 16
  %269 = add <4 x i32> %254, <i32 16, i32 16, i32 16, i32 16>
  %270 = add <4 x i32> %254, <i32 20, i32 20, i32 20, i32 20>
  %271 = getelementptr i32, i32* %226, i64 %268
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %269, <4 x i32>* %272, align 4
  %273 = getelementptr i32, i32* %271, i64 4
  %274 = bitcast i32* %273 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %274, align 4
  %275 = or i64 %253, 24
  %276 = add <4 x i32> %254, <i32 24, i32 24, i32 24, i32 24>
  %277 = add <4 x i32> %254, <i32 28, i32 28, i32 28, i32 28>
  %278 = getelementptr i32, i32* %226, i64 %275
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %279, align 4
  %280 = getelementptr i32, i32* %278, i64 4
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %281, align 4
  %282 = add i64 %253, 32
  %283 = add <4 x i32> %254, <i32 32, i32 32, i32 32, i32 32>
  %284 = add i64 %255, -4
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %252, !llvm.loop !15

286:                                              ; preds = %252, %236
  %287 = phi i64 [ 0, %236 ], [ %282, %252 ]
  %288 = phi <4 x i32> [ %244, %236 ], [ %283, %252 ]
  %289 = icmp eq i64 %248, 0
  br i1 %289, label %303, label %290

290:                                              ; preds = %286, %290
  %291 = phi i64 [ %299, %290 ], [ %287, %286 ]
  %292 = phi <4 x i32> [ %300, %290 ], [ %288, %286 ]
  %293 = phi i64 [ %301, %290 ], [ %248, %286 ]
  %294 = add <4 x i32> %292, <i32 4, i32 4, i32 4, i32 4>
  %295 = getelementptr i32, i32* %226, i64 %291
  %296 = bitcast i32* %295 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %296, align 4
  %297 = getelementptr i32, i32* %295, i64 4
  %298 = bitcast i32* %297 to <4 x i32>*
  store <4 x i32> %294, <4 x i32>* %298, align 4
  %299 = add i64 %291, 8
  %300 = add <4 x i32> %292, <i32 8, i32 8, i32 8, i32 8>
  %301 = add i64 %293, -1
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %290, !llvm.loop !16

303:                                              ; preds = %290, %286
  %304 = icmp eq i64 %232, %237
  br i1 %304, label %317, label %305

305:                                              ; preds = %303, %234
  %306 = phi i64 [ %232, %234 ], [ %238, %303 ]
  %307 = phi i32 [ %227, %234 ], [ %240, %303 ]
  %308 = phi i32* [ %226, %234 ], [ %241, %303 ]
  br label %309

309:                                              ; preds = %305, %309
  %310 = phi i64 [ %315, %309 ], [ %306, %305 ]
  %311 = phi i32 [ %313, %309 ], [ %307, %305 ]
  %312 = phi i32* [ %314, %309 ], [ %308, %305 ]
  %313 = add nsw i32 %311, 1
  %314 = getelementptr inbounds i32, i32* %312, i64 1
  store i32 %311, i32* %312, align 4
  %315 = add i64 %310, -1
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %309, !llvm.loop !17

317:                                              ; preds = %309, %303, %229, %222
  %318 = phi i32* [ null, %222 ], [ %226, %229 ], [ %241, %303 ], [ %314, %309 ]
  %319 = load i32, i32* %1, align 4
  %320 = icmp slt i32 %319, 1
  %321 = icmp ult i16* %223, %8
  %322 = and i1 %321, %320
  br i1 %322, label %323, label %327

323:                                              ; preds = %317
  %324 = load i8*, i8** %11, align 8
  %325 = icmp ult i8* %224, %324
  br i1 %325, label %327, label %326

326:                                              ; preds = %323
  store i32 15, i32* %1, align 4
  br label %327

327:                                              ; preds = %317, %323, %326
  store i16* %223, i16** %5, align 8
  store i8* %224, i8** %9, align 8
  store i32* %318, i32** %17, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL19_Latin1GetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  store i8* %9, i8** %3, align 8
  %10 = load i8, i8* %4, align 1
  %11 = zext i8 %10 to i32
  br label %13

12:                                               ; preds = %2
  store i32 8, i32* %1, align 4
  br label %13

13:                                               ; preds = %12, %8
  %14 = phi i32 [ %11, %8 ], [ 65535, %12 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20_Latin1GetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode(%struct.UConverter* nocapture readnone, %struct.USetAdder* nocapture readonly, i32, i32* nocapture readnone) #1 {
  %5 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %6 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %5, align 8
  %7 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %8 = load %struct.USet*, %struct.USet** %7, align 8
  tail call void %6(%struct.USet* %8, i32 0, i32 255) #2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL19ucnv_Latin1FromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %5 = load %struct.UConverter*, %struct.UConverter** %4, align 8
  %6 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 12
  %19 = load i8, i8* %18, align 8
  %20 = icmp sgt i8 %19, 0
  br i1 %20, label %21, label %45

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  %23 = load i32, i32* %22, align 8
  %24 = icmp ne i32 %23, 0
  %25 = icmp ult i8* %7, %9
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %45

27:                                               ; preds = %21
  %28 = icmp eq i32 %17, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  store i32 15, i32* %2, align 4
  br label %117

30:                                               ; preds = %27
  %31 = and i32 %23, -2
  %32 = icmp eq i32 %31, 194
  br i1 %32, label %33, label %44

33:                                               ; preds = %30
  %34 = load i8, i8* %7, align 1
  %35 = xor i8 %34, -128
  %36 = icmp ult i8 %35, 64
  br i1 %36, label %37, label %44

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %7, i64 1
  %39 = trunc i32 %23 to i8
  %40 = shl i8 %39, 6
  %41 = or i8 %35, %40
  %42 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %41, i8* %11, align 1
  %43 = add nsw i32 %17, -1
  store i32 0, i32* %22, align 8
  store i8 0, i8* %18, align 8
  br label %45

44:                                               ; preds = %33, %30
  store i32 -127, i32* %2, align 4
  br label %117

45:                                               ; preds = %3, %21, %37
  %46 = phi i8* [ %38, %37 ], [ %7, %21 ], [ %7, %3 ]
  %47 = phi i8* [ %42, %37 ], [ %11, %21 ], [ %11, %3 ]
  %48 = phi i32 [ %43, %37 ], [ %17, %21 ], [ %17, %3 ]
  %49 = icmp ult i8* %46, %9
  br i1 %49, label %50, label %56

50:                                               ; preds = %45
  %51 = getelementptr inbounds i8, i8* %9, i64 -1
  %52 = load i8, i8* %51, align 1
  %53 = add i8 %52, 62
  %54 = icmp ult i8 %53, 51
  %55 = select i1 %54, i8* %51, i8* %9
  br label %56

56:                                               ; preds = %50, %45
  %57 = phi i8* [ %9, %45 ], [ %55, %50 ]
  %58 = icmp ult i8* %46, %57
  br i1 %58, label %59, label %87

59:                                               ; preds = %56, %81
  %60 = phi i32 [ %85, %81 ], [ %48, %56 ]
  %61 = phi i8* [ %84, %81 ], [ %47, %56 ]
  %62 = phi i8* [ %83, %81 ], [ %46, %56 ]
  %63 = icmp sgt i32 %60, 0
  br i1 %63, label %64, label %80

64:                                               ; preds = %59
  %65 = getelementptr inbounds i8, i8* %62, i64 1
  %66 = load i8, i8* %62, align 1
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %81, label %68

68:                                               ; preds = %64
  %69 = and i8 %66, -2
  %70 = icmp eq i8 %69, -62
  br i1 %70, label %71, label %79

71:                                               ; preds = %68
  %72 = load i8, i8* %65, align 1
  %73 = xor i8 %72, -128
  %74 = icmp ult i8 %73, 64
  br i1 %74, label %75, label %79

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %62, i64 2
  %77 = shl i8 %66, 6
  %78 = or i8 %73, %77
  br label %81

79:                                               ; preds = %71, %68
  store i8* %62, i8** %6, align 8
  store i8* %61, i8** %10, align 8
  store i32 -127, i32* %2, align 4
  br label %117

80:                                               ; preds = %59
  store i32 15, i32* %2, align 4
  br label %114

81:                                               ; preds = %64, %75
  %82 = phi i8 [ %78, %75 ], [ %66, %64 ]
  %83 = phi i8* [ %76, %75 ], [ %65, %64 ]
  store i8 %82, i8* %61, align 1
  %84 = getelementptr inbounds i8, i8* %61, i64 1
  %85 = add nsw i32 %60, -1
  %86 = icmp ult i8* %83, %57
  br i1 %86, label %59, label %87

87:                                               ; preds = %81, %56
  %88 = phi i8* [ %46, %56 ], [ %83, %81 ]
  %89 = phi i8* [ %47, %56 ], [ %84, %81 ]
  %90 = load i32, i32* %2, align 4
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %114, label %92

92:                                               ; preds = %87
  %93 = load i8*, i8** %8, align 8
  %94 = icmp ult i8* %88, %93
  br i1 %94, label %95, label %114

95:                                               ; preds = %92
  %96 = getelementptr inbounds i8, i8* %88, i64 1
  %97 = load i8, i8* %88, align 1
  %98 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 0
  store i8 %97, i8* %98, align 1
  %99 = zext i8 %97 to i32
  %100 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  store i32 %99, i32* %100, align 8
  store i8 1, i8* %18, align 8
  %101 = icmp sgt i8 %97, -1
  br i1 %101, label %111, label %102

102:                                              ; preds = %95
  %103 = add nsw i8 %97, 62
  %104 = icmp ult i8 %103, 51
  br i1 %104, label %105, label %111

105:                                              ; preds = %102
  %106 = icmp ugt i8 %97, -33
  %107 = zext i1 %106 to i32
  %108 = icmp ugt i8 %97, -17
  %109 = select i1 %108, i32 3, i32 2
  %110 = add nuw nsw i32 %109, %107
  br label %111

111:                                              ; preds = %105, %102, %95
  %112 = phi i32 [ 1, %95 ], [ %110, %105 ], [ 0, %102 ]
  %113 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 15
  store i32 %112, i32* %113, align 4
  br label %114

114:                                              ; preds = %80, %87, %111, %92
  %115 = phi i8* [ %89, %111 ], [ %89, %92 ], [ %89, %87 ], [ %61, %80 ]
  %116 = phi i8* [ %96, %111 ], [ %88, %92 ], [ %88, %87 ], [ %62, %80 ]
  store i8* %116, i8** %6, align 8
  store i8* %115, i8** %10, align 8
  br label %117

117:                                              ; preds = %114, %79, %44, %29
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL26_ASCIIToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %10 = bitcast i16** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = ptrtoint i16* %8 to i64
  %13 = sub i64 %11, %12
  %14 = lshr exact i64 %13, 1
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %17 = load i32*, i32** %16, align 8
  %18 = ptrtoint i8* %6 to i64
  %19 = ptrtoint i8* %4 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, %15
  %23 = select i1 %22, i32 %21, i32 %15
  %24 = icmp sgt i32 %23, 7
  br i1 %24, label %25, label %145

25:                                               ; preds = %2
  %26 = lshr i32 %23, 3
  br label %27

27:                                               ; preds = %69, %25
  %28 = phi i16* [ %8, %25 ], [ %71, %69 ]
  %29 = phi i32 [ %26, %25 ], [ %72, %69 ]
  %30 = phi i8* [ %4, %25 ], [ %70, %69 ]
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i16
  store i16 %32, i16* %28, align 2
  %33 = getelementptr inbounds i8, i8* %30, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %35, i16* %36, align 2
  %37 = or i8 %34, %31
  %38 = getelementptr inbounds i8, i8* %30, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %40, i16* %41, align 2
  %42 = or i8 %37, %39
  %43 = getelementptr inbounds i8, i8* %30, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %45, i16* %46, align 2
  %47 = or i8 %42, %44
  %48 = getelementptr inbounds i8, i8* %30, i64 4
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %50, i16* %51, align 2
  %52 = or i8 %47, %49
  %53 = getelementptr inbounds i8, i8* %30, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i16
  %56 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %55, i16* %56, align 2
  %57 = or i8 %52, %54
  %58 = getelementptr inbounds i8, i8* %30, i64 6
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %60, i16* %61, align 2
  %62 = or i8 %57, %59
  %63 = getelementptr inbounds i8, i8* %30, i64 7
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %65, i16* %66, align 2
  %67 = or i8 %62, %64
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %27
  %70 = getelementptr inbounds i8, i8* %30, i64 8
  %71 = getelementptr inbounds i16, i16* %28, i64 8
  %72 = add nsw i32 %29, -1
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %27, label %74

74:                                               ; preds = %27, %69
  %75 = phi i16* [ %28, %27 ], [ %71, %69 ]
  %76 = phi i32 [ %29, %27 ], [ %72, %69 ]
  %77 = phi i8* [ %30, %27 ], [ %70, %69 ]
  %78 = sub nsw i32 %26, %76
  %79 = shl nsw i32 %78, 3
  %80 = sub nsw i32 %23, %79
  %81 = icmp eq i32* %17, null
  br i1 %81, label %145, label %82

82:                                               ; preds = %74
  %83 = sext i32 %79 to i64
  %84 = getelementptr inbounds i16, i16* %8, i64 %83
  %85 = icmp sgt i32 %78, 0
  br i1 %85, label %86, label %145

86:                                               ; preds = %82
  %87 = sub i32 %26, %76
  %88 = and i32 %87, 1
  %89 = add i32 %76, 1
  %90 = icmp eq i32 %26, %89
  br i1 %90, label %125, label %91

91:                                               ; preds = %86
  %92 = sub i32 %87, %88
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i32 [ 0, %91 ], [ %120, %93 ]
  %95 = phi i32* [ %17, %91 ], [ %122, %93 ]
  %96 = phi i32 [ %92, %91 ], [ %123, %93 ]
  store i32 %94, i32* %95, align 4
  %97 = getelementptr inbounds i32, i32* %95, i64 1
  %98 = insertelement <4 x i32> undef, i32 %94, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = or <4 x i32> %99, <i32 1, i32 2, i32 3, i32 4>
  %101 = or i32 %94, 5
  %102 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4
  %103 = or i32 %94, 6
  %104 = getelementptr inbounds i32, i32* %95, i64 5
  store i32 %101, i32* %104, align 4
  %105 = or i32 %94, 7
  %106 = getelementptr inbounds i32, i32* %95, i64 6
  store i32 %103, i32* %106, align 4
  %107 = or i32 %94, 8
  %108 = getelementptr inbounds i32, i32* %95, i64 7
  store i32 %105, i32* %108, align 4
  %109 = getelementptr inbounds i32, i32* %95, i64 8
  store i32 %107, i32* %109, align 4
  %110 = getelementptr inbounds i32, i32* %95, i64 9
  %111 = insertelement <4 x i32> undef, i32 %107, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = or <4 x i32> %112, <i32 1, i32 2, i32 3, i32 4>
  %114 = or i32 %94, 13
  %115 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %115, align 4
  %116 = or i32 %94, 14
  %117 = getelementptr inbounds i32, i32* %95, i64 13
  store i32 %114, i32* %117, align 4
  %118 = or i32 %94, 15
  %119 = getelementptr inbounds i32, i32* %95, i64 14
  store i32 %116, i32* %119, align 4
  %120 = add nuw nsw i32 %94, 16
  %121 = getelementptr inbounds i32, i32* %95, i64 15
  store i32 %118, i32* %121, align 4
  %122 = getelementptr inbounds i32, i32* %95, i64 16
  %123 = add i32 %96, -2
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %93

125:                                              ; preds = %93, %86
  %126 = phi i32 [ undef, %86 ], [ %120, %93 ]
  %127 = phi i32* [ undef, %86 ], [ %122, %93 ]
  %128 = phi i32 [ 0, %86 ], [ %120, %93 ]
  %129 = phi i32* [ %17, %86 ], [ %122, %93 ]
  %130 = icmp eq i32 %88, 0
  br i1 %130, label %145, label %131

131:                                              ; preds = %125
  store i32 %128, i32* %129, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 1
  %133 = insertelement <4 x i32> undef, i32 %128, i32 0
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> zeroinitializer
  %135 = or <4 x i32> %134, <i32 1, i32 2, i32 3, i32 4>
  %136 = or i32 %128, 5
  %137 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %137, align 4
  %138 = or i32 %128, 6
  %139 = getelementptr inbounds i32, i32* %129, i64 5
  store i32 %136, i32* %139, align 4
  %140 = or i32 %128, 7
  %141 = getelementptr inbounds i32, i32* %129, i64 6
  store i32 %138, i32* %141, align 4
  %142 = getelementptr inbounds i32, i32* %129, i64 7
  store i32 %140, i32* %142, align 4
  %143 = getelementptr inbounds i32, i32* %129, i64 8
  %144 = add nuw nsw i32 %128, 8
  br label %145

145:                                              ; preds = %131, %125, %82, %74, %2
  %146 = phi i16* [ %8, %2 ], [ %75, %74 ], [ %75, %82 ], [ %75, %125 ], [ %75, %131 ]
  %147 = phi i16* [ %8, %2 ], [ %8, %74 ], [ %84, %82 ], [ %84, %125 ], [ %84, %131 ]
  %148 = phi i32 [ %23, %2 ], [ %80, %74 ], [ %80, %82 ], [ %80, %125 ], [ %80, %131 ]
  %149 = phi i32* [ %17, %2 ], [ null, %74 ], [ %17, %82 ], [ %127, %125 ], [ %143, %131 ]
  %150 = phi i32 [ 0, %2 ], [ 0, %74 ], [ 0, %82 ], [ %126, %125 ], [ %144, %131 ]
  %151 = phi i8* [ %4, %2 ], [ %77, %74 ], [ %77, %82 ], [ %77, %125 ], [ %77, %131 ]
  %152 = icmp sgt i32 %148, 0
  br i1 %152, label %153, label %170

153:                                              ; preds = %145, %160
  %154 = phi i8* [ %157, %160 ], [ %151, %145 ]
  %155 = phi i32 [ %163, %160 ], [ %148, %145 ]
  %156 = phi i16* [ %162, %160 ], [ %146, %145 ]
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = load i8, i8* %154, align 1
  %159 = icmp sgt i8 %158, -1
  br i1 %159, label %160, label %165

160:                                              ; preds = %153
  %161 = zext i8 %158 to i16
  %162 = getelementptr inbounds i16, i16* %156, i64 1
  store i16 %161, i16* %156, align 2
  %163 = add nsw i32 %155, -1
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %153, label %170

165:                                              ; preds = %153
  %166 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %167 = load %struct.UConverter*, %struct.UConverter** %166, align 8
  %168 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %167, i64 0, i32 13, i64 0
  store i8 %158, i8* %168, align 1
  %169 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %167, i64 0, i32 12
  store i8 1, i8* %169, align 8
  store i32 12, i32* %1, align 4
  br label %178

170:                                              ; preds = %160, %145
  %171 = phi i16* [ %146, %145 ], [ %162, %160 ]
  %172 = phi i8* [ %151, %145 ], [ %157, %160 ]
  %173 = icmp ult i8* %172, %6
  br i1 %173, label %174, label %178

174:                                              ; preds = %170
  %175 = load i16*, i16** %9, align 8
  %176 = icmp ult i16* %171, %175
  br i1 %176, label %178, label %177

177:                                              ; preds = %174
  store i32 15, i32* %1, align 4
  br label %178

178:                                              ; preds = %174, %170, %177, %165
  %179 = phi i16* [ %171, %174 ], [ %171, %170 ], [ %171, %177 ], [ %156, %165 ]
  %180 = phi i8* [ %172, %174 ], [ %172, %170 ], [ %172, %177 ], [ %157, %165 ]
  %181 = icmp eq i32* %149, null
  br i1 %181, label %271, label %182

182:                                              ; preds = %178
  %183 = ptrtoint i16* %179 to i64
  %184 = ptrtoint i16* %147 to i64
  %185 = sub i64 %183, %184
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %271, label %187

187:                                              ; preds = %182
  %188 = ashr exact i64 %185, 1
  %189 = icmp ult i64 %188, 8
  br i1 %189, label %259, label %190

190:                                              ; preds = %187
  %191 = and i64 %188, -8
  %192 = sub nsw i64 %188, %191
  %193 = trunc i64 %191 to i32
  %194 = add i32 %150, %193
  %195 = getelementptr i32, i32* %149, i64 %191
  %196 = insertelement <4 x i32> undef, i32 %150, i32 0
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> zeroinitializer
  %198 = add <4 x i32> %197, <i32 0, i32 1, i32 2, i32 3>
  %199 = add nsw i64 %191, -8
  %200 = lshr exact i64 %199, 3
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 24
  br i1 %203, label %240, label %204

204:                                              ; preds = %190
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %236, %206 ]
  %208 = phi <4 x i32> [ %198, %204 ], [ %237, %206 ]
  %209 = phi i64 [ %205, %204 ], [ %238, %206 ]
  %210 = add <4 x i32> %208, <i32 4, i32 4, i32 4, i32 4>
  %211 = getelementptr i32, i32* %149, i64 %207
  %212 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %212, align 4
  %213 = getelementptr i32, i32* %211, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %214, align 4
  %215 = or i64 %207, 8
  %216 = add <4 x i32> %208, <i32 8, i32 8, i32 8, i32 8>
  %217 = add <4 x i32> %208, <i32 12, i32 12, i32 12, i32 12>
  %218 = getelementptr i32, i32* %149, i64 %215
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %219, align 4
  %220 = getelementptr i32, i32* %218, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %221, align 4
  %222 = or i64 %207, 16
  %223 = add <4 x i32> %208, <i32 16, i32 16, i32 16, i32 16>
  %224 = add <4 x i32> %208, <i32 20, i32 20, i32 20, i32 20>
  %225 = getelementptr i32, i32* %149, i64 %222
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4
  %227 = getelementptr i32, i32* %225, i64 4
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %228, align 4
  %229 = or i64 %207, 24
  %230 = add <4 x i32> %208, <i32 24, i32 24, i32 24, i32 24>
  %231 = add <4 x i32> %208, <i32 28, i32 28, i32 28, i32 28>
  %232 = getelementptr i32, i32* %149, i64 %229
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4
  %234 = getelementptr i32, i32* %232, i64 4
  %235 = bitcast i32* %234 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %235, align 4
  %236 = add i64 %207, 32
  %237 = add <4 x i32> %208, <i32 32, i32 32, i32 32, i32 32>
  %238 = add i64 %209, -4
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %206, !llvm.loop !18

240:                                              ; preds = %206, %190
  %241 = phi i64 [ 0, %190 ], [ %236, %206 ]
  %242 = phi <4 x i32> [ %198, %190 ], [ %237, %206 ]
  %243 = icmp eq i64 %202, 0
  br i1 %243, label %257, label %244

244:                                              ; preds = %240, %244
  %245 = phi i64 [ %253, %244 ], [ %241, %240 ]
  %246 = phi <4 x i32> [ %254, %244 ], [ %242, %240 ]
  %247 = phi i64 [ %255, %244 ], [ %202, %240 ]
  %248 = add <4 x i32> %246, <i32 4, i32 4, i32 4, i32 4>
  %249 = getelementptr i32, i32* %149, i64 %245
  %250 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %246, <4 x i32>* %250, align 4
  %251 = getelementptr i32, i32* %249, i64 4
  %252 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %252, align 4
  %253 = add i64 %245, 8
  %254 = add <4 x i32> %246, <i32 8, i32 8, i32 8, i32 8>
  %255 = add i64 %247, -1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %244, !llvm.loop !19

257:                                              ; preds = %244, %240
  %258 = icmp eq i64 %188, %191
  br i1 %258, label %271, label %259

259:                                              ; preds = %257, %187
  %260 = phi i64 [ %188, %187 ], [ %192, %257 ]
  %261 = phi i32 [ %150, %187 ], [ %194, %257 ]
  %262 = phi i32* [ %149, %187 ], [ %195, %257 ]
  br label %263

263:                                              ; preds = %259, %263
  %264 = phi i64 [ %269, %263 ], [ %260, %259 ]
  %265 = phi i32 [ %267, %263 ], [ %261, %259 ]
  %266 = phi i32* [ %268, %263 ], [ %262, %259 ]
  %267 = add nuw nsw i32 %265, 1
  %268 = getelementptr inbounds i32, i32* %266, i64 1
  store i32 %265, i32* %266, align 4
  %269 = add i64 %264, -1
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %263, !llvm.loop !20

271:                                              ; preds = %263, %257, %182, %178
  %272 = phi i32* [ null, %178 ], [ %149, %182 ], [ %195, %257 ], [ %268, %263 ]
  store i8* %180, i8** %3, align 8
  store i16* %179, i16** %7, align 8
  store i32* %272, i32** %16, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL18_ASCIIGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %19

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  %10 = load i8, i8* %4, align 1
  store i8* %9, i8** %3, align 8
  %11 = icmp sgt i8 %10, -1
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = zext i8 %10 to i32
  br label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %16 = load %struct.UConverter*, %struct.UConverter** %15, align 8
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 0
  store i8 %10, i8* %17, align 1
  %18 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 12
  store i8 1, i8* %18, align 8
  store i32 12, i32* %1, align 4
  br label %20

19:                                               ; preds = %2
  store i32 8, i32* %1, align 4
  br label %20

20:                                               ; preds = %19, %14, %12
  %21 = phi i32 [ %13, %12 ], [ 65535, %14 ], [ 65535, %19 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19_ASCIIGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode(%struct.UConverter* nocapture readnone, %struct.USetAdder* nocapture readonly, i32, i32* nocapture readnone) #1 {
  %5 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %6 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %5, align 8
  %7 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %8 = load %struct.USet*, %struct.USet** %7, align 8
  tail call void %6(%struct.USet* %8, i32 0, i32 127) #2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL18ucnv_ASCIIFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %5 = load %struct.UConverter*, %struct.UConverter** %4, align 8
  %6 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 12
  %7 = load i8, i8* %6, align 8
  %8 = icmp sgt i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store i32 -127, i32* %2, align 4
  br label %138

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = ptrtoint i8* %16 to i64
  %21 = sub i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = ptrtoint i8* %14 to i64
  %24 = ptrtoint i8* %12 to i64
  %25 = sub i64 %23, %24
  %26 = trunc i64 %25 to i32
  %27 = icmp slt i32 %26, %22
  %28 = select i1 %27, i32 %26, i32 %22
  %29 = icmp sgt i32 %28, 15
  br i1 %29, label %30, label %110

30:                                               ; preds = %10
  %31 = lshr i32 %28, 4
  br label %32

32:                                               ; preds = %100, %30
  %33 = phi i8* [ %12, %30 ], [ %95, %100 ]
  %34 = phi i8* [ %16, %30 ], [ %97, %100 ]
  %35 = phi i32 [ %31, %30 ], [ %101, %100 ]
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = load i8, i8* %33, align 1
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %37, i8* %34, align 1
  %39 = getelementptr inbounds i8, i8* %33, i64 2
  %40 = load i8, i8* %36, align 1
  %41 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 %40, i8* %38, align 1
  %42 = or i8 %40, %37
  %43 = getelementptr inbounds i8, i8* %33, i64 3
  %44 = load i8, i8* %39, align 1
  %45 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %44, i8* %41, align 1
  %46 = or i8 %42, %44
  %47 = getelementptr inbounds i8, i8* %33, i64 4
  %48 = load i8, i8* %43, align 1
  %49 = getelementptr inbounds i8, i8* %34, i64 4
  store i8 %48, i8* %45, align 1
  %50 = or i8 %46, %48
  %51 = getelementptr inbounds i8, i8* %33, i64 5
  %52 = load i8, i8* %47, align 1
  %53 = getelementptr inbounds i8, i8* %34, i64 5
  store i8 %52, i8* %49, align 1
  %54 = or i8 %50, %52
  %55 = getelementptr inbounds i8, i8* %33, i64 6
  %56 = load i8, i8* %51, align 1
  %57 = getelementptr inbounds i8, i8* %34, i64 6
  store i8 %56, i8* %53, align 1
  %58 = or i8 %54, %56
  %59 = getelementptr inbounds i8, i8* %33, i64 7
  %60 = load i8, i8* %55, align 1
  %61 = getelementptr inbounds i8, i8* %34, i64 7
  store i8 %60, i8* %57, align 1
  %62 = or i8 %58, %60
  %63 = getelementptr inbounds i8, i8* %33, i64 8
  %64 = load i8, i8* %59, align 1
  %65 = getelementptr inbounds i8, i8* %34, i64 8
  store i8 %64, i8* %61, align 1
  %66 = or i8 %62, %64
  %67 = getelementptr inbounds i8, i8* %33, i64 9
  %68 = load i8, i8* %63, align 1
  %69 = getelementptr inbounds i8, i8* %34, i64 9
  store i8 %68, i8* %65, align 1
  %70 = or i8 %66, %68
  %71 = getelementptr inbounds i8, i8* %33, i64 10
  %72 = load i8, i8* %67, align 1
  %73 = getelementptr inbounds i8, i8* %34, i64 10
  store i8 %72, i8* %69, align 1
  %74 = or i8 %70, %72
  %75 = getelementptr inbounds i8, i8* %33, i64 11
  %76 = load i8, i8* %71, align 1
  %77 = getelementptr inbounds i8, i8* %34, i64 11
  store i8 %76, i8* %73, align 1
  %78 = or i8 %74, %76
  %79 = getelementptr inbounds i8, i8* %33, i64 12
  %80 = load i8, i8* %75, align 1
  %81 = getelementptr inbounds i8, i8* %34, i64 12
  store i8 %80, i8* %77, align 1
  %82 = or i8 %78, %80
  %83 = getelementptr inbounds i8, i8* %33, i64 13
  %84 = load i8, i8* %79, align 1
  %85 = getelementptr inbounds i8, i8* %34, i64 13
  store i8 %84, i8* %81, align 1
  %86 = or i8 %82, %84
  %87 = getelementptr inbounds i8, i8* %33, i64 14
  %88 = load i8, i8* %83, align 1
  %89 = getelementptr inbounds i8, i8* %34, i64 14
  store i8 %88, i8* %85, align 1
  %90 = or i8 %86, %88
  %91 = getelementptr inbounds i8, i8* %33, i64 15
  %92 = load i8, i8* %87, align 1
  %93 = getelementptr inbounds i8, i8* %34, i64 15
  store i8 %92, i8* %89, align 1
  %94 = or i8 %90, %92
  %95 = getelementptr inbounds i8, i8* %33, i64 16
  %96 = load i8, i8* %91, align 1
  %97 = getelementptr inbounds i8, i8* %34, i64 16
  store i8 %96, i8* %93, align 1
  %98 = or i8 %94, %96
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %32
  %101 = add nsw i32 %35, -1
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %32, label %103

103:                                              ; preds = %32, %100
  %104 = phi i8* [ %95, %100 ], [ %33, %32 ]
  %105 = phi i8* [ %97, %100 ], [ %34, %32 ]
  %106 = phi i32 [ %101, %100 ], [ %35, %32 ]
  %107 = sub nsw i32 %31, %106
  %108 = shl nsw i32 %107, 4
  %109 = sub nsw i32 %28, %108
  br label %110

110:                                              ; preds = %103, %10
  %111 = phi i8* [ %104, %103 ], [ %12, %10 ]
  %112 = phi i8* [ %105, %103 ], [ %16, %10 ]
  %113 = phi i32 [ %109, %103 ], [ %28, %10 ]
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %110, %121
  %116 = phi i32 [ %124, %121 ], [ %113, %110 ]
  %117 = phi i8* [ %123, %121 ], [ %112, %110 ]
  %118 = phi i8* [ %122, %121 ], [ %111, %110 ]
  %119 = load i8, i8* %118, align 1
  %120 = icmp sgt i8 %119, -1
  br i1 %120, label %121, label %126

121:                                              ; preds = %115
  %122 = getelementptr inbounds i8, i8* %118, i64 1
  %123 = getelementptr inbounds i8, i8* %117, i64 1
  store i8 %119, i8* %117, align 1
  %124 = add nsw i32 %116, -1
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %115, label %127

126:                                              ; preds = %115
  store i32 -127, i32* %2, align 4
  br label %135

127:                                              ; preds = %121, %110
  %128 = phi i8* [ %111, %110 ], [ %122, %121 ]
  %129 = phi i8* [ %112, %110 ], [ %123, %121 ]
  %130 = icmp ult i8* %128, %14
  br i1 %130, label %131, label %135

131:                                              ; preds = %127
  %132 = load i8*, i8** %17, align 8
  %133 = icmp ult i8* %129, %132
  br i1 %133, label %135, label %134

134:                                              ; preds = %131
  store i32 15, i32* %2, align 4
  br label %135

135:                                              ; preds = %131, %127, %134, %126
  %136 = phi i8* [ %128, %131 ], [ %128, %127 ], [ %128, %134 ], [ %118, %126 ]
  %137 = phi i8* [ %129, %131 ], [ %129, %127 ], [ %129, %134 ], [ %117, %126 ]
  store i8* %136, i8** %11, align 8
  store i8* %137, i8** %15, align 8
  br label %138

138:                                              ; preds = %135, %9
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14, !8}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !12}
!17 = distinct !{!17, !14, !8}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !12}
!20 = distinct !{!20, !14, !8}
