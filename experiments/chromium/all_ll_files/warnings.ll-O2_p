; ModuleID = '../../third_party/nasm/asm/warnings.c'
source_filename = "../../third_party/nasm/asm/warnings.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.warning_alias = type { i8*, i32 }

@.str = private unnamed_addr constant [4 x i8] c"bnd\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"db-empty\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"environment\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"float-denorm\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"float-overflow\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"float-toolong\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"float-underflow\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"hle\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"label-orphan\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"label-redef\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"label-redef-late\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"lock\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"macro-defaults\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"macro-params-legacy\00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"macro-params-multi\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"macro-params-single\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"negative-rep\00", align 1
@.str.17 = private unnamed_addr constant [16 x i8] c"number-overflow\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"obsolete-nop\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"obsolete-removed\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"obsolete-valid\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"phase\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"pragma-bad\00", align 1
@.str.23 = private unnamed_addr constant [13 x i8] c"pragma-empty\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"pragma-na\00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c"pragma-unknown\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"ptr\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"regsize\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"unknown-warning\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"warn-stack-empty\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"zeroing\00", align 1
@.str.32 = private unnamed_addr constant [11 x i8] c"zext-reloc\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"other\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@warning_name = hidden local_unnamed_addr constant [36 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0)], align 16
@.str.35 = private unnamed_addr constant [11 x i8] c"bad-pragma\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"not-my-pragma\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"orphan-labels\00", align 1
@.str.38 = private unnamed_addr constant [15 x i8] c"unknown-pragma\00", align 1
@warning_alias = hidden local_unnamed_addr constant [39 x %struct.warning_alias] [%struct.warning_alias { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0), i32 35 }, %struct.warning_alias { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i32 0, i32 0), i32 23 }, %struct.warning_alias { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 1 }, %struct.warning_alias { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 2 }, %struct.warning_alias { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i32 3 }, %struct.warning_alias { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32 4 }, %struct.warning_alias { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i32 5 }, %struct.warning_alias { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i32 6 }, %struct.warning_alias { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i32 7 }, %struct.warning_alias { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i32 8 }, %struct.warning_alias { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), i32 9 }, %struct.warning_alias { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i32 10 }, %struct.warning_alias { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i32 0, i32 0), i32 11 }, %struct.warning_alias { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i32 12 }, %struct.warning_alias { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i32 13 }, %struct.warning_alias { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 14 }, %struct.warning_alias { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i32 15 }, %struct.warning_alias { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i32 16 }, %struct.warning_alias { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i32 0, i32 0), i32 17 }, %struct.warning_alias { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i32 25 }, %struct.warning_alias { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i32 0, i32 0), i32 18 }, %struct.warning_alias { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i32 19 }, %struct.warning_alias { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i32 20 }, %struct.warning_alias { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i32 21 }, %struct.warning_alias { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i32 0, i32 0), i32 9 }, %struct.warning_alias { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0), i32 34 }, %struct.warning_alias { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i32 22 }, %struct.warning_alias { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i32 23 }, %struct.warning_alias { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i32 0, i32 0), i32 24 }, %struct.warning_alias { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i32 25 }, %struct.warning_alias { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i32 0, i32 0), i32 26 }, %struct.warning_alias { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i32 27 }, %struct.warning_alias { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), i32 28 }, %struct.warning_alias { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i32 0, i32 0), i32 26 }, %struct.warning_alias { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0), i32 29 }, %struct.warning_alias { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i32 30 }, %struct.warning_alias { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i32 0, i32 0), i32 31 }, %struct.warning_alias { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i32 32 }, %struct.warning_alias { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i32 0, i32 0), i32 33 }], align 16
@.str.39 = private unnamed_addr constant [21 x i8] c"invalid BND prefixes\00", align 1
@.str.40 = private unnamed_addr constant [32 x i8] c"no operand for data declaration\00", align 1
@.str.41 = private unnamed_addr constant [33 x i8] c"nonexistent environment variable\00", align 1
@.str.42 = private unnamed_addr constant [24 x i8] c"floating point denormal\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"floating point overflow\00", align 1
@.str.44 = private unnamed_addr constant [41 x i8] c"too many digits in floating-point number\00", align 1
@.str.45 = private unnamed_addr constant [25 x i8] c"floating point underflow\00", align 1
@.str.46 = private unnamed_addr constant [21 x i8] c"invalid HLE prefixes\00", align 1
@.str.47 = private unnamed_addr constant [43 x i8] c"labels alone on lines without trailing `:'\00", align 1
@.str.48 = private unnamed_addr constant [38 x i8] c"label redefined to an identical value\00", align 1
@.str.49 = private unnamed_addr constant [41 x i8] c"label (re)defined during code generation\00", align 1
@.str.50 = private unnamed_addr constant [39 x i8] c"LOCK prefix on unlockable instructions\00", align 1
@.str.51 = private unnamed_addr constant [50 x i8] c"macros with more default than optional parameters\00", align 1
@.str.52 = private unnamed_addr constant [55 x i8] c"improperly calling multi-line macro for legacy support\00", align 1
@.str.53 = private unnamed_addr constant [50 x i8] c"multi-line macro calls with wrong parameter count\00", align 1
@.str.54 = private unnamed_addr constant [51 x i8] c"single-line macro calls with wrong parameter count\00", align 1
@.str.55 = private unnamed_addr constant [20 x i8] c"regative %rep count\00", align 1
@.str.56 = private unnamed_addr constant [30 x i8] c"numeric constant does not fit\00", align 1
@.str.57 = private unnamed_addr constant [53 x i8] c"instruction obsolete and is a noop on the target CPU\00", align 1
@.str.58 = private unnamed_addr constant [51 x i8] c"instruction obsolete and removed on the target CPU\00", align 1
@.str.59 = private unnamed_addr constant [49 x i8] c"instruction obsolete but valid on the target CPU\00", align 1
@.str.60 = private unnamed_addr constant [33 x i8] c"phase error during stabilization\00", align 1
@.str.61 = private unnamed_addr constant [18 x i8] c"malformed %pragma\00", align 1
@.str.62 = private unnamed_addr constant [24 x i8] c"empty %pragma directive\00", align 1
@.str.63 = private unnamed_addr constant [43 x i8] c"%pragma not applicable to this compilation\00", align 1
@.str.64 = private unnamed_addr constant [38 x i8] c"unknown %pragma facility or directive\00", align 1
@.str.65 = private unnamed_addr constant [42 x i8] c"non-NASM keyword used in other assemblers\00", align 1
@.str.66 = private unnamed_addr constant [36 x i8] c"register size specification ignored\00", align 1
@.str.67 = private unnamed_addr constant [46 x i8] c"unknown warning in -W/-w or warning directive\00", align 1
@.str.68 = private unnamed_addr constant [20 x i8] c"%warning directives\00", align 1
@.str.69 = private unnamed_addr constant [20 x i8] c"warning stack empty\00", align 1
@.str.70 = private unnamed_addr constant [41 x i8] c"RESx in initialized section becomes zero\00", align 1
@.str.71 = private unnamed_addr constant [48 x i8] c"relocation zero-extended to match output format\00", align 1
@.str.72 = private unnamed_addr constant [44 x i8] c"any warning not specifially mentioned above\00", align 1
@.str.73 = private unnamed_addr constant [22 x i8] c"all possible warnings\00", align 1
@warning_help = hidden local_unnamed_addr constant [36 x i8*] [i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.73, i32 0, i32 0)], align 16
@warning_default = hidden local_unnamed_addr constant [35 x i8] c"\01\01\01\01\00\01\01\00\01\01\00\03\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00\01\01\00\01\01\01\01\01", align 16
@warning_state = common hidden local_unnamed_addr global [35 x i8] zeroinitializer, align 16

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
